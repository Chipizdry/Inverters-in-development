
U_I_Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000553c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005740  08005740  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005740  08005740  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005740  08005740  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00006740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005744  08005744  00006744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005748  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000060  080057a8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  080057a8  00007600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e10  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b19  00000000  00000000  00027e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010d3b  00000000  00000000  0002b9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0003c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118e  00000000  00000000  0003d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001815b  00000000  00000000  0003eb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021fbc  00000000  00000000  00056c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009798f  00000000  00000000  00078c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001105dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000372c  00000000  00000000  00110620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00113d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000060 	.word	0x20000060
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080055dc 	.word	0x080055dc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000064 	.word	0x20000064
 80000fc:	080055dc 	.word	0x080055dc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fbab 	bl	8000b50 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 fb33 	bl	8000a70 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fb9d 	bl	8000b50 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb93 	bl	8000b50 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb41 	bl	8000ac0 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fb37 	bl	8000ac0 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__aeabi_fadd>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	024b      	lsls	r3, r1, #9
 8000464:	0a5a      	lsrs	r2, r3, #9
 8000466:	4694      	mov	ip, r2
 8000468:	004a      	lsls	r2, r1, #1
 800046a:	0fc9      	lsrs	r1, r1, #31
 800046c:	46ce      	mov	lr, r9
 800046e:	4647      	mov	r7, r8
 8000470:	4689      	mov	r9, r1
 8000472:	0045      	lsls	r5, r0, #1
 8000474:	0246      	lsls	r6, r0, #9
 8000476:	0e2d      	lsrs	r5, r5, #24
 8000478:	0e12      	lsrs	r2, r2, #24
 800047a:	b580      	push	{r7, lr}
 800047c:	0999      	lsrs	r1, r3, #6
 800047e:	0a77      	lsrs	r7, r6, #9
 8000480:	0fc4      	lsrs	r4, r0, #31
 8000482:	09b6      	lsrs	r6, r6, #6
 8000484:	1aab      	subs	r3, r5, r2
 8000486:	454c      	cmp	r4, r9
 8000488:	d020      	beq.n	80004cc <__aeabi_fadd+0x6c>
 800048a:	2b00      	cmp	r3, #0
 800048c:	dd0c      	ble.n	80004a8 <__aeabi_fadd+0x48>
 800048e:	2a00      	cmp	r2, #0
 8000490:	d134      	bne.n	80004fc <__aeabi_fadd+0x9c>
 8000492:	2900      	cmp	r1, #0
 8000494:	d02a      	beq.n	80004ec <__aeabi_fadd+0x8c>
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	2b01      	cmp	r3, #1
 800049a:	d100      	bne.n	800049e <__aeabi_fadd+0x3e>
 800049c:	e08f      	b.n	80005be <__aeabi_fadd+0x15e>
 800049e:	2bff      	cmp	r3, #255	@ 0xff
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x44>
 80004a2:	e0cd      	b.n	8000640 <__aeabi_fadd+0x1e0>
 80004a4:	0013      	movs	r3, r2
 80004a6:	e02f      	b.n	8000508 <__aeabi_fadd+0xa8>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d060      	beq.n	800056e <__aeabi_fadd+0x10e>
 80004ac:	1b53      	subs	r3, r2, r5
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d000      	beq.n	80004b4 <__aeabi_fadd+0x54>
 80004b2:	e0ee      	b.n	8000692 <__aeabi_fadd+0x232>
 80004b4:	2e00      	cmp	r6, #0
 80004b6:	d100      	bne.n	80004ba <__aeabi_fadd+0x5a>
 80004b8:	e13e      	b.n	8000738 <__aeabi_fadd+0x2d8>
 80004ba:	1e5c      	subs	r4, r3, #1
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d100      	bne.n	80004c2 <__aeabi_fadd+0x62>
 80004c0:	e16b      	b.n	800079a <__aeabi_fadd+0x33a>
 80004c2:	2bff      	cmp	r3, #255	@ 0xff
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fadd+0x68>
 80004c6:	e0b9      	b.n	800063c <__aeabi_fadd+0x1dc>
 80004c8:	0023      	movs	r3, r4
 80004ca:	e0e7      	b.n	800069c <__aeabi_fadd+0x23c>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fadd+0x72>
 80004d0:	e0a4      	b.n	800061c <__aeabi_fadd+0x1bc>
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d069      	beq.n	80005aa <__aeabi_fadd+0x14a>
 80004d6:	2dff      	cmp	r5, #255	@ 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x7c>
 80004da:	e0b1      	b.n	8000640 <__aeabi_fadd+0x1e0>
 80004dc:	2280      	movs	r2, #128	@ 0x80
 80004de:	04d2      	lsls	r2, r2, #19
 80004e0:	4311      	orrs	r1, r2
 80004e2:	2b1b      	cmp	r3, #27
 80004e4:	dc00      	bgt.n	80004e8 <__aeabi_fadd+0x88>
 80004e6:	e0e9      	b.n	80006bc <__aeabi_fadd+0x25c>
 80004e8:	002b      	movs	r3, r5
 80004ea:	3605      	adds	r6, #5
 80004ec:	08f7      	lsrs	r7, r6, #3
 80004ee:	2bff      	cmp	r3, #255	@ 0xff
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x94>
 80004f2:	e0a5      	b.n	8000640 <__aeabi_fadd+0x1e0>
 80004f4:	027a      	lsls	r2, r7, #9
 80004f6:	0a52      	lsrs	r2, r2, #9
 80004f8:	b2d8      	uxtb	r0, r3
 80004fa:	e030      	b.n	800055e <__aeabi_fadd+0xfe>
 80004fc:	2dff      	cmp	r5, #255	@ 0xff
 80004fe:	d100      	bne.n	8000502 <__aeabi_fadd+0xa2>
 8000500:	e09e      	b.n	8000640 <__aeabi_fadd+0x1e0>
 8000502:	2280      	movs	r2, #128	@ 0x80
 8000504:	04d2      	lsls	r2, r2, #19
 8000506:	4311      	orrs	r1, r2
 8000508:	2001      	movs	r0, #1
 800050a:	2b1b      	cmp	r3, #27
 800050c:	dc08      	bgt.n	8000520 <__aeabi_fadd+0xc0>
 800050e:	0008      	movs	r0, r1
 8000510:	2220      	movs	r2, #32
 8000512:	40d8      	lsrs	r0, r3
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	4099      	lsls	r1, r3
 8000518:	000b      	movs	r3, r1
 800051a:	1e5a      	subs	r2, r3, #1
 800051c:	4193      	sbcs	r3, r2
 800051e:	4318      	orrs	r0, r3
 8000520:	1a36      	subs	r6, r6, r0
 8000522:	0173      	lsls	r3, r6, #5
 8000524:	d400      	bmi.n	8000528 <__aeabi_fadd+0xc8>
 8000526:	e071      	b.n	800060c <__aeabi_fadd+0x1ac>
 8000528:	01b6      	lsls	r6, r6, #6
 800052a:	09b7      	lsrs	r7, r6, #6
 800052c:	0038      	movs	r0, r7
 800052e:	f000 ff9b 	bl	8001468 <__clzsi2>
 8000532:	003b      	movs	r3, r7
 8000534:	3805      	subs	r0, #5
 8000536:	4083      	lsls	r3, r0
 8000538:	4285      	cmp	r5, r0
 800053a:	dd4d      	ble.n	80005d8 <__aeabi_fadd+0x178>
 800053c:	4eb4      	ldr	r6, [pc, #720]	@ (8000810 <__aeabi_fadd+0x3b0>)
 800053e:	1a2d      	subs	r5, r5, r0
 8000540:	401e      	ands	r6, r3
 8000542:	075a      	lsls	r2, r3, #29
 8000544:	d068      	beq.n	8000618 <__aeabi_fadd+0x1b8>
 8000546:	220f      	movs	r2, #15
 8000548:	4013      	ands	r3, r2
 800054a:	2b04      	cmp	r3, #4
 800054c:	d064      	beq.n	8000618 <__aeabi_fadd+0x1b8>
 800054e:	3604      	adds	r6, #4
 8000550:	0173      	lsls	r3, r6, #5
 8000552:	d561      	bpl.n	8000618 <__aeabi_fadd+0x1b8>
 8000554:	1c68      	adds	r0, r5, #1
 8000556:	2dfe      	cmp	r5, #254	@ 0xfe
 8000558:	d154      	bne.n	8000604 <__aeabi_fadd+0x1a4>
 800055a:	20ff      	movs	r0, #255	@ 0xff
 800055c:	2200      	movs	r2, #0
 800055e:	05c0      	lsls	r0, r0, #23
 8000560:	4310      	orrs	r0, r2
 8000562:	07e4      	lsls	r4, r4, #31
 8000564:	4320      	orrs	r0, r4
 8000566:	bcc0      	pop	{r6, r7}
 8000568:	46b9      	mov	r9, r7
 800056a:	46b0      	mov	r8, r6
 800056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056e:	22fe      	movs	r2, #254	@ 0xfe
 8000570:	4690      	mov	r8, r2
 8000572:	1c68      	adds	r0, r5, #1
 8000574:	0002      	movs	r2, r0
 8000576:	4640      	mov	r0, r8
 8000578:	4210      	tst	r0, r2
 800057a:	d16b      	bne.n	8000654 <__aeabi_fadd+0x1f4>
 800057c:	2d00      	cmp	r5, #0
 800057e:	d000      	beq.n	8000582 <__aeabi_fadd+0x122>
 8000580:	e0dd      	b.n	800073e <__aeabi_fadd+0x2de>
 8000582:	2e00      	cmp	r6, #0
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x128>
 8000586:	e102      	b.n	800078e <__aeabi_fadd+0x32e>
 8000588:	2900      	cmp	r1, #0
 800058a:	d0b3      	beq.n	80004f4 <__aeabi_fadd+0x94>
 800058c:	2280      	movs	r2, #128	@ 0x80
 800058e:	1a77      	subs	r7, r6, r1
 8000590:	04d2      	lsls	r2, r2, #19
 8000592:	4217      	tst	r7, r2
 8000594:	d100      	bne.n	8000598 <__aeabi_fadd+0x138>
 8000596:	e136      	b.n	8000806 <__aeabi_fadd+0x3a6>
 8000598:	464c      	mov	r4, r9
 800059a:	1b8e      	subs	r6, r1, r6
 800059c:	d061      	beq.n	8000662 <__aeabi_fadd+0x202>
 800059e:	2001      	movs	r0, #1
 80005a0:	4216      	tst	r6, r2
 80005a2:	d130      	bne.n	8000606 <__aeabi_fadd+0x1a6>
 80005a4:	2300      	movs	r3, #0
 80005a6:	08f7      	lsrs	r7, r6, #3
 80005a8:	e7a4      	b.n	80004f4 <__aeabi_fadd+0x94>
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d09e      	beq.n	80004ec <__aeabi_fadd+0x8c>
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0x156>
 80005b4:	e0ca      	b.n	800074c <__aeabi_fadd+0x2ec>
 80005b6:	2bff      	cmp	r3, #255	@ 0xff
 80005b8:	d042      	beq.n	8000640 <__aeabi_fadd+0x1e0>
 80005ba:	0013      	movs	r3, r2
 80005bc:	e791      	b.n	80004e2 <__aeabi_fadd+0x82>
 80005be:	1a71      	subs	r1, r6, r1
 80005c0:	014b      	lsls	r3, r1, #5
 80005c2:	d400      	bmi.n	80005c6 <__aeabi_fadd+0x166>
 80005c4:	e0d1      	b.n	800076a <__aeabi_fadd+0x30a>
 80005c6:	018f      	lsls	r7, r1, #6
 80005c8:	09bf      	lsrs	r7, r7, #6
 80005ca:	0038      	movs	r0, r7
 80005cc:	f000 ff4c 	bl	8001468 <__clzsi2>
 80005d0:	003b      	movs	r3, r7
 80005d2:	3805      	subs	r0, #5
 80005d4:	4083      	lsls	r3, r0
 80005d6:	2501      	movs	r5, #1
 80005d8:	2220      	movs	r2, #32
 80005da:	1b40      	subs	r0, r0, r5
 80005dc:	3001      	adds	r0, #1
 80005de:	1a12      	subs	r2, r2, r0
 80005e0:	001e      	movs	r6, r3
 80005e2:	4093      	lsls	r3, r2
 80005e4:	40c6      	lsrs	r6, r0
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	4193      	sbcs	r3, r2
 80005ea:	431e      	orrs	r6, r3
 80005ec:	d039      	beq.n	8000662 <__aeabi_fadd+0x202>
 80005ee:	0773      	lsls	r3, r6, #29
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fadd+0x194>
 80005f2:	e11b      	b.n	800082c <__aeabi_fadd+0x3cc>
 80005f4:	230f      	movs	r3, #15
 80005f6:	2500      	movs	r5, #0
 80005f8:	4033      	ands	r3, r6
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d1a7      	bne.n	800054e <__aeabi_fadd+0xee>
 80005fe:	2001      	movs	r0, #1
 8000600:	0172      	lsls	r2, r6, #5
 8000602:	d57c      	bpl.n	80006fe <__aeabi_fadd+0x29e>
 8000604:	b2c0      	uxtb	r0, r0
 8000606:	01b2      	lsls	r2, r6, #6
 8000608:	0a52      	lsrs	r2, r2, #9
 800060a:	e7a8      	b.n	800055e <__aeabi_fadd+0xfe>
 800060c:	0773      	lsls	r3, r6, #29
 800060e:	d003      	beq.n	8000618 <__aeabi_fadd+0x1b8>
 8000610:	230f      	movs	r3, #15
 8000612:	4033      	ands	r3, r6
 8000614:	2b04      	cmp	r3, #4
 8000616:	d19a      	bne.n	800054e <__aeabi_fadd+0xee>
 8000618:	002b      	movs	r3, r5
 800061a:	e767      	b.n	80004ec <__aeabi_fadd+0x8c>
 800061c:	2b00      	cmp	r3, #0
 800061e:	d023      	beq.n	8000668 <__aeabi_fadd+0x208>
 8000620:	1b53      	subs	r3, r2, r5
 8000622:	2d00      	cmp	r5, #0
 8000624:	d17b      	bne.n	800071e <__aeabi_fadd+0x2be>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x1cc>
 800062a:	e086      	b.n	800073a <__aeabi_fadd+0x2da>
 800062c:	1e5d      	subs	r5, r3, #1
 800062e:	2b01      	cmp	r3, #1
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1d4>
 8000632:	e08b      	b.n	800074c <__aeabi_fadd+0x2ec>
 8000634:	2bff      	cmp	r3, #255	@ 0xff
 8000636:	d002      	beq.n	800063e <__aeabi_fadd+0x1de>
 8000638:	002b      	movs	r3, r5
 800063a:	e075      	b.n	8000728 <__aeabi_fadd+0x2c8>
 800063c:	464c      	mov	r4, r9
 800063e:	4667      	mov	r7, ip
 8000640:	2f00      	cmp	r7, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0x1e6>
 8000644:	e789      	b.n	800055a <__aeabi_fadd+0xfa>
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	03d2      	lsls	r2, r2, #15
 800064a:	433a      	orrs	r2, r7
 800064c:	0252      	lsls	r2, r2, #9
 800064e:	20ff      	movs	r0, #255	@ 0xff
 8000650:	0a52      	lsrs	r2, r2, #9
 8000652:	e784      	b.n	800055e <__aeabi_fadd+0xfe>
 8000654:	1a77      	subs	r7, r6, r1
 8000656:	017b      	lsls	r3, r7, #5
 8000658:	d46b      	bmi.n	8000732 <__aeabi_fadd+0x2d2>
 800065a:	2f00      	cmp	r7, #0
 800065c:	d000      	beq.n	8000660 <__aeabi_fadd+0x200>
 800065e:	e765      	b.n	800052c <__aeabi_fadd+0xcc>
 8000660:	2400      	movs	r4, #0
 8000662:	2000      	movs	r0, #0
 8000664:	2200      	movs	r2, #0
 8000666:	e77a      	b.n	800055e <__aeabi_fadd+0xfe>
 8000668:	22fe      	movs	r2, #254	@ 0xfe
 800066a:	1c6b      	adds	r3, r5, #1
 800066c:	421a      	tst	r2, r3
 800066e:	d149      	bne.n	8000704 <__aeabi_fadd+0x2a4>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d000      	beq.n	8000676 <__aeabi_fadd+0x216>
 8000674:	e09f      	b.n	80007b6 <__aeabi_fadd+0x356>
 8000676:	2e00      	cmp	r6, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x21c>
 800067a:	e0ba      	b.n	80007f2 <__aeabi_fadd+0x392>
 800067c:	2900      	cmp	r1, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x222>
 8000680:	e0cf      	b.n	8000822 <__aeabi_fadd+0x3c2>
 8000682:	1872      	adds	r2, r6, r1
 8000684:	0153      	lsls	r3, r2, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x22a>
 8000688:	e0cd      	b.n	8000826 <__aeabi_fadd+0x3c6>
 800068a:	0192      	lsls	r2, r2, #6
 800068c:	2001      	movs	r0, #1
 800068e:	0a52      	lsrs	r2, r2, #9
 8000690:	e765      	b.n	800055e <__aeabi_fadd+0xfe>
 8000692:	2aff      	cmp	r2, #255	@ 0xff
 8000694:	d0d2      	beq.n	800063c <__aeabi_fadd+0x1dc>
 8000696:	2080      	movs	r0, #128	@ 0x80
 8000698:	04c0      	lsls	r0, r0, #19
 800069a:	4306      	orrs	r6, r0
 800069c:	2001      	movs	r0, #1
 800069e:	2b1b      	cmp	r3, #27
 80006a0:	dc08      	bgt.n	80006b4 <__aeabi_fadd+0x254>
 80006a2:	0030      	movs	r0, r6
 80006a4:	2420      	movs	r4, #32
 80006a6:	40d8      	lsrs	r0, r3
 80006a8:	1ae3      	subs	r3, r4, r3
 80006aa:	409e      	lsls	r6, r3
 80006ac:	0033      	movs	r3, r6
 80006ae:	1e5c      	subs	r4, r3, #1
 80006b0:	41a3      	sbcs	r3, r4
 80006b2:	4318      	orrs	r0, r3
 80006b4:	464c      	mov	r4, r9
 80006b6:	0015      	movs	r5, r2
 80006b8:	1a0e      	subs	r6, r1, r0
 80006ba:	e732      	b.n	8000522 <__aeabi_fadd+0xc2>
 80006bc:	0008      	movs	r0, r1
 80006be:	2220      	movs	r2, #32
 80006c0:	40d8      	lsrs	r0, r3
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	4099      	lsls	r1, r3
 80006c6:	000b      	movs	r3, r1
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	4193      	sbcs	r3, r2
 80006cc:	4303      	orrs	r3, r0
 80006ce:	18f6      	adds	r6, r6, r3
 80006d0:	0173      	lsls	r3, r6, #5
 80006d2:	d59b      	bpl.n	800060c <__aeabi_fadd+0x1ac>
 80006d4:	3501      	adds	r5, #1
 80006d6:	2dff      	cmp	r5, #255	@ 0xff
 80006d8:	d100      	bne.n	80006dc <__aeabi_fadd+0x27c>
 80006da:	e73e      	b.n	800055a <__aeabi_fadd+0xfa>
 80006dc:	2301      	movs	r3, #1
 80006de:	494d      	ldr	r1, [pc, #308]	@ (8000814 <__aeabi_fadd+0x3b4>)
 80006e0:	0872      	lsrs	r2, r6, #1
 80006e2:	4033      	ands	r3, r6
 80006e4:	400a      	ands	r2, r1
 80006e6:	431a      	orrs	r2, r3
 80006e8:	0016      	movs	r6, r2
 80006ea:	0753      	lsls	r3, r2, #29
 80006ec:	d004      	beq.n	80006f8 <__aeabi_fadd+0x298>
 80006ee:	230f      	movs	r3, #15
 80006f0:	4013      	ands	r3, r2
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fadd+0x298>
 80006f6:	e72a      	b.n	800054e <__aeabi_fadd+0xee>
 80006f8:	0173      	lsls	r3, r6, #5
 80006fa:	d500      	bpl.n	80006fe <__aeabi_fadd+0x29e>
 80006fc:	e72a      	b.n	8000554 <__aeabi_fadd+0xf4>
 80006fe:	002b      	movs	r3, r5
 8000700:	08f7      	lsrs	r7, r6, #3
 8000702:	e6f7      	b.n	80004f4 <__aeabi_fadd+0x94>
 8000704:	2bff      	cmp	r3, #255	@ 0xff
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x2aa>
 8000708:	e727      	b.n	800055a <__aeabi_fadd+0xfa>
 800070a:	1871      	adds	r1, r6, r1
 800070c:	0849      	lsrs	r1, r1, #1
 800070e:	074a      	lsls	r2, r1, #29
 8000710:	d02f      	beq.n	8000772 <__aeabi_fadd+0x312>
 8000712:	220f      	movs	r2, #15
 8000714:	400a      	ands	r2, r1
 8000716:	2a04      	cmp	r2, #4
 8000718:	d02b      	beq.n	8000772 <__aeabi_fadd+0x312>
 800071a:	1d0e      	adds	r6, r1, #4
 800071c:	e6e6      	b.n	80004ec <__aeabi_fadd+0x8c>
 800071e:	2aff      	cmp	r2, #255	@ 0xff
 8000720:	d08d      	beq.n	800063e <__aeabi_fadd+0x1de>
 8000722:	2080      	movs	r0, #128	@ 0x80
 8000724:	04c0      	lsls	r0, r0, #19
 8000726:	4306      	orrs	r6, r0
 8000728:	2b1b      	cmp	r3, #27
 800072a:	dd24      	ble.n	8000776 <__aeabi_fadd+0x316>
 800072c:	0013      	movs	r3, r2
 800072e:	1d4e      	adds	r6, r1, #5
 8000730:	e6dc      	b.n	80004ec <__aeabi_fadd+0x8c>
 8000732:	464c      	mov	r4, r9
 8000734:	1b8f      	subs	r7, r1, r6
 8000736:	e6f9      	b.n	800052c <__aeabi_fadd+0xcc>
 8000738:	464c      	mov	r4, r9
 800073a:	000e      	movs	r6, r1
 800073c:	e6d6      	b.n	80004ec <__aeabi_fadd+0x8c>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d149      	bne.n	80007d6 <__aeabi_fadd+0x376>
 8000742:	2900      	cmp	r1, #0
 8000744:	d068      	beq.n	8000818 <__aeabi_fadd+0x3b8>
 8000746:	4667      	mov	r7, ip
 8000748:	464c      	mov	r4, r9
 800074a:	e77c      	b.n	8000646 <__aeabi_fadd+0x1e6>
 800074c:	1870      	adds	r0, r6, r1
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	d574      	bpl.n	800083c <__aeabi_fadd+0x3dc>
 8000752:	4930      	ldr	r1, [pc, #192]	@ (8000814 <__aeabi_fadd+0x3b4>)
 8000754:	0840      	lsrs	r0, r0, #1
 8000756:	4001      	ands	r1, r0
 8000758:	0743      	lsls	r3, r0, #29
 800075a:	d009      	beq.n	8000770 <__aeabi_fadd+0x310>
 800075c:	230f      	movs	r3, #15
 800075e:	4003      	ands	r3, r0
 8000760:	2b04      	cmp	r3, #4
 8000762:	d005      	beq.n	8000770 <__aeabi_fadd+0x310>
 8000764:	2302      	movs	r3, #2
 8000766:	1d0e      	adds	r6, r1, #4
 8000768:	e6c0      	b.n	80004ec <__aeabi_fadd+0x8c>
 800076a:	2301      	movs	r3, #1
 800076c:	08cf      	lsrs	r7, r1, #3
 800076e:	e6c1      	b.n	80004f4 <__aeabi_fadd+0x94>
 8000770:	2302      	movs	r3, #2
 8000772:	08cf      	lsrs	r7, r1, #3
 8000774:	e6be      	b.n	80004f4 <__aeabi_fadd+0x94>
 8000776:	2520      	movs	r5, #32
 8000778:	0030      	movs	r0, r6
 800077a:	40d8      	lsrs	r0, r3
 800077c:	1aeb      	subs	r3, r5, r3
 800077e:	409e      	lsls	r6, r3
 8000780:	0033      	movs	r3, r6
 8000782:	1e5d      	subs	r5, r3, #1
 8000784:	41ab      	sbcs	r3, r5
 8000786:	4303      	orrs	r3, r0
 8000788:	0015      	movs	r5, r2
 800078a:	185e      	adds	r6, r3, r1
 800078c:	e7a0      	b.n	80006d0 <__aeabi_fadd+0x270>
 800078e:	2900      	cmp	r1, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fadd+0x334>
 8000792:	e765      	b.n	8000660 <__aeabi_fadd+0x200>
 8000794:	464c      	mov	r4, r9
 8000796:	4667      	mov	r7, ip
 8000798:	e6ac      	b.n	80004f4 <__aeabi_fadd+0x94>
 800079a:	1b8f      	subs	r7, r1, r6
 800079c:	017b      	lsls	r3, r7, #5
 800079e:	d52e      	bpl.n	80007fe <__aeabi_fadd+0x39e>
 80007a0:	01bf      	lsls	r7, r7, #6
 80007a2:	09bf      	lsrs	r7, r7, #6
 80007a4:	0038      	movs	r0, r7
 80007a6:	f000 fe5f 	bl	8001468 <__clzsi2>
 80007aa:	003b      	movs	r3, r7
 80007ac:	3805      	subs	r0, #5
 80007ae:	4083      	lsls	r3, r0
 80007b0:	464c      	mov	r4, r9
 80007b2:	3501      	adds	r5, #1
 80007b4:	e710      	b.n	80005d8 <__aeabi_fadd+0x178>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x35c>
 80007ba:	e740      	b.n	800063e <__aeabi_fadd+0x1de>
 80007bc:	2900      	cmp	r1, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x362>
 80007c0:	e741      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	03db      	lsls	r3, r3, #15
 80007c6:	429f      	cmp	r7, r3
 80007c8:	d200      	bcs.n	80007cc <__aeabi_fadd+0x36c>
 80007ca:	e73c      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007cc:	459c      	cmp	ip, r3
 80007ce:	d300      	bcc.n	80007d2 <__aeabi_fadd+0x372>
 80007d0:	e739      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007d2:	4667      	mov	r7, ip
 80007d4:	e737      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007d6:	2900      	cmp	r1, #0
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x37c>
 80007da:	e734      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007dc:	2380      	movs	r3, #128	@ 0x80
 80007de:	03db      	lsls	r3, r3, #15
 80007e0:	429f      	cmp	r7, r3
 80007e2:	d200      	bcs.n	80007e6 <__aeabi_fadd+0x386>
 80007e4:	e72f      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007e6:	459c      	cmp	ip, r3
 80007e8:	d300      	bcc.n	80007ec <__aeabi_fadd+0x38c>
 80007ea:	e72c      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007ec:	464c      	mov	r4, r9
 80007ee:	4667      	mov	r7, ip
 80007f0:	e729      	b.n	8000646 <__aeabi_fadd+0x1e6>
 80007f2:	2900      	cmp	r1, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x398>
 80007f6:	e734      	b.n	8000662 <__aeabi_fadd+0x202>
 80007f8:	2300      	movs	r3, #0
 80007fa:	08cf      	lsrs	r7, r1, #3
 80007fc:	e67a      	b.n	80004f4 <__aeabi_fadd+0x94>
 80007fe:	464c      	mov	r4, r9
 8000800:	2301      	movs	r3, #1
 8000802:	08ff      	lsrs	r7, r7, #3
 8000804:	e676      	b.n	80004f4 <__aeabi_fadd+0x94>
 8000806:	2f00      	cmp	r7, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x3ac>
 800080a:	e729      	b.n	8000660 <__aeabi_fadd+0x200>
 800080c:	08ff      	lsrs	r7, r7, #3
 800080e:	e671      	b.n	80004f4 <__aeabi_fadd+0x94>
 8000810:	fbffffff 	.word	0xfbffffff
 8000814:	7dffffff 	.word	0x7dffffff
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	2400      	movs	r4, #0
 800081c:	20ff      	movs	r0, #255	@ 0xff
 800081e:	03d2      	lsls	r2, r2, #15
 8000820:	e69d      	b.n	800055e <__aeabi_fadd+0xfe>
 8000822:	2300      	movs	r3, #0
 8000824:	e666      	b.n	80004f4 <__aeabi_fadd+0x94>
 8000826:	2300      	movs	r3, #0
 8000828:	08d7      	lsrs	r7, r2, #3
 800082a:	e663      	b.n	80004f4 <__aeabi_fadd+0x94>
 800082c:	2001      	movs	r0, #1
 800082e:	0172      	lsls	r2, r6, #5
 8000830:	d500      	bpl.n	8000834 <__aeabi_fadd+0x3d4>
 8000832:	e6e7      	b.n	8000604 <__aeabi_fadd+0x1a4>
 8000834:	0031      	movs	r1, r6
 8000836:	2300      	movs	r3, #0
 8000838:	08cf      	lsrs	r7, r1, #3
 800083a:	e65b      	b.n	80004f4 <__aeabi_fadd+0x94>
 800083c:	2301      	movs	r3, #1
 800083e:	08c7      	lsrs	r7, r0, #3
 8000840:	e658      	b.n	80004f4 <__aeabi_fadd+0x94>
 8000842:	46c0      	nop			@ (mov r8, r8)

08000844 <__aeabi_fdiv>:
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	4646      	mov	r6, r8
 8000848:	464f      	mov	r7, r9
 800084a:	46d6      	mov	lr, sl
 800084c:	0245      	lsls	r5, r0, #9
 800084e:	b5c0      	push	{r6, r7, lr}
 8000850:	0fc3      	lsrs	r3, r0, #31
 8000852:	0047      	lsls	r7, r0, #1
 8000854:	4698      	mov	r8, r3
 8000856:	1c0e      	adds	r6, r1, #0
 8000858:	0a6d      	lsrs	r5, r5, #9
 800085a:	0e3f      	lsrs	r7, r7, #24
 800085c:	d05b      	beq.n	8000916 <__aeabi_fdiv+0xd2>
 800085e:	2fff      	cmp	r7, #255	@ 0xff
 8000860:	d021      	beq.n	80008a6 <__aeabi_fdiv+0x62>
 8000862:	2380      	movs	r3, #128	@ 0x80
 8000864:	00ed      	lsls	r5, r5, #3
 8000866:	04db      	lsls	r3, r3, #19
 8000868:	431d      	orrs	r5, r3
 800086a:	2300      	movs	r3, #0
 800086c:	4699      	mov	r9, r3
 800086e:	469a      	mov	sl, r3
 8000870:	3f7f      	subs	r7, #127	@ 0x7f
 8000872:	0274      	lsls	r4, r6, #9
 8000874:	0073      	lsls	r3, r6, #1
 8000876:	0a64      	lsrs	r4, r4, #9
 8000878:	0e1b      	lsrs	r3, r3, #24
 800087a:	0ff6      	lsrs	r6, r6, #31
 800087c:	2b00      	cmp	r3, #0
 800087e:	d020      	beq.n	80008c2 <__aeabi_fdiv+0x7e>
 8000880:	2bff      	cmp	r3, #255	@ 0xff
 8000882:	d043      	beq.n	800090c <__aeabi_fdiv+0xc8>
 8000884:	2280      	movs	r2, #128	@ 0x80
 8000886:	2000      	movs	r0, #0
 8000888:	00e4      	lsls	r4, r4, #3
 800088a:	04d2      	lsls	r2, r2, #19
 800088c:	4314      	orrs	r4, r2
 800088e:	3b7f      	subs	r3, #127	@ 0x7f
 8000890:	4642      	mov	r2, r8
 8000892:	1aff      	subs	r7, r7, r3
 8000894:	464b      	mov	r3, r9
 8000896:	4072      	eors	r2, r6
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d900      	bls.n	800089e <__aeabi_fdiv+0x5a>
 800089c:	e09d      	b.n	80009da <__aeabi_fdiv+0x196>
 800089e:	4971      	ldr	r1, [pc, #452]	@ (8000a64 <__aeabi_fdiv+0x220>)
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	58cb      	ldr	r3, [r1, r3]
 80008a4:	469f      	mov	pc, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d15a      	bne.n	8000960 <__aeabi_fdiv+0x11c>
 80008aa:	2308      	movs	r3, #8
 80008ac:	4699      	mov	r9, r3
 80008ae:	3b06      	subs	r3, #6
 80008b0:	0274      	lsls	r4, r6, #9
 80008b2:	469a      	mov	sl, r3
 80008b4:	0073      	lsls	r3, r6, #1
 80008b6:	27ff      	movs	r7, #255	@ 0xff
 80008b8:	0a64      	lsrs	r4, r4, #9
 80008ba:	0e1b      	lsrs	r3, r3, #24
 80008bc:	0ff6      	lsrs	r6, r6, #31
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1de      	bne.n	8000880 <__aeabi_fdiv+0x3c>
 80008c2:	2c00      	cmp	r4, #0
 80008c4:	d13b      	bne.n	800093e <__aeabi_fdiv+0xfa>
 80008c6:	2301      	movs	r3, #1
 80008c8:	4642      	mov	r2, r8
 80008ca:	4649      	mov	r1, r9
 80008cc:	4072      	eors	r2, r6
 80008ce:	4319      	orrs	r1, r3
 80008d0:	290e      	cmp	r1, #14
 80008d2:	d818      	bhi.n	8000906 <__aeabi_fdiv+0xc2>
 80008d4:	4864      	ldr	r0, [pc, #400]	@ (8000a68 <__aeabi_fdiv+0x224>)
 80008d6:	0089      	lsls	r1, r1, #2
 80008d8:	5841      	ldr	r1, [r0, r1]
 80008da:	468f      	mov	pc, r1
 80008dc:	4653      	mov	r3, sl
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fdiv+0xa0>
 80008e2:	e0b8      	b.n	8000a56 <__aeabi_fdiv+0x212>
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d06e      	beq.n	80009c6 <__aeabi_fdiv+0x182>
 80008e8:	4642      	mov	r2, r8
 80008ea:	002c      	movs	r4, r5
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d140      	bne.n	8000972 <__aeabi_fdiv+0x12e>
 80008f0:	2000      	movs	r0, #0
 80008f2:	2400      	movs	r4, #0
 80008f4:	05c0      	lsls	r0, r0, #23
 80008f6:	4320      	orrs	r0, r4
 80008f8:	07d2      	lsls	r2, r2, #31
 80008fa:	4310      	orrs	r0, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2400      	movs	r4, #0
 800090a:	e7f3      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 800090c:	2c00      	cmp	r4, #0
 800090e:	d120      	bne.n	8000952 <__aeabi_fdiv+0x10e>
 8000910:	2302      	movs	r3, #2
 8000912:	3fff      	subs	r7, #255	@ 0xff
 8000914:	e7d8      	b.n	80008c8 <__aeabi_fdiv+0x84>
 8000916:	2d00      	cmp	r5, #0
 8000918:	d105      	bne.n	8000926 <__aeabi_fdiv+0xe2>
 800091a:	2304      	movs	r3, #4
 800091c:	4699      	mov	r9, r3
 800091e:	3b03      	subs	r3, #3
 8000920:	2700      	movs	r7, #0
 8000922:	469a      	mov	sl, r3
 8000924:	e7a5      	b.n	8000872 <__aeabi_fdiv+0x2e>
 8000926:	0028      	movs	r0, r5
 8000928:	f000 fd9e 	bl	8001468 <__clzsi2>
 800092c:	2776      	movs	r7, #118	@ 0x76
 800092e:	1f43      	subs	r3, r0, #5
 8000930:	409d      	lsls	r5, r3
 8000932:	2300      	movs	r3, #0
 8000934:	427f      	negs	r7, r7
 8000936:	4699      	mov	r9, r3
 8000938:	469a      	mov	sl, r3
 800093a:	1a3f      	subs	r7, r7, r0
 800093c:	e799      	b.n	8000872 <__aeabi_fdiv+0x2e>
 800093e:	0020      	movs	r0, r4
 8000940:	f000 fd92 	bl	8001468 <__clzsi2>
 8000944:	1f43      	subs	r3, r0, #5
 8000946:	409c      	lsls	r4, r3
 8000948:	2376      	movs	r3, #118	@ 0x76
 800094a:	425b      	negs	r3, r3
 800094c:	1a1b      	subs	r3, r3, r0
 800094e:	2000      	movs	r0, #0
 8000950:	e79e      	b.n	8000890 <__aeabi_fdiv+0x4c>
 8000952:	2303      	movs	r3, #3
 8000954:	464a      	mov	r2, r9
 8000956:	431a      	orrs	r2, r3
 8000958:	4691      	mov	r9, r2
 800095a:	2003      	movs	r0, #3
 800095c:	33fc      	adds	r3, #252	@ 0xfc
 800095e:	e797      	b.n	8000890 <__aeabi_fdiv+0x4c>
 8000960:	230c      	movs	r3, #12
 8000962:	4699      	mov	r9, r3
 8000964:	3b09      	subs	r3, #9
 8000966:	27ff      	movs	r7, #255	@ 0xff
 8000968:	469a      	mov	sl, r3
 800096a:	e782      	b.n	8000872 <__aeabi_fdiv+0x2e>
 800096c:	2803      	cmp	r0, #3
 800096e:	d02c      	beq.n	80009ca <__aeabi_fdiv+0x186>
 8000970:	0032      	movs	r2, r6
 8000972:	0038      	movs	r0, r7
 8000974:	307f      	adds	r0, #127	@ 0x7f
 8000976:	2800      	cmp	r0, #0
 8000978:	dd47      	ble.n	8000a0a <__aeabi_fdiv+0x1c6>
 800097a:	0763      	lsls	r3, r4, #29
 800097c:	d004      	beq.n	8000988 <__aeabi_fdiv+0x144>
 800097e:	230f      	movs	r3, #15
 8000980:	4023      	ands	r3, r4
 8000982:	2b04      	cmp	r3, #4
 8000984:	d000      	beq.n	8000988 <__aeabi_fdiv+0x144>
 8000986:	3404      	adds	r4, #4
 8000988:	0123      	lsls	r3, r4, #4
 800098a:	d503      	bpl.n	8000994 <__aeabi_fdiv+0x150>
 800098c:	0038      	movs	r0, r7
 800098e:	4b37      	ldr	r3, [pc, #220]	@ (8000a6c <__aeabi_fdiv+0x228>)
 8000990:	3080      	adds	r0, #128	@ 0x80
 8000992:	401c      	ands	r4, r3
 8000994:	28fe      	cmp	r0, #254	@ 0xfe
 8000996:	dcb6      	bgt.n	8000906 <__aeabi_fdiv+0xc2>
 8000998:	01a4      	lsls	r4, r4, #6
 800099a:	0a64      	lsrs	r4, r4, #9
 800099c:	b2c0      	uxtb	r0, r0
 800099e:	e7a9      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 80009a0:	2480      	movs	r4, #128	@ 0x80
 80009a2:	2200      	movs	r2, #0
 80009a4:	20ff      	movs	r0, #255	@ 0xff
 80009a6:	03e4      	lsls	r4, r4, #15
 80009a8:	e7a4      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 80009aa:	2380      	movs	r3, #128	@ 0x80
 80009ac:	03db      	lsls	r3, r3, #15
 80009ae:	421d      	tst	r5, r3
 80009b0:	d001      	beq.n	80009b6 <__aeabi_fdiv+0x172>
 80009b2:	421c      	tst	r4, r3
 80009b4:	d00b      	beq.n	80009ce <__aeabi_fdiv+0x18a>
 80009b6:	2480      	movs	r4, #128	@ 0x80
 80009b8:	03e4      	lsls	r4, r4, #15
 80009ba:	432c      	orrs	r4, r5
 80009bc:	0264      	lsls	r4, r4, #9
 80009be:	4642      	mov	r2, r8
 80009c0:	20ff      	movs	r0, #255	@ 0xff
 80009c2:	0a64      	lsrs	r4, r4, #9
 80009c4:	e796      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 80009c6:	4646      	mov	r6, r8
 80009c8:	002c      	movs	r4, r5
 80009ca:	2380      	movs	r3, #128	@ 0x80
 80009cc:	03db      	lsls	r3, r3, #15
 80009ce:	431c      	orrs	r4, r3
 80009d0:	0264      	lsls	r4, r4, #9
 80009d2:	0032      	movs	r2, r6
 80009d4:	20ff      	movs	r0, #255	@ 0xff
 80009d6:	0a64      	lsrs	r4, r4, #9
 80009d8:	e78c      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 80009da:	016d      	lsls	r5, r5, #5
 80009dc:	0160      	lsls	r0, r4, #5
 80009de:	4285      	cmp	r5, r0
 80009e0:	d22d      	bcs.n	8000a3e <__aeabi_fdiv+0x1fa>
 80009e2:	231b      	movs	r3, #27
 80009e4:	2400      	movs	r4, #0
 80009e6:	3f01      	subs	r7, #1
 80009e8:	2601      	movs	r6, #1
 80009ea:	0029      	movs	r1, r5
 80009ec:	0064      	lsls	r4, r4, #1
 80009ee:	006d      	lsls	r5, r5, #1
 80009f0:	2900      	cmp	r1, #0
 80009f2:	db01      	blt.n	80009f8 <__aeabi_fdiv+0x1b4>
 80009f4:	4285      	cmp	r5, r0
 80009f6:	d301      	bcc.n	80009fc <__aeabi_fdiv+0x1b8>
 80009f8:	1a2d      	subs	r5, r5, r0
 80009fa:	4334      	orrs	r4, r6
 80009fc:	3b01      	subs	r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f3      	bne.n	80009ea <__aeabi_fdiv+0x1a6>
 8000a02:	1e6b      	subs	r3, r5, #1
 8000a04:	419d      	sbcs	r5, r3
 8000a06:	432c      	orrs	r4, r5
 8000a08:	e7b3      	b.n	8000972 <__aeabi_fdiv+0x12e>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	1a1b      	subs	r3, r3, r0
 8000a0e:	2b1b      	cmp	r3, #27
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_fdiv+0x1d0>
 8000a12:	e76d      	b.n	80008f0 <__aeabi_fdiv+0xac>
 8000a14:	0021      	movs	r1, r4
 8000a16:	379e      	adds	r7, #158	@ 0x9e
 8000a18:	40d9      	lsrs	r1, r3
 8000a1a:	40bc      	lsls	r4, r7
 8000a1c:	000b      	movs	r3, r1
 8000a1e:	1e61      	subs	r1, r4, #1
 8000a20:	418c      	sbcs	r4, r1
 8000a22:	4323      	orrs	r3, r4
 8000a24:	0759      	lsls	r1, r3, #29
 8000a26:	d004      	beq.n	8000a32 <__aeabi_fdiv+0x1ee>
 8000a28:	210f      	movs	r1, #15
 8000a2a:	4019      	ands	r1, r3
 8000a2c:	2904      	cmp	r1, #4
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_fdiv+0x1ee>
 8000a30:	3304      	adds	r3, #4
 8000a32:	0159      	lsls	r1, r3, #5
 8000a34:	d413      	bmi.n	8000a5e <__aeabi_fdiv+0x21a>
 8000a36:	019b      	lsls	r3, r3, #6
 8000a38:	2000      	movs	r0, #0
 8000a3a:	0a5c      	lsrs	r4, r3, #9
 8000a3c:	e75a      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 8000a3e:	231a      	movs	r3, #26
 8000a40:	2401      	movs	r4, #1
 8000a42:	1a2d      	subs	r5, r5, r0
 8000a44:	e7d0      	b.n	80009e8 <__aeabi_fdiv+0x1a4>
 8000a46:	1e98      	subs	r0, r3, #2
 8000a48:	4243      	negs	r3, r0
 8000a4a:	4158      	adcs	r0, r3
 8000a4c:	4240      	negs	r0, r0
 8000a4e:	0032      	movs	r2, r6
 8000a50:	2400      	movs	r4, #0
 8000a52:	b2c0      	uxtb	r0, r0
 8000a54:	e74e      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 8000a56:	4642      	mov	r2, r8
 8000a58:	20ff      	movs	r0, #255	@ 0xff
 8000a5a:	2400      	movs	r4, #0
 8000a5c:	e74a      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2400      	movs	r4, #0
 8000a62:	e747      	b.n	80008f4 <__aeabi_fdiv+0xb0>
 8000a64:	080055f4 	.word	0x080055f4
 8000a68:	08005634 	.word	0x08005634
 8000a6c:	f7ffffff 	.word	0xf7ffffff

08000a70 <__eqsf2>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	0042      	lsls	r2, r0, #1
 8000a74:	024e      	lsls	r6, r1, #9
 8000a76:	004c      	lsls	r4, r1, #1
 8000a78:	0245      	lsls	r5, r0, #9
 8000a7a:	0a6d      	lsrs	r5, r5, #9
 8000a7c:	0e12      	lsrs	r2, r2, #24
 8000a7e:	0fc3      	lsrs	r3, r0, #31
 8000a80:	0a76      	lsrs	r6, r6, #9
 8000a82:	0e24      	lsrs	r4, r4, #24
 8000a84:	0fc9      	lsrs	r1, r1, #31
 8000a86:	2aff      	cmp	r2, #255	@ 0xff
 8000a88:	d010      	beq.n	8000aac <__eqsf2+0x3c>
 8000a8a:	2cff      	cmp	r4, #255	@ 0xff
 8000a8c:	d00c      	beq.n	8000aa8 <__eqsf2+0x38>
 8000a8e:	2001      	movs	r0, #1
 8000a90:	42a2      	cmp	r2, r4
 8000a92:	d10a      	bne.n	8000aaa <__eqsf2+0x3a>
 8000a94:	42b5      	cmp	r5, r6
 8000a96:	d108      	bne.n	8000aaa <__eqsf2+0x3a>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d00f      	beq.n	8000abc <__eqsf2+0x4c>
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d104      	bne.n	8000aaa <__eqsf2+0x3a>
 8000aa0:	0028      	movs	r0, r5
 8000aa2:	1e43      	subs	r3, r0, #1
 8000aa4:	4198      	sbcs	r0, r3
 8000aa6:	e000      	b.n	8000aaa <__eqsf2+0x3a>
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	2001      	movs	r0, #1
 8000aae:	2cff      	cmp	r4, #255	@ 0xff
 8000ab0:	d1fb      	bne.n	8000aaa <__eqsf2+0x3a>
 8000ab2:	4335      	orrs	r5, r6
 8000ab4:	d1f9      	bne.n	8000aaa <__eqsf2+0x3a>
 8000ab6:	404b      	eors	r3, r1
 8000ab8:	0018      	movs	r0, r3
 8000aba:	e7f6      	b.n	8000aaa <__eqsf2+0x3a>
 8000abc:	2000      	movs	r0, #0
 8000abe:	e7f4      	b.n	8000aaa <__eqsf2+0x3a>

08000ac0 <__gesf2>:
 8000ac0:	b530      	push	{r4, r5, lr}
 8000ac2:	0042      	lsls	r2, r0, #1
 8000ac4:	0244      	lsls	r4, r0, #9
 8000ac6:	024d      	lsls	r5, r1, #9
 8000ac8:	0fc3      	lsrs	r3, r0, #31
 8000aca:	0048      	lsls	r0, r1, #1
 8000acc:	0a64      	lsrs	r4, r4, #9
 8000ace:	0e12      	lsrs	r2, r2, #24
 8000ad0:	0a6d      	lsrs	r5, r5, #9
 8000ad2:	0e00      	lsrs	r0, r0, #24
 8000ad4:	0fc9      	lsrs	r1, r1, #31
 8000ad6:	2aff      	cmp	r2, #255	@ 0xff
 8000ad8:	d018      	beq.n	8000b0c <__gesf2+0x4c>
 8000ada:	28ff      	cmp	r0, #255	@ 0xff
 8000adc:	d00a      	beq.n	8000af4 <__gesf2+0x34>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d11e      	bne.n	8000b20 <__gesf2+0x60>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d10a      	bne.n	8000afc <__gesf2+0x3c>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d029      	beq.n	8000b3e <__gesf2+0x7e>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d12d      	bne.n	8000b4a <__gesf2+0x8a>
 8000aee:	0048      	lsls	r0, r1, #1
 8000af0:	3801      	subs	r0, #1
 8000af2:	bd30      	pop	{r4, r5, pc}
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d125      	bne.n	8000b44 <__gesf2+0x84>
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d101      	bne.n	8000b00 <__gesf2+0x40>
 8000afc:	2c00      	cmp	r4, #0
 8000afe:	d0f6      	beq.n	8000aee <__gesf2+0x2e>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d019      	beq.n	8000b38 <__gesf2+0x78>
 8000b04:	2001      	movs	r0, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	4318      	orrs	r0, r3
 8000b0a:	e7f2      	b.n	8000af2 <__gesf2+0x32>
 8000b0c:	2c00      	cmp	r4, #0
 8000b0e:	d119      	bne.n	8000b44 <__gesf2+0x84>
 8000b10:	28ff      	cmp	r0, #255	@ 0xff
 8000b12:	d1f7      	bne.n	8000b04 <__gesf2+0x44>
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d115      	bne.n	8000b44 <__gesf2+0x84>
 8000b18:	2000      	movs	r0, #0
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d1f2      	bne.n	8000b04 <__gesf2+0x44>
 8000b1e:	e7e8      	b.n	8000af2 <__gesf2+0x32>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d0ef      	beq.n	8000b04 <__gesf2+0x44>
 8000b24:	428b      	cmp	r3, r1
 8000b26:	d1ed      	bne.n	8000b04 <__gesf2+0x44>
 8000b28:	4282      	cmp	r2, r0
 8000b2a:	dceb      	bgt.n	8000b04 <__gesf2+0x44>
 8000b2c:	db04      	blt.n	8000b38 <__gesf2+0x78>
 8000b2e:	42ac      	cmp	r4, r5
 8000b30:	d8e8      	bhi.n	8000b04 <__gesf2+0x44>
 8000b32:	2000      	movs	r0, #0
 8000b34:	42ac      	cmp	r4, r5
 8000b36:	d2dc      	bcs.n	8000af2 <__gesf2+0x32>
 8000b38:	0058      	lsls	r0, r3, #1
 8000b3a:	3801      	subs	r0, #1
 8000b3c:	e7d9      	b.n	8000af2 <__gesf2+0x32>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d0d7      	beq.n	8000af2 <__gesf2+0x32>
 8000b42:	e7df      	b.n	8000b04 <__gesf2+0x44>
 8000b44:	2002      	movs	r0, #2
 8000b46:	4240      	negs	r0, r0
 8000b48:	e7d3      	b.n	8000af2 <__gesf2+0x32>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d1da      	bne.n	8000b04 <__gesf2+0x44>
 8000b4e:	e7ee      	b.n	8000b2e <__gesf2+0x6e>

08000b50 <__lesf2>:
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	0042      	lsls	r2, r0, #1
 8000b54:	0244      	lsls	r4, r0, #9
 8000b56:	024d      	lsls	r5, r1, #9
 8000b58:	0fc3      	lsrs	r3, r0, #31
 8000b5a:	0048      	lsls	r0, r1, #1
 8000b5c:	0a64      	lsrs	r4, r4, #9
 8000b5e:	0e12      	lsrs	r2, r2, #24
 8000b60:	0a6d      	lsrs	r5, r5, #9
 8000b62:	0e00      	lsrs	r0, r0, #24
 8000b64:	0fc9      	lsrs	r1, r1, #31
 8000b66:	2aff      	cmp	r2, #255	@ 0xff
 8000b68:	d017      	beq.n	8000b9a <__lesf2+0x4a>
 8000b6a:	28ff      	cmp	r0, #255	@ 0xff
 8000b6c:	d00a      	beq.n	8000b84 <__lesf2+0x34>
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d11b      	bne.n	8000baa <__lesf2+0x5a>
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d10a      	bne.n	8000b8c <__lesf2+0x3c>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d01d      	beq.n	8000bb6 <__lesf2+0x66>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d12d      	bne.n	8000bda <__lesf2+0x8a>
 8000b7e:	0048      	lsls	r0, r1, #1
 8000b80:	3801      	subs	r0, #1
 8000b82:	e011      	b.n	8000ba8 <__lesf2+0x58>
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d10e      	bne.n	8000ba6 <__lesf2+0x56>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	d101      	bne.n	8000b90 <__lesf2+0x40>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d0f6      	beq.n	8000b7e <__lesf2+0x2e>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d10c      	bne.n	8000bae <__lesf2+0x5e>
 8000b94:	0058      	lsls	r0, r3, #1
 8000b96:	3801      	subs	r0, #1
 8000b98:	e006      	b.n	8000ba8 <__lesf2+0x58>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d103      	bne.n	8000ba6 <__lesf2+0x56>
 8000b9e:	28ff      	cmp	r0, #255	@ 0xff
 8000ba0:	d105      	bne.n	8000bae <__lesf2+0x5e>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d015      	beq.n	8000bd2 <__lesf2+0x82>
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	bd30      	pop	{r4, r5, pc}
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d106      	bne.n	8000bbc <__lesf2+0x6c>
 8000bae:	2001      	movs	r0, #1
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	4318      	orrs	r0, r3
 8000bb4:	e7f8      	b.n	8000ba8 <__lesf2+0x58>
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d0f6      	beq.n	8000ba8 <__lesf2+0x58>
 8000bba:	e7f8      	b.n	8000bae <__lesf2+0x5e>
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d1f6      	bne.n	8000bae <__lesf2+0x5e>
 8000bc0:	4282      	cmp	r2, r0
 8000bc2:	dcf4      	bgt.n	8000bae <__lesf2+0x5e>
 8000bc4:	dbe6      	blt.n	8000b94 <__lesf2+0x44>
 8000bc6:	42ac      	cmp	r4, r5
 8000bc8:	d8f1      	bhi.n	8000bae <__lesf2+0x5e>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	42ac      	cmp	r4, r5
 8000bce:	d2eb      	bcs.n	8000ba8 <__lesf2+0x58>
 8000bd0:	e7e0      	b.n	8000b94 <__lesf2+0x44>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d1ea      	bne.n	8000bae <__lesf2+0x5e>
 8000bd8:	e7e6      	b.n	8000ba8 <__lesf2+0x58>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d1e7      	bne.n	8000bae <__lesf2+0x5e>
 8000bde:	e7f2      	b.n	8000bc6 <__lesf2+0x76>

08000be0 <__aeabi_fmul>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	464f      	mov	r7, r9
 8000be4:	4646      	mov	r6, r8
 8000be6:	46d6      	mov	lr, sl
 8000be8:	0044      	lsls	r4, r0, #1
 8000bea:	b5c0      	push	{r6, r7, lr}
 8000bec:	0246      	lsls	r6, r0, #9
 8000bee:	1c0f      	adds	r7, r1, #0
 8000bf0:	0a76      	lsrs	r6, r6, #9
 8000bf2:	0e24      	lsrs	r4, r4, #24
 8000bf4:	0fc5      	lsrs	r5, r0, #31
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fmul+0x1c>
 8000bfa:	e0da      	b.n	8000db2 <__aeabi_fmul+0x1d2>
 8000bfc:	2cff      	cmp	r4, #255	@ 0xff
 8000bfe:	d074      	beq.n	8000cea <__aeabi_fmul+0x10a>
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	00f6      	lsls	r6, r6, #3
 8000c04:	04db      	lsls	r3, r3, #19
 8000c06:	431e      	orrs	r6, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	3c7f      	subs	r4, #127	@ 0x7f
 8000c10:	027b      	lsls	r3, r7, #9
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	4698      	mov	r8, r3
 8000c16:	007b      	lsls	r3, r7, #1
 8000c18:	0e1b      	lsrs	r3, r3, #24
 8000c1a:	0fff      	lsrs	r7, r7, #31
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d074      	beq.n	8000d0a <__aeabi_fmul+0x12a>
 8000c20:	2bff      	cmp	r3, #255	@ 0xff
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fmul+0x46>
 8000c24:	e08e      	b.n	8000d44 <__aeabi_fmul+0x164>
 8000c26:	4642      	mov	r2, r8
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	00d2      	lsls	r2, r2, #3
 8000c2c:	04c9      	lsls	r1, r1, #19
 8000c2e:	4311      	orrs	r1, r2
 8000c30:	3b7f      	subs	r3, #127	@ 0x7f
 8000c32:	002a      	movs	r2, r5
 8000c34:	18e4      	adds	r4, r4, r3
 8000c36:	464b      	mov	r3, r9
 8000c38:	407a      	eors	r2, r7
 8000c3a:	4688      	mov	r8, r1
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	2b0a      	cmp	r3, #10
 8000c40:	dc75      	bgt.n	8000d2e <__aeabi_fmul+0x14e>
 8000c42:	464b      	mov	r3, r9
 8000c44:	2000      	movs	r0, #0
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	dd0f      	ble.n	8000c6a <__aeabi_fmul+0x8a>
 8000c4a:	4649      	mov	r1, r9
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	408b      	lsls	r3, r1
 8000c50:	21a6      	movs	r1, #166	@ 0xa6
 8000c52:	00c9      	lsls	r1, r1, #3
 8000c54:	420b      	tst	r3, r1
 8000c56:	d169      	bne.n	8000d2c <__aeabi_fmul+0x14c>
 8000c58:	2190      	movs	r1, #144	@ 0x90
 8000c5a:	0089      	lsls	r1, r1, #2
 8000c5c:	420b      	tst	r3, r1
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_fmul+0x82>
 8000c60:	e100      	b.n	8000e64 <__aeabi_fmul+0x284>
 8000c62:	2188      	movs	r1, #136	@ 0x88
 8000c64:	4219      	tst	r1, r3
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fmul+0x8a>
 8000c68:	e0f5      	b.n	8000e56 <__aeabi_fmul+0x276>
 8000c6a:	4641      	mov	r1, r8
 8000c6c:	0409      	lsls	r1, r1, #16
 8000c6e:	0c09      	lsrs	r1, r1, #16
 8000c70:	4643      	mov	r3, r8
 8000c72:	0008      	movs	r0, r1
 8000c74:	0c35      	lsrs	r5, r6, #16
 8000c76:	0436      	lsls	r6, r6, #16
 8000c78:	0c1b      	lsrs	r3, r3, #16
 8000c7a:	0c36      	lsrs	r6, r6, #16
 8000c7c:	4370      	muls	r0, r6
 8000c7e:	4369      	muls	r1, r5
 8000c80:	435e      	muls	r6, r3
 8000c82:	435d      	muls	r5, r3
 8000c84:	1876      	adds	r6, r6, r1
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	199b      	adds	r3, r3, r6
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d903      	bls.n	8000c96 <__aeabi_fmul+0xb6>
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	0249      	lsls	r1, r1, #9
 8000c92:	468c      	mov	ip, r1
 8000c94:	4465      	add	r5, ip
 8000c96:	0400      	lsls	r0, r0, #16
 8000c98:	0419      	lsls	r1, r3, #16
 8000c9a:	0c00      	lsrs	r0, r0, #16
 8000c9c:	1809      	adds	r1, r1, r0
 8000c9e:	018e      	lsls	r6, r1, #6
 8000ca0:	1e70      	subs	r0, r6, #1
 8000ca2:	4186      	sbcs	r6, r0
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	0e89      	lsrs	r1, r1, #26
 8000ca8:	195b      	adds	r3, r3, r5
 8000caa:	430e      	orrs	r6, r1
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	431e      	orrs	r6, r3
 8000cb0:	011b      	lsls	r3, r3, #4
 8000cb2:	d46c      	bmi.n	8000d8e <__aeabi_fmul+0x1ae>
 8000cb4:	0023      	movs	r3, r4
 8000cb6:	337f      	adds	r3, #127	@ 0x7f
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	dc00      	bgt.n	8000cbe <__aeabi_fmul+0xde>
 8000cbc:	e0b1      	b.n	8000e22 <__aeabi_fmul+0x242>
 8000cbe:	0015      	movs	r5, r2
 8000cc0:	0771      	lsls	r1, r6, #29
 8000cc2:	d00b      	beq.n	8000cdc <__aeabi_fmul+0xfc>
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	4030      	ands	r0, r6
 8000cca:	2804      	cmp	r0, #4
 8000ccc:	d006      	beq.n	8000cdc <__aeabi_fmul+0xfc>
 8000cce:	3604      	adds	r6, #4
 8000cd0:	0132      	lsls	r2, r6, #4
 8000cd2:	d503      	bpl.n	8000cdc <__aeabi_fmul+0xfc>
 8000cd4:	4b6e      	ldr	r3, [pc, #440]	@ (8000e90 <__aeabi_fmul+0x2b0>)
 8000cd6:	401e      	ands	r6, r3
 8000cd8:	000b      	movs	r3, r1
 8000cda:	3380      	adds	r3, #128	@ 0x80
 8000cdc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cde:	dd00      	ble.n	8000ce2 <__aeabi_fmul+0x102>
 8000ce0:	e0bd      	b.n	8000e5e <__aeabi_fmul+0x27e>
 8000ce2:	01b2      	lsls	r2, r6, #6
 8000ce4:	0a52      	lsrs	r2, r2, #9
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	e048      	b.n	8000d7c <__aeabi_fmul+0x19c>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_fmul+0x110>
 8000cee:	e092      	b.n	8000e16 <__aeabi_fmul+0x236>
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	4699      	mov	r9, r3
 8000cf4:	3b06      	subs	r3, #6
 8000cf6:	469a      	mov	sl, r3
 8000cf8:	027b      	lsls	r3, r7, #9
 8000cfa:	0a5b      	lsrs	r3, r3, #9
 8000cfc:	4698      	mov	r8, r3
 8000cfe:	007b      	lsls	r3, r7, #1
 8000d00:	24ff      	movs	r4, #255	@ 0xff
 8000d02:	0e1b      	lsrs	r3, r3, #24
 8000d04:	0fff      	lsrs	r7, r7, #31
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d18a      	bne.n	8000c20 <__aeabi_fmul+0x40>
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	d164      	bne.n	8000dda <__aeabi_fmul+0x1fa>
 8000d10:	4649      	mov	r1, r9
 8000d12:	3201      	adds	r2, #1
 8000d14:	4311      	orrs	r1, r2
 8000d16:	4689      	mov	r9, r1
 8000d18:	290a      	cmp	r1, #10
 8000d1a:	dc08      	bgt.n	8000d2e <__aeabi_fmul+0x14e>
 8000d1c:	407d      	eors	r5, r7
 8000d1e:	2001      	movs	r0, #1
 8000d20:	b2ea      	uxtb	r2, r5
 8000d22:	2902      	cmp	r1, #2
 8000d24:	dc91      	bgt.n	8000c4a <__aeabi_fmul+0x6a>
 8000d26:	0015      	movs	r5, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e027      	b.n	8000d7c <__aeabi_fmul+0x19c>
 8000d2c:	0015      	movs	r5, r2
 8000d2e:	4653      	mov	r3, sl
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fmul+0x156>
 8000d34:	e093      	b.n	8000e5e <__aeabi_fmul+0x27e>
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d01a      	beq.n	8000d70 <__aeabi_fmul+0x190>
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d12c      	bne.n	8000d98 <__aeabi_fmul+0x1b8>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2200      	movs	r2, #0
 8000d42:	e01b      	b.n	8000d7c <__aeabi_fmul+0x19c>
 8000d44:	4643      	mov	r3, r8
 8000d46:	34ff      	adds	r4, #255	@ 0xff
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d055      	beq.n	8000df8 <__aeabi_fmul+0x218>
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	464b      	mov	r3, r9
 8000d50:	430b      	orrs	r3, r1
 8000d52:	0019      	movs	r1, r3
 8000d54:	2b0a      	cmp	r3, #10
 8000d56:	dc00      	bgt.n	8000d5a <__aeabi_fmul+0x17a>
 8000d58:	e092      	b.n	8000e80 <__aeabi_fmul+0x2a0>
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fmul+0x180>
 8000d5e:	e08c      	b.n	8000e7a <__aeabi_fmul+0x29a>
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	03d2      	lsls	r2, r2, #15
 8000d64:	4216      	tst	r6, r2
 8000d66:	d003      	beq.n	8000d70 <__aeabi_fmul+0x190>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	4213      	tst	r3, r2
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fmul+0x190>
 8000d6e:	e07d      	b.n	8000e6c <__aeabi_fmul+0x28c>
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	03d2      	lsls	r2, r2, #15
 8000d74:	4332      	orrs	r2, r6
 8000d76:	0252      	lsls	r2, r2, #9
 8000d78:	0a52      	lsrs	r2, r2, #9
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	05d8      	lsls	r0, r3, #23
 8000d7e:	07ed      	lsls	r5, r5, #31
 8000d80:	4310      	orrs	r0, r2
 8000d82:	4328      	orrs	r0, r5
 8000d84:	bce0      	pop	{r5, r6, r7}
 8000d86:	46ba      	mov	sl, r7
 8000d88:	46b1      	mov	r9, r6
 8000d8a:	46a8      	mov	r8, r5
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8e:	2301      	movs	r3, #1
 8000d90:	0015      	movs	r5, r2
 8000d92:	0871      	lsrs	r1, r6, #1
 8000d94:	401e      	ands	r6, r3
 8000d96:	430e      	orrs	r6, r1
 8000d98:	0023      	movs	r3, r4
 8000d9a:	3380      	adds	r3, #128	@ 0x80
 8000d9c:	1c61      	adds	r1, r4, #1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dd41      	ble.n	8000e26 <__aeabi_fmul+0x246>
 8000da2:	0772      	lsls	r2, r6, #29
 8000da4:	d094      	beq.n	8000cd0 <__aeabi_fmul+0xf0>
 8000da6:	220f      	movs	r2, #15
 8000da8:	4032      	ands	r2, r6
 8000daa:	2a04      	cmp	r2, #4
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fmul+0x1d0>
 8000dae:	e78e      	b.n	8000cce <__aeabi_fmul+0xee>
 8000db0:	e78e      	b.n	8000cd0 <__aeabi_fmul+0xf0>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d105      	bne.n	8000dc2 <__aeabi_fmul+0x1e2>
 8000db6:	2304      	movs	r3, #4
 8000db8:	4699      	mov	r9, r3
 8000dba:	3b03      	subs	r3, #3
 8000dbc:	2400      	movs	r4, #0
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	e726      	b.n	8000c10 <__aeabi_fmul+0x30>
 8000dc2:	0030      	movs	r0, r6
 8000dc4:	f000 fb50 	bl	8001468 <__clzsi2>
 8000dc8:	2476      	movs	r4, #118	@ 0x76
 8000dca:	1f43      	subs	r3, r0, #5
 8000dcc:	409e      	lsls	r6, r3
 8000dce:	2300      	movs	r3, #0
 8000dd0:	4264      	negs	r4, r4
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	1a24      	subs	r4, r4, r0
 8000dd8:	e71a      	b.n	8000c10 <__aeabi_fmul+0x30>
 8000dda:	4640      	mov	r0, r8
 8000ddc:	f000 fb44 	bl	8001468 <__clzsi2>
 8000de0:	464b      	mov	r3, r9
 8000de2:	1a24      	subs	r4, r4, r0
 8000de4:	3c76      	subs	r4, #118	@ 0x76
 8000de6:	2b0a      	cmp	r3, #10
 8000de8:	dca1      	bgt.n	8000d2e <__aeabi_fmul+0x14e>
 8000dea:	4643      	mov	r3, r8
 8000dec:	3805      	subs	r0, #5
 8000dee:	4083      	lsls	r3, r0
 8000df0:	407d      	eors	r5, r7
 8000df2:	4698      	mov	r8, r3
 8000df4:	b2ea      	uxtb	r2, r5
 8000df6:	e724      	b.n	8000c42 <__aeabi_fmul+0x62>
 8000df8:	464a      	mov	r2, r9
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	002a      	movs	r2, r5
 8000e00:	407a      	eors	r2, r7
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	2b0a      	cmp	r3, #10
 8000e06:	dc92      	bgt.n	8000d2e <__aeabi_fmul+0x14e>
 8000e08:	4649      	mov	r1, r9
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	d026      	beq.n	8000e5e <__aeabi_fmul+0x27e>
 8000e10:	4699      	mov	r9, r3
 8000e12:	2002      	movs	r0, #2
 8000e14:	e719      	b.n	8000c4a <__aeabi_fmul+0x6a>
 8000e16:	230c      	movs	r3, #12
 8000e18:	4699      	mov	r9, r3
 8000e1a:	3b09      	subs	r3, #9
 8000e1c:	24ff      	movs	r4, #255	@ 0xff
 8000e1e:	469a      	mov	sl, r3
 8000e20:	e6f6      	b.n	8000c10 <__aeabi_fmul+0x30>
 8000e22:	0015      	movs	r5, r2
 8000e24:	0021      	movs	r1, r4
 8000e26:	2201      	movs	r2, #1
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b1b      	cmp	r3, #27
 8000e2c:	dd00      	ble.n	8000e30 <__aeabi_fmul+0x250>
 8000e2e:	e786      	b.n	8000d3e <__aeabi_fmul+0x15e>
 8000e30:	319e      	adds	r1, #158	@ 0x9e
 8000e32:	0032      	movs	r2, r6
 8000e34:	408e      	lsls	r6, r1
 8000e36:	40da      	lsrs	r2, r3
 8000e38:	1e73      	subs	r3, r6, #1
 8000e3a:	419e      	sbcs	r6, r3
 8000e3c:	4332      	orrs	r2, r6
 8000e3e:	0753      	lsls	r3, r2, #29
 8000e40:	d004      	beq.n	8000e4c <__aeabi_fmul+0x26c>
 8000e42:	230f      	movs	r3, #15
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d000      	beq.n	8000e4c <__aeabi_fmul+0x26c>
 8000e4a:	3204      	adds	r2, #4
 8000e4c:	0153      	lsls	r3, r2, #5
 8000e4e:	d510      	bpl.n	8000e72 <__aeabi_fmul+0x292>
 8000e50:	2301      	movs	r3, #1
 8000e52:	2200      	movs	r2, #0
 8000e54:	e792      	b.n	8000d7c <__aeabi_fmul+0x19c>
 8000e56:	003d      	movs	r5, r7
 8000e58:	4646      	mov	r6, r8
 8000e5a:	4682      	mov	sl, r0
 8000e5c:	e767      	b.n	8000d2e <__aeabi_fmul+0x14e>
 8000e5e:	23ff      	movs	r3, #255	@ 0xff
 8000e60:	2200      	movs	r2, #0
 8000e62:	e78b      	b.n	8000d7c <__aeabi_fmul+0x19c>
 8000e64:	2280      	movs	r2, #128	@ 0x80
 8000e66:	2500      	movs	r5, #0
 8000e68:	03d2      	lsls	r2, r2, #15
 8000e6a:	e786      	b.n	8000d7a <__aeabi_fmul+0x19a>
 8000e6c:	003d      	movs	r5, r7
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	e783      	b.n	8000d7a <__aeabi_fmul+0x19a>
 8000e72:	0192      	lsls	r2, r2, #6
 8000e74:	2300      	movs	r3, #0
 8000e76:	0a52      	lsrs	r2, r2, #9
 8000e78:	e780      	b.n	8000d7c <__aeabi_fmul+0x19c>
 8000e7a:	003d      	movs	r5, r7
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	e777      	b.n	8000d70 <__aeabi_fmul+0x190>
 8000e80:	002a      	movs	r2, r5
 8000e82:	2301      	movs	r3, #1
 8000e84:	407a      	eors	r2, r7
 8000e86:	408b      	lsls	r3, r1
 8000e88:	2003      	movs	r0, #3
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	e6e9      	b.n	8000c62 <__aeabi_fmul+0x82>
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	f7ffffff 	.word	0xf7ffffff

08000e94 <__aeabi_fsub>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	4647      	mov	r7, r8
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	0243      	lsls	r3, r0, #9
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	0a5f      	lsrs	r7, r3, #9
 8000ea0:	099b      	lsrs	r3, r3, #6
 8000ea2:	0045      	lsls	r5, r0, #1
 8000ea4:	004a      	lsls	r2, r1, #1
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	0fc4      	lsrs	r4, r0, #31
 8000eac:	0fce      	lsrs	r6, r1, #31
 8000eae:	0e2d      	lsrs	r5, r5, #24
 8000eb0:	0a58      	lsrs	r0, r3, #9
 8000eb2:	0e12      	lsrs	r2, r2, #24
 8000eb4:	0999      	lsrs	r1, r3, #6
 8000eb6:	2aff      	cmp	r2, #255	@ 0xff
 8000eb8:	d06b      	beq.n	8000f92 <__aeabi_fsub+0xfe>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	405e      	eors	r6, r3
 8000ebe:	1aab      	subs	r3, r5, r2
 8000ec0:	42b4      	cmp	r4, r6
 8000ec2:	d04b      	beq.n	8000f5c <__aeabi_fsub+0xc8>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_fsub+0x36>
 8000ec8:	e0ff      	b.n	80010ca <__aeabi_fsub+0x236>
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x3c>
 8000ece:	e088      	b.n	8000fe2 <__aeabi_fsub+0x14e>
 8000ed0:	2dff      	cmp	r5, #255	@ 0xff
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x42>
 8000ed4:	e0ef      	b.n	80010b6 <__aeabi_fsub+0x222>
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	04d2      	lsls	r2, r2, #19
 8000eda:	4311      	orrs	r1, r2
 8000edc:	2001      	movs	r0, #1
 8000ede:	2b1b      	cmp	r3, #27
 8000ee0:	dc08      	bgt.n	8000ef4 <__aeabi_fsub+0x60>
 8000ee2:	0008      	movs	r0, r1
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	4099      	lsls	r1, r3
 8000eec:	000b      	movs	r3, r1
 8000eee:	1e5a      	subs	r2, r3, #1
 8000ef0:	4193      	sbcs	r3, r2
 8000ef2:	4318      	orrs	r0, r3
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	1a1b      	subs	r3, r3, r0
 8000ef8:	469c      	mov	ip, r3
 8000efa:	4663      	mov	r3, ip
 8000efc:	015b      	lsls	r3, r3, #5
 8000efe:	d400      	bmi.n	8000f02 <__aeabi_fsub+0x6e>
 8000f00:	e0cd      	b.n	800109e <__aeabi_fsub+0x20a>
 8000f02:	4663      	mov	r3, ip
 8000f04:	019f      	lsls	r7, r3, #6
 8000f06:	09bf      	lsrs	r7, r7, #6
 8000f08:	0038      	movs	r0, r7
 8000f0a:	f000 faad 	bl	8001468 <__clzsi2>
 8000f0e:	003b      	movs	r3, r7
 8000f10:	3805      	subs	r0, #5
 8000f12:	4083      	lsls	r3, r0
 8000f14:	4285      	cmp	r5, r0
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x86>
 8000f18:	e0a2      	b.n	8001060 <__aeabi_fsub+0x1cc>
 8000f1a:	4ab7      	ldr	r2, [pc, #732]	@ (80011f8 <__aeabi_fsub+0x364>)
 8000f1c:	1a2d      	subs	r5, r5, r0
 8000f1e:	401a      	ands	r2, r3
 8000f20:	4694      	mov	ip, r2
 8000f22:	075a      	lsls	r2, r3, #29
 8000f24:	d100      	bne.n	8000f28 <__aeabi_fsub+0x94>
 8000f26:	e0c3      	b.n	80010b0 <__aeabi_fsub+0x21c>
 8000f28:	220f      	movs	r2, #15
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x9e>
 8000f30:	e0be      	b.n	80010b0 <__aeabi_fsub+0x21c>
 8000f32:	2304      	movs	r3, #4
 8000f34:	4698      	mov	r8, r3
 8000f36:	44c4      	add	ip, r8
 8000f38:	4663      	mov	r3, ip
 8000f3a:	015b      	lsls	r3, r3, #5
 8000f3c:	d400      	bmi.n	8000f40 <__aeabi_fsub+0xac>
 8000f3e:	e0b7      	b.n	80010b0 <__aeabi_fsub+0x21c>
 8000f40:	1c68      	adds	r0, r5, #1
 8000f42:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f44:	d000      	beq.n	8000f48 <__aeabi_fsub+0xb4>
 8000f46:	e0a5      	b.n	8001094 <__aeabi_fsub+0x200>
 8000f48:	20ff      	movs	r0, #255	@ 0xff
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	05c0      	lsls	r0, r0, #23
 8000f4e:	4310      	orrs	r0, r2
 8000f50:	07e4      	lsls	r4, r4, #31
 8000f52:	4320      	orrs	r0, r4
 8000f54:	bcc0      	pop	{r6, r7}
 8000f56:	46b9      	mov	r9, r7
 8000f58:	46b0      	mov	r8, r6
 8000f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dc00      	bgt.n	8000f62 <__aeabi_fsub+0xce>
 8000f60:	e1eb      	b.n	800133a <__aeabi_fsub+0x4a6>
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	d046      	beq.n	8000ff4 <__aeabi_fsub+0x160>
 8000f66:	2dff      	cmp	r5, #255	@ 0xff
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0xd8>
 8000f6a:	e0a4      	b.n	80010b6 <__aeabi_fsub+0x222>
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	04d2      	lsls	r2, r2, #19
 8000f70:	4311      	orrs	r1, r2
 8000f72:	2b1b      	cmp	r3, #27
 8000f74:	dc00      	bgt.n	8000f78 <__aeabi_fsub+0xe4>
 8000f76:	e0fb      	b.n	8001170 <__aeabi_fsub+0x2dc>
 8000f78:	2305      	movs	r3, #5
 8000f7a:	4698      	mov	r8, r3
 8000f7c:	002b      	movs	r3, r5
 8000f7e:	44c4      	add	ip, r8
 8000f80:	4662      	mov	r2, ip
 8000f82:	08d7      	lsrs	r7, r2, #3
 8000f84:	2bff      	cmp	r3, #255	@ 0xff
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0xf6>
 8000f88:	e095      	b.n	80010b6 <__aeabi_fsub+0x222>
 8000f8a:	027a      	lsls	r2, r7, #9
 8000f8c:	0a52      	lsrs	r2, r2, #9
 8000f8e:	b2d8      	uxtb	r0, r3
 8000f90:	e7dc      	b.n	8000f4c <__aeabi_fsub+0xb8>
 8000f92:	002b      	movs	r3, r5
 8000f94:	3bff      	subs	r3, #255	@ 0xff
 8000f96:	4699      	mov	r9, r3
 8000f98:	2900      	cmp	r1, #0
 8000f9a:	d118      	bne.n	8000fce <__aeabi_fsub+0x13a>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	405e      	eors	r6, r3
 8000fa0:	42b4      	cmp	r4, r6
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x112>
 8000fa4:	e0ca      	b.n	800113c <__aeabi_fsub+0x2a8>
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d02d      	beq.n	8001008 <__aeabi_fsub+0x174>
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x11e>
 8000fb0:	e13c      	b.n	800122c <__aeabi_fsub+0x398>
 8000fb2:	23ff      	movs	r3, #255	@ 0xff
 8000fb4:	4664      	mov	r4, ip
 8000fb6:	2c00      	cmp	r4, #0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_fsub+0x128>
 8000fba:	e15f      	b.n	800127c <__aeabi_fsub+0x3e8>
 8000fbc:	1e5d      	subs	r5, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x130>
 8000fc2:	e174      	b.n	80012ae <__aeabi_fsub+0x41a>
 8000fc4:	0034      	movs	r4, r6
 8000fc6:	2bff      	cmp	r3, #255	@ 0xff
 8000fc8:	d074      	beq.n	80010b4 <__aeabi_fsub+0x220>
 8000fca:	002b      	movs	r3, r5
 8000fcc:	e103      	b.n	80011d6 <__aeabi_fsub+0x342>
 8000fce:	42b4      	cmp	r4, r6
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fsub+0x140>
 8000fd2:	e09c      	b.n	800110e <__aeabi_fsub+0x27a>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d017      	beq.n	8001008 <__aeabi_fsub+0x174>
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	d0ea      	beq.n	8000fb2 <__aeabi_fsub+0x11e>
 8000fdc:	0007      	movs	r7, r0
 8000fde:	0034      	movs	r4, r6
 8000fe0:	e06c      	b.n	80010bc <__aeabi_fsub+0x228>
 8000fe2:	2900      	cmp	r1, #0
 8000fe4:	d0cc      	beq.n	8000f80 <__aeabi_fsub+0xec>
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d02b      	beq.n	8001044 <__aeabi_fsub+0x1b0>
 8000fec:	2bff      	cmp	r3, #255	@ 0xff
 8000fee:	d062      	beq.n	80010b6 <__aeabi_fsub+0x222>
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	e773      	b.n	8000edc <__aeabi_fsub+0x48>
 8000ff4:	2900      	cmp	r1, #0
 8000ff6:	d0c3      	beq.n	8000f80 <__aeabi_fsub+0xec>
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x16c>
 8000ffe:	e11e      	b.n	800123e <__aeabi_fsub+0x3aa>
 8001000:	2bff      	cmp	r3, #255	@ 0xff
 8001002:	d058      	beq.n	80010b6 <__aeabi_fsub+0x222>
 8001004:	0013      	movs	r3, r2
 8001006:	e7b4      	b.n	8000f72 <__aeabi_fsub+0xde>
 8001008:	22fe      	movs	r2, #254	@ 0xfe
 800100a:	1c6b      	adds	r3, r5, #1
 800100c:	421a      	tst	r2, r3
 800100e:	d10d      	bne.n	800102c <__aeabi_fsub+0x198>
 8001010:	2d00      	cmp	r5, #0
 8001012:	d060      	beq.n	80010d6 <__aeabi_fsub+0x242>
 8001014:	4663      	mov	r3, ip
 8001016:	2b00      	cmp	r3, #0
 8001018:	d000      	beq.n	800101c <__aeabi_fsub+0x188>
 800101a:	e120      	b.n	800125e <__aeabi_fsub+0x3ca>
 800101c:	2900      	cmp	r1, #0
 800101e:	d000      	beq.n	8001022 <__aeabi_fsub+0x18e>
 8001020:	e128      	b.n	8001274 <__aeabi_fsub+0x3e0>
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	2400      	movs	r4, #0
 8001026:	20ff      	movs	r0, #255	@ 0xff
 8001028:	03d2      	lsls	r2, r2, #15
 800102a:	e78f      	b.n	8000f4c <__aeabi_fsub+0xb8>
 800102c:	4663      	mov	r3, ip
 800102e:	1a5f      	subs	r7, r3, r1
 8001030:	017b      	lsls	r3, r7, #5
 8001032:	d500      	bpl.n	8001036 <__aeabi_fsub+0x1a2>
 8001034:	e0fe      	b.n	8001234 <__aeabi_fsub+0x3a0>
 8001036:	2f00      	cmp	r7, #0
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x1a8>
 800103a:	e765      	b.n	8000f08 <__aeabi_fsub+0x74>
 800103c:	2400      	movs	r4, #0
 800103e:	2000      	movs	r0, #0
 8001040:	2200      	movs	r2, #0
 8001042:	e783      	b.n	8000f4c <__aeabi_fsub+0xb8>
 8001044:	4663      	mov	r3, ip
 8001046:	1a59      	subs	r1, r3, r1
 8001048:	014b      	lsls	r3, r1, #5
 800104a:	d400      	bmi.n	800104e <__aeabi_fsub+0x1ba>
 800104c:	e119      	b.n	8001282 <__aeabi_fsub+0x3ee>
 800104e:	018f      	lsls	r7, r1, #6
 8001050:	09bf      	lsrs	r7, r7, #6
 8001052:	0038      	movs	r0, r7
 8001054:	f000 fa08 	bl	8001468 <__clzsi2>
 8001058:	003b      	movs	r3, r7
 800105a:	3805      	subs	r0, #5
 800105c:	4083      	lsls	r3, r0
 800105e:	2501      	movs	r5, #1
 8001060:	2220      	movs	r2, #32
 8001062:	1b40      	subs	r0, r0, r5
 8001064:	3001      	adds	r0, #1
 8001066:	1a12      	subs	r2, r2, r0
 8001068:	0019      	movs	r1, r3
 800106a:	4093      	lsls	r3, r2
 800106c:	40c1      	lsrs	r1, r0
 800106e:	1e5a      	subs	r2, r3, #1
 8001070:	4193      	sbcs	r3, r2
 8001072:	4319      	orrs	r1, r3
 8001074:	468c      	mov	ip, r1
 8001076:	1e0b      	subs	r3, r1, #0
 8001078:	d0e1      	beq.n	800103e <__aeabi_fsub+0x1aa>
 800107a:	075b      	lsls	r3, r3, #29
 800107c:	d100      	bne.n	8001080 <__aeabi_fsub+0x1ec>
 800107e:	e152      	b.n	8001326 <__aeabi_fsub+0x492>
 8001080:	230f      	movs	r3, #15
 8001082:	2500      	movs	r5, #0
 8001084:	400b      	ands	r3, r1
 8001086:	2b04      	cmp	r3, #4
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x1f8>
 800108a:	e752      	b.n	8000f32 <__aeabi_fsub+0x9e>
 800108c:	2001      	movs	r0, #1
 800108e:	014a      	lsls	r2, r1, #5
 8001090:	d400      	bmi.n	8001094 <__aeabi_fsub+0x200>
 8001092:	e092      	b.n	80011ba <__aeabi_fsub+0x326>
 8001094:	b2c0      	uxtb	r0, r0
 8001096:	4663      	mov	r3, ip
 8001098:	019a      	lsls	r2, r3, #6
 800109a:	0a52      	lsrs	r2, r2, #9
 800109c:	e756      	b.n	8000f4c <__aeabi_fsub+0xb8>
 800109e:	4663      	mov	r3, ip
 80010a0:	075b      	lsls	r3, r3, #29
 80010a2:	d005      	beq.n	80010b0 <__aeabi_fsub+0x21c>
 80010a4:	230f      	movs	r3, #15
 80010a6:	4662      	mov	r2, ip
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x21c>
 80010ae:	e740      	b.n	8000f32 <__aeabi_fsub+0x9e>
 80010b0:	002b      	movs	r3, r5
 80010b2:	e765      	b.n	8000f80 <__aeabi_fsub+0xec>
 80010b4:	0007      	movs	r7, r0
 80010b6:	2f00      	cmp	r7, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_fsub+0x228>
 80010ba:	e745      	b.n	8000f48 <__aeabi_fsub+0xb4>
 80010bc:	2280      	movs	r2, #128	@ 0x80
 80010be:	03d2      	lsls	r2, r2, #15
 80010c0:	433a      	orrs	r2, r7
 80010c2:	0252      	lsls	r2, r2, #9
 80010c4:	20ff      	movs	r0, #255	@ 0xff
 80010c6:	0a52      	lsrs	r2, r2, #9
 80010c8:	e740      	b.n	8000f4c <__aeabi_fsub+0xb8>
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d179      	bne.n	80011c2 <__aeabi_fsub+0x32e>
 80010ce:	22fe      	movs	r2, #254	@ 0xfe
 80010d0:	1c6b      	adds	r3, r5, #1
 80010d2:	421a      	tst	r2, r3
 80010d4:	d1aa      	bne.n	800102c <__aeabi_fsub+0x198>
 80010d6:	4663      	mov	r3, ip
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d100      	bne.n	80010de <__aeabi_fsub+0x24a>
 80010dc:	e0f5      	b.n	80012ca <__aeabi_fsub+0x436>
 80010de:	2900      	cmp	r1, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x250>
 80010e2:	e0d1      	b.n	8001288 <__aeabi_fsub+0x3f4>
 80010e4:	1a5f      	subs	r7, r3, r1
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	04db      	lsls	r3, r3, #19
 80010ea:	421f      	tst	r7, r3
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x25c>
 80010ee:	e10e      	b.n	800130e <__aeabi_fsub+0x47a>
 80010f0:	4662      	mov	r2, ip
 80010f2:	2401      	movs	r4, #1
 80010f4:	1a8a      	subs	r2, r1, r2
 80010f6:	4694      	mov	ip, r2
 80010f8:	2000      	movs	r0, #0
 80010fa:	4034      	ands	r4, r6
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x26e>
 8001100:	e724      	b.n	8000f4c <__aeabi_fsub+0xb8>
 8001102:	2001      	movs	r0, #1
 8001104:	421a      	tst	r2, r3
 8001106:	d1c6      	bne.n	8001096 <__aeabi_fsub+0x202>
 8001108:	2300      	movs	r3, #0
 800110a:	08d7      	lsrs	r7, r2, #3
 800110c:	e73d      	b.n	8000f8a <__aeabi_fsub+0xf6>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d017      	beq.n	8001142 <__aeabi_fsub+0x2ae>
 8001112:	2d00      	cmp	r5, #0
 8001114:	d000      	beq.n	8001118 <__aeabi_fsub+0x284>
 8001116:	e0af      	b.n	8001278 <__aeabi_fsub+0x3e4>
 8001118:	23ff      	movs	r3, #255	@ 0xff
 800111a:	4665      	mov	r5, ip
 800111c:	2d00      	cmp	r5, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_fsub+0x28e>
 8001120:	e0ad      	b.n	800127e <__aeabi_fsub+0x3ea>
 8001122:	1e5e      	subs	r6, r3, #1
 8001124:	2b01      	cmp	r3, #1
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x296>
 8001128:	e089      	b.n	800123e <__aeabi_fsub+0x3aa>
 800112a:	2bff      	cmp	r3, #255	@ 0xff
 800112c:	d0c2      	beq.n	80010b4 <__aeabi_fsub+0x220>
 800112e:	2e1b      	cmp	r6, #27
 8001130:	dc00      	bgt.n	8001134 <__aeabi_fsub+0x2a0>
 8001132:	e0ab      	b.n	800128c <__aeabi_fsub+0x3f8>
 8001134:	1d4b      	adds	r3, r1, #5
 8001136:	469c      	mov	ip, r3
 8001138:	0013      	movs	r3, r2
 800113a:	e721      	b.n	8000f80 <__aeabi_fsub+0xec>
 800113c:	464b      	mov	r3, r9
 800113e:	2b00      	cmp	r3, #0
 8001140:	d170      	bne.n	8001224 <__aeabi_fsub+0x390>
 8001142:	22fe      	movs	r2, #254	@ 0xfe
 8001144:	1c6b      	adds	r3, r5, #1
 8001146:	421a      	tst	r2, r3
 8001148:	d15e      	bne.n	8001208 <__aeabi_fsub+0x374>
 800114a:	2d00      	cmp	r5, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x2bc>
 800114e:	e0c3      	b.n	80012d8 <__aeabi_fsub+0x444>
 8001150:	4663      	mov	r3, ip
 8001152:	2b00      	cmp	r3, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x2c4>
 8001156:	e0d0      	b.n	80012fa <__aeabi_fsub+0x466>
 8001158:	2900      	cmp	r1, #0
 800115a:	d100      	bne.n	800115e <__aeabi_fsub+0x2ca>
 800115c:	e094      	b.n	8001288 <__aeabi_fsub+0x3f4>
 800115e:	000a      	movs	r2, r1
 8001160:	4462      	add	r2, ip
 8001162:	0153      	lsls	r3, r2, #5
 8001164:	d400      	bmi.n	8001168 <__aeabi_fsub+0x2d4>
 8001166:	e0d8      	b.n	800131a <__aeabi_fsub+0x486>
 8001168:	0192      	lsls	r2, r2, #6
 800116a:	2001      	movs	r0, #1
 800116c:	0a52      	lsrs	r2, r2, #9
 800116e:	e6ed      	b.n	8000f4c <__aeabi_fsub+0xb8>
 8001170:	0008      	movs	r0, r1
 8001172:	2220      	movs	r2, #32
 8001174:	40d8      	lsrs	r0, r3
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4099      	lsls	r1, r3
 800117a:	000b      	movs	r3, r1
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	4193      	sbcs	r3, r2
 8001180:	4303      	orrs	r3, r0
 8001182:	449c      	add	ip, r3
 8001184:	4663      	mov	r3, ip
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	d589      	bpl.n	800109e <__aeabi_fsub+0x20a>
 800118a:	3501      	adds	r5, #1
 800118c:	2dff      	cmp	r5, #255	@ 0xff
 800118e:	d100      	bne.n	8001192 <__aeabi_fsub+0x2fe>
 8001190:	e6da      	b.n	8000f48 <__aeabi_fsub+0xb4>
 8001192:	4662      	mov	r2, ip
 8001194:	2301      	movs	r3, #1
 8001196:	4919      	ldr	r1, [pc, #100]	@ (80011fc <__aeabi_fsub+0x368>)
 8001198:	4013      	ands	r3, r2
 800119a:	0852      	lsrs	r2, r2, #1
 800119c:	400a      	ands	r2, r1
 800119e:	431a      	orrs	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	4694      	mov	ip, r2
 80011a4:	075b      	lsls	r3, r3, #29
 80011a6:	d004      	beq.n	80011b2 <__aeabi_fsub+0x31e>
 80011a8:	230f      	movs	r3, #15
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d000      	beq.n	80011b2 <__aeabi_fsub+0x31e>
 80011b0:	e6bf      	b.n	8000f32 <__aeabi_fsub+0x9e>
 80011b2:	4663      	mov	r3, ip
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	d500      	bpl.n	80011ba <__aeabi_fsub+0x326>
 80011b8:	e6c2      	b.n	8000f40 <__aeabi_fsub+0xac>
 80011ba:	4663      	mov	r3, ip
 80011bc:	08df      	lsrs	r7, r3, #3
 80011be:	002b      	movs	r3, r5
 80011c0:	e6e3      	b.n	8000f8a <__aeabi_fsub+0xf6>
 80011c2:	1b53      	subs	r3, r2, r5
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	d100      	bne.n	80011ca <__aeabi_fsub+0x336>
 80011c8:	e6f4      	b.n	8000fb4 <__aeabi_fsub+0x120>
 80011ca:	2080      	movs	r0, #128	@ 0x80
 80011cc:	4664      	mov	r4, ip
 80011ce:	04c0      	lsls	r0, r0, #19
 80011d0:	4304      	orrs	r4, r0
 80011d2:	46a4      	mov	ip, r4
 80011d4:	0034      	movs	r4, r6
 80011d6:	2001      	movs	r0, #1
 80011d8:	2b1b      	cmp	r3, #27
 80011da:	dc09      	bgt.n	80011f0 <__aeabi_fsub+0x35c>
 80011dc:	2520      	movs	r5, #32
 80011de:	4660      	mov	r0, ip
 80011e0:	40d8      	lsrs	r0, r3
 80011e2:	1aeb      	subs	r3, r5, r3
 80011e4:	4665      	mov	r5, ip
 80011e6:	409d      	lsls	r5, r3
 80011e8:	002b      	movs	r3, r5
 80011ea:	1e5d      	subs	r5, r3, #1
 80011ec:	41ab      	sbcs	r3, r5
 80011ee:	4318      	orrs	r0, r3
 80011f0:	1a0b      	subs	r3, r1, r0
 80011f2:	469c      	mov	ip, r3
 80011f4:	0015      	movs	r5, r2
 80011f6:	e680      	b.n	8000efa <__aeabi_fsub+0x66>
 80011f8:	fbffffff 	.word	0xfbffffff
 80011fc:	7dffffff 	.word	0x7dffffff
 8001200:	22fe      	movs	r2, #254	@ 0xfe
 8001202:	1c6b      	adds	r3, r5, #1
 8001204:	4213      	tst	r3, r2
 8001206:	d0a3      	beq.n	8001150 <__aeabi_fsub+0x2bc>
 8001208:	2bff      	cmp	r3, #255	@ 0xff
 800120a:	d100      	bne.n	800120e <__aeabi_fsub+0x37a>
 800120c:	e69c      	b.n	8000f48 <__aeabi_fsub+0xb4>
 800120e:	4461      	add	r1, ip
 8001210:	0849      	lsrs	r1, r1, #1
 8001212:	074a      	lsls	r2, r1, #29
 8001214:	d049      	beq.n	80012aa <__aeabi_fsub+0x416>
 8001216:	220f      	movs	r2, #15
 8001218:	400a      	ands	r2, r1
 800121a:	2a04      	cmp	r2, #4
 800121c:	d045      	beq.n	80012aa <__aeabi_fsub+0x416>
 800121e:	1d0a      	adds	r2, r1, #4
 8001220:	4694      	mov	ip, r2
 8001222:	e6ad      	b.n	8000f80 <__aeabi_fsub+0xec>
 8001224:	2d00      	cmp	r5, #0
 8001226:	d100      	bne.n	800122a <__aeabi_fsub+0x396>
 8001228:	e776      	b.n	8001118 <__aeabi_fsub+0x284>
 800122a:	e68d      	b.n	8000f48 <__aeabi_fsub+0xb4>
 800122c:	0034      	movs	r4, r6
 800122e:	20ff      	movs	r0, #255	@ 0xff
 8001230:	2200      	movs	r2, #0
 8001232:	e68b      	b.n	8000f4c <__aeabi_fsub+0xb8>
 8001234:	4663      	mov	r3, ip
 8001236:	2401      	movs	r4, #1
 8001238:	1acf      	subs	r7, r1, r3
 800123a:	4034      	ands	r4, r6
 800123c:	e664      	b.n	8000f08 <__aeabi_fsub+0x74>
 800123e:	4461      	add	r1, ip
 8001240:	014b      	lsls	r3, r1, #5
 8001242:	d56d      	bpl.n	8001320 <__aeabi_fsub+0x48c>
 8001244:	0848      	lsrs	r0, r1, #1
 8001246:	4944      	ldr	r1, [pc, #272]	@ (8001358 <__aeabi_fsub+0x4c4>)
 8001248:	4001      	ands	r1, r0
 800124a:	0743      	lsls	r3, r0, #29
 800124c:	d02c      	beq.n	80012a8 <__aeabi_fsub+0x414>
 800124e:	230f      	movs	r3, #15
 8001250:	4003      	ands	r3, r0
 8001252:	2b04      	cmp	r3, #4
 8001254:	d028      	beq.n	80012a8 <__aeabi_fsub+0x414>
 8001256:	1d0b      	adds	r3, r1, #4
 8001258:	469c      	mov	ip, r3
 800125a:	2302      	movs	r3, #2
 800125c:	e690      	b.n	8000f80 <__aeabi_fsub+0xec>
 800125e:	2900      	cmp	r1, #0
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x3d0>
 8001262:	e72b      	b.n	80010bc <__aeabi_fsub+0x228>
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	03db      	lsls	r3, r3, #15
 8001268:	429f      	cmp	r7, r3
 800126a:	d200      	bcs.n	800126e <__aeabi_fsub+0x3da>
 800126c:	e726      	b.n	80010bc <__aeabi_fsub+0x228>
 800126e:	4298      	cmp	r0, r3
 8001270:	d300      	bcc.n	8001274 <__aeabi_fsub+0x3e0>
 8001272:	e723      	b.n	80010bc <__aeabi_fsub+0x228>
 8001274:	2401      	movs	r4, #1
 8001276:	4034      	ands	r4, r6
 8001278:	0007      	movs	r7, r0
 800127a:	e71f      	b.n	80010bc <__aeabi_fsub+0x228>
 800127c:	0034      	movs	r4, r6
 800127e:	468c      	mov	ip, r1
 8001280:	e67e      	b.n	8000f80 <__aeabi_fsub+0xec>
 8001282:	2301      	movs	r3, #1
 8001284:	08cf      	lsrs	r7, r1, #3
 8001286:	e680      	b.n	8000f8a <__aeabi_fsub+0xf6>
 8001288:	2300      	movs	r3, #0
 800128a:	e67e      	b.n	8000f8a <__aeabi_fsub+0xf6>
 800128c:	2020      	movs	r0, #32
 800128e:	4665      	mov	r5, ip
 8001290:	1b80      	subs	r0, r0, r6
 8001292:	4085      	lsls	r5, r0
 8001294:	4663      	mov	r3, ip
 8001296:	0028      	movs	r0, r5
 8001298:	40f3      	lsrs	r3, r6
 800129a:	1e45      	subs	r5, r0, #1
 800129c:	41a8      	sbcs	r0, r5
 800129e:	4303      	orrs	r3, r0
 80012a0:	469c      	mov	ip, r3
 80012a2:	0015      	movs	r5, r2
 80012a4:	448c      	add	ip, r1
 80012a6:	e76d      	b.n	8001184 <__aeabi_fsub+0x2f0>
 80012a8:	2302      	movs	r3, #2
 80012aa:	08cf      	lsrs	r7, r1, #3
 80012ac:	e66d      	b.n	8000f8a <__aeabi_fsub+0xf6>
 80012ae:	1b0f      	subs	r7, r1, r4
 80012b0:	017b      	lsls	r3, r7, #5
 80012b2:	d528      	bpl.n	8001306 <__aeabi_fsub+0x472>
 80012b4:	01bf      	lsls	r7, r7, #6
 80012b6:	09bf      	lsrs	r7, r7, #6
 80012b8:	0038      	movs	r0, r7
 80012ba:	f000 f8d5 	bl	8001468 <__clzsi2>
 80012be:	003b      	movs	r3, r7
 80012c0:	3805      	subs	r0, #5
 80012c2:	4083      	lsls	r3, r0
 80012c4:	0034      	movs	r4, r6
 80012c6:	2501      	movs	r5, #1
 80012c8:	e6ca      	b.n	8001060 <__aeabi_fsub+0x1cc>
 80012ca:	2900      	cmp	r1, #0
 80012cc:	d100      	bne.n	80012d0 <__aeabi_fsub+0x43c>
 80012ce:	e6b5      	b.n	800103c <__aeabi_fsub+0x1a8>
 80012d0:	2401      	movs	r4, #1
 80012d2:	0007      	movs	r7, r0
 80012d4:	4034      	ands	r4, r6
 80012d6:	e658      	b.n	8000f8a <__aeabi_fsub+0xf6>
 80012d8:	4663      	mov	r3, ip
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_fsub+0x44c>
 80012de:	e6e9      	b.n	80010b4 <__aeabi_fsub+0x220>
 80012e0:	2900      	cmp	r1, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_fsub+0x452>
 80012e4:	e6ea      	b.n	80010bc <__aeabi_fsub+0x228>
 80012e6:	2380      	movs	r3, #128	@ 0x80
 80012e8:	03db      	lsls	r3, r3, #15
 80012ea:	429f      	cmp	r7, r3
 80012ec:	d200      	bcs.n	80012f0 <__aeabi_fsub+0x45c>
 80012ee:	e6e5      	b.n	80010bc <__aeabi_fsub+0x228>
 80012f0:	4298      	cmp	r0, r3
 80012f2:	d300      	bcc.n	80012f6 <__aeabi_fsub+0x462>
 80012f4:	e6e2      	b.n	80010bc <__aeabi_fsub+0x228>
 80012f6:	0007      	movs	r7, r0
 80012f8:	e6e0      	b.n	80010bc <__aeabi_fsub+0x228>
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d100      	bne.n	8001300 <__aeabi_fsub+0x46c>
 80012fe:	e69e      	b.n	800103e <__aeabi_fsub+0x1aa>
 8001300:	2300      	movs	r3, #0
 8001302:	08cf      	lsrs	r7, r1, #3
 8001304:	e641      	b.n	8000f8a <__aeabi_fsub+0xf6>
 8001306:	0034      	movs	r4, r6
 8001308:	2301      	movs	r3, #1
 800130a:	08ff      	lsrs	r7, r7, #3
 800130c:	e63d      	b.n	8000f8a <__aeabi_fsub+0xf6>
 800130e:	2f00      	cmp	r7, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_fsub+0x480>
 8001312:	e693      	b.n	800103c <__aeabi_fsub+0x1a8>
 8001314:	2300      	movs	r3, #0
 8001316:	08ff      	lsrs	r7, r7, #3
 8001318:	e637      	b.n	8000f8a <__aeabi_fsub+0xf6>
 800131a:	2300      	movs	r3, #0
 800131c:	08d7      	lsrs	r7, r2, #3
 800131e:	e634      	b.n	8000f8a <__aeabi_fsub+0xf6>
 8001320:	2301      	movs	r3, #1
 8001322:	08cf      	lsrs	r7, r1, #3
 8001324:	e631      	b.n	8000f8a <__aeabi_fsub+0xf6>
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	000b      	movs	r3, r1
 800132a:	04d2      	lsls	r2, r2, #19
 800132c:	2001      	movs	r0, #1
 800132e:	4013      	ands	r3, r2
 8001330:	4211      	tst	r1, r2
 8001332:	d000      	beq.n	8001336 <__aeabi_fsub+0x4a2>
 8001334:	e6ae      	b.n	8001094 <__aeabi_fsub+0x200>
 8001336:	08cf      	lsrs	r7, r1, #3
 8001338:	e627      	b.n	8000f8a <__aeabi_fsub+0xf6>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x4ac>
 800133e:	e75f      	b.n	8001200 <__aeabi_fsub+0x36c>
 8001340:	1b56      	subs	r6, r2, r5
 8001342:	2d00      	cmp	r5, #0
 8001344:	d101      	bne.n	800134a <__aeabi_fsub+0x4b6>
 8001346:	0033      	movs	r3, r6
 8001348:	e6e7      	b.n	800111a <__aeabi_fsub+0x286>
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	4660      	mov	r0, ip
 800134e:	04db      	lsls	r3, r3, #19
 8001350:	4318      	orrs	r0, r3
 8001352:	4684      	mov	ip, r0
 8001354:	e6eb      	b.n	800112e <__aeabi_fsub+0x29a>
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	7dffffff 	.word	0x7dffffff

0800135c <__aeabi_fcmpun>:
 800135c:	0243      	lsls	r3, r0, #9
 800135e:	024a      	lsls	r2, r1, #9
 8001360:	0040      	lsls	r0, r0, #1
 8001362:	0049      	lsls	r1, r1, #1
 8001364:	0a5b      	lsrs	r3, r3, #9
 8001366:	0a52      	lsrs	r2, r2, #9
 8001368:	0e09      	lsrs	r1, r1, #24
 800136a:	0e00      	lsrs	r0, r0, #24
 800136c:	28ff      	cmp	r0, #255	@ 0xff
 800136e:	d006      	beq.n	800137e <__aeabi_fcmpun+0x22>
 8001370:	2000      	movs	r0, #0
 8001372:	29ff      	cmp	r1, #255	@ 0xff
 8001374:	d102      	bne.n	800137c <__aeabi_fcmpun+0x20>
 8001376:	1e53      	subs	r3, r2, #1
 8001378:	419a      	sbcs	r2, r3
 800137a:	0010      	movs	r0, r2
 800137c:	4770      	bx	lr
 800137e:	38fe      	subs	r0, #254	@ 0xfe
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1fb      	bne.n	800137c <__aeabi_fcmpun+0x20>
 8001384:	e7f4      	b.n	8001370 <__aeabi_fcmpun+0x14>
 8001386:	46c0      	nop			@ (mov r8, r8)

08001388 <__aeabi_f2iz>:
 8001388:	0241      	lsls	r1, r0, #9
 800138a:	0042      	lsls	r2, r0, #1
 800138c:	0fc3      	lsrs	r3, r0, #31
 800138e:	0a49      	lsrs	r1, r1, #9
 8001390:	2000      	movs	r0, #0
 8001392:	0e12      	lsrs	r2, r2, #24
 8001394:	2a7e      	cmp	r2, #126	@ 0x7e
 8001396:	dd03      	ble.n	80013a0 <__aeabi_f2iz+0x18>
 8001398:	2a9d      	cmp	r2, #157	@ 0x9d
 800139a:	dd02      	ble.n	80013a2 <__aeabi_f2iz+0x1a>
 800139c:	4a09      	ldr	r2, [pc, #36]	@ (80013c4 <__aeabi_f2iz+0x3c>)
 800139e:	1898      	adds	r0, r3, r2
 80013a0:	4770      	bx	lr
 80013a2:	2080      	movs	r0, #128	@ 0x80
 80013a4:	0400      	lsls	r0, r0, #16
 80013a6:	4301      	orrs	r1, r0
 80013a8:	2a95      	cmp	r2, #149	@ 0x95
 80013aa:	dc07      	bgt.n	80013bc <__aeabi_f2iz+0x34>
 80013ac:	2096      	movs	r0, #150	@ 0x96
 80013ae:	1a82      	subs	r2, r0, r2
 80013b0:	40d1      	lsrs	r1, r2
 80013b2:	4248      	negs	r0, r1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f3      	bne.n	80013a0 <__aeabi_f2iz+0x18>
 80013b8:	0008      	movs	r0, r1
 80013ba:	e7f1      	b.n	80013a0 <__aeabi_f2iz+0x18>
 80013bc:	3a96      	subs	r2, #150	@ 0x96
 80013be:	4091      	lsls	r1, r2
 80013c0:	e7f7      	b.n	80013b2 <__aeabi_f2iz+0x2a>
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	7fffffff 	.word	0x7fffffff

080013c8 <__aeabi_i2f>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d012      	beq.n	80013f4 <__aeabi_i2f+0x2c>
 80013ce:	17c3      	asrs	r3, r0, #31
 80013d0:	18c5      	adds	r5, r0, r3
 80013d2:	405d      	eors	r5, r3
 80013d4:	0fc4      	lsrs	r4, r0, #31
 80013d6:	0028      	movs	r0, r5
 80013d8:	f000 f846 	bl	8001468 <__clzsi2>
 80013dc:	239e      	movs	r3, #158	@ 0x9e
 80013de:	1a1b      	subs	r3, r3, r0
 80013e0:	2b96      	cmp	r3, #150	@ 0x96
 80013e2:	dc0f      	bgt.n	8001404 <__aeabi_i2f+0x3c>
 80013e4:	2808      	cmp	r0, #8
 80013e6:	d038      	beq.n	800145a <__aeabi_i2f+0x92>
 80013e8:	3808      	subs	r0, #8
 80013ea:	4085      	lsls	r5, r0
 80013ec:	026d      	lsls	r5, r5, #9
 80013ee:	0a6d      	lsrs	r5, r5, #9
 80013f0:	b2d8      	uxtb	r0, r3
 80013f2:	e002      	b.n	80013fa <__aeabi_i2f+0x32>
 80013f4:	2400      	movs	r4, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	2500      	movs	r5, #0
 80013fa:	05c0      	lsls	r0, r0, #23
 80013fc:	4328      	orrs	r0, r5
 80013fe:	07e4      	lsls	r4, r4, #31
 8001400:	4320      	orrs	r0, r4
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	2b99      	cmp	r3, #153	@ 0x99
 8001406:	dc14      	bgt.n	8001432 <__aeabi_i2f+0x6a>
 8001408:	1f42      	subs	r2, r0, #5
 800140a:	4095      	lsls	r5, r2
 800140c:	002a      	movs	r2, r5
 800140e:	4915      	ldr	r1, [pc, #84]	@ (8001464 <__aeabi_i2f+0x9c>)
 8001410:	4011      	ands	r1, r2
 8001412:	0755      	lsls	r5, r2, #29
 8001414:	d01c      	beq.n	8001450 <__aeabi_i2f+0x88>
 8001416:	250f      	movs	r5, #15
 8001418:	402a      	ands	r2, r5
 800141a:	2a04      	cmp	r2, #4
 800141c:	d018      	beq.n	8001450 <__aeabi_i2f+0x88>
 800141e:	3104      	adds	r1, #4
 8001420:	08ca      	lsrs	r2, r1, #3
 8001422:	0149      	lsls	r1, r1, #5
 8001424:	d515      	bpl.n	8001452 <__aeabi_i2f+0x8a>
 8001426:	239f      	movs	r3, #159	@ 0x9f
 8001428:	0252      	lsls	r2, r2, #9
 800142a:	1a18      	subs	r0, r3, r0
 800142c:	0a55      	lsrs	r5, r2, #9
 800142e:	b2c0      	uxtb	r0, r0
 8001430:	e7e3      	b.n	80013fa <__aeabi_i2f+0x32>
 8001432:	2205      	movs	r2, #5
 8001434:	0029      	movs	r1, r5
 8001436:	1a12      	subs	r2, r2, r0
 8001438:	40d1      	lsrs	r1, r2
 800143a:	0002      	movs	r2, r0
 800143c:	321b      	adds	r2, #27
 800143e:	4095      	lsls	r5, r2
 8001440:	002a      	movs	r2, r5
 8001442:	1e55      	subs	r5, r2, #1
 8001444:	41aa      	sbcs	r2, r5
 8001446:	430a      	orrs	r2, r1
 8001448:	4906      	ldr	r1, [pc, #24]	@ (8001464 <__aeabi_i2f+0x9c>)
 800144a:	4011      	ands	r1, r2
 800144c:	0755      	lsls	r5, r2, #29
 800144e:	d1e2      	bne.n	8001416 <__aeabi_i2f+0x4e>
 8001450:	08ca      	lsrs	r2, r1, #3
 8001452:	0252      	lsls	r2, r2, #9
 8001454:	0a55      	lsrs	r5, r2, #9
 8001456:	b2d8      	uxtb	r0, r3
 8001458:	e7cf      	b.n	80013fa <__aeabi_i2f+0x32>
 800145a:	026d      	lsls	r5, r5, #9
 800145c:	0a6d      	lsrs	r5, r5, #9
 800145e:	308e      	adds	r0, #142	@ 0x8e
 8001460:	e7cb      	b.n	80013fa <__aeabi_i2f+0x32>
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	fbffffff 	.word	0xfbffffff

08001468 <__clzsi2>:
 8001468:	211c      	movs	r1, #28
 800146a:	2301      	movs	r3, #1
 800146c:	041b      	lsls	r3, r3, #16
 800146e:	4298      	cmp	r0, r3
 8001470:	d301      	bcc.n	8001476 <__clzsi2+0xe>
 8001472:	0c00      	lsrs	r0, r0, #16
 8001474:	3910      	subs	r1, #16
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	4298      	cmp	r0, r3
 800147a:	d301      	bcc.n	8001480 <__clzsi2+0x18>
 800147c:	0a00      	lsrs	r0, r0, #8
 800147e:	3908      	subs	r1, #8
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	4298      	cmp	r0, r3
 8001484:	d301      	bcc.n	800148a <__clzsi2+0x22>
 8001486:	0900      	lsrs	r0, r0, #4
 8001488:	3904      	subs	r1, #4
 800148a:	a202      	add	r2, pc, #8	@ (adr r2, 8001494 <__clzsi2+0x2c>)
 800148c:	5c10      	ldrb	r0, [r2, r0]
 800148e:	1840      	adds	r0, r0, r1
 8001490:	4770      	bx	lr
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	02020304 	.word	0x02020304
 8001498:	01010101 	.word	0x01010101
	...

080014a4 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	0004      	movs	r4, r0
 80014a8:	000e      	movs	r6, r1
 80014aa:	0015      	movs	r5, r2


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 80014ac:	4a32      	ldr	r2, [pc, #200]	@ (8001578 <Registers_handler+0xd4>)
 80014ae:	7801      	ldrb	r1, [r0, #0]
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	4291      	cmp	r1, r2
 80014b4:	d019      	beq.n	80014ea <Registers_handler+0x46>
 80014b6:	0003      	movs	r3, r0
 80014b8:	0001      	movs	r1, r0
 80014ba:	3140      	adds	r1, #64	@ 0x40
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	428b      	cmp	r3, r1
 80014c4:	d1fb      	bne.n	80014be <Registers_handler+0x1a>
	     RX_2;
 80014c6:	2180      	movs	r1, #128	@ 0x80
 80014c8:	2200      	movs	r2, #0
 80014ca:	01c9      	lsls	r1, r1, #7
 80014cc:	482b      	ldr	r0, [pc, #172]	@ (800157c <Registers_handler+0xd8>)
 80014ce:	f002 f8f1 	bl	80036b4 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 80014d2:	482b      	ldr	r0, [pc, #172]	@ (8001580 <Registers_handler+0xdc>)
 80014d4:	2240      	movs	r2, #64	@ 0x40
 80014d6:	0021      	movs	r1, r4
 80014d8:	f003 feb4 	bl	8005244 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80014dc:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <Registers_handler+0xe0>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	2104      	movs	r1, #4
 80014e4:	438b      	bics	r3, r1
 80014e6:	6013      	str	r3, [r2, #0]
				  			   break;
				  			     }



                          }
 80014e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Size < 4) {
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d913      	bls.n	8001516 <Registers_handler+0x72>
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 80014ee:	18c2      	adds	r2, r0, r3
 80014f0:	1e91      	subs	r1, r2, #2
 80014f2:	7809      	ldrb	r1, [r1, #0]
 80014f4:	0209      	lsls	r1, r1, #8
 80014f6:	3a01      	subs	r2, #1
 80014f8:	7817      	ldrb	r7, [r2, #0]
 80014fa:	430f      	orrs	r7, r1
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80014fc:	3b02      	subs	r3, #2
 80014fe:	b2d9      	uxtb	r1, r3
 8001500:	f000 fb86 	bl	8001c10 <calcCRC16ModBus>
	    if (receivedCRC != calculatedCRC) {
 8001504:	4287      	cmp	r7, r0
 8001506:	d10c      	bne.n	8001522 <Registers_handler+0x7e>
                       uint8_t opCode = rxFrame[1];
 8001508:	7861      	ldrb	r1, [r4, #1]
				  			  switch (opCode) {
 800150a:	2910      	cmp	r1, #16
 800150c:	d82f      	bhi.n	800156e <Registers_handler+0xca>
 800150e:	008b      	lsls	r3, r1, #2
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <Registers_handler+0xe4>)
 8001512:	58d3      	ldr	r3, [r2, r3]
 8001514:	469f      	mov	pc, r3
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 8001516:	481a      	ldr	r0, [pc, #104]	@ (8001580 <Registers_handler+0xdc>)
 8001518:	2202      	movs	r2, #2
 800151a:	2103      	movs	r1, #3
 800151c:	f000 fbbe 	bl	8001c9c <sendError>
	        return;
 8001520:	e7e2      	b.n	80014e8 <Registers_handler+0x44>
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 8001522:	4817      	ldr	r0, [pc, #92]	@ (8001580 <Registers_handler+0xdc>)
 8001524:	2203      	movs	r2, #3
 8001526:	2103      	movs	r1, #3
 8001528:	f000 fbb8 	bl	8001c9c <sendError>
	        return;
 800152c:	e7dc      	b.n	80014e8 <Registers_handler+0x44>
				  				 handleReadCoils (&huart1,coils);
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <Registers_handler+0xe8>)
 8001530:	7819      	ldrb	r1, [r3, #0]
 8001532:	4813      	ldr	r0, [pc, #76]	@ (8001580 <Registers_handler+0xdc>)
 8001534:	f000 fc6e 	bl	8001e14 <handleReadCoils>
				  			   break;
 8001538:	e7d6      	b.n	80014e8 <Registers_handler+0x44>
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <Registers_handler+0xec>)
 800153c:	7819      	ldrb	r1, [r3, #0]
 800153e:	4810      	ldr	r0, [pc, #64]	@ (8001580 <Registers_handler+0xdc>)
 8001540:	f000 fcac 	bl	8001e9c <handleReadDiscreteInputs>
							   break;
 8001544:	e7d0      	b.n	80014e8 <Registers_handler+0x44>
				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8001546:	480e      	ldr	r0, [pc, #56]	@ (8001580 <Registers_handler+0xdc>)
 8001548:	0031      	movs	r1, r6
 800154a:	f000 fbd9 	bl	8001d00 <handleReadHoldingRegs>
				  			   break;
 800154e:	e7cb      	b.n	80014e8 <Registers_handler+0x44>
				  				handleReadInputRegs (&huart1,data_reg);
 8001550:	480b      	ldr	r0, [pc, #44]	@ (8001580 <Registers_handler+0xdc>)
 8001552:	0031      	movs	r1, r6
 8001554:	f000 fc18 	bl	8001d88 <handleReadInputRegs>
				  			   break;
 8001558:	e7c6      	b.n	80014e8 <Registers_handler+0x44>
				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800155a:	4809      	ldr	r0, [pc, #36]	@ (8001580 <Registers_handler+0xdc>)
 800155c:	0029      	movs	r1, r5
 800155e:	f000 fce3 	bl	8001f28 <handleWriteMulyipleHandlingRegister>
                               break;
 8001562:	e7c1      	b.n	80014e8 <Registers_handler+0x44>
                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8001564:	4806      	ldr	r0, [pc, #24]	@ (8001580 <Registers_handler+0xdc>)
 8001566:	0029      	movs	r1, r5
 8001568:	f000 fcde 	bl	8001f28 <handleWriteMulyipleHandlingRegister>
                               break;
 800156c:	e7bc      	b.n	80014e8 <Registers_handler+0x44>
				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 800156e:	4804      	ldr	r0, [pc, #16]	@ (8001580 <Registers_handler+0xdc>)
 8001570:	2201      	movs	r2, #1
 8001572:	f000 fb93 	bl	8001c9c <sendError>
				  			   break;
 8001576:	e7b7      	b.n	80014e8 <Registers_handler+0x44>
 8001578:	20000000 	.word	0x20000000
 800157c:	50000800 	.word	0x50000800
 8001580:	20000134 	.word	0x20000134
 8001584:	200000d8 	.word	0x200000d8
 8001588:	08005670 	.word	0x08005670
 800158c:	20000329 	.word	0x20000329
 8001590:	20000328 	.word	0x20000328

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001594:	b500      	push	{lr}
 8001596:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <MX_DMA_Init+0x3c>)
 800159a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800159c:	2301      	movs	r3, #1
 800159e:	4319      	orrs	r1, r3
 80015a0:	6391      	str	r1, [r2, #56]	@ 0x38
 80015a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015a4:	4013      	ands	r3, r2
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2009      	movs	r0, #9
 80015b0:	f001 fc7c 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b4:	2009      	movs	r0, #9
 80015b6:	f001 fcab 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	200a      	movs	r0, #10
 80015c0:	f001 fc74 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80015c4:	200a      	movs	r0, #10
 80015c6:	f001 fca3 	bl	8002f10 <HAL_NVIC_EnableIRQ>

}
 80015ca:	b003      	add	sp, #12
 80015cc:	bd00      	pop	{pc}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	40021000 	.word	0x40021000

080015d4 <MX_USART1_UART_Init>:
{
 80015d4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80015d6:	4817      	ldr	r0, [pc, #92]	@ (8001634 <MX_USART1_UART_Init+0x60>)
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_USART1_UART_Init+0x64>)
 80015da:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80015dc:	2396      	movs	r3, #150	@ 0x96
 80015de:	019b      	lsls	r3, r3, #6
 80015e0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	2300      	movs	r3, #0
 80015e4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ea:	220c      	movs	r2, #12
 80015ec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f8:	f003 fcfa 	bl	8004ff0 <HAL_UART_Init>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d111      	bne.n	8001624 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <MX_USART1_UART_Init+0x60>)
 8001602:	2100      	movs	r1, #0
 8001604:	f003 fdd0 	bl	80051a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001608:	2800      	cmp	r0, #0
 800160a:	d10d      	bne.n	8001628 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160c:	4809      	ldr	r0, [pc, #36]	@ (8001634 <MX_USART1_UART_Init+0x60>)
 800160e:	2100      	movs	r1, #0
 8001610:	f003 fdf0 	bl	80051f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001614:	2800      	cmp	r0, #0
 8001616:	d109      	bne.n	800162c <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001618:	4806      	ldr	r0, [pc, #24]	@ (8001634 <MX_USART1_UART_Init+0x60>)
 800161a:	f003 fda5 	bl	8005168 <HAL_UARTEx_DisableFifoMode>
 800161e:	2800      	cmp	r0, #0
 8001620:	d106      	bne.n	8001630 <MX_USART1_UART_Init+0x5c>
}
 8001622:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001626:	e7fe      	b.n	8001626 <MX_USART1_UART_Init+0x52>
 8001628:	b672      	cpsid	i
 800162a:	e7fe      	b.n	800162a <MX_USART1_UART_Init+0x56>
 800162c:	b672      	cpsid	i
 800162e:	e7fe      	b.n	800162e <MX_USART1_UART_Init+0x5a>
 8001630:	b672      	cpsid	i
 8001632:	e7fe      	b.n	8001632 <MX_USART1_UART_Init+0x5e>
 8001634:	20000134 	.word	0x20000134
 8001638:	40013800 	.word	0x40013800

0800163c <SystemClock_Config>:
{
 800163c:	b500      	push	{lr}
 800163e:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001640:	2234      	movs	r2, #52	@ 0x34
 8001642:	2100      	movs	r1, #0
 8001644:	a805      	add	r0, sp, #20
 8001646:	f003 ff97 	bl	8005578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164a:	2210      	movs	r2, #16
 800164c:	2100      	movs	r1, #0
 800164e:	a801      	add	r0, sp, #4
 8001650:	f003 ff92 	bl	8005578 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001654:	2080      	movs	r0, #128	@ 0x80
 8001656:	0080      	lsls	r0, r0, #2
 8001658:	f002 f8f6 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800165c:	2302      	movs	r3, #2
 800165e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001660:	2280      	movs	r2, #128	@ 0x80
 8001662:	0052      	lsls	r2, r2, #1
 8001664:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001666:	2200      	movs	r2, #0
 8001668:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800166a:	2140      	movs	r1, #64	@ 0x40
 800166c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001670:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001672:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001674:	3306      	adds	r3, #6
 8001676:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	029b      	lsls	r3, r3, #10
 800167c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	059b      	lsls	r3, r3, #22
 8001682:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	a805      	add	r0, sp, #20
 8001686:	f002 f911 	bl	80038ac <HAL_RCC_OscConfig>
 800168a:	2800      	cmp	r0, #0
 800168c:	d10e      	bne.n	80016ac <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	2307      	movs	r3, #7
 8001690:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001692:	3b05      	subs	r3, #5
 8001694:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169c:	2102      	movs	r1, #2
 800169e:	a801      	add	r0, sp, #4
 80016a0:	f002 fbea 	bl	8003e78 <HAL_RCC_ClockConfig>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d103      	bne.n	80016b0 <SystemClock_Config+0x74>
}
 80016a8:	b013      	add	sp, #76	@ 0x4c
 80016aa:	bd00      	pop	{pc}
 80016ac:	b672      	cpsid	i
  while (1)
 80016ae:	e7fe      	b.n	80016ae <SystemClock_Config+0x72>
 80016b0:	b672      	cpsid	i
 80016b2:	e7fe      	b.n	80016b2 <SystemClock_Config+0x76>

080016b4 <HAL_UART_TxCpltCallback>:
{
 80016b4:	b510      	push	{r4, lr}
	    RX_2;
 80016b6:	2180      	movs	r1, #128	@ 0x80
 80016b8:	2200      	movs	r2, #0
 80016ba:	01c9      	lsls	r1, r1, #7
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <HAL_UART_TxCpltCallback+0x3c>)
 80016be:	f001 fff9 	bl	80036b4 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 80016c2:	f000 fe95 	bl	80023f0 <HAL_GetTick>
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <HAL_UART_TxCpltCallback+0x40>)
 80016c8:	6018      	str	r0, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 80016ca:	490b      	ldr	r1, [pc, #44]	@ (80016f8 <HAL_UART_TxCpltCallback+0x44>)
 80016cc:	4c0b      	ldr	r4, [pc, #44]	@ (80016fc <HAL_UART_TxCpltCallback+0x48>)
 80016ce:	2240      	movs	r2, #64	@ 0x40
 80016d0:	0020      	movs	r0, r4
 80016d2:	f003 fdb7 	bl	8005244 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80016d6:	6822      	ldr	r2, [r4, #0]
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	2110      	movs	r1, #16
 80016dc:	430b      	orrs	r3, r1
 80016de:	6013      	str	r3, [r2, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <HAL_UART_TxCpltCallback+0x4c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6813      	ldr	r3, [r2, #0]
 80016e6:	390c      	subs	r1, #12
 80016e8:	438b      	bics	r3, r1
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	50000800 	.word	0x50000800
 80016f4:	200004ac 	.word	0x200004ac
 80016f8:	2000046c 	.word	0x2000046c
 80016fc:	20000134 	.word	0x20000134
 8001700:	200000d8 	.word	0x200000d8

08001704 <HAL_UARTEx_RxEventCallback>:
{
 8001704:	b510      	push	{r4, lr}
 8001706:	000c      	movs	r4, r1
	if (huart->Instance == USART1)
 8001708:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <HAL_UARTEx_RxEventCallback+0x38>)
 800170a:	6800      	ldr	r0, [r0, #0]
 800170c:	4290      	cmp	r0, r2
 800170e:	d000      	beq.n	8001712 <HAL_UARTEx_RxEventCallback+0xe>
}
 8001710:	bd10      	pop	{r4, pc}
		lastActivityTime = HAL_GetTick();
 8001712:	f000 fe6d 	bl	80023f0 <HAL_GetTick>
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001718:	6018      	str	r0, [r3, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_UARTEx_RxEventCallback+0x40>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	2110      	movs	r1, #16
 8001722:	438b      	bics	r3, r1
 8001724:	6013      	str	r3, [r2, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 8001726:	4808      	ldr	r0, [pc, #32]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x44>)
 8001728:	f001 fd6a 	bl	8003200 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_UARTEx_RxEventCallback+0x48>)
 800172e:	4908      	ldr	r1, [pc, #32]	@ (8001750 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001730:	4808      	ldr	r0, [pc, #32]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x50>)
 8001732:	0023      	movs	r3, r4
 8001734:	f7ff feb6 	bl	80014a4 <Registers_handler>
}
 8001738:	e7ea      	b.n	8001710 <HAL_UARTEx_RxEventCallback+0xc>
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	40013800 	.word	0x40013800
 8001740:	200004ac 	.word	0x200004ac
 8001744:	20000134 	.word	0x20000134
 8001748:	200000d8 	.word	0x200000d8
 800174c:	2000032c 	.word	0x2000032c
 8001750:	2000034c 	.word	0x2000034c
 8001754:	2000046c 	.word	0x2000046c

08001758 <HAL_ADC_ConvCpltCallback>:
{
 8001758:	b510      	push	{r4, lr}
    if (hadc->Instance == ADC1)
 800175a:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <HAL_ADC_ConvCpltCallback+0x20>)
 800175c:	6802      	ldr	r2, [r0, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d000      	beq.n	8001764 <HAL_ADC_ConvCpltCallback+0xc>
}
 8001762:	bd10      	pop	{r4, pc}
    	LED_2_OFF;
 8001764:	20a0      	movs	r0, #160	@ 0xa0
 8001766:	2200      	movs	r2, #0
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	05c0      	lsls	r0, r0, #23
 800176c:	f001 ffa2 	bl	80036b4 <HAL_GPIO_WritePin>
        adc_ready = 1;
 8001770:	4b02      	ldr	r3, [pc, #8]	@ (800177c <HAL_ADC_ConvCpltCallback+0x24>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	e7f4      	b.n	8001762 <HAL_ADC_ConvCpltCallback+0xa>
 8001778:	40012400 	.word	0x40012400
 800177c:	200004b0 	.word	0x200004b0

08001780 <HAL_TIM_PeriodElapsedCallback>:
{
 8001780:	b510      	push	{r4, lr}
    if (htim->Instance == TIM14)
 8001782:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001784:	6802      	ldr	r2, [r0, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d000      	beq.n	800178c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800178a:	bd10      	pop	{r4, pc}
    	LED_2_ON;
 800178c:	20a0      	movs	r0, #160	@ 0xa0
 800178e:	2201      	movs	r2, #1
 8001790:	2180      	movs	r1, #128	@ 0x80
 8001792:	05c0      	lsls	r0, r0, #23
 8001794:	f001 ff8e 	bl	80036b4 <HAL_GPIO_WritePin>
    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, ADC_NUM_CHANNELS);
 8001798:	4903      	ldr	r1, [pc, #12]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800179a:	4804      	ldr	r0, [pc, #16]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800179c:	2207      	movs	r2, #7
 800179e:	f001 fa05 	bl	8002bac <HAL_ADC_Start_DMA>
}
 80017a2:	e7f2      	b.n	800178a <HAL_TIM_PeriodElapsedCallback+0xa>
 80017a4:	40002000 	.word	0x40002000
 80017a8:	200004b4 	.word	0x200004b4
 80017ac:	200002c4 	.word	0x200002c4

080017b0 <Reset_USART1>:
 void Reset_USART1(void) {
 80017b0:	b570      	push	{r4, r5, r6, lr}
     LED_1_ON;
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	2201      	movs	r2, #1
 80017b6:	0209      	lsls	r1, r1, #8
 80017b8:	4821      	ldr	r0, [pc, #132]	@ (8001840 <Reset_USART1+0x90>)
 80017ba:	f001 ff7b 	bl	80036b4 <HAL_GPIO_WritePin>
     if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 80017be:	4821      	ldr	r0, [pc, #132]	@ (8001844 <Reset_USART1+0x94>)
 80017c0:	f002 ff68 	bl	8004694 <HAL_UART_DMAStop>
     if (hdma_usart1_rx.Instance != NULL) {
 80017c4:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <Reset_USART1+0x98>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <Reset_USART1+0x22>
         HAL_DMA_Abort(&hdma_usart1_rx);
 80017cc:	481e      	ldr	r0, [pc, #120]	@ (8001848 <Reset_USART1+0x98>)
 80017ce:	f001 fd17 	bl	8003200 <HAL_DMA_Abort>
     if (hdma_usart1_tx.Instance != NULL) {
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <Reset_USART1+0x9c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <Reset_USART1+0x30>
         HAL_DMA_Abort(&hdma_usart1_tx);
 80017da:	481c      	ldr	r0, [pc, #112]	@ (800184c <Reset_USART1+0x9c>)
 80017dc:	f001 fd10 	bl	8003200 <HAL_DMA_Abort>
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 80017e0:	4c18      	ldr	r4, [pc, #96]	@ (8001844 <Reset_USART1+0x94>)
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	2180      	movs	r1, #128	@ 0x80
 80017e8:	438b      	bics	r3, r1
 80017ea:	6013      	str	r3, [r2, #0]
     __HAL_UART_CLEAR_OREFLAG(&huart1);
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	2208      	movs	r2, #8
 80017f0:	621a      	str	r2, [r3, #32]
     __HAL_UART_CLEAR_FEFLAG(&huart1);
 80017f2:	3a06      	subs	r2, #6
 80017f4:	621a      	str	r2, [r3, #32]
     __HAL_RCC_USART1_FORCE_RESET();
 80017f6:	4d16      	ldr	r5, [pc, #88]	@ (8001850 <Reset_USART1+0xa0>)
 80017f8:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80017fa:	2380      	movs	r3, #128	@ 0x80
 80017fc:	01db      	lsls	r3, r3, #7
 80017fe:	4313      	orrs	r3, r2
 8001800:	632b      	str	r3, [r5, #48]	@ 0x30
     HAL_Delay(1); // Задержка для завершения сброса
 8001802:	2001      	movs	r0, #1
 8001804:	f000 fdfa 	bl	80023fc <HAL_Delay>
     __HAL_RCC_USART1_RELEASE_RESET();
 8001808:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <Reset_USART1+0xa4>)
 800180c:	4013      	ands	r3, r2
 800180e:	632b      	str	r3, [r5, #48]	@ 0x30
     if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 8001810:	0020      	movs	r0, r4
 8001812:	f002 febf 	bl	8004594 <HAL_UART_DeInit>
     MX_USART1_UART_Init();
 8001816:	f7ff fedd 	bl	80015d4 <MX_USART1_UART_Init>
     MX_DMA_Init();
 800181a:	f7ff febb 	bl	8001594 <MX_DMA_Init>
     if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 800181e:	490e      	ldr	r1, [pc, #56]	@ (8001858 <Reset_USART1+0xa8>)
 8001820:	2240      	movs	r2, #64	@ 0x40
 8001822:	0020      	movs	r0, r4
 8001824:	f003 fd0e 	bl	8005244 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <Reset_USART1+0x98>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	2104      	movs	r1, #4
 8001830:	438b      	bics	r3, r1
 8001832:	6013      	str	r3, [r2, #0]
     lastActivityTime = HAL_GetTick();
 8001834:	f000 fddc 	bl	80023f0 <HAL_GetTick>
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <Reset_USART1+0xac>)
 800183a:	6018      	str	r0, [r3, #0]
 }
 800183c:	bd70      	pop	{r4, r5, r6, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	50000800 	.word	0x50000800
 8001844:	20000134 	.word	0x20000134
 8001848:	200000d8 	.word	0x200000d8
 800184c:	2000007c 	.word	0x2000007c
 8001850:	40021000 	.word	0x40021000
 8001854:	ffffbfff 	.word	0xffffbfff
 8001858:	2000046c 	.word	0x2000046c
 800185c:	200004ac 	.word	0x200004ac

08001860 <Check_USART1_Timeout>:
 {
 8001860:	b510      	push	{r4, lr}
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8001862:	f000 fdc5 	bl	80023f0 <HAL_GetTick>
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <Check_USART1_Timeout+0x38>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1ac0      	subs	r0, r0, r3
 800186c:	23e1      	movs	r3, #225	@ 0xe1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4298      	cmp	r0, r3
 8001872:	d200      	bcs.n	8001876 <Check_USART1_Timeout+0x16>
 }
 8001874:	bd10      	pop	{r4, pc}
         Reset_USART1();
 8001876:	f7ff ff9b 	bl	80017b0 <Reset_USART1>
         RX_2;
 800187a:	2180      	movs	r1, #128	@ 0x80
 800187c:	4c07      	ldr	r4, [pc, #28]	@ (800189c <Check_USART1_Timeout+0x3c>)
 800187e:	2200      	movs	r2, #0
 8001880:	01c9      	lsls	r1, r1, #7
 8001882:	0020      	movs	r0, r4
 8001884:	f001 ff16 	bl	80036b4 <HAL_GPIO_WritePin>
         LED_1_OFF;
 8001888:	2180      	movs	r1, #128	@ 0x80
 800188a:	2200      	movs	r2, #0
 800188c:	0209      	lsls	r1, r1, #8
 800188e:	0020      	movs	r0, r4
 8001890:	f001 ff10 	bl	80036b4 <HAL_GPIO_WritePin>
 }
 8001894:	e7ee      	b.n	8001874 <Check_USART1_Timeout+0x14>
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	200004ac 	.word	0x200004ac
 800189c:	50000800 	.word	0x50000800

080018a0 <calculate_ntc_temperature>:
 {
 80018a0:	b570      	push	{r4, r5, r6, lr}
     float Vadc = (adc_raw / ADC_Max) * Vref;
 80018a2:	f7ff fd91 	bl	80013c8 <__aeabi_i2f>
 80018a6:	491a      	ldr	r1, [pc, #104]	@ (8001910 <calculate_ntc_temperature+0x70>)
 80018a8:	f7fe ffcc 	bl	8000844 <__aeabi_fdiv>
 80018ac:	4919      	ldr	r1, [pc, #100]	@ (8001914 <calculate_ntc_temperature+0x74>)
 80018ae:	f7ff f997 	bl	8000be0 <__aeabi_fmul>
 80018b2:	1c04      	adds	r4, r0, #0
     float R_ntc = (Vadc * R_fixed) / (Vref - Vadc);
 80018b4:	4918      	ldr	r1, [pc, #96]	@ (8001918 <calculate_ntc_temperature+0x78>)
 80018b6:	f7ff f993 	bl	8000be0 <__aeabi_fmul>
 80018ba:	1c05      	adds	r5, r0, #0
 80018bc:	1c21      	adds	r1, r4, #0
 80018be:	4815      	ldr	r0, [pc, #84]	@ (8001914 <calculate_ntc_temperature+0x74>)
 80018c0:	f7ff fae8 	bl	8000e94 <__aeabi_fsub>
 80018c4:	1c01      	adds	r1, r0, #0
 80018c6:	1c28      	adds	r0, r5, #0
 80018c8:	f7fe ffbc 	bl	8000844 <__aeabi_fdiv>
     float logR = logf(R_ntc);
 80018cc:	f003 fcf2 	bl	80052b4 <logf>
 80018d0:	1c04      	adds	r4, r0, #0
     float inv_T = STEINHART_A + STEINHART_B * logR + STEINHART_C * logR * logR * logR;
 80018d2:	4912      	ldr	r1, [pc, #72]	@ (800191c <calculate_ntc_temperature+0x7c>)
 80018d4:	f7ff f984 	bl	8000be0 <__aeabi_fmul>
 80018d8:	1c21      	adds	r1, r4, #0
 80018da:	f7ff f981 	bl	8000be0 <__aeabi_fmul>
 80018de:	1c21      	adds	r1, r4, #0
 80018e0:	f7ff f97e 	bl	8000be0 <__aeabi_fmul>
 80018e4:	1c05      	adds	r5, r0, #0
 80018e6:	490e      	ldr	r1, [pc, #56]	@ (8001920 <calculate_ntc_temperature+0x80>)
 80018e8:	1c20      	adds	r0, r4, #0
 80018ea:	f7ff f979 	bl	8000be0 <__aeabi_fmul>
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <calculate_ntc_temperature+0x84>)
 80018f0:	f7fe fdb6 	bl	8000460 <__aeabi_fadd>
 80018f4:	1c01      	adds	r1, r0, #0
 80018f6:	1c28      	adds	r0, r5, #0
 80018f8:	f7fe fdb2 	bl	8000460 <__aeabi_fadd>
 80018fc:	1c01      	adds	r1, r0, #0
     float T_kelvin = 1.0f / inv_T;
 80018fe:	20fe      	movs	r0, #254	@ 0xfe
 8001900:	0580      	lsls	r0, r0, #22
 8001902:	f7fe ff9f 	bl	8000844 <__aeabi_fdiv>
     float T_celsius = T_kelvin - 273.15f;
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <calculate_ntc_temperature+0x88>)
 8001908:	f7ff fac4 	bl	8000e94 <__aeabi_fsub>
 }
 800190c:	bd70      	pop	{r4, r5, r6, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	457ff000 	.word	0x457ff000
 8001914:	40533333 	.word	0x40533333
 8001918:	46160000 	.word	0x46160000
 800191c:	33bc4759 	.word	0x33bc4759
 8001920:	39757f73 	.word	0x39757f73
 8001924:	3a93ffeb 	.word	0x3a93ffeb
 8001928:	43889333 	.word	0x43889333

0800192c <main>:
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8001930:	f000 fd3e 	bl	80023b0 <HAL_Init>
  SystemClock_Config();
 8001934:	f7ff fe82 	bl	800163c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	2214      	movs	r2, #20
 800193a:	2100      	movs	r1, #0
 800193c:	a803      	add	r0, sp, #12
 800193e:	f003 fe1b 	bl	8005578 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b9b      	ldr	r3, [pc, #620]	@ (8001bb0 <main+0x284>)
 8001944:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001946:	2202      	movs	r2, #2
 8001948:	4311      	orrs	r1, r2
 800194a:	6359      	str	r1, [r3, #52]	@ 0x34
 800194c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800194e:	400a      	ands	r2, r1
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001956:	2204      	movs	r2, #4
 8001958:	4311      	orrs	r1, r2
 800195a:	6359      	str	r1, [r3, #52]	@ 0x34
 800195c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800195e:	400a      	ands	r2, r1
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001966:	2501      	movs	r5, #1
 8001968:	432a      	orrs	r2, r5
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34
 800196c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800196e:	402b      	ands	r3, r5
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8001974:	24c0      	movs	r4, #192	@ 0xc0
 8001976:	0224      	lsls	r4, r4, #8
 8001978:	4f8e      	ldr	r7, [pc, #568]	@ (8001bb4 <main+0x288>)
 800197a:	2200      	movs	r2, #0
 800197c:	0021      	movs	r1, r4
 800197e:	0038      	movs	r0, r7
 8001980:	f001 fe98 	bl	80036b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001984:	26a0      	movs	r6, #160	@ 0xa0
 8001986:	05f6      	lsls	r6, r6, #23
 8001988:	2200      	movs	r2, #0
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	0030      	movs	r0, r6
 800198e:	f001 fe91 	bl	80036b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DIRECT_Pin|LED_1_Pin;
 8001992:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2400      	movs	r4, #0
 8001998:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	a903      	add	r1, sp, #12
 800199e:	0038      	movs	r0, r7
 80019a0:	f001 fd16 	bl	80033d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_2_Pin;
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 80019ae:	a903      	add	r1, sp, #12
 80019b0:	0030      	movs	r0, r6
 80019b2:	f001 fd0d 	bl	80033d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UI_INT_Pin;
 80019b6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b8:	2388      	movs	r3, #136	@ 0x88
 80019ba:	035b      	lsls	r3, r3, #13
 80019bc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(UI_INT_GPIO_Port, &GPIO_InitStruct);
 80019c0:	a903      	add	r1, sp, #12
 80019c2:	487d      	ldr	r0, [pc, #500]	@ (8001bb8 <main+0x28c>)
 80019c4:	f001 fd04 	bl	80033d0 <HAL_GPIO_Init>
  MX_DMA_Init();
 80019c8:	f7ff fde4 	bl	8001594 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80019cc:	f7ff fe02 	bl	80015d4 <MX_USART1_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80019d0:	220c      	movs	r2, #12
 80019d2:	2100      	movs	r1, #0
 80019d4:	a803      	add	r0, sp, #12
 80019d6:	f003 fdcf 	bl	8005578 <memset>
  hadc1.Instance = ADC1;
 80019da:	4878      	ldr	r0, [pc, #480]	@ (8001bbc <main+0x290>)
 80019dc:	4b78      	ldr	r3, [pc, #480]	@ (8001bc0 <main+0x294>)
 80019de:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	05db      	lsls	r3, r3, #23
 80019e4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019e6:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e8:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	039b      	lsls	r3, r3, #14
 80019ee:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019f0:	2308      	movs	r3, #8
 80019f2:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019f4:	7604      	strb	r4, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80019f6:	7644      	strb	r4, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f8:	7684      	strb	r4, [r0, #26]
  hadc1.Init.NbrOfConversion = 7;
 80019fa:	3b01      	subs	r3, #1
 80019fc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fe:	3319      	adds	r3, #25
 8001a00:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a02:	6244      	str	r4, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a04:	6284      	str	r4, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a06:	330c      	adds	r3, #12
 8001a08:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	015b      	lsls	r3, r3, #5
 8001a0e:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8001a10:	2306      	movs	r3, #6
 8001a12:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8001a14:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001a16:	3336      	adds	r3, #54	@ 0x36
 8001a18:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001a1a:	64c4      	str	r4, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a1c:	f000 fd00 	bl	8002420 <HAL_ADC_Init>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d000      	beq.n	8001a26 <main+0xfa>
 8001a24:	e0ab      	b.n	8001b7e <main+0x252>
  sConfig.Channel = ADC_CHANNEL_0;
 8001a26:	2301      	movs	r3, #1
 8001a28:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001a2e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a30:	4862      	ldr	r0, [pc, #392]	@ (8001bbc <main+0x290>)
 8001a32:	a903      	add	r1, sp, #12
 8001a34:	f000 ff10 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d000      	beq.n	8001a3e <main+0x112>
 8001a3c:	e0a1      	b.n	8001b82 <main+0x256>
  sConfig.Channel = ADC_CHANNEL_1;
 8001a3e:	4b61      	ldr	r3, [pc, #388]	@ (8001bc4 <main+0x298>)
 8001a40:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a42:	2304      	movs	r3, #4
 8001a44:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a46:	485d      	ldr	r0, [pc, #372]	@ (8001bbc <main+0x290>)
 8001a48:	a903      	add	r1, sp, #12
 8001a4a:	f000 ff05 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d000      	beq.n	8001a54 <main+0x128>
 8001a52:	e098      	b.n	8001b86 <main+0x25a>
  sConfig.Channel = ADC_CHANNEL_2;
 8001a54:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <main+0x29c>)
 8001a56:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	4857      	ldr	r0, [pc, #348]	@ (8001bbc <main+0x290>)
 8001a5e:	a903      	add	r1, sp, #12
 8001a60:	f000 fefa 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d000      	beq.n	8001a6a <main+0x13e>
 8001a68:	e08f      	b.n	8001b8a <main+0x25e>
  sConfig.Channel = ADC_CHANNEL_3;
 8001a6a:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <main+0x2a0>)
 8001a6c:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a72:	4852      	ldr	r0, [pc, #328]	@ (8001bbc <main+0x290>)
 8001a74:	a903      	add	r1, sp, #12
 8001a76:	f000 feef 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d000      	beq.n	8001a80 <main+0x154>
 8001a7e:	e086      	b.n	8001b8e <main+0x262>
  sConfig.Channel = ADC_CHANNEL_4;
 8001a80:	4b53      	ldr	r3, [pc, #332]	@ (8001bd0 <main+0x2a4>)
 8001a82:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a84:	2310      	movs	r3, #16
 8001a86:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a88:	484c      	ldr	r0, [pc, #304]	@ (8001bbc <main+0x290>)
 8001a8a:	a903      	add	r1, sp, #12
 8001a8c:	f000 fee4 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d000      	beq.n	8001a96 <main+0x16a>
 8001a94:	e07d      	b.n	8001b92 <main+0x266>
  sConfig.Channel = ADC_CHANNEL_5;
 8001a96:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd4 <main+0x2a8>)
 8001a98:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001a9a:	2314      	movs	r3, #20
 8001a9c:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9e:	4847      	ldr	r0, [pc, #284]	@ (8001bbc <main+0x290>)
 8001aa0:	a903      	add	r1, sp, #12
 8001aa2:	f000 fed9 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d000      	beq.n	8001aac <main+0x180>
 8001aaa:	e074      	b.n	8001b96 <main+0x26a>
  sConfig.Channel = ADC_CHANNEL_6;
 8001aac:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <main+0x2ac>)
 8001aae:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001ab0:	2318      	movs	r3, #24
 8001ab2:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	4841      	ldr	r0, [pc, #260]	@ (8001bbc <main+0x290>)
 8001ab6:	a903      	add	r1, sp, #12
 8001ab8:	f000 fece 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d16c      	bne.n	8001b9a <main+0x26e>
  hi2c2.Instance = I2C2;
 8001ac0:	4846      	ldr	r0, [pc, #280]	@ (8001bdc <main+0x2b0>)
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <main+0x2b4>)
 8001ac4:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8001ac6:	4b47      	ldr	r3, [pc, #284]	@ (8001be4 <main+0x2b8>)
 8001ac8:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad2:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ad4:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad6:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad8:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ada:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001adc:	f001 fdf0 	bl	80036c0 <HAL_I2C_Init>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d15c      	bne.n	8001b9e <main+0x272>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae4:	483d      	ldr	r0, [pc, #244]	@ (8001bdc <main+0x2b0>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f001 fe58 	bl	800379c <HAL_I2CEx_ConfigAnalogFilter>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d158      	bne.n	8001ba2 <main+0x276>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001af0:	483a      	ldr	r0, [pc, #232]	@ (8001bdc <main+0x2b0>)
 8001af2:	2100      	movs	r1, #0
 8001af4:	f001 fe7e 	bl	80037f4 <HAL_I2CEx_ConfigDigitalFilter>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d154      	bne.n	8001ba6 <main+0x27a>
  htim14.Instance = TIM14;
 8001afc:	483a      	ldr	r0, [pc, #232]	@ (8001be8 <main+0x2bc>)
 8001afe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <main+0x2c0>)
 8001b00:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 4;
 8001b02:	2304      	movs	r3, #4
 8001b04:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	2300      	movs	r3, #0
 8001b08:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 45000;
 8001b0a:	4a39      	ldr	r2, [pc, #228]	@ (8001bf0 <main+0x2c4>)
 8001b0c:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b10:	3380      	adds	r3, #128	@ 0x80
 8001b12:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b14:	f002 fcba 	bl	800448c <HAL_TIM_Base_Init>
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	d146      	bne.n	8001baa <main+0x27e>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8001b1c:	4935      	ldr	r1, [pc, #212]	@ (8001bf4 <main+0x2c8>)
 8001b1e:	4836      	ldr	r0, [pc, #216]	@ (8001bf8 <main+0x2cc>)
 8001b20:	2240      	movs	r2, #64	@ 0x40
 8001b22:	f003 fb8f 	bl	8005244 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001b26:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <main+0x2d0>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	438b      	bics	r3, r1
 8001b30:	6013      	str	r3, [r2, #0]
   HAL_ADCEx_Calibration_Start(&hadc1);
 8001b32:	4822      	ldr	r0, [pc, #136]	@ (8001bbc <main+0x290>)
 8001b34:	f001 f8e0 	bl	8002cf8 <HAL_ADCEx_Calibration_Start>
   HAL_TIM_Base_Start_IT(&htim14);
 8001b38:	482b      	ldr	r0, [pc, #172]	@ (8001be8 <main+0x2bc>)
 8001b3a:	f002 fb4f 	bl	80041dc <HAL_TIM_Base_Start_IT>
	data_reg[0]=adc_values[0];
 8001b3e:	4d30      	ldr	r5, [pc, #192]	@ (8001c00 <main+0x2d4>)
	memcpy(&data_reg[2], (int16_t[]){(int16_t)(calculate_ntc_temperature(adc_values[2]) * 10.0f + 0.5f)}, 2);
 8001b40:	4f30      	ldr	r7, [pc, #192]	@ (8001c04 <main+0x2d8>)
 8001b42:	26fc      	movs	r6, #252	@ 0xfc
 8001b44:	05b6      	lsls	r6, r6, #22
	  Check_USART1_Timeout();
 8001b46:	f7ff fe8b 	bl	8001860 <Check_USART1_Timeout>
	data_reg[0]=adc_values[0];
 8001b4a:	4c2f      	ldr	r4, [pc, #188]	@ (8001c08 <main+0x2dc>)
 8001b4c:	8823      	ldrh	r3, [r4, #0]
 8001b4e:	802b      	strh	r3, [r5, #0]
	data_reg[1]=adc_values[1];
 8001b50:	8863      	ldrh	r3, [r4, #2]
 8001b52:	806b      	strh	r3, [r5, #2]
	memcpy(&data_reg[2], (int16_t[]){(int16_t)(calculate_ntc_temperature(adc_values[2]) * 10.0f + 0.5f)}, 2);
 8001b54:	88a0      	ldrh	r0, [r4, #4]
 8001b56:	f7ff fea3 	bl	80018a0 <calculate_ntc_temperature>
 8001b5a:	1c39      	adds	r1, r7, #0
 8001b5c:	f7ff f840 	bl	8000be0 <__aeabi_fmul>
 8001b60:	1c31      	adds	r1, r6, #0
 8001b62:	f7fe fc7d 	bl	8000460 <__aeabi_fadd>
 8001b66:	f7ff fc0f 	bl	8001388 <__aeabi_f2iz>
 8001b6a:	80a8      	strh	r0, [r5, #4]
	data_reg[3]=adc_values[3];
 8001b6c:	88e3      	ldrh	r3, [r4, #6]
 8001b6e:	80eb      	strh	r3, [r5, #6]
	data_reg[4]=adc_values[4];
 8001b70:	8923      	ldrh	r3, [r4, #8]
 8001b72:	812b      	strh	r3, [r5, #8]
    data_reg[5]=adc_values[5];
 8001b74:	8963      	ldrh	r3, [r4, #10]
 8001b76:	816b      	strh	r3, [r5, #10]
    data_reg[6]=adc_values[6];
 8001b78:	89a3      	ldrh	r3, [r4, #12]
 8001b7a:	81ab      	strh	r3, [r5, #12]
  while (1)
 8001b7c:	e7e3      	b.n	8001b46 <main+0x21a>
 8001b7e:	b672      	cpsid	i
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <main+0x254>
 8001b82:	b672      	cpsid	i
 8001b84:	e7fe      	b.n	8001b84 <main+0x258>
 8001b86:	b672      	cpsid	i
 8001b88:	e7fe      	b.n	8001b88 <main+0x25c>
 8001b8a:	b672      	cpsid	i
 8001b8c:	e7fe      	b.n	8001b8c <main+0x260>
 8001b8e:	b672      	cpsid	i
 8001b90:	e7fe      	b.n	8001b90 <main+0x264>
 8001b92:	b672      	cpsid	i
 8001b94:	e7fe      	b.n	8001b94 <main+0x268>
 8001b96:	b672      	cpsid	i
 8001b98:	e7fe      	b.n	8001b98 <main+0x26c>
 8001b9a:	b672      	cpsid	i
 8001b9c:	e7fe      	b.n	8001b9c <main+0x270>
 8001b9e:	b672      	cpsid	i
 8001ba0:	e7fe      	b.n	8001ba0 <main+0x274>
 8001ba2:	b672      	cpsid	i
 8001ba4:	e7fe      	b.n	8001ba4 <main+0x278>
 8001ba6:	b672      	cpsid	i
 8001ba8:	e7fe      	b.n	8001ba8 <main+0x27c>
 8001baa:	b672      	cpsid	i
 8001bac:	e7fe      	b.n	8001bac <main+0x280>
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	50000800 	.word	0x50000800
 8001bb8:	50000400 	.word	0x50000400
 8001bbc:	200002c4 	.word	0x200002c4
 8001bc0:	40012400 	.word	0x40012400
 8001bc4:	04000002 	.word	0x04000002
 8001bc8:	08000004 	.word	0x08000004
 8001bcc:	0c000008 	.word	0x0c000008
 8001bd0:	10000010 	.word	0x10000010
 8001bd4:	14000020 	.word	0x14000020
 8001bd8:	18000040 	.word	0x18000040
 8001bdc:	20000214 	.word	0x20000214
 8001be0:	40005800 	.word	0x40005800
 8001be4:	10b17db5 	.word	0x10b17db5
 8001be8:	200001c8 	.word	0x200001c8
 8001bec:	40002000 	.word	0x40002000
 8001bf0:	0000afc8 	.word	0x0000afc8
 8001bf4:	2000046c 	.word	0x2000046c
 8001bf8:	20000134 	.word	0x20000134
 8001bfc:	200000d8 	.word	0x200000d8
 8001c00:	2000034c 	.word	0x2000034c
 8001c04:	41200000 	.word	0x41200000
 8001c08:	200004b4 	.word	0x200004b4

08001c0c <Error_Handler>:
 8001c0c:	b672      	cpsid	i
 8001c0e:	e7fe      	b.n	8001c0e <Error_Handler+0x2>

08001c10 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	0007      	movs	r7, r0
 8001c14:	1e08      	subs	r0, r1, #0
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < u8length; i++) {
 8001c16:	d016      	beq.n	8001c46 <calcCRC16ModBus+0x36>
 8001c18:	2600      	movs	r6, #0
	temp = 0xFFFF;
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c54 <calcCRC16ModBus+0x44>)
		temp = temp ^ buffer[i];
		for (unsigned char j = 1; j <= 8; j++) {
			flag = temp & 0x0001;
 8001c1c:	2501      	movs	r5, #1
			temp >>= 1;
			if (flag)
 8001c1e:	4c0e      	ldr	r4, [pc, #56]	@ (8001c58 <calcCRC16ModBus+0x48>)
 8001c20:	e003      	b.n	8001c2a <calcCRC16ModBus+0x1a>
	for (unsigned char i = 0; i < u8length; i++) {
 8001c22:	3601      	adds	r6, #1
 8001c24:	b2f3      	uxtb	r3, r6
 8001c26:	4298      	cmp	r0, r3
 8001c28:	d90e      	bls.n	8001c48 <calcCRC16ModBus+0x38>
		temp = temp ^ buffer[i];
 8001c2a:	5dbb      	ldrb	r3, [r7, r6]
 8001c2c:	405a      	eors	r2, r3
 8001c2e:	2108      	movs	r1, #8
			flag = temp & 0x0001;
 8001c30:	002b      	movs	r3, r5
 8001c32:	4013      	ands	r3, r2
			if (flag)
 8001c34:	425b      	negs	r3, r3
 8001c36:	4023      	ands	r3, r4
			temp >>= 1;
 8001c38:	0852      	lsrs	r2, r2, #1
			if (flag)
 8001c3a:	405a      	eors	r2, r3
		for (unsigned char j = 1; j <= 8; j++) {
 8001c3c:	3901      	subs	r1, #1
 8001c3e:	b2c9      	uxtb	r1, r1
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d1f5      	bne.n	8001c30 <calcCRC16ModBus+0x20>
 8001c44:	e7ed      	b.n	8001c22 <calcCRC16ModBus+0x12>
	temp = 0xFFFF;
 8001c46:	4a03      	ldr	r2, [pc, #12]	@ (8001c54 <calcCRC16ModBus+0x44>)
				temp ^= 0xA001;
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8001c48:	0a13      	lsrs	r3, r2, #8
	temp = (temp << 8) | temp2;
 8001c4a:	0210      	lsls	r0, r2, #8
 8001c4c:	4318      	orrs	r0, r3
	temp &= 0xFFFF;
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8001c4e:	b280      	uxth	r0, r0

}
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	0000ffff 	.word	0x0000ffff
 8001c58:	0000a001 	.word	0x0000a001

08001c5c <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	0006      	movs	r6, r0
 8001c60:	000d      	movs	r5, r1
 8001c62:	0014      	movs	r4, r2

    uint16_t crc = calcCRC16ModBus(frame, len);
 8001c64:	0011      	movs	r1, r2
 8001c66:	0028      	movs	r0, r5
 8001c68:	f7ff ffd2 	bl	8001c10 <calcCRC16ModBus>
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8001c6c:	192b      	adds	r3, r5, r4
 8001c6e:	7058      	strb	r0, [r3, #1]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 8001c70:	0a00      	lsrs	r0, r0, #8
 8001c72:	5528      	strb	r0, [r5, r4]

    TX_2;
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	2201      	movs	r2, #1
 8001c78:	01c9      	lsls	r1, r1, #7
 8001c7a:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <sendModBusRequest+0x3c>)
 8001c7c:	f001 fd1a 	bl	80036b4 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 8001c80:	1ca2      	adds	r2, r4, #2
 8001c82:	0029      	movs	r1, r5
 8001c84:	0030      	movs	r0, r6
 8001c86:	f002 fca7 	bl	80045d8 <HAL_UART_Transmit_DMA>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d101      	bne.n	8001c92 <sendModBusRequest+0x36>
	 else{
		// RX_2;

	  }
return 1;
}
 8001c8e:	2001      	movs	r0, #1
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
	        Error_Handler();
 8001c92:	f7ff ffbb 	bl	8001c0c <Error_Handler>
 8001c96:	e7fa      	b.n	8001c8e <sendModBusRequest+0x32>
 8001c98:	50000800 	.word	0x50000800

08001c9c <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	0004      	movs	r4, r0
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <sendError+0x34>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	7003      	strb	r3, [r0, #0]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	425b      	negs	r3, r3
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	7043      	strb	r3, [r0, #1]
    errorFrame[2] = errorCode;      // Код ошибки
 8001cb2:	7082      	strb	r2, [r0, #2]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	f7ff ffab 	bl	8001c10 <calcCRC16ModBus>
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001cba:	466b      	mov	r3, sp
 8001cbc:	70d8      	strb	r0, [r3, #3]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 8001cbe:	0a00      	lsrs	r0, r0, #8
 8001cc0:	7118      	strb	r0, [r3, #4]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001cc2:	2205      	movs	r2, #5
 8001cc4:	4669      	mov	r1, sp
 8001cc6:	0020      	movs	r0, r4
 8001cc8:	f7ff ffc8 	bl	8001c5c <sendModBusRequest>

}
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd10      	pop	{r4, pc}
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	000c      	movs	r4, r1

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <sendModbusException+0x24>)
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <sendModbusException+0x28>)
 8001cdc:	7815      	ldrb	r5, [r2, #0]
 8001cde:	0019      	movs	r1, r3
 8001ce0:	701d      	strb	r5, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001ce2:	7852      	ldrb	r2, [r2, #1]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	704b      	strb	r3, [r1, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001cec:	708c      	strb	r4, [r1, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f7ff ffb4 	bl	8001c5c <sendModBusRequest>
}
 8001cf4:	bd70      	pop	{r4, r5, r6, pc}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	2000036c 	.word	0x2000036c
 8001cfc:	2000046c 	.word	0x2000046c

08001d00 <handleReadHoldingRegs>:
modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001d02:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <handleReadHoldingRegs+0x78>)
 8001d04:	7894      	ldrb	r4, [r2, #2]
 8001d06:	0224      	lsls	r4, r4, #8
 8001d08:	78d3      	ldrb	r3, [r2, #3]
 8001d0a:	4323      	orrs	r3, r4
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001d0c:	7914      	ldrb	r4, [r2, #4]
 8001d0e:	0224      	lsls	r4, r4, #8
 8001d10:	7956      	ldrb	r6, [r2, #5]
 8001d12:	4326      	orrs	r6, r4
 8001d14:	b234      	sxth	r4, r6
	uint16_t endAddr = startingReg+numOfregs;
 8001d16:	199f      	adds	r7, r3, r6
 8001d18:	b2bf      	uxth	r7, r7
	if((numOfregs<0)|(numOfregs >125)){
 8001d1a:	2e7d      	cmp	r6, #125	@ 0x7d
 8001d1c:	d820      	bhi.n	8001d60 <handleReadHoldingRegs+0x60>
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001d1e:	2f3c      	cmp	r7, #60	@ 0x3c
 8001d20:	d823      	bhi.n	8001d6a <handleReadHoldingRegs+0x6a>
	txFrame[0] = SLAVE_ID;
 8001d22:	4a16      	ldr	r2, [pc, #88]	@ (8001d7c <handleReadHoldingRegs+0x7c>)
 8001d24:	4d16      	ldr	r5, [pc, #88]	@ (8001d80 <handleReadHoldingRegs+0x80>)
 8001d26:	782d      	ldrb	r5, [r5, #0]
 8001d28:	7015      	strb	r5, [r2, #0]
	txFrame[1] = rxFrame[1];
 8001d2a:	4d13      	ldr	r5, [pc, #76]	@ (8001d78 <handleReadHoldingRegs+0x78>)
 8001d2c:	786d      	ldrb	r5, [r5, #1]
 8001d2e:	7055      	strb	r5, [r2, #1]
	txFrame[2] = numOfregs *2;
 8001d30:	0064      	lsls	r4, r4, #1
 8001d32:	7094      	strb	r4, [r2, #2]
	for(int i = 0; i<numOfregs;i++){
 8001d34:	2e00      	cmp	r6, #0
 8001d36:	d01d      	beq.n	8001d74 <handleReadHoldingRegs+0x74>
 8001d38:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <handleReadHoldingRegs+0x84>)
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001d3a:	005d      	lsls	r5, r3, #1
 8001d3c:	5b4c      	ldrh	r4, [r1, r5]
 8001d3e:	0a24      	lsrs	r4, r4, #8
 8001d40:	7014      	strb	r4, [r2, #0]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001d42:	5b4c      	ldrh	r4, [r1, r5]
 8001d44:	7054      	strb	r4, [r2, #1]
		startingReg++;
 8001d46:	3301      	adds	r3, #1
 8001d48:	b29b      	uxth	r3, r3
	for(int i = 0; i<numOfregs;i++){
 8001d4a:	3202      	adds	r2, #2
 8001d4c:	429f      	cmp	r7, r3
 8001d4e:	d1f4      	bne.n	8001d3a <handleReadHoldingRegs+0x3a>
 8001d50:	0072      	lsls	r2, r6, #1
 8001d52:	3203      	adds	r2, #3
	sendModBusRequest(huart,txFrame,byteCursor);
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	4909      	ldr	r1, [pc, #36]	@ (8001d7c <handleReadHoldingRegs+0x7c>)
 8001d58:	f7ff ff80 	bl	8001c5c <sendModBusRequest>
	return 1;
 8001d5c:	2001      	movs	r0, #1
}
 8001d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001d60:	2103      	movs	r1, #3
 8001d62:	f7ff ffb7 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001d66:	2000      	movs	r0, #0
 8001d68:	e7f9      	b.n	8001d5e <handleReadHoldingRegs+0x5e>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	f7ff ffb2 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001d70:	2000      	movs	r0, #0
 8001d72:	e7f4      	b.n	8001d5e <handleReadHoldingRegs+0x5e>
	int byteCursor=3;
 8001d74:	2203      	movs	r2, #3
 8001d76:	e7ed      	b.n	8001d54 <handleReadHoldingRegs+0x54>
 8001d78:	2000046c 	.word	0x2000046c
 8001d7c:	2000036c 	.word	0x2000036c
 8001d80:	20000000 	.word	0x20000000
 8001d84:	2000036f 	.word	0x2000036f

08001d88 <handleReadInputRegs>:
modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <handleReadInputRegs+0x7c>)
 8001d8c:	7894      	ldrb	r4, [r2, #2]
 8001d8e:	0224      	lsls	r4, r4, #8
 8001d90:	78d3      	ldrb	r3, [r2, #3]
 8001d92:	4323      	orrs	r3, r4
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001d94:	7914      	ldrb	r4, [r2, #4]
 8001d96:	0224      	lsls	r4, r4, #8
 8001d98:	7956      	ldrb	r6, [r2, #5]
 8001d9a:	4326      	orrs	r6, r4
 8001d9c:	b234      	sxth	r4, r6
	uint16_t endAddr = startingReg+numOfregs-1;
 8001d9e:	199f      	adds	r7, r3, r6
 8001da0:	b2bf      	uxth	r7, r7
 8001da2:	1e7a      	subs	r2, r7, #1
 8001da4:	b292      	uxth	r2, r2
	if((numOfregs<0)|(numOfregs >125)){
 8001da6:	2e7d      	cmp	r6, #125	@ 0x7d
 8001da8:	d820      	bhi.n	8001dec <handleReadInputRegs+0x64>
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001daa:	2a3c      	cmp	r2, #60	@ 0x3c
 8001dac:	d823      	bhi.n	8001df6 <handleReadInputRegs+0x6e>
	txFrame[0] = SLAVE_ID;
 8001dae:	4a16      	ldr	r2, [pc, #88]	@ (8001e08 <handleReadInputRegs+0x80>)
 8001db0:	4d16      	ldr	r5, [pc, #88]	@ (8001e0c <handleReadInputRegs+0x84>)
 8001db2:	782d      	ldrb	r5, [r5, #0]
 8001db4:	7015      	strb	r5, [r2, #0]
	txFrame[1] = rxFrame[1];
 8001db6:	4d13      	ldr	r5, [pc, #76]	@ (8001e04 <handleReadInputRegs+0x7c>)
 8001db8:	786d      	ldrb	r5, [r5, #1]
 8001dba:	7055      	strb	r5, [r2, #1]
	txFrame[2] = numOfregs *2;
 8001dbc:	0064      	lsls	r4, r4, #1
 8001dbe:	7094      	strb	r4, [r2, #2]
	for(int i = 0; i<numOfregs;i++){
 8001dc0:	2e00      	cmp	r6, #0
 8001dc2:	d01d      	beq.n	8001e00 <handleReadInputRegs+0x78>
 8001dc4:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <handleReadInputRegs+0x88>)
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001dc6:	005d      	lsls	r5, r3, #1
 8001dc8:	5b4c      	ldrh	r4, [r1, r5]
 8001dca:	0a24      	lsrs	r4, r4, #8
 8001dcc:	7014      	strb	r4, [r2, #0]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001dce:	5b4c      	ldrh	r4, [r1, r5]
 8001dd0:	7054      	strb	r4, [r2, #1]
		startingReg++;
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b29b      	uxth	r3, r3
	for(int i = 0; i<numOfregs;i++){
 8001dd6:	3202      	adds	r2, #2
 8001dd8:	429f      	cmp	r7, r3
 8001dda:	d1f4      	bne.n	8001dc6 <handleReadInputRegs+0x3e>
 8001ddc:	0072      	lsls	r2, r6, #1
 8001dde:	3203      	adds	r2, #3
	sendModBusRequest(huart,txFrame,byteCursor);
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4909      	ldr	r1, [pc, #36]	@ (8001e08 <handleReadInputRegs+0x80>)
 8001de4:	f7ff ff3a 	bl	8001c5c <sendModBusRequest>
	return 1;
 8001de8:	2001      	movs	r0, #1
}
 8001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001dec:	2103      	movs	r1, #3
 8001dee:	f7ff ff71 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001df2:	2000      	movs	r0, #0
 8001df4:	e7f9      	b.n	8001dea <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001df6:	2102      	movs	r1, #2
 8001df8:	f7ff ff6c 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	e7f4      	b.n	8001dea <handleReadInputRegs+0x62>
	int byteCursor=3;
 8001e00:	2203      	movs	r2, #3
 8001e02:	e7ed      	b.n	8001de0 <handleReadInputRegs+0x58>
 8001e04:	2000046c 	.word	0x2000046c
 8001e08:	2000036c 	.word	0x2000036c
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	2000036f 	.word	0x2000036f

08001e14 <handleReadCoils>:
modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	0005      	movs	r5, r0
	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001e18:	4a1d      	ldr	r2, [pc, #116]	@ (8001e90 <handleReadCoils+0x7c>)
 8001e1a:	7891      	ldrb	r1, [r2, #2]
 8001e1c:	0209      	lsls	r1, r1, #8
 8001e1e:	78d3      	ldrb	r3, [r2, #3]
 8001e20:	430b      	orrs	r3, r1
	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 8001e22:	7911      	ldrb	r1, [r2, #4]
 8001e24:	0209      	lsls	r1, r1, #8
 8001e26:	7954      	ldrb	r4, [r2, #5]
 8001e28:	430c      	orrs	r4, r1
 8001e2a:	b226      	sxth	r6, r4
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001e2c:	1e62      	subs	r2, r4, #1
 8001e2e:	21fa      	movs	r1, #250	@ 0xfa
 8001e30:	00c9      	lsls	r1, r1, #3
 8001e32:	b292      	uxth	r2, r2
 8001e34:	428a      	cmp	r2, r1
 8001e36:	d220      	bcs.n	8001e7a <handleReadCoils+0x66>
	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001e38:	191b      	adds	r3, r3, r4
 8001e3a:	3b01      	subs	r3, #1
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e40:	d820      	bhi.n	8001e84 <handleReadCoils+0x70>
	memset (txFrame, '\0', 256);
 8001e42:	4f14      	ldr	r7, [pc, #80]	@ (8001e94 <handleReadCoils+0x80>)
 8001e44:	22fd      	movs	r2, #253	@ 0xfd
 8001e46:	2100      	movs	r1, #0
 8001e48:	0038      	movs	r0, r7
 8001e4a:	f003 fb95 	bl	8005578 <memset>
	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001e4e:	1ef9      	subs	r1, r7, #3
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <handleReadCoils+0x84>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <handleReadCoils+0x7c>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	704b      	strb	r3, [r1, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	4032      	ands	r2, r6
 8001e60:	1e53      	subs	r3, r2, #1
 8001e62:	419a      	sbcs	r2, r3
 8001e64:	08e4      	lsrs	r4, r4, #3
 8001e66:	1912      	adds	r2, r2, r4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	708a      	strb	r2, [r1, #2]
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001e6c:	3203      	adds	r2, #3
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	0028      	movs	r0, r5
 8001e72:	f7ff fef3 	bl	8001c5c <sendModBusRequest>
	return 1;
 8001e76:	2001      	movs	r0, #1
}
 8001e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	f7ff ff2a 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001e80:	2000      	movs	r0, #0
 8001e82:	e7f9      	b.n	8001e78 <handleReadCoils+0x64>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001e84:	2102      	movs	r1, #2
 8001e86:	f7ff ff25 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	e7f4      	b.n	8001e78 <handleReadCoils+0x64>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	2000046c 	.word	0x2000046c
 8001e94:	2000036f 	.word	0x2000036f
 8001e98:	20000000 	.word	0x20000000

08001e9c <handleReadDiscreteInputs>:
modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	0005      	movs	r5, r0
	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <handleReadDiscreteInputs+0x80>)
 8001ea2:	7891      	ldrb	r1, [r2, #2]
 8001ea4:	0209      	lsls	r1, r1, #8
 8001ea6:	78d3      	ldrb	r3, [r2, #3]
 8001ea8:	430b      	orrs	r3, r1
	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001eaa:	7911      	ldrb	r1, [r2, #4]
 8001eac:	0209      	lsls	r1, r1, #8
 8001eae:	7954      	ldrb	r4, [r2, #5]
 8001eb0:	430c      	orrs	r4, r1
 8001eb2:	b226      	sxth	r6, r4
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8001eb4:	1e62      	subs	r2, r4, #1
 8001eb6:	21fa      	movs	r1, #250	@ 0xfa
 8001eb8:	00c9      	lsls	r1, r1, #3
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	428a      	cmp	r2, r1
 8001ebe:	d222      	bcs.n	8001f06 <handleReadDiscreteInputs+0x6a>
	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001ec0:	191b      	adds	r3, r3, r4
 8001ec2:	3b01      	subs	r3, #1
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ec8:	d822      	bhi.n	8001f10 <handleReadDiscreteInputs+0x74>
	memset (txFrame, '\0', 256);
 8001eca:	4f15      	ldr	r7, [pc, #84]	@ (8001f20 <handleReadDiscreteInputs+0x84>)
 8001ecc:	22fc      	movs	r2, #252	@ 0xfc
 8001ece:	2100      	movs	r1, #0
 8001ed0:	0038      	movs	r0, r7
 8001ed2:	f003 fb51 	bl	8005578 <memset>
	txFrame[0] = SLAVE_ID;  							// slave ID
 8001ed6:	1f39      	subs	r1, r7, #4
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <handleReadDiscreteInputs+0x88>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <handleReadDiscreteInputs+0x80>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	704b      	strb	r3, [r1, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	4032      	ands	r2, r6
 8001ee8:	1e53      	subs	r3, r2, #1
 8001eea:	419a      	sbcs	r2, r3
 8001eec:	08e4      	lsrs	r4, r4, #3
 8001eee:	1912      	adds	r2, r2, r4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	708a      	strb	r2, [r1, #2]
     txFrame[3]=1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	70cb      	strb	r3, [r1, #3]
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001ef8:	3203      	adds	r2, #3
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	0028      	movs	r0, r5
 8001efe:	f7ff fead 	bl	8001c5c <sendModBusRequest>
	return 1;
 8001f02:	2001      	movs	r0, #1
}
 8001f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001f06:	2103      	movs	r1, #3
 8001f08:	f7ff fee4 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e7f9      	b.n	8001f04 <handleReadDiscreteInputs+0x68>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001f10:	2102      	movs	r1, #2
 8001f12:	f7ff fedf 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001f16:	2000      	movs	r0, #0
 8001f18:	e7f4      	b.n	8001f04 <handleReadDiscreteInputs+0x68>
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	2000046c 	.word	0x2000046c
 8001f20:	20000370 	.word	0x20000370
 8001f24:	20000000 	.word	0x20000000

08001f28 <handleWriteMulyipleHandlingRegister>:
modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <handleWriteMulyipleHandlingRegister+0x80>)
 8001f2c:	7894      	ldrb	r4, [r2, #2]
 8001f2e:	0224      	lsls	r4, r4, #8
 8001f30:	78d3      	ldrb	r3, [r2, #3]
 8001f32:	4323      	orrs	r3, r4
	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001f34:	7914      	ldrb	r4, [r2, #4]
 8001f36:	0224      	lsls	r4, r4, #8
 8001f38:	7957      	ldrb	r7, [r2, #5]
 8001f3a:	4327      	orrs	r7, r4
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001f3c:	1e7a      	subs	r2, r7, #1
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	2a7a      	cmp	r2, #122	@ 0x7a
 8001f42:	d826      	bhi.n	8001f92 <handleWriteMulyipleHandlingRegister+0x6a>
	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001f44:	19df      	adds	r7, r3, r7
 8001f46:	b2bf      	uxth	r7, r7
 8001f48:	1e7a      	subs	r2, r7, #1
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	2a3c      	cmp	r2, #60	@ 0x3c
 8001f4e:	d825      	bhi.n	8001f9c <handleWriteMulyipleHandlingRegister+0x74>
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001f50:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <handleWriteMulyipleHandlingRegister+0x84>)
		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001f52:	001c      	movs	r4, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	0064      	lsls	r4, r4, #1
 8001f5a:	7816      	ldrb	r6, [r2, #0]
 8001f5c:	0236      	lsls	r6, r6, #8
 8001f5e:	7855      	ldrb	r5, [r2, #1]
 8001f60:	4335      	orrs	r5, r6
 8001f62:	5265      	strh	r5, [r4, r1]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001f64:	3202      	adds	r2, #2
 8001f66:	429f      	cmp	r7, r3
 8001f68:	d1f3      	bne.n	8001f52 <handleWriteMulyipleHandlingRegister+0x2a>
	txFrame[0] = SLAVE_ID;     // Slave ID
 8001f6a:	4911      	ldr	r1, [pc, #68]	@ (8001fb0 <handleWriteMulyipleHandlingRegister+0x88>)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <handleWriteMulyipleHandlingRegister+0x8c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <handleWriteMulyipleHandlingRegister+0x80>)
 8001f74:	785a      	ldrb	r2, [r3, #1]
 8001f76:	704a      	strb	r2, [r1, #1]
	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001f78:	789a      	ldrb	r2, [r3, #2]
 8001f7a:	708a      	strb	r2, [r1, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001f7c:	78da      	ldrb	r2, [r3, #3]
 8001f7e:	70ca      	strb	r2, [r1, #3]
	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001f80:	791a      	ldrb	r2, [r3, #4]
 8001f82:	710a      	strb	r2, [r1, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001f84:	795b      	ldrb	r3, [r3, #5]
 8001f86:	714b      	strb	r3, [r1, #5]
	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001f88:	2206      	movs	r2, #6
 8001f8a:	f7ff fe67 	bl	8001c5c <sendModBusRequest>
	return 1;   // success
 8001f8e:	2001      	movs	r0, #1
}
 8001f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001f92:	2103      	movs	r1, #3
 8001f94:	f7ff fe9e 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001f98:	2000      	movs	r0, #0
 8001f9a:	e7f9      	b.n	8001f90 <handleWriteMulyipleHandlingRegister+0x68>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	f7ff fe99 	bl	8001cd4 <sendModbusException>
		return MODBUS_ERROR;
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	e7f4      	b.n	8001f90 <handleWriteMulyipleHandlingRegister+0x68>
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	2000046c 	.word	0x2000046c
 8001fac:	20000473 	.word	0x20000473
 8001fb0:	2000036c 	.word	0x2000036c
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b500      	push	{lr}
 8001fba:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_MspInit+0x3c>)
 8001fbe:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	6419      	str	r1, [r3, #64]	@ 0x40
 8001fc6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001fc8:	400a      	ands	r2, r1
 8001fca:	9200      	str	r2, [sp, #0]
 8001fcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	0549      	lsls	r1, r1, #21
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	400b      	ands	r3, r1
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2004      	movs	r0, #4
 8001fe6:	f000 ff61 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001fea:	2004      	movs	r0, #4
 8001fec:	f000 ff90 	bl	8002f10 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff0:	b003      	add	sp, #12
 8001ff2:	bd00      	pop	{pc}
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	2214      	movs	r2, #20
 8002000:	2100      	movs	r1, #0
 8002002:	a803      	add	r0, sp, #12
 8002004:	f003 fab8 	bl	8005578 <memset>
  if(hadc->Instance==ADC1)
 8002008:	4b22      	ldr	r3, [pc, #136]	@ (8002094 <HAL_ADC_MspInit+0x9c>)
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002010:	b008      	add	sp, #32
 8002012:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8002014:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <HAL_ADC_MspInit+0xa0>)
 8002016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	0349      	lsls	r1, r1, #13
 800201c:	430a      	orrs	r2, r1
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002022:	400a      	ands	r2, r1
 8002024:	9201      	str	r2, [sp, #4]
 8002026:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800202a:	2201      	movs	r2, #1
 800202c:	4311      	orrs	r1, r2
 800202e:	6359      	str	r1, [r3, #52]	@ 0x34
 8002030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002032:	401a      	ands	r2, r3
 8002034:	9202      	str	r2, [sp, #8]
 8002036:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002038:	237f      	movs	r3, #127	@ 0x7f
 800203a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203c:	3b7c      	subs	r3, #124	@ 0x7c
 800203e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	20a0      	movs	r0, #160	@ 0xa0
 8002042:	a903      	add	r1, sp, #12
 8002044:	05c0      	lsls	r0, r0, #23
 8002046:	f001 f9c3 	bl	80033d0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel3;
 800204a:	4814      	ldr	r0, [pc, #80]	@ (800209c <HAL_ADC_MspInit+0xa4>)
 800204c:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <HAL_ADC_MspInit+0xa8>)
 800204e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002050:	2305      	movs	r3, #5
 8002052:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002054:	2300      	movs	r3, #0
 8002056:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002058:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800205a:	2280      	movs	r2, #128	@ 0x80
 800205c:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800205e:	3280      	adds	r2, #128	@ 0x80
 8002060:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002062:	2280      	movs	r2, #128	@ 0x80
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002068:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800206a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800206c:	f000 ffc6 	bl	8002ffc <HAL_DMA_Init>
 8002070:	2800      	cmp	r0, #0
 8002072:	d10b      	bne.n	800208c <HAL_ADC_MspInit+0x94>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_ADC_MspInit+0xa4>)
 8002076:	6523      	str	r3, [r4, #80]	@ 0x50
 8002078:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	200c      	movs	r0, #12
 8002080:	f000 ff14 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002084:	200c      	movs	r0, #12
 8002086:	f000 ff43 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 800208a:	e7c1      	b.n	8002010 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800208c:	f7ff fdbe 	bl	8001c0c <Error_Handler>
 8002090:	e7f0      	b.n	8002074 <HAL_ADC_MspInit+0x7c>
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	40012400 	.word	0x40012400
 8002098:	40021000 	.word	0x40021000
 800209c:	20000268 	.word	0x20000268
 80020a0:	40020030 	.word	0x40020030

080020a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a4:	b510      	push	{r4, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020aa:	2214      	movs	r2, #20
 80020ac:	2100      	movs	r1, #0
 80020ae:	a803      	add	r0, sp, #12
 80020b0:	f003 fa62 	bl	8005578 <memset>
  if(hi2c->Instance==I2C2)
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_I2C_MspInit+0x5c>)
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80020bc:	b008      	add	sp, #32
 80020be:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c0:	4c10      	ldr	r4, [pc, #64]	@ (8002104 <HAL_I2C_MspInit+0x60>)
 80020c2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80020c4:	2301      	movs	r3, #1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	6362      	str	r2, [r4, #52]	@ 0x34
 80020ca:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80020cc:	4013      	ands	r3, r2
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020d2:	23c0      	movs	r3, #192	@ 0xc0
 80020d4:	015b      	lsls	r3, r3, #5
 80020d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d8:	2312      	movs	r3, #18
 80020da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80020dc:	3b0c      	subs	r3, #12
 80020de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	20a0      	movs	r0, #160	@ 0xa0
 80020e2:	a903      	add	r1, sp, #12
 80020e4:	05c0      	lsls	r0, r0, #23
 80020e6:	f001 f973 	bl	80033d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	03d2      	lsls	r2, r2, #15
 80020f0:	4313      	orrs	r3, r2
 80020f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80020f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80020f6:	4013      	ands	r3, r2
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	9b02      	ldr	r3, [sp, #8]
}
 80020fc:	e7de      	b.n	80020bc <HAL_I2C_MspInit+0x18>
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	40005800 	.word	0x40005800
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002108:	b500      	push	{lr}
 800210a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_TIM_Base_MspInit+0x38>)
 800210e:	6802      	ldr	r2, [r0, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_TIM_Base_MspInit+0x10>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002114:	b003      	add	sp, #12
 8002116:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_TIM_Base_MspInit+0x3c>)
 800211a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	0209      	lsls	r1, r1, #8
 8002120:	430a      	orrs	r2, r1
 8002122:	641a      	str	r2, [r3, #64]	@ 0x40
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	400b      	ands	r3, r1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	2013      	movs	r0, #19
 8002132:	f000 febb 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002136:	2013      	movs	r0, #19
 8002138:	f000 feea 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 800213c:	e7ea      	b.n	8002114 <HAL_TIM_Base_MspInit+0xc>
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	40002000 	.word	0x40002000
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b530      	push	{r4, r5, lr}
 800214a:	b08f      	sub	sp, #60	@ 0x3c
 800214c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214e:	2214      	movs	r2, #20
 8002150:	2100      	movs	r1, #0
 8002152:	a809      	add	r0, sp, #36	@ 0x24
 8002154:	f003 fa10 	bl	8005578 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002158:	2218      	movs	r2, #24
 800215a:	2100      	movs	r1, #0
 800215c:	a803      	add	r0, sp, #12
 800215e:	f003 fa0b 	bl	8005578 <memset>
  if(huart->Instance==USART1)
 8002162:	4b35      	ldr	r3, [pc, #212]	@ (8002238 <HAL_UART_MspInit+0xf0>)
 8002164:	6822      	ldr	r2, [r4, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_UART_MspInit+0x26>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800216a:	b00f      	add	sp, #60	@ 0x3c
 800216c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800216e:	2301      	movs	r3, #1
 8002170:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002172:	a803      	add	r0, sp, #12
 8002174:	f001 ff68 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 8002178:	2800      	cmp	r0, #0
 800217a:	d153      	bne.n	8002224 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART1_CLK_ENABLE();
 800217c:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <HAL_UART_MspInit+0xf4>)
 800217e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002180:	2180      	movs	r1, #128	@ 0x80
 8002182:	01c9      	lsls	r1, r1, #7
 8002184:	430a      	orrs	r2, r1
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40
 8002188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800218a:	400a      	ands	r2, r1
 800218c:	9201      	str	r2, [sp, #4]
 800218e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002192:	2202      	movs	r2, #2
 8002194:	4311      	orrs	r1, r2
 8002196:	6359      	str	r1, [r3, #52]	@ 0x34
 8002198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219a:	4013      	ands	r3, r2
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80021a0:	23c0      	movs	r3, #192	@ 0xc0
 80021a2:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2500      	movs	r5, #0
 80021a8:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80021ac:	950d      	str	r5, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	a909      	add	r1, sp, #36	@ 0x24
 80021b0:	4823      	ldr	r0, [pc, #140]	@ (8002240 <HAL_UART_MspInit+0xf8>)
 80021b2:	f001 f90d 	bl	80033d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80021b6:	4823      	ldr	r0, [pc, #140]	@ (8002244 <HAL_UART_MspInit+0xfc>)
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <HAL_UART_MspInit+0x100>)
 80021ba:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80021bc:	2332      	movs	r3, #50	@ 0x32
 80021be:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c0:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c2:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c4:	334e      	adds	r3, #78	@ 0x4e
 80021c6:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c8:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ca:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021cc:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021ce:	23c0      	movs	r3, #192	@ 0xc0
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021d4:	f000 ff12 	bl	8002ffc <HAL_DMA_Init>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d126      	bne.n	800222a <HAL_UART_MspInit+0xe2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021dc:	2280      	movs	r2, #128	@ 0x80
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_UART_MspInit+0xfc>)
 80021e0:	50a3      	str	r3, [r4, r2]
 80021e2:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80021e4:	4819      	ldr	r0, [pc, #100]	@ (800224c <HAL_UART_MspInit+0x104>)
 80021e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_UART_MspInit+0x108>)
 80021e8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80021ea:	2333      	movs	r3, #51	@ 0x33
 80021ec:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ee:	3b23      	subs	r3, #35	@ 0x23
 80021f0:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f6:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f8:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021fa:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021fc:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002204:	f000 fefa 	bl	8002ffc <HAL_DMA_Init>
 8002208:	2800      	cmp	r0, #0
 800220a:	d111      	bne.n	8002230 <HAL_UART_MspInit+0xe8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <HAL_UART_MspInit+0x104>)
 800220e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002210:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	201b      	movs	r0, #27
 8002218:	f000 fe48 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800221c:	201b      	movs	r0, #27
 800221e:	f000 fe77 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8002222:	e7a2      	b.n	800216a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002224:	f7ff fcf2 	bl	8001c0c <Error_Handler>
 8002228:	e7a8      	b.n	800217c <HAL_UART_MspInit+0x34>
      Error_Handler();
 800222a:	f7ff fcef 	bl	8001c0c <Error_Handler>
 800222e:	e7d5      	b.n	80021dc <HAL_UART_MspInit+0x94>
      Error_Handler();
 8002230:	f7ff fcec 	bl	8001c0c <Error_Handler>
 8002234:	e7ea      	b.n	800220c <HAL_UART_MspInit+0xc4>
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	40013800 	.word	0x40013800
 800223c:	40021000 	.word	0x40021000
 8002240:	50000400 	.word	0x50000400
 8002244:	200000d8 	.word	0x200000d8
 8002248:	40020008 	.word	0x40020008
 800224c:	2000007c 	.word	0x2000007c
 8002250:	4002001c 	.word	0x4002001c

08002254 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002254:	b510      	push	{r4, lr}
 8002256:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <HAL_UART_MspDeInit+0x38>)
 800225a:	6802      	ldr	r2, [r0, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d000      	beq.n	8002262 <HAL_UART_MspDeInit+0xe>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002260:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8002262:	4a0b      	ldr	r2, [pc, #44]	@ (8002290 <HAL_UART_MspDeInit+0x3c>)
 8002264:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002266:	490b      	ldr	r1, [pc, #44]	@ (8002294 <HAL_UART_MspDeInit+0x40>)
 8002268:	400b      	ands	r3, r1
 800226a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 800226c:	21c0      	movs	r1, #192	@ 0xc0
 800226e:	480a      	ldr	r0, [pc, #40]	@ (8002298 <HAL_UART_MspDeInit+0x44>)
 8002270:	f001 f99a 	bl	80035a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	58e0      	ldr	r0, [r4, r3]
 8002278:	f000 ff24 	bl	80030c4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800227c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800227e:	f000 ff21 	bl	80030c4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002282:	201b      	movs	r0, #27
 8002284:	f000 fe50 	bl	8002f28 <HAL_NVIC_DisableIRQ>
}
 8002288:	e7ea      	b.n	8002260 <HAL_UART_MspDeInit+0xc>
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	40013800 	.word	0x40013800
 8002290:	40021000 	.word	0x40021000
 8002294:	ffffbfff 	.word	0xffffbfff
 8002298:	50000400 	.word	0x50000400

0800229c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800229c:	e7fe      	b.n	800229c <NMI_Handler>

0800229e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler>

080022a0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a2:	4770      	bx	lr

080022a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a6:	f000 f897 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022aa:	bd10      	pop	{r4, pc}

080022ac <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80022ac:	4770      	bx	lr
	...

080022b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022b2:	4802      	ldr	r0, [pc, #8]	@ (80022bc <DMA1_Channel1_IRQHandler+0xc>)
 80022b4:	f001 f824 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022b8:	bd10      	pop	{r4, pc}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	200000d8 	.word	0x200000d8

080022c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80022c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022c2:	4803      	ldr	r0, [pc, #12]	@ (80022d0 <DMA1_Channel2_3_IRQHandler+0x10>)
 80022c4:	f001 f81c 	bl	8003300 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80022ca:	f001 f819 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80022ce:	bd10      	pop	{r4, pc}
 80022d0:	2000007c 	.word	0x2000007c
 80022d4:	20000268 	.word	0x20000268

080022d8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80022d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022da:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <ADC1_IRQHandler+0xc>)
 80022dc:	f000 fa10 	bl	8002700 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	200002c4 	.word	0x200002c4

080022e8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80022e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80022ea:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <TIM14_IRQHandler+0xc>)
 80022ec:	f001 ffac 	bl	8004248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	200001c8 	.word	0x200001c8

080022f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80022f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022fa:	4802      	ldr	r0, [pc, #8]	@ (8002304 <USART1_IRQHandler+0xc>)
 80022fc:	f002 fa84 	bl	8004808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002300:	bd10      	pop	{r4, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	20000134 	.word	0x20000134

08002308 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	4770      	bx	lr
	...

0800230c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800230c:	480d      	ldr	r0, [pc, #52]	@ (8002344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800230e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002310:	f7ff fffa 	bl	8002308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <LoopForever+0x6>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <LoopForever+0xe>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	@ (8002358 <LoopForever+0x16>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800233a:	f003 f92b 	bl	8005594 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800233e:	f7ff faf5 	bl	800192c <main>

08002342 <LoopForever>:

LoopForever:
  b LoopForever
 8002342:	e7fe      	b.n	8002342 <LoopForever>
  ldr   r0, =_estack
 8002344:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002350:	08005748 	.word	0x08005748
  ldr r2, =_sbss
 8002354:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002358:	20000600 	.word	0x20000600

0800235c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800235c:	e7fe      	b.n	800235c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08002360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002364:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_InitTick+0x44>)
 8002366:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002368:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 800236a:	2900      	cmp	r1, #0
 800236c:	d100      	bne.n	8002370 <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 800236e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002370:	4d0d      	ldr	r5, [pc, #52]	@ (80023a8 <HAL_InitTick+0x48>)
 8002372:	20fa      	movs	r0, #250	@ 0xfa
 8002374:	0080      	lsls	r0, r0, #2
 8002376:	f7fd fec3 	bl	8000100 <__udivsi3>
 800237a:	0001      	movs	r1, r0
 800237c:	6828      	ldr	r0, [r5, #0]
 800237e:	f7fd febf 	bl	8000100 <__udivsi3>
 8002382:	f000 fde1 	bl	8002f48 <HAL_SYSTICK_Config>
 8002386:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8002388:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ef      	bne.n	800236e <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238e:	2c03      	cmp	r4, #3
 8002390:	d8ed      	bhi.n	800236e <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002392:	2200      	movs	r2, #0
 8002394:	0021      	movs	r1, r4
 8002396:	4240      	negs	r0, r0
 8002398:	f000 fd88 	bl	8002eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_InitTick+0x4c>)
 800239e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80023a0:	2000      	movs	r0, #0
 80023a2:	e7e4      	b.n	800236e <HAL_InitTick+0xe>
 80023a4:	20000008 	.word	0x20000008
 80023a8:	20000004 	.word	0x20000004
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <HAL_Init>:
{
 80023b0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HAL_Init+0x24>)
 80023b4:	6811      	ldr	r1, [r2, #0]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023be:	2003      	movs	r0, #3
 80023c0:	f7ff ffce 	bl	8002360 <HAL_InitTick>
 80023c4:	1e04      	subs	r4, r0, #0
 80023c6:	d002      	beq.n	80023ce <HAL_Init+0x1e>
    status = HAL_ERROR;
 80023c8:	2401      	movs	r4, #1
}
 80023ca:	0020      	movs	r0, r4
 80023cc:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80023ce:	f7ff fdf3 	bl	8001fb8 <HAL_MspInit>
 80023d2:	e7fa      	b.n	80023ca <HAL_Init+0x1a>
 80023d4:	40022000 	.word	0x40022000

080023d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80023d8:	4a03      	ldr	r2, [pc, #12]	@ (80023e8 <HAL_IncTick+0x10>)
 80023da:	6811      	ldr	r1, [r2, #0]
 80023dc:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_IncTick+0x14>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	185b      	adds	r3, r3, r1
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	4770      	bx	lr
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	200004c4 	.word	0x200004c4
 80023ec:	20000008 	.word	0x20000008

080023f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023f0:	4b01      	ldr	r3, [pc, #4]	@ (80023f8 <HAL_GetTick+0x8>)
 80023f2:	6818      	ldr	r0, [r3, #0]
}
 80023f4:	4770      	bx	lr
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	200004c4 	.word	0x200004c4

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fff6 	bl	80023f0 <HAL_GetTick>
 8002404:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	1c63      	adds	r3, r4, #1
 8002408:	d002      	beq.n	8002410 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <HAL_Delay+0x20>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	1b40      	subs	r0, r0, r5
 8002416:	42a0      	cmp	r0, r4
 8002418:	d3fa      	bcc.n	8002410 <HAL_Delay+0x14>
  {
  }
}
 800241a:	bd70      	pop	{r4, r5, r6, pc}
 800241c:	20000008 	.word	0x20000008

08002420 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002422:	b083      	sub	sp, #12
 8002424:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002426:	2300      	movs	r3, #0
 8002428:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800242a:	2800      	cmp	r0, #0
 800242c:	d100      	bne.n	8002430 <HAL_ADC_Init+0x10>
 800242e:	e0ff      	b.n	8002630 <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002430:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002432:	2b00      	cmp	r3, #0
 8002434:	d100      	bne.n	8002438 <HAL_ADC_Init+0x18>
 8002436:	e0b6      	b.n	80025a6 <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002438:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	00d2      	lsls	r2, r2, #3
 800243e:	d417      	bmi.n	8002470 <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	4a7c      	ldr	r2, [pc, #496]	@ (8002634 <HAL_ADC_Init+0x214>)
 8002444:	4011      	ands	r1, r2
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	0552      	lsls	r2, r2, #21
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244e:	4b7a      	ldr	r3, [pc, #488]	@ (8002638 <HAL_ADC_Init+0x218>)
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	497a      	ldr	r1, [pc, #488]	@ (800263c <HAL_ADC_Init+0x21c>)
 8002454:	f7fd fe54 	bl	8000100 <__udivsi3>
 8002458:	3001      	adds	r0, #1
 800245a:	0040      	lsls	r0, r0, #1
 800245c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8002464:	9b01      	ldr	r3, [sp, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800246a:	9b01      	ldr	r3, [sp, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002470:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002472:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2000      	movs	r0, #0
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	d408      	bmi.n	800248c <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800247c:	2210      	movs	r2, #16
 800247e:	4313      	orrs	r3, r2
 8002480:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002484:	3a0f      	subs	r2, #15
 8002486:	4313      	orrs	r3, r2
 8002488:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800248a:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248c:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002490:	2310      	movs	r3, #16
 8002492:	4013      	ands	r3, r2
 8002494:	2204      	movs	r2, #4
 8002496:	402a      	ands	r2, r5
 8002498:	4313      	orrs	r3, r2
 800249a:	d000      	beq.n	800249e <HAL_ADC_Init+0x7e>
 800249c:	e0c1      	b.n	8002622 <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80024a0:	4a67      	ldr	r2, [pc, #412]	@ (8002640 <HAL_ADC_Init+0x220>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	3206      	adds	r2, #6
 80024a6:	32ff      	adds	r2, #255	@ 0xff
 80024a8:	4313      	orrs	r3, r2
 80024aa:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024ac:	688b      	ldr	r3, [r1, #8]
 80024ae:	07db      	lsls	r3, r3, #31
 80024b0:	d44f      	bmi.n	8002552 <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024b2:	7ea5      	ldrb	r5, [r4, #26]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024b4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80024b6:	1e73      	subs	r3, r6, #1
 80024b8:	419e      	sbcs	r6, r3
 80024ba:	0336      	lsls	r6, r6, #12
 80024bc:	68a2      	ldr	r2, [r4, #8]
 80024be:	68e3      	ldr	r3, [r4, #12]
 80024c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024c2:	7e23      	ldrb	r3, [r4, #24]
 80024c4:	039b      	lsls	r3, r3, #14
 80024c6:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024c8:	7e63      	ldrb	r3, [r4, #25]
 80024ca:	03db      	lsls	r3, r3, #15
 80024cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024ce:	036b      	lsls	r3, r5, #13
 80024d0:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024d2:	6923      	ldr	r3, [r4, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db6d      	blt.n	80025b4 <HAL_ADC_Init+0x194>
 80024d8:	2780      	movs	r7, #128	@ 0x80
 80024da:	03bf      	lsls	r7, r7, #14
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024dc:	232c      	movs	r3, #44	@ 0x2c
 80024de:	5ce3      	ldrb	r3, [r4, r3]
 80024e0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024e2:	4313      	orrs	r3, r2
 80024e4:	4333      	orrs	r3, r6
 80024e6:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e8:	2220      	movs	r2, #32
 80024ea:	5ca2      	ldrb	r2, [r4, r2]
 80024ec:	2a01      	cmp	r2, #1
 80024ee:	d064      	beq.n	80025ba <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d005      	beq.n	8002502 <HAL_ADC_Init+0xe2>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024f6:	25e0      	movs	r5, #224	@ 0xe0
 80024f8:	006d      	lsls	r5, r5, #1
 80024fa:	402a      	ands	r2, r5
 80024fc:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80024fe:	432a      	orrs	r2, r5
 8002500:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002502:	68ca      	ldr	r2, [r1, #12]
 8002504:	4d4f      	ldr	r5, [pc, #316]	@ (8002644 <HAL_ADC_Init+0x224>)
 8002506:	402a      	ands	r2, r5
 8002508:	4313      	orrs	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800250c:	6863      	ldr	r3, [r4, #4]
 800250e:	0f9b      	lsrs	r3, r3, #30
 8002510:	079b      	lsls	r3, r3, #30
 8002512:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8002514:	431a      	orrs	r2, r3
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002516:	213c      	movs	r1, #60	@ 0x3c
 8002518:	5c61      	ldrb	r1, [r4, r1]
 800251a:	2901      	cmp	r1, #1
 800251c:	d05c      	beq.n	80025d8 <HAL_ADC_Init+0x1b8>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800251e:	6821      	ldr	r1, [r4, #0]
 8002520:	690b      	ldr	r3, [r1, #16]
 8002522:	4d49      	ldr	r5, [pc, #292]	@ (8002648 <HAL_ADC_Init+0x228>)
 8002524:	402b      	ands	r3, r5
 8002526:	4313      	orrs	r3, r2
 8002528:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800252a:	6862      	ldr	r2, [r4, #4]
 800252c:	0053      	lsls	r3, r2, #1
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	2180      	movs	r1, #128	@ 0x80
 8002532:	05c9      	lsls	r1, r1, #23
 8002534:	428b      	cmp	r3, r1
 8002536:	d00c      	beq.n	8002552 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	061b      	lsls	r3, r3, #24
 800253c:	429a      	cmp	r2, r3
 800253e:	d008      	beq.n	8002552 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002540:	4942      	ldr	r1, [pc, #264]	@ (800264c <HAL_ADC_Init+0x22c>)
 8002542:	680b      	ldr	r3, [r1, #0]
 8002544:	4d42      	ldr	r5, [pc, #264]	@ (8002650 <HAL_ADC_Init+0x230>)
 8002546:	402b      	ands	r3, r5
 8002548:	25f0      	movs	r5, #240	@ 0xf0
 800254a:	03ad      	lsls	r5, r5, #14
 800254c:	402a      	ands	r2, r5
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002552:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002554:	6953      	ldr	r3, [r2, #20]
 8002556:	2107      	movs	r1, #7
 8002558:	438b      	bics	r3, r1
 800255a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800255c:	430b      	orrs	r3, r1
 800255e:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002560:	6821      	ldr	r1, [r4, #0]
 8002562:	694a      	ldr	r2, [r1, #20]
 8002564:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	2570      	movs	r5, #112	@ 0x70
 800256a:	43aa      	bics	r2, r5
 800256c:	4313      	orrs	r3, r2
 800256e:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002570:	6923      	ldr	r3, [r4, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d13a      	bne.n	80025ec <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002576:	6822      	ldr	r2, [r4, #0]
 8002578:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800257a:	3b10      	subs	r3, #16
 800257c:	430b      	orrs	r3, r1
 800257e:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002580:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	2307      	movs	r3, #7
 8002586:	4013      	ands	r3, r2
 8002588:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800258a:	429a      	cmp	r2, r3
 800258c:	d040      	beq.n	8002610 <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800258e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002590:	2212      	movs	r2, #18
 8002592:	4393      	bics	r3, r2
 8002594:	3a02      	subs	r2, #2
 8002596:	4313      	orrs	r3, r2
 8002598:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800259c:	3a0f      	subs	r2, #15
 800259e:	4313      	orrs	r3, r2
 80025a0:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
 80025a4:	e042      	b.n	800262c <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 80025a6:	f7ff fd27 	bl	8001ff8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80025aa:	2300      	movs	r3, #0
 80025ac:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80025ae:	2254      	movs	r2, #84	@ 0x54
 80025b0:	54a3      	strb	r3, [r4, r2]
 80025b2:	e741      	b.n	8002438 <HAL_ADC_Init+0x18>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	085f      	lsrs	r7, r3, #1
 80025b8:	e790      	b.n	80024dc <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025ba:	2d00      	cmp	r5, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_ADC_Init+0x1a6>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80025be:	2280      	movs	r2, #128	@ 0x80
 80025c0:	0252      	lsls	r2, r2, #9
 80025c2:	4313      	orrs	r3, r2
 80025c4:	e794      	b.n	80024f0 <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80025c8:	2520      	movs	r5, #32
 80025ca:	432a      	orrs	r2, r5
 80025cc:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ce:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80025d0:	3d1f      	subs	r5, #31
 80025d2:	432a      	orrs	r2, r5
 80025d4:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80025d6:	e78b      	b.n	80024f0 <HAL_ADC_Init+0xd0>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80025d8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80025da:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80025dc:	4329      	orrs	r1, r5
 80025de:	430a      	orrs	r2, r1
 80025e0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80025e2:	430a      	orrs	r2, r1
 80025e4:	4313      	orrs	r3, r2
 80025e6:	2201      	movs	r2, #1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	e798      	b.n	800251e <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025ec:	2280      	movs	r2, #128	@ 0x80
 80025ee:	0392      	lsls	r2, r2, #14
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d1c5      	bne.n	8002580 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 80025f4:	6821      	ldr	r1, [r4, #0]
 80025f6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80025f8:	69e3      	ldr	r3, [r4, #28]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	221c      	movs	r2, #28
 8002600:	401a      	ands	r2, r3
 8002602:	2310      	movs	r3, #16
 8002604:	425b      	negs	r3, r3
 8002606:	4093      	lsls	r3, r2
 8002608:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800260a:	4313      	orrs	r3, r2
 800260c:	628b      	str	r3, [r1, #40]	@ 0x28
 800260e:	e7b7      	b.n	8002580 <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 8002610:	2300      	movs	r3, #0
 8002612:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002614:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002616:	2203      	movs	r2, #3
 8002618:	4393      	bics	r3, r2
 800261a:	3a02      	subs	r2, #2
 800261c:	4313      	orrs	r3, r2
 800261e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002620:	e004      	b.n	800262c <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002624:	2210      	movs	r2, #16
 8002626:	4313      	orrs	r3, r2
 8002628:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800262a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800262c:	b003      	add	sp, #12
 800262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002630:	2001      	movs	r0, #1
 8002632:	e7fb      	b.n	800262c <HAL_ADC_Init+0x20c>
 8002634:	6fffffe8 	.word	0x6fffffe8
 8002638:	20000004 	.word	0x20000004
 800263c:	00030d40 	.word	0x00030d40
 8002640:	fffffefd 	.word	0xfffffefd
 8002644:	ffde0201 	.word	0xffde0201
 8002648:	1ffffc02 	.word	0x1ffffc02
 800264c:	40012708 	.word	0x40012708
 8002650:	ffc3ffff 	.word	0xffc3ffff

08002654 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002654:	4770      	bx	lr

08002656 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002656:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002658:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800265a:	f7ff fffb 	bl	8002654 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265e:	bd10      	pop	{r4, pc}

08002660 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002660:	4770      	bx	lr

08002662 <HAL_ADC_ErrorCallback>:
}
 8002662:	4770      	bx	lr

08002664 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002664:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002666:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002668:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	4313      	orrs	r3, r2
 800266e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002670:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002672:	3a3c      	subs	r2, #60	@ 0x3c
 8002674:	4313      	orrs	r3, r2
 8002676:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002678:	f7ff fff3 	bl	8002662 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800267c:	bd10      	pop	{r4, pc}
	...

08002680 <ADC_DMAConvCplt>:
{
 8002680:	b510      	push	{r4, lr}
 8002682:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002684:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002686:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002688:	2150      	movs	r1, #80	@ 0x50
 800268a:	4211      	tst	r1, r2
 800268c:	d12a      	bne.n	80026e4 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800268e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4313      	orrs	r3, r2
 8002696:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002698:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800269a:	68d9      	ldr	r1, [r3, #12]
 800269c:	22c0      	movs	r2, #192	@ 0xc0
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	4211      	tst	r1, r2
 80026a2:	d113      	bne.n	80026cc <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80026a4:	7e82      	ldrb	r2, [r0, #26]
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d110      	bne.n	80026cc <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	0712      	lsls	r2, r2, #28
 80026ae:	d50d      	bpl.n	80026cc <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	0752      	lsls	r2, r2, #29
 80026b4:	d40d      	bmi.n	80026d2 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	210c      	movs	r1, #12
 80026ba:	438a      	bics	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80026be:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80026c0:	4a0e      	ldr	r2, [pc, #56]	@ (80026fc <ADC_DMAConvCplt+0x7c>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	3204      	adds	r2, #4
 80026c6:	32ff      	adds	r2, #255	@ 0xff
 80026c8:	4313      	orrs	r3, r2
 80026ca:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80026cc:	f7ff f844 	bl	8001758 <HAL_ADC_ConvCpltCallback>
}
 80026d0:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80026d4:	2220      	movs	r2, #32
 80026d6:	4313      	orrs	r3, r2
 80026d8:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80026dc:	3a1f      	subs	r2, #31
 80026de:	4313      	orrs	r3, r2
 80026e0:	65c3      	str	r3, [r0, #92]	@ 0x5c
 80026e2:	e7f3      	b.n	80026cc <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026e4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80026e6:	06d2      	lsls	r2, r2, #27
 80026e8:	d404      	bmi.n	80026f4 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026ea:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80026ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026ee:	0018      	movs	r0, r3
 80026f0:	4790      	blx	r2
}
 80026f2:	e7ed      	b.n	80026d0 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 80026f4:	f7ff ffb5 	bl	8002662 <HAL_ADC_ErrorCallback>
 80026f8:	e7ea      	b.n	80026d0 <ADC_DMAConvCplt+0x50>
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	fffffefe 	.word	0xfffffefe

08002700 <HAL_ADC_IRQHandler>:
{
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002704:	6803      	ldr	r3, [r0, #0]
 8002706:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002708:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800270a:	07ab      	lsls	r3, r5, #30
 800270c:	d50f      	bpl.n	800272e <HAL_ADC_IRQHandler+0x2e>
 800270e:	07b3      	lsls	r3, r6, #30
 8002710:	d50d      	bpl.n	800272e <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002712:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002714:	06db      	lsls	r3, r3, #27
 8002716:	d404      	bmi.n	8002722 <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002718:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800271a:	2380      	movs	r3, #128	@ 0x80
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	4313      	orrs	r3, r2
 8002720:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002722:	0020      	movs	r0, r4
 8002724:	f000 fbc0 	bl	8002ea8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800272e:	076b      	lsls	r3, r5, #29
 8002730:	d501      	bpl.n	8002736 <HAL_ADC_IRQHandler+0x36>
 8002732:	0773      	lsls	r3, r6, #29
 8002734:	d403      	bmi.n	800273e <HAL_ADC_IRQHandler+0x3e>
 8002736:	072b      	lsls	r3, r5, #28
 8002738:	d529      	bpl.n	800278e <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800273a:	0733      	lsls	r3, r6, #28
 800273c:	d527      	bpl.n	800278e <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800273e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002740:	06db      	lsls	r3, r3, #27
 8002742:	d404      	bmi.n	800274e <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002744:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4313      	orrs	r3, r2
 800274c:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800274e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002750:	68d9      	ldr	r1, [r3, #12]
 8002752:	22c0      	movs	r2, #192	@ 0xc0
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	4211      	tst	r1, r2
 8002758:	d113      	bne.n	8002782 <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800275a:	7ea2      	ldrb	r2, [r4, #26]
 800275c:	2a00      	cmp	r2, #0
 800275e:	d110      	bne.n	8002782 <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	0712      	lsls	r2, r2, #28
 8002764:	d50d      	bpl.n	8002782 <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	0752      	lsls	r2, r2, #29
 800276a:	d43b      	bmi.n	80027e4 <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	210c      	movs	r1, #12
 8002770:	438a      	bics	r2, r1
 8002772:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002774:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002776:	4a37      	ldr	r2, [pc, #220]	@ (8002854 <HAL_ADC_IRQHandler+0x154>)
 8002778:	4013      	ands	r3, r2
 800277a:	3204      	adds	r2, #4
 800277c:	32ff      	adds	r2, #255	@ 0xff
 800277e:	4313      	orrs	r3, r2
 8002780:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002782:	0020      	movs	r0, r4
 8002784:	f7fe ffe8 	bl	8001758 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	220c      	movs	r2, #12
 800278c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800278e:	062b      	lsls	r3, r5, #24
 8002790:	d501      	bpl.n	8002796 <HAL_ADC_IRQHandler+0x96>
 8002792:	0633      	lsls	r3, r6, #24
 8002794:	d42f      	bmi.n	80027f6 <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002796:	05eb      	lsls	r3, r5, #23
 8002798:	d501      	bpl.n	800279e <HAL_ADC_IRQHandler+0x9e>
 800279a:	05f3      	lsls	r3, r6, #23
 800279c:	d437      	bmi.n	800280e <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800279e:	05ab      	lsls	r3, r5, #22
 80027a0:	d501      	bpl.n	80027a6 <HAL_ADC_IRQHandler+0xa6>
 80027a2:	05b3      	lsls	r3, r6, #22
 80027a4:	d440      	bmi.n	8002828 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027a6:	06eb      	lsls	r3, r5, #27
 80027a8:	d517      	bpl.n	80027da <HAL_ADC_IRQHandler+0xda>
 80027aa:	06f3      	lsls	r3, r6, #27
 80027ac:	d515      	bpl.n	80027da <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80027b4:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	079b      	lsls	r3, r3, #30
 80027ba:	d00b      	beq.n	80027d4 <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027bc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027c6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80027c8:	2202      	movs	r2, #2
 80027ca:	4313      	orrs	r3, r2
 80027cc:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80027ce:	0020      	movs	r0, r4
 80027d0:	f7ff ff47 	bl	8002662 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	2210      	movs	r2, #16
 80027d8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80027da:	04ad      	lsls	r5, r5, #18
 80027dc:	d501      	bpl.n	80027e2 <HAL_ADC_IRQHandler+0xe2>
 80027de:	04b6      	lsls	r6, r6, #18
 80027e0:	d42f      	bmi.n	8002842 <HAL_ADC_IRQHandler+0x142>
}
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027e6:	2220      	movs	r2, #32
 80027e8:	4313      	orrs	r3, r2
 80027ea:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80027ee:	3a1f      	subs	r2, #31
 80027f0:	4313      	orrs	r3, r2
 80027f2:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80027f4:	e7c5      	b.n	8002782 <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027f6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	4313      	orrs	r3, r2
 80027fe:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002800:	0020      	movs	r0, r4
 8002802:	f7ff ff2d 	bl	8002660 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e7c3      	b.n	8002796 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800280e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	029b      	lsls	r3, r3, #10
 8002814:	4313      	orrs	r3, r2
 8002816:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002818:	0020      	movs	r0, r4
 800281a:	f000 fb43 	bl	8002ea4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	0052      	lsls	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e7ba      	b.n	800279e <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002828:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	02db      	lsls	r3, r3, #11
 800282e:	4313      	orrs	r3, r2
 8002830:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002832:	0020      	movs	r0, r4
 8002834:	f000 fb37 	bl	8002ea6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	2280      	movs	r2, #128	@ 0x80
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e7b1      	b.n	80027a6 <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002842:	0020      	movs	r0, r4
 8002844:	f000 fb31 	bl	8002eaa <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	2280      	movs	r2, #128	@ 0x80
 800284c:	0192      	lsls	r2, r2, #6
 800284e:	601a      	str	r2, [r3, #0]
}
 8002850:	e7c7      	b.n	80027e2 <HAL_ADC_IRQHandler+0xe2>
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	fffffefe 	.word	0xfffffefe

08002858 <HAL_ADC_ConfigChannel>:
{
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	b083      	sub	sp, #12
 800285c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800285e:	2300      	movs	r3, #0
 8002860:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002862:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8002864:	3354      	adds	r3, #84	@ 0x54
 8002866:	5cc3      	ldrb	r3, [r0, r3]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d100      	bne.n	800286e <HAL_ADC_ConfigChannel+0x16>
 800286c:	e11e      	b.n	8002aac <HAL_ADC_ConfigChannel+0x254>
 800286e:	2354      	movs	r3, #84	@ 0x54
 8002870:	2201      	movs	r2, #1
 8002872:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002874:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002876:	6883      	ldr	r3, [r0, #8]
 8002878:	3203      	adds	r2, #3
 800287a:	0017      	movs	r7, r2
 800287c:	401f      	ands	r7, r3
 800287e:	421a      	tst	r2, r3
 8002880:	d009      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002882:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002884:	321c      	adds	r2, #28
 8002886:	4313      	orrs	r3, r2
 8002888:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800288a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800288c:	2354      	movs	r3, #84	@ 0x54
 800288e:	2200      	movs	r2, #0
 8002890:	54e2      	strb	r2, [r4, r3]
}
 8002892:	b003      	add	sp, #12
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8002896:	684a      	ldr	r2, [r1, #4]
 8002898:	2a02      	cmp	r2, #2
 800289a:	d100      	bne.n	800289e <HAL_ADC_ConfigChannel+0x46>
 800289c:	e0c4      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800289e:	2304      	movs	r3, #4
 80028a0:	439d      	bics	r5, r3
 80028a2:	2680      	movs	r6, #128	@ 0x80
 80028a4:	0636      	lsls	r6, r6, #24
 80028a6:	42b5      	cmp	r5, r6
 80028a8:	d021      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80028aa:	231f      	movs	r3, #31
 80028ac:	401a      	ands	r2, r3
 80028ae:	3b10      	subs	r3, #16
 80028b0:	4093      	lsls	r3, r2
 80028b2:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 80028b4:	439e      	bics	r6, r3
 80028b6:	680b      	ldr	r3, [r1, #0]
 80028b8:	035d      	lsls	r5, r3, #13
 80028ba:	d148      	bne.n	800294e <HAL_ADC_ConfigChannel+0xf6>
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	0edf      	lsrs	r7, r3, #27
 80028c0:	003b      	movs	r3, r7
 80028c2:	4093      	lsls	r3, r2
 80028c4:	4333      	orrs	r3, r6
 80028c6:	6623      	str	r3, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80028c8:	684a      	ldr	r2, [r1, #4]
 80028ca:	0893      	lsrs	r3, r2, #2
 80028cc:	3301      	adds	r3, #1
 80028ce:	69e5      	ldr	r5, [r4, #28]
 80028d0:	42ab      	cmp	r3, r5
 80028d2:	d812      	bhi.n	80028fa <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 80028d4:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 80028d6:	251f      	movs	r5, #31
 80028d8:	4015      	ands	r5, r2
 80028da:	680b      	ldr	r3, [r1, #0]
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	220f      	movs	r2, #15
 80028e0:	4013      	ands	r3, r2
 80028e2:	40ab      	lsls	r3, r5
 80028e4:	40aa      	lsls	r2, r5
 80028e6:	4396      	bics	r6, r2
 80028e8:	4333      	orrs	r3, r6
 80028ea:	6283      	str	r3, [r0, #40]	@ 0x28
}
 80028ec:	e005      	b.n	80028fa <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80028ee:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80028f0:	680b      	ldr	r3, [r1, #0]
 80028f2:	035b      	lsls	r3, r3, #13
 80028f4:	0b5b      	lsrs	r3, r3, #13
 80028f6:	4313      	orrs	r3, r2
 80028f8:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028fa:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80028fc:	6968      	ldr	r0, [r5, #20]
 80028fe:	680a      	ldr	r2, [r1, #0]
 8002900:	0212      	lsls	r2, r2, #8
 8002902:	688b      	ldr	r3, [r1, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	4e6a      	ldr	r6, [pc, #424]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x258>)
 8002908:	4033      	ands	r3, r6
 800290a:	4390      	bics	r0, r2
 800290c:	4303      	orrs	r3, r0
 800290e:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002910:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002912:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002914:	2b00      	cmp	r3, #0
 8002916:	dab9      	bge.n	800288c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002918:	4a66      	ldr	r2, [pc, #408]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	25e0      	movs	r5, #224	@ 0xe0
 800291e:	046d      	lsls	r5, r5, #17
 8002920:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002922:	4965      	ldr	r1, [pc, #404]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x260>)
 8002924:	428b      	cmp	r3, r1
 8002926:	d050      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002928:	4864      	ldr	r0, [pc, #400]	@ (8002abc <HAL_ADC_ConfigChannel+0x264>)
 800292a:	4283      	cmp	r3, r0
 800292c:	d06e      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800292e:	4964      	ldr	r1, [pc, #400]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002930:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002932:	428b      	cmp	r3, r1
 8002934:	d1aa      	bne.n	800288c <HAL_ADC_ConfigChannel+0x34>
 8002936:	0252      	lsls	r2, r2, #9
 8002938:	d4a8      	bmi.n	800288c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800293a:	495e      	ldr	r1, [pc, #376]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 800293c:	680b      	ldr	r3, [r1, #0]
 800293e:	4a61      	ldr	r2, [pc, #388]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x26c>)
 8002940:	4013      	ands	r3, r2
 8002942:	432b      	orrs	r3, r5
 8002944:	2280      	movs	r2, #128	@ 0x80
 8002946:	03d2      	lsls	r2, r2, #15
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
}
 800294c:	e79e      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800294e:	07dd      	lsls	r5, r3, #31
 8002950:	d4b6      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002952:	2701      	movs	r7, #1
 8002954:	079d      	lsls	r5, r3, #30
 8002956:	d4b3      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002958:	3701      	adds	r7, #1
 800295a:	075d      	lsls	r5, r3, #29
 800295c:	d4b0      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 800295e:	3701      	adds	r7, #1
 8002960:	071d      	lsls	r5, r3, #28
 8002962:	d4ad      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002964:	3701      	adds	r7, #1
 8002966:	06dd      	lsls	r5, r3, #27
 8002968:	d4aa      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 800296a:	3701      	adds	r7, #1
 800296c:	069d      	lsls	r5, r3, #26
 800296e:	d4a7      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002970:	3701      	adds	r7, #1
 8002972:	065d      	lsls	r5, r3, #25
 8002974:	d4a4      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002976:	3701      	adds	r7, #1
 8002978:	061d      	lsls	r5, r3, #24
 800297a:	d4a1      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 800297c:	3701      	adds	r7, #1
 800297e:	05dd      	lsls	r5, r3, #23
 8002980:	d49e      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002982:	3701      	adds	r7, #1
 8002984:	059d      	lsls	r5, r3, #22
 8002986:	d49b      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002988:	3701      	adds	r7, #1
 800298a:	055d      	lsls	r5, r3, #21
 800298c:	d498      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 800298e:	3701      	adds	r7, #1
 8002990:	051d      	lsls	r5, r3, #20
 8002992:	d495      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 8002994:	3701      	adds	r7, #1
 8002996:	04dd      	lsls	r5, r3, #19
 8002998:	d492      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 800299a:	3701      	adds	r7, #1
 800299c:	049d      	lsls	r5, r3, #18
 800299e:	d48f      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 80029a0:	3701      	adds	r7, #1
 80029a2:	045d      	lsls	r5, r3, #17
 80029a4:	d48c      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 80029a6:	3701      	adds	r7, #1
 80029a8:	041d      	lsls	r5, r3, #16
 80029aa:	d489      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 80029ac:	3701      	adds	r7, #1
 80029ae:	03dd      	lsls	r5, r3, #15
 80029b0:	d486      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 80029b2:	3701      	adds	r7, #1
 80029b4:	039d      	lsls	r5, r3, #14
 80029b6:	d483      	bmi.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 80029b8:	2580      	movs	r5, #128	@ 0x80
 80029ba:	02ed      	lsls	r5, r5, #11
 80029bc:	001f      	movs	r7, r3
 80029be:	402f      	ands	r7, r5
 80029c0:	422b      	tst	r3, r5
 80029c2:	d100      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x16e>
 80029c4:	e77c      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
 80029c6:	2712      	movs	r7, #18
 80029c8:	e77a      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029ca:	0212      	lsls	r2, r2, #8
 80029cc:	d500      	bpl.n	80029d0 <HAL_ADC_ConfigChannel+0x178>
 80029ce:	e75d      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029d0:	4938      	ldr	r1, [pc, #224]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 80029d2:	680b      	ldr	r3, [r1, #0]
 80029d4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x26c>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	432b      	orrs	r3, r5
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e2:	4b39      	ldr	r3, [pc, #228]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x270>)
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	4939      	ldr	r1, [pc, #228]	@ (8002acc <HAL_ADC_ConfigChannel+0x274>)
 80029e8:	f7fd fb8a 	bl	8000100 <__udivsi3>
 80029ec:	3001      	adds	r0, #1
 80029ee:	0043      	lsls	r3, r0, #1
 80029f0:	181b      	adds	r3, r3, r0
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80029f6:	9b01      	ldr	r3, [sp, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d055      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 80029fc:	9b01      	ldr	r3, [sp, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002a02:	9b01      	ldr	r3, [sp, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e73f      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
 8002a0c:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a0e:	01d2      	lsls	r2, r2, #7
 8002a10:	d500      	bpl.n	8002a14 <HAL_ADC_ConfigChannel+0x1bc>
 8002a12:	e73b      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
 8002a14:	4927      	ldr	r1, [pc, #156]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8002a16:	680b      	ldr	r3, [r1, #0]
 8002a18:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x26c>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	432b      	orrs	r3, r5
 8002a1e:	2280      	movs	r2, #128	@ 0x80
 8002a20:	0452      	lsls	r2, r2, #17
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
}
 8002a26:	e731      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a28:	2304      	movs	r3, #4
 8002a2a:	439d      	bics	r5, r3
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	061b      	lsls	r3, r3, #24
 8002a30:	429d      	cmp	r5, r3
 8002a32:	d01c      	beq.n	8002a6e <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a34:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a36:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db00      	blt.n	8002a3e <HAL_ADC_ConfigChannel+0x1e6>
 8002a3c:	e726      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8002a40:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a42:	491d      	ldr	r1, [pc, #116]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x260>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d019      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a48:	491c      	ldr	r1, [pc, #112]	@ (8002abc <HAL_ADC_ConfigChannel+0x264>)
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	d021      	beq.n	8002a92 <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a4e:	491c      	ldr	r1, [pc, #112]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a50:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a52:	428b      	cmp	r3, r1
 8002a54:	d000      	beq.n	8002a58 <HAL_ADC_ConfigChannel+0x200>
 8002a56:	e719      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a58:	4816      	ldr	r0, [pc, #88]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8002a5a:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5c:	23c0      	movs	r3, #192	@ 0xc0
 8002a5e:	045b      	lsls	r3, r3, #17
 8002a60:	4013      	ands	r3, r2
 8002a62:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x26c>)
 8002a64:	400a      	ands	r2, r1
 8002a66:	4313      	orrs	r3, r2
 8002a68:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6a:	2000      	movs	r0, #0
}
 8002a6c:	e70e      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a6e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002a70:	680b      	ldr	r3, [r1, #0]
 8002a72:	035b      	lsls	r3, r3, #13
 8002a74:	0b5b      	lsrs	r3, r3, #13
 8002a76:	439a      	bics	r2, r3
 8002a78:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8002a7a:	e7db      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a7c:	480d      	ldr	r0, [pc, #52]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8002a7e:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a80:	23a0      	movs	r3, #160	@ 0xa0
 8002a82:	045b      	lsls	r3, r3, #17
 8002a84:	4013      	ands	r3, r2
 8002a86:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x26c>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8e:	2000      	movs	r0, #0
}
 8002a90:	e6fc      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a92:	4808      	ldr	r0, [pc, #32]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8002a94:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a96:	23c0      	movs	r3, #192	@ 0xc0
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x26c>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa4:	2000      	movs	r0, #0
}
 8002aa6:	e6f1      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e6ef      	b.n	800288c <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8002aac:	2002      	movs	r0, #2
 8002aae:	e6f0      	b.n	8002892 <HAL_ADC_ConfigChannel+0x3a>
 8002ab0:	07ffff00 	.word	0x07ffff00
 8002ab4:	40012708 	.word	0x40012708
 8002ab8:	b0001000 	.word	0xb0001000
 8002abc:	b8004000 	.word	0xb8004000
 8002ac0:	b4002000 	.word	0xb4002000
 8002ac4:	fe3fffff 	.word	0xfe3fffff
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	00030d40 	.word	0x00030d40

08002ad0 <ADC_Enable>:
{
 8002ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ada:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002adc:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002ade:	2000      	movs	r0, #0
 8002ae0:	07d2      	lsls	r2, r2, #31
 8002ae2:	d434      	bmi.n	8002b4e <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ae4:	6899      	ldr	r1, [r3, #8]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b98 <ADC_Enable+0xc8>)
 8002ae8:	4211      	tst	r1, r2
 8002aea:	d127      	bne.n	8002b3c <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	492b      	ldr	r1, [pc, #172]	@ (8002b9c <ADC_Enable+0xcc>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	2101      	movs	r1, #1
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002af8:	4b29      	ldr	r3, [pc, #164]	@ (8002ba0 <ADC_Enable+0xd0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	d50f      	bpl.n	8002b20 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b00:	4b28      	ldr	r3, [pc, #160]	@ (8002ba4 <ADC_Enable+0xd4>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	4928      	ldr	r1, [pc, #160]	@ (8002ba8 <ADC_Enable+0xd8>)
 8002b06:	f7fd fafb 	bl	8000100 <__udivsi3>
 8002b0a:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002b0c:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8002b0e:	9b01      	ldr	r3, [sp, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <ADC_Enable+0x50>
        wait_loop_index--;
 8002b14:	9b01      	ldr	r3, [sp, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002b1a:	9b01      	ldr	r3, [sp, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b20:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 8002b22:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d012      	beq.n	8002b4e <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 8002b28:	f7ff fc62 	bl	80023f0 <HAL_GetTick>
 8002b2c:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	07d2      	lsls	r2, r2, #31
 8002b34:	d42d      	bmi.n	8002b92 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b36:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8002b38:	4f18      	ldr	r7, [pc, #96]	@ (8002b9c <ADC_Enable+0xcc>)
 8002b3a:	e00e      	b.n	8002b5a <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b3e:	2210      	movs	r2, #16
 8002b40:	4313      	orrs	r3, r2
 8002b42:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002b46:	3a0f      	subs	r2, #15
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8002b4c:	3001      	adds	r0, #1
}
 8002b4e:	b003      	add	sp, #12
 8002b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4215      	tst	r5, r2
 8002b58:	d119      	bne.n	8002b8e <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4215      	tst	r5, r2
 8002b5e:	d103      	bne.n	8002b68 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	403a      	ands	r2, r7
 8002b64:	432a      	orrs	r2, r5
 8002b66:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b68:	f7ff fc42 	bl	80023f0 <HAL_GetTick>
 8002b6c:	1b80      	subs	r0, r0, r6
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d9ef      	bls.n	8002b52 <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	421d      	tst	r5, r3
 8002b78:	d1eb      	bne.n	8002b52 <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002b84:	3a0f      	subs	r2, #15
 8002b86:	4313      	orrs	r3, r2
 8002b88:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	e7df      	b.n	8002b4e <ADC_Enable+0x7e>
  return HAL_OK;
 8002b8e:	2000      	movs	r0, #0
 8002b90:	e7dd      	b.n	8002b4e <ADC_Enable+0x7e>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7db      	b.n	8002b4e <ADC_Enable+0x7e>
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	80000017 	.word	0x80000017
 8002b9c:	7fffffe8 	.word	0x7fffffe8
 8002ba0:	40012708 	.word	0x40012708
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	00030d40 	.word	0x00030d40

08002bac <HAL_ADC_Start_DMA>:
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	0004      	movs	r4, r0
 8002bb0:	000d      	movs	r5, r1
 8002bb2:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bb6:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 8002bb8:	2002      	movs	r0, #2
 8002bba:	075b      	lsls	r3, r3, #29
 8002bbc:	d41c      	bmi.n	8002bf8 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8002bbe:	2354      	movs	r3, #84	@ 0x54
 8002bc0:	5ce3      	ldrb	r3, [r4, r3]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d044      	beq.n	8002c50 <HAL_ADC_Start_DMA+0xa4>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	2154      	movs	r1, #84	@ 0x54
 8002bca:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002bcc:	68d1      	ldr	r1, [r2, #12]
 8002bce:	420b      	tst	r3, r1
 8002bd0:	d10d      	bne.n	8002bee <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd2:	6893      	ldr	r3, [r2, #8]
 8002bd4:	07db      	lsls	r3, r3, #31
 8002bd6:	d505      	bpl.n	8002be4 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 8002bd8:	6893      	ldr	r3, [r2, #8]
 8002bda:	491e      	ldr	r1, [pc, #120]	@ (8002c54 <HAL_ADC_Start_DMA+0xa8>)
 8002bdc:	400b      	ands	r3, r1
 8002bde:	2102      	movs	r1, #2
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	68d3      	ldr	r3, [r2, #12]
 8002be8:	2101      	movs	r1, #1
 8002bea:	430b      	orrs	r3, r1
 8002bec:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8002bee:	0020      	movs	r0, r4
 8002bf0:	f7ff ff6e 	bl	8002ad0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d000      	beq.n	8002bfa <HAL_ADC_Start_DMA+0x4e>
}
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8002bfa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002bfc:	4b16      	ldr	r3, [pc, #88]	@ (8002c58 <HAL_ADC_Start_DMA+0xac>)
 8002bfe:	401a      	ands	r2, r3
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4313      	orrs	r3, r2
 8002c06:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c0c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002c0e:	4913      	ldr	r1, [pc, #76]	@ (8002c5c <HAL_ADC_Start_DMA+0xb0>)
 8002c10:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c12:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002c14:	4912      	ldr	r1, [pc, #72]	@ (8002c60 <HAL_ADC_Start_DMA+0xb4>)
 8002c16:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c18:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002c1a:	4912      	ldr	r1, [pc, #72]	@ (8002c64 <HAL_ADC_Start_DMA+0xb8>)
 8002c1c:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c1e:	6822      	ldr	r2, [r4, #0]
 8002c20:	211c      	movs	r1, #28
 8002c22:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002c24:	2254      	movs	r2, #84	@ 0x54
 8002c26:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c28:	6822      	ldr	r2, [r4, #0]
 8002c2a:	6853      	ldr	r3, [r2, #4]
 8002c2c:	390c      	subs	r1, #12
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c32:	6821      	ldr	r1, [r4, #0]
 8002c34:	3140      	adds	r1, #64	@ 0x40
 8002c36:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002c38:	0033      	movs	r3, r6
 8002c3a:	002a      	movs	r2, r5
 8002c3c:	f000 fa92 	bl	8003164 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c40:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002c42:	6893      	ldr	r3, [r2, #8]
 8002c44:	4903      	ldr	r1, [pc, #12]	@ (8002c54 <HAL_ADC_Start_DMA+0xa8>)
 8002c46:	400b      	ands	r3, r1
 8002c48:	2104      	movs	r1, #4
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	6093      	str	r3, [r2, #8]
}
 8002c4e:	e7d3      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8002c50:	2002      	movs	r0, #2
 8002c52:	e7d1      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x4c>
 8002c54:	7fffffe8 	.word	0x7fffffe8
 8002c58:	fffff0fe 	.word	0xfffff0fe
 8002c5c:	08002681 	.word	0x08002681
 8002c60:	08002657 	.word	0x08002657
 8002c64:	08002665 	.word	0x08002665

08002c68 <ADC_Disable>:
{
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c6c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c6e:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c70:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002c72:	2000      	movs	r0, #0
 8002c74:	07d2      	lsls	r2, r2, #31
 8002c76:	d50f      	bpl.n	8002c98 <ADC_Disable+0x30>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c78:	0789      	lsls	r1, r1, #30
 8002c7a:	d40d      	bmi.n	8002c98 <ADC_Disable+0x30>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c7c:	6899      	ldr	r1, [r3, #8]
 8002c7e:	2205      	movs	r2, #5
 8002c80:	400a      	ands	r2, r1
 8002c82:	2a01      	cmp	r2, #1
 8002c84:	d009      	beq.n	8002c9a <ADC_Disable+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c88:	2210      	movs	r2, #16
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c90:	3a0f      	subs	r2, #15
 8002c92:	4313      	orrs	r3, r2
 8002c94:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8002c96:	2001      	movs	r0, #1
}
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4915      	ldr	r1, [pc, #84]	@ (8002cf4 <ADC_Disable+0x8c>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002cac:	f7ff fba0 	bl	80023f0 <HAL_GetTick>
 8002cb0:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cb6:	2501      	movs	r5, #1
  return HAL_OK;
 8002cb8:	2000      	movs	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cba:	07db      	lsls	r3, r3, #31
 8002cbc:	d404      	bmi.n	8002cc8 <ADC_Disable+0x60>
 8002cbe:	e7eb      	b.n	8002c98 <ADC_Disable+0x30>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	421d      	tst	r5, r3
 8002cc6:	d012      	beq.n	8002cee <ADC_Disable+0x86>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cc8:	f7ff fb92 	bl	80023f0 <HAL_GetTick>
 8002ccc:	1b80      	subs	r0, r0, r6
 8002cce:	2802      	cmp	r0, #2
 8002cd0:	d9f6      	bls.n	8002cc0 <ADC_Disable+0x58>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	421d      	tst	r5, r3
 8002cd8:	d0f2      	beq.n	8002cc0 <ADC_Disable+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002ce4:	3a0f      	subs	r2, #15
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8002cea:	2001      	movs	r0, #1
 8002cec:	e7d4      	b.n	8002c98 <ADC_Disable+0x30>
  return HAL_OK;
 8002cee:	2000      	movs	r0, #0
 8002cf0:	e7d2      	b.n	8002c98 <ADC_Disable+0x30>
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	7fffffe8 	.word	0x7fffffe8

08002cf8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	46de      	mov	lr, fp
 8002cfc:	4657      	mov	r7, sl
 8002cfe:	464e      	mov	r6, r9
 8002d00:	4645      	mov	r5, r8
 8002d02:	b5e0      	push	{r5, r6, r7, lr}
 8002d04:	b083      	sub	sp, #12
 8002d06:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9301      	str	r3, [sp, #4]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d0c:	3354      	adds	r3, #84	@ 0x54
 8002d0e:	5cc3      	ldrb	r3, [r0, r3]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d100      	bne.n	8002d16 <HAL_ADCEx_Calibration_Start+0x1e>
 8002d14:	e0b7      	b.n	8002e86 <HAL_ADCEx_Calibration_Start+0x18e>
 8002d16:	2501      	movs	r5, #1
 8002d18:	2354      	movs	r3, #84	@ 0x54
 8002d1a:	54c5      	strb	r5, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d1c:	f7ff ffa4 	bl	8002c68 <ADC_Disable>
 8002d20:	4683      	mov	fp, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d22:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	002a      	movs	r2, r5
 8002d28:	400a      	ands	r2, r1
 8002d2a:	420d      	tst	r5, r1
 8002d2c:	d00e      	beq.n	8002d4c <HAL_ADCEx_Calibration_Start+0x54>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d30:	2210      	movs	r2, #16
 8002d32:	4313      	orrs	r3, r2
 8002d34:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002d36:	2354      	movs	r3, #84	@ 0x54
 8002d38:	2200      	movs	r2, #0
 8002d3a:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8002d3c:	4658      	mov	r0, fp
 8002d3e:	b003      	add	sp, #12
 8002d40:	bcf0      	pop	{r4, r5, r6, r7}
 8002d42:	46bb      	mov	fp, r7
 8002d44:	46b2      	mov	sl, r6
 8002d46:	46a9      	mov	r9, r5
 8002d48:	46a0      	mov	r8, r4
 8002d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002d4e:	484f      	ldr	r0, [pc, #316]	@ (8002e8c <HAL_ADCEx_Calibration_Start+0x194>)
 8002d50:	4001      	ands	r1, r0
 8002d52:	3006      	adds	r0, #6
 8002d54:	30ff      	adds	r0, #255	@ 0xff
 8002d56:	4301      	orrs	r1, r0
 8002d58:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002d5a:	68d9      	ldr	r1, [r3, #12]
 8002d5c:	4689      	mov	r9, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002d5e:	68d9      	ldr	r1, [r3, #12]
 8002d60:	484b      	ldr	r0, [pc, #300]	@ (8002e90 <HAL_ADCEx_Calibration_Start+0x198>)
 8002d62:	4001      	ands	r1, r0
 8002d64:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8002d66:	0015      	movs	r5, r2
  MODIFY_REG(ADCx->CR,
 8002d68:	4b4a      	ldr	r3, [pc, #296]	@ (8002e94 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002d6a:	469c      	mov	ip, r3
 8002d6c:	2080      	movs	r0, #128	@ 0x80
 8002d6e:	0600      	lsls	r0, r0, #24
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d70:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002d72:	469a      	mov	sl, r3
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002d74:	23b4      	movs	r3, #180	@ 0xb4
 8002d76:	4698      	mov	r8, r3
 8002d78:	277f      	movs	r7, #127	@ 0x7f
      LL_ADC_StartCalibration(hadc->Instance);
 8002d7a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002d7c:	688b      	ldr	r3, [r1, #8]
 8002d7e:	4666      	mov	r6, ip
 8002d80:	4033      	ands	r3, r6
 8002d82:	4303      	orrs	r3, r0
 8002d84:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d86:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d88:	688b      	ldr	r3, [r1, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db5a      	blt.n	8002e44 <HAL_ADCEx_Calibration_Start+0x14c>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002d8e:	4643      	mov	r3, r8
 8002d90:	58cb      	ldr	r3, [r1, r3]
 8002d92:	403b      	ands	r3, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002d94:	18ed      	adds	r5, r5, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002d96:	3201      	adds	r2, #1
 8002d98:	2a08      	cmp	r2, #8
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_ADCEx_Calibration_Start+0x82>
    calibration_factor_accumulated /= calibration_index;
 8002d9c:	08ea      	lsrs	r2, r5, #3
  MODIFY_REG(ADCx->CR,
 8002d9e:	688b      	ldr	r3, [r1, #8]
 8002da0:	483c      	ldr	r0, [pc, #240]	@ (8002e94 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002da2:	4003      	ands	r3, r0
 8002da4:	2001      	movs	r0, #1
 8002da6:	4303      	orrs	r3, r0
 8002da8:	608b      	str	r3, [r1, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002daa:	6821      	ldr	r1, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002dac:	6908      	ldr	r0, [r1, #16]
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	05db      	lsls	r3, r3, #23
 8002db2:	4298      	cmp	r0, r3
 8002db4:	d219      	bcs.n	8002dea <HAL_ADCEx_Calibration_Start+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002db6:	4b39      	ldr	r3, [pc, #228]	@ (8002e9c <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	20f0      	movs	r0, #240	@ 0xf0
 8002dbc:	0380      	lsls	r0, r0, #14
 8002dbe:	4003      	ands	r3, r0
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002dc0:	20e0      	movs	r0, #224	@ 0xe0
 8002dc2:	0340      	lsls	r0, r0, #13
 8002dc4:	4283      	cmp	r3, r0
 8002dc6:	d310      	bcc.n	8002dea <HAL_ADCEx_Calibration_Start+0xf2>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002dc8:	0c9b      	lsrs	r3, r3, #18
 8002dca:	3b03      	subs	r3, #3
 8002dcc:	2001      	movs	r0, #1
 8002dce:	4098      	lsls	r0, r3
 8002dd0:	9000      	str	r0, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8002dd2:	9b00      	ldr	r3, [sp, #0]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8002dd8:	9b00      	ldr	r3, [sp, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_ADCEx_Calibration_Start+0xf2>
          delay_cpu_cycles--;
 8002dde:	9b00      	ldr	r3, [sp, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8002de4:	9b00      	ldr	r3, [sp, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f9      	bne.n	8002dde <HAL_ADCEx_Calibration_Start+0xe6>
  MODIFY_REG(ADCx->CALFACT,
 8002dea:	23b4      	movs	r3, #180	@ 0xb4
 8002dec:	58cd      	ldr	r5, [r1, r3]
 8002dee:	207f      	movs	r0, #127	@ 0x7f
 8002df0:	4385      	bics	r5, r0
 8002df2:	4315      	orrs	r5, r2
 8002df4:	50cd      	str	r5, [r1, r3]
    LL_ADC_Disable(hadc->Instance);
 8002df6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002df8:	6893      	ldr	r3, [r2, #8]
 8002dfa:	4926      	ldr	r1, [pc, #152]	@ (8002e94 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	2102      	movs	r1, #2
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002e04:	f7ff faf4 	bl	80023f0 <HAL_GetTick>
 8002e08:	0005      	movs	r5, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e0a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	07d2      	lsls	r2, r2, #31
 8002e10:	d50b      	bpl.n	8002e2a <HAL_ADCEx_Calibration_Start+0x132>
 8002e12:	2301      	movs	r3, #1
 8002e14:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e16:	f7ff faeb 	bl	80023f0 <HAL_GetTick>
 8002e1a:	1b40      	subs	r0, r0, r5
 8002e1c:	2802      	cmp	r0, #2
 8002e1e:	d823      	bhi.n	8002e68 <HAL_ADCEx_Calibration_Start+0x170>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4641      	mov	r1, r8
 8002e26:	4211      	tst	r1, r2
 8002e28:	d1f5      	bne.n	8002e16 <HAL_ADCEx_Calibration_Start+0x11e>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002e2a:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002e2c:	491c      	ldr	r1, [pc, #112]	@ (8002ea0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002e2e:	464f      	mov	r7, r9
 8002e30:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002e32:	4317      	orrs	r7, r2
 8002e34:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002e36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e38:	2203      	movs	r2, #3
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	3a02      	subs	r2, #2
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002e42:	e778      	b.n	8002d36 <HAL_ADCEx_Calibration_Start+0x3e>
        wait_loop_index++;
 8002e44:	9b01      	ldr	r3, [sp, #4]
 8002e46:	3301      	adds	r3, #1
 8002e48:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e4a:	9b01      	ldr	r3, [sp, #4]
 8002e4c:	4553      	cmp	r3, sl
 8002e4e:	d99b      	bls.n	8002d88 <HAL_ADCEx_Calibration_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State,
 8002e50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e52:	2212      	movs	r2, #18
 8002e54:	4393      	bics	r3, r2
 8002e56:	3a02      	subs	r2, #2
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8002e5c:	2354      	movs	r3, #84	@ 0x54
 8002e5e:	2200      	movs	r2, #0
 8002e60:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8002e62:	3b53      	subs	r3, #83	@ 0x53
 8002e64:	469b      	mov	fp, r3
 8002e66:	e769      	b.n	8002d3c <HAL_ADCEx_Calibration_Start+0x44>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	07db      	lsls	r3, r3, #31
 8002e6e:	d5d7      	bpl.n	8002e20 <HAL_ADCEx_Calibration_Start+0x128>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e72:	2210      	movs	r2, #16
 8002e74:	4313      	orrs	r3, r2
 8002e76:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e7a:	3a0f      	subs	r2, #15
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	469b      	mov	fp, r3
 8002e84:	e75a      	b.n	8002d3c <HAL_ADCEx_Calibration_Start+0x44>
  __HAL_LOCK(hadc);
 8002e86:	2302      	movs	r3, #2
 8002e88:	469b      	mov	fp, r3
 8002e8a:	e757      	b.n	8002d3c <HAL_ADCEx_Calibration_Start+0x44>
 8002e8c:	fffffefd 	.word	0xfffffefd
 8002e90:	ffff7ffc 	.word	0xffff7ffc
 8002e94:	7fffffe8 	.word	0x7fffffe8
 8002e98:	0002f1ff 	.word	0x0002f1ff
 8002e9c:	40012708 	.word	0x40012708
 8002ea0:	00008003 	.word	0x00008003

08002ea4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002eaa:	4770      	bx	lr

08002eac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eac:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	db14      	blt.n	8002edc <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb2:	0884      	lsrs	r4, r0, #2
 8002eb4:	00a4      	lsls	r4, r4, #2
 8002eb6:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <HAL_NVIC_SetPriority+0x5c>)
 8002eb8:	469c      	mov	ip, r3
 8002eba:	4464      	add	r4, ip
 8002ebc:	26c0      	movs	r6, #192	@ 0xc0
 8002ebe:	00b6      	lsls	r6, r6, #2
 8002ec0:	59a5      	ldr	r5, [r4, r6]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4002      	ands	r2, r0
 8002ec6:	00d2      	lsls	r2, r2, #3
 8002ec8:	23ff      	movs	r3, #255	@ 0xff
 8002eca:	0018      	movs	r0, r3
 8002ecc:	4090      	lsls	r0, r2
 8002ece:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ed0:	0189      	lsls	r1, r1, #6
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ed6:	432b      	orrs	r3, r5
 8002ed8:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002edc:	230f      	movs	r3, #15
 8002ede:	4003      	ands	r3, r0
 8002ee0:	3b08      	subs	r3, #8
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4a09      	ldr	r2, [pc, #36]	@ (8002f0c <HAL_NVIC_SetPriority+0x60>)
 8002ee8:	4694      	mov	ip, r2
 8002eea:	4463      	add	r3, ip
 8002eec:	69dc      	ldr	r4, [r3, #28]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	4010      	ands	r0, r2
 8002ef2:	00c0      	lsls	r0, r0, #3
 8002ef4:	32fc      	adds	r2, #252	@ 0xfc
 8002ef6:	0015      	movs	r5, r2
 8002ef8:	4085      	lsls	r5, r0
 8002efa:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002efc:	0189      	lsls	r1, r1, #6
 8002efe:	400a      	ands	r2, r1
 8002f00:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f02:	4322      	orrs	r2, r4
 8002f04:	61da      	str	r2, [r3, #28]
 8002f06:	e7e8      	b.n	8002eda <HAL_NVIC_SetPriority+0x2e>
 8002f08:	e000e100 	.word	0xe000e100
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f10:	2800      	cmp	r0, #0
 8002f12:	db05      	blt.n	8002f20 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f14:	221f      	movs	r2, #31
 8002f16:	4002      	ands	r2, r0
 8002f18:	2301      	movs	r3, #1
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	4a01      	ldr	r2, [pc, #4]	@ (8002f24 <HAL_NVIC_EnableIRQ+0x14>)
 8002f1e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f20:	4770      	bx	lr
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	db0a      	blt.n	8002f42 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2c:	221f      	movs	r2, #31
 8002f2e:	4002      	ands	r2, r0
 8002f30:	2301      	movs	r3, #1
 8002f32:	4093      	lsls	r3, r2
 8002f34:	4903      	ldr	r1, [pc, #12]	@ (8002f44 <HAL_NVIC_DisableIRQ+0x1c>)
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f3e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	3801      	subs	r0, #1
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	045b      	lsls	r3, r3, #17
 8002f4e:	4298      	cmp	r0, r3
 8002f50:	d20f      	bcs.n	8002f72 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f52:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <HAL_SYSTICK_Config+0x30>)
 8002f54:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f56:	4809      	ldr	r0, [pc, #36]	@ (8002f7c <HAL_SYSTICK_Config+0x34>)
 8002f58:	6a03      	ldr	r3, [r0, #32]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	21c0      	movs	r1, #192	@ 0xc0
 8002f60:	0609      	lsls	r1, r1, #24
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f66:	2300      	movs	r3, #0
 8002f68:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	3307      	adds	r3, #7
 8002f6c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002f70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8002f74:	e7fc      	b.n	8002f70 <HAL_SYSTICK_Config+0x28>
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	e000e010 	.word	0xe000e010
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f82:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8002f84:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8002f86:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f88:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8002f8a:	2c00      	cmp	r4, #0
 8002f8c:	d002      	beq.n	8002f94 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f8e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8002f90:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002f92:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002f94:	4e0b      	ldr	r6, [pc, #44]	@ (8002fc4 <DMA_SetConfig+0x44>)
 8002f96:	6877      	ldr	r7, [r6, #4]
 8002f98:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002f9a:	241c      	movs	r4, #28
 8002f9c:	4025      	ands	r5, r4
 8002f9e:	3c1b      	subs	r4, #27
 8002fa0:	40ac      	lsls	r4, r5
 8002fa2:	433c      	orrs	r4, r7
 8002fa4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fa6:	6804      	ldr	r4, [r0, #0]
 8002fa8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002faa:	6883      	ldr	r3, [r0, #8]
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d004      	beq.n	8002fba <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002fb4:	6803      	ldr	r3, [r0, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
  }
}
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	60d9      	str	r1, [r3, #12]
 8002fc2:	e7f9      	b.n	8002fb8 <DMA_SetConfig+0x38>
 8002fc4:	40020000 	.word	0x40020000

08002fc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fcc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	4a08      	ldr	r2, [pc, #32]	@ (8002ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8002fd2:	4694      	mov	ip, r2
 8002fd4:	4463      	add	r3, ip
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fda:	7800      	ldrb	r0, [r0, #0]
 8002fdc:	3808      	subs	r0, #8
 8002fde:	2114      	movs	r1, #20
 8002fe0:	f7fd f88e 	bl	8000100 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fe4:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002fe6:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fe8:	231f      	movs	r3, #31
 8002fea:	4018      	ands	r0, r3
 8002fec:	3b1e      	subs	r3, #30
 8002fee:	4083      	lsls	r3, r0
 8002ff0:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8002ff2:	bd10      	pop	{r4, pc}
 8002ff4:	10008200 	.word	0x10008200
 8002ff8:	40020880 	.word	0x40020880

08002ffc <HAL_DMA_Init>:
{
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8003000:	d055      	beq.n	80030ae <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003002:	6805      	ldr	r5, [r0, #0]
 8003004:	4b2b      	ldr	r3, [pc, #172]	@ (80030b4 <HAL_DMA_Init+0xb8>)
 8003006:	18e8      	adds	r0, r5, r3
 8003008:	2114      	movs	r1, #20
 800300a:	f7fd f879 	bl	8000100 <__udivsi3>
 800300e:	0080      	lsls	r0, r0, #2
 8003010:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003012:	2325      	movs	r3, #37	@ 0x25
 8003014:	2202      	movs	r2, #2
 8003016:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003018:	682b      	ldr	r3, [r5, #0]
 800301a:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <HAL_DMA_Init+0xbc>)
 800301c:	4013      	ands	r3, r2
 800301e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	6811      	ldr	r1, [r2, #0]
 8003024:	68a3      	ldr	r3, [r4, #8]
 8003026:	68e0      	ldr	r0, [r4, #12]
 8003028:	4303      	orrs	r3, r0
 800302a:	6920      	ldr	r0, [r4, #16]
 800302c:	4303      	orrs	r3, r0
 800302e:	6960      	ldr	r0, [r4, #20]
 8003030:	4303      	orrs	r3, r0
 8003032:	69a0      	ldr	r0, [r4, #24]
 8003034:	4303      	orrs	r3, r0
 8003036:	69e0      	ldr	r0, [r4, #28]
 8003038:	4303      	orrs	r3, r0
 800303a:	6a20      	ldr	r0, [r4, #32]
 800303c:	4303      	orrs	r3, r0
 800303e:	430b      	orrs	r3, r1
 8003040:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003042:	0020      	movs	r0, r4
 8003044:	f7ff ffc0 	bl	8002fc8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	01db      	lsls	r3, r3, #7
 800304c:	68a2      	ldr	r2, [r4, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d018      	beq.n	8003084 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003052:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003054:	6863      	ldr	r3, [r4, #4]
 8003056:	213f      	movs	r1, #63	@ 0x3f
 8003058:	400b      	ands	r3, r1
 800305a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800305c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800305e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003060:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003062:	6863      	ldr	r3, [r4, #4]
 8003064:	1e5a      	subs	r2, r3, #1
 8003066:	2a03      	cmp	r2, #3
 8003068:	d90f      	bls.n	800308a <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800306e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003070:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003072:	2300      	movs	r3, #0
 8003074:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003076:	2225      	movs	r2, #37	@ 0x25
 8003078:	2101      	movs	r1, #1
 800307a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800307c:	3a01      	subs	r2, #1
 800307e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003080:	2000      	movs	r0, #0
}
 8003082:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003084:	2300      	movs	r3, #0
 8003086:	6063      	str	r3, [r4, #4]
 8003088:	e7e3      	b.n	8003052 <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800308a:	223f      	movs	r2, #63	@ 0x3f
 800308c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800308e:	4a0b      	ldr	r2, [pc, #44]	@ (80030bc <HAL_DMA_Init+0xc0>)
 8003090:	189a      	adds	r2, r3, r2
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	6522      	str	r2, [r4, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003096:	490a      	ldr	r1, [pc, #40]	@ (80030c0 <HAL_DMA_Init+0xc4>)
 8003098:	6561      	str	r1, [r4, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800309a:	3b01      	subs	r3, #1
 800309c:	2101      	movs	r1, #1
 800309e:	4099      	lsls	r1, r3
 80030a0:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030a8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	e7e1      	b.n	8003072 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
 80030b0:	e7e7      	b.n	8003082 <HAL_DMA_Init+0x86>
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	bffdfff8 	.word	0xbffdfff8
 80030b8:	ffff800f 	.word	0xffff800f
 80030bc:	1000823f 	.word	0x1000823f
 80030c0:	40020940 	.word	0x40020940

080030c4 <HAL_DMA_DeInit>:
{
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 80030c8:	d042      	beq.n	8003150 <HAL_DMA_DeInit+0x8c>
  __HAL_DMA_DISABLE(hdma);
 80030ca:	6802      	ldr	r2, [r0, #0]
 80030cc:	6813      	ldr	r3, [r2, #0]
 80030ce:	2501      	movs	r5, #1
 80030d0:	43ab      	bics	r3, r5
 80030d2:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030d4:	6807      	ldr	r7, [r0, #0]
 80030d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003154 <HAL_DMA_DeInit+0x90>)
 80030d8:	18f8      	adds	r0, r7, r3
 80030da:	2114      	movs	r1, #20
 80030dc:	f7fd f810 	bl	8000100 <__udivsi3>
 80030e0:	0080      	lsls	r0, r0, #2
 80030e2:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 80030e4:	2600      	movs	r6, #0
 80030e6:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80030e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003158 <HAL_DMA_DeInit+0x94>)
 80030ea:	6851      	ldr	r1, [r2, #4]
 80030ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030ee:	201c      	movs	r0, #28
 80030f0:	4003      	ands	r3, r0
 80030f2:	409d      	lsls	r5, r3
 80030f4:	430d      	orrs	r5, r1
 80030f6:	6055      	str	r5, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030f8:	0020      	movs	r0, r4
 80030fa:	f7ff ff65 	bl	8002fc8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80030fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003100:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003102:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003104:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003106:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	2a03      	cmp	r2, #3
 800310e:	d90e      	bls.n	800312e <HAL_DMA_DeInit+0x6a>
  hdma->DMAmuxRequestGen = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003114:	6563      	str	r3, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003116:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->XferCpltCallback = NULL;
 8003118:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800311a:	6323      	str	r3, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800311c:	6363      	str	r3, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800311e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003120:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003122:	2225      	movs	r2, #37	@ 0x25
 8003124:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8003126:	3a01      	subs	r2, #1
 8003128:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800312a:	2000      	movs	r0, #0
}
 800312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800312e:	223f      	movs	r2, #63	@ 0x3f
 8003130:	4013      	ands	r3, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003132:	4a0a      	ldr	r2, [pc, #40]	@ (800315c <HAL_DMA_DeInit+0x98>)
 8003134:	189a      	adds	r2, r3, r2
 8003136:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003138:	4909      	ldr	r1, [pc, #36]	@ (8003160 <HAL_DMA_DeInit+0x9c>)
 800313a:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800313c:	3b01      	subs	r3, #1
 800313e:	2101      	movs	r1, #1
 8003140:	4099      	lsls	r1, r3
 8003142:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003148:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800314a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e7df      	b.n	8003110 <HAL_DMA_DeInit+0x4c>
    return HAL_ERROR;
 8003150:	2001      	movs	r0, #1
 8003152:	e7eb      	b.n	800312c <HAL_DMA_DeInit+0x68>
 8003154:	bffdfff8 	.word	0xbffdfff8
 8003158:	40020000 	.word	0x40020000
 800315c:	1000823f 	.word	0x1000823f
 8003160:	40020940 	.word	0x40020940

08003164 <HAL_DMA_Start_IT>:
{
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003168:	2024      	movs	r0, #36	@ 0x24
 800316a:	5c20      	ldrb	r0, [r4, r0]
 800316c:	2801      	cmp	r0, #1
 800316e:	d045      	beq.n	80031fc <HAL_DMA_Start_IT+0x98>
 8003170:	2024      	movs	r0, #36	@ 0x24
 8003172:	2501      	movs	r5, #1
 8003174:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8003176:	3001      	adds	r0, #1
 8003178:	5c20      	ldrb	r0, [r4, r0]
 800317a:	2801      	cmp	r0, #1
 800317c:	d006      	beq.n	800318c <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003182:	3b5c      	subs	r3, #92	@ 0x5c
 8003184:	2200      	movs	r2, #0
 8003186:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8003188:	2001      	movs	r0, #1
}
 800318a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800318c:	3024      	adds	r0, #36	@ 0x24
 800318e:	3501      	adds	r5, #1
 8003190:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003192:	2000      	movs	r0, #0
 8003194:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003196:	6825      	ldr	r5, [r4, #0]
 8003198:	6828      	ldr	r0, [r5, #0]
 800319a:	2601      	movs	r6, #1
 800319c:	43b0      	bics	r0, r6
 800319e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a0:	0020      	movs	r0, r4
 80031a2:	f7ff feed 	bl	8002f80 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80031a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01c      	beq.n	80031e6 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	210e      	movs	r1, #14
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031b6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	03db      	lsls	r3, r3, #15
 80031bc:	d504      	bpl.n	80031c8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031be:	6811      	ldr	r1, [r2, #0]
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80031c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	2280      	movs	r2, #128	@ 0x80
 80031d2:	0052      	lsls	r2, r2, #1
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	6813      	ldr	r3, [r2, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	430b      	orrs	r3, r1
 80031e0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e2:	2000      	movs	r0, #0
 80031e4:	e7d1      	b.n	800318a <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	6813      	ldr	r3, [r2, #0]
 80031ea:	2104      	movs	r1, #4
 80031ec:	438b      	bics	r3, r1
 80031ee:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	3106      	adds	r1, #6
 80031f6:	430b      	orrs	r3, r1
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e7dc      	b.n	80031b6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80031fc:	2002      	movs	r0, #2
 80031fe:	e7c4      	b.n	800318a <HAL_DMA_Start_IT+0x26>

08003200 <HAL_DMA_Abort>:
{
 8003200:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8003202:	2800      	cmp	r0, #0
 8003204:	d036      	beq.n	8003274 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003206:	2325      	movs	r3, #37	@ 0x25
 8003208:	5cc3      	ldrb	r3, [r0, r3]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d006      	beq.n	800321c <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800320e:	2304      	movs	r3, #4
 8003210:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003212:	3320      	adds	r3, #32
 8003214:	2200      	movs	r2, #0
 8003216:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003218:	2001      	movs	r0, #1
}
 800321a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321c:	6802      	ldr	r2, [r0, #0]
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	210e      	movs	r1, #14
 8003222:	438b      	bics	r3, r1
 8003224:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003226:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	4913      	ldr	r1, [pc, #76]	@ (8003278 <HAL_DMA_Abort+0x78>)
 800322c:	400b      	ands	r3, r1
 800322e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003230:	6801      	ldr	r1, [r0, #0]
 8003232:	680a      	ldr	r2, [r1, #0]
 8003234:	2301      	movs	r3, #1
 8003236:	439a      	bics	r2, r3
 8003238:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800323a:	4910      	ldr	r1, [pc, #64]	@ (800327c <HAL_DMA_Abort+0x7c>)
 800323c:	684c      	ldr	r4, [r1, #4]
 800323e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003240:	251c      	movs	r5, #28
 8003242:	402a      	ands	r2, r5
 8003244:	4093      	lsls	r3, r2
 8003246:	4323      	orrs	r3, r4
 8003248:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800324a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800324c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800324e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003250:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4907      	ldr	r1, [pc, #28]	@ (8003278 <HAL_DMA_Abort+0x78>)
 800325a:	400a      	ands	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003260:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003262:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003264:	2325      	movs	r3, #37	@ 0x25
 8003266:	2201      	movs	r2, #1
 8003268:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800326a:	3b01      	subs	r3, #1
 800326c:	2200      	movs	r2, #0
 800326e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003270:	2000      	movs	r0, #0
 8003272:	e7d2      	b.n	800321a <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8003274:	2001      	movs	r0, #1
 8003276:	e7d0      	b.n	800321a <HAL_DMA_Abort+0x1a>
 8003278:	fffffeff 	.word	0xfffffeff
 800327c:	40020000 	.word	0x40020000

08003280 <HAL_DMA_Abort_IT>:
{
 8003280:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003282:	2325      	movs	r3, #37	@ 0x25
 8003284:	5cc3      	ldrb	r3, [r0, r3]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d003      	beq.n	8003292 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328a:	2304      	movs	r3, #4
 800328c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800328e:	2001      	movs	r0, #1
}
 8003290:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003292:	6802      	ldr	r2, [r0, #0]
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	210e      	movs	r1, #14
 8003298:	438b      	bics	r3, r1
 800329a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800329c:	6801      	ldr	r1, [r0, #0]
 800329e:	680a      	ldr	r2, [r1, #0]
 80032a0:	2301      	movs	r3, #1
 80032a2:	439a      	bics	r2, r3
 80032a4:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032a6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80032a8:	680a      	ldr	r2, [r1, #0]
 80032aa:	4c13      	ldr	r4, [pc, #76]	@ (80032f8 <HAL_DMA_Abort_IT+0x78>)
 80032ac:	4022      	ands	r2, r4
 80032ae:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80032b0:	4912      	ldr	r1, [pc, #72]	@ (80032fc <HAL_DMA_Abort_IT+0x7c>)
 80032b2:	684c      	ldr	r4, [r1, #4]
 80032b4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80032b6:	251c      	movs	r5, #28
 80032b8:	402a      	ands	r2, r5
 80032ba:	4093      	lsls	r3, r2
 80032bc:	4323      	orrs	r3, r4
 80032be:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80032c2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80032c4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80032c6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	490a      	ldr	r1, [pc, #40]	@ (80032f8 <HAL_DMA_Abort_IT+0x78>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80032d6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80032d8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80032da:	2325      	movs	r3, #37	@ 0x25
 80032dc:	2201      	movs	r2, #1
 80032de:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80032e0:	3b01      	subs	r3, #1
 80032e2:	2200      	movs	r2, #0
 80032e4:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80032e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 80032ec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2000      	movs	r0, #0
 80032f0:	e7ce      	b.n	8003290 <HAL_DMA_Abort_IT+0x10>
 80032f2:	2000      	movs	r0, #0
 80032f4:	e7cc      	b.n	8003290 <HAL_DMA_Abort_IT+0x10>
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	fffffeff 	.word	0xfffffeff
 80032fc:	40020000 	.word	0x40020000

08003300 <HAL_DMA_IRQHandler>:
{
 8003300:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8003302:	4b31      	ldr	r3, [pc, #196]	@ (80033c8 <HAL_DMA_IRQHandler+0xc8>)
 8003304:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003306:	6804      	ldr	r4, [r0, #0]
 8003308:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800330a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800330c:	221c      	movs	r2, #28
 800330e:	4013      	ands	r3, r2
 8003310:	3a18      	subs	r2, #24
 8003312:	409a      	lsls	r2, r3
 8003314:	4211      	tst	r1, r2
 8003316:	d016      	beq.n	8003346 <HAL_DMA_IRQHandler+0x46>
 8003318:	076a      	lsls	r2, r5, #29
 800331a:	d514      	bpl.n	8003346 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	069b      	lsls	r3, r3, #26
 8003320:	d403      	bmi.n	800332a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	2204      	movs	r2, #4
 8003326:	4393      	bics	r3, r2
 8003328:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800332a:	4927      	ldr	r1, [pc, #156]	@ (80033c8 <HAL_DMA_IRQHandler+0xc8>)
 800332c:	684c      	ldr	r4, [r1, #4]
 800332e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003330:	231c      	movs	r3, #28
 8003332:	401a      	ands	r2, r3
 8003334:	3b18      	subs	r3, #24
 8003336:	4093      	lsls	r3, r2
 8003338:	4323      	orrs	r3, r4
 800333a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800333c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800333e:	2b00      	cmp	r3, #0
 8003340:	d000      	beq.n	8003344 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8003342:	4798      	blx	r3
}
 8003344:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003346:	2202      	movs	r2, #2
 8003348:	409a      	lsls	r2, r3
 800334a:	4211      	tst	r1, r2
 800334c:	d01c      	beq.n	8003388 <HAL_DMA_IRQHandler+0x88>
 800334e:	07aa      	lsls	r2, r5, #30
 8003350:	d51a      	bpl.n	8003388 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	069b      	lsls	r3, r3, #26
 8003356:	d406      	bmi.n	8003366 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	220a      	movs	r2, #10
 800335c:	4393      	bics	r3, r2
 800335e:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003360:	2325      	movs	r3, #37	@ 0x25
 8003362:	3a09      	subs	r2, #9
 8003364:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003366:	4918      	ldr	r1, [pc, #96]	@ (80033c8 <HAL_DMA_IRQHandler+0xc8>)
 8003368:	684c      	ldr	r4, [r1, #4]
 800336a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800336c:	231c      	movs	r3, #28
 800336e:	401a      	ands	r2, r3
 8003370:	3b1a      	subs	r3, #26
 8003372:	4093      	lsls	r3, r2
 8003374:	4323      	orrs	r3, r4
 8003376:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8003378:	2324      	movs	r3, #36	@ 0x24
 800337a:	2200      	movs	r2, #0
 800337c:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800337e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0df      	beq.n	8003344 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8003384:	4798      	blx	r3
 8003386:	e7dd      	b.n	8003344 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003388:	2208      	movs	r2, #8
 800338a:	409a      	lsls	r2, r3
 800338c:	4211      	tst	r1, r2
 800338e:	d0d9      	beq.n	8003344 <HAL_DMA_IRQHandler+0x44>
 8003390:	072d      	lsls	r5, r5, #28
 8003392:	d5d7      	bpl.n	8003344 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	220e      	movs	r2, #14
 8003398:	4393      	bics	r3, r2
 800339a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800339c:	490a      	ldr	r1, [pc, #40]	@ (80033c8 <HAL_DMA_IRQHandler+0xc8>)
 800339e:	684c      	ldr	r4, [r1, #4]
 80033a0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80033a2:	231c      	movs	r3, #28
 80033a4:	401a      	ands	r2, r3
 80033a6:	3b1b      	subs	r3, #27
 80033a8:	001d      	movs	r5, r3
 80033aa:	4095      	lsls	r5, r2
 80033ac:	002a      	movs	r2, r5
 80033ae:	4322      	orrs	r2, r4
 80033b0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033b2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80033b4:	2225      	movs	r2, #37	@ 0x25
 80033b6:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80033b8:	3323      	adds	r3, #35	@ 0x23
 80033ba:	2200      	movs	r2, #0
 80033bc:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80033be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0bf      	beq.n	8003344 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80033c4:	4798      	blx	r3
  return;
 80033c6:	e7bd      	b.n	8003344 <HAL_DMA_IRQHandler+0x44>
 80033c8:	40020000 	.word	0x40020000

080033cc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80033cc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
}
 80033ce:	4770      	bx	lr

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	46de      	mov	lr, fp
 80033d4:	4657      	mov	r7, sl
 80033d6:	464e      	mov	r6, r9
 80033d8:	4645      	mov	r5, r8
 80033da:	b5e0      	push	{r5, r6, r7, lr}
 80033dc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033de:	680f      	ldr	r7, [r1, #0]
 80033e0:	2f00      	cmp	r7, #0
 80033e2:	d100      	bne.n	80033e6 <HAL_GPIO_Init+0x16>
 80033e4:	e0d1      	b.n	800358a <HAL_GPIO_Init+0x1ba>
 80033e6:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80033e8:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033ea:	2401      	movs	r4, #1
 80033ec:	46a0      	mov	r8, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ee:	3402      	adds	r4, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033f0:	4d69      	ldr	r5, [pc, #420]	@ (8003598 <HAL_GPIO_Init+0x1c8>)
 80033f2:	46ab      	mov	fp, r5
 80033f4:	e052      	b.n	800349c <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR;
 80033f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033f8:	0025      	movs	r5, r4
 80033fa:	4095      	lsls	r5, r2
 80033fc:	43af      	bics	r7, r5
 80033fe:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003400:	68cf      	ldr	r7, [r1, #12]
 8003402:	4097      	lsls	r7, r2
 8003404:	464d      	mov	r5, r9
 8003406:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8003408:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800340a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800340c:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340e:	684e      	ldr	r6, [r1, #4]
 8003410:	0936      	lsrs	r6, r6, #4
 8003412:	4645      	mov	r5, r8
 8003414:	402e      	ands	r6, r5
 8003416:	409e      	lsls	r6, r3
 8003418:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800341a:	6046      	str	r6, [r0, #4]
 800341c:	e04a      	b.n	80034b4 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800341e:	2600      	movs	r6, #0
 8003420:	4655      	mov	r5, sl
 8003422:	40ae      	lsls	r6, r5
 8003424:	464d      	mov	r5, r9
 8003426:	432e      	orrs	r6, r5
        EXTI->EXTICR[position >> 2u] = temp;
 8003428:	663e      	str	r6, [r7, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800342a:	465d      	mov	r5, fp
 800342c:	682d      	ldr	r5, [r5, #0]
 800342e:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
 8003430:	4665      	mov	r5, ip
 8003432:	43ed      	mvns	r5, r5
 8003434:	9501      	str	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003436:	684d      	ldr	r5, [r1, #4]
 8003438:	2680      	movs	r6, #128	@ 0x80
 800343a:	0376      	lsls	r6, r6, #13
 800343c:	4235      	tst	r5, r6
 800343e:	d000      	beq.n	8003442 <HAL_GPIO_Init+0x72>
 8003440:	e094      	b.n	800356c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8003442:	4656      	mov	r6, sl
 8003444:	9d01      	ldr	r5, [sp, #4]
 8003446:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003448:	465d      	mov	r5, fp
 800344a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800344c:	686d      	ldr	r5, [r5, #4]
 800344e:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003450:	684d      	ldr	r5, [r1, #4]
 8003452:	2680      	movs	r6, #128	@ 0x80
 8003454:	03b6      	lsls	r6, r6, #14
 8003456:	4235      	tst	r5, r6
 8003458:	d000      	beq.n	800345c <HAL_GPIO_Init+0x8c>
 800345a:	e08b      	b.n	8003574 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 800345c:	4656      	mov	r6, sl
 800345e:	9d01      	ldr	r5, [sp, #4]
 8003460:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003462:	465d      	mov	r5, fp
 8003464:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003466:	2684      	movs	r6, #132	@ 0x84
 8003468:	59ae      	ldr	r6, [r5, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800346a:	684d      	ldr	r5, [r1, #4]
 800346c:	03ad      	lsls	r5, r5, #14
 800346e:	d500      	bpl.n	8003472 <HAL_GPIO_Init+0xa2>
 8003470:	e084      	b.n	800357c <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8003472:	9d01      	ldr	r5, [sp, #4]
 8003474:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003476:	2584      	movs	r5, #132	@ 0x84
 8003478:	465f      	mov	r7, fp
 800347a:	517e      	str	r6, [r7, r5]

        temp = EXTI->IMR1;
 800347c:	2680      	movs	r6, #128	@ 0x80
 800347e:	59be      	ldr	r6, [r7, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003480:	684d      	ldr	r5, [r1, #4]
 8003482:	03ed      	lsls	r5, r5, #15
 8003484:	d47d      	bmi.n	8003582 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8003486:	9d01      	ldr	r5, [sp, #4]
 8003488:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800348a:	2780      	movs	r7, #128	@ 0x80
 800348c:	465d      	mov	r5, fp
 800348e:	51ee      	str	r6, [r5, r7]
      }
    }

    position++;
 8003490:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003492:	680f      	ldr	r7, [r1, #0]
 8003494:	3202      	adds	r2, #2
 8003496:	003e      	movs	r6, r7
 8003498:	40de      	lsrs	r6, r3
 800349a:	d076      	beq.n	800358a <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800349c:	4646      	mov	r6, r8
 800349e:	409e      	lsls	r6, r3
 80034a0:	003d      	movs	r5, r7
 80034a2:	4035      	ands	r5, r6
 80034a4:	46ac      	mov	ip, r5
    if (iocurrent != 0x00u)
 80034a6:	4237      	tst	r7, r6
 80034a8:	d0f2      	beq.n	8003490 <HAL_GPIO_Init+0xc0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034aa:	684f      	ldr	r7, [r1, #4]
 80034ac:	4027      	ands	r7, r4
 80034ae:	3f01      	subs	r7, #1
 80034b0:	2f01      	cmp	r7, #1
 80034b2:	d9a0      	bls.n	80033f6 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b4:	684e      	ldr	r6, [r1, #4]
 80034b6:	4026      	ands	r6, r4
 80034b8:	2e03      	cmp	r6, #3
 80034ba:	d022      	beq.n	8003502 <HAL_GPIO_Init+0x132>
        temp = GPIOx->PUPDR;
 80034bc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034be:	0026      	movs	r6, r4
 80034c0:	4096      	lsls	r6, r2
 80034c2:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034c4:	688e      	ldr	r6, [r1, #8]
 80034c6:	4096      	lsls	r6, r2
 80034c8:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80034ca:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034cc:	684e      	ldr	r6, [r1, #4]
 80034ce:	4026      	ands	r6, r4
 80034d0:	2e02      	cmp	r6, #2
 80034d2:	d116      	bne.n	8003502 <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
 80034d4:	08de      	lsrs	r6, r3, #3
 80034d6:	00b6      	lsls	r6, r6, #2
 80034d8:	1985      	adds	r5, r0, r6
 80034da:	9501      	str	r5, [sp, #4]
 80034dc:	6a2d      	ldr	r5, [r5, #32]
 80034de:	46aa      	mov	sl, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e0:	2707      	movs	r7, #7
 80034e2:	401f      	ands	r7, r3
 80034e4:	00bf      	lsls	r7, r7, #2
 80034e6:	250f      	movs	r5, #15
 80034e8:	40bd      	lsls	r5, r7
 80034ea:	46a9      	mov	r9, r5
 80034ec:	4655      	mov	r5, sl
 80034ee:	464e      	mov	r6, r9
 80034f0:	43b5      	bics	r5, r6
 80034f2:	46aa      	mov	sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034f4:	690d      	ldr	r5, [r1, #16]
 80034f6:	40bd      	lsls	r5, r7
 80034f8:	002f      	movs	r7, r5
 80034fa:	4655      	mov	r5, sl
 80034fc:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80034fe:	9d01      	ldr	r5, [sp, #4]
 8003500:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 8003502:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003504:	0026      	movs	r6, r4
 8003506:	4096      	lsls	r6, r2
 8003508:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350a:	684e      	ldr	r6, [r1, #4]
 800350c:	4026      	ands	r6, r4
 800350e:	4096      	lsls	r6, r2
 8003510:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003512:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003514:	684e      	ldr	r6, [r1, #4]
 8003516:	25c0      	movs	r5, #192	@ 0xc0
 8003518:	02ad      	lsls	r5, r5, #10
 800351a:	422e      	tst	r6, r5
 800351c:	d0b8      	beq.n	8003490 <HAL_GPIO_Init+0xc0>
        temp = EXTI->EXTICR[position >> 2u];
 800351e:	089f      	lsrs	r7, r3, #2
 8003520:	00bf      	lsls	r7, r7, #2
 8003522:	4d1d      	ldr	r5, [pc, #116]	@ (8003598 <HAL_GPIO_Init+0x1c8>)
 8003524:	46a9      	mov	r9, r5
 8003526:	444f      	add	r7, r9
 8003528:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 800352a:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800352c:	0025      	movs	r5, r4
 800352e:	401d      	ands	r5, r3
 8003530:	00ed      	lsls	r5, r5, #3
 8003532:	46aa      	mov	sl, r5
 8003534:	250f      	movs	r5, #15
 8003536:	4656      	mov	r6, sl
 8003538:	40b5      	lsls	r5, r6
 800353a:	9e01      	ldr	r6, [sp, #4]
 800353c:	43ae      	bics	r6, r5
 800353e:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003540:	25a0      	movs	r5, #160	@ 0xa0
 8003542:	05ed      	lsls	r5, r5, #23
 8003544:	42a8      	cmp	r0, r5
 8003546:	d100      	bne.n	800354a <HAL_GPIO_Init+0x17a>
 8003548:	e769      	b.n	800341e <HAL_GPIO_Init+0x4e>
 800354a:	4e14      	ldr	r6, [pc, #80]	@ (800359c <HAL_GPIO_Init+0x1cc>)
 800354c:	42b0      	cmp	r0, r6
 800354e:	d009      	beq.n	8003564 <HAL_GPIO_Init+0x194>
 8003550:	4e13      	ldr	r6, [pc, #76]	@ (80035a0 <HAL_GPIO_Init+0x1d0>)
 8003552:	42b0      	cmp	r0, r6
 8003554:	d008      	beq.n	8003568 <HAL_GPIO_Init+0x198>
 8003556:	4d13      	ldr	r5, [pc, #76]	@ (80035a4 <HAL_GPIO_Init+0x1d4>)
 8003558:	1946      	adds	r6, r0, r5
 800355a:	1e75      	subs	r5, r6, #1
 800355c:	41ae      	sbcs	r6, r5
 800355e:	0076      	lsls	r6, r6, #1
 8003560:	3603      	adds	r6, #3
 8003562:	e75d      	b.n	8003420 <HAL_GPIO_Init+0x50>
 8003564:	2601      	movs	r6, #1
 8003566:	e75b      	b.n	8003420 <HAL_GPIO_Init+0x50>
 8003568:	2602      	movs	r6, #2
 800356a:	e759      	b.n	8003420 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 800356c:	4665      	mov	r5, ip
 800356e:	4656      	mov	r6, sl
 8003570:	432e      	orrs	r6, r5
 8003572:	e769      	b.n	8003448 <HAL_GPIO_Init+0x78>
          temp |= iocurrent;
 8003574:	4665      	mov	r5, ip
 8003576:	4656      	mov	r6, sl
 8003578:	432e      	orrs	r6, r5
 800357a:	e772      	b.n	8003462 <HAL_GPIO_Init+0x92>
          temp |= iocurrent;
 800357c:	4665      	mov	r5, ip
 800357e:	432e      	orrs	r6, r5
 8003580:	e779      	b.n	8003476 <HAL_GPIO_Init+0xa6>
          temp |= iocurrent;
 8003582:	4665      	mov	r5, ip
 8003584:	4335      	orrs	r5, r6
 8003586:	002e      	movs	r6, r5
 8003588:	e77f      	b.n	800348a <HAL_GPIO_Init+0xba>
  }
}
 800358a:	b003      	add	sp, #12
 800358c:	bcf0      	pop	{r4, r5, r6, r7}
 800358e:	46bb      	mov	fp, r7
 8003590:	46b2      	mov	sl, r6
 8003592:	46a9      	mov	r9, r5
 8003594:	46a0      	mov	r8, r4
 8003596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003598:	40021800 	.word	0x40021800
 800359c:	50000400 	.word	0x50000400
 80035a0:	50000800 	.word	0x50000800
 80035a4:	affff400 	.word	0xaffff400

080035a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	46de      	mov	lr, fp
 80035ac:	4657      	mov	r7, sl
 80035ae:	464e      	mov	r6, r9
 80035b0:	4645      	mov	r5, r8
 80035b2:	b5e0      	push	{r5, r6, r7, lr}
 80035b4:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80035b6:	2900      	cmp	r1, #0
 80035b8:	d06d      	beq.n	8003696 <HAL_GPIO_DeInit+0xee>
  uint32_t position = 0x00u;
 80035ba:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80035bc:	2201      	movs	r2, #1
 80035be:	4693      	mov	fp, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80035c0:	3202      	adds	r2, #2
 80035c2:	4692      	mov	sl, r2
 80035c4:	320c      	adds	r2, #12
 80035c6:	4691      	mov	r9, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80035c8:	4a36      	ldr	r2, [pc, #216]	@ (80036a4 <HAL_GPIO_DeInit+0xfc>)
 80035ca:	1882      	adds	r2, r0, r2
 80035cc:	1e54      	subs	r4, r2, #1
 80035ce:	41a2      	sbcs	r2, r4
 80035d0:	4252      	negs	r2, r2
 80035d2:	9201      	str	r2, [sp, #4]
 80035d4:	9100      	str	r1, [sp, #0]
 80035d6:	e022      	b.n	800361e <HAL_GPIO_DeInit+0x76>
 80035d8:	2500      	movs	r5, #0
 80035da:	4641      	mov	r1, r8
 80035dc:	408d      	lsls	r5, r1
 80035de:	42b5      	cmp	r5, r6
 80035e0:	d045      	beq.n	800366e <HAL_GPIO_DeInit+0xc6>
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80035e2:	6804      	ldr	r4, [r0, #0]
 80035e4:	005d      	lsls	r5, r3, #1
 80035e6:	4656      	mov	r6, sl
 80035e8:	40ae      	lsls	r6, r5
 80035ea:	4334      	orrs	r4, r6
 80035ec:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80035ee:	08dc      	lsrs	r4, r3, #3
 80035f0:	00a4      	lsls	r4, r4, #2
 80035f2:	1904      	adds	r4, r0, r4
 80035f4:	6a27      	ldr	r7, [r4, #32]
 80035f6:	2507      	movs	r5, #7
 80035f8:	401d      	ands	r5, r3
 80035fa:	00ad      	lsls	r5, r5, #2
 80035fc:	4649      	mov	r1, r9
 80035fe:	40a9      	lsls	r1, r5
 8003600:	438f      	bics	r7, r1
 8003602:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003604:	6884      	ldr	r4, [r0, #8]
 8003606:	43b4      	bics	r4, r6
 8003608:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800360a:	6844      	ldr	r4, [r0, #4]
 800360c:	4394      	bics	r4, r2
 800360e:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003610:	68c2      	ldr	r2, [r0, #12]
 8003612:	43b2      	bics	r2, r6
 8003614:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003616:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003618:	9a00      	ldr	r2, [sp, #0]
 800361a:	40da      	lsrs	r2, r3
 800361c:	d03b      	beq.n	8003696 <HAL_GPIO_DeInit+0xee>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800361e:	465a      	mov	r2, fp
 8003620:	409a      	lsls	r2, r3
 8003622:	9900      	ldr	r1, [sp, #0]
 8003624:	000f      	movs	r7, r1
 8003626:	4017      	ands	r7, r2
    if (iocurrent != 0x00u)
 8003628:	4211      	tst	r1, r2
 800362a:	d0f4      	beq.n	8003616 <HAL_GPIO_DeInit+0x6e>
      tmp = EXTI->EXTICR[position >> 2u];
 800362c:	089c      	lsrs	r4, r3, #2
 800362e:	00a4      	lsls	r4, r4, #2
 8003630:	491d      	ldr	r1, [pc, #116]	@ (80036a8 <HAL_GPIO_DeInit+0x100>)
 8003632:	468c      	mov	ip, r1
 8003634:	4464      	add	r4, ip
 8003636:	6e26      	ldr	r6, [r4, #96]	@ 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003638:	4655      	mov	r5, sl
 800363a:	401d      	ands	r5, r3
 800363c:	00e9      	lsls	r1, r5, #3
 800363e:	4688      	mov	r8, r1
 8003640:	464d      	mov	r5, r9
 8003642:	408d      	lsls	r5, r1
 8003644:	46ac      	mov	ip, r5
 8003646:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003648:	21a0      	movs	r1, #160	@ 0xa0
 800364a:	05c9      	lsls	r1, r1, #23
 800364c:	4288      	cmp	r0, r1
 800364e:	d0c3      	beq.n	80035d8 <HAL_GPIO_DeInit+0x30>
 8003650:	4d16      	ldr	r5, [pc, #88]	@ (80036ac <HAL_GPIO_DeInit+0x104>)
 8003652:	42a8      	cmp	r0, r5
 8003654:	d007      	beq.n	8003666 <HAL_GPIO_DeInit+0xbe>
 8003656:	4d16      	ldr	r5, [pc, #88]	@ (80036b0 <HAL_GPIO_DeInit+0x108>)
 8003658:	42a8      	cmp	r0, r5
 800365a:	d006      	beq.n	800366a <HAL_GPIO_DeInit+0xc2>
 800365c:	2502      	movs	r5, #2
 800365e:	9901      	ldr	r1, [sp, #4]
 8003660:	400d      	ands	r5, r1
 8003662:	3503      	adds	r5, #3
 8003664:	e7b9      	b.n	80035da <HAL_GPIO_DeInit+0x32>
 8003666:	2501      	movs	r5, #1
 8003668:	e7b7      	b.n	80035da <HAL_GPIO_DeInit+0x32>
 800366a:	2502      	movs	r5, #2
 800366c:	e7b5      	b.n	80035da <HAL_GPIO_DeInit+0x32>
        EXTI->IMR1 &= ~(iocurrent);
 800366e:	4d0e      	ldr	r5, [pc, #56]	@ (80036a8 <HAL_GPIO_DeInit+0x100>)
 8003670:	2180      	movs	r1, #128	@ 0x80
 8003672:	586e      	ldr	r6, [r5, r1]
 8003674:	43be      	bics	r6, r7
 8003676:	506e      	str	r6, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 8003678:	3104      	adds	r1, #4
 800367a:	586e      	ldr	r6, [r5, r1]
 800367c:	43be      	bics	r6, r7
 800367e:	506e      	str	r6, [r5, r1]
        EXTI->FTSR1 &= ~(iocurrent);
 8003680:	686e      	ldr	r6, [r5, #4]
 8003682:	43be      	bics	r6, r7
 8003684:	606e      	str	r6, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003686:	682e      	ldr	r6, [r5, #0]
 8003688:	43be      	bics	r6, r7
 800368a:	602e      	str	r6, [r5, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800368c:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800368e:	4661      	mov	r1, ip
 8003690:	438d      	bics	r5, r1
 8003692:	6625      	str	r5, [r4, #96]	@ 0x60
 8003694:	e7a5      	b.n	80035e2 <HAL_GPIO_DeInit+0x3a>
  }
}
 8003696:	b003      	add	sp, #12
 8003698:	bcf0      	pop	{r4, r5, r6, r7}
 800369a:	46bb      	mov	fp, r7
 800369c:	46b2      	mov	sl, r6
 800369e:	46a9      	mov	r9, r5
 80036a0:	46a0      	mov	r8, r4
 80036a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a4:	affff400 	.word	0xaffff400
 80036a8:	40021800 	.word	0x40021800
 80036ac:	50000400 	.word	0x50000400
 80036b0:	50000800 	.word	0x50000800

080036b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	d001      	beq.n	80036bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036b8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036ba:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036bc:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80036be:	e7fc      	b.n	80036ba <HAL_GPIO_WritePin+0x6>

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c4:	d060      	beq.n	8003788 <HAL_I2C_Init+0xc8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c6:	2341      	movs	r3, #65	@ 0x41
 80036c8:	5cc3      	ldrb	r3, [r0, r3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d048      	beq.n	8003760 <HAL_I2C_Init+0xa0>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ce:	2341      	movs	r3, #65	@ 0x41
 80036d0:	2224      	movs	r2, #36	@ 0x24
 80036d2:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	438b      	bics	r3, r1
 80036dc:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	6863      	ldr	r3, [r4, #4]
 80036e2:	492a      	ldr	r1, [pc, #168]	@ (800378c <HAL_I2C_Init+0xcc>)
 80036e4:	400b      	ands	r3, r1
 80036e6:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	6893      	ldr	r3, [r2, #8]
 80036ec:	4928      	ldr	r1, [pc, #160]	@ (8003790 <HAL_I2C_Init+0xd0>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d039      	beq.n	800376c <HAL_I2C_Init+0xac>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	68a1      	ldr	r1, [r4, #8]
 80036fc:	2384      	movs	r3, #132	@ 0x84
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	430b      	orrs	r3, r1
 8003702:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003704:	68e3      	ldr	r3, [r4, #12]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d037      	beq.n	800377a <HAL_I2C_Init+0xba>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6853      	ldr	r3, [r2, #4]
 800370e:	4921      	ldr	r1, [pc, #132]	@ (8003794 <HAL_I2C_Init+0xd4>)
 8003710:	400b      	ands	r3, r1
 8003712:	6053      	str	r3, [r2, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	6851      	ldr	r1, [r2, #4]
 8003718:	4b1f      	ldr	r3, [pc, #124]	@ (8003798 <HAL_I2C_Init+0xd8>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	68d3      	ldr	r3, [r2, #12]
 8003722:	491b      	ldr	r1, [pc, #108]	@ (8003790 <HAL_I2C_Init+0xd0>)
 8003724:	400b      	ands	r3, r1
 8003726:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003728:	6821      	ldr	r1, [r4, #0]
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	6962      	ldr	r2, [r4, #20]
 800372e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003730:	69a2      	ldr	r2, [r4, #24]
 8003732:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003734:	4313      	orrs	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003738:	6822      	ldr	r2, [r4, #0]
 800373a:	69e3      	ldr	r3, [r4, #28]
 800373c:	6a21      	ldr	r1, [r4, #32]
 800373e:	430b      	orrs	r3, r1
 8003740:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	430b      	orrs	r3, r1
 800374a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003750:	2241      	movs	r2, #65	@ 0x41
 8003752:	311f      	adds	r1, #31
 8003754:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	3201      	adds	r2, #1
 800375a:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 800375c:	2000      	movs	r0, #0
}
 800375e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003760:	3340      	adds	r3, #64	@ 0x40
 8003762:	2200      	movs	r2, #0
 8003764:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003766:	f7fe fc9d 	bl	80020a4 <HAL_I2C_MspInit>
 800376a:	e7b0      	b.n	80036ce <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	68a1      	ldr	r1, [r4, #8]
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	430b      	orrs	r3, r1
 8003776:	6093      	str	r3, [r2, #8]
 8003778:	e7c4      	b.n	8003704 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	6851      	ldr	r1, [r2, #4]
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	430b      	orrs	r3, r1
 8003784:	6053      	str	r3, [r2, #4]
 8003786:	e7c5      	b.n	8003714 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8003788:	2001      	movs	r0, #1
 800378a:	e7e8      	b.n	800375e <HAL_I2C_Init+0x9e>
 800378c:	f0ffffff 	.word	0xf0ffffff
 8003790:	ffff7fff 	.word	0xffff7fff
 8003794:	fffff7ff 	.word	0xfffff7ff
 8003798:	02008000 	.word	0x02008000

0800379c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800379c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379e:	2341      	movs	r3, #65	@ 0x41
 80037a0:	5cc3      	ldrb	r3, [r0, r3]
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d120      	bne.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	3320      	adds	r3, #32
 80037a8:	5cc3      	ldrb	r3, [r0, r3]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d01e      	beq.n	80037ec <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80037ae:	2440      	movs	r4, #64	@ 0x40
 80037b0:	2201      	movs	r2, #1
 80037b2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	2541      	movs	r5, #65	@ 0x41
 80037b6:	2324      	movs	r3, #36	@ 0x24
 80037b8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ba:	6806      	ldr	r6, [r0, #0]
 80037bc:	6833      	ldr	r3, [r6, #0]
 80037be:	4393      	bics	r3, r2
 80037c0:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c2:	6806      	ldr	r6, [r0, #0]
 80037c4:	6833      	ldr	r3, [r6, #0]
 80037c6:	4f0a      	ldr	r7, [pc, #40]	@ (80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 80037c8:	403b      	ands	r3, r7
 80037ca:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037cc:	6806      	ldr	r6, [r0, #0]
 80037ce:	6833      	ldr	r3, [r6, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d4:	6801      	ldr	r1, [r0, #0]
 80037d6:	680b      	ldr	r3, [r1, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	2320      	movs	r3, #32
 80037de:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e0:	2300      	movs	r3, #0
 80037e2:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80037e4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80037e8:	2002      	movs	r0, #2
 80037ea:	e7fc      	b.n	80037e6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80037ec:	2002      	movs	r0, #2
 80037ee:	e7fa      	b.n	80037e6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80037f0:	ffffefff 	.word	0xffffefff

080037f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f6:	2341      	movs	r3, #65	@ 0x41
 80037f8:	5cc3      	ldrb	r3, [r0, r3]
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d11e      	bne.n	800383c <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fe:	3320      	adds	r3, #32
 8003800:	5cc3      	ldrb	r3, [r0, r3]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d01c      	beq.n	8003840 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8003806:	2440      	movs	r4, #64	@ 0x40
 8003808:	2201      	movs	r2, #1
 800380a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380c:	2541      	movs	r5, #65	@ 0x41
 800380e:	2324      	movs	r3, #36	@ 0x24
 8003810:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003812:	6806      	ldr	r6, [r0, #0]
 8003814:	6833      	ldr	r3, [r6, #0]
 8003816:	4393      	bics	r3, r2
 8003818:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800381a:	6806      	ldr	r6, [r0, #0]
 800381c:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800381e:	4f09      	ldr	r7, [pc, #36]	@ (8003844 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8003820:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003822:	0209      	lsls	r1, r1, #8
 8003824:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003826:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003828:	6801      	ldr	r1, [r0, #0]
 800382a:	680b      	ldr	r3, [r1, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	2320      	movs	r3, #32
 8003832:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003834:	2300      	movs	r3, #0
 8003836:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003838:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800383c:	2002      	movs	r0, #2
 800383e:	e7fc      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8003840:	2002      	movs	r0, #2
 8003842:	e7fa      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8003844:	fffff0ff 	.word	0xfffff0ff

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b510      	push	{r4, lr}
 800384a:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800384c:	4913      	ldr	r1, [pc, #76]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0x54>)
 800384e:	680b      	ldr	r3, [r1, #0]
 8003850:	4813      	ldr	r0, [pc, #76]	@ (80038a0 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8003852:	4003      	ands	r3, r0
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800385c:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385e:	429a      	cmp	r2, r3
 8003860:	d000      	beq.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8003862:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	0058      	lsls	r0, r3, #1
 800386a:	18c0      	adds	r0, r0, r3
 800386c:	0040      	lsls	r0, r0, #1
 800386e:	490e      	ldr	r1, [pc, #56]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8003870:	f7fc fc46 	bl	8000100 <__udivsi3>
 8003874:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	055b      	lsls	r3, r3, #21
 800387c:	d50a      	bpl.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x4c>
 800387e:	4907      	ldr	r1, [pc, #28]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8003884:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003886:	694b      	ldr	r3, [r1, #20]
 8003888:	4213      	tst	r3, r2
 800388a:	d005      	beq.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 800388c:	2800      	cmp	r0, #0
 800388e:	d1f9      	bne.n	8003884 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8003890:	2003      	movs	r0, #3
 8003892:	e7e6      	b.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8003894:	2000      	movs	r0, #0
 8003896:	e7e4      	b.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x1a>
 8003898:	2000      	movs	r0, #0
 800389a:	e7e2      	b.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x1a>
 800389c:	40007000 	.word	0x40007000
 80038a0:	fffff9ff 	.word	0xfffff9ff
 80038a4:	20000004 	.word	0x20000004
 80038a8:	000f4240 	.word	0x000f4240

080038ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ae:	46ce      	mov	lr, r9
 80038b0:	4647      	mov	r7, r8
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b083      	sub	sp, #12
 80038b6:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b8:	d100      	bne.n	80038bc <HAL_RCC_OscConfig+0x10>
 80038ba:	e23e      	b.n	8003d3a <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038bc:	6803      	ldr	r3, [r0, #0]
 80038be:	07db      	lsls	r3, r3, #31
 80038c0:	d538      	bpl.n	8003934 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4ac7      	ldr	r2, [pc, #796]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 80038c4:	6891      	ldr	r1, [r2, #8]
 80038c6:	2338      	movs	r3, #56	@ 0x38
 80038c8:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ca:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d026      	beq.n	800391e <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d027      	beq.n	8003924 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	2280      	movs	r2, #128	@ 0x80
 80038d8:	0252      	lsls	r2, r2, #9
 80038da:	4293      	cmp	r3, r2
 80038dc:	d07a      	beq.n	80039d4 <HAL_RCC_OscConfig+0x128>
 80038de:	22a0      	movs	r2, #160	@ 0xa0
 80038e0:	02d2      	lsls	r2, r2, #11
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d07d      	beq.n	80039e2 <HAL_RCC_OscConfig+0x136>
 80038e6:	4bbe      	ldr	r3, [pc, #760]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	49be      	ldr	r1, [pc, #760]	@ (8003be4 <HAL_RCC_OscConfig+0x338>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	49bd      	ldr	r1, [pc, #756]	@ (8003be8 <HAL_RCC_OscConfig+0x33c>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d07d      	beq.n	80039fa <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fd77 	bl	80023f0 <HAL_GetTick>
 8003902:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003904:	4fb6      	ldr	r7, [pc, #728]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003906:	2680      	movs	r6, #128	@ 0x80
 8003908:	02b6      	lsls	r6, r6, #10
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	4233      	tst	r3, r6
 800390e:	d111      	bne.n	8003934 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fe fd6e 	bl	80023f0 <HAL_GetTick>
 8003914:	1b40      	subs	r0, r0, r5
 8003916:	2864      	cmp	r0, #100	@ 0x64
 8003918:	d9f7      	bls.n	800390a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800391a:	2003      	movs	r0, #3
 800391c:	e20e      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800391e:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003920:	0792      	lsls	r2, r2, #30
 8003922:	d1d7      	bne.n	80038d4 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	4bae      	ldr	r3, [pc, #696]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	039b      	lsls	r3, r3, #14
 800392a:	d503      	bpl.n	8003934 <HAL_RCC_OscConfig+0x88>
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d100      	bne.n	8003934 <HAL_RCC_OscConfig+0x88>
 8003932:	e208      	b.n	8003d46 <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	079b      	lsls	r3, r3, #30
 8003938:	d52a      	bpl.n	8003990 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393a:	4aa9      	ldr	r2, [pc, #676]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 800393c:	6891      	ldr	r1, [r2, #8]
 800393e:	2338      	movs	r3, #56	@ 0x38
 8003940:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003942:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003944:	2b10      	cmp	r3, #16
 8003946:	d068      	beq.n	8003a1a <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003948:	2b00      	cmp	r3, #0
 800394a:	d16b      	bne.n	8003a24 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800394c:	4ba4      	ldr	r3, [pc, #656]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	055b      	lsls	r3, r3, #21
 8003952:	d500      	bpl.n	8003956 <HAL_RCC_OscConfig+0xaa>
 8003954:	e21a      	b.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	49a2      	ldr	r1, [pc, #648]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003958:	684a      	ldr	r2, [r1, #4]
 800395a:	6963      	ldr	r3, [r4, #20]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	48a3      	ldr	r0, [pc, #652]	@ (8003bec <HAL_RCC_OscConfig+0x340>)
 8003960:	4002      	ands	r2, r0
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003966:	4a9e      	ldr	r2, [pc, #632]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003968:	6813      	ldr	r3, [r2, #0]
 800396a:	49a1      	ldr	r1, [pc, #644]	@ (8003bf0 <HAL_RCC_OscConfig+0x344>)
 800396c:	400b      	ands	r3, r1
 800396e:	6921      	ldr	r1, [r4, #16]
 8003970:	430b      	orrs	r3, r1
 8003972:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	499f      	ldr	r1, [pc, #636]	@ (8003bf4 <HAL_RCC_OscConfig+0x348>)
 8003978:	049b      	lsls	r3, r3, #18
 800397a:	0f5b      	lsrs	r3, r3, #29
 800397c:	4a9e      	ldr	r2, [pc, #632]	@ (8003bf8 <HAL_RCC_OscConfig+0x34c>)
 800397e:	40da      	lsrs	r2, r3
 8003980:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003982:	4b9e      	ldr	r3, [pc, #632]	@ (8003bfc <HAL_RCC_OscConfig+0x350>)
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	f7fe fceb 	bl	8002360 <HAL_InitTick>
 800398a:	2800      	cmp	r0, #0
 800398c:	d000      	beq.n	8003990 <HAL_RCC_OscConfig+0xe4>
 800398e:	e1dc      	b.n	8003d4a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	071b      	lsls	r3, r3, #28
 8003994:	d400      	bmi.n	8003998 <HAL_RCC_OscConfig+0xec>
 8003996:	e08b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003998:	4b91      	ldr	r3, [pc, #580]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	2338      	movs	r3, #56	@ 0x38
 800399e:	4013      	ands	r3, r2
 80039a0:	2b18      	cmp	r3, #24
 80039a2:	d07d      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a4:	69a3      	ldr	r3, [r4, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d100      	bne.n	80039ac <HAL_RCC_OscConfig+0x100>
 80039aa:	e0c4      	b.n	8003b36 <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80039ac:	4a8c      	ldr	r2, [pc, #560]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 80039ae:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80039b0:	2101      	movs	r1, #1
 80039b2:	430b      	orrs	r3, r1
 80039b4:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe fd1b 	bl	80023f0 <HAL_GetTick>
 80039ba:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039bc:	4f88      	ldr	r7, [pc, #544]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 80039be:	2602      	movs	r6, #2
 80039c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039c2:	421e      	tst	r6, r3
 80039c4:	d174      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fe fd13 	bl	80023f0 <HAL_GetTick>
 80039ca:	1b40      	subs	r0, r0, r5
 80039cc:	2802      	cmp	r0, #2
 80039ce:	d9f7      	bls.n	80039c0 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 80039d0:	2003      	movs	r0, #3
 80039d2:	e1b3      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	4a82      	ldr	r2, [pc, #520]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 80039d6:	6811      	ldr	r1, [r2, #0]
 80039d8:	2380      	movs	r3, #128	@ 0x80
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	430b      	orrs	r3, r1
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e78a      	b.n	80038f8 <HAL_RCC_OscConfig+0x4c>
 80039e2:	4b7f      	ldr	r3, [pc, #508]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	2280      	movs	r2, #128	@ 0x80
 80039e8:	02d2      	lsls	r2, r2, #11
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	0252      	lsls	r2, r2, #9
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e77e      	b.n	80038f8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80039fa:	f7fe fcf9 	bl	80023f0 <HAL_GetTick>
 80039fe:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a00:	4f77      	ldr	r7, [pc, #476]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003a02:	2680      	movs	r6, #128	@ 0x80
 8003a04:	02b6      	lsls	r6, r6, #10
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	4233      	tst	r3, r6
 8003a0a:	d093      	beq.n	8003934 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fcf0 	bl	80023f0 <HAL_GetTick>
 8003a10:	1b40      	subs	r0, r0, r5
 8003a12:	2864      	cmp	r0, #100	@ 0x64
 8003a14:	d9f7      	bls.n	8003a06 <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8003a16:	2003      	movs	r0, #3
 8003a18:	e190      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a1a:	3b0d      	subs	r3, #13
 8003a1c:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d100      	bne.n	8003a24 <HAL_RCC_OscConfig+0x178>
 8003a22:	e1a3      	b.n	8003d6c <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a24:	68e3      	ldr	r3, [r4, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d024      	beq.n	8003a74 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a2a:	4a6d      	ldr	r2, [pc, #436]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003a2c:	6813      	ldr	r3, [r2, #0]
 8003a2e:	4970      	ldr	r1, [pc, #448]	@ (8003bf0 <HAL_RCC_OscConfig+0x344>)
 8003a30:	400b      	ands	r3, r1
 8003a32:	6921      	ldr	r1, [r4, #16]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8003a38:	6811      	ldr	r1, [r2, #0]
 8003a3a:	2380      	movs	r3, #128	@ 0x80
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a42:	f7fe fcd5 	bl	80023f0 <HAL_GetTick>
 8003a46:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a48:	4f65      	ldr	r7, [pc, #404]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003a4a:	2680      	movs	r6, #128	@ 0x80
 8003a4c:	00f6      	lsls	r6, r6, #3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	4233      	tst	r3, r6
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fccc 	bl	80023f0 <HAL_GetTick>
 8003a58:	1b40      	subs	r0, r0, r5
 8003a5a:	2802      	cmp	r0, #2
 8003a5c:	d9f7      	bls.n	8003a4e <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 8003a5e:	2003      	movs	r0, #3
 8003a60:	e16c      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	495f      	ldr	r1, [pc, #380]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003a64:	684a      	ldr	r2, [r1, #4]
 8003a66:	6963      	ldr	r3, [r4, #20]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	4860      	ldr	r0, [pc, #384]	@ (8003bec <HAL_RCC_OscConfig+0x340>)
 8003a6c:	4002      	ands	r2, r0
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e78d      	b.n	8003990 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8003a74:	4a5a      	ldr	r2, [pc, #360]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	4961      	ldr	r1, [pc, #388]	@ (8003c00 <HAL_RCC_OscConfig+0x354>)
 8003a7a:	400b      	ands	r3, r1
 8003a7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a7e:	f7fe fcb7 	bl	80023f0 <HAL_GetTick>
 8003a82:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a84:	4f56      	ldr	r7, [pc, #344]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003a86:	2680      	movs	r6, #128	@ 0x80
 8003a88:	00f6      	lsls	r6, r6, #3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	4233      	tst	r3, r6
 8003a8e:	d100      	bne.n	8003a92 <HAL_RCC_OscConfig+0x1e6>
 8003a90:	e77e      	b.n	8003990 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fe fcad 	bl	80023f0 <HAL_GetTick>
 8003a96:	1b40      	subs	r0, r0, r5
 8003a98:	2802      	cmp	r0, #2
 8003a9a:	d9f6      	bls.n	8003a8a <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	e14d      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa4:	079b      	lsls	r3, r3, #30
 8003aa6:	d503      	bpl.n	8003ab0 <HAL_RCC_OscConfig+0x204>
 8003aa8:	69a3      	ldr	r3, [r4, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d100      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x204>
 8003aae:	e14e      	b.n	8003d4e <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	075b      	lsls	r3, r3, #29
 8003ab4:	d400      	bmi.n	8003ab8 <HAL_RCC_OscConfig+0x20c>
 8003ab6:	e0ac      	b.n	8003c12 <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ab8:	4b49      	ldr	r3, [pc, #292]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	2338      	movs	r3, #56	@ 0x38
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d04c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ac4:	4b46      	ldr	r3, [pc, #280]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	d40b      	bmi.n	8003ae8 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003ad2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ad4:	2180      	movs	r1, #128	@ 0x80
 8003ad6:	0549      	lsls	r1, r1, #21
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	400b      	ands	r3, r1
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae8:	4b46      	ldr	r3, [pc, #280]	@ (8003c04 <HAL_RCC_OscConfig+0x358>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	05db      	lsls	r3, r3, #23
 8003aee:	d53f      	bpl.n	8003b70 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	68a3      	ldr	r3, [r4, #8]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d052      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2f0>
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d056      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x2fc>
 8003afa:	4b39      	ldr	r3, [pc, #228]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003afc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003afe:	2101      	movs	r1, #1
 8003b00:	438a      	bics	r2, r1
 8003b02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b06:	3103      	adds	r1, #3
 8003b08:	438a      	bics	r2, r1
 8003b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0c:	68a3      	ldr	r3, [r4, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d054      	beq.n	8003bbc <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe fc6d 	bl	80023f0 <HAL_GetTick>
 8003b16:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	4b31      	ldr	r3, [pc, #196]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003b1a:	4698      	mov	r8, r3
 8003b1c:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	4d3a      	ldr	r5, [pc, #232]	@ (8003c08 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b20:	4643      	mov	r3, r8
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	421f      	tst	r7, r3
 8003b26:	d171      	bne.n	8003c0c <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fe fc62 	bl	80023f0 <HAL_GetTick>
 8003b2c:	1b80      	subs	r0, r0, r6
 8003b2e:	42a8      	cmp	r0, r5
 8003b30:	d9f6      	bls.n	8003b20 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003b32:	2003      	movs	r0, #3
 8003b34:	e102      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 8003b36:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003b38:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	438b      	bics	r3, r1
 8003b3e:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003b40:	f7fe fc56 	bl	80023f0 <HAL_GetTick>
 8003b44:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b46:	4f26      	ldr	r7, [pc, #152]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003b48:	2602      	movs	r6, #2
 8003b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4c:	421e      	tst	r6, r3
 8003b4e:	d0af      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fe fc4e 	bl	80023f0 <HAL_GetTick>
 8003b54:	1b40      	subs	r0, r0, r5
 8003b56:	2802      	cmp	r0, #2
 8003b58:	d9f7      	bls.n	8003b4a <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 8003b5a:	2003      	movs	r0, #3
 8003b5c:	e0ee      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b5e:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b62:	079b      	lsls	r3, r3, #30
 8003b64:	d555      	bpl.n	8003c12 <HAL_RCC_OscConfig+0x366>
 8003b66:	68a3      	ldr	r3, [r4, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d152      	bne.n	8003c12 <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	e0e5      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b70:	4a24      	ldr	r2, [pc, #144]	@ (8003c04 <HAL_RCC_OscConfig+0x358>)
 8003b72:	6811      	ldr	r1, [r2, #0]
 8003b74:	2380      	movs	r3, #128	@ 0x80
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fc38 	bl	80023f0 <HAL_GetTick>
 8003b80:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b82:	4d20      	ldr	r5, [pc, #128]	@ (8003c04 <HAL_RCC_OscConfig+0x358>)
 8003b84:	2780      	movs	r7, #128	@ 0x80
 8003b86:	007f      	lsls	r7, r7, #1
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	423b      	tst	r3, r7
 8003b8c:	d1b0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fe fc2f 	bl	80023f0 <HAL_GetTick>
 8003b92:	1b80      	subs	r0, r0, r6
 8003b94:	2802      	cmp	r0, #2
 8003b96:	d9f7      	bls.n	8003b88 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8003b98:	2003      	movs	r0, #3
 8003b9a:	e0cf      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	4a10      	ldr	r2, [pc, #64]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003b9e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003ba6:	e7b1      	b.n	8003b0c <HAL_RCC_OscConfig+0x260>
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003baa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bac:	2104      	movs	r1, #4
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bb4:	3903      	subs	r1, #3
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bba:	e7a7      	b.n	8003b0c <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fc18 	bl	80023f0 <HAL_GetTick>
 8003bc0:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc2:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003bc4:	4698      	mov	r8, r3
 8003bc6:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	4d0f      	ldr	r5, [pc, #60]	@ (8003c08 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bca:	4643      	mov	r3, r8
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	421f      	tst	r7, r3
 8003bd0:	d01c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fc0d 	bl	80023f0 <HAL_GetTick>
 8003bd6:	1b80      	subs	r0, r0, r6
 8003bd8:	42a8      	cmp	r0, r5
 8003bda:	d9f6      	bls.n	8003bca <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003bdc:	2003      	movs	r0, #3
 8003bde:	e0ad      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
 8003be0:	40021000 	.word	0x40021000
 8003be4:	fffeffff 	.word	0xfffeffff
 8003be8:	fffbffff 	.word	0xfffbffff
 8003bec:	ffff80ff 	.word	0xffff80ff
 8003bf0:	ffffc7ff 	.word	0xffffc7ff
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	2000000c 	.word	0x2000000c
 8003c00:	fffffeff 	.word	0xfffffeff
 8003c04:	40007000 	.word	0x40007000
 8003c08:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d021      	beq.n	8003c56 <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c12:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003c14:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d100      	bne.n	8003c1c <HAL_RCC_OscConfig+0x370>
 8003c1a:	e08f      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1c:	4a62      	ldr	r2, [pc, #392]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003c1e:	6891      	ldr	r1, [r2, #8]
 8003c20:	2238      	movs	r2, #56	@ 0x38
 8003c22:	400a      	ands	r2, r1
 8003c24:	2a10      	cmp	r2, #16
 8003c26:	d064      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d01a      	beq.n	8003c62 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	495e      	ldr	r1, [pc, #376]	@ (8003dac <HAL_RCC_OscConfig+0x500>)
 8003c32:	400b      	ands	r3, r1
 8003c34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c36:	f7fe fbdb 	bl	80023f0 <HAL_GetTick>
 8003c3a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	4e5a      	ldr	r6, [pc, #360]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003c3e:	2580      	movs	r5, #128	@ 0x80
 8003c40:	04ad      	lsls	r5, r5, #18
 8003c42:	6833      	ldr	r3, [r6, #0]
 8003c44:	422b      	tst	r3, r5
 8003c46:	d04d      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fe fbd2 	bl	80023f0 <HAL_GetTick>
 8003c4c:	1b00      	subs	r0, r0, r4
 8003c4e:	2802      	cmp	r0, #2
 8003c50:	d9f7      	bls.n	8003c42 <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 8003c52:	2003      	movs	r0, #3
 8003c54:	e072      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c56:	4a54      	ldr	r2, [pc, #336]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003c58:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003c5a:	4955      	ldr	r1, [pc, #340]	@ (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003c60:	e7d7      	b.n	8003c12 <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8003c62:	4a51      	ldr	r2, [pc, #324]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003c64:	6813      	ldr	r3, [r2, #0]
 8003c66:	4951      	ldr	r1, [pc, #324]	@ (8003dac <HAL_RCC_OscConfig+0x500>)
 8003c68:	400b      	ands	r3, r1
 8003c6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fbc0 	bl	80023f0 <HAL_GetTick>
 8003c70:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c72:	4f4d      	ldr	r7, [pc, #308]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003c74:	2680      	movs	r6, #128	@ 0x80
 8003c76:	04b6      	lsls	r6, r6, #18
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4233      	tst	r3, r6
 8003c7c:	d006      	beq.n	8003c8c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe fbb7 	bl	80023f0 <HAL_GetTick>
 8003c82:	1b40      	subs	r0, r0, r5
 8003c84:	2802      	cmp	r0, #2
 8003c86:	d9f7      	bls.n	8003c78 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8003c88:	2003      	movs	r0, #3
 8003c8a:	e057      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8c:	4a46      	ldr	r2, [pc, #280]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003c8e:	68d1      	ldr	r1, [r2, #12]
 8003c90:	6a23      	ldr	r3, [r4, #32]
 8003c92:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003c94:	4303      	orrs	r3, r0
 8003c96:	4847      	ldr	r0, [pc, #284]	@ (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003c98:	4001      	ands	r1, r0
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003ca6:	0209      	lsls	r1, r1, #8
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003cac:	6811      	ldr	r1, [r2, #0]
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	045b      	lsls	r3, r3, #17
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003cb6:	68d1      	ldr	r1, [r2, #12]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	055b      	lsls	r3, r3, #21
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fb96 	bl	80023f0 <HAL_GetTick>
 8003cc4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	4e38      	ldr	r6, [pc, #224]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003cc8:	2580      	movs	r5, #128	@ 0x80
 8003cca:	04ad      	lsls	r5, r5, #18
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	422b      	tst	r3, r5
 8003cd0:	d106      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe fb8d 	bl	80023f0 <HAL_GetTick>
 8003cd6:	1b00      	subs	r0, r0, r4
 8003cd8:	2802      	cmp	r0, #2
 8003cda:	d9f7      	bls.n	8003ccc <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8003cdc:	2003      	movs	r0, #3
 8003cde:	e02d      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	e02b      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003ce4:	4a30      	ldr	r2, [pc, #192]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003ce6:	68d3      	ldr	r3, [r2, #12]
 8003ce8:	4933      	ldr	r1, [pc, #204]	@ (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003cee:	2000      	movs	r0, #0
 8003cf0:	e024      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d02d      	beq.n	8003d52 <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 8003cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003cf8:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8003d00:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	428b      	cmp	r3, r1
 8003d04:	d11a      	bne.n	8003d3c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d06:	2370      	movs	r3, #112	@ 0x70
 8003d08:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d115      	bne.n	8003d3c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d10:	21fe      	movs	r1, #254	@ 0xfe
 8003d12:	01c9      	lsls	r1, r1, #7
 8003d14:	4011      	ands	r1, r2
 8003d16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d18:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d10e      	bne.n	8003d3c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d1e:	23f8      	movs	r3, #248	@ 0xf8
 8003d20:	039b      	lsls	r3, r3, #14
 8003d22:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d24:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003d26:	428b      	cmp	r3, r1
 8003d28:	d108      	bne.n	8003d3c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d2a:	0f53      	lsrs	r3, r2, #29
 8003d2c:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d2e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	4193      	sbcs	r3, r2
 8003d36:	b2d8      	uxtb	r0, r3
 8003d38:	e000      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
    return HAL_ERROR;
 8003d3a:	2001      	movs	r0, #1
}
 8003d3c:	b003      	add	sp, #12
 8003d3e:	bcc0      	pop	{r6, r7}
 8003d40:	46b9      	mov	r9, r7
 8003d42:	46b0      	mov	r8, r6
 8003d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
 8003d48:	e7f8      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	e7f6      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7f4      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8003d52:	2001      	movs	r0, #1
 8003d54:	e7f2      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7f0      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5a:	4913      	ldr	r1, [pc, #76]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003d5c:	684a      	ldr	r2, [r1, #4]
 8003d5e:	6963      	ldr	r3, [r4, #20]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	4816      	ldr	r0, [pc, #88]	@ (8003dbc <HAL_RCC_OscConfig+0x510>)
 8003d64:	4002      	ands	r2, r0
 8003d66:	4313      	orrs	r3, r2
 8003d68:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6a:	e60a      	b.n	8003982 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	055b      	lsls	r3, r3, #21
 8003d72:	d5f2      	bpl.n	8003d5a <HAL_RCC_OscConfig+0x4ae>
 8003d74:	68e3      	ldr	r3, [r4, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ed      	beq.n	8003d56 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	490b      	ldr	r1, [pc, #44]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003d7c:	684a      	ldr	r2, [r1, #4]
 8003d7e:	6963      	ldr	r3, [r4, #20]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	480e      	ldr	r0, [pc, #56]	@ (8003dbc <HAL_RCC_OscConfig+0x510>)
 8003d84:	4002      	ands	r2, r0
 8003d86:	4313      	orrs	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d8a:	e5fa      	b.n	8003982 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d8c:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8003d8e:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0d3      	beq.n	8003d3c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d94:	4904      	ldr	r1, [pc, #16]	@ (8003da8 <HAL_RCC_OscConfig+0x4fc>)
 8003d96:	684a      	ldr	r2, [r1, #4]
 8003d98:	6963      	ldr	r3, [r4, #20]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	4807      	ldr	r0, [pc, #28]	@ (8003dbc <HAL_RCC_OscConfig+0x510>)
 8003d9e:	4002      	ands	r2, r0
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003da4:	e5df      	b.n	8003966 <HAL_RCC_OscConfig+0xba>
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	40021000 	.word	0x40021000
 8003dac:	feffffff 	.word	0xfeffffff
 8003db0:	efffffff 	.word	0xefffffff
 8003db4:	1fc1808c 	.word	0x1fc1808c
 8003db8:	effefffc 	.word	0xeffefffc
 8003dbc:	ffff80ff 	.word	0xffff80ff

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc2:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2238      	movs	r2, #56	@ 0x38
 8003dc8:	421a      	tst	r2, r3
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003dcc:	4b26      	ldr	r3, [pc, #152]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	049b      	lsls	r3, r3, #18
 8003dd2:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003dd4:	4825      	ldr	r0, [pc, #148]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0xac>)
 8003dd6:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003dd8:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dda:	4b23      	ldr	r3, [pc, #140]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	2338      	movs	r3, #56	@ 0x38
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d03a      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x9c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de6:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	2338      	movs	r3, #56	@ 0x38
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d014      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003df2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	2338      	movs	r3, #56	@ 0x38
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d030      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2038      	movs	r0, #56	@ 0x38
 8003e04:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8003e06:	3818      	subs	r0, #24
 8003e08:	1e43      	subs	r3, r0, #1
 8003e0a:	4198      	sbcs	r0, r3
 8003e0c:	4240      	negs	r0, r0
 8003e0e:	4b18      	ldr	r3, [pc, #96]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e10:	4018      	ands	r0, r3
 8003e12:	23fa      	movs	r3, #250	@ 0xfa
 8003e14:	01db      	lsls	r3, r3, #7
 8003e16:	469c      	mov	ip, r3
 8003e18:	4460      	add	r0, ip
 8003e1a:	e7dd      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e1c:	4a12      	ldr	r2, [pc, #72]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e1e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e20:	68d1      	ldr	r1, [r2, #12]
 8003e22:	0649      	lsls	r1, r1, #25
 8003e24:	0f49      	lsrs	r1, r1, #29
 8003e26:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e28:	43db      	mvns	r3, r3
    switch (pllsource)
 8003e2a:	079b      	lsls	r3, r3, #30
 8003e2c:	d00e      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e30:	68dc      	ldr	r4, [r3, #12]
 8003e32:	0464      	lsls	r4, r4, #17
 8003e34:	0e64      	lsrs	r4, r4, #25
 8003e36:	480d      	ldr	r0, [pc, #52]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0xac>)
 8003e38:	f7fc f962 	bl	8000100 <__udivsi3>
 8003e3c:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003e40:	68d9      	ldr	r1, [r3, #12]
 8003e42:	0f49      	lsrs	r1, r1, #29
 8003e44:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8003e46:	f7fc f95b 	bl	8000100 <__udivsi3>
 8003e4a:	e7c5      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e4c:	68d4      	ldr	r4, [r2, #12]
 8003e4e:	0464      	lsls	r4, r4, #17
 8003e50:	0e64      	lsrs	r4, r4, #25
 8003e52:	4808      	ldr	r0, [pc, #32]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e54:	f7fc f954 	bl	8000100 <__udivsi3>
 8003e58:	4360      	muls	r0, r4
        break;
 8003e5a:	e7f0      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = HSE_VALUE;
 8003e5c:	4805      	ldr	r0, [pc, #20]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e5e:	e7bb      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8003e60:	2080      	movs	r0, #128	@ 0x80
 8003e62:	0200      	lsls	r0, r0, #8
 8003e64:	e7b8      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x18>
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	ffff8300 	.word	0xffff8300
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <HAL_RCC_ClockConfig>:
{
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	46ce      	mov	lr, r9
 8003e7c:	4647      	mov	r7, r8
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	0004      	movs	r4, r0
 8003e82:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d100      	bne.n	8003e8a <HAL_RCC_ClockConfig+0x12>
 8003e88:	e0b6      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8004000 <HAL_RCC_ClockConfig+0x188>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	2307      	movs	r3, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	428b      	cmp	r3, r1
 8003e94:	d321      	bcc.n	8003eda <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	079a      	lsls	r2, r3, #30
 8003e9a:	d50e      	bpl.n	8003eba <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	075b      	lsls	r3, r3, #29
 8003e9e:	d505      	bpl.n	8003eac <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ea0:	4a58      	ldr	r2, [pc, #352]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003ea2:	6891      	ldr	r1, [r2, #8]
 8003ea4:	23e0      	movs	r3, #224	@ 0xe0
 8003ea6:	01db      	lsls	r3, r3, #7
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4a55      	ldr	r2, [pc, #340]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003eae:	6893      	ldr	r3, [r2, #8]
 8003eb0:	4955      	ldr	r1, [pc, #340]	@ (8004008 <HAL_RCC_ClockConfig+0x190>)
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	68a1      	ldr	r1, [r4, #8]
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	07db      	lsls	r3, r3, #31
 8003ebe:	d55b      	bpl.n	8003f78 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d023      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d042      	beq.n	8003f50 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d146      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ece:	4a4d      	ldr	r2, [pc, #308]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	0552      	lsls	r2, r2, #21
 8003ed4:	d420      	bmi.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	e070      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4a49      	ldr	r2, [pc, #292]	@ (8004000 <HAL_RCC_ClockConfig+0x188>)
 8003edc:	6813      	ldr	r3, [r2, #0]
 8003ede:	2107      	movs	r1, #7
 8003ee0:	438b      	bics	r3, r1
 8003ee2:	432b      	orrs	r3, r5
 8003ee4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ee6:	f7fe fa83 	bl	80023f0 <HAL_GetTick>
 8003eea:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eec:	4b44      	ldr	r3, [pc, #272]	@ (8004000 <HAL_RCC_ClockConfig+0x188>)
 8003eee:	4698      	mov	r8, r3
 8003ef0:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef2:	4b46      	ldr	r3, [pc, #280]	@ (800400c <HAL_RCC_ClockConfig+0x194>)
 8003ef4:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ef6:	4643      	mov	r3, r8
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	403b      	ands	r3, r7
 8003efc:	42ab      	cmp	r3, r5
 8003efe:	d0ca      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fe fa76 	bl	80023f0 <HAL_GetTick>
 8003f04:	1b80      	subs	r0, r0, r6
 8003f06:	4548      	cmp	r0, r9
 8003f08:	d9f5      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	e056      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	0392      	lsls	r2, r2, #14
 8003f14:	d400      	bmi.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
 8003f16:	e071      	b.n	8003ffc <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f18:	493a      	ldr	r1, [pc, #232]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f1a:	688a      	ldr	r2, [r1, #8]
 8003f1c:	2007      	movs	r0, #7
 8003f1e:	4382      	bics	r2, r0
 8003f20:	4313      	orrs	r3, r2
 8003f22:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003f24:	f7fe fa64 	bl	80023f0 <HAL_GetTick>
 8003f28:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b36      	ldr	r3, [pc, #216]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f2c:	4698      	mov	r8, r3
 8003f2e:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f30:	4b36      	ldr	r3, [pc, #216]	@ (800400c <HAL_RCC_ClockConfig+0x194>)
 8003f32:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f34:	4643      	mov	r3, r8
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	403a      	ands	r2, r7
 8003f3a:	6863      	ldr	r3, [r4, #4]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d01a      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f42:	f7fe fa55 	bl	80023f0 <HAL_GetTick>
 8003f46:	1b80      	subs	r0, r0, r6
 8003f48:	4548      	cmp	r0, r9
 8003f4a:	d9f3      	bls.n	8003f34 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	e035      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f50:	4a2c      	ldr	r2, [pc, #176]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	0192      	lsls	r2, r2, #6
 8003f56:	d4df      	bmi.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8003f58:	2001      	movs	r0, #1
 8003f5a:	e02f      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f64:	0792      	lsls	r2, r2, #30
 8003f66:	d4d7      	bmi.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8003f68:	2001      	movs	r0, #1
 8003f6a:	e027      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f6c:	4a25      	ldr	r2, [pc, #148]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f6e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003f70:	0792      	lsls	r2, r2, #30
 8003f72:	d4d1      	bmi.n	8003f18 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8003f74:	2001      	movs	r0, #1
 8003f76:	e021      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b21      	ldr	r3, [pc, #132]	@ (8004000 <HAL_RCC_ClockConfig+0x188>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2307      	movs	r3, #7
 8003f7e:	4013      	ands	r3, r2
 8003f80:	42ab      	cmp	r3, r5
 8003f82:	d81f      	bhi.n	8003fc4 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	075b      	lsls	r3, r3, #29
 8003f88:	d506      	bpl.n	8003f98 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f8c:	6893      	ldr	r3, [r2, #8]
 8003f8e:	4920      	ldr	r1, [pc, #128]	@ (8004010 <HAL_RCC_ClockConfig+0x198>)
 8003f90:	400b      	ands	r3, r1
 8003f92:	68e1      	ldr	r1, [r4, #12]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f98:	f7ff ff12 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003f9c:	4b19      	ldr	r3, [pc, #100]	@ (8004004 <HAL_RCC_ClockConfig+0x18c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	491c      	ldr	r1, [pc, #112]	@ (8004014 <HAL_RCC_ClockConfig+0x19c>)
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <HAL_RCC_ClockConfig+0x1a0>)
 8003fa4:	051b      	lsls	r3, r3, #20
 8003fa6:	0f1b      	lsrs	r3, r3, #28
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	589b      	ldr	r3, [r3, r2]
 8003fac:	221f      	movs	r2, #31
 8003fae:	4013      	ands	r3, r2
 8003fb0:	40d8      	lsrs	r0, r3
 8003fb2:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003fb4:	4b19      	ldr	r3, [pc, #100]	@ (800401c <HAL_RCC_ClockConfig+0x1a4>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f7fe f9d2 	bl	8002360 <HAL_InitTick>
}
 8003fbc:	bcc0      	pop	{r6, r7}
 8003fbe:	46b9      	mov	r9, r7
 8003fc0:	46b0      	mov	r8, r6
 8003fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8004000 <HAL_RCC_ClockConfig+0x188>)
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	2107      	movs	r1, #7
 8003fca:	438b      	bics	r3, r1
 8003fcc:	432b      	orrs	r3, r5
 8003fce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003fd0:	f7fe fa0e 	bl	80023f0 <HAL_GetTick>
 8003fd4:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <HAL_RCC_ClockConfig+0x188>)
 8003fd8:	4698      	mov	r8, r3
 8003fda:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_ClockConfig+0x194>)
 8003fde:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fe0:	4643      	mov	r3, r8
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	403b      	ands	r3, r7
 8003fe6:	42ab      	cmp	r3, r5
 8003fe8:	d0cc      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fea:	f7fe fa01 	bl	80023f0 <HAL_GetTick>
 8003fee:	1b80      	subs	r0, r0, r6
 8003ff0:	4548      	cmp	r0, r9
 8003ff2:	d9f5      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8003ff4:	2003      	movs	r0, #3
 8003ff6:	e7e1      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	e7df      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	e7dd      	b.n	8003fbc <HAL_RCC_ClockConfig+0x144>
 8004000:	40022000 	.word	0x40022000
 8004004:	40021000 	.word	0x40021000
 8004008:	fffff0ff 	.word	0xfffff0ff
 800400c:	00001388 	.word	0x00001388
 8004010:	ffff8fff 	.word	0xffff8fff
 8004014:	20000004 	.word	0x20000004
 8004018:	080056d4 	.word	0x080056d4
 800401c:	2000000c 	.word	0x2000000c

08004020 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004022:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004024:	4a06      	ldr	r2, [pc, #24]	@ (8004040 <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004026:	4907      	ldr	r1, [pc, #28]	@ (8004044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004028:	045b      	lsls	r3, r3, #17
 800402a:	0f5b      	lsrs	r3, r3, #29
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	585b      	ldr	r3, [r3, r1]
 8004030:	211f      	movs	r1, #31
 8004032:	400b      	ands	r3, r1
 8004034:	6810      	ldr	r0, [r2, #0]
 8004036:	40d8      	lsrs	r0, r3
}
 8004038:	4770      	bx	lr
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	40021000 	.word	0x40021000
 8004040:	20000004 	.word	0x20000004
 8004044:	080056b4 	.word	0x080056b4

08004048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404a:	46d6      	mov	lr, sl
 800404c:	464f      	mov	r7, r9
 800404e:	4646      	mov	r6, r8
 8004050:	b5c0      	push	{r6, r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004056:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004058:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800405a:	039b      	lsls	r3, r3, #14
 800405c:	d52a      	bpl.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800405e:	4b57      	ldr	r3, [pc, #348]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004062:	2200      	movs	r2, #0
 8004064:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	d40b      	bmi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	4b54      	ldr	r3, [pc, #336]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800406c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	0549      	lsls	r1, r1, #21
 8004072:	430a      	orrs	r2, r1
 8004074:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	400b      	ands	r3, r1
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800407e:	2301      	movs	r3, #1
 8004080:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004082:	4a4f      	ldr	r2, [pc, #316]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004084:	6811      	ldr	r1, [r2, #0]
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	430b      	orrs	r3, r1
 800408c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800408e:	f7fe f9af 	bl	80023f0 <HAL_GetTick>
 8004092:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004094:	4f4a      	ldr	r7, [pc, #296]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004096:	2680      	movs	r6, #128	@ 0x80
 8004098:	0076      	lsls	r6, r6, #1
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4233      	tst	r3, r6
 800409e:	d000      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80040a0:	e07a      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a2:	f7fe f9a5 	bl	80023f0 <HAL_GetTick>
 80040a6:	1b40      	subs	r0, r0, r5
 80040a8:	2802      	cmp	r0, #2
 80040aa:	d9f6      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 80040ac:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ae:	4653      	mov	r3, sl
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d05d      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	07db      	lsls	r3, r3, #31
 80040b8:	d506      	bpl.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ba:	4a40      	ldr	r2, [pc, #256]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80040bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80040be:	2103      	movs	r1, #3
 80040c0:	438b      	bics	r3, r1
 80040c2:	6861      	ldr	r1, [r4, #4]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	069b      	lsls	r3, r3, #26
 80040cc:	d506      	bpl.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ce:	4a3b      	ldr	r2, [pc, #236]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80040d0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80040d2:	493c      	ldr	r1, [pc, #240]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80040d4:	400b      	ands	r3, r1
 80040d6:	68a1      	ldr	r1, [r4, #8]
 80040d8:	430b      	orrs	r3, r1
 80040da:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	045b      	lsls	r3, r3, #17
 80040e0:	d50b      	bpl.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e2:	4a36      	ldr	r2, [pc, #216]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80040e4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	6921      	ldr	r1, [r4, #16]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	05db      	lsls	r3, r3, #23
 80040f4:	6922      	ldr	r2, [r4, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d040      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x134>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	051b      	lsls	r3, r3, #20
 80040fe:	d50b      	bpl.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004100:	4a2e      	ldr	r2, [pc, #184]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004102:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004104:	4930      	ldr	r1, [pc, #192]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004106:	400b      	ands	r3, r1
 8004108:	68e1      	ldr	r1, [r4, #12]
 800410a:	430b      	orrs	r3, r1
 800410c:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800410e:	2380      	movs	r3, #128	@ 0x80
 8004110:	01db      	lsls	r3, r3, #7
 8004112:	68e2      	ldr	r2, [r4, #12]
 8004114:	429a      	cmp	r2, r3
 8004116:	d038      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x142>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8004118:	b002      	add	sp, #8
 800411a:	bce0      	pop	{r5, r6, r7}
 800411c:	46ba      	mov	sl, r7
 800411e:	46b1      	mov	r9, r6
 8004120:	46a8      	mov	r8, r5
 8004122:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004124:	6963      	ldr	r3, [r4, #20]
 8004126:	428b      	cmp	r3, r1
 8004128:	d03e      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800412a:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800412c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800412e:	4927      	ldr	r1, [pc, #156]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004130:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8004132:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8004134:	2080      	movs	r0, #128	@ 0x80
 8004136:	0240      	lsls	r0, r0, #9
 8004138:	4328      	orrs	r0, r5
 800413a:	65d8      	str	r0, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800413c:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800413e:	4d24      	ldr	r5, [pc, #144]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004140:	4028      	ands	r0, r5
 8004142:	65d8      	str	r0, [r3, #92]	@ 0x5c
        RCC->BDCR = tmpregister;
 8004144:	65d9      	str	r1, [r3, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004146:	07d2      	lsls	r2, r2, #31
 8004148:	d52e      	bpl.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tickstart = HAL_GetTick();
 800414a:	f7fe f951 	bl	80023f0 <HAL_GetTick>
 800414e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004150:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004152:	4698      	mov	r8, r3
 8004154:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	4b1f      	ldr	r3, [pc, #124]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004158:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415a:	4643      	mov	r3, r8
 800415c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415e:	421e      	tst	r6, r3
 8004160:	d122      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fe f945 	bl	80023f0 <HAL_GetTick>
 8004166:	1b40      	subs	r0, r0, r5
 8004168:	4548      	cmp	r0, r9
 800416a:	d9f6      	bls.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x112>
            ret = HAL_TIMEOUT;
 800416c:	2003      	movs	r0, #3
 800416e:	e79e      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004172:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8004174:	4918      	ldr	r1, [pc, #96]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004176:	400b      	ands	r3, r1
 8004178:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800417a:	e79b      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800417c:	4a0f      	ldr	r2, [pc, #60]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800417e:	68d1      	ldr	r1, [r2, #12]
 8004180:	2380      	movs	r3, #128	@ 0x80
 8004182:	025b      	lsls	r3, r3, #9
 8004184:	430b      	orrs	r3, r1
 8004186:	60d3      	str	r3, [r2, #12]
 8004188:	e7b7      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800418a:	4a0c      	ldr	r2, [pc, #48]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800418c:	68d1      	ldr	r1, [r2, #12]
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	025b      	lsls	r3, r3, #9
 8004192:	430b      	orrs	r3, r1
 8004194:	60d3      	str	r3, [r2, #12]
  return status;
 8004196:	e7bf      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004198:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800419a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800419c:	23c0      	movs	r3, #192	@ 0xc0
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	0011      	movs	r1, r2
 80041a2:	4019      	ands	r1, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041a4:	421a      	tst	r2, r3
 80041a6:	d1bd      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a8:	4a04      	ldr	r2, [pc, #16]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80041aa:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80041ac:	4907      	ldr	r1, [pc, #28]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041ae:	400b      	ands	r3, r1
 80041b0:	6961      	ldr	r1, [r4, #20]
 80041b2:	430b      	orrs	r3, r1
 80041b4:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041b6:	2000      	movs	r0, #0
 80041b8:	e779      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x66>
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40007000 	.word	0x40007000
 80041c4:	ffffcfff 	.word	0xffffcfff
 80041c8:	ffff3fff 	.word	0xffff3fff
 80041cc:	fffffcff 	.word	0xfffffcff
 80041d0:	fffeffff 	.word	0xfffeffff
 80041d4:	00001388 	.word	0x00001388
 80041d8:	efffffff 	.word	0xefffffff

080041dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041dc:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041de:	223d      	movs	r2, #61	@ 0x3d
 80041e0:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 80041e2:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	2a01      	cmp	r2, #1
 80041e6:	d112      	bne.n	800420e <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	323c      	adds	r2, #60	@ 0x3c
 80041ea:	2102      	movs	r1, #2
 80041ec:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	68ca      	ldr	r2, [r1, #12]
 80041f2:	4302      	orrs	r2, r0
 80041f4:	60ca      	str	r2, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004234 <HAL_TIM_Base_Start_IT+0x58>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d008      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x34>
 80041fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004238 <HAL_TIM_Base_Start_IT+0x5c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d005      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800420c:	2000      	movs	r0, #0
}
 800420e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	490a      	ldr	r1, [pc, #40]	@ (800423c <HAL_TIM_Base_Start_IT+0x60>)
 8004214:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	2a06      	cmp	r2, #6
 8004218:	d008      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x50>
 800421a:	3907      	subs	r1, #7
 800421c:	428a      	cmp	r2, r1
 800421e:	d007      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2101      	movs	r1, #1
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004228:	2000      	movs	r0, #0
 800422a:	e7f0      	b.n	800420e <HAL_TIM_Base_Start_IT+0x32>
 800422c:	2000      	movs	r0, #0
 800422e:	e7ee      	b.n	800420e <HAL_TIM_Base_Start_IT+0x32>
 8004230:	2000      	movs	r0, #0
 8004232:	e7ec      	b.n	800420e <HAL_TIM_Base_Start_IT+0x32>
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40000400 	.word	0x40000400
 800423c:	00010007 	.word	0x00010007

08004240 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004242:	4770      	bx	lr

08004244 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004244:	4770      	bx	lr

08004246 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_IRQHandler>:
{
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800424c:	6803      	ldr	r3, [r0, #0]
 800424e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004250:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004252:	07aa      	lsls	r2, r5, #30
 8004254:	d50e      	bpl.n	8004274 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004256:	07b2      	lsls	r2, r6, #30
 8004258:	d50c      	bpl.n	8004274 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800425a:	2203      	movs	r2, #3
 800425c:	4252      	negs	r2, r2
 800425e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004260:	2301      	movs	r3, #1
 8004262:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004264:	6803      	ldr	r3, [r0, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	079b      	lsls	r3, r3, #30
 800426a:	d053      	beq.n	8004314 <HAL_TIM_IRQHandler+0xcc>
          HAL_TIM_IC_CaptureCallback(htim);
 800426c:	f7ff ffe9 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004270:	2300      	movs	r3, #0
 8004272:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004274:	076b      	lsls	r3, r5, #29
 8004276:	d512      	bpl.n	800429e <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004278:	0773      	lsls	r3, r6, #29
 800427a:	d510      	bpl.n	800429e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	2205      	movs	r2, #5
 8004280:	4252      	negs	r2, r2
 8004282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004284:	2302      	movs	r3, #2
 8004286:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	23c0      	movs	r3, #192	@ 0xc0
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	421a      	tst	r2, r3
 8004292:	d045      	beq.n	8004320 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004294:	0020      	movs	r0, r4
 8004296:	f7ff ffd4 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	2300      	movs	r3, #0
 800429c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800429e:	072b      	lsls	r3, r5, #28
 80042a0:	d510      	bpl.n	80042c4 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042a2:	0733      	lsls	r3, r6, #28
 80042a4:	d50e      	bpl.n	80042c4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	2209      	movs	r2, #9
 80042aa:	4252      	negs	r2, r2
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	2304      	movs	r3, #4
 80042b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	079b      	lsls	r3, r3, #30
 80042b8:	d039      	beq.n	800432e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80042ba:	0020      	movs	r0, r4
 80042bc:	f7ff ffc1 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c0:	2300      	movs	r3, #0
 80042c2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042c4:	06eb      	lsls	r3, r5, #27
 80042c6:	d512      	bpl.n	80042ee <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042c8:	06f3      	lsls	r3, r6, #27
 80042ca:	d510      	bpl.n	80042ee <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	2211      	movs	r2, #17
 80042d0:	4252      	negs	r2, r2
 80042d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d4:	2308      	movs	r3, #8
 80042d6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	23c0      	movs	r3, #192	@ 0xc0
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	421a      	tst	r2, r3
 80042e2:	d02b      	beq.n	800433c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80042e4:	0020      	movs	r0, r4
 80042e6:	f7ff ffac 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	2300      	movs	r3, #0
 80042ec:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042ee:	07eb      	lsls	r3, r5, #31
 80042f0:	d501      	bpl.n	80042f6 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042f2:	07f3      	lsls	r3, r6, #31
 80042f4:	d429      	bmi.n	800434a <HAL_TIM_IRQHandler+0x102>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042f6:	2382      	movs	r3, #130	@ 0x82
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	421d      	tst	r5, r3
 80042fc:	d03c      	beq.n	8004378 <HAL_TIM_IRQHandler+0x130>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042fe:	0633      	lsls	r3, r6, #24
 8004300:	d42b      	bmi.n	800435a <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004302:	066b      	lsls	r3, r5, #25
 8004304:	d501      	bpl.n	800430a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004306:	0673      	lsls	r3, r6, #25
 8004308:	d43b      	bmi.n	8004382 <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800430a:	06ad      	lsls	r5, r5, #26
 800430c:	d501      	bpl.n	8004312 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800430e:	06b6      	lsls	r6, r6, #26
 8004310:	d43f      	bmi.n	8004392 <HAL_TIM_IRQHandler+0x14a>
}
 8004312:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004314:	f7ff ff94 	bl	8004240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	0020      	movs	r0, r4
 800431a:	f7ff ff93 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
 800431e:	e7a7      	b.n	8004270 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004320:	0020      	movs	r0, r4
 8004322:	f7ff ff8d 	bl	8004240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004326:	0020      	movs	r0, r4
 8004328:	f7ff ff8c 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
 800432c:	e7b5      	b.n	800429a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	0020      	movs	r0, r4
 8004330:	f7ff ff86 	bl	8004240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	0020      	movs	r0, r4
 8004336:	f7ff ff85 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
 800433a:	e7c1      	b.n	80042c0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433c:	0020      	movs	r0, r4
 800433e:	f7ff ff7f 	bl	8004240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004342:	0020      	movs	r0, r4
 8004344:	f7ff ff7e 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
 8004348:	e7cf      	b.n	80042ea <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	2202      	movs	r2, #2
 800434e:	4252      	negs	r2, r2
 8004350:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004352:	0020      	movs	r0, r4
 8004354:	f7fd fa14 	bl	8001780 <HAL_TIM_PeriodElapsedCallback>
 8004358:	e7cd      	b.n	80042f6 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	4a11      	ldr	r2, [pc, #68]	@ (80043a4 <HAL_TIM_IRQHandler+0x15c>)
 800435e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004360:	0020      	movs	r0, r4
 8004362:	f000 f8c4 	bl	80044ee <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004366:	05eb      	lsls	r3, r5, #23
 8004368:	d5cb      	bpl.n	8004302 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	4a0e      	ldr	r2, [pc, #56]	@ (80043a8 <HAL_TIM_IRQHandler+0x160>)
 800436e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004370:	0020      	movs	r0, r4
 8004372:	f000 f8bd 	bl	80044f0 <HAL_TIMEx_Break2Callback>
 8004376:	e7c4      	b.n	8004302 <HAL_TIM_IRQHandler+0xba>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004378:	05eb      	lsls	r3, r5, #23
 800437a:	d5c2      	bpl.n	8004302 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800437c:	0633      	lsls	r3, r6, #24
 800437e:	d5c0      	bpl.n	8004302 <HAL_TIM_IRQHandler+0xba>
 8004380:	e7f3      	b.n	800436a <HAL_TIM_IRQHandler+0x122>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	2241      	movs	r2, #65	@ 0x41
 8004386:	4252      	negs	r2, r2
 8004388:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800438a:	0020      	movs	r0, r4
 800438c:	f7ff ff5b 	bl	8004246 <HAL_TIM_TriggerCallback>
 8004390:	e7bb      	b.n	800430a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	2221      	movs	r2, #33	@ 0x21
 8004396:	4252      	negs	r2, r2
 8004398:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800439a:	0020      	movs	r0, r4
 800439c:	f000 f8a6 	bl	80044ec <HAL_TIMEx_CommutCallback>
}
 80043a0:	e7b7      	b.n	8004312 <HAL_TIM_IRQHandler+0xca>
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	ffffdf7f 	.word	0xffffdf7f
 80043a8:	fffffeff 	.word	0xfffffeff

080043ac <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ac:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ae:	4a31      	ldr	r2, [pc, #196]	@ (8004474 <TIM_Base_SetConfig+0xc8>)
 80043b0:	4290      	cmp	r0, r2
 80043b2:	d015      	beq.n	80043e0 <TIM_Base_SetConfig+0x34>
 80043b4:	4a30      	ldr	r2, [pc, #192]	@ (8004478 <TIM_Base_SetConfig+0xcc>)
 80043b6:	4290      	cmp	r0, r2
 80043b8:	d012      	beq.n	80043e0 <TIM_Base_SetConfig+0x34>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ba:	4a30      	ldr	r2, [pc, #192]	@ (800447c <TIM_Base_SetConfig+0xd0>)
 80043bc:	4290      	cmp	r0, r2
 80043be:	d03d      	beq.n	800443c <TIM_Base_SetConfig+0x90>
 80043c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004480 <TIM_Base_SetConfig+0xd4>)
 80043c2:	4290      	cmp	r0, r2
 80043c4:	d048      	beq.n	8004458 <TIM_Base_SetConfig+0xac>
 80043c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004484 <TIM_Base_SetConfig+0xd8>)
 80043c8:	4290      	cmp	r0, r2
 80043ca:	d029      	beq.n	8004420 <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	2280      	movs	r2, #128	@ 0x80
 80043ce:	4393      	bics	r3, r2
 80043d0:	694a      	ldr	r2, [r1, #20]
 80043d2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80043d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d6:	688b      	ldr	r3, [r1, #8]
 80043d8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043da:	680b      	ldr	r3, [r1, #0]
 80043dc:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043de:	e015      	b.n	800440c <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	2270      	movs	r2, #112	@ 0x70
 80043e2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80043e4:	684a      	ldr	r2, [r1, #4]
 80043e6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80043e8:	4a27      	ldr	r2, [pc, #156]	@ (8004488 <TIM_Base_SetConfig+0xdc>)
 80043ea:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ec:	68ca      	ldr	r2, [r1, #12]
 80043ee:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	2280      	movs	r2, #128	@ 0x80
 80043f2:	4393      	bics	r3, r2
 80043f4:	694a      	ldr	r2, [r1, #20]
 80043f6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80043f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fa:	688b      	ldr	r3, [r1, #8]
 80043fc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80043fe:	680b      	ldr	r3, [r1, #0]
 8004400:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <TIM_Base_SetConfig+0xc8>)
 8004404:	4298      	cmp	r0, r3
 8004406:	d101      	bne.n	800440c <TIM_Base_SetConfig+0x60>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004408:	690b      	ldr	r3, [r1, #16]
 800440a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800440c:	2301      	movs	r3, #1
 800440e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004410:	6902      	ldr	r2, [r0, #16]
 8004412:	4213      	tst	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_Base_SetConfig+0x72>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004416:	6903      	ldr	r3, [r0, #16]
 8004418:	2201      	movs	r2, #1
 800441a:	4393      	bics	r3, r2
 800441c:	6103      	str	r3, [r0, #16]
  }
}
 800441e:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <TIM_Base_SetConfig+0xdc>)
 8004422:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004424:	68ca      	ldr	r2, [r1, #12]
 8004426:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004428:	2280      	movs	r2, #128	@ 0x80
 800442a:	4393      	bics	r3, r2
 800442c:	694a      	ldr	r2, [r1, #20]
 800442e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004430:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004432:	688b      	ldr	r3, [r1, #8]
 8004434:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004436:	680b      	ldr	r3, [r1, #0]
 8004438:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800443a:	e7e5      	b.n	8004408 <TIM_Base_SetConfig+0x5c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800443c:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <TIM_Base_SetConfig+0xdc>)
 800443e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004440:	68ca      	ldr	r2, [r1, #12]
 8004442:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004444:	2280      	movs	r2, #128	@ 0x80
 8004446:	4393      	bics	r3, r2
 8004448:	694a      	ldr	r2, [r1, #20]
 800444a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800444c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444e:	688b      	ldr	r3, [r1, #8]
 8004450:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004452:	680b      	ldr	r3, [r1, #0]
 8004454:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004456:	e7d9      	b.n	800440c <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004458:	4a0b      	ldr	r2, [pc, #44]	@ (8004488 <TIM_Base_SetConfig+0xdc>)
 800445a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445c:	68ca      	ldr	r2, [r1, #12]
 800445e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	2280      	movs	r2, #128	@ 0x80
 8004462:	4393      	bics	r3, r2
 8004464:	694a      	ldr	r2, [r1, #20]
 8004466:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004468:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446a:	688b      	ldr	r3, [r1, #8]
 800446c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800446e:	680b      	ldr	r3, [r1, #0]
 8004470:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004472:	e7c9      	b.n	8004408 <TIM_Base_SetConfig+0x5c>
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40000400 	.word	0x40000400
 800447c:	40002000 	.word	0x40002000
 8004480:	40014400 	.word	0x40014400
 8004484:	40014800 	.word	0x40014800
 8004488:	fffffcff 	.word	0xfffffcff

0800448c <HAL_TIM_Base_Init>:
{
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004490:	d02a      	beq.n	80044e8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004492:	233d      	movs	r3, #61	@ 0x3d
 8004494:	5cc3      	ldrb	r3, [r0, r3]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d020      	beq.n	80044dc <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800449a:	253d      	movs	r5, #61	@ 0x3d
 800449c:	2302      	movs	r3, #2
 800449e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a0:	0021      	movs	r1, r4
 80044a2:	c901      	ldmia	r1!, {r0}
 80044a4:	f7ff ff82 	bl	80043ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	2301      	movs	r3, #1
 80044aa:	2248      	movs	r2, #72	@ 0x48
 80044ac:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	3a0a      	subs	r2, #10
 80044b0:	54a3      	strb	r3, [r4, r2]
 80044b2:	3201      	adds	r2, #1
 80044b4:	54a3      	strb	r3, [r4, r2]
 80044b6:	3201      	adds	r2, #1
 80044b8:	54a3      	strb	r3, [r4, r2]
 80044ba:	3201      	adds	r2, #1
 80044bc:	54a3      	strb	r3, [r4, r2]
 80044be:	3201      	adds	r2, #1
 80044c0:	54a3      	strb	r3, [r4, r2]
 80044c2:	3201      	adds	r2, #1
 80044c4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	3201      	adds	r2, #1
 80044c8:	54a3      	strb	r3, [r4, r2]
 80044ca:	3201      	adds	r2, #1
 80044cc:	54a3      	strb	r3, [r4, r2]
 80044ce:	3201      	adds	r2, #1
 80044d0:	54a3      	strb	r3, [r4, r2]
 80044d2:	3201      	adds	r2, #1
 80044d4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80044d6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80044d8:	2000      	movs	r0, #0
}
 80044da:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80044dc:	333c      	adds	r3, #60	@ 0x3c
 80044de:	2200      	movs	r2, #0
 80044e0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80044e2:	f7fd fe11 	bl	8002108 <HAL_TIM_Base_MspInit>
 80044e6:	e7d8      	b.n	800449a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80044e8:	2001      	movs	r0, #1
 80044ea:	e7f6      	b.n	80044da <HAL_TIM_Base_Init+0x4e>

080044ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ec:	4770      	bx	lr

080044ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044f0:	4770      	bx	lr
	...

080044f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044f4:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fa:	2201      	movs	r2, #1
 80044fc:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004500:	6801      	ldr	r1, [r0, #0]
 8004502:	680b      	ldr	r3, [r1, #0]
 8004504:	25c0      	movs	r5, #192	@ 0xc0
 8004506:	43ab      	bics	r3, r5
 8004508:	600b      	str	r3, [r1, #0]
 800450a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004516:	6802      	ldr	r2, [r0, #0]
 8004518:	6893      	ldr	r3, [r2, #8]
 800451a:	4c04      	ldr	r4, [pc, #16]	@ (800452c <UART_EndTxTransfer+0x38>)
 800451c:	4023      	ands	r3, r4
 800451e:	6093      	str	r3, [r2, #8]
 8004520:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004524:	2388      	movs	r3, #136	@ 0x88
 8004526:	2220      	movs	r2, #32
 8004528:	50c2      	str	r2, [r0, r3]
}
 800452a:	bd30      	pop	{r4, r5, pc}
 800452c:	ff7fffff 	.word	0xff7fffff

08004530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004530:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004536:	2201      	movs	r2, #1
 8004538:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800453c:	6801      	ldr	r1, [r0, #0]
 800453e:	680b      	ldr	r3, [r1, #0]
 8004540:	4d12      	ldr	r5, [pc, #72]	@ (800458c <UART_EndRxTransfer+0x5c>)
 8004542:	402b      	ands	r3, r5
 8004544:	600b      	str	r3, [r1, #0]
 8004546:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004552:	6802      	ldr	r2, [r0, #0]
 8004554:	6893      	ldr	r3, [r2, #8]
 8004556:	4c0e      	ldr	r4, [pc, #56]	@ (8004590 <UART_EndRxTransfer+0x60>)
 8004558:	4023      	ands	r3, r4
 800455a:	6093      	str	r3, [r2, #8]
 800455c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004560:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d006      	beq.n	8004574 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004566:	238c      	movs	r3, #140	@ 0x8c
 8004568:	2220      	movs	r2, #32
 800456a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456c:	2300      	movs	r3, #0
 800456e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004570:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8004572:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004574:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004578:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	6802      	ldr	r2, [r0, #0]
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	2410      	movs	r4, #16
 8004582:	43a3      	bics	r3, r4
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	f381 8810 	msr	PRIMASK, r1
}
 800458a:	e7ec      	b.n	8004566 <UART_EndRxTransfer+0x36>
 800458c:	fffffedf 	.word	0xfffffedf
 8004590:	effffffe 	.word	0xeffffffe

08004594 <HAL_UART_DeInit>:
{
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004598:	d01b      	beq.n	80045d2 <HAL_UART_DeInit+0x3e>
  huart->gState = HAL_UART_STATE_BUSY;
 800459a:	2688      	movs	r6, #136	@ 0x88
 800459c:	2324      	movs	r3, #36	@ 0x24
 800459e:	5183      	str	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	2101      	movs	r1, #1
 80045a6:	438b      	bics	r3, r1
 80045a8:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 80045aa:	6803      	ldr	r3, [r0, #0]
 80045ac:	2500      	movs	r5, #0
 80045ae:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80045b0:	6803      	ldr	r3, [r0, #0]
 80045b2:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80045b4:	6803      	ldr	r3, [r0, #0]
 80045b6:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80045b8:	f7fd fe4c 	bl	8002254 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	2390      	movs	r3, #144	@ 0x90
 80045be:	50e5      	str	r5, [r4, r3]
  huart->gState = HAL_UART_STATE_RESET;
 80045c0:	51a5      	str	r5, [r4, r6]
  huart->RxState = HAL_UART_STATE_RESET;
 80045c2:	3b04      	subs	r3, #4
 80045c4:	50e5      	str	r5, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	66e5      	str	r5, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045c8:	6725      	str	r5, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80045ca:	3b08      	subs	r3, #8
 80045cc:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80045ce:	2000      	movs	r0, #0
}
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80045d2:	2001      	movs	r0, #1
 80045d4:	e7fc      	b.n	80045d0 <HAL_UART_DeInit+0x3c>
	...

080045d8 <HAL_UART_Transmit_DMA>:
{
 80045d8:	b510      	push	{r4, lr}
 80045da:	0004      	movs	r4, r0
 80045dc:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80045de:	2288      	movs	r2, #136	@ 0x88
 80045e0:	5882      	ldr	r2, [r0, r2]
 80045e2:	2a20      	cmp	r2, #32
 80045e4:	d149      	bne.n	800467a <HAL_UART_Transmit_DMA+0xa2>
    if ((pData == NULL) || (Size == 0U))
 80045e6:	2900      	cmp	r1, #0
 80045e8:	d049      	beq.n	800467e <HAL_UART_Transmit_DMA+0xa6>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d049      	beq.n	8004682 <HAL_UART_Transmit_DMA+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ee:	2280      	movs	r2, #128	@ 0x80
 80045f0:	0152      	lsls	r2, r2, #5
 80045f2:	6880      	ldr	r0, [r0, #8]
 80045f4:	4290      	cmp	r0, r2
 80045f6:	d028      	beq.n	800464a <HAL_UART_Transmit_DMA+0x72>
    huart->pTxBuffPtr  = pData;
 80045f8:	6521      	str	r1, [r4, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80045fa:	2254      	movs	r2, #84	@ 0x54
 80045fc:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80045fe:	3202      	adds	r2, #2
 8004600:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	323a      	adds	r2, #58	@ 0x3a
 8004604:	2100      	movs	r1, #0
 8004606:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004608:	3a08      	subs	r2, #8
 800460a:	3121      	adds	r1, #33	@ 0x21
 800460c:	50a1      	str	r1, [r4, r2]
    if (huart->hdmatx != NULL)
 800460e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8004610:	2a00      	cmp	r2, #0
 8004612:	d021      	beq.n	8004658 <HAL_UART_Transmit_DMA+0x80>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004614:	491c      	ldr	r1, [pc, #112]	@ (8004688 <HAL_UART_Transmit_DMA+0xb0>)
 8004616:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004618:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800461a:	491c      	ldr	r1, [pc, #112]	@ (800468c <HAL_UART_Transmit_DMA+0xb4>)
 800461c:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800461e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8004620:	491b      	ldr	r1, [pc, #108]	@ (8004690 <HAL_UART_Transmit_DMA+0xb8>)
 8004622:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8004624:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8004626:	2100      	movs	r1, #0
 8004628:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800462a:	6822      	ldr	r2, [r4, #0]
 800462c:	3228      	adds	r2, #40	@ 0x28
 800462e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004630:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8004632:	f7fe fd97 	bl	8003164 <HAL_DMA_Start_IT>
 8004636:	2800      	cmp	r0, #0
 8004638:	d00e      	beq.n	8004658 <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800463a:	2390      	movs	r3, #144	@ 0x90
 800463c:	2210      	movs	r2, #16
 800463e:	50e2      	str	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8004640:	3b08      	subs	r3, #8
 8004642:	3210      	adds	r2, #16
 8004644:	50e2      	str	r2, [r4, r3]
        return HAL_ERROR;
 8004646:	2001      	movs	r0, #1
 8004648:	e018      	b.n	800467c <HAL_UART_Transmit_DMA+0xa4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	6922      	ldr	r2, [r4, #16]
 800464c:	2a00      	cmp	r2, #0
 800464e:	d1d3      	bne.n	80045f8 <HAL_UART_Transmit_DMA+0x20>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004650:	07ca      	lsls	r2, r1, #31
 8004652:	d5d1      	bpl.n	80045f8 <HAL_UART_Transmit_DMA+0x20>
        return  HAL_ERROR;
 8004654:	2001      	movs	r0, #1
 8004656:	e011      	b.n	800467c <HAL_UART_Transmit_DMA+0xa4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	2240      	movs	r2, #64	@ 0x40
 800465c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	2301      	movs	r3, #1
 8004664:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	6893      	ldr	r3, [r2, #8]
 800466c:	2080      	movs	r0, #128	@ 0x80
 800466e:	4303      	orrs	r3, r0
 8004670:	6093      	str	r3, [r2, #8]
 8004672:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8004676:	2000      	movs	r0, #0
 8004678:	e000      	b.n	800467c <HAL_UART_Transmit_DMA+0xa4>
    return HAL_BUSY;
 800467a:	2002      	movs	r0, #2
}
 800467c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800467e:	2001      	movs	r0, #1
 8004680:	e7fc      	b.n	800467c <HAL_UART_Transmit_DMA+0xa4>
 8004682:	2001      	movs	r0, #1
 8004684:	e7fa      	b.n	800467c <HAL_UART_Transmit_DMA+0xa4>
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	08004747 	.word	0x08004747
 800468c:	08004793 	.word	0x08004793
 8004690:	080047a3 	.word	0x080047a3

08004694 <HAL_UART_DMAStop>:
{
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	0004      	movs	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004698:	2388      	movs	r3, #136	@ 0x88
 800469a:	58c2      	ldr	r2, [r0, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800469c:	3304      	adds	r3, #4
 800469e:	58c5      	ldr	r5, [r0, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80046a0:	6803      	ldr	r3, [r0, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	d501      	bpl.n	80046ac <HAL_UART_DMAStop+0x18>
 80046a8:	2a21      	cmp	r2, #33	@ 0x21
 80046aa:	d007      	beq.n	80046bc <HAL_UART_DMAStop+0x28>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80046b0:	2000      	movs	r0, #0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80046b2:	065b      	lsls	r3, r3, #25
 80046b4:	d501      	bpl.n	80046ba <HAL_UART_DMAStop+0x26>
 80046b6:	2d22      	cmp	r5, #34	@ 0x22
 80046b8:	d021      	beq.n	80046fe <HAL_UART_DMAStop+0x6a>
}
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	2301      	movs	r3, #1
 80046c2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046c6:	6802      	ldr	r2, [r0, #0]
 80046c8:	6893      	ldr	r3, [r2, #8]
 80046ca:	2080      	movs	r0, #128	@ 0x80
 80046cc:	4383      	bics	r3, r0
 80046ce:	6093      	str	r3, [r2, #8]
 80046d0:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmatx != NULL)
 80046d4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_UART_DMAStop+0x4e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80046da:	f7fe fd91 	bl	8003200 <HAL_DMA_Abort>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d103      	bne.n	80046ea <HAL_UART_DMAStop+0x56>
    UART_EndTxTransfer(huart);
 80046e2:	0020      	movs	r0, r4
 80046e4:	f7ff ff06 	bl	80044f4 <UART_EndTxTransfer>
 80046e8:	e7e0      	b.n	80046ac <HAL_UART_DMAStop+0x18>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80046ea:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80046ec:	f7fe fe6e 	bl	80033cc <HAL_DMA_GetError>
 80046f0:	2820      	cmp	r0, #32
 80046f2:	d1f6      	bne.n	80046e2 <HAL_UART_DMAStop+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046f4:	2390      	movs	r3, #144	@ 0x90
 80046f6:	2210      	movs	r2, #16
 80046f8:	50e2      	str	r2, [r4, r3]
          return HAL_TIMEOUT;
 80046fa:	381d      	subs	r0, #29
 80046fc:	e7dd      	b.n	80046ba <HAL_UART_DMAStop+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	2301      	movs	r3, #1
 8004704:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	6893      	ldr	r3, [r2, #8]
 800470c:	3040      	adds	r0, #64	@ 0x40
 800470e:	4383      	bics	r3, r0
 8004710:	6093      	str	r3, [r2, #8]
 8004712:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmarx != NULL)
 8004716:	2380      	movs	r3, #128	@ 0x80
 8004718:	58e0      	ldr	r0, [r4, r3]
 800471a:	2800      	cmp	r0, #0
 800471c:	d003      	beq.n	8004726 <HAL_UART_DMAStop+0x92>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800471e:	f7fe fd6f 	bl	8003200 <HAL_DMA_Abort>
 8004722:	2800      	cmp	r0, #0
 8004724:	d104      	bne.n	8004730 <HAL_UART_DMAStop+0x9c>
    UART_EndRxTransfer(huart);
 8004726:	0020      	movs	r0, r4
 8004728:	f7ff ff02 	bl	8004530 <UART_EndRxTransfer>
  return HAL_OK;
 800472c:	2000      	movs	r0, #0
 800472e:	e7c4      	b.n	80046ba <HAL_UART_DMAStop+0x26>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	58e0      	ldr	r0, [r4, r3]
 8004734:	f7fe fe4a 	bl	80033cc <HAL_DMA_GetError>
 8004738:	2820      	cmp	r0, #32
 800473a:	d1f4      	bne.n	8004726 <HAL_UART_DMAStop+0x92>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800473c:	2390      	movs	r3, #144	@ 0x90
 800473e:	2210      	movs	r2, #16
 8004740:	50e2      	str	r2, [r4, r3]
          return HAL_TIMEOUT;
 8004742:	381d      	subs	r0, #29
 8004744:	e7b9      	b.n	80046ba <HAL_UART_DMAStop+0x26>

08004746 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004746:	b510      	push	{r4, lr}
 8004748:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800474a:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	069b      	lsls	r3, r3, #26
 8004752:	d41a      	bmi.n	800478a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8004754:	2356      	movs	r3, #86	@ 0x56
 8004756:	2200      	movs	r2, #0
 8004758:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	3201      	adds	r2, #1
 8004760:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004764:	6801      	ldr	r1, [r0, #0]
 8004766:	688b      	ldr	r3, [r1, #8]
 8004768:	2480      	movs	r4, #128	@ 0x80
 800476a:	43a3      	bics	r3, r4
 800476c:	608b      	str	r3, [r1, #8]
 800476e:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004772:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800477a:	6802      	ldr	r2, [r0, #0]
 800477c:	6813      	ldr	r3, [r2, #0]
 800477e:	2040      	movs	r0, #64	@ 0x40
 8004780:	4303      	orrs	r3, r0
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004788:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 800478a:	f7fc ff93 	bl	80016b4 <HAL_UART_TxCpltCallback>
}
 800478e:	e7fb      	b.n	8004788 <UART_DMATransmitCplt+0x42>

08004790 <HAL_UART_TxHalfCpltCallback>:
}
 8004790:	4770      	bx	lr

08004792 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004792:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004794:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004796:	f7ff fffb 	bl	8004790 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800479a:	bd10      	pop	{r4, pc}

0800479c <HAL_UART_RxCpltCallback>:
}
 800479c:	4770      	bx	lr

0800479e <HAL_UART_RxHalfCpltCallback>:
}
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_ErrorCallback>:
}
 80047a0:	4770      	bx	lr

080047a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047a2:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047a6:	2388      	movs	r3, #136	@ 0x88
 80047a8:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047aa:	3304      	adds	r3, #4
 80047ac:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	d501      	bpl.n	80047ba <UART_DMAError+0x18>
 80047b6:	2a21      	cmp	r2, #33	@ 0x21
 80047b8:	d00e      	beq.n	80047d8 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	065b      	lsls	r3, r3, #25
 80047c0:	d501      	bpl.n	80047c6 <UART_DMAError+0x24>
 80047c2:	2d22      	cmp	r5, #34	@ 0x22
 80047c4:	d00f      	beq.n	80047e6 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047c6:	2290      	movs	r2, #144	@ 0x90
 80047c8:	58a3      	ldr	r3, [r4, r2]
 80047ca:	2110      	movs	r1, #16
 80047cc:	430b      	orrs	r3, r1
 80047ce:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d0:	0020      	movs	r0, r4
 80047d2:	f7ff ffe5 	bl	80047a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 80047d8:	2356      	movs	r3, #86	@ 0x56
 80047da:	2200      	movs	r2, #0
 80047dc:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 80047de:	0020      	movs	r0, r4
 80047e0:	f7ff fe88 	bl	80044f4 <UART_EndTxTransfer>
 80047e4:	e7e9      	b.n	80047ba <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80047e6:	235e      	movs	r3, #94	@ 0x5e
 80047e8:	2200      	movs	r2, #0
 80047ea:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80047ec:	0020      	movs	r0, r4
 80047ee:	f7ff fe9f 	bl	8004530 <UART_EndRxTransfer>
 80047f2:	e7e8      	b.n	80047c6 <UART_DMAError+0x24>

080047f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047f4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047f6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	225e      	movs	r2, #94	@ 0x5e
 80047fc:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80047fe:	3a08      	subs	r2, #8
 8004800:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004802:	f7ff ffcd 	bl	80047a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004806:	bd10      	pop	{r4, pc}

08004808 <HAL_UART_IRQHandler>:
{
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800480c:	6802      	ldr	r2, [r0, #0]
 800480e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004810:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004812:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004814:	4dbb      	ldr	r5, [pc, #748]	@ (8004b04 <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 8004816:	422b      	tst	r3, r5
 8004818:	d10e      	bne.n	8004838 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800481a:	069d      	lsls	r5, r3, #26
 800481c:	d512      	bpl.n	8004844 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800481e:	2520      	movs	r5, #32
 8004820:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004822:	2680      	movs	r6, #128	@ 0x80
 8004824:	0576      	lsls	r6, r6, #21
 8004826:	4006      	ands	r6, r0
 8004828:	4335      	orrs	r5, r6
 800482a:	d00b      	beq.n	8004844 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 800482c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02a      	beq.n	8004888 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 8004832:	0020      	movs	r0, r4
 8004834:	4798      	blx	r3
 8004836:	e027      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004838:	4eb3      	ldr	r6, [pc, #716]	@ (8004b08 <HAL_UART_IRQHandler+0x300>)
 800483a:	4006      	ands	r6, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800483c:	4db3      	ldr	r5, [pc, #716]	@ (8004b0c <HAL_UART_IRQHandler+0x304>)
 800483e:	400d      	ands	r5, r1
 8004840:	4335      	orrs	r5, r6
 8004842:	d122      	bne.n	800488a <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8004846:	2d01      	cmp	r5, #1
 8004848:	d100      	bne.n	800484c <HAL_UART_IRQHandler+0x44>
 800484a:	e0ad      	b.n	80049a8 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800484c:	02dd      	lsls	r5, r3, #11
 800484e:	d502      	bpl.n	8004856 <HAL_UART_IRQHandler+0x4e>
 8004850:	0245      	lsls	r5, r0, #9
 8004852:	d500      	bpl.n	8004856 <HAL_UART_IRQHandler+0x4e>
 8004854:	e147      	b.n	8004ae6 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004856:	061a      	lsls	r2, r3, #24
 8004858:	d507      	bpl.n	800486a <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800485a:	2280      	movs	r2, #128	@ 0x80
 800485c:	400a      	ands	r2, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800485e:	2580      	movs	r5, #128	@ 0x80
 8004860:	042d      	lsls	r5, r5, #16
 8004862:	4028      	ands	r0, r5
 8004864:	4302      	orrs	r2, r0
 8004866:	d000      	beq.n	800486a <HAL_UART_IRQHandler+0x62>
 8004868:	e144      	b.n	8004af4 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800486a:	065a      	lsls	r2, r3, #25
 800486c:	d502      	bpl.n	8004874 <HAL_UART_IRQHandler+0x6c>
 800486e:	064a      	lsls	r2, r1, #25
 8004870:	d500      	bpl.n	8004874 <HAL_UART_IRQHandler+0x6c>
 8004872:	e155      	b.n	8004b20 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004874:	021a      	lsls	r2, r3, #8
 8004876:	d502      	bpl.n	800487e <HAL_UART_IRQHandler+0x76>
 8004878:	004a      	lsls	r2, r1, #1
 800487a:	d500      	bpl.n	800487e <HAL_UART_IRQHandler+0x76>
 800487c:	e165      	b.n	8004b4a <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	d502      	bpl.n	8004888 <HAL_UART_IRQHandler+0x80>
 8004882:	2900      	cmp	r1, #0
 8004884:	da00      	bge.n	8004888 <HAL_UART_IRQHandler+0x80>
 8004886:	e164      	b.n	8004b52 <HAL_UART_IRQHandler+0x34a>
}
 8004888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800488a:	07dd      	lsls	r5, r3, #31
 800488c:	d507      	bpl.n	800489e <HAL_UART_IRQHandler+0x96>
 800488e:	05cd      	lsls	r5, r1, #23
 8004890:	d505      	bpl.n	800489e <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004892:	2701      	movs	r7, #1
 8004894:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004896:	2590      	movs	r5, #144	@ 0x90
 8004898:	5962      	ldr	r2, [r4, r5]
 800489a:	433a      	orrs	r2, r7
 800489c:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489e:	079a      	lsls	r2, r3, #30
 80048a0:	d56e      	bpl.n	8004980 <HAL_UART_IRQHandler+0x178>
 80048a2:	07c2      	lsls	r2, r0, #31
 80048a4:	d511      	bpl.n	80048ca <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	2502      	movs	r5, #2
 80048aa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ac:	2790      	movs	r7, #144	@ 0x90
 80048ae:	59e2      	ldr	r2, [r4, r7]
 80048b0:	3502      	adds	r5, #2
 80048b2:	432a      	orrs	r2, r5
 80048b4:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b6:	421d      	tst	r5, r3
 80048b8:	d007      	beq.n	80048ca <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	2504      	movs	r5, #4
 80048be:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c0:	358c      	adds	r5, #140	@ 0x8c
 80048c2:	5962      	ldr	r2, [r4, r5]
 80048c4:	2702      	movs	r7, #2
 80048c6:	433a      	orrs	r2, r7
 80048c8:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048ca:	071a      	lsls	r2, r3, #28
 80048cc:	d50a      	bpl.n	80048e4 <HAL_UART_IRQHandler+0xdc>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048ce:	2220      	movs	r2, #32
 80048d0:	400a      	ands	r2, r1
 80048d2:	4332      	orrs	r2, r6
 80048d4:	d006      	beq.n	80048e4 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	2608      	movs	r6, #8
 80048da:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048dc:	2590      	movs	r5, #144	@ 0x90
 80048de:	5962      	ldr	r2, [r4, r5]
 80048e0:	4332      	orrs	r2, r6
 80048e2:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048e4:	051a      	lsls	r2, r3, #20
 80048e6:	d50a      	bpl.n	80048fe <HAL_UART_IRQHandler+0xf6>
 80048e8:	014a      	lsls	r2, r1, #5
 80048ea:	d508      	bpl.n	80048fe <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	2580      	movs	r5, #128	@ 0x80
 80048f0:	012d      	lsls	r5, r5, #4
 80048f2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048f4:	2590      	movs	r5, #144	@ 0x90
 80048f6:	5962      	ldr	r2, [r4, r5]
 80048f8:	2620      	movs	r6, #32
 80048fa:	4332      	orrs	r2, r6
 80048fc:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048fe:	2290      	movs	r2, #144	@ 0x90
 8004900:	58a2      	ldr	r2, [r4, r2]
 8004902:	2a00      	cmp	r2, #0
 8004904:	d0c0      	beq.n	8004888 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004906:	069b      	lsls	r3, r3, #26
 8004908:	d50b      	bpl.n	8004922 <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800490a:	2320      	movs	r3, #32
 800490c:	400b      	ands	r3, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800490e:	2280      	movs	r2, #128	@ 0x80
 8004910:	0552      	lsls	r2, r2, #21
 8004912:	4002      	ands	r2, r0
 8004914:	4313      	orrs	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 8004918:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 800491e:	0020      	movs	r0, r4
 8004920:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004922:	2390      	movs	r3, #144	@ 0x90
 8004924:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	2340      	movs	r3, #64	@ 0x40
 800492c:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800492e:	2228      	movs	r2, #40	@ 0x28
 8004930:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004932:	4313      	orrs	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 8004936:	0020      	movs	r0, r4
 8004938:	f7ff fdfa 	bl	8004530 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	065b      	lsls	r3, r3, #25
 8004942:	d526      	bpl.n	8004992 <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004944:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	2301      	movs	r3, #1
 800494a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	6893      	ldr	r3, [r2, #8]
 8004952:	2040      	movs	r0, #64	@ 0x40
 8004954:	4383      	bics	r3, r0
 8004956:	6093      	str	r3, [r2, #8]
 8004958:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	58e3      	ldr	r3, [r4, r3]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004964:	4a6a      	ldr	r2, [pc, #424]	@ (8004b10 <HAL_UART_IRQHandler+0x308>)
 8004966:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	58e0      	ldr	r0, [r4, r3]
 800496c:	f7fe fc88 	bl	8003280 <HAL_DMA_Abort_IT>
 8004970:	2800      	cmp	r0, #0
 8004972:	d100      	bne.n	8004976 <HAL_UART_IRQHandler+0x16e>
 8004974:	e788      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	58e0      	ldr	r0, [r4, r3]
 800497a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800497c:	4798      	blx	r3
 800497e:	e783      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004980:	075a      	lsls	r2, r3, #29
 8004982:	d5a2      	bpl.n	80048ca <HAL_UART_IRQHandler+0xc2>
 8004984:	07c2      	lsls	r2, r0, #31
 8004986:	d5a0      	bpl.n	80048ca <HAL_UART_IRQHandler+0xc2>
 8004988:	e797      	b.n	80048ba <HAL_UART_IRQHandler+0xb2>
            HAL_UART_ErrorCallback(huart);
 800498a:	0020      	movs	r0, r4
 800498c:	f7ff ff08 	bl	80047a0 <HAL_UART_ErrorCallback>
 8004990:	e77a      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 8004992:	0020      	movs	r0, r4
 8004994:	f7ff ff04 	bl	80047a0 <HAL_UART_ErrorCallback>
 8004998:	e776      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 800499a:	0020      	movs	r0, r4
 800499c:	f7ff ff00 	bl	80047a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a0:	2390      	movs	r3, #144	@ 0x90
 80049a2:	2200      	movs	r2, #0
 80049a4:	50e2      	str	r2, [r4, r3]
 80049a6:	e76f      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049a8:	06dd      	lsls	r5, r3, #27
 80049aa:	d400      	bmi.n	80049ae <HAL_UART_IRQHandler+0x1a6>
 80049ac:	e74e      	b.n	800484c <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049ae:	06cd      	lsls	r5, r1, #27
 80049b0:	d400      	bmi.n	80049b4 <HAL_UART_IRQHandler+0x1ac>
 80049b2:	e74b      	b.n	800484c <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049b4:	2310      	movs	r3, #16
 80049b6:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	065b      	lsls	r3, r3, #25
 80049be:	d555      	bpl.n	8004a6c <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	58e2      	ldr	r2, [r4, r3]
 80049c4:	6813      	ldr	r3, [r2, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d100      	bne.n	80049d0 <HAL_UART_IRQHandler+0x1c8>
 80049ce:	e75b      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d0:	215c      	movs	r1, #92	@ 0x5c
 80049d2:	5a61      	ldrh	r1, [r4, r1]
 80049d4:	4299      	cmp	r1, r3
 80049d6:	d800      	bhi.n	80049da <HAL_UART_IRQHandler+0x1d2>
 80049d8:	e756      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 80049da:	215e      	movs	r1, #94	@ 0x5e
 80049dc:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	069b      	lsls	r3, r3, #26
 80049e4:	d50b      	bpl.n	80049fe <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049e6:	2302      	movs	r3, #2
 80049e8:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ea:	335c      	adds	r3, #92	@ 0x5c
 80049ec:	5ae3      	ldrh	r3, [r4, r3]
 80049ee:	225c      	movs	r2, #92	@ 0x5c
 80049f0:	5aa1      	ldrh	r1, [r4, r2]
 80049f2:	1ac9      	subs	r1, r1, r3
 80049f4:	b289      	uxth	r1, r1
 80049f6:	0020      	movs	r0, r4
 80049f8:	f7fc fe84 	bl	8001704 <HAL_UARTEx_RxEventCallback>
 80049fc:	e744      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a02:	2301      	movs	r3, #1
 8004a04:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a08:	6821      	ldr	r1, [r4, #0]
 8004a0a:	680a      	ldr	r2, [r1, #0]
 8004a0c:	4d41      	ldr	r5, [pc, #260]	@ (8004b14 <HAL_UART_IRQHandler+0x30c>)
 8004a0e:	402a      	ands	r2, r5
 8004a10:	600a      	str	r2, [r1, #0]
 8004a12:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a16:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	6821      	ldr	r1, [r4, #0]
 8004a20:	688a      	ldr	r2, [r1, #8]
 8004a22:	439a      	bics	r2, r3
 8004a24:	608a      	str	r2, [r1, #8]
 8004a26:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a32:	6821      	ldr	r1, [r4, #0]
 8004a34:	688a      	ldr	r2, [r1, #8]
 8004a36:	3542      	adds	r5, #66	@ 0x42
 8004a38:	35ff      	adds	r5, #255	@ 0xff
 8004a3a:	43aa      	bics	r2, r5
 8004a3c:	608a      	str	r2, [r1, #8]
 8004a3e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8004a42:	228c      	movs	r2, #140	@ 0x8c
 8004a44:	2120      	movs	r1, #32
 8004a46:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	2200      	movs	r2, #0
 8004a4a:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	2010      	movs	r0, #16
 8004a5a:	4383      	bics	r3, r0
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a62:	2380      	movs	r3, #128	@ 0x80
 8004a64:	58e0      	ldr	r0, [r4, r3]
 8004a66:	f7fe fbcb 	bl	8003200 <HAL_DMA_Abort>
 8004a6a:	e7bc      	b.n	80049e6 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a6c:	215e      	movs	r1, #94	@ 0x5e
 8004a6e:	5a62      	ldrh	r2, [r4, r1]
 8004a70:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8004a72:	5a63      	ldrh	r3, [r4, r1]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d100      	bne.n	8004a7c <HAL_UART_IRQHandler+0x274>
 8004a7a:	e705      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a7c:	235c      	movs	r3, #92	@ 0x5c
 8004a7e:	5ae1      	ldrh	r1, [r4, r3]
 8004a80:	1a89      	subs	r1, r1, r2
 8004a82:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d100      	bne.n	8004a8a <HAL_UART_IRQHandler+0x282>
 8004a88:	e6fe      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	3b5b      	subs	r3, #91	@ 0x5b
 8004a90:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	6802      	ldr	r2, [r0, #0]
 8004a98:	4e1f      	ldr	r6, [pc, #124]	@ (8004b18 <HAL_UART_IRQHandler+0x310>)
 8004a9a:	4032      	ands	r2, r6
 8004a9c:	6002      	str	r2, [r0, #0]
 8004a9e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004aaa:	6820      	ldr	r0, [r4, #0]
 8004aac:	6882      	ldr	r2, [r0, #8]
 8004aae:	4e1b      	ldr	r6, [pc, #108]	@ (8004b1c <HAL_UART_IRQHandler+0x314>)
 8004ab0:	4032      	ands	r2, r6
 8004ab2:	6082      	str	r2, [r0, #8]
 8004ab4:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	228c      	movs	r2, #140	@ 0x8c
 8004aba:	2020      	movs	r0, #32
 8004abc:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	2200      	movs	r2, #0
 8004ac0:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8004ac2:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	2510      	movs	r5, #16
 8004ad2:	43ab      	bics	r3, r5
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ada:	2302      	movs	r3, #2
 8004adc:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ade:	0020      	movs	r0, r4
 8004ae0:	f7fc fe10 	bl	8001704 <HAL_UARTEx_RxEventCallback>
 8004ae4:	e6d0      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ae6:	2380      	movs	r3, #128	@ 0x80
 8004ae8:	035b      	lsls	r3, r3, #13
 8004aea:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004aec:	0020      	movs	r0, r4
 8004aee:	f000 fb37 	bl	8005160 <HAL_UARTEx_WakeupCallback>
    return;
 8004af2:	e6c9      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 8004af4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d100      	bne.n	8004afc <HAL_UART_IRQHandler+0x2f4>
 8004afa:	e6c5      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 8004afc:	0020      	movs	r0, r4
 8004afe:	4798      	blx	r3
 8004b00:	e6c2      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	0000080f 	.word	0x0000080f
 8004b08:	10000001 	.word	0x10000001
 8004b0c:	04000120 	.word	0x04000120
 8004b10:	080047f5 	.word	0x080047f5
 8004b14:	fffffeff 	.word	0xfffffeff
 8004b18:	fffffedf 	.word	0xfffffedf
 8004b1c:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	2301      	movs	r3, #1
 8004b26:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	6813      	ldr	r3, [r2, #0]
 8004b2e:	2040      	movs	r0, #64	@ 0x40
 8004b30:	4383      	bics	r3, r0
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	2388      	movs	r3, #136	@ 0x88
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b42:	0020      	movs	r0, r4
 8004b44:	f7fc fdb6 	bl	80016b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b48:	e69e      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004b4a:	0020      	movs	r0, r4
 8004b4c:	f000 fb0a 	bl	8005164 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004b50:	e69a      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004b52:	0020      	movs	r0, r4
 8004b54:	f000 fb05 	bl	8005162 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8004b58:	e696      	b.n	8004888 <HAL_UART_IRQHandler+0x80>
 8004b5a:	46c0      	nop			@ (mov r8, r8)

08004b5c <UART_DMARxHalfCplt>:
{
 8004b5c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b5e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b60:	2301      	movs	r3, #1
 8004b62:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d002      	beq.n	8004b70 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b6a:	f7ff fe18 	bl	800479e <HAL_UART_RxHalfCpltCallback>
}
 8004b6e:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b70:	335b      	adds	r3, #91	@ 0x5b
 8004b72:	5ac1      	ldrh	r1, [r0, r3]
 8004b74:	0849      	lsrs	r1, r1, #1
 8004b76:	f7fc fdc5 	bl	8001704 <HAL_UARTEx_RxEventCallback>
 8004b7a:	e7f8      	b.n	8004b6e <UART_DMARxHalfCplt+0x12>

08004b7c <UART_DMAReceiveCplt>:
{
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b80:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	069b      	lsls	r3, r3, #26
 8004b88:	d429      	bmi.n	8004bde <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8004b8a:	235e      	movs	r3, #94	@ 0x5e
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b90:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b94:	3b5d      	subs	r3, #93	@ 0x5d
 8004b96:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b9a:	6801      	ldr	r1, [r0, #0]
 8004b9c:	680a      	ldr	r2, [r1, #0]
 8004b9e:	4d1c      	ldr	r5, [pc, #112]	@ (8004c10 <UART_DMAReceiveCplt+0x94>)
 8004ba0:	402a      	ands	r2, r5
 8004ba2:	600a      	str	r2, [r1, #0]
 8004ba4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bac:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	6801      	ldr	r1, [r0, #0]
 8004bb2:	688a      	ldr	r2, [r1, #8]
 8004bb4:	439a      	bics	r2, r3
 8004bb6:	608a      	str	r2, [r1, #8]
 8004bb8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc4:	6802      	ldr	r2, [r0, #0]
 8004bc6:	6893      	ldr	r3, [r2, #8]
 8004bc8:	2440      	movs	r4, #64	@ 0x40
 8004bca:	43a3      	bics	r3, r4
 8004bcc:	6093      	str	r3, [r2, #8]
 8004bce:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	238c      	movs	r3, #140	@ 0x8c
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d007      	beq.n	8004bee <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bde:	2300      	movs	r3, #0
 8004be0:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d00e      	beq.n	8004c06 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8004be8:	f7ff fdd8 	bl	800479c <HAL_UART_RxCpltCallback>
}
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf6:	6802      	ldr	r2, [r0, #0]
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	3c30      	subs	r4, #48	@ 0x30
 8004bfc:	43a3      	bics	r3, r4
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	f381 8810 	msr	PRIMASK, r1
}
 8004c04:	e7eb      	b.n	8004bde <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c06:	335b      	adds	r3, #91	@ 0x5b
 8004c08:	5ac1      	ldrh	r1, [r0, r3]
 8004c0a:	f7fc fd7b 	bl	8001704 <HAL_UARTEx_RxEventCallback>
 8004c0e:	e7ed      	b.n	8004bec <UART_DMAReceiveCplt+0x70>
 8004c10:	fffffeff 	.word	0xfffffeff

08004c14 <UART_SetConfig>:
{
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c18:	6801      	ldr	r1, [r0, #0]
 8004c1a:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c1c:	6883      	ldr	r3, [r0, #8]
 8004c1e:	6900      	ldr	r0, [r0, #16]
 8004c20:	4303      	orrs	r3, r0
 8004c22:	6960      	ldr	r0, [r4, #20]
 8004c24:	4303      	orrs	r3, r0
 8004c26:	69e0      	ldr	r0, [r4, #28]
 8004c28:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c2a:	4853      	ldr	r0, [pc, #332]	@ (8004d78 <UART_SetConfig+0x164>)
 8004c2c:	4002      	ands	r2, r0
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	6853      	ldr	r3, [r2, #4]
 8004c36:	4951      	ldr	r1, [pc, #324]	@ (8004d7c <UART_SetConfig+0x168>)
 8004c38:	400b      	ands	r3, r1
 8004c3a:	68e1      	ldr	r1, [r4, #12]
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c40:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004c46:	6a20      	ldr	r0, [r4, #32]
 8004c48:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c4a:	484d      	ldr	r0, [pc, #308]	@ (8004d80 <UART_SetConfig+0x16c>)
 8004c4c:	4002      	ands	r2, r0
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004c56:	210f      	movs	r1, #15
 8004c58:	438b      	bics	r3, r1
 8004c5a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	4a48      	ldr	r2, [pc, #288]	@ (8004d84 <UART_SetConfig+0x170>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d016      	beq.n	8004c96 <UART_SetConfig+0x82>
 8004c68:	4a47      	ldr	r2, [pc, #284]	@ (8004d88 <UART_SetConfig+0x174>)
 8004c6a:	4694      	mov	ip, r2
 8004c6c:	4463      	add	r3, ip
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	4193      	sbcs	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c74:	2280      	movs	r2, #128	@ 0x80
 8004c76:	0212      	lsls	r2, r2, #8
 8004c78:	69e1      	ldr	r1, [r4, #28]
 8004c7a:	4291      	cmp	r1, r2
 8004c7c:	d051      	beq.n	8004d22 <UART_SetConfig+0x10e>
    switch (clocksource)
 8004c7e:	2001      	movs	r0, #1
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d91e      	bls.n	8004cc2 <UART_SetConfig+0xae>
  huart->NbTxDataToProcess = 1;
 8004c84:	2301      	movs	r3, #1
 8004c86:	226a      	movs	r2, #106	@ 0x6a
 8004c88:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8004c8a:	3a02      	subs	r2, #2
 8004c8c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c92:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c96:	4b3d      	ldr	r3, [pc, #244]	@ (8004d8c <UART_SetConfig+0x178>)
 8004c98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d038      	beq.n	8004d14 <UART_SetConfig+0x100>
 8004ca2:	d830      	bhi.n	8004d06 <UART_SetConfig+0xf2>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <UART_SetConfig+0xa6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	69e2      	ldr	r2, [r4, #28]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d05e      	beq.n	8004d70 <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7ff f885 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8004cb6:	0006      	movs	r6, r0
        break;
 8004cb8:	e006      	b.n	8004cc8 <UART_SetConfig+0xb4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e7da      	b.n	8004c74 <UART_SetConfig+0x60>
        pclk = (uint32_t) HSI_VALUE;
 8004cbe:	4b34      	ldr	r3, [pc, #208]	@ (8004d90 <UART_SetConfig+0x17c>)
 8004cc0:	e037      	b.n	8004d32 <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc2:	f7ff f9ad 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8004cc6:	0006      	movs	r6, r0
    if (pclk != 0U)
 8004cc8:	2000      	movs	r0, #0
 8004cca:	2e00      	cmp	r6, #0
 8004ccc:	d0da      	beq.n	8004c84 <UART_SetConfig+0x70>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cce:	6865      	ldr	r5, [r4, #4]
 8004cd0:	4b30      	ldr	r3, [pc, #192]	@ (8004d94 <UART_SetConfig+0x180>)
 8004cd2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004cd4:	0052      	lsls	r2, r2, #1
 8004cd6:	5ad1      	ldrh	r1, [r2, r3]
 8004cd8:	0030      	movs	r0, r6
 8004cda:	f7fb fa11 	bl	8000100 <__udivsi3>
 8004cde:	086b      	lsrs	r3, r5, #1
 8004ce0:	18c0      	adds	r0, r0, r3
 8004ce2:	0029      	movs	r1, r5
 8004ce4:	f7fb fa0c 	bl	8000100 <__udivsi3>
 8004ce8:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cea:	0001      	movs	r1, r0
 8004cec:	3910      	subs	r1, #16
 8004cee:	4a2a      	ldr	r2, [pc, #168]	@ (8004d98 <UART_SetConfig+0x184>)
        ret = HAL_ERROR;
 8004cf0:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf2:	4291      	cmp	r1, r2
 8004cf4:	d8c6      	bhi.n	8004c84 <UART_SetConfig+0x70>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	60d3      	str	r3, [r2, #12]
 8004cfe:	2000      	movs	r0, #0
 8004d00:	e7c0      	b.n	8004c84 <UART_SetConfig+0x70>
    switch (clocksource)
 8004d02:	2001      	movs	r0, #1
 8004d04:	e7be      	b.n	8004c84 <UART_SetConfig+0x70>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d06:	69e3      	ldr	r3, [r4, #28]
 8004d08:	2280      	movs	r2, #128	@ 0x80
 8004d0a:	0212      	lsls	r2, r2, #8
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d010      	beq.n	8004d32 <UART_SetConfig+0x11e>
 8004d10:	0016      	movs	r6, r2
 8004d12:	e7dc      	b.n	8004cce <UART_SetConfig+0xba>
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	69e2      	ldr	r2, [r4, #28]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d0cf      	beq.n	8004cbe <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 8004d1e:	4e1c      	ldr	r6, [pc, #112]	@ (8004d90 <UART_SetConfig+0x17c>)
 8004d20:	e7d5      	b.n	8004cce <UART_SetConfig+0xba>
    switch (clocksource)
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1ed      	bne.n	8004d02 <UART_SetConfig+0xee>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d26:	f7ff f97b 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8004d2a:	0003      	movs	r3, r0
    if (pclk != 0U)
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0a8      	beq.n	8004c84 <UART_SetConfig+0x70>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d32:	6865      	ldr	r5, [r4, #4]
 8004d34:	4a17      	ldr	r2, [pc, #92]	@ (8004d94 <UART_SetConfig+0x180>)
 8004d36:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004d38:	0049      	lsls	r1, r1, #1
 8004d3a:	5a89      	ldrh	r1, [r1, r2]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fb f9df 	bl	8000100 <__udivsi3>
 8004d42:	0040      	lsls	r0, r0, #1
 8004d44:	086b      	lsrs	r3, r5, #1
 8004d46:	18c0      	adds	r0, r0, r3
 8004d48:	0029      	movs	r1, r5
 8004d4a:	f7fb f9d9 	bl	8000100 <__udivsi3>
 8004d4e:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d50:	0001      	movs	r1, r0
 8004d52:	3910      	subs	r1, #16
 8004d54:	4a10      	ldr	r2, [pc, #64]	@ (8004d98 <UART_SetConfig+0x184>)
        ret = HAL_ERROR;
 8004d56:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	4291      	cmp	r1, r2
 8004d5a:	d900      	bls.n	8004d5e <UART_SetConfig+0x14a>
 8004d5c:	e792      	b.n	8004c84 <UART_SetConfig+0x70>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d9c <UART_SetConfig+0x188>)
 8004d60:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8004d62:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60cb      	str	r3, [r1, #12]
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e789      	b.n	8004c84 <UART_SetConfig+0x70>
        pclk = HAL_RCC_GetSysClockFreq();
 8004d70:	f7ff f826 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8004d74:	0003      	movs	r3, r0
        break;
 8004d76:	e7d9      	b.n	8004d2c <UART_SetConfig+0x118>
 8004d78:	cfff69f3 	.word	0xcfff69f3
 8004d7c:	ffffcfff 	.word	0xffffcfff
 8004d80:	11fff4ff 	.word	0x11fff4ff
 8004d84:	40013800 	.word	0x40013800
 8004d88:	bfffbc00 	.word	0xbfffbc00
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	08005714 	.word	0x08005714
 8004d98:	0000ffef 	.word	0x0000ffef
 8004d9c:	0000fff0 	.word	0x0000fff0

08004da0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004da2:	071b      	lsls	r3, r3, #28
 8004da4:	d506      	bpl.n	8004db4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da6:	6802      	ldr	r2, [r0, #0]
 8004da8:	6853      	ldr	r3, [r2, #4]
 8004daa:	492c      	ldr	r1, [pc, #176]	@ (8004e5c <UART_AdvFeatureConfig+0xbc>)
 8004dac:	400b      	ands	r3, r1
 8004dae:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004db6:	07db      	lsls	r3, r3, #31
 8004db8:	d506      	bpl.n	8004dc8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dba:	6802      	ldr	r2, [r0, #0]
 8004dbc:	6853      	ldr	r3, [r2, #4]
 8004dbe:	4928      	ldr	r1, [pc, #160]	@ (8004e60 <UART_AdvFeatureConfig+0xc0>)
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004dca:	079b      	lsls	r3, r3, #30
 8004dcc:	d506      	bpl.n	8004ddc <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dce:	6802      	ldr	r2, [r0, #0]
 8004dd0:	6853      	ldr	r3, [r2, #4]
 8004dd2:	4924      	ldr	r1, [pc, #144]	@ (8004e64 <UART_AdvFeatureConfig+0xc4>)
 8004dd4:	400b      	ands	r3, r1
 8004dd6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ddc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004dde:	075b      	lsls	r3, r3, #29
 8004de0:	d506      	bpl.n	8004df0 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de2:	6802      	ldr	r2, [r0, #0]
 8004de4:	6853      	ldr	r3, [r2, #4]
 8004de6:	4920      	ldr	r1, [pc, #128]	@ (8004e68 <UART_AdvFeatureConfig+0xc8>)
 8004de8:	400b      	ands	r3, r1
 8004dea:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004df2:	06db      	lsls	r3, r3, #27
 8004df4:	d506      	bpl.n	8004e04 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004df6:	6802      	ldr	r2, [r0, #0]
 8004df8:	6893      	ldr	r3, [r2, #8]
 8004dfa:	491c      	ldr	r1, [pc, #112]	@ (8004e6c <UART_AdvFeatureConfig+0xcc>)
 8004dfc:	400b      	ands	r3, r1
 8004dfe:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8004e00:	430b      	orrs	r3, r1
 8004e02:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e04:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004e06:	069b      	lsls	r3, r3, #26
 8004e08:	d506      	bpl.n	8004e18 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e0a:	6802      	ldr	r2, [r0, #0]
 8004e0c:	6893      	ldr	r3, [r2, #8]
 8004e0e:	4918      	ldr	r1, [pc, #96]	@ (8004e70 <UART_AdvFeatureConfig+0xd0>)
 8004e10:	400b      	ands	r3, r1
 8004e12:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e18:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004e1a:	065b      	lsls	r3, r3, #25
 8004e1c:	d50b      	bpl.n	8004e36 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e1e:	6802      	ldr	r2, [r0, #0]
 8004e20:	6853      	ldr	r3, [r2, #4]
 8004e22:	4914      	ldr	r1, [pc, #80]	@ (8004e74 <UART_AdvFeatureConfig+0xd4>)
 8004e24:	400b      	ands	r3, r1
 8004e26:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	035b      	lsls	r3, r3, #13
 8004e30:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e36:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004e38:	061b      	lsls	r3, r3, #24
 8004e3a:	d506      	bpl.n	8004e4a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3c:	6802      	ldr	r2, [r0, #0]
 8004e3e:	6853      	ldr	r3, [r2, #4]
 8004e40:	490d      	ldr	r1, [pc, #52]	@ (8004e78 <UART_AdvFeatureConfig+0xd8>)
 8004e42:	400b      	ands	r3, r1
 8004e44:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004e46:	430b      	orrs	r3, r1
 8004e48:	6053      	str	r3, [r2, #4]
}
 8004e4a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e4c:	6802      	ldr	r2, [r0, #0]
 8004e4e:	6853      	ldr	r3, [r2, #4]
 8004e50:	490a      	ldr	r1, [pc, #40]	@ (8004e7c <UART_AdvFeatureConfig+0xdc>)
 8004e52:	400b      	ands	r3, r1
 8004e54:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004e56:	430b      	orrs	r3, r1
 8004e58:	6053      	str	r3, [r2, #4]
 8004e5a:	e7ec      	b.n	8004e36 <UART_AdvFeatureConfig+0x96>
 8004e5c:	ffff7fff 	.word	0xffff7fff
 8004e60:	fffdffff 	.word	0xfffdffff
 8004e64:	fffeffff 	.word	0xfffeffff
 8004e68:	fffbffff 	.word	0xfffbffff
 8004e6c:	ffffefff 	.word	0xffffefff
 8004e70:	ffffdfff 	.word	0xffffdfff
 8004e74:	ffefffff 	.word	0xffefffff
 8004e78:	fff7ffff 	.word	0xfff7ffff
 8004e7c:	ff9fffff 	.word	0xff9fffff

08004e80 <UART_WaitOnFlagUntilTimeout>:
{
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	46ce      	mov	lr, r9
 8004e84:	4647      	mov	r7, r8
 8004e86:	b580      	push	{r7, lr}
 8004e88:	4680      	mov	r8, r0
 8004e8a:	000d      	movs	r5, r1
 8004e8c:	0016      	movs	r6, r2
 8004e8e:	4699      	mov	r9, r3
 8004e90:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e92:	4643      	mov	r3, r8
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69dc      	ldr	r4, [r3, #28]
 8004e98:	402c      	ands	r4, r5
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	4262      	negs	r2, r4
 8004e9e:	4154      	adcs	r4, r2
 8004ea0:	42b4      	cmp	r4, r6
 8004ea2:	d136      	bne.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	1c7a      	adds	r2, r7, #1
 8004ea6:	d0f6      	beq.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea8:	f7fd faa2 	bl	80023f0 <HAL_GetTick>
 8004eac:	464b      	mov	r3, r9
 8004eae:	1ac0      	subs	r0, r0, r3
 8004eb0:	42b8      	cmp	r0, r7
 8004eb2:	d833      	bhi.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x9c>
 8004eb4:	2f00      	cmp	r7, #0
 8004eb6:	d033      	beq.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xa0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb8:	4643      	mov	r3, r8
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	6813      	ldr	r3, [r2, #0]
 8004ebe:	075b      	lsls	r3, r3, #29
 8004ec0:	d5e7      	bpl.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
 8004ec2:	002b      	movs	r3, r5
 8004ec4:	3b40      	subs	r3, #64	@ 0x40
 8004ec6:	2140      	movs	r1, #64	@ 0x40
 8004ec8:	438b      	bics	r3, r1
 8004eca:	d0e2      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ecc:	69d3      	ldr	r3, [r2, #28]
 8004ece:	071b      	lsls	r3, r3, #28
 8004ed0:	d411      	bmi.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ed2:	69d3      	ldr	r3, [r2, #28]
 8004ed4:	051b      	lsls	r3, r3, #20
 8004ed6:	d5dc      	bpl.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed8:	2380      	movs	r3, #128	@ 0x80
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8004ede:	4640      	mov	r0, r8
 8004ee0:	f7ff fb26 	bl	8004530 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ee4:	2390      	movs	r3, #144	@ 0x90
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	4641      	mov	r1, r8
 8004eea:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 8004eec:	3b0c      	subs	r3, #12
 8004eee:	2200      	movs	r2, #0
 8004ef0:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	e00e      	b.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef6:	2408      	movs	r4, #8
 8004ef8:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fb18 	bl	8004530 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f00:	2390      	movs	r3, #144	@ 0x90
 8004f02:	4642      	mov	r2, r8
 8004f04:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 8004f06:	3b0c      	subs	r3, #12
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 8004f0e:	2001      	movs	r0, #1
 8004f10:	e000      	b.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x94>
  return HAL_OK;
 8004f12:	2000      	movs	r0, #0
}
 8004f14:	bcc0      	pop	{r6, r7}
 8004f16:	46b9      	mov	r9, r7
 8004f18:	46b0      	mov	r8, r6
 8004f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004f1c:	2003      	movs	r0, #3
 8004f1e:	e7f9      	b.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x94>
 8004f20:	2003      	movs	r0, #3
 8004f22:	e7f7      	b.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x94>

08004f24 <UART_CheckIdleState>:
{
 8004f24:	b530      	push	{r4, r5, lr}
 8004f26:	b083      	sub	sp, #12
 8004f28:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2a:	2390      	movs	r3, #144	@ 0x90
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004f30:	f7fd fa5e 	bl	80023f0 <HAL_GetTick>
 8004f34:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	071b      	lsls	r3, r3, #28
 8004f3c:	d411      	bmi.n	8004f62 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	075b      	lsls	r3, r3, #29
 8004f44:	d429      	bmi.n	8004f9a <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8004f46:	2320      	movs	r3, #32
 8004f48:	2288      	movs	r2, #136	@ 0x88
 8004f4a:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	3204      	adds	r2, #4
 8004f4e:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f50:	2300      	movs	r3, #0
 8004f52:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f54:	6723      	str	r3, [r4, #112]	@ 0x70
  return HAL_OK;
 8004f56:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 8004f58:	2384      	movs	r3, #132	@ 0x84
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	54e2      	strb	r2, [r4, r3]
}
 8004f5e:	b003      	add	sp, #12
 8004f60:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f62:	2180      	movs	r1, #128	@ 0x80
 8004f64:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <UART_CheckIdleState+0xc4>)
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	0003      	movs	r3, r0
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	0389      	lsls	r1, r1, #14
 8004f6e:	0020      	movs	r0, r4
 8004f70:	f7ff ff86 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d0e2      	beq.n	8004f3e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f78:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f82:	6822      	ldr	r2, [r4, #0]
 8004f84:	6813      	ldr	r3, [r2, #0]
 8004f86:	2080      	movs	r0, #128	@ 0x80
 8004f88:	4383      	bics	r3, r0
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004f90:	2388      	movs	r3, #136	@ 0x88
 8004f92:	2220      	movs	r2, #32
 8004f94:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004f96:	387d      	subs	r0, #125	@ 0x7d
 8004f98:	e7de      	b.n	8004f58 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f9a:	2180      	movs	r1, #128	@ 0x80
 8004f9c:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <UART_CheckIdleState+0xc4>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	002b      	movs	r3, r5
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	03c9      	lsls	r1, r1, #15
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	f7ff ff6a 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d0ca      	beq.n	8004f46 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fba:	6821      	ldr	r1, [r4, #0]
 8004fbc:	680b      	ldr	r3, [r1, #0]
 8004fbe:	4d0b      	ldr	r5, [pc, #44]	@ (8004fec <UART_CheckIdleState+0xc8>)
 8004fc0:	402b      	ands	r3, r5
 8004fc2:	600b      	str	r3, [r1, #0]
 8004fc4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	6821      	ldr	r1, [r4, #0]
 8004fd2:	688b      	ldr	r3, [r1, #8]
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	238c      	movs	r3, #140	@ 0x8c
 8004fde:	321f      	adds	r2, #31
 8004fe0:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004fe2:	2003      	movs	r0, #3
 8004fe4:	e7b8      	b.n	8004f58 <UART_CheckIdleState+0x34>
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	01ffffff 	.word	0x01ffffff
 8004fec:	fffffedf 	.word	0xfffffedf

08004ff0 <HAL_UART_Init>:
{
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004ff4:	d030      	beq.n	8005058 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff6:	2388      	movs	r3, #136	@ 0x88
 8004ff8:	58c3      	ldr	r3, [r0, r3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d022      	beq.n	8005044 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ffe:	2388      	movs	r3, #136	@ 0x88
 8005000:	2224      	movs	r2, #36	@ 0x24
 8005002:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	2101      	movs	r1, #1
 800500a:	438b      	bics	r3, r1
 800500c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800500e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11d      	bne.n	8005050 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005014:	0020      	movs	r0, r4
 8005016:	f7ff fdfd 	bl	8004c14 <UART_SetConfig>
 800501a:	2801      	cmp	r0, #1
 800501c:	d011      	beq.n	8005042 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	6853      	ldr	r3, [r2, #4]
 8005022:	490e      	ldr	r1, [pc, #56]	@ (800505c <HAL_UART_Init+0x6c>)
 8005024:	400b      	ands	r3, r1
 8005026:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	6893      	ldr	r3, [r2, #8]
 800502c:	212a      	movs	r1, #42	@ 0x2a
 800502e:	438b      	bics	r3, r1
 8005030:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	3929      	subs	r1, #41	@ 0x29
 8005038:	430b      	orrs	r3, r1
 800503a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800503c:	0020      	movs	r0, r4
 800503e:	f7ff ff71 	bl	8004f24 <UART_CheckIdleState>
}
 8005042:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005044:	3384      	adds	r3, #132	@ 0x84
 8005046:	2200      	movs	r2, #0
 8005048:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800504a:	f7fd f87d 	bl	8002148 <HAL_UART_MspInit>
 800504e:	e7d6      	b.n	8004ffe <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8005050:	0020      	movs	r0, r4
 8005052:	f7ff fea5 	bl	8004da0 <UART_AdvFeatureConfig>
 8005056:	e7dd      	b.n	8005014 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
 800505a:	e7f2      	b.n	8005042 <HAL_UART_Init+0x52>
 800505c:	ffffb7ff 	.word	0xffffb7ff

08005060 <UART_Start_Receive_DMA>:
{
 8005060:	b510      	push	{r4, lr}
 8005062:	0004      	movs	r4, r0
 8005064:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8005066:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005068:	225c      	movs	r2, #92	@ 0x5c
 800506a:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	3234      	adds	r2, #52	@ 0x34
 800506e:	2100      	movs	r1, #0
 8005070:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005072:	3a04      	subs	r2, #4
 8005074:	3122      	adds	r1, #34	@ 0x22
 8005076:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8005078:	3a0c      	subs	r2, #12
 800507a:	5882      	ldr	r2, [r0, r2]
 800507c:	2a00      	cmp	r2, #0
 800507e:	d013      	beq.n	80050a8 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005080:	4921      	ldr	r1, [pc, #132]	@ (8005108 <UART_Start_Receive_DMA+0xa8>)
 8005082:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005084:	2080      	movs	r0, #128	@ 0x80
 8005086:	5822      	ldr	r2, [r4, r0]
 8005088:	4920      	ldr	r1, [pc, #128]	@ (800510c <UART_Start_Receive_DMA+0xac>)
 800508a:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800508c:	5822      	ldr	r2, [r4, r0]
 800508e:	4920      	ldr	r1, [pc, #128]	@ (8005110 <UART_Start_Receive_DMA+0xb0>)
 8005090:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8005092:	5822      	ldr	r2, [r4, r0]
 8005094:	2100      	movs	r1, #0
 8005096:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005098:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800509a:	6821      	ldr	r1, [r4, #0]
 800509c:	3124      	adds	r1, #36	@ 0x24
 800509e:	5820      	ldr	r0, [r4, r0]
 80050a0:	f7fe f860 	bl	8003164 <HAL_DMA_Start_IT>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d126      	bne.n	80050f6 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050a8:	6923      	ldr	r3, [r4, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	2301      	movs	r3, #1
 80050b4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	6810      	ldr	r0, [r2, #0]
 80050bc:	33ff      	adds	r3, #255	@ 0xff
 80050be:	4303      	orrs	r3, r0
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ca:	2301      	movs	r3, #1
 80050cc:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	6821      	ldr	r1, [r4, #0]
 80050d2:	688a      	ldr	r2, [r1, #8]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	608a      	str	r2, [r1, #8]
 80050d8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e0:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	6893      	ldr	r3, [r2, #8]
 80050e8:	2040      	movs	r0, #64	@ 0x40
 80050ea:	4303      	orrs	r3, r0
 80050ec:	6093      	str	r3, [r2, #8]
 80050ee:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 80050f2:	2000      	movs	r0, #0
}
 80050f4:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050f6:	2390      	movs	r3, #144	@ 0x90
 80050f8:	2210      	movs	r2, #16
 80050fa:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 80050fc:	3b04      	subs	r3, #4
 80050fe:	3210      	adds	r2, #16
 8005100:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8005102:	2001      	movs	r0, #1
 8005104:	e7f6      	b.n	80050f4 <UART_Start_Receive_DMA+0x94>
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	08004b7d 	.word	0x08004b7d
 800510c:	08004b5d 	.word	0x08004b5d
 8005110:	080047a3 	.word	0x080047a3

08005114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005118:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 800511e:	336a      	adds	r3, #106	@ 0x6a
 8005120:	2201      	movs	r2, #1
 8005122:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 8005124:	2001      	movs	r0, #1
 8005126:	2368      	movs	r3, #104	@ 0x68
 8005128:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800512a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800512c:	6803      	ldr	r3, [r0, #0]
 800512e:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005134:	4f08      	ldr	r7, [pc, #32]	@ (8005158 <UARTEx_SetNbDataToProcess+0x44>)
 8005136:	5cf8      	ldrb	r0, [r7, r3]
 8005138:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800513a:	4e08      	ldr	r6, [pc, #32]	@ (800515c <UARTEx_SetNbDataToProcess+0x48>)
 800513c:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800513e:	f7fb f869 	bl	8000214 <__divsi3>
 8005142:	236a      	movs	r3, #106	@ 0x6a
 8005144:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005146:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005148:	0f5b      	lsrs	r3, r3, #29
 800514a:	5cf8      	ldrb	r0, [r7, r3]
 800514c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800514e:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005150:	f7fb f860 	bl	8000214 <__divsi3>
 8005154:	b280      	uxth	r0, r0
 8005156:	e7e6      	b.n	8005126 <UARTEx_SetNbDataToProcess+0x12>
 8005158:	08005734 	.word	0x08005734
 800515c:	0800572c 	.word	0x0800572c

08005160 <HAL_UARTEx_WakeupCallback>:
}
 8005160:	4770      	bx	lr

08005162 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005162:	4770      	bx	lr

08005164 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005164:	4770      	bx	lr
	...

08005168 <HAL_UARTEx_DisableFifoMode>:
{
 8005168:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800516a:	2384      	movs	r3, #132	@ 0x84
 800516c:	5cc3      	ldrb	r3, [r0, r3]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d015      	beq.n	800519e <HAL_UARTEx_DisableFifoMode+0x36>
 8005172:	2484      	movs	r4, #132	@ 0x84
 8005174:	2601      	movs	r6, #1
 8005176:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	2588      	movs	r5, #136	@ 0x88
 800517a:	2324      	movs	r3, #36	@ 0x24
 800517c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800517e:	6802      	ldr	r2, [r0, #0]
 8005180:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005182:	6811      	ldr	r1, [r2, #0]
 8005184:	43b1      	bics	r1, r6
 8005186:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005188:	4a06      	ldr	r2, [pc, #24]	@ (80051a4 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800518a:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800518c:	2200      	movs	r2, #0
 800518e:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005190:	6801      	ldr	r1, [r0, #0]
 8005192:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005194:	2320      	movs	r3, #32
 8005196:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8005198:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800519a:	2000      	movs	r0, #0
}
 800519c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800519e:	2002      	movs	r0, #2
 80051a0:	e7fc      	b.n	800519c <HAL_UARTEx_DisableFifoMode+0x34>
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	dfffffff 	.word	0xdfffffff

080051a8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	0004      	movs	r4, r0
 80051ac:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80051ae:	2384      	movs	r3, #132	@ 0x84
 80051b0:	5cc3      	ldrb	r3, [r0, r3]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d01b      	beq.n	80051ee <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80051b6:	2584      	movs	r5, #132	@ 0x84
 80051b8:	2001      	movs	r0, #1
 80051ba:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	2688      	movs	r6, #136	@ 0x88
 80051be:	2324      	movs	r3, #36	@ 0x24
 80051c0:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80051c6:	6819      	ldr	r1, [r3, #0]
 80051c8:	4381      	bics	r1, r0
 80051ca:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051cc:	6820      	ldr	r0, [r4, #0]
 80051ce:	6883      	ldr	r3, [r0, #8]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	08d9      	lsrs	r1, r3, #3
 80051d4:	4311      	orrs	r1, r2
 80051d6:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 80051d8:	0020      	movs	r0, r4
 80051da:	f7ff ff9b 	bl	8005114 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80051e2:	2320      	movs	r3, #32
 80051e4:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80051e6:	2300      	movs	r3, #0
 80051e8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80051ea:	2000      	movs	r0, #0
}
 80051ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80051ee:	2002      	movs	r0, #2
 80051f0:	e7fc      	b.n	80051ec <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080051f4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	0004      	movs	r4, r0
 80051f8:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80051fa:	2284      	movs	r2, #132	@ 0x84
 80051fc:	5c82      	ldrb	r2, [r0, r2]
 80051fe:	2a01      	cmp	r2, #1
 8005200:	d01b      	beq.n	800523a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005202:	2584      	movs	r5, #132	@ 0x84
 8005204:	2001      	movs	r0, #1
 8005206:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8005208:	2688      	movs	r6, #136	@ 0x88
 800520a:	2224      	movs	r2, #36	@ 0x24
 800520c:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005212:	6811      	ldr	r1, [r2, #0]
 8005214:	4381      	bics	r1, r0
 8005216:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	6891      	ldr	r1, [r2, #8]
 800521c:	4808      	ldr	r0, [pc, #32]	@ (8005240 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 800521e:	4001      	ands	r1, r0
 8005220:	4319      	orrs	r1, r3
 8005222:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005224:	0020      	movs	r0, r4
 8005226:	f7ff ff75 	bl	8005114 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800522e:	2320      	movs	r3, #32
 8005230:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8005232:	2300      	movs	r3, #0
 8005234:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005236:	2000      	movs	r0, #0
}
 8005238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800523a:	2002      	movs	r0, #2
 800523c:	e7fc      	b.n	8005238 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	f1ffffff 	.word	0xf1ffffff

08005244 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8005244:	b510      	push	{r4, lr}
 8005246:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005248:	238c      	movs	r3, #140	@ 0x8c
 800524a:	58c3      	ldr	r3, [r0, r3]
 800524c:	2b20      	cmp	r3, #32
 800524e:	d12b      	bne.n	80052a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8005250:	2900      	cmp	r1, #0
 8005252:	d02b      	beq.n	80052ac <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
 8005254:	2a00      	cmp	r2, #0
 8005256:	d02b      	beq.n	80052b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	015b      	lsls	r3, r3, #5
 800525c:	6880      	ldr	r0, [r0, #8]
 800525e:	4298      	cmp	r0, r3
 8005260:	d105      	bne.n	800526e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
        return  HAL_ERROR;
 8005268:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800526a:	07cb      	lsls	r3, r1, #31
 800526c:	d41d      	bmi.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800526e:	2301      	movs	r3, #1
 8005270:	66e3      	str	r3, [r4, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005272:	2300      	movs	r3, #0
 8005274:	6723      	str	r3, [r4, #112]	@ 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005276:	0020      	movs	r0, r4
 8005278:	f7ff fef2 	bl	8005060 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800527c:	2800      	cmp	r0, #0
 800527e:	d114      	bne.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <HAL_UARTEx_ReceiveToIdle_DMA+0x46>
        status = HAL_ERROR;
 8005286:	2001      	movs	r0, #1
 8005288:	e00f      	b.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	2110      	movs	r1, #16
 800528e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005290:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	2301      	movs	r3, #1
 8005296:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	6813      	ldr	r3, [r2, #0]
 800529e:	430b      	orrs	r3, r1
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	f38c 8810 	msr	PRIMASK, ip
}
 80052a6:	e000      	b.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    return HAL_BUSY;
 80052a8:	2002      	movs	r0, #2
}
 80052aa:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80052ac:	2001      	movs	r0, #1
 80052ae:	e7fc      	b.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80052b0:	2001      	movs	r0, #1
 80052b2:	e7fa      	b.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>

080052b4 <logf>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	1c05      	adds	r5, r0, #0
 80052b8:	f000 f82c 	bl	8005314 <__ieee754_logf>
 80052bc:	1c29      	adds	r1, r5, #0
 80052be:	1c04      	adds	r4, r0, #0
 80052c0:	1c28      	adds	r0, r5, #0
 80052c2:	f7fc f84b 	bl	800135c <__aeabi_fcmpun>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d110      	bne.n	80052ec <logf+0x38>
 80052ca:	2100      	movs	r1, #0
 80052cc:	1c28      	adds	r0, r5, #0
 80052ce:	f7fb f8b3 	bl	8000438 <__aeabi_fcmpgt>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d10a      	bne.n	80052ec <logf+0x38>
 80052d6:	2100      	movs	r1, #0
 80052d8:	1c28      	adds	r0, r5, #0
 80052da:	f7fb f893 	bl	8000404 <__aeabi_fcmpeq>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d006      	beq.n	80052f0 <logf+0x3c>
 80052e2:	f000 f951 	bl	8005588 <__errno>
 80052e6:	2322      	movs	r3, #34	@ 0x22
 80052e8:	4c06      	ldr	r4, [pc, #24]	@ (8005304 <logf+0x50>)
 80052ea:	6003      	str	r3, [r0, #0]
 80052ec:	1c20      	adds	r0, r4, #0
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f000 f94a 	bl	8005588 <__errno>
 80052f4:	2321      	movs	r3, #33	@ 0x21
 80052f6:	6003      	str	r3, [r0, #0]
 80052f8:	4803      	ldr	r0, [pc, #12]	@ (8005308 <logf+0x54>)
 80052fa:	f000 f807 	bl	800530c <nanf>
 80052fe:	1c04      	adds	r4, r0, #0
 8005300:	e7f4      	b.n	80052ec <logf+0x38>
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	ff800000 	.word	0xff800000
 8005308:	0800573c 	.word	0x0800573c

0800530c <nanf>:
 800530c:	4800      	ldr	r0, [pc, #0]	@ (8005310 <nanf+0x4>)
 800530e:	4770      	bx	lr
 8005310:	7fc00000 	.word	0x7fc00000

08005314 <__ieee754_logf>:
 8005314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005316:	0043      	lsls	r3, r0, #1
 8005318:	b085      	sub	sp, #20
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <__ieee754_logf+0x18>
 800531e:	20cc      	movs	r0, #204	@ 0xcc
 8005320:	2100      	movs	r1, #0
 8005322:	0600      	lsls	r0, r0, #24
 8005324:	f7fb fa8e 	bl	8000844 <__aeabi_fdiv>
 8005328:	b005      	add	sp, #20
 800532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532c:	1e03      	subs	r3, r0, #0
 800532e:	da04      	bge.n	800533a <__ieee754_logf+0x26>
 8005330:	1c01      	adds	r1, r0, #0
 8005332:	f7fb fdaf 	bl	8000e94 <__aeabi_fsub>
 8005336:	2100      	movs	r1, #0
 8005338:	e7f4      	b.n	8005324 <__ieee754_logf+0x10>
 800533a:	21ff      	movs	r1, #255	@ 0xff
 800533c:	05c9      	lsls	r1, r1, #23
 800533e:	4288      	cmp	r0, r1
 8005340:	db03      	blt.n	800534a <__ieee754_logf+0x36>
 8005342:	1c01      	adds	r1, r0, #0
 8005344:	f7fb f88c 	bl	8000460 <__aeabi_fadd>
 8005348:	e7ee      	b.n	8005328 <__ieee754_logf+0x14>
 800534a:	2280      	movs	r2, #128	@ 0x80
 800534c:	2100      	movs	r1, #0
 800534e:	0412      	lsls	r2, r2, #16
 8005350:	4290      	cmp	r0, r2
 8005352:	da06      	bge.n	8005362 <__ieee754_logf+0x4e>
 8005354:	2198      	movs	r1, #152	@ 0x98
 8005356:	05c9      	lsls	r1, r1, #23
 8005358:	f7fb fc42 	bl	8000be0 <__aeabi_fmul>
 800535c:	2119      	movs	r1, #25
 800535e:	0003      	movs	r3, r0
 8005360:	4249      	negs	r1, r1
 8005362:	15da      	asrs	r2, r3, #23
 8005364:	3a7f      	subs	r2, #127	@ 0x7f
 8005366:	1852      	adds	r2, r2, r1
 8005368:	2180      	movs	r1, #128	@ 0x80
 800536a:	025b      	lsls	r3, r3, #9
 800536c:	0a5e      	lsrs	r6, r3, #9
 800536e:	4b74      	ldr	r3, [pc, #464]	@ (8005540 <__ieee754_logf+0x22c>)
 8005370:	20fe      	movs	r0, #254	@ 0xfe
 8005372:	0409      	lsls	r1, r1, #16
 8005374:	18f3      	adds	r3, r6, r3
 8005376:	400b      	ands	r3, r1
 8005378:	21fe      	movs	r1, #254	@ 0xfe
 800537a:	0580      	lsls	r0, r0, #22
 800537c:	4058      	eors	r0, r3
 800537e:	15dd      	asrs	r5, r3, #23
 8005380:	4330      	orrs	r0, r6
 8005382:	0589      	lsls	r1, r1, #22
 8005384:	18ad      	adds	r5, r5, r2
 8005386:	f7fb fd85 	bl	8000e94 <__aeabi_fsub>
 800538a:	0032      	movs	r2, r6
 800538c:	4b6d      	ldr	r3, [pc, #436]	@ (8005544 <__ieee754_logf+0x230>)
 800538e:	320f      	adds	r2, #15
 8005390:	1c04      	adds	r4, r0, #0
 8005392:	421a      	tst	r2, r3
 8005394:	d145      	bne.n	8005422 <__ieee754_logf+0x10e>
 8005396:	2100      	movs	r1, #0
 8005398:	f7fb f834 	bl	8000404 <__aeabi_fcmpeq>
 800539c:	2800      	cmp	r0, #0
 800539e:	d011      	beq.n	80053c4 <__ieee754_logf+0xb0>
 80053a0:	2000      	movs	r0, #0
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	d0c0      	beq.n	8005328 <__ieee754_logf+0x14>
 80053a6:	0028      	movs	r0, r5
 80053a8:	f7fc f80e 	bl	80013c8 <__aeabi_i2f>
 80053ac:	4966      	ldr	r1, [pc, #408]	@ (8005548 <__ieee754_logf+0x234>)
 80053ae:	1c04      	adds	r4, r0, #0
 80053b0:	f7fb fc16 	bl	8000be0 <__aeabi_fmul>
 80053b4:	4965      	ldr	r1, [pc, #404]	@ (800554c <__ieee754_logf+0x238>)
 80053b6:	1c05      	adds	r5, r0, #0
 80053b8:	1c20      	adds	r0, r4, #0
 80053ba:	f7fb fc11 	bl	8000be0 <__aeabi_fmul>
 80053be:	1c01      	adds	r1, r0, #0
 80053c0:	1c28      	adds	r0, r5, #0
 80053c2:	e7bf      	b.n	8005344 <__ieee754_logf+0x30>
 80053c4:	4962      	ldr	r1, [pc, #392]	@ (8005550 <__ieee754_logf+0x23c>)
 80053c6:	1c20      	adds	r0, r4, #0
 80053c8:	f7fb fc0a 	bl	8000be0 <__aeabi_fmul>
 80053cc:	1c01      	adds	r1, r0, #0
 80053ce:	20fc      	movs	r0, #252	@ 0xfc
 80053d0:	0580      	lsls	r0, r0, #22
 80053d2:	f7fb fd5f 	bl	8000e94 <__aeabi_fsub>
 80053d6:	1c21      	adds	r1, r4, #0
 80053d8:	1c06      	adds	r6, r0, #0
 80053da:	1c20      	adds	r0, r4, #0
 80053dc:	f7fb fc00 	bl	8000be0 <__aeabi_fmul>
 80053e0:	1c01      	adds	r1, r0, #0
 80053e2:	1c30      	adds	r0, r6, #0
 80053e4:	f7fb fbfc 	bl	8000be0 <__aeabi_fmul>
 80053e8:	1c06      	adds	r6, r0, #0
 80053ea:	2d00      	cmp	r5, #0
 80053ec:	d101      	bne.n	80053f2 <__ieee754_logf+0xde>
 80053ee:	1c31      	adds	r1, r6, #0
 80053f0:	e079      	b.n	80054e6 <__ieee754_logf+0x1d2>
 80053f2:	0028      	movs	r0, r5
 80053f4:	f7fb ffe8 	bl	80013c8 <__aeabi_i2f>
 80053f8:	4953      	ldr	r1, [pc, #332]	@ (8005548 <__ieee754_logf+0x234>)
 80053fa:	1c05      	adds	r5, r0, #0
 80053fc:	f7fb fbf0 	bl	8000be0 <__aeabi_fmul>
 8005400:	4952      	ldr	r1, [pc, #328]	@ (800554c <__ieee754_logf+0x238>)
 8005402:	1c07      	adds	r7, r0, #0
 8005404:	1c28      	adds	r0, r5, #0
 8005406:	f7fb fbeb 	bl	8000be0 <__aeabi_fmul>
 800540a:	1c01      	adds	r1, r0, #0
 800540c:	1c30      	adds	r0, r6, #0
 800540e:	f7fb fd41 	bl	8000e94 <__aeabi_fsub>
 8005412:	1c21      	adds	r1, r4, #0
 8005414:	f7fb fd3e 	bl	8000e94 <__aeabi_fsub>
 8005418:	1c01      	adds	r1, r0, #0
 800541a:	1c38      	adds	r0, r7, #0
 800541c:	f7fb fd3a 	bl	8000e94 <__aeabi_fsub>
 8005420:	e782      	b.n	8005328 <__ieee754_logf+0x14>
 8005422:	2180      	movs	r1, #128	@ 0x80
 8005424:	05c9      	lsls	r1, r1, #23
 8005426:	f7fb f81b 	bl	8000460 <__aeabi_fadd>
 800542a:	1c01      	adds	r1, r0, #0
 800542c:	1c20      	adds	r0, r4, #0
 800542e:	f7fb fa09 	bl	8000844 <__aeabi_fdiv>
 8005432:	9000      	str	r0, [sp, #0]
 8005434:	0028      	movs	r0, r5
 8005436:	f7fb ffc7 	bl	80013c8 <__aeabi_i2f>
 800543a:	9900      	ldr	r1, [sp, #0]
 800543c:	9001      	str	r0, [sp, #4]
 800543e:	1c08      	adds	r0, r1, #0
 8005440:	f7fb fbce 	bl	8000be0 <__aeabi_fmul>
 8005444:	4b43      	ldr	r3, [pc, #268]	@ (8005554 <__ieee754_logf+0x240>)
 8005446:	1c01      	adds	r1, r0, #0
 8005448:	18f3      	adds	r3, r6, r3
 800544a:	9303      	str	r3, [sp, #12]
 800544c:	9002      	str	r0, [sp, #8]
 800544e:	f7fb fbc7 	bl	8000be0 <__aeabi_fmul>
 8005452:	4941      	ldr	r1, [pc, #260]	@ (8005558 <__ieee754_logf+0x244>)
 8005454:	1c07      	adds	r7, r0, #0
 8005456:	f7fb fbc3 	bl	8000be0 <__aeabi_fmul>
 800545a:	4940      	ldr	r1, [pc, #256]	@ (800555c <__ieee754_logf+0x248>)
 800545c:	f7fb f800 	bl	8000460 <__aeabi_fadd>
 8005460:	1c39      	adds	r1, r7, #0
 8005462:	f7fb fbbd 	bl	8000be0 <__aeabi_fmul>
 8005466:	493e      	ldr	r1, [pc, #248]	@ (8005560 <__ieee754_logf+0x24c>)
 8005468:	f7fa fffa 	bl	8000460 <__aeabi_fadd>
 800546c:	1c39      	adds	r1, r7, #0
 800546e:	f7fb fbb7 	bl	8000be0 <__aeabi_fmul>
 8005472:	493c      	ldr	r1, [pc, #240]	@ (8005564 <__ieee754_logf+0x250>)
 8005474:	f7fa fff4 	bl	8000460 <__aeabi_fadd>
 8005478:	9902      	ldr	r1, [sp, #8]
 800547a:	f7fb fbb1 	bl	8000be0 <__aeabi_fmul>
 800547e:	493a      	ldr	r1, [pc, #232]	@ (8005568 <__ieee754_logf+0x254>)
 8005480:	9002      	str	r0, [sp, #8]
 8005482:	1c38      	adds	r0, r7, #0
 8005484:	f7fb fbac 	bl	8000be0 <__aeabi_fmul>
 8005488:	4938      	ldr	r1, [pc, #224]	@ (800556c <__ieee754_logf+0x258>)
 800548a:	f7fa ffe9 	bl	8000460 <__aeabi_fadd>
 800548e:	1c39      	adds	r1, r7, #0
 8005490:	f7fb fba6 	bl	8000be0 <__aeabi_fmul>
 8005494:	4936      	ldr	r1, [pc, #216]	@ (8005570 <__ieee754_logf+0x25c>)
 8005496:	f7fa ffe3 	bl	8000460 <__aeabi_fadd>
 800549a:	1c39      	adds	r1, r7, #0
 800549c:	f7fb fba0 	bl	8000be0 <__aeabi_fmul>
 80054a0:	1c01      	adds	r1, r0, #0
 80054a2:	9802      	ldr	r0, [sp, #8]
 80054a4:	f7fa ffdc 	bl	8000460 <__aeabi_fadd>
 80054a8:	4b32      	ldr	r3, [pc, #200]	@ (8005574 <__ieee754_logf+0x260>)
 80054aa:	9a03      	ldr	r2, [sp, #12]
 80054ac:	1b9b      	subs	r3, r3, r6
 80054ae:	1c07      	adds	r7, r0, #0
 80054b0:	4313      	orrs	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd2f      	ble.n	8005516 <__ieee754_logf+0x202>
 80054b6:	21fc      	movs	r1, #252	@ 0xfc
 80054b8:	1c20      	adds	r0, r4, #0
 80054ba:	0589      	lsls	r1, r1, #22
 80054bc:	f7fb fb90 	bl	8000be0 <__aeabi_fmul>
 80054c0:	1c21      	adds	r1, r4, #0
 80054c2:	f7fb fb8d 	bl	8000be0 <__aeabi_fmul>
 80054c6:	1c01      	adds	r1, r0, #0
 80054c8:	1c06      	adds	r6, r0, #0
 80054ca:	1c38      	adds	r0, r7, #0
 80054cc:	f7fa ffc8 	bl	8000460 <__aeabi_fadd>
 80054d0:	9900      	ldr	r1, [sp, #0]
 80054d2:	f7fb fb85 	bl	8000be0 <__aeabi_fmul>
 80054d6:	1c07      	adds	r7, r0, #0
 80054d8:	2d00      	cmp	r5, #0
 80054da:	d106      	bne.n	80054ea <__ieee754_logf+0x1d6>
 80054dc:	1c01      	adds	r1, r0, #0
 80054de:	1c30      	adds	r0, r6, #0
 80054e0:	f7fb fcd8 	bl	8000e94 <__aeabi_fsub>
 80054e4:	1c01      	adds	r1, r0, #0
 80054e6:	1c20      	adds	r0, r4, #0
 80054e8:	e798      	b.n	800541c <__ieee754_logf+0x108>
 80054ea:	4917      	ldr	r1, [pc, #92]	@ (8005548 <__ieee754_logf+0x234>)
 80054ec:	9801      	ldr	r0, [sp, #4]
 80054ee:	f7fb fb77 	bl	8000be0 <__aeabi_fmul>
 80054f2:	4916      	ldr	r1, [pc, #88]	@ (800554c <__ieee754_logf+0x238>)
 80054f4:	1c05      	adds	r5, r0, #0
 80054f6:	9801      	ldr	r0, [sp, #4]
 80054f8:	f7fb fb72 	bl	8000be0 <__aeabi_fmul>
 80054fc:	1c39      	adds	r1, r7, #0
 80054fe:	f7fa ffaf 	bl	8000460 <__aeabi_fadd>
 8005502:	1c01      	adds	r1, r0, #0
 8005504:	1c30      	adds	r0, r6, #0
 8005506:	f7fb fcc5 	bl	8000e94 <__aeabi_fsub>
 800550a:	1c21      	adds	r1, r4, #0
 800550c:	f7fb fcc2 	bl	8000e94 <__aeabi_fsub>
 8005510:	1c01      	adds	r1, r0, #0
 8005512:	1c28      	adds	r0, r5, #0
 8005514:	e782      	b.n	800541c <__ieee754_logf+0x108>
 8005516:	1c01      	adds	r1, r0, #0
 8005518:	1c20      	adds	r0, r4, #0
 800551a:	f7fb fcbb 	bl	8000e94 <__aeabi_fsub>
 800551e:	9900      	ldr	r1, [sp, #0]
 8005520:	f7fb fb5e 	bl	8000be0 <__aeabi_fmul>
 8005524:	1c06      	adds	r6, r0, #0
 8005526:	2d00      	cmp	r5, #0
 8005528:	d100      	bne.n	800552c <__ieee754_logf+0x218>
 800552a:	e760      	b.n	80053ee <__ieee754_logf+0xda>
 800552c:	4906      	ldr	r1, [pc, #24]	@ (8005548 <__ieee754_logf+0x234>)
 800552e:	9801      	ldr	r0, [sp, #4]
 8005530:	f7fb fb56 	bl	8000be0 <__aeabi_fmul>
 8005534:	4905      	ldr	r1, [pc, #20]	@ (800554c <__ieee754_logf+0x238>)
 8005536:	1c05      	adds	r5, r0, #0
 8005538:	9801      	ldr	r0, [sp, #4]
 800553a:	f7fb fb51 	bl	8000be0 <__aeabi_fmul>
 800553e:	e7e0      	b.n	8005502 <__ieee754_logf+0x1ee>
 8005540:	004afb20 	.word	0x004afb20
 8005544:	007ffff0 	.word	0x007ffff0
 8005548:	3f317180 	.word	0x3f317180
 800554c:	3717f7d1 	.word	0x3717f7d1
 8005550:	3eaaaaab 	.word	0x3eaaaaab
 8005554:	ffcf5c30 	.word	0xffcf5c30
 8005558:	3e178897 	.word	0x3e178897
 800555c:	3e3a3325 	.word	0x3e3a3325
 8005560:	3e924925 	.word	0x3e924925
 8005564:	3f2aaaab 	.word	0x3f2aaaab
 8005568:	3e1cd04f 	.word	0x3e1cd04f
 800556c:	3e638e29 	.word	0x3e638e29
 8005570:	3ecccccd 	.word	0x3ecccccd
 8005574:	0035c288 	.word	0x0035c288

08005578 <memset>:
 8005578:	0003      	movs	r3, r0
 800557a:	1882      	adds	r2, r0, r2
 800557c:	4293      	cmp	r3, r2
 800557e:	d100      	bne.n	8005582 <memset+0xa>
 8005580:	4770      	bx	lr
 8005582:	7019      	strb	r1, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	e7f9      	b.n	800557c <memset+0x4>

08005588 <__errno>:
 8005588:	4b01      	ldr	r3, [pc, #4]	@ (8005590 <__errno+0x8>)
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	4770      	bx	lr
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	20000010 	.word	0x20000010

08005594 <__libc_init_array>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	2600      	movs	r6, #0
 8005598:	4c0c      	ldr	r4, [pc, #48]	@ (80055cc <__libc_init_array+0x38>)
 800559a:	4d0d      	ldr	r5, [pc, #52]	@ (80055d0 <__libc_init_array+0x3c>)
 800559c:	1b64      	subs	r4, r4, r5
 800559e:	10a4      	asrs	r4, r4, #2
 80055a0:	42a6      	cmp	r6, r4
 80055a2:	d109      	bne.n	80055b8 <__libc_init_array+0x24>
 80055a4:	2600      	movs	r6, #0
 80055a6:	f000 f819 	bl	80055dc <_init>
 80055aa:	4c0a      	ldr	r4, [pc, #40]	@ (80055d4 <__libc_init_array+0x40>)
 80055ac:	4d0a      	ldr	r5, [pc, #40]	@ (80055d8 <__libc_init_array+0x44>)
 80055ae:	1b64      	subs	r4, r4, r5
 80055b0:	10a4      	asrs	r4, r4, #2
 80055b2:	42a6      	cmp	r6, r4
 80055b4:	d105      	bne.n	80055c2 <__libc_init_array+0x2e>
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	00b3      	lsls	r3, r6, #2
 80055ba:	58eb      	ldr	r3, [r5, r3]
 80055bc:	4798      	blx	r3
 80055be:	3601      	adds	r6, #1
 80055c0:	e7ee      	b.n	80055a0 <__libc_init_array+0xc>
 80055c2:	00b3      	lsls	r3, r6, #2
 80055c4:	58eb      	ldr	r3, [r5, r3]
 80055c6:	4798      	blx	r3
 80055c8:	3601      	adds	r6, #1
 80055ca:	e7f2      	b.n	80055b2 <__libc_init_array+0x1e>
 80055cc:	08005740 	.word	0x08005740
 80055d0:	08005740 	.word	0x08005740
 80055d4:	08005744 	.word	0x08005744
 80055d8:	08005740 	.word	0x08005740

080055dc <_init>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr

080055e8 <_fini>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr
