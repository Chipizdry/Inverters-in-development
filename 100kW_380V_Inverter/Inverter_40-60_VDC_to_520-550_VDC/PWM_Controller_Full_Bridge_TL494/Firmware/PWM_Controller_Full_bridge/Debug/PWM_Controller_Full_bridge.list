
PWM_Controller_Full_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c98  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e70  08005e70  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005e70  08005e70  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e70  08005e70  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e70  08005e70  00006e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005e78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000010  08005e88  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08005e88  000074b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b33  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2e  00000000  00000000  0001cb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2f  00000000  00000000  00020b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001697d  00000000  00000000  000219b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180b2  00000000  00000000  00038334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d055  00000000  00000000  000503e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd43b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  000dd480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e1560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005d38 	.word	0x08005d38

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08005d38 	.word	0x08005d38

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <Registers_handler>:
//#include "I2C_interface.h"
#define RX_BUFFER_SIZE 64
//extern RX_BUFFER_SIZE;
extern uint8_t SLAVE_ID;

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]

			 if (rxFrame[0] == SLAVE_ID) {
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	4b51      	ldr	r3, [pc, #324]	@ (8000544 <Registers_handler+0x158>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	429a      	cmp	r2, r3
 8000402:	d16e      	bne.n	80004e2 <Registers_handler+0xf6>
                       uint8_t opCode = rxFrame[1];
 8000404:	2113      	movs	r1, #19
 8000406:	187b      	adds	r3, r7, r1
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	7852      	ldrb	r2, [r2, #1]
 800040c:	701a      	strb	r2, [r3, #0]

				  			  switch (opCode) {
 800040e:	187b      	adds	r3, r7, r1
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b10      	cmp	r3, #16
 8000414:	d832      	bhi.n	800047c <Registers_handler+0x90>
 8000416:	009a      	lsls	r2, r3, #2
 8000418:	4b4b      	ldr	r3, [pc, #300]	@ (8000548 <Registers_handler+0x15c>)
 800041a:	18d3      	adds	r3, r2, r3
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	469f      	mov	pc, r3
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 8000420:	4b4a      	ldr	r3, [pc, #296]	@ (800054c <Registers_handler+0x160>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	001a      	movs	r2, r3
 8000426:	4b4a      	ldr	r3, [pc, #296]	@ (8000550 <Registers_handler+0x164>)
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fdf6 	bl	800101c <handleReadCoils>
				  			   break;
 8000430:	e083      	b.n	800053a <Registers_handler+0x14e>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 8000432:	4b48      	ldr	r3, [pc, #288]	@ (8000554 <Registers_handler+0x168>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	001a      	movs	r2, r3
 8000438:	4b45      	ldr	r3, [pc, #276]	@ (8000550 <Registers_handler+0x164>)
 800043a:	0011      	movs	r1, r2
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fe69 	bl	8001114 <handleReadDiscreteInputs>
							   break;
 8000442:	e07a      	b.n	800053a <Registers_handler+0x14e>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	4b42      	ldr	r3, [pc, #264]	@ (8000550 <Registers_handler+0x164>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fcc0 	bl	8000dd0 <handleReadHoldingRegs>
				  			   break;
 8000450:	e073      	b.n	800053a <Registers_handler+0x14e>

				  			   case  READ_INPUT_REGs:
				  				 handleReadInputRegs (&huart1,data_reg);
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	4b3e      	ldr	r3, [pc, #248]	@ (8000550 <Registers_handler+0x164>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fd51 	bl	8000f00 <handleReadInputRegs>

				  			   break;
 800045e:	e06c      	b.n	800053a <Registers_handler+0x14e>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister (&huart1,rcv_data_reg);
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4b3b      	ldr	r3, [pc, #236]	@ (8000550 <Registers_handler+0x164>)
 8000464:	0011      	movs	r1, r2
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fed2 	bl	8001210 <handleWriteMulyipleHandlingRegister>

                               break;
 800046c:	e065      	b.n	800053a <Registers_handler+0x14e>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister (&huart1,rcv_data_reg);
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	4b37      	ldr	r3, [pc, #220]	@ (8000550 <Registers_handler+0x164>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fecb 	bl	8001210 <handleWriteMulyipleHandlingRegister>

                               break;
 800047a:	e05e      	b.n	800053a <Registers_handler+0x14e>


				  			   default:

				  				 LED_1_ON;
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	021b      	lsls	r3, r3, #8
 8000480:	4835      	ldr	r0, [pc, #212]	@ (8000558 <Registers_handler+0x16c>)
 8000482:	2201      	movs	r2, #1
 8000484:	0019      	movs	r1, r3
 8000486:	f001 ffa5 	bl	80023d4 <HAL_GPIO_WritePin>
				  				  for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 800048a:	2316      	movs	r3, #22
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	2200      	movs	r2, #0
 8000490:	801a      	strh	r2, [r3, #0]
 8000492:	e00b      	b.n	80004ac <Registers_handler+0xc0>
 8000494:	2116      	movs	r1, #22
 8000496:	187b      	adds	r3, r7, r1
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	18d3      	adds	r3, r2, r3
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	881a      	ldrh	r2, [r3, #0]
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	3201      	adds	r2, #1
 80004aa:	801a      	strh	r2, [r3, #0]
 80004ac:	2316      	movs	r3, #22
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80004b4:	d9ee      	bls.n	8000494 <Registers_handler+0xa8>
				  							 				  			    	     RX_2;
 80004b6:	2380      	movs	r3, #128	@ 0x80
 80004b8:	01db      	lsls	r3, r3, #7
 80004ba:	4827      	ldr	r0, [pc, #156]	@ (8000558 <Registers_handler+0x16c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	0019      	movs	r1, r3
 80004c0:	f001 ff88 	bl	80023d4 <HAL_GPIO_WritePin>

				  							 				  			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 80004c4:	68f9      	ldr	r1, [r7, #12]
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <Registers_handler+0x164>)
 80004c8:	2240      	movs	r2, #64	@ 0x40
 80004ca:	0018      	movs	r0, r3
 80004cc:	f005 fb42 	bl	8005b54 <HAL_UARTEx_ReceiveToIdle_DMA>
				  							 				  			    			    // Включение прерывания IDLE
				  							 				  			   __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <Registers_handler+0x164>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <Registers_handler+0x164>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2110      	movs	r1, #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
				  			   break;
 80004e0:	e02b      	b.n	800053a <Registers_handler+0x14e>
				  			     }

				  			 }
			                  else{
			                            for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 80004e2:	2314      	movs	r3, #20
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	2200      	movs	r2, #0
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	e00b      	b.n	8000504 <Registers_handler+0x118>
 80004ec:	2114      	movs	r1, #20
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	18d3      	adds	r3, r2, r3
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	881a      	ldrh	r2, [r3, #0]
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	3201      	adds	r2, #1
 8000502:	801a      	strh	r2, [r3, #0]
 8000504:	2314      	movs	r3, #20
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	2b3f      	cmp	r3, #63	@ 0x3f
 800050c:	d9ee      	bls.n	80004ec <Registers_handler+0x100>
			 				  			    	     RX_2;
 800050e:	2380      	movs	r3, #128	@ 0x80
 8000510:	01db      	lsls	r3, r3, #7
 8000512:	4811      	ldr	r0, [pc, #68]	@ (8000558 <Registers_handler+0x16c>)
 8000514:	2200      	movs	r2, #0
 8000516:	0019      	movs	r1, r3
 8000518:	f001 ff5c 	bl	80023d4 <HAL_GPIO_WritePin>

			 				  			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800051c:	68f9      	ldr	r1, [r7, #12]
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <Registers_handler+0x164>)
 8000520:	2240      	movs	r2, #64	@ 0x40
 8000522:	0018      	movs	r0, r3
 8000524:	f005 fb16 	bl	8005b54 <HAL_UARTEx_ReceiveToIdle_DMA>
			 				  			    			    // Включение прерывания IDLE
			 				  			   __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); }
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <Registers_handler+0x164>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <Registers_handler+0x164>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2110      	movs	r1, #16
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]

                          }
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b006      	add	sp, #24
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	20000000 	.word	0x20000000
 8000548:	08005d50 	.word	0x08005d50
 800054c:	200004a9 	.word	0x200004a9
 8000550:	20000118 	.word	0x20000118
 8000554:	200004a8 	.word	0x200004a8
 8000558:	50000800 	.word	0x50000800

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f001 f952 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f830 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 fa8a 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 800056c:	f000 fa62 	bl	8000a34 <MX_DMA_Init>
  MX_I2C2_Init();
 8000570:	f000 f884 	bl	800067c <MX_I2C2_Init>
  MX_TIM1_Init();
 8000574:	f000 f8c2 	bl	80006fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000578:	f000 f98c 	bl	8000894 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800057c:	f000 fa0c 	bl	8000998 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000580:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <main+0x58>)
 8000582:	2100      	movs	r1, #0
 8000584:	0018      	movs	r0, r3
 8000586:	f002 ff65 	bl	8003454 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <main+0x5c>)
 800058c:	2100      	movs	r1, #0
 800058e:	0018      	movs	r0, r3
 8000590:	f002 ff60 	bl	8003454 <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000594:	4909      	ldr	r1, [pc, #36]	@ (80005bc <main+0x60>)
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <main+0x64>)
 8000598:	2240      	movs	r2, #64	@ 0x40
 800059a:	0018      	movs	r0, r3
 800059c:	f005 fada 	bl	8005b54 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <main+0x68>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <main+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2104      	movs	r1, #4
 80005ac:	438a      	bics	r2, r1
 80005ae:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	e7fd      	b.n	80005b0 <main+0x54>
 80005b4:	20000080 	.word	0x20000080
 80005b8:	200000cc 	.word	0x200000cc
 80005bc:	20000268 	.word	0x20000268
 80005c0:	20000118 	.word	0x20000118
 80005c4:	200001ac 	.word	0x200001ac

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b093      	sub	sp, #76	@ 0x4c
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	2414      	movs	r4, #20
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2334      	movs	r3, #52	@ 0x34
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f005 fb81 	bl	8005ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2310      	movs	r3, #16
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f005 fb7a 	bl	8005ce0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 f84b 	bl	800268c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	2202      	movs	r2, #2
 80005fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000604:	0021      	movs	r1, r4
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2240      	movs	r2, #64	@ 0x40
 8000610:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2202      	movs	r2, #2
 8000616:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2202      	movs	r2, #2
 800061c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2208      	movs	r2, #8
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	0292      	lsls	r2, r2, #10
 8000630:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	0592      	lsls	r2, r2, #22
 8000638:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	187b      	adds	r3, r7, r1
 800063c:	0018      	movs	r0, r3
 800063e:	f002 f871 	bl	8002724 <HAL_RCC_OscConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000646:	f000 fb1b 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2207      	movs	r2, #7
 800064e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2202      	movs	r2, #2
 8000654:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2102      	movs	r1, #2
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fb6c 	bl	8002d44 <HAL_RCC_ClockConfig>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000670:	f000 fb06 	bl	8000c80 <Error_Handler>
  }
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b013      	add	sp, #76	@ 0x4c
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_I2C2_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <MX_I2C2_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fea9 	bl	8002410 <HAL_I2C_Init>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 fadd 	bl	8000c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 ff46 	bl	800255c <HAL_I2CEx_ConfigAnalogFilter>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 fad4 	bl	8000c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 ff89 	bl	80025f4 <HAL_I2CEx_ConfigDigitalFilter>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 facb 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	40005800 	.word	0x40005800
 80006f8:	10b17db5 	.word	0x10b17db5

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	@ 0x70
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	2360      	movs	r3, #96	@ 0x60
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	2310      	movs	r3, #16
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f005 fae7 	bl	8005ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	2354      	movs	r3, #84	@ 0x54
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	0018      	movs	r0, r3
 8000718:	230c      	movs	r3, #12
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f005 fadf 	bl	8005ce0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000722:	2338      	movs	r3, #56	@ 0x38
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	0018      	movs	r0, r3
 8000728:	231c      	movs	r3, #28
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f005 fad7 	bl	8005ce0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	0018      	movs	r0, r3
 8000736:	2334      	movs	r3, #52	@ 0x34
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f005 fad0 	bl	8005ce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b52      	ldr	r3, [pc, #328]	@ (800088c <MX_TIM1_Init+0x190>)
 8000742:	4a53      	ldr	r2, [pc, #332]	@ (8000890 <MX_TIM1_Init+0x194>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000746:	4b51      	ldr	r3, [pc, #324]	@ (800088c <MX_TIM1_Init+0x190>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b4f      	ldr	r3, [pc, #316]	@ (800088c <MX_TIM1_Init+0x190>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000752:	4b4e      	ldr	r3, [pc, #312]	@ (800088c <MX_TIM1_Init+0x190>)
 8000754:	22fa      	movs	r2, #250	@ 0xfa
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b4c      	ldr	r3, [pc, #304]	@ (800088c <MX_TIM1_Init+0x190>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000760:	4b4a      	ldr	r3, [pc, #296]	@ (800088c <MX_TIM1_Init+0x190>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b49      	ldr	r3, [pc, #292]	@ (800088c <MX_TIM1_Init+0x190>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076c:	4b47      	ldr	r3, [pc, #284]	@ (800088c <MX_TIM1_Init+0x190>)
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fdb8 	bl	80032e4 <HAL_TIM_Base_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000778:	f000 fa82 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	2160      	movs	r1, #96	@ 0x60
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2280      	movs	r2, #128	@ 0x80
 8000782:	0152      	lsls	r2, r2, #5
 8000784:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000786:	187a      	adds	r2, r7, r1
 8000788:	4b40      	ldr	r3, [pc, #256]	@ (800088c <MX_TIM1_Init+0x190>)
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f003 f839 	bl	8003804 <HAL_TIM_ConfigClockSource>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000796:	f000 fa73 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079a:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <MX_TIM1_Init+0x190>)
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fdf9 	bl	8003394 <HAL_TIM_PWM_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80007a6:	f000 fa6b 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2154      	movs	r1, #84	@ 0x54
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2280      	movs	r2, #128	@ 0x80
 80007bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007be:	187a      	adds	r2, r7, r1
 80007c0:	4b32      	ldr	r3, [pc, #200]	@ (800088c <MX_TIM1_Init+0x190>)
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f003 fda5 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80007ce:	f000 fa57 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d2:	2138      	movs	r1, #56	@ 0x38
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2260      	movs	r2, #96	@ 0x60
 80007d8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	22fa      	movs	r2, #250	@ 0xfa
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2204      	movs	r2, #4
 80007f2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000800:	1879      	adds	r1, r7, r1
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_TIM1_Init+0x190>)
 8000804:	2200      	movs	r2, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f002 fefc 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000810:	f000 fa36 	bl	8000c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2280      	movs	r2, #128	@ 0x80
 8000836:	0192      	lsls	r2, r2, #6
 8000838:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	0492      	lsls	r2, r2, #18
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000866:	1d3a      	adds	r2, r7, #4
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_TIM1_Init+0x190>)
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f003 fdb3 	bl	80043d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000876:	f000 fa03 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800087a:	4b04      	ldr	r3, [pc, #16]	@ (800088c <MX_TIM1_Init+0x190>)
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fe27 	bl	80014d0 <HAL_TIM_MspPostInit>

}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b01c      	add	sp, #112	@ 0x70
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000080 	.word	0x20000080
 8000890:	40012c00 	.word	0x40012c00

08000894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b090      	sub	sp, #64	@ 0x40
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800089a:	232c      	movs	r3, #44	@ 0x2c
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	2314      	movs	r3, #20
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f005 fa1b 	bl	8005ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	2320      	movs	r3, #32
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	0018      	movs	r0, r3
 80008b0:	230c      	movs	r3, #12
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f005 fa13 	bl	8005ce0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	231c      	movs	r3, #28
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f005 fa0c 	bl	8005ce0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c8:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <MX_TIM3_Init+0xfc>)
 80008ca:	4a32      	ldr	r2, [pc, #200]	@ (8000994 <MX_TIM3_Init+0x100>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <MX_TIM3_Init+0xfc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <MX_TIM3_Init+0xfc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <MX_TIM3_Init+0xfc>)
 80008dc:	22fa      	movs	r2, #250	@ 0xfa
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000990 <MX_TIM3_Init+0xfc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <MX_TIM3_Init+0xfc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ee:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <MX_TIM3_Init+0xfc>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 fcf7 	bl	80032e4 <HAL_TIM_Base_Init>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f9c1 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008fe:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <MX_TIM3_Init+0xfc>)
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fd47 	bl	8003394 <HAL_TIM_PWM_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800090a:	f000 f9b9 	bl	8000c80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800090e:	212c      	movs	r1, #44	@ 0x2c
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800091c:	187a      	adds	r2, r7, r1
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM3_Init+0xfc>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f003 f844 	bl	80039b0 <HAL_TIM_SlaveConfigSynchro>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800092c:	f000 f9a8 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2120      	movs	r1, #32
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093e:	187a      	adds	r2, r7, r1
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_TIM3_Init+0xfc>)
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f003 fce5 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 800094e:	f000 f997 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2260      	movs	r2, #96	@ 0x60
 8000956:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	22fa      	movs	r2, #250	@ 0xfa
 800095c:	0052      	lsls	r2, r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2204      	movs	r2, #4
 800096a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096c:	1d39      	adds	r1, r7, #4
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_TIM3_Init+0xfc>)
 8000970:	2200      	movs	r2, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fe46 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800097c:	f000 f980 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <MX_TIM3_Init+0xfc>)
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fda4 	bl	80014d0 <HAL_TIM_MspPostInit>

}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b010      	add	sp, #64	@ 0x40
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000cc 	.word	0x200000cc
 8000994:	40000400 	.word	0x40000400

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 800099e:	4a24      	ldr	r2, [pc, #144]	@ (8000a30 <MX_USART1_UART_Init+0x98>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80009a2:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009a4:	22e1      	movs	r2, #225	@ 0xe1
 80009a6:	0212      	lsls	r2, r2, #8
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f003 fd94 	bl	8004510 <HAL_UART_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f948 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f005 f82b 	bl	8005a50 <HAL_UARTEx_SetTxFifoThreshold>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f93f 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f005 f862 	bl	8005ad0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f936 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f004 ffe0 	bl	80059dc <HAL_UARTEx_DisableFifoMode>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f92e 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	20000118 	.word	0x20000118
 8000a30:	40013800 	.word	0x40013800

08000a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_DMA_Init+0x48>)
 8000a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_DMA_Init+0x48>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a46:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <MX_DMA_Init+0x48>)
 8000a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2009      	movs	r0, #9
 8000a58:	f001 f808 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a5c:	2009      	movs	r0, #9
 8000a5e:	f001 f81a 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	200a      	movs	r0, #10
 8000a68:	f001 f800 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f001 f812 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	40021000 	.word	0x40021000

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b089      	sub	sp, #36	@ 0x24
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	240c      	movs	r4, #12
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	001a      	movs	r2, r3
 8000a90:	2100      	movs	r1, #0
 8000a92:	f005 f925 	bl	8005ce0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9a:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa2:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab2:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aba:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000abe:	2204      	movs	r2, #4
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aca:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000ade:	23c0      	movs	r3, #192	@ 0xc0
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	4825      	ldr	r0, [pc, #148]	@ (8000b78 <MX_GPIO_Init+0xf8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	f001 fc74 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin, GPIO_PIN_RESET);
 8000aec:	23a0      	movs	r3, #160	@ 0xa0
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	2200      	movs	r2, #0
 8000af2:	211c      	movs	r1, #28
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 fc6d 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECT_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin|LED_1_Pin;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	22c0      	movs	r2, #192	@ 0xc0
 8000afe:	0212      	lsls	r2, r2, #8
 8000b00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2201      	movs	r2, #1
 8000b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	4a18      	ldr	r2, [pc, #96]	@ (8000b78 <MX_GPIO_Init+0xf8>)
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	f001 faf6 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_UI_Pin INT_EXT_Pin ERR_1_Pin ERR_2_Pin */
  GPIO_InitStruct.Pin = INT_UI_Pin|INT_EXT_Pin|ERR_1_Pin|ERR_2_Pin;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	22a3      	movs	r2, #163	@ 0xa3
 8000b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2288      	movs	r2, #136	@ 0x88
 8000b2a:	0352      	lsls	r2, r2, #13
 8000b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	193a      	adds	r2, r7, r4
 8000b36:	23a0      	movs	r3, #160	@ 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 fae5 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_Pin OUT_2_Pin OUT_3_Pin */
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin;
 8000b42:	0021      	movs	r1, r4
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	221c      	movs	r2, #28
 8000b48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	187a      	adds	r2, r7, r1
 8000b5e:	23a0      	movs	r3, #160	@ 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 fad1 	bl	800210c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b009      	add	sp, #36	@ 0x24
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000
 8000b78:	50000800 	.word	0x50000800

08000b7c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]


	    RX_2;
 8000b84:	2380      	movs	r3, #128	@ 0x80
 8000b86:	01db      	lsls	r3, r3, #7
 8000b88:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <HAL_UART_TxCpltCallback+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	f001 fc21 	bl	80023d4 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8000b92:	f000 feb5 	bl	8001900 <HAL_GetTick>
 8000b96:	0002      	movs	r2, r0
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_UART_TxCpltCallback+0x68>)
 8000b9a:	601a      	str	r2, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 8000b9c:	4912      	ldr	r1, [pc, #72]	@ (8000be8 <HAL_UART_TxCpltCallback+0x6c>)
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <HAL_UART_TxCpltCallback+0x70>)
 8000ba0:	2240      	movs	r2, #64	@ 0x40
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f004 ffd6 	bl	8005b54 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000ba8:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <HAL_UART_TxCpltCallback+0x70>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_UART_TxCpltCallback+0x70>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_UART_TxCpltCallback+0x74>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_UART_TxCpltCallback+0x74>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
	    LED_1_OFF;
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <HAL_UART_TxCpltCallback+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	f001 fbff 	bl	80023d4 <HAL_GPIO_WritePin>
}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	50000800 	.word	0x50000800
 8000be4:	20000264 	.word	0x20000264
 8000be8:	20000268 	.word	0x20000268
 8000bec:	20000118 	.word	0x20000118
 8000bf0:	200001ac 	.word	0x200001ac

08000bf4 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	1cbb      	adds	r3, r7, #2
 8000c00:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d124      	bne.n	8000c56 <HAL_UARTEx_RxEventCallback+0x62>
	{
        LED_1_ON;
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	4814      	ldr	r0, [pc, #80]	@ (8000c64 <HAL_UARTEx_RxEventCallback+0x70>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	0019      	movs	r1, r3
 8000c16:	f001 fbdd 	bl	80023d4 <HAL_GPIO_WritePin>
		lastActivityTime = HAL_GetTick();
 8000c1a:	f000 fe71 	bl	8001900 <HAL_GetTick>
 8000c1e:	0002      	movs	r2, r0
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <HAL_UARTEx_RxEventCallback+0x74>)
 8000c22:	601a      	str	r2, [r3, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_UARTEx_RxEventCallback+0x78>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_UARTEx_RxEventCallback+0x78>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2110      	movs	r1, #16
 8000c30:	438a      	bics	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 f85a 	bl	8001cf0 <HAL_DMA_Abort>
	   Registers_handler(rxFrame, data_reg, rcv_data_reg);
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <HAL_UARTEx_RxEventCallback+0x80>)
 8000c3e:	490e      	ldr	r1, [pc, #56]	@ (8000c78 <HAL_UARTEx_RxEventCallback+0x84>)
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_UARTEx_RxEventCallback+0x88>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff fbd2 	bl	80003ec <Registers_handler>
        TX_2;
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <HAL_UARTEx_RxEventCallback+0x70>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	0019      	movs	r1, r3
 8000c52:	f001 fbbf 	bl	80023d4 <HAL_GPIO_WritePin>
	}
}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	40013800 	.word	0x40013800
 8000c64:	50000800 	.word	0x50000800
 8000c68:	20000264 	.word	0x20000264
 8000c6c:	20000118 	.word	0x20000118
 8000c70:	200001ac 	.word	0x200001ac
 8000c74:	20000428 	.word	0x20000428
 8000c78:	200003a8 	.word	0x200003a8
 8000c7c:	20000268 	.word	0x20000268

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	000a      	movs	r2, r1
 8000c96:	1cfb      	adds	r3, r7, #3
 8000c98:	701a      	strb	r2, [r3, #0]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <calcCRC16ModBus+0xac>)
 8000c9c:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8000c9e:	2313      	movs	r3, #19
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e02d      	b.n	8000d04 <calcCRC16ModBus+0x78>
		temp = temp ^ buffer[i];
 8000ca8:	2313      	movs	r3, #19
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	4053      	eors	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e013      	b.n	8000cee <calcCRC16ModBus+0x62>
			flag = temp & 0x0001;
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	085b      	lsrs	r3, r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
			if (flag)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <calcCRC16ModBus+0x56>
				temp ^= 0xA001;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <calcCRC16ModBus+0xb0>)
 8000cde:	4053      	eors	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000ce2:	2112      	movs	r1, #18
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	3201      	adds	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	2312      	movs	r3, #18
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d9e6      	bls.n	8000cc6 <calcCRC16ModBus+0x3a>
	for (unsigned char i = 0; i < u8length; i++) {
 8000cf8:	2113      	movs	r1, #19
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	3201      	adds	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	2313      	movs	r3, #19
 8000d06:	18fa      	adds	r2, r7, r3
 8000d08:	1cfb      	adds	r3, r7, #3
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3ca      	bcc.n	8000ca8 <calcCRC16ModBus+0x1c>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	0c1b      	lsrs	r3, r3, #16
 8000d28:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	b29b      	uxth	r3, r3

}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b006      	add	sp, #24
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	0000ffff 	.word	0x0000ffff
 8000d3c:	0000a001 	.word	0x0000a001

08000d40 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calcCRC16ModBus(frame, len);
 8000d4e:	2516      	movs	r5, #22
 8000d50:	197c      	adds	r4, r7, r5
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	0011      	movs	r1, r2
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff ff96 	bl	8000c8c <calcCRC16ModBus>
 8000d60:	0003      	movs	r3, r0
 8000d62:	8023      	strh	r3, [r4, #0]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	197a      	adds	r2, r7, r5
 8000d70:	8812      	ldrh	r2, [r2, #0]
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 8000d76:	197b      	adds	r3, r7, r5
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	b299      	uxth	r1, r3
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	b2ca      	uxtb	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]

    TX_2;
 8000d8a:	2380      	movs	r3, #128	@ 0x80
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	480f      	ldr	r0, [pc, #60]	@ (8000dcc <sendModBusRequest+0x8c>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	0019      	movs	r1, r3
 8000d94:	f001 fb1e 	bl	80023d4 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);

    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3302      	adds	r3, #2
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	0018      	movs	r0, r3
 8000da8:	f003 fc08 	bl	80045bc <HAL_UART_Transmit_DMA>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d008      	beq.n	8000dc2 <sendModBusRequest+0x82>

    	LED_1_OFF;
 8000db0:	2380      	movs	r3, #128	@ 0x80
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <sendModBusRequest+0x8c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	0019      	movs	r1, r3
 8000dba:	f001 fb0b 	bl	80023d4 <HAL_GPIO_WritePin>

	        Error_Handler();
 8000dbe:	f7ff ff5f 	bl	8000c80 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b006      	add	sp, #24
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}
 8000dcc:	50000800 	.word	0x50000800

08000dd0 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];

extern uint8_t SLAVE_ID;

modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8000dda:	4b45      	ldr	r3, [pc, #276]	@ (8000ef0 <handleReadHoldingRegs+0x120>)
 8000ddc:	789b      	ldrb	r3, [r3, #2]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <handleReadHoldingRegs+0x120>)
 8000de4:	78db      	ldrb	r3, [r3, #3]
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	2116      	movs	r1, #22
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8000df2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <handleReadHoldingRegs+0x120>)
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef0 <handleReadHoldingRegs+0x120>)
 8000dfc:	795b      	ldrb	r3, [r3, #5]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	200a      	movs	r0, #10
 8000e06:	183b      	adds	r3, r7, r0
 8000e08:	801a      	strh	r2, [r3, #0]

	startingReg=startingReg-30001;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	187a      	adds	r2, r7, r1
 8000e0e:	8812      	ldrh	r2, [r2, #0]
 8000e10:	4c38      	ldr	r4, [pc, #224]	@ (8000ef4 <handleReadHoldingRegs+0x124>)
 8000e12:	46a4      	mov	ip, r4
 8000e14:	4462      	add	r2, ip
 8000e16:	801a      	strh	r2, [r3, #0]

	uint16_t endAddr = startingReg+numOfregs-1;
 8000e18:	187a      	adds	r2, r7, r1
 8000e1a:	183b      	adds	r3, r7, r0
 8000e1c:	8812      	ldrh	r2, [r2, #0]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	2308      	movs	r3, #8
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	801a      	strh	r2, [r3, #0]



	if((numOfregs<0)|(numOfregs >125)){
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e32:	d906      	bls.n	8000e42 <handleReadHoldingRegs+0x72>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2103      	movs	r1, #3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f000 fa7f 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e051      	b.n	8000ee6 <handleReadHoldingRegs+0x116>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8000e42:	2308      	movs	r3, #8
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e4a:	d906      	bls.n	8000e5a <handleReadHoldingRegs+0x8a>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2102      	movs	r1, #2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fa73 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e045      	b.n	8000ee6 <handleReadHoldingRegs+0x116>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <handleReadHoldingRegs+0x128>)
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <handleReadHoldingRegs+0x12c>)
 8000e60:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8000e62:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <handleReadHoldingRegs+0x120>)
 8000e64:	785a      	ldrb	r2, [r3, #1]
 8000e66:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <handleReadHoldingRegs+0x12c>)
 8000e68:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	18db      	adds	r3, r3, r3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <handleReadHoldingRegs+0x12c>)
 8000e78:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	e022      	b.n	8000eca <handleReadHoldingRegs+0xfa>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8000e84:	2016      	movs	r0, #22
 8000e86:	183b      	adds	r3, r7, r0
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	18d3      	adds	r3, r2, r3
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	b299      	uxth	r1, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	613a      	str	r2, [r7, #16]
 8000e9c:	b2c9      	uxtb	r1, r1
 8000e9e:	4a17      	ldr	r2, [pc, #92]	@ (8000efc <handleReadHoldingRegs+0x12c>)
 8000ea0:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8000ea2:	183b      	adds	r3, r7, r0
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	18d3      	adds	r3, r2, r3
 8000eac:	8819      	ldrh	r1, [r3, #0]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	613a      	str	r2, [r7, #16]
 8000eb4:	b2c9      	uxtb	r1, r1
 8000eb6:	4a11      	ldr	r2, [pc, #68]	@ (8000efc <handleReadHoldingRegs+0x12c>)
 8000eb8:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8000eba:	183b      	adds	r3, r7, r0
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	183b      	adds	r3, r7, r0
 8000ec0:	3201      	adds	r2, #1
 8000ec2:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	230a      	movs	r3, #10
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dbd6      	blt.n	8000e84 <handleReadHoldingRegs+0xb4>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <handleReadHoldingRegs+0x12c>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ff2e 	bl	8000d40 <sendModBusRequest>
	return 1;
 8000ee4:	2301      	movs	r3, #1

}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b007      	add	sp, #28
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	20000268 	.word	0x20000268
 8000ef4:	ffff8acf 	.word	0xffff8acf
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	200002a8 	.word	0x200002a8

08000f00 <handleReadInputRegs>:

modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8000f0a:	4b41      	ldr	r3, [pc, #260]	@ (8001010 <handleReadInputRegs+0x110>)
 8000f0c:	789b      	ldrb	r3, [r3, #2]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b3f      	ldr	r3, [pc, #252]	@ (8001010 <handleReadInputRegs+0x110>)
 8000f14:	78db      	ldrb	r3, [r3, #3]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	2016      	movs	r0, #22
 8000f1e:	183b      	adds	r3, r7, r0
 8000f20:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8000f22:	4b3b      	ldr	r3, [pc, #236]	@ (8001010 <handleReadInputRegs+0x110>)
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b39      	ldr	r3, [pc, #228]	@ (8001010 <handleReadInputRegs+0x110>)
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	210a      	movs	r1, #10
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	801a      	strh	r2, [r3, #0]

	uint16_t endAddr = startingReg+numOfregs-1;
 8000f3a:	183a      	adds	r2, r7, r0
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	8812      	ldrh	r2, [r2, #0]
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	18d3      	adds	r3, r2, r3
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	2308      	movs	r3, #8
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	3a01      	subs	r2, #1
 8000f4c:	801a      	strh	r2, [r3, #0]

	if((numOfregs<0)|(numOfregs >125)){
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f54:	d906      	bls.n	8000f64 <handleReadInputRegs+0x64>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2103      	movs	r1, #3
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f9ee 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e051      	b.n	8001008 <handleReadInputRegs+0x108>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8000f64:	2308      	movs	r3, #8
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2b3c      	cmp	r3, #60	@ 0x3c
 8000f6c:	d906      	bls.n	8000f7c <handleReadInputRegs+0x7c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2102      	movs	r1, #2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 f9e2 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e045      	b.n	8001008 <handleReadInputRegs+0x108>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <handleReadInputRegs+0x114>)
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <handleReadInputRegs+0x118>)
 8000f82:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <handleReadInputRegs+0x110>)
 8000f86:	785a      	ldrb	r2, [r3, #1]
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <handleReadInputRegs+0x118>)
 8000f8a:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	18db      	adds	r3, r3, r3
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <handleReadInputRegs+0x118>)
 8000f9a:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e022      	b.n	8000fec <handleReadInputRegs+0xec>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8000fa6:	2016      	movs	r0, #22
 8000fa8:	183b      	adds	r3, r7, r0
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	18d3      	adds	r3, r2, r3
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	613a      	str	r2, [r7, #16]
 8000fbe:	b2c9      	uxtb	r1, r1
 8000fc0:	4a15      	ldr	r2, [pc, #84]	@ (8001018 <handleReadInputRegs+0x118>)
 8000fc2:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8000fc4:	183b      	adds	r3, r7, r0
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	18d3      	adds	r3, r2, r3
 8000fce:	8819      	ldrh	r1, [r3, #0]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	613a      	str	r2, [r7, #16]
 8000fd6:	b2c9      	uxtb	r1, r1
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001018 <handleReadInputRegs+0x118>)
 8000fda:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8000fdc:	183b      	adds	r3, r7, r0
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	183b      	adds	r3, r7, r0
 8000fe2:	3201      	adds	r2, #1
 8000fe4:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	230a      	movs	r3, #10
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbd6      	blt.n	8000fa6 <handleReadInputRegs+0xa6>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4906      	ldr	r1, [pc, #24]	@ (8001018 <handleReadInputRegs+0x118>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fe9d 	bl	8000d40 <sendModBusRequest>
	return 1;
 8001006:	2301      	movs	r3, #1
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b006      	add	sp, #24
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000268 	.word	0x20000268
 8001014:	20000000 	.word	0x20000000
 8001018:	200002a8 	.word	0x200002a8

0800101c <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001026:	4b38      	ldr	r3, [pc, #224]	@ (8001108 <handleReadCoils+0xec>)
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b36      	ldr	r3, [pc, #216]	@ (8001108 <handleReadCoils+0xec>)
 8001030:	78db      	ldrb	r3, [r3, #3]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21a      	sxth	r2, r3
 8001038:	230e      	movs	r3, #14
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	801a      	strh	r2, [r3, #0]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <handleReadCoils+0xec>)
 8001040:	791b      	ldrb	r3, [r3, #4]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <handleReadCoils+0xec>)
 8001048:	795b      	ldrb	r3, [r3, #5]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	210c      	movs	r1, #12
 8001052:	187b      	adds	r3, r7, r1
 8001054:	801a      	strh	r2, [r3, #0]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001056:	000a      	movs	r2, r1
 8001058:	18bb      	adds	r3, r7, r2
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <handleReadCoils+0x50>
 8001060:	18bb      	adds	r3, r7, r2
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	23fa      	movs	r3, #250	@ 0xfa
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	429a      	cmp	r2, r3
 800106a:	d906      	bls.n	800107a <handleReadCoils+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2103      	movs	r1, #3
 8001070:	0018      	movs	r0, r3
 8001072:	f000 f963 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 8001076:	2300      	movs	r3, #0
 8001078:	e041      	b.n	80010fe <handleReadCoils+0xe2>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 800107a:	230e      	movs	r3, #14
 800107c:	18fa      	adds	r2, r7, r3
 800107e:	230c      	movs	r3, #12
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	8812      	ldrh	r2, [r2, #0]
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	18d3      	adds	r3, r2, r3
 8001088:	b29a      	uxth	r2, r3
 800108a:	210a      	movs	r1, #10
 800108c:	187b      	adds	r3, r7, r1
 800108e:	3a01      	subs	r2, #1
 8001090:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001092:	187b      	adds	r3, r7, r1
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	2bc7      	cmp	r3, #199	@ 0xc7
 8001098:	d906      	bls.n	80010a8 <handleReadCoils+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2102      	movs	r1, #2
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 f94c 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e02a      	b.n	80010fe <handleReadCoils+0xe2>
	}
	memset (txFrame, '\0', 256);
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	005a      	lsls	r2, r3, #1
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <handleReadCoils+0xf0>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	0018      	movs	r0, r3
 80010b2:	f004 fe15 	bl	8005ce0 <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <handleReadCoils+0xf4>)
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <handleReadCoils+0xf0>)
 80010bc:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <handleReadCoils+0xec>)
 80010c0:	785a      	ldrb	r2, [r3, #1]
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <handleReadCoils+0xf0>)
 80010c4:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 80010c6:	220c      	movs	r2, #12
 80010c8:	18bb      	adds	r3, r7, r2
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	18ba      	adds	r2, r7, r2
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	2107      	movs	r1, #7
 80010d8:	400a      	ands	r2, r1
 80010da:	b292      	uxth	r2, r2
 80010dc:	1e51      	subs	r1, r2, #1
 80010de:	418a      	sbcs	r2, r1
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <handleReadCoils+0xf0>)
 80010e8:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <handleReadCoils+0xf0>)
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	3303      	adds	r3, #3
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4906      	ldr	r1, [pc, #24]	@ (800110c <handleReadCoils+0xf0>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff fe22 	bl	8000d40 <sendModBusRequest>
	return 1;
 80010fc:	2301      	movs	r3, #1

}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	20000268 	.word	0x20000268
 800110c:	200002a8 	.word	0x200002a8
 8001110:	20000000 	.word	0x20000000

08001114 <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 800111e:	4b39      	ldr	r3, [pc, #228]	@ (8001204 <handleReadDiscreteInputs+0xf0>)
 8001120:	789b      	ldrb	r3, [r3, #2]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b37      	ldr	r3, [pc, #220]	@ (8001204 <handleReadDiscreteInputs+0xf0>)
 8001128:	78db      	ldrb	r3, [r3, #3]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	230e      	movs	r3, #14
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	801a      	strh	r2, [r3, #0]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001136:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <handleReadDiscreteInputs+0xf0>)
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <handleReadDiscreteInputs+0xf0>)
 8001140:	795b      	ldrb	r3, [r3, #5]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	210c      	movs	r1, #12
 800114a:	187b      	adds	r3, r7, r1
 800114c:	801a      	strh	r2, [r3, #0]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 800114e:	000a      	movs	r2, r1
 8001150:	18bb      	adds	r3, r7, r2
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <handleReadDiscreteInputs+0x50>
 8001158:	18bb      	adds	r3, r7, r2
 800115a:	881a      	ldrh	r2, [r3, #0]
 800115c:	23fa      	movs	r3, #250	@ 0xfa
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	429a      	cmp	r2, r3
 8001162:	d906      	bls.n	8001172 <handleReadDiscreteInputs+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2103      	movs	r1, #3
 8001168:	0018      	movs	r0, r3
 800116a:	f000 f8e7 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 800116e:	2300      	movs	r3, #0
 8001170:	e044      	b.n	80011fc <handleReadDiscreteInputs+0xe8>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001172:	230e      	movs	r3, #14
 8001174:	18fa      	adds	r2, r7, r3
 8001176:	230c      	movs	r3, #12
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	8812      	ldrh	r2, [r2, #0]
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	b29a      	uxth	r2, r3
 8001182:	210a      	movs	r1, #10
 8001184:	187b      	adds	r3, r7, r1
 8001186:	3a01      	subs	r2, #1
 8001188:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  										 // end coil can not be more than 199
 800118a:	187b      	adds	r3, r7, r1
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001190:	d906      	bls.n	80011a0 <handleReadDiscreteInputs+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2102      	movs	r1, #2
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f8d0 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 800119c:	2300      	movs	r3, #0
 800119e:	e02d      	b.n	80011fc <handleReadDiscreteInputs+0xe8>
	}
	memset (txFrame, '\0', 256);
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	005a      	lsls	r2, r3, #1
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <handleReadDiscreteInputs+0xf4>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	0018      	movs	r0, r3
 80011aa:	f004 fd99 	bl	8005ce0 <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <handleReadDiscreteInputs+0xf8>)
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <handleReadDiscreteInputs+0xf4>)
 80011b4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <handleReadDiscreteInputs+0xf0>)
 80011b8:	785a      	ldrb	r2, [r3, #1]
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <handleReadDiscreteInputs+0xf4>)
 80011bc:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 80011be:	220c      	movs	r2, #12
 80011c0:	18bb      	adds	r3, r7, r2
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	08db      	lsrs	r3, r3, #3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	18ba      	adds	r2, r7, r2
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	2107      	movs	r1, #7
 80011d0:	400a      	ands	r2, r1
 80011d2:	b292      	uxth	r2, r2
 80011d4:	1e51      	subs	r1, r2, #1
 80011d6:	418a      	sbcs	r2, r1
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <handleReadDiscreteInputs+0xf4>)
 80011e0:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <handleReadDiscreteInputs+0xf4>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <handleReadDiscreteInputs+0xf4>)
 80011ea:	789b      	ldrb	r3, [r3, #2]
 80011ec:	3303      	adds	r3, #3
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4905      	ldr	r1, [pc, #20]	@ (8001208 <handleReadDiscreteInputs+0xf4>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff fda3 	bl	8000d40 <sendModBusRequest>
	return 1;
 80011fa:	2301      	movs	r3, #1

}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000268 	.word	0x20000268
 8001208:	200002a8 	.word	0x200002a8
 800120c:	20000000 	.word	0x20000000

08001210 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 800121a:	4b45      	ldr	r3, [pc, #276]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b43      	ldr	r3, [pc, #268]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 8001224:	78db      	ldrb	r3, [r3, #3]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	2316      	movs	r3, #22
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	801a      	strh	r2, [r3, #0]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001232:	4b3f      	ldr	r3, [pc, #252]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b3d      	ldr	r3, [pc, #244]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 800123c:	795b      	ldrb	r3, [r3, #5]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21a      	sxth	r2, r3
 8001244:	210a      	movs	r1, #10
 8001246:	187b      	adds	r3, r7, r1
 8001248:	801a      	strh	r2, [r3, #0]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 800124a:	000a      	movs	r2, r1
 800124c:	18bb      	adds	r3, r7, r2
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <handleWriteMulyipleHandlingRegister+0x4c>
 8001254:	18bb      	adds	r3, r7, r2
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2b7b      	cmp	r3, #123	@ 0x7b
 800125a:	d906      	bls.n	800126a <handleWriteMulyipleHandlingRegister+0x5a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2103      	movs	r1, #3
 8001260:	0018      	movs	r0, r3
 8001262:	f000 f86b 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 8001266:	2300      	movs	r3, #0
 8001268:	e05d      	b.n	8001326 <handleWriteMulyipleHandlingRegister+0x116>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 800126a:	2316      	movs	r3, #22
 800126c:	18fa      	adds	r2, r7, r3
 800126e:	230a      	movs	r3, #10
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	8812      	ldrh	r2, [r2, #0]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	18d3      	adds	r3, r2, r3
 8001278:	b29a      	uxth	r2, r3
 800127a:	2108      	movs	r1, #8
 800127c:	187b      	adds	r3, r7, r1
 800127e:	3a01      	subs	r2, #1
 8001280:	801a      	strh	r2, [r3, #0]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001282:	187b      	adds	r3, r7, r1
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	2b3c      	cmp	r3, #60	@ 0x3c
 8001288:	d906      	bls.n	8001298 <handleWriteMulyipleHandlingRegister+0x88>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2102      	movs	r1, #2
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f854 	bl	800133c <sendModbusException>
		return MODBUS_ERROR;
 8001294:	2300      	movs	r3, #0
 8001296:	e046      	b.n	8001326 <handleWriteMulyipleHandlingRegister+0x116>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001298:	2307      	movs	r3, #7
 800129a:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e01c      	b.n	80012dc <handleWriteMulyipleHandlingRegister+0xcc>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	613a      	str	r2, [r7, #16]
 80012a8:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1c59      	adds	r1, r3, #1
 80012b4:	6139      	str	r1, [r7, #16]
 80012b6:	491e      	ldr	r1, [pc, #120]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b219      	sxth	r1, r3
 80012c0:	2216      	movs	r2, #22
 80012c2:	18bb      	adds	r3, r7, r2
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	18ba      	adds	r2, r7, r2
 80012c8:	1c58      	adds	r0, r3, #1
 80012ca:	8010      	strh	r0, [r2, #0]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	b28a      	uxth	r2, r1
 80012d4:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	230a      	movs	r3, #10
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbdc      	blt.n	80012a2 <handleWriteMulyipleHandlingRegister+0x92>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <handleWriteMulyipleHandlingRegister+0x124>)
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <handleWriteMulyipleHandlingRegister+0x128>)
 80012ee:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 80012f2:	785a      	ldrb	r2, [r3, #1]
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <handleWriteMulyipleHandlingRegister+0x128>)
 80012f6:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 80012fa:	789a      	ldrb	r2, [r3, #2]
 80012fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <handleWriteMulyipleHandlingRegister+0x128>)
 80012fe:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 8001302:	78da      	ldrb	r2, [r3, #3]
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <handleWriteMulyipleHandlingRegister+0x128>)
 8001306:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 800130a:	791a      	ldrb	r2, [r3, #4]
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <handleWriteMulyipleHandlingRegister+0x128>)
 800130e:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001310:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <handleWriteMulyipleHandlingRegister+0x120>)
 8001312:	795a      	ldrb	r2, [r3, #5]
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <handleWriteMulyipleHandlingRegister+0x128>)
 8001316:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001318:	4907      	ldr	r1, [pc, #28]	@ (8001338 <handleWriteMulyipleHandlingRegister+0x128>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2206      	movs	r2, #6
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff fd0e 	bl	8000d40 <sendModBusRequest>
	return 1;   // success
 8001324:	2301      	movs	r3, #1

}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b006      	add	sp, #24
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	20000268 	.word	0x20000268
 8001334:	20000000 	.word	0x20000000
 8001338:	200002a8 	.word	0x200002a8

0800133c <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	000a      	movs	r2, r1
 8001346:	1cfb      	adds	r3, r7, #3
 8001348:	701a      	strb	r2, [r3, #0]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <sendModbusException+0x44>)
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <sendModbusException+0x48>)
 8001350:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <sendModbusException+0x44>)
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	4252      	negs	r2, r2
 800135a:	4313      	orrs	r3, r2
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <sendModbusException+0x48>)
 8001360:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <sendModbusException+0x48>)
 8001364:	1cfa      	adds	r2, r7, #3
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	709a      	strb	r2, [r3, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 800136a:	4906      	ldr	r1, [pc, #24]	@ (8001384 <sendModbusException+0x48>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2203      	movs	r2, #3
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff fce5 	bl	8000d40 <sendModBusRequest>
 8001376:	0003      	movs	r3, r0
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000268 	.word	0x20000268
 8001384:	200002a8 	.word	0x200002a8

08001388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_MspInit+0x44>)
 8001390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_MspInit+0x44>)
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	641a      	str	r2, [r3, #64]	@ 0x40
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_MspInit+0x44>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	2201      	movs	r2, #1
 80013a0:	4013      	ands	r3, r2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_MspInit+0x44>)
 80013a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_MspInit+0x44>)
 80013ac:	2180      	movs	r1, #128	@ 0x80
 80013ae:	0549      	lsls	r1, r1, #21
 80013b0:	430a      	orrs	r2, r1
 80013b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_MspInit+0x44>)
 80013b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	055b      	lsls	r3, r3, #21
 80013bc:	4013      	ands	r3, r2
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b08b      	sub	sp, #44	@ 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	2414      	movs	r4, #20
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	0018      	movs	r0, r3
 80013de:	2314      	movs	r3, #20
 80013e0:	001a      	movs	r2, r3
 80013e2:	2100      	movs	r1, #0
 80013e4:	f004 fc7c 	bl	8005ce0 <memset>
  if(hi2c->Instance==I2C2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <HAL_I2C_MspInit+0x90>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d131      	bne.n	8001456 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_I2C_MspInit+0x94>)
 80013f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_I2C_MspInit+0x94>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_I2C_MspInit+0x94>)
 8001400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	22c0      	movs	r2, #192	@ 0xc0
 800140e:	0152      	lsls	r2, r2, #5
 8001410:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001412:	0021      	movs	r1, r4
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2212      	movs	r2, #18
 8001418:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2206      	movs	r2, #6
 800142a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	187a      	adds	r2, r7, r1
 800142e:	23a0      	movs	r3, #160	@ 0xa0
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f000 fe69 	bl	800210c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <HAL_I2C_MspInit+0x94>)
 800143c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_I2C_MspInit+0x94>)
 8001440:	2180      	movs	r1, #128	@ 0x80
 8001442:	03c9      	lsls	r1, r1, #15
 8001444:	430a      	orrs	r2, r1
 8001446:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_I2C_MspInit+0x94>)
 800144a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	03db      	lsls	r3, r3, #15
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b00b      	add	sp, #44	@ 0x2c
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	40005800 	.word	0x40005800
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <HAL_TIM_Base_MspInit+0x5c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10e      	bne.n	8001498 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <HAL_TIM_Base_MspInit+0x60>)
 800147c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_TIM_Base_MspInit+0x60>)
 8001480:	2180      	movs	r1, #128	@ 0x80
 8001482:	0109      	lsls	r1, r1, #4
 8001484:	430a      	orrs	r2, r1
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_TIM_Base_MspInit+0x60>)
 800148a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001496:	e010      	b.n	80014ba <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_TIM_Base_MspInit+0x64>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10b      	bne.n	80014ba <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_TIM_Base_MspInit+0x60>)
 80014a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_TIM_Base_MspInit+0x60>)
 80014a8:	2102      	movs	r1, #2
 80014aa:	430a      	orrs	r2, r1
 80014ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_TIM_Base_MspInit+0x60>)
 80014b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	40012c00 	.word	0x40012c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40000400 	.word	0x40000400

080014d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b08b      	sub	sp, #44	@ 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	2414      	movs	r4, #20
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	0018      	movs	r0, r3
 80014de:	2314      	movs	r3, #20
 80014e0:	001a      	movs	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f004 fbfc 	bl	8005ce0 <memset>
  if(htim->Instance==TIM1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a29      	ldr	r2, [pc, #164]	@ (8001594 <HAL_TIM_MspPostInit+0xc4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d124      	bne.n	800153c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <HAL_TIM_MspPostInit+0xc8>)
 80014f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_TIM_MspPostInit+0xc8>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <HAL_TIM_MspPostInit+0xc8>)
 8001500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001502:	2201      	movs	r2, #1
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	0052      	lsls	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	0021      	movs	r1, r4
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2202      	movs	r2, #2
 8001518:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001520:	187b      	adds	r3, r7, r1
 8001522:	2202      	movs	r2, #2
 8001524:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2202      	movs	r2, #2
 800152a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	187a      	adds	r2, r7, r1
 800152e:	23a0      	movs	r3, #160	@ 0xa0
 8001530:	05db      	lsls	r3, r3, #23
 8001532:	0011      	movs	r1, r2
 8001534:	0018      	movs	r0, r3
 8001536:	f000 fde9 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800153a:	e027      	b.n	800158c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a16      	ldr	r2, [pc, #88]	@ (800159c <HAL_TIM_MspPostInit+0xcc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d122      	bne.n	800158c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_TIM_MspPostInit+0xc8>)
 8001548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_TIM_MspPostInit+0xc8>)
 800154c:	2101      	movs	r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	635a      	str	r2, [r3, #52]	@ 0x34
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_TIM_MspPostInit+0xc8>)
 8001554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001556:	2201      	movs	r2, #1
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800155e:	2114      	movs	r1, #20
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2240      	movs	r2, #64	@ 0x40
 8001564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2202      	movs	r2, #2
 800156a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2202      	movs	r2, #2
 8001576:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2201      	movs	r2, #1
 800157c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	187a      	adds	r2, r7, r1
 8001580:	23a0      	movs	r3, #160	@ 0xa0
 8001582:	05db      	lsls	r3, r3, #23
 8001584:	0011      	movs	r1, r2
 8001586:	0018      	movs	r0, r3
 8001588:	f000 fdc0 	bl	800210c <HAL_GPIO_Init>
}
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b00b      	add	sp, #44	@ 0x2c
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	40012c00 	.word	0x40012c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40000400 	.word	0x40000400

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b091      	sub	sp, #68	@ 0x44
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	232c      	movs	r3, #44	@ 0x2c
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	0018      	movs	r0, r3
 80015ae:	2314      	movs	r3, #20
 80015b0:	001a      	movs	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	f004 fb94 	bl	8005ce0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	2414      	movs	r4, #20
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	0018      	movs	r0, r3
 80015be:	2318      	movs	r3, #24
 80015c0:	001a      	movs	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	f004 fb8c 	bl	8005ce0 <memset>
  if(huart->Instance==USART1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a50      	ldr	r2, [pc, #320]	@ (8001710 <HAL_UART_MspInit+0x170>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d000      	beq.n	80015d4 <HAL_UART_MspInit+0x34>
 80015d2:	e098      	b.n	8001706 <HAL_UART_MspInit+0x166>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	0018      	movs	r0, r3
 80015e4:	f001 fd58 	bl	8003098 <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80015ec:	f7ff fb48 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f0:	4b48      	ldr	r3, [pc, #288]	@ (8001714 <HAL_UART_MspInit+0x174>)
 80015f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f4:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_UART_MspInit+0x174>)
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	01c9      	lsls	r1, r1, #7
 80015fa:	430a      	orrs	r2, r1
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80015fe:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <HAL_UART_MspInit+0x174>)
 8001600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	01db      	lsls	r3, r3, #7
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	4b41      	ldr	r3, [pc, #260]	@ (8001714 <HAL_UART_MspInit+0x174>)
 800160e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001610:	4b40      	ldr	r3, [pc, #256]	@ (8001714 <HAL_UART_MspInit+0x174>)
 8001612:	2102      	movs	r1, #2
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	@ 0x34
 8001618:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <HAL_UART_MspInit+0x174>)
 800161a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800161c:	2202      	movs	r2, #2
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001624:	212c      	movs	r1, #44	@ 0x2c
 8001626:	187b      	adds	r3, r7, r1
 8001628:	22c0      	movs	r2, #192	@ 0xc0
 800162a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2202      	movs	r2, #2
 8001630:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	187b      	adds	r3, r7, r1
 8001646:	4a34      	ldr	r2, [pc, #208]	@ (8001718 <HAL_UART_MspInit+0x178>)
 8001648:	0019      	movs	r1, r3
 800164a:	0010      	movs	r0, r2
 800164c:	f000 fd5e 	bl	800210c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001650:	4b32      	ldr	r3, [pc, #200]	@ (800171c <HAL_UART_MspInit+0x17c>)
 8001652:	4a33      	ldr	r2, [pc, #204]	@ (8001720 <HAL_UART_MspInit+0x180>)
 8001654:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <HAL_UART_MspInit+0x17c>)
 8001658:	2232      	movs	r2, #50	@ 0x32
 800165a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165c:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <HAL_UART_MspInit+0x17c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b2e      	ldr	r3, [pc, #184]	@ (800171c <HAL_UART_MspInit+0x17c>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b2c      	ldr	r3, [pc, #176]	@ (800171c <HAL_UART_MspInit+0x17c>)
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_UART_MspInit+0x17c>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <HAL_UART_MspInit+0x17c>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800167a:	4b28      	ldr	r3, [pc, #160]	@ (800171c <HAL_UART_MspInit+0x17c>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_UART_MspInit+0x17c>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001686:	4b25      	ldr	r3, [pc, #148]	@ (800171c <HAL_UART_MspInit+0x17c>)
 8001688:	0018      	movs	r0, r3
 800168a:	f000 fa21 	bl	8001ad0 <HAL_DMA_Init>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8001692:	f7ff faf5 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	4a20      	ldr	r2, [pc, #128]	@ (800171c <HAL_UART_MspInit+0x17c>)
 800169c:	505a      	str	r2, [r3, r1]
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <HAL_UART_MspInit+0x17c>)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016a6:	4a20      	ldr	r2, [pc, #128]	@ (8001728 <HAL_UART_MspInit+0x188>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016ac:	2233      	movs	r2, #51	@ 0x33
 80016ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016b2:	2210      	movs	r2, #16
 80016b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 f9f7 	bl	8001ad0 <HAL_DMA_Init>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 80016e6:	f7ff facb 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016ee:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_UART_MspInit+0x184>)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	201b      	movs	r0, #27
 80016fc:	f000 f9b6 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001700:	201b      	movs	r0, #27
 8001702:	f000 f9c8 	bl	8001a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b011      	add	sp, #68	@ 0x44
 800170c:	bd90      	pop	{r4, r7, pc}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	40013800 	.word	0x40013800
 8001714:	40021000 	.word	0x40021000
 8001718:	50000400 	.word	0x50000400
 800171c:	200001ac 	.word	0x200001ac
 8001720:	40020008 	.word	0x40020008
 8001724:	20000208 	.word	0x20000208
 8001728:	4002001c 	.word	0x4002001c

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001740:	46c0      	nop			@ (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f8c2 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <DMA1_Channel1_IRQHandler+0x14>)
 8001766:	0018      	movs	r0, r3
 8001768:	f000 fb8e 	bl	8001e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800176c:	46c0      	nop			@ (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	200001ac 	.word	0x200001ac

08001778 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800177c:	4b03      	ldr	r3, [pc, #12]	@ (800178c <DMA1_Channel2_3_IRQHandler+0x14>)
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fb82 	bl	8001e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001784:	46c0      	nop			@ (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	20000208 	.word	0x20000208

08001790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <USART1_IRQHandler+0x14>)
 8001796:	0018      	movs	r0, r3
 8001798:	f002 ffa2 	bl	80046e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	20000118 	.word	0x20000118

080017a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017b4:	480d      	ldr	r0, [pc, #52]	@ (80017ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017b8:	f7ff fff6 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <LoopForever+0xe>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001800 <LoopForever+0x16>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017e2:	f004 fa85 	bl	8005cf0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017e6:	f7fe feb9 	bl	800055c <main>

080017ea <LoopForever>:

LoopForever:
  b LoopForever
 80017ea:	e7fe      	b.n	80017ea <LoopForever>
  ldr   r0, =_estack
 80017ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017f8:	08005e78 	.word	0x08005e78
  ldr r2, =_sbss
 80017fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001800:	200004b0 	.word	0x200004b0

08001804 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_IRQHandler>
	...

08001808 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_Init+0x3c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_Init+0x3c>)
 800181a:	2180      	movs	r1, #128	@ 0x80
 800181c:	0049      	lsls	r1, r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	2003      	movs	r0, #3
 8001824:	f000 f810 	bl	8001848 <HAL_InitTick>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d003      	beq.n	8001834 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e001      	b.n	8001838 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff fda8 	bl	8001388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	781b      	ldrb	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001850:	230f      	movs	r3, #15
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <HAL_InitTick+0x88>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d02b      	beq.n	80018b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <HAL_InitTick+0x8c>)
 8001862:	681c      	ldr	r4, [r3, #0]
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_InitTick+0x88>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	0019      	movs	r1, r3
 800186a:	23fa      	movs	r3, #250	@ 0xfa
 800186c:	0098      	lsls	r0, r3, #2
 800186e:	f7fe fc47 	bl	8000100 <__udivsi3>
 8001872:	0003      	movs	r3, r0
 8001874:	0019      	movs	r1, r3
 8001876:	0020      	movs	r0, r4
 8001878:	f7fe fc42 	bl	8000100 <__udivsi3>
 800187c:	0003      	movs	r3, r0
 800187e:	0018      	movs	r0, r3
 8001880:	f000 f919 	bl	8001ab6 <HAL_SYSTICK_Config>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d112      	bne.n	80018ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d80a      	bhi.n	80018a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	425b      	negs	r3, r3
 8001894:	2200      	movs	r2, #0
 8001896:	0018      	movs	r0, r3
 8001898:	f000 f8e8 	bl	8001a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_InitTick+0x90>)
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e00d      	b.n	80018c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e008      	b.n	80018c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ae:	230f      	movs	r3, #15
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e003      	b.n	80018c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b8:	230f      	movs	r3, #15
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80018c0:	230f      	movs	r3, #15
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	781b      	ldrb	r3, [r3, #0]
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b005      	add	sp, #20
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_IncTick+0x1c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	001a      	movs	r2, r3
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_IncTick+0x20>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	18d2      	adds	r2, r2, r3
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_IncTick+0x20>)
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	2000000c 	.word	0x2000000c
 80018fc:	200004ac 	.word	0x200004ac

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b02      	ldr	r3, [pc, #8]	@ (8001910 <HAL_GetTick+0x10>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	200004ac 	.word	0x200004ac

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	0002      	movs	r2, r0
 800191c:	1dfb      	adds	r3, r7, #7
 800191e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b7f      	cmp	r3, #127	@ 0x7f
 8001926:	d809      	bhi.n	800193c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	001a      	movs	r2, r3
 800192e:	231f      	movs	r3, #31
 8001930:	401a      	ands	r2, r3
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_EnableIRQ+0x30>)
 8001934:	2101      	movs	r1, #1
 8001936:	4091      	lsls	r1, r2
 8001938:	000a      	movs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	0002      	movs	r2, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b7f      	cmp	r3, #127	@ 0x7f
 800195c:	d828      	bhi.n	80019b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a1c <__NVIC_SetPriority+0xd4>)
 8001960:	1dfb      	adds	r3, r7, #7
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b25b      	sxtb	r3, r3
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	33c0      	adds	r3, #192	@ 0xc0
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	589b      	ldr	r3, [r3, r2]
 800196e:	1dfa      	adds	r2, r7, #7
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	0011      	movs	r1, r2
 8001974:	2203      	movs	r2, #3
 8001976:	400a      	ands	r2, r1
 8001978:	00d2      	lsls	r2, r2, #3
 800197a:	21ff      	movs	r1, #255	@ 0xff
 800197c:	4091      	lsls	r1, r2
 800197e:	000a      	movs	r2, r1
 8001980:	43d2      	mvns	r2, r2
 8001982:	401a      	ands	r2, r3
 8001984:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	22ff      	movs	r2, #255	@ 0xff
 800198c:	401a      	ands	r2, r3
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	0018      	movs	r0, r3
 8001994:	2303      	movs	r3, #3
 8001996:	4003      	ands	r3, r0
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800199c:	481f      	ldr	r0, [pc, #124]	@ (8001a1c <__NVIC_SetPriority+0xd4>)
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	430a      	orrs	r2, r1
 80019a8:	33c0      	adds	r3, #192	@ 0xc0
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019ae:	e031      	b.n	8001a14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <__NVIC_SetPriority+0xd8>)
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	0019      	movs	r1, r3
 80019b8:	230f      	movs	r3, #15
 80019ba:	400b      	ands	r3, r1
 80019bc:	3b08      	subs	r3, #8
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3306      	adds	r3, #6
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	3304      	adds	r3, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1dfa      	adds	r2, r7, #7
 80019cc:	7812      	ldrb	r2, [r2, #0]
 80019ce:	0011      	movs	r1, r2
 80019d0:	2203      	movs	r2, #3
 80019d2:	400a      	ands	r2, r1
 80019d4:	00d2      	lsls	r2, r2, #3
 80019d6:	21ff      	movs	r1, #255	@ 0xff
 80019d8:	4091      	lsls	r1, r2
 80019da:	000a      	movs	r2, r1
 80019dc:	43d2      	mvns	r2, r2
 80019de:	401a      	ands	r2, r3
 80019e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	22ff      	movs	r2, #255	@ 0xff
 80019e8:	401a      	ands	r2, r3
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	0018      	movs	r0, r3
 80019f0:	2303      	movs	r3, #3
 80019f2:	4003      	ands	r3, r0
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f8:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <__NVIC_SetPriority+0xd8>)
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	001c      	movs	r4, r3
 8001a00:	230f      	movs	r3, #15
 8001a02:	4023      	ands	r3, r4
 8001a04:	3b08      	subs	r3, #8
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	18c3      	adds	r3, r0, r3
 8001a10:	3304      	adds	r3, #4
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b003      	add	sp, #12
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	1e5a      	subs	r2, r3, #1
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	045b      	lsls	r3, r3, #17
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d301      	bcc.n	8001a3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e010      	b.n	8001a5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <SysTick_Config+0x44>)
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	3a01      	subs	r2, #1
 8001a42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a44:	2301      	movs	r3, #1
 8001a46:	425b      	negs	r3, r3
 8001a48:	2103      	movs	r1, #3
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7ff ff7c 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <SysTick_Config+0x44>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <SysTick_Config+0x44>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	210f      	movs	r1, #15
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	1c02      	adds	r2, r0, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	0011      	movs	r1, r2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b004      	add	sp, #16
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff ff33 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff ffaf 	bl	8001a24 <SysTick_Config>
 8001ac6:	0003      	movs	r3, r0
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e077      	b.n	8001bd2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a3d      	ldr	r2, [pc, #244]	@ (8001bdc <HAL_DMA_Init+0x10c>)
 8001ae8:	4694      	mov	ip, r2
 8001aea:	4463      	add	r3, ip
 8001aec:	2114      	movs	r1, #20
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fb06 	bl	8000100 <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	009a      	lsls	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2225      	movs	r2, #37	@ 0x25
 8001b00:	2102      	movs	r1, #2
 8001b02:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4934      	ldr	r1, [pc, #208]	@ (8001be0 <HAL_DMA_Init+0x110>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 fa8d 	bl	800206c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	01db      	lsls	r3, r3, #7
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d102      	bne.n	8001b64 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6c:	213f      	movs	r1, #63	@ 0x3f
 8001b6e:	400a      	ands	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d011      	beq.n	8001ba8 <HAL_DMA_Init+0xd8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d80d      	bhi.n	8001ba8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 fa98 	bl	80020c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e008      	b.n	8001bba <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2225      	movs	r2, #37	@ 0x25
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2224      	movs	r2, #36	@ 0x24
 8001bcc:	2100      	movs	r1, #0
 8001bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b002      	add	sp, #8
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	bffdfff8 	.word	0xbffdfff8
 8001be0:	ffff800f 	.word	0xffff800f

08001be4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2317      	movs	r3, #23
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2224      	movs	r2, #36	@ 0x24
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_DMA_Start_IT+0x24>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e06f      	b.n	8001ce8 <HAL_DMA_Start_IT+0x104>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2225      	movs	r2, #37	@ 0x25
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d157      	bne.n	8001ccc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2225      	movs	r2, #37	@ 0x25
 8001c20:	2102      	movs	r1, #2
 8001c22:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	438a      	bics	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f9d3 	bl	8001fec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	210e      	movs	r1, #14
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e00f      	b.n	8001c80 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	210a      	movs	r1, #10
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	025b      	lsls	r3, r3, #9
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d008      	beq.n	8001ca0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0049      	lsls	r1, r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb2:	2180      	movs	r1, #128	@ 0x80
 8001cb4:	0049      	lsls	r1, r1, #1
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00a      	b.n	8001ce2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2280      	movs	r2, #128	@ 0x80
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2224      	movs	r2, #36	@ 0x24
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001cda:	2317      	movs	r3, #23
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ce2:	2317      	movs	r3, #23
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	781b      	ldrb	r3, [r3, #0]
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b006      	add	sp, #24
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e050      	b.n	8001da4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2225      	movs	r2, #37	@ 0x25
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d008      	beq.n	8001d20 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	@ 0x24
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e041      	b.n	8001da4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	210e      	movs	r1, #14
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	491c      	ldr	r1, [pc, #112]	@ (8001dac <HAL_DMA_Abort+0xbc>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_DMA_Abort+0xc0>)
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	221c      	movs	r2, #28
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_DMA_Abort+0xc0>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00c      	beq.n	8001d92 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d82:	490a      	ldr	r1, [pc, #40]	@ (8001dac <HAL_DMA_Abort+0xbc>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001d90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2225      	movs	r2, #37	@ 0x25
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2224      	movs	r2, #36	@ 0x24
 8001d9e:	2100      	movs	r1, #0
 8001da0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	fffffeff 	.word	0xfffffeff
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2225      	movs	r2, #37	@ 0x25
 8001dc8:	5c9b      	ldrb	r3, [r3, r2]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d006      	beq.n	8001dde <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e049      	b.n	8001e72 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	210e      	movs	r1, #14
 8001dea:	438a      	bics	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e08:	491d      	ldr	r1, [pc, #116]	@ (8001e80 <HAL_DMA_Abort_IT+0xcc>)
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <HAL_DMA_Abort_IT+0xd0>)
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	221c      	movs	r2, #28
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_DMA_Abort_IT+0xd0>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e40:	490f      	ldr	r1, [pc, #60]	@ (8001e80 <HAL_DMA_Abort_IT+0xcc>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001e4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2225      	movs	r2, #37	@ 0x25
 8001e54:	2101      	movs	r1, #1
 8001e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	@ 0x24
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	0010      	movs	r0, r2
 8001e70:	4798      	blx	r3
    }
  }
  return status;
 8001e72:	230f      	movs	r3, #15
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
}
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b004      	add	sp, #16
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	fffffeff 	.word	0xfffffeff
 8001e84:	40020000 	.word	0x40020000

08001e88 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001e90:	4b55      	ldr	r3, [pc, #340]	@ (8001fe8 <HAL_DMA_IRQHandler+0x160>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	221c      	movs	r2, #28
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d027      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x7a>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d023      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001ed6:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <HAL_DMA_IRQHandler+0x160>)
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	221c      	movs	r2, #28
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	4b40      	ldr	r3, [pc, #256]	@ (8001fe8 <HAL_DMA_IRQHandler+0x160>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d100      	bne.n	8001ef6 <HAL_DMA_IRQHandler+0x6e>
 8001ef4:	e073      	b.n	8001fde <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	0010      	movs	r0, r2
 8001efe:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f00:	e06d      	b.n	8001fde <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	221c      	movs	r2, #28
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	0013      	movs	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	d02e      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xec>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d02a      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4013      	ands	r3, r2
 8001f28:	d10b      	bne.n	8001f42 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	210a      	movs	r1, #10
 8001f36:	438a      	bics	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2225      	movs	r2, #37	@ 0x25
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f42:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <HAL_DMA_IRQHandler+0x160>)
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	221c      	movs	r2, #28
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2202      	movs	r2, #2
 8001f50:	409a      	lsls	r2, r3
 8001f52:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <HAL_DMA_IRQHandler+0x160>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	@ 0x24
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03a      	beq.n	8001fde <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	0010      	movs	r0, r2
 8001f70:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001f72:	e034      	b.n	8001fde <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	221c      	movs	r2, #28
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	d02b      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x158>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d027      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	210e      	movs	r1, #14
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_DMA_IRQHandler+0x160>)
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	221c      	movs	r2, #28
 8001faa:	4013      	ands	r3, r2
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <HAL_DMA_IRQHandler+0x160>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2225      	movs	r2, #37	@ 0x25
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	@ 0x24
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	0010      	movs	r0, r2
 8001fdc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	46c0      	nop			@ (mov r8, r8)
}
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40020000 	.word	0x40020000

08001fec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002002:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002014:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002016:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <DMA_SetConfig+0x7c>)
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	221c      	movs	r2, #28
 8002020:	4013      	ands	r3, r2
 8002022:	2201      	movs	r2, #1
 8002024:	409a      	lsls	r2, r3
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <DMA_SetConfig+0x7c>)
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b10      	cmp	r3, #16
 800203a:	d108      	bne.n	800204e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800204c:	e007      	b.n	800205e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	60da      	str	r2, [r3, #12]
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b004      	add	sp, #16
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	40020000 	.word	0x40020000

0800206c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800207c:	4694      	mov	ip, r2
 800207e:	4463      	add	r3, ip
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	001a      	movs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	001a      	movs	r2, r3
 800208e:	23ff      	movs	r3, #255	@ 0xff
 8002090:	4013      	ands	r3, r2
 8002092:	3b08      	subs	r3, #8
 8002094:	2114      	movs	r1, #20
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe f832 	bl	8000100 <__udivsi3>
 800209c:	0003      	movs	r3, r0
 800209e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80020a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	221f      	movs	r2, #31
 80020aa:	4013      	ands	r3, r2
 80020ac:	2201      	movs	r2, #1
 80020ae:	409a      	lsls	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b004      	add	sp, #16
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	10008200 	.word	0x10008200
 80020c0:	40020880 	.word	0x40020880

080020c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	223f      	movs	r2, #63	@ 0x3f
 80020d2:	4013      	ands	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80020da:	4694      	mov	ip, r2
 80020dc:	4463      	add	r3, ip
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	001a      	movs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a07      	ldr	r2, [pc, #28]	@ (8002108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	4013      	ands	r3, r2
 80020f4:	2201      	movs	r2, #1
 80020f6:	409a      	lsls	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b004      	add	sp, #16
 8002102:	bd80      	pop	{r7, pc}
 8002104:	1000823f 	.word	0x1000823f
 8002108:	40020940 	.word	0x40020940

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e147      	b.n	80023ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4091      	lsls	r1, r2
 8002126:	000a      	movs	r2, r1
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d100      	bne.n	8002134 <HAL_GPIO_Init+0x28>
 8002132:	e138      	b.n	80023a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	4013      	ands	r3, r2
 800213c:	2b01      	cmp	r3, #1
 800213e:	d005      	beq.n	800214c <HAL_GPIO_Init+0x40>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2203      	movs	r2, #3
 8002146:	4013      	ands	r3, r2
 8002148:	2b02      	cmp	r3, #2
 800214a:	d130      	bne.n	80021ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	409a      	lsls	r2, r3
 800215a:	0013      	movs	r3, r2
 800215c:	43da      	mvns	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	0013      	movs	r3, r2
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002182:	2201      	movs	r2, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	43da      	mvns	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	2201      	movs	r2, #1
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d017      	beq.n	80021ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	409a      	lsls	r2, r3
 80021c8:	0013      	movs	r3, r2
 80021ca:	43da      	mvns	r2, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2203      	movs	r2, #3
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d123      	bne.n	800223e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	58d3      	ldr	r3, [r2, r3]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2207      	movs	r2, #7
 8002208:	4013      	ands	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	43da      	mvns	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2107      	movs	r1, #7
 8002222:	400b      	ands	r3, r1
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	6939      	ldr	r1, [r7, #16]
 800223c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	409a      	lsls	r2, r3
 800224c:	0013      	movs	r3, r2
 800224e:	43da      	mvns	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2203      	movs	r2, #3
 800225c:	401a      	ands	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	409a      	lsls	r2, r3
 8002264:	0013      	movs	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	23c0      	movs	r3, #192	@ 0xc0
 8002278:	029b      	lsls	r3, r3, #10
 800227a:	4013      	ands	r3, r2
 800227c:	d100      	bne.n	8002280 <HAL_GPIO_Init+0x174>
 800227e:	e092      	b.n	80023a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002280:	4a50      	ldr	r2, [pc, #320]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3318      	adds	r3, #24
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	589b      	ldr	r3, [r3, r2]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2203      	movs	r2, #3
 8002292:	4013      	ands	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	220f      	movs	r2, #15
 8002298:	409a      	lsls	r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	43da      	mvns	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	23a0      	movs	r3, #160	@ 0xa0
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x1ca>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a45      	ldr	r2, [pc, #276]	@ (80023c8 <HAL_GPIO_Init+0x2bc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x1c6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a44      	ldr	r2, [pc, #272]	@ (80023cc <HAL_GPIO_Init+0x2c0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x1c2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a43      	ldr	r2, [pc, #268]	@ (80023d0 <HAL_GPIO_Init+0x2c4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x1be>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x1cc>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x1cc>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x1cc>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x1cc>
 80022d6:	2300      	movs	r3, #0
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	2103      	movs	r1, #3
 80022dc:	400a      	ands	r2, r1
 80022de:	00d2      	lsls	r2, r2, #3
 80022e0:	4093      	lsls	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022e8:	4936      	ldr	r1, [pc, #216]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3318      	adds	r3, #24
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022f6:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43da      	mvns	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	035b      	lsls	r3, r3, #13
 800230e:	4013      	ands	r3, r2
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800231a:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002320:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43da      	mvns	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	039b      	lsls	r3, r3, #14
 8002338:	4013      	ands	r3, r2
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002344:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800234a:	4a1e      	ldr	r2, [pc, #120]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 800234c:	2384      	movs	r3, #132	@ 0x84
 800234e:	58d3      	ldr	r3, [r2, r3]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43da      	mvns	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	4013      	ands	r3, r2
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002370:	4914      	ldr	r1, [pc, #80]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 8002372:	2284      	movs	r2, #132	@ 0x84
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002378:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	58d3      	ldr	r3, [r2, r3]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43da      	mvns	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	4013      	ands	r3, r2
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800239e:	4909      	ldr	r1, [pc, #36]	@ (80023c4 <HAL_GPIO_Init+0x2b8>)
 80023a0:	2280      	movs	r2, #128	@ 0x80
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	40da      	lsrs	r2, r3
 80023b4:	1e13      	subs	r3, r2, #0
 80023b6:	d000      	beq.n	80023ba <HAL_GPIO_Init+0x2ae>
 80023b8:	e6b0      	b.n	800211c <HAL_GPIO_Init+0x10>
  }
}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b006      	add	sp, #24
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021800 	.word	0x40021800
 80023c8:	50000400 	.word	0x50000400
 80023cc:	50000800 	.word	0x50000800
 80023d0:	50000c00 	.word	0x50000c00

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	0008      	movs	r0, r1
 80023de:	0011      	movs	r1, r2
 80023e0:	1cbb      	adds	r3, r7, #2
 80023e2:	1c02      	adds	r2, r0, #0
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	1c7b      	adds	r3, r7, #1
 80023e8:	1c0a      	adds	r2, r1, #0
 80023ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ec:	1c7b      	adds	r3, r7, #1
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023f4:	1cbb      	adds	r3, r7, #2
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023fe:	1cbb      	adds	r3, r7, #2
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e08f      	b.n	8002542 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2241      	movs	r2, #65	@ 0x41
 8002426:	5c9b      	ldrb	r3, [r3, r2]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2240      	movs	r2, #64	@ 0x40
 8002432:	2100      	movs	r1, #0
 8002434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f7fe ffc9 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2241      	movs	r2, #65	@ 0x41
 8002442:	2124      	movs	r1, #36	@ 0x24
 8002444:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	438a      	bics	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	493b      	ldr	r1, [pc, #236]	@ (800254c <HAL_I2C_Init+0x13c>)
 8002460:	400a      	ands	r2, r1
 8002462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4938      	ldr	r1, [pc, #224]	@ (8002550 <HAL_I2C_Init+0x140>)
 8002470:	400a      	ands	r2, r1
 8002472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	0209      	lsls	r1, r1, #8
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e007      	b.n	800249e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2184      	movs	r1, #132	@ 0x84
 8002498:	0209      	lsls	r1, r1, #8
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d109      	bne.n	80024ba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	0109      	lsls	r1, r1, #4
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	e007      	b.n	80024ca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4923      	ldr	r1, [pc, #140]	@ (8002554 <HAL_I2C_Init+0x144>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4920      	ldr	r1, [pc, #128]	@ (8002558 <HAL_I2C_Init+0x148>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	491a      	ldr	r1, [pc, #104]	@ (8002550 <HAL_I2C_Init+0x140>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69d9      	ldr	r1, [r3, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2241      	movs	r2, #65	@ 0x41
 800252e:	2120      	movs	r1, #32
 8002530:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2242      	movs	r2, #66	@ 0x42
 800253c:	2100      	movs	r1, #0
 800253e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	f0ffffff 	.word	0xf0ffffff
 8002550:	ffff7fff 	.word	0xffff7fff
 8002554:	fffff7ff 	.word	0xfffff7ff
 8002558:	02008000 	.word	0x02008000

0800255c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2241      	movs	r2, #65	@ 0x41
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b20      	cmp	r3, #32
 8002570:	d138      	bne.n	80025e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2240      	movs	r2, #64	@ 0x40
 8002576:	5c9b      	ldrb	r3, [r3, r2]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800257c:	2302      	movs	r3, #2
 800257e:	e032      	b.n	80025e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	2101      	movs	r1, #1
 8002586:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2241      	movs	r2, #65	@ 0x41
 800258c:	2124      	movs	r1, #36	@ 0x24
 800258e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2101      	movs	r1, #1
 800259c:	438a      	bics	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4911      	ldr	r1, [pc, #68]	@ (80025f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2241      	movs	r2, #65	@ 0x41
 80025d4:	2120      	movs	r1, #32
 80025d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2240      	movs	r2, #64	@ 0x40
 80025dc:	2100      	movs	r1, #0
 80025de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b002      	add	sp, #8
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	ffffefff 	.word	0xffffefff

080025f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2241      	movs	r2, #65	@ 0x41
 8002602:	5c9b      	ldrb	r3, [r3, r2]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	d139      	bne.n	800267e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002614:	2302      	movs	r3, #2
 8002616:	e033      	b.n	8002680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2240      	movs	r2, #64	@ 0x40
 800261c:	2101      	movs	r1, #1
 800261e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2241      	movs	r2, #65	@ 0x41
 8002624:	2124      	movs	r1, #36	@ 0x24
 8002626:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	438a      	bics	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a11      	ldr	r2, [pc, #68]	@ (8002688 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2241      	movs	r2, #65	@ 0x41
 800266e:	2120      	movs	r1, #32
 8002670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2240      	movs	r2, #64	@ 0x40
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800267e:	2302      	movs	r3, #2
  }
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}
 8002688:	fffff0ff 	.word	0xfffff0ff

0800268c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	@ (8002700 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	4b17      	ldr	r3, [pc, #92]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11f      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80026b0:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	0013      	movs	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4912      	ldr	r1, [pc, #72]	@ (8002708 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80026be:	0018      	movs	r0, r3
 80026c0:	f7fd fd1e 	bl	8000100 <__udivsi3>
 80026c4:	0003      	movs	r3, r0
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ca:	e008      	b.n	80026de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e001      	b.n	80026de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e009      	b.n	80026f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	401a      	ands	r2, r3
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d0ed      	beq.n	80026cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	40007000 	.word	0x40007000
 8002700:	fffff9ff 	.word	0xfffff9ff
 8002704:	20000004 	.word	0x20000004
 8002708:	000f4240 	.word	0x000f4240

0800270c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	23e0      	movs	r3, #224	@ 0xe0
 8002716:	01db      	lsls	r3, r3, #7
 8002718:	4013      	ands	r3, r2
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e2f3      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d100      	bne.n	8002742 <HAL_RCC_OscConfig+0x1e>
 8002740:	e07c      	b.n	800283c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002742:	4bc3      	ldr	r3, [pc, #780]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2238      	movs	r2, #56	@ 0x38
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800274c:	4bc0      	ldr	r3, [pc, #768]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b10      	cmp	r3, #16
 800275a:	d102      	bne.n	8002762 <HAL_RCC_OscConfig+0x3e>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d002      	beq.n	8002768 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b08      	cmp	r3, #8
 8002766:	d10b      	bne.n	8002780 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	4bb9      	ldr	r3, [pc, #740]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	@ 0x80
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	4013      	ands	r3, r2
 8002772:	d062      	beq.n	800283a <HAL_RCC_OscConfig+0x116>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d15e      	bne.n	800283a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e2ce      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x78>
 800278c:	4bb0      	ldr	r3, [pc, #704]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4baf      	ldr	r3, [pc, #700]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002792:	2180      	movs	r1, #128	@ 0x80
 8002794:	0249      	lsls	r1, r1, #9
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e020      	b.n	80027de <HAL_RCC_OscConfig+0xba>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	23a0      	movs	r3, #160	@ 0xa0
 80027a2:	02db      	lsls	r3, r3, #11
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10e      	bne.n	80027c6 <HAL_RCC_OscConfig+0xa2>
 80027a8:	4ba9      	ldr	r3, [pc, #676]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027ae:	2180      	movs	r1, #128	@ 0x80
 80027b0:	02c9      	lsls	r1, r1, #11
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027bc:	2180      	movs	r1, #128	@ 0x80
 80027be:	0249      	lsls	r1, r1, #9
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0xba>
 80027c6:	4ba2      	ldr	r3, [pc, #648]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4ba1      	ldr	r3, [pc, #644]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027cc:	49a1      	ldr	r1, [pc, #644]	@ (8002a54 <HAL_RCC_OscConfig+0x330>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b9e      	ldr	r3, [pc, #632]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80027d8:	499f      	ldr	r1, [pc, #636]	@ (8002a58 <HAL_RCC_OscConfig+0x334>)
 80027da:	400a      	ands	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d014      	beq.n	8002810 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7ff f88b 	bl	8001900 <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff f886 	bl	8001900 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e28d      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002802:	4b93      	ldr	r3, [pc, #588]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	4013      	ands	r3, r2
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xcc>
 800280e:	e015      	b.n	800283c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7ff f876 	bl	8001900 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281a:	f7ff f871 	bl	8001900 <HAL_GetTick>
 800281e:	0002      	movs	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b64      	cmp	r3, #100	@ 0x64
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e278      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800282c:	4b88      	ldr	r3, [pc, #544]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	029b      	lsls	r3, r3, #10
 8002834:	4013      	ands	r3, r2
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0xf6>
 8002838:	e000      	b.n	800283c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	d100      	bne.n	8002848 <HAL_RCC_OscConfig+0x124>
 8002846:	e099      	b.n	800297c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002848:	4b81      	ldr	r3, [pc, #516]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2238      	movs	r2, #56	@ 0x38
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002852:	4b7f      	ldr	r3, [pc, #508]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2203      	movs	r2, #3
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d102      	bne.n	8002868 <HAL_RCC_OscConfig+0x144>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d002      	beq.n	800286e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d135      	bne.n	80028da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286e:	4b78      	ldr	r3, [pc, #480]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4013      	ands	r3, r2
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x162>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e24b      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b72      	ldr	r3, [pc, #456]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a74      	ldr	r2, [pc, #464]	@ (8002a5c <HAL_RCC_OscConfig+0x338>)
 800288c:	4013      	ands	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	021a      	lsls	r2, r3, #8
 8002896:	4b6e      	ldr	r3, [pc, #440]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002898:	430a      	orrs	r2, r1
 800289a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d112      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	4b67      	ldr	r3, [pc, #412]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80028b6:	4b66      	ldr	r3, [pc, #408]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0adb      	lsrs	r3, r3, #11
 80028bc:	2207      	movs	r2, #7
 80028be:	4013      	ands	r3, r2
 80028c0:	4a68      	ldr	r2, [pc, #416]	@ (8002a64 <HAL_RCC_OscConfig+0x340>)
 80028c2:	40da      	lsrs	r2, r3
 80028c4:	4b68      	ldr	r3, [pc, #416]	@ (8002a68 <HAL_RCC_OscConfig+0x344>)
 80028c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028c8:	4b68      	ldr	r3, [pc, #416]	@ (8002a6c <HAL_RCC_OscConfig+0x348>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7fe ffbb 	bl	8001848 <HAL_InitTick>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d051      	beq.n	800297a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e221      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d030      	beq.n	8002944 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	4b57      	ldr	r3, [pc, #348]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028f6:	4b56      	ldr	r3, [pc, #344]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b55      	ldr	r3, [pc, #340]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0049      	lsls	r1, r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fffc 	bl	8001900 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290e:	f7fe fff7 	bl	8001900 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e1fe      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	4b4b      	ldr	r3, [pc, #300]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4013      	ands	r3, r2
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b48      	ldr	r3, [pc, #288]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a4a      	ldr	r2, [pc, #296]	@ (8002a5c <HAL_RCC_OscConfig+0x338>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	021a      	lsls	r2, r3, #8
 800293c:	4b44      	ldr	r3, [pc, #272]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	e01b      	b.n	800297c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002944:	4b42      	ldr	r3, [pc, #264]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b41      	ldr	r3, [pc, #260]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800294a:	4949      	ldr	r1, [pc, #292]	@ (8002a70 <HAL_RCC_OscConfig+0x34c>)
 800294c:	400a      	ands	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe ffd6 	bl	8001900 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe ffd1 	bl	8001900 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1d8      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800296c:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4013      	ands	r3, r2
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x236>
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800297a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2208      	movs	r2, #8
 8002982:	4013      	ands	r3, r2
 8002984:	d047      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002986:	4b32      	ldr	r3, [pc, #200]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2238      	movs	r2, #56	@ 0x38
 800298c:	4013      	ands	r3, r2
 800298e:	2b18      	cmp	r3, #24
 8002990:	d10a      	bne.n	80029a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002992:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d03c      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d138      	bne.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e1ba      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d019      	beq.n	80029e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80029b0:	4b27      	ldr	r3, [pc, #156]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029b4:	4b26      	ldr	r3, [pc, #152]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	430a      	orrs	r2, r1
 80029ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe ffa0 	bl	8001900 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c6:	f7fe ff9b 	bl	8001900 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a2      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80029da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029dc:	2202      	movs	r2, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d0f1      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2a2>
 80029e2:	e018      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80029e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe ff86 	bl	8001900 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fa:	f7fe ff81 	bl	8001900 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e188      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0c:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a10:	2202      	movs	r2, #2
 8002a12:	4013      	ands	r3, r2
 8002a14:	d1f1      	bne.n	80029fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d100      	bne.n	8002a22 <HAL_RCC_OscConfig+0x2fe>
 8002a20:	e0c6      	b.n	8002bb0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	231f      	movs	r3, #31
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2238      	movs	r2, #56	@ 0x38
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d11e      	bne.n	8002a74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_RCC_OscConfig+0x32c>)
 8002a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <HAL_RCC_OscConfig+0x31e>
 8002a40:	e0b6      	b.n	8002bb0 <HAL_RCC_OscConfig+0x48c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d000      	beq.n	8002a4c <HAL_RCC_OscConfig+0x328>
 8002a4a:	e0b1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e166      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
 8002a50:	40021000 	.word	0x40021000
 8002a54:	fffeffff 	.word	0xfffeffff
 8002a58:	fffbffff 	.word	0xfffbffff
 8002a5c:	ffff80ff 	.word	0xffff80ff
 8002a60:	ffffc7ff 	.word	0xffffc7ff
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a74:	4bac      	ldr	r3, [pc, #688]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	055b      	lsls	r3, r3, #21
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_OscConfig+0x360>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x362>
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d011      	beq.n	8002aae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4ba7      	ldr	r3, [pc, #668]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a8e:	4ba6      	ldr	r3, [pc, #664]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002a90:	2180      	movs	r1, #128	@ 0x80
 8002a92:	0549      	lsls	r1, r1, #21
 8002a94:	430a      	orrs	r2, r1
 8002a96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a98:	4ba3      	ldr	r3, [pc, #652]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	055b      	lsls	r3, r3, #21
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002aa6:	231f      	movs	r3, #31
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b9f      	ldr	r3, [pc, #636]	@ (8002d2c <HAL_RCC_OscConfig+0x608>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d11a      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aba:	4b9c      	ldr	r3, [pc, #624]	@ (8002d2c <HAL_RCC_OscConfig+0x608>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b9b      	ldr	r3, [pc, #620]	@ (8002d2c <HAL_RCC_OscConfig+0x608>)
 8002ac0:	2180      	movs	r1, #128	@ 0x80
 8002ac2:	0049      	lsls	r1, r1, #1
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe ff1a 	bl	8001900 <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad2:	f7fe ff15 	bl	8001900 <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e11c      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae4:	4b91      	ldr	r3, [pc, #580]	@ (8002d2c <HAL_RCC_OscConfig+0x608>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d106      	bne.n	8002b06 <HAL_RCC_OscConfig+0x3e2>
 8002af8:	4b8b      	ldr	r3, [pc, #556]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002afa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002afc:	4b8a      	ldr	r3, [pc, #552]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	430a      	orrs	r2, r1
 8002b02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b04:	e01c      	b.n	8002b40 <HAL_RCC_OscConfig+0x41c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x404>
 8002b0e:	4b86      	ldr	r3, [pc, #536]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b12:	4b85      	ldr	r3, [pc, #532]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b14:	2104      	movs	r1, #4
 8002b16:	430a      	orrs	r2, r1
 8002b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b1a:	4b83      	ldr	r3, [pc, #524]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b1e:	4b82      	ldr	r3, [pc, #520]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0x41c>
 8002b28:	4b7f      	ldr	r3, [pc, #508]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	438a      	bics	r2, r1
 8002b32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b34:	4b7c      	ldr	r3, [pc, #496]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b38:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d014      	beq.n	8002b72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe feda 	bl	8001900 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b50:	e009      	b.n	8002b66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fed5 	bl	8001900 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	4a74      	ldr	r2, [pc, #464]	@ (8002d30 <HAL_RCC_OscConfig+0x60c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0db      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	4b70      	ldr	r3, [pc, #448]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x42e>
 8002b70:	e013      	b.n	8002b9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fec5 	bl	8001900 <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7a:	e009      	b.n	8002b90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fec0 	bl	8001900 <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	4a6a      	ldr	r2, [pc, #424]	@ (8002d30 <HAL_RCC_OscConfig+0x60c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0c6      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b90:	4b65      	ldr	r3, [pc, #404]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	2202      	movs	r2, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b9a:	231f      	movs	r3, #31
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ba4:	4b60      	ldr	r3, [pc, #384]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002baa:	4962      	ldr	r1, [pc, #392]	@ (8002d34 <HAL_RCC_OscConfig+0x610>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d100      	bne.n	8002bba <HAL_RCC_OscConfig+0x496>
 8002bb8:	e0b0      	b.n	8002d1c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bba:	4b5b      	ldr	r3, [pc, #364]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2238      	movs	r2, #56	@ 0x38
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d100      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4a4>
 8002bc6:	e078      	b.n	8002cba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d153      	bne.n	8002c78 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b55      	ldr	r3, [pc, #340]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b54      	ldr	r3, [pc, #336]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002bd6:	4958      	ldr	r1, [pc, #352]	@ (8002d38 <HAL_RCC_OscConfig+0x614>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fe90 	bl	8001900 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fe8b 	bl	8001900 <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e092      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	049b      	lsls	r3, r3, #18
 8002c00:	4013      	ands	r3, r2
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b48      	ldr	r3, [pc, #288]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a4c      	ldr	r2, [pc, #304]	@ (8002d3c <HAL_RCC_OscConfig+0x618>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c32:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b3c      	ldr	r3, [pc, #240]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c38:	2180      	movs	r1, #128	@ 0x80
 8002c3a:	0449      	lsls	r1, r1, #17
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c40:	4b39      	ldr	r3, [pc, #228]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c46:	2180      	movs	r1, #128	@ 0x80
 8002c48:	0549      	lsls	r1, r1, #21
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fe57 	bl	8001900 <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fe52 	bl	8001900 <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e059      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	049b      	lsls	r3, r3, #18
 8002c72:	4013      	ands	r3, r2
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x534>
 8002c76:	e051      	b.n	8002d1c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c78:	4b2b      	ldr	r3, [pc, #172]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002c7e:	492e      	ldr	r1, [pc, #184]	@ (8002d38 <HAL_RCC_OscConfig+0x614>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fe3c 	bl	8001900 <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe fe37 	bl	8001900 <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e03e      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca0:	4b21      	ldr	r3, [pc, #132]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	049b      	lsls	r3, r3, #18
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002cb2:	4923      	ldr	r1, [pc, #140]	@ (8002d40 <HAL_RCC_OscConfig+0x61c>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	e030      	b.n	8002d1c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e02b      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <HAL_RCC_OscConfig+0x604>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d11e      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2270      	movs	r2, #112	@ 0x70
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d117      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	23fe      	movs	r3, #254	@ 0xfe
 8002cec:	01db      	lsls	r3, r3, #7
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10e      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	23f8      	movs	r3, #248	@ 0xf8
 8002cfe:	039b      	lsls	r3, r3, #14
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	0f5b      	lsrs	r3, r3, #29
 8002d0e:	075a      	lsls	r2, r3, #29
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b008      	add	sp, #32
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	00001388 	.word	0x00001388
 8002d34:	efffffff 	.word	0xefffffff
 8002d38:	feffffff 	.word	0xfeffffff
 8002d3c:	1fc1808c 	.word	0x1fc1808c
 8002d40:	effefffc 	.word	0xeffefffc

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0e9      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b76      	ldr	r3, [pc, #472]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	4013      	ands	r3, r2
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d91e      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b73      	ldr	r3, [pc, #460]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2207      	movs	r2, #7
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	0019      	movs	r1, r3
 8002d70:	4b70      	ldr	r3, [pc, #448]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d78:	f7fe fdc2 	bl	8001900 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7fe fdbd 	bl	8001900 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002f38 <HAL_RCC_ClockConfig+0x1f4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0ca      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d96:	4b67      	ldr	r3, [pc, #412]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2202      	movs	r2, #2
 8002daa:	4013      	ands	r3, r2
 8002dac:	d015      	beq.n	8002dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2204      	movs	r2, #4
 8002db4:	4013      	ands	r3, r2
 8002db6:	d006      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002db8:	4b60      	ldr	r3, [pc, #384]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002dbe:	21e0      	movs	r1, #224	@ 0xe0
 8002dc0:	01c9      	lsls	r1, r1, #7
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4a5d      	ldr	r2, [pc, #372]	@ (8002f40 <HAL_RCC_ClockConfig+0x1fc>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b59      	ldr	r3, [pc, #356]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	4013      	ands	r3, r2
 8002de2:	d057      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dec:	4b53      	ldr	r3, [pc, #332]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	4013      	ands	r3, r2
 8002df6:	d12b      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e097      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e04:	4b4d      	ldr	r3, [pc, #308]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2380      	movs	r3, #128	@ 0x80
 8002e0a:	049b      	lsls	r3, r3, #18
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d11f      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e08b      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e1c:	4b47      	ldr	r3, [pc, #284]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	@ 0x80
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4013      	ands	r3, r2
 8002e26:	d113      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e07f      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e34:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e38:	2202      	movs	r2, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d108      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e074      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e42:	4b3e      	ldr	r3, [pc, #248]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	2202      	movs	r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e06d      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e50:	4b3a      	ldr	r3, [pc, #232]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2207      	movs	r2, #7
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fe fd4c 	bl	8001900 <HAL_GetTick>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6c:	e009      	b.n	8002e82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6e:	f7fe fd47 	bl	8001900 <HAL_GetTick>
 8002e72:	0002      	movs	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	4a2f      	ldr	r2, [pc, #188]	@ (8002f38 <HAL_RCC_ClockConfig+0x1f4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e054      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2238      	movs	r2, #56	@ 0x38
 8002e88:	401a      	ands	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1ec      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e94:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2207      	movs	r2, #7
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d21e      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	4b21      	ldr	r3, [pc, #132]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fd24 	bl	8001900 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ebc:	e009      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebe:	f7fe fd1f 	bl	8001900 <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <HAL_RCC_ClockConfig+0x1f4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e02c      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ed2:	4b18      	ldr	r3, [pc, #96]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	4013      	ands	r3, r2
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d1ee      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eea:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <HAL_RCC_ClockConfig+0x200>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002efe:	f000 f829 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f02:	0001      	movs	r1, r0
 8002f04:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <HAL_RCC_ClockConfig+0x204>)
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	58d3      	ldr	r3, [r2, r3]
 8002f14:	221f      	movs	r2, #31
 8002f16:	4013      	ands	r3, r2
 8002f18:	000a      	movs	r2, r1
 8002f1a:	40da      	lsrs	r2, r3
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_RCC_ClockConfig+0x208>)
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCC_ClockConfig+0x20c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fe fc8f 	bl	8001848 <HAL_InitTick>
 8002f2a:	0003      	movs	r3, r0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40022000 	.word	0x40022000
 8002f38:	00001388 	.word	0x00001388
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	fffff0ff 	.word	0xfffff0ff
 8002f44:	ffff8fff 	.word	0xffff8fff
 8002f48:	08005d94 	.word	0x08005d94
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	20000008 	.word	0x20000008

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2238      	movs	r2, #56	@ 0x38
 8002f60:	4013      	ands	r3, r2
 8002f62:	d10f      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f64:	4b39      	ldr	r3, [pc, #228]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0adb      	lsrs	r3, r3, #11
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2201      	movs	r2, #1
 8002f70:	409a      	lsls	r2, r3
 8002f72:	0013      	movs	r3, r2
 8002f74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	4835      	ldr	r0, [pc, #212]	@ (8003050 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f7a:	f7fd f8c1 	bl	8000100 <__udivsi3>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e05d      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f84:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2238      	movs	r2, #56	@ 0x38
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d102      	bne.n	8002f96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f90:	4b30      	ldr	r3, [pc, #192]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e054      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f96:	4b2d      	ldr	r3, [pc, #180]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2238      	movs	r2, #56	@ 0x38
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d138      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fac:	4b27      	ldr	r3, [pc, #156]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d10d      	bne.n	8002fdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	4824      	ldr	r0, [pc, #144]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x100>)
 8002fc4:	f7fd f89c 	bl	8000100 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	0019      	movs	r1, r3
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	227f      	movs	r2, #127	@ 0x7f
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	434b      	muls	r3, r1
 8002fd8:	617b      	str	r3, [r7, #20]
        break;
 8002fda:	e00d      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	481c      	ldr	r0, [pc, #112]	@ (8003050 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fe0:	f7fd f88e 	bl	8000100 <__udivsi3>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	4b18      	ldr	r3, [pc, #96]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	227f      	movs	r2, #127	@ 0x7f
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	434b      	muls	r3, r1
 8002ff4:	617b      	str	r3, [r7, #20]
        break;
 8002ff6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ff8:	4b14      	ldr	r3, [pc, #80]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0f5b      	lsrs	r3, r3, #29
 8002ffe:	2207      	movs	r2, #7
 8003000:	4013      	ands	r3, r2
 8003002:	3301      	adds	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	6978      	ldr	r0, [r7, #20]
 800300a:	f7fd f879 	bl	8000100 <__udivsi3>
 800300e:	0003      	movs	r3, r0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e015      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003014:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2238      	movs	r2, #56	@ 0x38
 800301a:	4013      	ands	r3, r2
 800301c:	2b20      	cmp	r3, #32
 800301e:	d103      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003028:	4b08      	ldr	r3, [pc, #32]	@ (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2238      	movs	r2, #56	@ 0x38
 800302e:	4013      	ands	r3, r2
 8003030:	2b18      	cmp	r3, #24
 8003032:	d103      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003034:	23fa      	movs	r3, #250	@ 0xfa
 8003036:	01db      	lsls	r3, r3, #7
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e001      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003040:	693b      	ldr	r3, [r7, #16]
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b006      	add	sp, #24
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	40021000 	.word	0x40021000
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200

08003058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800305c:	4b02      	ldr	r3, [pc, #8]	@ (8003068 <HAL_RCC_GetHCLKFreq+0x10>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003070:	f7ff fff2 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 8003074:	0004      	movs	r4, r0
 8003076:	f7ff fb49 	bl	800270c <LL_RCC_GetAPB1Prescaler>
 800307a:	0003      	movs	r3, r0
 800307c:	0b1a      	lsrs	r2, r3, #12
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003080:	0092      	lsls	r2, r2, #2
 8003082:	58d3      	ldr	r3, [r2, r3]
 8003084:	221f      	movs	r2, #31
 8003086:	4013      	ands	r3, r2
 8003088:	40dc      	lsrs	r4, r3
 800308a:	0023      	movs	r3, r4
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	bdb0      	pop	{r4, r5, r7, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	08005dd4 	.word	0x08005dd4

08003098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80030a0:	2313      	movs	r3, #19
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030a8:	2312      	movs	r3, #18
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	d100      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030bc:	e0a3      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2011      	movs	r0, #17
 80030c0:	183b      	adds	r3, r7, r0
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b7f      	ldr	r3, [pc, #508]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	055b      	lsls	r3, r3, #21
 80030ce:	4013      	ands	r3, r2
 80030d0:	d110      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b7c      	ldr	r3, [pc, #496]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d6:	4b7b      	ldr	r3, [pc, #492]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030d8:	2180      	movs	r1, #128	@ 0x80
 80030da:	0549      	lsls	r1, r1, #21
 80030dc:	430a      	orrs	r2, r1
 80030de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030e0:	4b78      	ldr	r3, [pc, #480]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	055b      	lsls	r3, r3, #21
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	183b      	adds	r3, r7, r0
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f4:	4b74      	ldr	r3, [pc, #464]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b73      	ldr	r3, [pc, #460]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030fa:	2180      	movs	r1, #128	@ 0x80
 80030fc:	0049      	lsls	r1, r1, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003102:	f7fe fbfd 	bl	8001900 <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800310a:	e00b      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fbf8 	bl	8001900 <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d904      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800311a:	2313      	movs	r3, #19
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2203      	movs	r2, #3
 8003120:	701a      	strb	r2, [r3, #0]
        break;
 8003122:	e005      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003124:	4b68      	ldr	r3, [pc, #416]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4013      	ands	r3, r2
 800312e:	d0ed      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003130:	2313      	movs	r3, #19
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d154      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800313a:	4b62      	ldr	r3, [pc, #392]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800313c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800313e:	23c0      	movs	r3, #192	@ 0xc0
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4013      	ands	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d019      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	429a      	cmp	r2, r3
 8003154:	d014      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003156:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315a:	4a5c      	ldr	r2, [pc, #368]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003160:	4b58      	ldr	r3, [pc, #352]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003162:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003164:	4b57      	ldr	r3, [pc, #348]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	0249      	lsls	r1, r1, #9
 800316a:	430a      	orrs	r2, r1
 800316c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800316e:	4b55      	ldr	r3, [pc, #340]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003170:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003172:	4b54      	ldr	r3, [pc, #336]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003174:	4956      	ldr	r1, [pc, #344]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003176:	400a      	ands	r2, r1
 8003178:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800317a:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	d016      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fbba 	bl	8001900 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003190:	e00c      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fbb5 	bl	8001900 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	4a4d      	ldr	r2, [pc, #308]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d904      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80031a2:	2313      	movs	r3, #19
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2203      	movs	r2, #3
 80031a8:	701a      	strb	r2, [r3, #0]
            break;
 80031aa:	e004      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ac:	4b45      	ldr	r3, [pc, #276]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b0:	2202      	movs	r2, #2
 80031b2:	4013      	ands	r3, r2
 80031b4:	d0ed      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80031b6:	2313      	movs	r3, #19
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c0:	4b40      	ldr	r3, [pc, #256]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	4a41      	ldr	r2, [pc, #260]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	4b3d      	ldr	r3, [pc, #244]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031d4:	e00c      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d6:	2312      	movs	r3, #18
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2213      	movs	r2, #19
 80031dc:	18ba      	adds	r2, r7, r2
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e005      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	2312      	movs	r3, #18
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	2213      	movs	r2, #19
 80031ea:	18ba      	adds	r2, r7, r2
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f0:	2311      	movs	r3, #17
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b32      	ldr	r3, [pc, #200]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031fe:	4b31      	ldr	r3, [pc, #196]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003200:	4935      	ldr	r1, [pc, #212]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003202:	400a      	ands	r2, r1
 8003204:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	4013      	ands	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003210:	4b2c      	ldr	r3, [pc, #176]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	2203      	movs	r2, #3
 8003216:	4393      	bics	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003220:	430a      	orrs	r2, r1
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2220      	movs	r2, #32
 800322a:	4013      	ands	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800322e:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	4a2a      	ldr	r2, [pc, #168]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b21      	ldr	r3, [pc, #132]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800323e:	430a      	orrs	r2, r1
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	@ 0x80
 8003248:	01db      	lsls	r3, r3, #7
 800324a:	4013      	ands	r3, r2
 800324c:	d015      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	0899      	lsrs	r1, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	4b1a      	ldr	r3, [pc, #104]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800325c:	430a      	orrs	r2, r1
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	05db      	lsls	r3, r3, #23
 8003268:	429a      	cmp	r2, r3
 800326a:	d106      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800326c:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003272:	2180      	movs	r1, #128	@ 0x80
 8003274:	0249      	lsls	r1, r1, #9
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4013      	ands	r3, r2
 8003284:	d016      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	4a15      	ldr	r2, [pc, #84]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003296:	430a      	orrs	r2, r1
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	01db      	lsls	r3, r3, #7
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d106      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032a6:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032ac:	2180      	movs	r1, #128	@ 0x80
 80032ae:	0249      	lsls	r1, r1, #9
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80032b4:	2312      	movs	r3, #18
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	781b      	ldrb	r3, [r3, #0]
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	fffffcff 	.word	0xfffffcff
 80032d0:	fffeffff 	.word	0xfffeffff
 80032d4:	00001388 	.word	0x00001388
 80032d8:	efffffff 	.word	0xefffffff
 80032dc:	ffffcfff 	.word	0xffffcfff
 80032e0:	ffff3fff 	.word	0xffff3fff

080032e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e04a      	b.n	800338c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223d      	movs	r2, #61	@ 0x3d
 80032fa:	5c9b      	ldrb	r3, [r3, r2]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223c      	movs	r2, #60	@ 0x3c
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f7fe f8ab 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223d      	movs	r2, #61	@ 0x3d
 8003316:	2102      	movs	r1, #2
 8003318:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	0019      	movs	r1, r3
 8003324:	0010      	movs	r0, r2
 8003326:	f000 fb89 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2248      	movs	r2, #72	@ 0x48
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	223e      	movs	r2, #62	@ 0x3e
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223f      	movs	r2, #63	@ 0x3f
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2240      	movs	r2, #64	@ 0x40
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2241      	movs	r2, #65	@ 0x41
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2242      	movs	r2, #66	@ 0x42
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2243      	movs	r2, #67	@ 0x43
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2244      	movs	r2, #68	@ 0x44
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2245      	movs	r2, #69	@ 0x45
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2246      	movs	r2, #70	@ 0x46
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2247      	movs	r2, #71	@ 0x47
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	223d      	movs	r2, #61	@ 0x3d
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e04a      	b.n	800343c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223d      	movs	r2, #61	@ 0x3d
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223c      	movs	r2, #60	@ 0x3c
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0018      	movs	r0, r3
 80033be:	f000 f841 	bl	8003444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	223d      	movs	r2, #61	@ 0x3d
 80033c6:	2102      	movs	r1, #2
 80033c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	0019      	movs	r1, r3
 80033d4:	0010      	movs	r0, r2
 80033d6:	f000 fb31 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2248      	movs	r2, #72	@ 0x48
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	223e      	movs	r2, #62	@ 0x3e
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	223f      	movs	r2, #63	@ 0x3f
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2240      	movs	r2, #64	@ 0x40
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2241      	movs	r2, #65	@ 0x41
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2242      	movs	r2, #66	@ 0x42
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2243      	movs	r2, #67	@ 0x43
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2244      	movs	r2, #68	@ 0x44
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2245      	movs	r2, #69	@ 0x45
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2246      	movs	r2, #70	@ 0x46
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2247      	movs	r2, #71	@ 0x47
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223d      	movs	r2, #61	@ 0x3d
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800344c:	46c0      	nop			@ (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d108      	bne.n	8003476 <HAL_TIM_PWM_Start+0x22>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	223e      	movs	r2, #62	@ 0x3e
 8003468:	5c9b      	ldrb	r3, [r3, r2]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	1e5a      	subs	r2, r3, #1
 8003470:	4193      	sbcs	r3, r2
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e037      	b.n	80034e6 <HAL_TIM_PWM_Start+0x92>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d108      	bne.n	800348e <HAL_TIM_PWM_Start+0x3a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	223f      	movs	r2, #63	@ 0x3f
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	1e5a      	subs	r2, r3, #1
 8003488:	4193      	sbcs	r3, r2
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e02b      	b.n	80034e6 <HAL_TIM_PWM_Start+0x92>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d108      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x52>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	4193      	sbcs	r3, r2
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e01f      	b.n	80034e6 <HAL_TIM_PWM_Start+0x92>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d108      	bne.n	80034be <HAL_TIM_PWM_Start+0x6a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2241      	movs	r2, #65	@ 0x41
 80034b0:	5c9b      	ldrb	r3, [r3, r2]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	4193      	sbcs	r3, r2
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e013      	b.n	80034e6 <HAL_TIM_PWM_Start+0x92>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d108      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x82>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2242      	movs	r2, #66	@ 0x42
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	4193      	sbcs	r3, r2
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e007      	b.n	80034e6 <HAL_TIM_PWM_Start+0x92>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2243      	movs	r2, #67	@ 0x43
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	4193      	sbcs	r3, r2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07b      	b.n	80035e6 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Start+0xaa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	223e      	movs	r2, #62	@ 0x3e
 80034f8:	2102      	movs	r1, #2
 80034fa:	5499      	strb	r1, [r3, r2]
 80034fc:	e023      	b.n	8003546 <HAL_TIM_PWM_Start+0xf2>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Start+0xba>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	223f      	movs	r2, #63	@ 0x3f
 8003508:	2102      	movs	r1, #2
 800350a:	5499      	strb	r1, [r3, r2]
 800350c:	e01b      	b.n	8003546 <HAL_TIM_PWM_Start+0xf2>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d104      	bne.n	800351e <HAL_TIM_PWM_Start+0xca>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2240      	movs	r2, #64	@ 0x40
 8003518:	2102      	movs	r1, #2
 800351a:	5499      	strb	r1, [r3, r2]
 800351c:	e013      	b.n	8003546 <HAL_TIM_PWM_Start+0xf2>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Start+0xda>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2241      	movs	r2, #65	@ 0x41
 8003528:	2102      	movs	r1, #2
 800352a:	5499      	strb	r1, [r3, r2]
 800352c:	e00b      	b.n	8003546 <HAL_TIM_PWM_Start+0xf2>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b10      	cmp	r3, #16
 8003532:	d104      	bne.n	800353e <HAL_TIM_PWM_Start+0xea>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2242      	movs	r2, #66	@ 0x42
 8003538:	2102      	movs	r1, #2
 800353a:	5499      	strb	r1, [r3, r2]
 800353c:	e003      	b.n	8003546 <HAL_TIM_PWM_Start+0xf2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2243      	movs	r2, #67	@ 0x43
 8003542:	2102      	movs	r1, #2
 8003544:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	2201      	movs	r2, #1
 800354e:	0018      	movs	r0, r3
 8003550:	f000 febc 	bl	80042cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <HAL_TIM_PWM_Start+0x19c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_TIM_PWM_Start+0x11e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a24      	ldr	r2, [pc, #144]	@ (80035f4 <HAL_TIM_PWM_Start+0x1a0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d004      	beq.n	8003572 <HAL_TIM_PWM_Start+0x11e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <HAL_TIM_PWM_Start+0x1a4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_TIM_PWM_Start+0x122>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_TIM_PWM_Start+0x124>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2180      	movs	r1, #128	@ 0x80
 8003588:	0209      	lsls	r1, r1, #8
 800358a:	430a      	orrs	r2, r1
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a17      	ldr	r2, [pc, #92]	@ (80035f0 <HAL_TIM_PWM_Start+0x19c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x14e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_TIM_PWM_Start+0x1a8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d116      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <HAL_TIM_PWM_Start+0x1ac>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d016      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x18e>
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	2380      	movs	r3, #128	@ 0x80
 80035b8:	025b      	lsls	r3, r3, #9
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d011      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	e008      	b.n	80035e2 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2101      	movs	r1, #1
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b004      	add	sp, #16
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40014400 	.word	0x40014400
 80035f8:	40014800 	.word	0x40014800
 80035fc:	40000400 	.word	0x40000400
 8003600:	00010007 	.word	0x00010007

08003604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2317      	movs	r3, #23
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	223c      	movs	r2, #60	@ 0x3c
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003622:	2302      	movs	r3, #2
 8003624:	e0e5      	b.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	223c      	movs	r2, #60	@ 0x3c
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b14      	cmp	r3, #20
 8003632:	d900      	bls.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003634:	e0d1      	b.n	80037da <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	009a      	lsls	r2, r3, #2
 800363a:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	0011      	movs	r1, r2
 800364a:	0018      	movs	r0, r3
 800364c:	f000 fa70 	bl	8003b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2108      	movs	r1, #8
 800365c:	430a      	orrs	r2, r1
 800365e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2104      	movs	r1, #4
 800366c:	438a      	bics	r2, r1
 800366e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	619a      	str	r2, [r3, #24]
      break;
 8003682:	e0af      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f000 facf 	bl	8003c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2180      	movs	r1, #128	@ 0x80
 800369e:	0109      	lsls	r1, r1, #4
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4954      	ldr	r1, [pc, #336]	@ (8003800 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6999      	ldr	r1, [r3, #24]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	021a      	lsls	r2, r3, #8
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	619a      	str	r2, [r3, #24]
      break;
 80036c8:	e08c      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	0011      	movs	r1, r2
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 fb2a 	bl	8003d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2108      	movs	r1, #8
 80036e4:	430a      	orrs	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2104      	movs	r1, #4
 80036f4:	438a      	bics	r2, r1
 80036f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69d9      	ldr	r1, [r3, #28]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	61da      	str	r2, [r3, #28]
      break;
 800370a:	e06b      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	0011      	movs	r1, r2
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fb8b 	bl	8003e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2180      	movs	r1, #128	@ 0x80
 8003726:	0109      	lsls	r1, r1, #4
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4932      	ldr	r1, [pc, #200]	@ (8003800 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003738:	400a      	ands	r2, r1
 800373a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69d9      	ldr	r1, [r3, #28]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	021a      	lsls	r2, r3, #8
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
      break;
 8003750:	e048      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f000 fbcc 	bl	8003ef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2108      	movs	r1, #8
 800376c:	430a      	orrs	r2, r1
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2104      	movs	r1, #4
 800377c:	438a      	bics	r2, r1
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003792:	e027      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	0011      	movs	r1, r2
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fc05 	bl	8003fac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2180      	movs	r1, #128	@ 0x80
 80037ae:	0109      	lsls	r1, r1, #4
 80037b0:	430a      	orrs	r2, r1
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4910      	ldr	r1, [pc, #64]	@ (8003800 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037c0:	400a      	ands	r2, r1
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037d8:	e004      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80037da:	2317      	movs	r3, #23
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
      break;
 80037e2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	223c      	movs	r2, #60	@ 0x3c
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]

  return status;
 80037ec:	2317      	movs	r3, #23
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	781b      	ldrb	r3, [r3, #0]
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b006      	add	sp, #24
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	08005df4 	.word	0x08005df4
 8003800:	fffffbff 	.word	0xfffffbff

08003804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223c      	movs	r2, #60	@ 0x3c
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_TIM_ConfigClockSource+0x20>
 8003820:	2302      	movs	r3, #2
 8003822:	e0bc      	b.n	800399e <HAL_TIM_ConfigClockSource+0x19a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	223c      	movs	r2, #60	@ 0x3c
 8003828:	2101      	movs	r1, #1
 800382a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	223d      	movs	r2, #61	@ 0x3d
 8003830:	2102      	movs	r1, #2
 8003832:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a5a      	ldr	r2, [pc, #360]	@ (80039a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a59      	ldr	r2, [pc, #356]	@ (80039ac <HAL_TIM_ConfigClockSource+0x1a8>)
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2280      	movs	r2, #128	@ 0x80
 800385a:	0192      	lsls	r2, r2, #6
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0xde>
 8003860:	2280      	movs	r2, #128	@ 0x80
 8003862:	0192      	lsls	r2, r2, #6
 8003864:	4293      	cmp	r3, r2
 8003866:	d900      	bls.n	800386a <HAL_TIM_ConfigClockSource+0x66>
 8003868:	e088      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800386a:	2280      	movs	r2, #128	@ 0x80
 800386c:	0152      	lsls	r2, r2, #5
 800386e:	4293      	cmp	r3, r2
 8003870:	d100      	bne.n	8003874 <HAL_TIM_ConfigClockSource+0x70>
 8003872:	e088      	b.n	8003986 <HAL_TIM_ConfigClockSource+0x182>
 8003874:	2280      	movs	r2, #128	@ 0x80
 8003876:	0152      	lsls	r2, r2, #5
 8003878:	4293      	cmp	r3, r2
 800387a:	d900      	bls.n	800387e <HAL_TIM_ConfigClockSource+0x7a>
 800387c:	e07e      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800387e:	2b70      	cmp	r3, #112	@ 0x70
 8003880:	d018      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0xb0>
 8003882:	d900      	bls.n	8003886 <HAL_TIM_ConfigClockSource+0x82>
 8003884:	e07a      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 8003886:	2b60      	cmp	r3, #96	@ 0x60
 8003888:	d04f      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x126>
 800388a:	d900      	bls.n	800388e <HAL_TIM_ConfigClockSource+0x8a>
 800388c:	e076      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800388e:	2b50      	cmp	r3, #80	@ 0x50
 8003890:	d03b      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x106>
 8003892:	d900      	bls.n	8003896 <HAL_TIM_ConfigClockSource+0x92>
 8003894:	e072      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 8003896:	2b40      	cmp	r3, #64	@ 0x40
 8003898:	d057      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x146>
 800389a:	d900      	bls.n	800389e <HAL_TIM_ConfigClockSource+0x9a>
 800389c:	e06e      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800389e:	2b30      	cmp	r3, #48	@ 0x30
 80038a0:	d063      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038a2:	d86b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d060      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038a8:	d868      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d05d      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d05b      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038b2:	e063      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038c4:	f000 fce2 	bl	800428c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2277      	movs	r2, #119	@ 0x77
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
      break;
 80038e0:	e052      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	f000 fccb 	bl	800428c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2180      	movs	r1, #128	@ 0x80
 8003902:	01c9      	lsls	r1, r1, #7
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
      break;
 8003908:	e03e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	001a      	movs	r2, r3
 8003918:	f000 fc3c 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2150      	movs	r1, #80	@ 0x50
 8003922:	0018      	movs	r0, r3
 8003924:	f000 fc96 	bl	8004254 <TIM_ITRx_SetConfig>
      break;
 8003928:	e02e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003936:	001a      	movs	r2, r3
 8003938:	f000 fc5a 	bl	80041f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2160      	movs	r1, #96	@ 0x60
 8003942:	0018      	movs	r0, r3
 8003944:	f000 fc86 	bl	8004254 <TIM_ITRx_SetConfig>
      break;
 8003948:	e01e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	001a      	movs	r2, r3
 8003958:	f000 fc1c 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2140      	movs	r1, #64	@ 0x40
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fc76 	bl	8004254 <TIM_ITRx_SetConfig>
      break;
 8003968:	e00e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	0019      	movs	r1, r3
 8003974:	0010      	movs	r0, r2
 8003976:	f000 fc6d 	bl	8004254 <TIM_ITRx_SetConfig>
      break;
 800397a:	e005      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800397c:	230f      	movs	r3, #15
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
      break;
 8003984:	e000      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003986:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	223d      	movs	r2, #61	@ 0x3d
 800398c:	2101      	movs	r1, #1
 800398e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	223c      	movs	r2, #60	@ 0x3c
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

  return status;
 8003998:	230f      	movs	r3, #15
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	781b      	ldrb	r3, [r3, #0]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	ffceff88 	.word	0xffceff88
 80039ac:	ffff00ff 	.word	0xffff00ff

080039b0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	223c      	movs	r2, #60	@ 0x3c
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e032      	b.n	8003a2e <HAL_TIM_SlaveConfigSynchro+0x7e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	223c      	movs	r2, #60	@ 0x3c
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	223d      	movs	r2, #61	@ 0x3d
 80039d4:	2102      	movs	r1, #2
 80039d6:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0011      	movs	r1, r2
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 fb42 	bl	8004068 <TIM_SlaveTimer_SetConfig>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d009      	beq.n	80039fc <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	223d      	movs	r2, #61	@ 0x3d
 80039ec:	2101      	movs	r1, #1
 80039ee:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	223c      	movs	r2, #60	@ 0x3c
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e018      	b.n	8003a2e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2140      	movs	r1, #64	@ 0x40
 8003a08:	438a      	bics	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4908      	ldr	r1, [pc, #32]	@ (8003a38 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	223d      	movs	r2, #61	@ 0x3d
 8003a20:	2101      	movs	r1, #1
 8003a22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	223c      	movs	r2, #60	@ 0x3c
 8003a28:	2100      	movs	r1, #0
 8003a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	ffffbfff 	.word	0xffffbfff

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a32      	ldr	r2, [pc, #200]	@ (8003b18 <TIM_Base_SetConfig+0xdc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d003      	beq.n	8003a5c <TIM_Base_SetConfig+0x20>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a31      	ldr	r2, [pc, #196]	@ (8003b1c <TIM_Base_SetConfig+0xe0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d108      	bne.n	8003a6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2270      	movs	r2, #112	@ 0x70
 8003a60:	4393      	bics	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a29      	ldr	r2, [pc, #164]	@ (8003b18 <TIM_Base_SetConfig+0xdc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00f      	beq.n	8003a96 <TIM_Base_SetConfig+0x5a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a28      	ldr	r2, [pc, #160]	@ (8003b1c <TIM_Base_SetConfig+0xe0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_Base_SetConfig+0x5a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a27      	ldr	r2, [pc, #156]	@ (8003b20 <TIM_Base_SetConfig+0xe4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0x5a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a26      	ldr	r2, [pc, #152]	@ (8003b24 <TIM_Base_SetConfig+0xe8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0x5a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a25      	ldr	r2, [pc, #148]	@ (8003b28 <TIM_Base_SetConfig+0xec>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d108      	bne.n	8003aa8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a24      	ldr	r2, [pc, #144]	@ (8003b2c <TIM_Base_SetConfig+0xf0>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2280      	movs	r2, #128	@ 0x80
 8003aac:	4393      	bics	r3, r2
 8003aae:	001a      	movs	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a11      	ldr	r2, [pc, #68]	@ (8003b18 <TIM_Base_SetConfig+0xdc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a12      	ldr	r2, [pc, #72]	@ (8003b24 <TIM_Base_SetConfig+0xe8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0xaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <TIM_Base_SetConfig+0xec>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d103      	bne.n	8003aee <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2201      	movs	r2, #1
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d106      	bne.n	8003b0e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2201      	movs	r2, #1
 8003b06:	4393      	bics	r3, r2
 8003b08:	001a      	movs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	611a      	str	r2, [r3, #16]
  }
}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b004      	add	sp, #16
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40002000 	.word	0x40002000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800
 8003b2c:	fffffcff 	.word	0xfffffcff

08003b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4393      	bics	r3, r2
 8003b48:	001a      	movs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c18 <TIM_OC1_SetConfig+0xe8>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2203      	movs	r2, #3
 8003b66:	4393      	bics	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2202      	movs	r2, #2
 8003b78:	4393      	bics	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a24      	ldr	r2, [pc, #144]	@ (8003c1c <TIM_OC1_SetConfig+0xec>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <TIM_OC1_SetConfig+0x6e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a23      	ldr	r2, [pc, #140]	@ (8003c20 <TIM_OC1_SetConfig+0xf0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_OC1_SetConfig+0x6e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a22      	ldr	r2, [pc, #136]	@ (8003c24 <TIM_OC1_SetConfig+0xf4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <TIM_OC1_SetConfig+0xec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_OC1_SetConfig+0xa0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <TIM_OC1_SetConfig+0xf0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC1_SetConfig+0xa0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a16      	ldr	r2, [pc, #88]	@ (8003c24 <TIM_OC1_SetConfig+0xf4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <TIM_OC1_SetConfig+0xf8>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <TIM_OC1_SetConfig+0xfc>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b006      	add	sp, #24
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	fffeff8f 	.word	0xfffeff8f
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	fffffeff 	.word	0xfffffeff
 8003c2c:	fffffdff 	.word	0xfffffdff

08003c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	2210      	movs	r2, #16
 8003c46:	4393      	bics	r3, r2
 8003c48:	001a      	movs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d10 <TIM_OC2_SetConfig+0xe0>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a2b      	ldr	r2, [pc, #172]	@ (8003d14 <TIM_OC2_SetConfig+0xe4>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <TIM_OC2_SetConfig+0xe8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2280      	movs	r2, #128	@ 0x80
 8003c96:	4393      	bics	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2240      	movs	r2, #64	@ 0x40
 8003caa:	4393      	bics	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a19      	ldr	r2, [pc, #100]	@ (8003d18 <TIM_OC2_SetConfig+0xe8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_OC2_SetConfig+0x96>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	@ (8003d1c <TIM_OC2_SetConfig+0xec>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC2_SetConfig+0x96>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <TIM_OC2_SetConfig+0xf0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d113      	bne.n	8003cee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4a16      	ldr	r2, [pc, #88]	@ (8003d24 <TIM_OC2_SetConfig+0xf4>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a15      	ldr	r2, [pc, #84]	@ (8003d28 <TIM_OC2_SetConfig+0xf8>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	621a      	str	r2, [r3, #32]
}
 8003d08:	46c0      	nop			@ (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b006      	add	sp, #24
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	feff8fff 	.word	0xfeff8fff
 8003d14:	fffffcff 	.word	0xfffffcff
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800
 8003d24:	fffffbff 	.word	0xfffffbff
 8003d28:	fffff7ff 	.word	0xfffff7ff

08003d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a31      	ldr	r2, [pc, #196]	@ (8003e08 <TIM_OC3_SetConfig+0xdc>)
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a2d      	ldr	r2, [pc, #180]	@ (8003e0c <TIM_OC3_SetConfig+0xe0>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2203      	movs	r2, #3
 8003d60:	4393      	bics	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a27      	ldr	r2, [pc, #156]	@ (8003e10 <TIM_OC3_SetConfig+0xe4>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a23      	ldr	r2, [pc, #140]	@ (8003e14 <TIM_OC3_SetConfig+0xe8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10d      	bne.n	8003da6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4a22      	ldr	r2, [pc, #136]	@ (8003e18 <TIM_OC3_SetConfig+0xec>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e1c <TIM_OC3_SetConfig+0xf0>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <TIM_OC3_SetConfig+0xe8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_OC3_SetConfig+0x92>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <TIM_OC3_SetConfig+0xf4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC3_SetConfig+0x92>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <TIM_OC3_SetConfig+0xf8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d113      	bne.n	8003de6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <TIM_OC3_SetConfig+0xfc>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4a18      	ldr	r2, [pc, #96]	@ (8003e2c <TIM_OC3_SetConfig+0x100>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b006      	add	sp, #24
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	fffffeff 	.word	0xfffffeff
 8003e0c:	fffeff8f 	.word	0xfffeff8f
 8003e10:	fffffdff 	.word	0xfffffdff
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	fffff7ff 	.word	0xfffff7ff
 8003e1c:	fffffbff 	.word	0xfffffbff
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	ffffefff 	.word	0xffffefff
 8003e2c:	ffffdfff 	.word	0xffffdfff

08003e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4a24      	ldr	r2, [pc, #144]	@ (8003ed8 <TIM_OC4_SetConfig+0xa8>)
 8003e46:	401a      	ands	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a20      	ldr	r2, [pc, #128]	@ (8003edc <TIM_OC4_SetConfig+0xac>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee0 <TIM_OC4_SetConfig+0xb0>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee4 <TIM_OC4_SetConfig+0xb4>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	@ (8003ee8 <TIM_OC4_SetConfig+0xb8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_OC4_SetConfig+0x70>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a16      	ldr	r2, [pc, #88]	@ (8003eec <TIM_OC4_SetConfig+0xbc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_OC4_SetConfig+0x70>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a15      	ldr	r2, [pc, #84]	@ (8003ef0 <TIM_OC4_SetConfig+0xc0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d109      	bne.n	8003eb4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <TIM_OC4_SetConfig+0xc4>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b006      	add	sp, #24
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	ffffefff 	.word	0xffffefff
 8003edc:	feff8fff 	.word	0xfeff8fff
 8003ee0:	fffffcff 	.word	0xfffffcff
 8003ee4:	ffffdfff 	.word	0xffffdfff
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800
 8003ef4:	ffffbfff 	.word	0xffffbfff

08003ef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4a21      	ldr	r2, [pc, #132]	@ (8003f94 <TIM_OC5_SetConfig+0x9c>)
 8003f0e:	401a      	ands	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a1d      	ldr	r2, [pc, #116]	@ (8003f98 <TIM_OC5_SetConfig+0xa0>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4a19      	ldr	r2, [pc, #100]	@ (8003f9c <TIM_OC5_SetConfig+0xa4>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <TIM_OC5_SetConfig+0xa8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_OC5_SetConfig+0x66>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <TIM_OC5_SetConfig+0xac>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_OC5_SetConfig+0x66>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a13      	ldr	r2, [pc, #76]	@ (8003fa8 <TIM_OC5_SetConfig+0xb0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d109      	bne.n	8003f72 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	4a0c      	ldr	r2, [pc, #48]	@ (8003f94 <TIM_OC5_SetConfig+0x9c>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b006      	add	sp, #24
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	fffeffff 	.word	0xfffeffff
 8003f98:	fffeff8f 	.word	0xfffeff8f
 8003f9c:	fffdffff 	.word	0xfffdffff
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4a22      	ldr	r2, [pc, #136]	@ (800404c <TIM_OC6_SetConfig+0xa0>)
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <TIM_OC6_SetConfig+0xa4>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <TIM_OC6_SetConfig+0xa8>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	051b      	lsls	r3, r3, #20
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <TIM_OC6_SetConfig+0xac>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <TIM_OC6_SetConfig+0x68>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a15      	ldr	r2, [pc, #84]	@ (800405c <TIM_OC6_SetConfig+0xb0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_OC6_SetConfig+0x68>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a14      	ldr	r2, [pc, #80]	@ (8004060 <TIM_OC6_SetConfig+0xb4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d109      	bne.n	8004028 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4a13      	ldr	r2, [pc, #76]	@ (8004064 <TIM_OC6_SetConfig+0xb8>)
 8004018:	4013      	ands	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	029b      	lsls	r3, r3, #10
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b006      	add	sp, #24
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	ffefffff 	.word	0xffefffff
 8004050:	feff8fff 	.word	0xfeff8fff
 8004054:	ffdfffff 	.word	0xffdfffff
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800
 8004064:	fffbffff 	.word	0xfffbffff

08004068 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2317      	movs	r3, #23
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a41      	ldr	r2, [pc, #260]	@ (800418c <TIM_SlaveTimer_SetConfig+0x124>)
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4a3e      	ldr	r2, [pc, #248]	@ (8004190 <TIM_SlaveTimer_SetConfig+0x128>)
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b70      	cmp	r3, #112	@ 0x70
 80040b4:	d015      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x7a>
 80040b6:	d900      	bls.n	80040ba <TIM_SlaveTimer_SetConfig+0x52>
 80040b8:	e05b      	b.n	8004172 <TIM_SlaveTimer_SetConfig+0x10a>
 80040ba:	2b60      	cmp	r3, #96	@ 0x60
 80040bc:	d04f      	beq.n	800415e <TIM_SlaveTimer_SetConfig+0xf6>
 80040be:	d858      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x10a>
 80040c0:	2b50      	cmp	r3, #80	@ 0x50
 80040c2:	d042      	beq.n	800414a <TIM_SlaveTimer_SetConfig+0xe2>
 80040c4:	d855      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x10a>
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d016      	beq.n	80040f8 <TIM_SlaveTimer_SetConfig+0x90>
 80040ca:	d852      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x10a>
 80040cc:	2b30      	cmp	r3, #48	@ 0x30
 80040ce:	d055      	beq.n	800417c <TIM_SlaveTimer_SetConfig+0x114>
 80040d0:	d84f      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x10a>
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d052      	beq.n	800417c <TIM_SlaveTimer_SetConfig+0x114>
 80040d6:	d84c      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x10a>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d04f      	beq.n	800417c <TIM_SlaveTimer_SetConfig+0x114>
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d04d      	beq.n	800417c <TIM_SlaveTimer_SetConfig+0x114>
 80040e0:	e047      	b.n	8004172 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	f000 f8cb 	bl	800428c <TIM_ETR_SetConfig>
      break;
 80040f6:	e042      	b.n	800417e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	d101      	bne.n	8004104 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e03f      	b.n	8004184 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	438a      	bics	r2, r1
 800411a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	22f0      	movs	r2, #240	@ 0xf0
 8004128:	4393      	bics	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	621a      	str	r2, [r3, #32]
      break;
 8004148:	e019      	b.n	800417e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	001a      	movs	r2, r3
 8004158:	f000 f81c 	bl	8004194 <TIM_TI1_ConfigInputStage>
      break;
 800415c:	e00f      	b.n	800417e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800416a:	001a      	movs	r2, r3
 800416c:	f000 f840 	bl	80041f0 <TIM_TI2_ConfigInputStage>
      break;
 8004170:	e005      	b.n	800417e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004172:	2317      	movs	r3, #23
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
      break;
 800417a:	e000      	b.n	800417e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800417c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800417e:	2317      	movs	r3, #23
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	781b      	ldrb	r3, [r3, #0]
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b006      	add	sp, #24
 800418a:	bd80      	pop	{r7, pc}
 800418c:	ffcfff8f 	.word	0xffcfff8f
 8004190:	fffefff8 	.word	0xfffefff8

08004194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4393      	bics	r3, r2
 80041ae:	001a      	movs	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	22f0      	movs	r2, #240	@ 0xf0
 80041be:	4393      	bics	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	220a      	movs	r2, #10
 80041d0:	4393      	bics	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b006      	add	sp, #24
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	2210      	movs	r2, #16
 8004208:	4393      	bics	r3, r2
 800420a:	001a      	movs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4a0d      	ldr	r2, [pc, #52]	@ (8004250 <TIM_TI2_ConfigInputStage+0x60>)
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	22a0      	movs	r2, #160	@ 0xa0
 800422c:	4393      	bics	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	46bd      	mov	sp, r7
 800424a:	b006      	add	sp, #24
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	ffff0fff 	.word	0xffff0fff

08004254 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a08      	ldr	r2, [pc, #32]	@ (8004288 <TIM_ITRx_SetConfig+0x34>)
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	2207      	movs	r2, #7
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	609a      	str	r2, [r3, #8]
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	ffcfff8f 	.word	0xffcfff8f

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4a09      	ldr	r2, [pc, #36]	@ (80042c8 <TIM_ETR_SetConfig+0x3c>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b006      	add	sp, #24
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	ffff00ff 	.word	0xffff00ff

080042cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	221f      	movs	r2, #31
 80042dc:	4013      	ands	r3, r2
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	0013      	movs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	43d2      	mvns	r2, r2
 80042ee:	401a      	ands	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	211f      	movs	r1, #31
 80042fc:	400b      	ands	r3, r1
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4099      	lsls	r1, r3
 8004302:	000b      	movs	r3, r1
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	223c      	movs	r2, #60	@ 0x3c
 8004322:	5c9b      	ldrb	r3, [r3, r2]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e04a      	b.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	223c      	movs	r2, #60	@ 0x3c
 8004330:	2101      	movs	r1, #1
 8004332:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	223d      	movs	r2, #61	@ 0x3d
 8004338:	2102      	movs	r1, #2
 800433a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800435a:	4013      	ands	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2270      	movs	r2, #112	@ 0x70
 800436c:	4393      	bics	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a11      	ldr	r2, [pc, #68]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a10      	ldr	r2, [pc, #64]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2280      	movs	r2, #128	@ 0x80
 800439a:	4393      	bics	r3, r2
 800439c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	223d      	movs	r2, #61	@ 0x3d
 80043b4:	2101      	movs	r1, #1
 80043b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	223c      	movs	r2, #60	@ 0x3c
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	ff0fffff 	.word	0xff0fffff
 80043d4:	40000400 	.word	0x40000400

080043d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	223c      	movs	r2, #60	@ 0x3c
 80043ea:	5c9b      	ldrb	r3, [r3, r2]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e06f      	b.n	80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	223c      	movs	r2, #60	@ 0x3c
 80043f8:	2101      	movs	r1, #1
 80043fa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	22ff      	movs	r2, #255	@ 0xff
 8004400:	4393      	bics	r3, r2
 8004402:	001a      	movs	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a33      	ldr	r2, [pc, #204]	@ (80044dc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004410:	401a      	ands	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a30      	ldr	r2, [pc, #192]	@ (80044e0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800441e:	401a      	ands	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a2e      	ldr	r2, [pc, #184]	@ (80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800442c:	401a      	ands	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800443a:	401a      	ands	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a29      	ldr	r2, [pc, #164]	@ (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004448:	401a      	ands	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a26      	ldr	r2, [pc, #152]	@ (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004456:	401a      	ands	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a24      	ldr	r2, [pc, #144]	@ (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004464:	401a      	ands	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a21      	ldr	r2, [pc, #132]	@ (80044f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004474:	401a      	ands	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	@ (80044fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d11c      	bne.n	80044c2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a1d      	ldr	r2, [pc, #116]	@ (8004500 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800448c:	401a      	ands	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	051b      	lsls	r3, r3, #20
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800449c:	401a      	ands	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a17      	ldr	r2, [pc, #92]	@ (8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80044aa:	401a      	ands	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a15      	ldr	r2, [pc, #84]	@ (800450c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80044b8:	401a      	ands	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	223c      	movs	r2, #60	@ 0x3c
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b004      	add	sp, #16
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	fffffcff 	.word	0xfffffcff
 80044e0:	fffffbff 	.word	0xfffffbff
 80044e4:	fffff7ff 	.word	0xfffff7ff
 80044e8:	ffffefff 	.word	0xffffefff
 80044ec:	ffffdfff 	.word	0xffffdfff
 80044f0:	ffffbfff 	.word	0xffffbfff
 80044f4:	fff0ffff 	.word	0xfff0ffff
 80044f8:	efffffff 	.word	0xefffffff
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	ff0fffff 	.word	0xff0fffff
 8004504:	feffffff 	.word	0xfeffffff
 8004508:	fdffffff 	.word	0xfdffffff
 800450c:	dfffffff 	.word	0xdfffffff

08004510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e046      	b.n	80045b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2288      	movs	r2, #136	@ 0x88
 8004526:	589b      	ldr	r3, [r3, r2]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2284      	movs	r2, #132	@ 0x84
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0018      	movs	r0, r3
 8004538:	f7fd f832 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2288      	movs	r2, #136	@ 0x88
 8004540:	2124      	movs	r1, #36	@ 0x24
 8004542:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2101      	movs	r1, #1
 8004550:	438a      	bics	r2, r1
 8004552:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	0018      	movs	r0, r3
 8004560:	f000 fd6e 	bl	8005040 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 fc00 	bl	8004d6c <UART_SetConfig>
 800456c:	0003      	movs	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e01c      	b.n	80045b0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	490d      	ldr	r1, [pc, #52]	@ (80045b8 <HAL_UART_Init+0xa8>)
 8004582:	400a      	ands	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	212a      	movs	r1, #42	@ 0x2a
 8004592:	438a      	bics	r2, r1
 8004594:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fdfd 	bl	80051a8 <UART_CheckIdleState>
 80045ae:	0003      	movs	r3, r0
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	ffffb7ff 	.word	0xffffb7ff

080045bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2288      	movs	r2, #136	@ 0x88
 80045ce:	589b      	ldr	r3, [r3, r2]
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d000      	beq.n	80045d6 <HAL_UART_Transmit_DMA+0x1a>
 80045d4:	e079      	b.n	80046ca <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_UART_Transmit_DMA+0x28>
 80045dc:	1dbb      	adds	r3, r7, #6
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e071      	b.n	80046cc <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	015b      	lsls	r3, r3, #5
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d109      	bne.n	8004608 <HAL_UART_Transmit_DMA+0x4c>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2201      	movs	r2, #1
 8004600:	4013      	ands	r3, r2
 8004602:	d001      	beq.n	8004608 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e061      	b.n	80046cc <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1dba      	adds	r2, r7, #6
 8004612:	2154      	movs	r1, #84	@ 0x54
 8004614:	8812      	ldrh	r2, [r2, #0]
 8004616:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1dba      	adds	r2, r7, #6
 800461c:	2156      	movs	r1, #86	@ 0x56
 800461e:	8812      	ldrh	r2, [r2, #0]
 8004620:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2290      	movs	r2, #144	@ 0x90
 8004626:	2100      	movs	r1, #0
 8004628:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2288      	movs	r2, #136	@ 0x88
 800462e:	2121      	movs	r1, #33	@ 0x21
 8004630:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d028      	beq.n	800468c <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463e:	4a25      	ldr	r2, [pc, #148]	@ (80046d4 <HAL_UART_Transmit_DMA+0x118>)
 8004640:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004646:	4a24      	ldr	r2, [pc, #144]	@ (80046d8 <HAL_UART_Transmit_DMA+0x11c>)
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800464e:	4a23      	ldr	r2, [pc, #140]	@ (80046dc <HAL_UART_Transmit_DMA+0x120>)
 8004650:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004656:	2200      	movs	r2, #0
 8004658:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004662:	0019      	movs	r1, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3328      	adds	r3, #40	@ 0x28
 800466a:	001a      	movs	r2, r3
 800466c:	1dbb      	adds	r3, r7, #6
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	f7fd fab8 	bl	8001be4 <HAL_DMA_Start_IT>
 8004674:	1e03      	subs	r3, r0, #0
 8004676:	d009      	beq.n	800468c <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2290      	movs	r2, #144	@ 0x90
 800467c:	2110      	movs	r1, #16
 800467e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2288      	movs	r2, #136	@ 0x88
 8004684:	2120      	movs	r1, #32
 8004686:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e01f      	b.n	80046cc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2240      	movs	r2, #64	@ 0x40
 8004692:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004694:	f3ef 8310 	mrs	r3, PRIMASK
 8004698:	613b      	str	r3, [r7, #16]
  return(result);
 800469a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f383 8810 	msr	PRIMASK, r3
}
 80046a8:	46c0      	nop			@ (mov r8, r8)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2180      	movs	r1, #128	@ 0x80
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f383 8810 	msr	PRIMASK, r3
}
 80046c4:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e000      	b.n	80046cc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b008      	add	sp, #32
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	08005675 	.word	0x08005675
 80046d8:	0800570d 	.word	0x0800570d
 80046dc:	0800589f 	.word	0x0800589f

080046e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b0aa      	sub	sp, #168	@ 0xa8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	22a4      	movs	r2, #164	@ 0xa4
 80046f0:	18b9      	adds	r1, r7, r2
 80046f2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	20a0      	movs	r0, #160	@ 0xa0
 80046fc:	1839      	adds	r1, r7, r0
 80046fe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	249c      	movs	r4, #156	@ 0x9c
 8004708:	1939      	adds	r1, r7, r4
 800470a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800470c:	0011      	movs	r1, r2
 800470e:	18bb      	adds	r3, r7, r2
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4aa2      	ldr	r2, [pc, #648]	@ (800499c <HAL_UART_IRQHandler+0x2bc>)
 8004714:	4013      	ands	r3, r2
 8004716:	2298      	movs	r2, #152	@ 0x98
 8004718:	18bd      	adds	r5, r7, r2
 800471a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800471c:	18bb      	adds	r3, r7, r2
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11a      	bne.n	800475a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004724:	187b      	adds	r3, r7, r1
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2220      	movs	r2, #32
 800472a:	4013      	ands	r3, r2
 800472c:	d015      	beq.n	800475a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800472e:	183b      	adds	r3, r7, r0
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2220      	movs	r2, #32
 8004734:	4013      	ands	r3, r2
 8004736:	d105      	bne.n	8004744 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004738:	193b      	adds	r3, r7, r4
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	055b      	lsls	r3, r3, #21
 8004740:	4013      	ands	r3, r2
 8004742:	d00a      	beq.n	800475a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004748:	2b00      	cmp	r3, #0
 800474a:	d100      	bne.n	800474e <HAL_UART_IRQHandler+0x6e>
 800474c:	e2dc      	b.n	8004d08 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	0010      	movs	r0, r2
 8004756:	4798      	blx	r3
      }
      return;
 8004758:	e2d6      	b.n	8004d08 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800475a:	2398      	movs	r3, #152	@ 0x98
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d100      	bne.n	8004766 <HAL_UART_IRQHandler+0x86>
 8004764:	e122      	b.n	80049ac <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004766:	239c      	movs	r3, #156	@ 0x9c
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a8c      	ldr	r2, [pc, #560]	@ (80049a0 <HAL_UART_IRQHandler+0x2c0>)
 800476e:	4013      	ands	r3, r2
 8004770:	d106      	bne.n	8004780 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004772:	23a0      	movs	r3, #160	@ 0xa0
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a8a      	ldr	r2, [pc, #552]	@ (80049a4 <HAL_UART_IRQHandler+0x2c4>)
 800477a:	4013      	ands	r3, r2
 800477c:	d100      	bne.n	8004780 <HAL_UART_IRQHandler+0xa0>
 800477e:	e115      	b.n	80049ac <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004780:	23a4      	movs	r3, #164	@ 0xa4
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2201      	movs	r2, #1
 8004788:	4013      	ands	r3, r2
 800478a:	d012      	beq.n	80047b2 <HAL_UART_IRQHandler+0xd2>
 800478c:	23a0      	movs	r3, #160	@ 0xa0
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	2380      	movs	r3, #128	@ 0x80
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4013      	ands	r3, r2
 8004798:	d00b      	beq.n	80047b2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2201      	movs	r2, #1
 80047a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2290      	movs	r2, #144	@ 0x90
 80047a6:	589b      	ldr	r3, [r3, r2]
 80047a8:	2201      	movs	r2, #1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2190      	movs	r1, #144	@ 0x90
 80047b0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047b2:	23a4      	movs	r3, #164	@ 0xa4
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2202      	movs	r2, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d011      	beq.n	80047e2 <HAL_UART_IRQHandler+0x102>
 80047be:	239c      	movs	r3, #156	@ 0x9c
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2202      	movs	r2, #2
 80047d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2290      	movs	r2, #144	@ 0x90
 80047d6:	589b      	ldr	r3, [r3, r2]
 80047d8:	2204      	movs	r2, #4
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2190      	movs	r1, #144	@ 0x90
 80047e0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047e2:	23a4      	movs	r3, #164	@ 0xa4
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2204      	movs	r2, #4
 80047ea:	4013      	ands	r3, r2
 80047ec:	d011      	beq.n	8004812 <HAL_UART_IRQHandler+0x132>
 80047ee:	239c      	movs	r3, #156	@ 0x9c
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	d00b      	beq.n	8004812 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2204      	movs	r2, #4
 8004800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2290      	movs	r2, #144	@ 0x90
 8004806:	589b      	ldr	r3, [r3, r2]
 8004808:	2202      	movs	r2, #2
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2190      	movs	r1, #144	@ 0x90
 8004810:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004812:	23a4      	movs	r3, #164	@ 0xa4
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2208      	movs	r2, #8
 800481a:	4013      	ands	r3, r2
 800481c:	d017      	beq.n	800484e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800481e:	23a0      	movs	r3, #160	@ 0xa0
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2220      	movs	r2, #32
 8004826:	4013      	ands	r3, r2
 8004828:	d105      	bne.n	8004836 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800482a:	239c      	movs	r3, #156	@ 0x9c
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5b      	ldr	r2, [pc, #364]	@ (80049a0 <HAL_UART_IRQHandler+0x2c0>)
 8004832:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004834:	d00b      	beq.n	800484e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2208      	movs	r2, #8
 800483c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2290      	movs	r2, #144	@ 0x90
 8004842:	589b      	ldr	r3, [r3, r2]
 8004844:	2208      	movs	r2, #8
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2190      	movs	r1, #144	@ 0x90
 800484c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800484e:	23a4      	movs	r3, #164	@ 0xa4
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	2380      	movs	r3, #128	@ 0x80
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	4013      	ands	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_UART_IRQHandler+0x1a4>
 800485c:	23a0      	movs	r3, #160	@ 0xa0
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2380      	movs	r3, #128	@ 0x80
 8004864:	04db      	lsls	r3, r3, #19
 8004866:	4013      	ands	r3, r2
 8004868:	d00c      	beq.n	8004884 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2280      	movs	r2, #128	@ 0x80
 8004870:	0112      	lsls	r2, r2, #4
 8004872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2290      	movs	r2, #144	@ 0x90
 8004878:	589b      	ldr	r3, [r3, r2]
 800487a:	2220      	movs	r2, #32
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2190      	movs	r1, #144	@ 0x90
 8004882:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2290      	movs	r2, #144	@ 0x90
 8004888:	589b      	ldr	r3, [r3, r2]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d100      	bne.n	8004890 <HAL_UART_IRQHandler+0x1b0>
 800488e:	e23d      	b.n	8004d0c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004890:	23a4      	movs	r3, #164	@ 0xa4
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2220      	movs	r2, #32
 8004898:	4013      	ands	r3, r2
 800489a:	d015      	beq.n	80048c8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800489c:	23a0      	movs	r3, #160	@ 0xa0
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2220      	movs	r2, #32
 80048a4:	4013      	ands	r3, r2
 80048a6:	d106      	bne.n	80048b6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048a8:	239c      	movs	r3, #156	@ 0x9c
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	2380      	movs	r3, #128	@ 0x80
 80048b0:	055b      	lsls	r3, r3, #21
 80048b2:	4013      	ands	r3, r2
 80048b4:	d008      	beq.n	80048c8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	0010      	movs	r0, r2
 80048c6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2290      	movs	r2, #144	@ 0x90
 80048cc:	589b      	ldr	r3, [r3, r2]
 80048ce:	2194      	movs	r1, #148	@ 0x94
 80048d0:	187a      	adds	r2, r7, r1
 80048d2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2240      	movs	r2, #64	@ 0x40
 80048dc:	4013      	ands	r3, r2
 80048de:	2b40      	cmp	r3, #64	@ 0x40
 80048e0:	d004      	beq.n	80048ec <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048e2:	187b      	adds	r3, r7, r1
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2228      	movs	r2, #40	@ 0x28
 80048e8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ea:	d04c      	beq.n	8004986 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 fe5a 	bl	80055a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2240      	movs	r2, #64	@ 0x40
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d13c      	bne.n	800497c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004902:	f3ef 8310 	mrs	r3, PRIMASK
 8004906:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004908:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	2090      	movs	r0, #144	@ 0x90
 800490c:	183a      	adds	r2, r7, r0
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	2301      	movs	r3, #1
 8004912:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2140      	movs	r1, #64	@ 0x40
 8004928:	438a      	bics	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	183b      	adds	r3, r7, r0
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004934:	f383 8810 	msr	PRIMASK, r3
}
 8004938:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2280      	movs	r2, #128	@ 0x80
 800493e:	589b      	ldr	r3, [r3, r2]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d016      	beq.n	8004972 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2280      	movs	r2, #128	@ 0x80
 8004948:	589b      	ldr	r3, [r3, r2]
 800494a:	4a17      	ldr	r2, [pc, #92]	@ (80049a8 <HAL_UART_IRQHandler+0x2c8>)
 800494c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2280      	movs	r2, #128	@ 0x80
 8004952:	589b      	ldr	r3, [r3, r2]
 8004954:	0018      	movs	r0, r3
 8004956:	f7fd fa2d 	bl	8001db4 <HAL_DMA_Abort_IT>
 800495a:	1e03      	subs	r3, r0, #0
 800495c:	d01c      	beq.n	8004998 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2280      	movs	r2, #128	@ 0x80
 8004962:	589b      	ldr	r3, [r3, r2]
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	2180      	movs	r1, #128	@ 0x80
 800496a:	5852      	ldr	r2, [r2, r1]
 800496c:	0010      	movs	r0, r2
 800496e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e012      	b.n	8004998 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 f9f1 	bl	8004d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497a:	e00d      	b.n	8004998 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 f9ec 	bl	8004d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e008      	b.n	8004998 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 f9e7 	bl	8004d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2290      	movs	r2, #144	@ 0x90
 8004992:	2100      	movs	r1, #0
 8004994:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004996:	e1b9      	b.n	8004d0c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	46c0      	nop			@ (mov r8, r8)
    return;
 800499a:	e1b7      	b.n	8004d0c <HAL_UART_IRQHandler+0x62c>
 800499c:	0000080f 	.word	0x0000080f
 80049a0:	10000001 	.word	0x10000001
 80049a4:	04000120 	.word	0x04000120
 80049a8:	08005925 	.word	0x08005925

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d000      	beq.n	80049b6 <HAL_UART_IRQHandler+0x2d6>
 80049b4:	e13e      	b.n	8004c34 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049b6:	23a4      	movs	r3, #164	@ 0xa4
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2210      	movs	r2, #16
 80049be:	4013      	ands	r3, r2
 80049c0:	d100      	bne.n	80049c4 <HAL_UART_IRQHandler+0x2e4>
 80049c2:	e137      	b.n	8004c34 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049c4:	23a0      	movs	r3, #160	@ 0xa0
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2210      	movs	r2, #16
 80049cc:	4013      	ands	r3, r2
 80049ce:	d100      	bne.n	80049d2 <HAL_UART_IRQHandler+0x2f2>
 80049d0:	e130      	b.n	8004c34 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2240      	movs	r2, #64	@ 0x40
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b40      	cmp	r3, #64	@ 0x40
 80049e6:	d000      	beq.n	80049ea <HAL_UART_IRQHandler+0x30a>
 80049e8:	e0a4      	b.n	8004b34 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2280      	movs	r2, #128	@ 0x80
 80049ee:	589b      	ldr	r3, [r3, r2]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	217e      	movs	r1, #126	@ 0x7e
 80049f6:	187b      	adds	r3, r7, r1
 80049f8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d100      	bne.n	8004a04 <HAL_UART_IRQHandler+0x324>
 8004a02:	e185      	b.n	8004d10 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	225c      	movs	r2, #92	@ 0x5c
 8004a08:	5a9b      	ldrh	r3, [r3, r2]
 8004a0a:	187a      	adds	r2, r7, r1
 8004a0c:	8812      	ldrh	r2, [r2, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d300      	bcc.n	8004a14 <HAL_UART_IRQHandler+0x334>
 8004a12:	e17d      	b.n	8004d10 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	187a      	adds	r2, r7, r1
 8004a18:	215e      	movs	r1, #94	@ 0x5e
 8004a1a:	8812      	ldrh	r2, [r2, #0]
 8004a1c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2280      	movs	r2, #128	@ 0x80
 8004a22:	589b      	ldr	r3, [r3, r2]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d170      	bne.n	8004b10 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a32:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a38:	2301      	movs	r3, #1
 8004a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3e:	f383 8810 	msr	PRIMASK, r3
}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	49b4      	ldr	r1, [pc, #720]	@ (8004d20 <HAL_UART_IRQHandler+0x640>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a60:	f3ef 8310 	mrs	r3, PRIMASK
 8004a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a70:	f383 8810 	msr	PRIMASK, r3
}
 8004a74:	46c0      	nop			@ (mov r8, r8)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2101      	movs	r1, #1
 8004a82:	438a      	bics	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]
 8004a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a88:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2140      	movs	r1, #64	@ 0x40
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	228c      	movs	r2, #140	@ 0x8c
 8004ac8:	2120      	movs	r1, #32
 8004aca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004adc:	2301      	movs	r3, #1
 8004ade:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ae2:	f383 8810 	msr	PRIMASK, r3
}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2110      	movs	r1, #16
 8004af4:	438a      	bics	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004afe:	f383 8810 	msr	PRIMASK, r3
}
 8004b02:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2280      	movs	r2, #128	@ 0x80
 8004b08:	589b      	ldr	r3, [r3, r2]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f7fd f8f0 	bl	8001cf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	225c      	movs	r2, #92	@ 0x5c
 8004b1a:	5a9a      	ldrh	r2, [r3, r2]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	215e      	movs	r1, #94	@ 0x5e
 8004b20:	5a5b      	ldrh	r3, [r3, r1]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7fc f861 	bl	8000bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b32:	e0ed      	b.n	8004d10 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	225c      	movs	r2, #92	@ 0x5c
 8004b38:	5a99      	ldrh	r1, [r3, r2]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	225e      	movs	r2, #94	@ 0x5e
 8004b3e:	5a9b      	ldrh	r3, [r3, r2]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	208e      	movs	r0, #142	@ 0x8e
 8004b44:	183b      	adds	r3, r7, r0
 8004b46:	1a8a      	subs	r2, r1, r2
 8004b48:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	225e      	movs	r2, #94	@ 0x5e
 8004b4e:	5a9b      	ldrh	r3, [r3, r2]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d100      	bne.n	8004b58 <HAL_UART_IRQHandler+0x478>
 8004b56:	e0dd      	b.n	8004d14 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004b58:	183b      	adds	r3, r7, r0
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d100      	bne.n	8004b62 <HAL_UART_IRQHandler+0x482>
 8004b60:	e0d8      	b.n	8004d14 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b62:	f3ef 8310 	mrs	r3, PRIMASK
 8004b66:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b68:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b6a:	2488      	movs	r4, #136	@ 0x88
 8004b6c:	193a      	adds	r2, r7, r4
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	2301      	movs	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f383 8810 	msr	PRIMASK, r3
}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4967      	ldr	r1, [pc, #412]	@ (8004d24 <HAL_UART_IRQHandler+0x644>)
 8004b88:	400a      	ands	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	193b      	adds	r3, r7, r4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ba0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ba2:	2484      	movs	r4, #132	@ 0x84
 8004ba4:	193a      	adds	r2, r7, r4
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f383 8810 	msr	PRIMASK, r3
}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	495a      	ldr	r1, [pc, #360]	@ (8004d28 <HAL_UART_IRQHandler+0x648>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	193b      	adds	r3, r7, r4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	228c      	movs	r2, #140	@ 0x8c
 8004bd6:	2120      	movs	r1, #32
 8004bd8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bee:	2480      	movs	r4, #128	@ 0x80
 8004bf0:	193a      	adds	r2, r7, r4
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	f383 8810 	msr	PRIMASK, r3
}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2110      	movs	r1, #16
 8004c0c:	438a      	bics	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	193b      	adds	r3, r7, r4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c18:	f383 8810 	msr	PRIMASK, r3
}
 8004c1c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c24:	183b      	adds	r3, r7, r0
 8004c26:	881a      	ldrh	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	0011      	movs	r1, r2
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fb ffe1 	bl	8000bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c32:	e06f      	b.n	8004d14 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c34:	23a4      	movs	r3, #164	@ 0xa4
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	2380      	movs	r3, #128	@ 0x80
 8004c3c:	035b      	lsls	r3, r3, #13
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d010      	beq.n	8004c64 <HAL_UART_IRQHandler+0x584>
 8004c42:	239c      	movs	r3, #156	@ 0x9c
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	03db      	lsls	r3, r3, #15
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2280      	movs	r2, #128	@ 0x80
 8004c56:	0352      	lsls	r2, r2, #13
 8004c58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 fea4 	bl	80059aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c62:	e05a      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c64:	23a4      	movs	r3, #164	@ 0xa4
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2280      	movs	r2, #128	@ 0x80
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d016      	beq.n	8004c9e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c70:	23a0      	movs	r3, #160	@ 0xa0
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2280      	movs	r2, #128	@ 0x80
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d106      	bne.n	8004c8a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c7c:	239c      	movs	r3, #156	@ 0x9c
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	4013      	ands	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d042      	beq.n	8004d18 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	0010      	movs	r0, r2
 8004c9a:	4798      	blx	r3
    }
    return;
 8004c9c:	e03c      	b.n	8004d18 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c9e:	23a4      	movs	r3, #164	@ 0xa4
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2240      	movs	r2, #64	@ 0x40
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x5e0>
 8004caa:	23a0      	movs	r3, #160	@ 0xa0
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2240      	movs	r2, #64	@ 0x40
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 fe4a 	bl	8005952 <UART_EndTransmit_IT>
    return;
 8004cbe:	e02c      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004cc0:	23a4      	movs	r3, #164	@ 0xa4
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x606>
 8004cce:	23a0      	movs	r3, #160	@ 0xa0
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2380      	movs	r3, #128	@ 0x80
 8004cd6:	05db      	lsls	r3, r3, #23
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 fe73 	bl	80059ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ce4:	e019      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ce6:	23a4      	movs	r3, #164	@ 0xa4
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	@ 0x80
 8004cee:	045b      	lsls	r3, r3, #17
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d012      	beq.n	8004d1a <HAL_UART_IRQHandler+0x63a>
 8004cf4:	23a0      	movs	r3, #160	@ 0xa0
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da0d      	bge.n	8004d1a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 fe5a 	bl	80059ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d06:	e008      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
      return;
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	e006      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
    return;
 8004d0c:	46c0      	nop			@ (mov r8, r8)
 8004d0e:	e004      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
      return;
 8004d10:	46c0      	nop			@ (mov r8, r8)
 8004d12:	e002      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
      return;
 8004d14:	46c0      	nop			@ (mov r8, r8)
 8004d16:	e000      	b.n	8004d1a <HAL_UART_IRQHandler+0x63a>
    return;
 8004d18:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b02a      	add	sp, #168	@ 0xa8
 8004d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d20:	fffffeff 	.word	0xfffffeff
 8004d24:	fffffedf 	.word	0xfffffedf
 8004d28:	effffffe 	.word	0xeffffffe

08004d2c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d34:	46c0      	nop			@ (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d54:	46c0      	nop			@ (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d74:	231a      	movs	r3, #26
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4aa1      	ldr	r2, [pc, #644]	@ (8005020 <UART_SetConfig+0x2b4>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	0019      	movs	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a9c      	ldr	r2, [pc, #624]	@ (8005024 <UART_SetConfig+0x2b8>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a93      	ldr	r2, [pc, #588]	@ (8005028 <UART_SetConfig+0x2bc>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	0019      	movs	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	220f      	movs	r2, #15
 8004df0:	4393      	bics	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a89      	ldr	r2, [pc, #548]	@ (800502c <UART_SetConfig+0x2c0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d127      	bne.n	8004e5a <UART_SetConfig+0xee>
 8004e0a:	4b89      	ldr	r3, [pc, #548]	@ (8005030 <UART_SetConfig+0x2c4>)
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	2203      	movs	r2, #3
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d017      	beq.n	8004e46 <UART_SetConfig+0xda>
 8004e16:	d81b      	bhi.n	8004e50 <UART_SetConfig+0xe4>
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d00a      	beq.n	8004e32 <UART_SetConfig+0xc6>
 8004e1c:	d818      	bhi.n	8004e50 <UART_SetConfig+0xe4>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <UART_SetConfig+0xbc>
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d00a      	beq.n	8004e3c <UART_SetConfig+0xd0>
 8004e26:	e013      	b.n	8004e50 <UART_SetConfig+0xe4>
 8004e28:	231b      	movs	r3, #27
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	e021      	b.n	8004e76 <UART_SetConfig+0x10a>
 8004e32:	231b      	movs	r3, #27
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2202      	movs	r2, #2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e01c      	b.n	8004e76 <UART_SetConfig+0x10a>
 8004e3c:	231b      	movs	r3, #27
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	2204      	movs	r2, #4
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	e017      	b.n	8004e76 <UART_SetConfig+0x10a>
 8004e46:	231b      	movs	r3, #27
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e012      	b.n	8004e76 <UART_SetConfig+0x10a>
 8004e50:	231b      	movs	r3, #27
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2210      	movs	r2, #16
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e00d      	b.n	8004e76 <UART_SetConfig+0x10a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a75      	ldr	r2, [pc, #468]	@ (8005034 <UART_SetConfig+0x2c8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d104      	bne.n	8004e6e <UART_SetConfig+0x102>
 8004e64:	231b      	movs	r3, #27
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	2200      	movs	r2, #0
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	e003      	b.n	8004e76 <UART_SetConfig+0x10a>
 8004e6e:	231b      	movs	r3, #27
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	2210      	movs	r2, #16
 8004e74:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	2380      	movs	r3, #128	@ 0x80
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d000      	beq.n	8004e84 <UART_SetConfig+0x118>
 8004e82:	e065      	b.n	8004f50 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004e84:	231b      	movs	r3, #27
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d015      	beq.n	8004eba <UART_SetConfig+0x14e>
 8004e8e:	dc18      	bgt.n	8004ec2 <UART_SetConfig+0x156>
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d00d      	beq.n	8004eb0 <UART_SetConfig+0x144>
 8004e94:	dc15      	bgt.n	8004ec2 <UART_SetConfig+0x156>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <UART_SetConfig+0x134>
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d005      	beq.n	8004eaa <UART_SetConfig+0x13e>
 8004e9e:	e010      	b.n	8004ec2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe f8e4 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	617b      	str	r3, [r7, #20]
        break;
 8004ea8:	e012      	b.n	8004ed0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eaa:	4b63      	ldr	r3, [pc, #396]	@ (8005038 <UART_SetConfig+0x2cc>)
 8004eac:	617b      	str	r3, [r7, #20]
        break;
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb0:	f7fe f850 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	617b      	str	r3, [r7, #20]
        break;
 8004eb8:	e00a      	b.n	8004ed0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	2380      	movs	r3, #128	@ 0x80
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	617b      	str	r3, [r7, #20]
        break;
 8004ec0:	e006      	b.n	8004ed0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ec6:	231a      	movs	r3, #26
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
        break;
 8004ece:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d100      	bne.n	8004ed8 <UART_SetConfig+0x16c>
 8004ed6:	e08d      	b.n	8004ff4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004edc:	4b57      	ldr	r3, [pc, #348]	@ (800503c <UART_SetConfig+0x2d0>)
 8004ede:	0052      	lsls	r2, r2, #1
 8004ee0:	5ad3      	ldrh	r3, [r2, r3]
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	6978      	ldr	r0, [r7, #20]
 8004ee6:	f7fb f90b 	bl	8000100 <__udivsi3>
 8004eea:	0003      	movs	r3, r0
 8004eec:	005a      	lsls	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	18d2      	adds	r2, r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	0019      	movs	r1, r3
 8004efc:	0010      	movs	r0, r2
 8004efe:	f7fb f8ff 	bl	8000100 <__udivsi3>
 8004f02:	0003      	movs	r3, r0
 8004f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b0f      	cmp	r3, #15
 8004f0a:	d91c      	bls.n	8004f46 <UART_SetConfig+0x1da>
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	2380      	movs	r3, #128	@ 0x80
 8004f10:	025b      	lsls	r3, r3, #9
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d217      	bcs.n	8004f46 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	200e      	movs	r0, #14
 8004f1c:	183b      	adds	r3, r7, r0
 8004f1e:	210f      	movs	r1, #15
 8004f20:	438a      	bics	r2, r1
 8004f22:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2207      	movs	r2, #7
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	b299      	uxth	r1, r3
 8004f30:	183b      	adds	r3, r7, r0
 8004f32:	183a      	adds	r2, r7, r0
 8004f34:	8812      	ldrh	r2, [r2, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	183a      	adds	r2, r7, r0
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e056      	b.n	8004ff4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004f46:	231a      	movs	r3, #26
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	e051      	b.n	8004ff4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f50:	231b      	movs	r3, #27
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d015      	beq.n	8004f86 <UART_SetConfig+0x21a>
 8004f5a:	dc18      	bgt.n	8004f8e <UART_SetConfig+0x222>
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d00d      	beq.n	8004f7c <UART_SetConfig+0x210>
 8004f60:	dc15      	bgt.n	8004f8e <UART_SetConfig+0x222>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <UART_SetConfig+0x200>
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d005      	beq.n	8004f76 <UART_SetConfig+0x20a>
 8004f6a:	e010      	b.n	8004f8e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f6c:	f7fe f87e 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004f70:	0003      	movs	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]
        break;
 8004f74:	e012      	b.n	8004f9c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f76:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <UART_SetConfig+0x2cc>)
 8004f78:	617b      	str	r3, [r7, #20]
        break;
 8004f7a:	e00f      	b.n	8004f9c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7c:	f7fd ffea 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8004f80:	0003      	movs	r3, r0
 8004f82:	617b      	str	r3, [r7, #20]
        break;
 8004f84:	e00a      	b.n	8004f9c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f86:	2380      	movs	r3, #128	@ 0x80
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	617b      	str	r3, [r7, #20]
        break;
 8004f8c:	e006      	b.n	8004f9c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f92:	231a      	movs	r3, #26
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
        break;
 8004f9a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d028      	beq.n	8004ff4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fa6:	4b25      	ldr	r3, [pc, #148]	@ (800503c <UART_SetConfig+0x2d0>)
 8004fa8:	0052      	lsls	r2, r2, #1
 8004faa:	5ad3      	ldrh	r3, [r2, r3]
 8004fac:	0019      	movs	r1, r3
 8004fae:	6978      	ldr	r0, [r7, #20]
 8004fb0:	f7fb f8a6 	bl	8000100 <__udivsi3>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	18d2      	adds	r2, r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	f7fb f89a 	bl	8000100 <__udivsi3>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d90a      	bls.n	8004fec <UART_SetConfig+0x280>
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	025b      	lsls	r3, r3, #9
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d205      	bcs.n	8004fec <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	e003      	b.n	8004ff4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004fec:	231a      	movs	r3, #26
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	226a      	movs	r2, #106	@ 0x6a
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2268      	movs	r2, #104	@ 0x68
 8005000:	2101      	movs	r1, #1
 8005002:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005010:	231a      	movs	r3, #26
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	781b      	ldrb	r3, [r3, #0]
}
 8005016:	0018      	movs	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	b008      	add	sp, #32
 800501c:	bd80      	pop	{r7, pc}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	cfff69f3 	.word	0xcfff69f3
 8005024:	ffffcfff 	.word	0xffffcfff
 8005028:	11fff4ff 	.word	0x11fff4ff
 800502c:	40013800 	.word	0x40013800
 8005030:	40021000 	.word	0x40021000
 8005034:	40004400 	.word	0x40004400
 8005038:	00f42400 	.word	0x00f42400
 800503c:	08005e48 	.word	0x08005e48

08005040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	2208      	movs	r2, #8
 800504e:	4013      	ands	r3, r2
 8005050:	d00b      	beq.n	800506a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a4a      	ldr	r2, [pc, #296]	@ (8005184 <UART_AdvFeatureConfig+0x144>)
 800505a:	4013      	ands	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	2201      	movs	r2, #1
 8005070:	4013      	ands	r3, r2
 8005072:	d00b      	beq.n	800508c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4a43      	ldr	r2, [pc, #268]	@ (8005188 <UART_AdvFeatureConfig+0x148>)
 800507c:	4013      	ands	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	2202      	movs	r2, #2
 8005092:	4013      	ands	r3, r2
 8005094:	d00b      	beq.n	80050ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a3b      	ldr	r2, [pc, #236]	@ (800518c <UART_AdvFeatureConfig+0x14c>)
 800509e:	4013      	ands	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	2204      	movs	r2, #4
 80050b4:	4013      	ands	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4a34      	ldr	r2, [pc, #208]	@ (8005190 <UART_AdvFeatureConfig+0x150>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	0019      	movs	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	2210      	movs	r2, #16
 80050d6:	4013      	ands	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005194 <UART_AdvFeatureConfig+0x154>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	2220      	movs	r2, #32
 80050f8:	4013      	ands	r3, r2
 80050fa:	d00b      	beq.n	8005114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	4a25      	ldr	r2, [pc, #148]	@ (8005198 <UART_AdvFeatureConfig+0x158>)
 8005104:	4013      	ands	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	2240      	movs	r2, #64	@ 0x40
 800511a:	4013      	ands	r3, r2
 800511c:	d01d      	beq.n	800515a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4a1d      	ldr	r2, [pc, #116]	@ (800519c <UART_AdvFeatureConfig+0x15c>)
 8005126:	4013      	ands	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800513a:	2380      	movs	r3, #128	@ 0x80
 800513c:	035b      	lsls	r3, r3, #13
 800513e:	429a      	cmp	r2, r3
 8005140:	d10b      	bne.n	800515a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a15      	ldr	r2, [pc, #84]	@ (80051a0 <UART_AdvFeatureConfig+0x160>)
 800514a:	4013      	ands	r3, r2
 800514c:	0019      	movs	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	2280      	movs	r2, #128	@ 0x80
 8005160:	4013      	ands	r3, r2
 8005162:	d00b      	beq.n	800517c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4a0e      	ldr	r2, [pc, #56]	@ (80051a4 <UART_AdvFeatureConfig+0x164>)
 800516c:	4013      	ands	r3, r2
 800516e:	0019      	movs	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }
}
 800517c:	46c0      	nop			@ (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b002      	add	sp, #8
 8005182:	bd80      	pop	{r7, pc}
 8005184:	ffff7fff 	.word	0xffff7fff
 8005188:	fffdffff 	.word	0xfffdffff
 800518c:	fffeffff 	.word	0xfffeffff
 8005190:	fffbffff 	.word	0xfffbffff
 8005194:	ffffefff 	.word	0xffffefff
 8005198:	ffffdfff 	.word	0xffffdfff
 800519c:	ffefffff 	.word	0xffefffff
 80051a0:	ff9fffff 	.word	0xff9fffff
 80051a4:	fff7ffff 	.word	0xfff7ffff

080051a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b092      	sub	sp, #72	@ 0x48
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2290      	movs	r2, #144	@ 0x90
 80051b4:	2100      	movs	r1, #0
 80051b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b8:	f7fc fba2 	bl	8001900 <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2208      	movs	r2, #8
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d12d      	bne.n	800522a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d0:	2280      	movs	r2, #128	@ 0x80
 80051d2:	0391      	lsls	r1, r2, #14
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4a47      	ldr	r2, [pc, #284]	@ (80052f4 <UART_CheckIdleState+0x14c>)
 80051d8:	9200      	str	r2, [sp, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	f000 f88e 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 80051e0:	1e03      	subs	r3, r0, #0
 80051e2:	d022      	beq.n	800522a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e4:	f3ef 8310 	mrs	r3, PRIMASK
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051ee:	2301      	movs	r3, #1
 80051f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			@ (mov r8, r8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2180      	movs	r1, #128	@ 0x80
 8005206:	438a      	bics	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	f383 8810 	msr	PRIMASK, r3
}
 8005214:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2288      	movs	r2, #136	@ 0x88
 800521a:	2120      	movs	r1, #32
 800521c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2284      	movs	r2, #132	@ 0x84
 8005222:	2100      	movs	r1, #0
 8005224:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e060      	b.n	80052ec <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2204      	movs	r2, #4
 8005232:	4013      	ands	r3, r2
 8005234:	2b04      	cmp	r3, #4
 8005236:	d146      	bne.n	80052c6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800523a:	2280      	movs	r2, #128	@ 0x80
 800523c:	03d1      	lsls	r1, r2, #15
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <UART_CheckIdleState+0x14c>)
 8005242:	9200      	str	r2, [sp, #0]
 8005244:	2200      	movs	r2, #0
 8005246:	f000 f859 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d03b      	beq.n	80052c6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524e:	f3ef 8310 	mrs	r3, PRIMASK
 8005252:	60fb      	str	r3, [r7, #12]
  return(result);
 8005254:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
 8005258:	2301      	movs	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f383 8810 	msr	PRIMASK, r3
}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4922      	ldr	r1, [pc, #136]	@ (80052f8 <UART_CheckIdleState+0x150>)
 8005270:	400a      	ands	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005276:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	61bb      	str	r3, [r7, #24]
  return(result);
 8005286:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005288:	633b      	str	r3, [r7, #48]	@ 0x30
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			@ (mov r8, r8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2101      	movs	r1, #1
 80052a2:	438a      	bics	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	228c      	movs	r2, #140	@ 0x8c
 80052b6:	2120      	movs	r1, #32
 80052b8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2284      	movs	r2, #132	@ 0x84
 80052be:	2100      	movs	r1, #0
 80052c0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e012      	b.n	80052ec <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2288      	movs	r2, #136	@ 0x88
 80052ca:	2120      	movs	r1, #32
 80052cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	228c      	movs	r2, #140	@ 0x8c
 80052d2:	2120      	movs	r1, #32
 80052d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2284      	movs	r2, #132	@ 0x84
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	0018      	movs	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b010      	add	sp, #64	@ 0x40
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	01ffffff 	.word	0x01ffffff
 80052f8:	fffffedf 	.word	0xfffffedf

080052fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530c:	e051      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3301      	adds	r3, #1
 8005312:	d04e      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fc faf4 	bl	8001900 <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e051      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2204      	movs	r2, #4
 8005336:	4013      	ands	r3, r2
 8005338:	d03b      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b80      	cmp	r3, #128	@ 0x80
 800533e:	d038      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b40      	cmp	r3, #64	@ 0x40
 8005344:	d035      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	2208      	movs	r2, #8
 800534e:	4013      	ands	r3, r2
 8005350:	2b08      	cmp	r3, #8
 8005352:	d111      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2208      	movs	r2, #8
 800535a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 f922 	bl	80055a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2290      	movs	r2, #144	@ 0x90
 8005368:	2108      	movs	r1, #8
 800536a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2284      	movs	r2, #132	@ 0x84
 8005370:	2100      	movs	r1, #0
 8005372:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e02c      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	2380      	movs	r3, #128	@ 0x80
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	401a      	ands	r2, r3
 8005384:	2380      	movs	r3, #128	@ 0x80
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	429a      	cmp	r2, r3
 800538a:	d112      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2280      	movs	r2, #128	@ 0x80
 8005392:	0112      	lsls	r2, r2, #4
 8005394:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	0018      	movs	r0, r3
 800539a:	f000 f905 	bl	80055a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2290      	movs	r2, #144	@ 0x90
 80053a2:	2120      	movs	r1, #32
 80053a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2284      	movs	r2, #132	@ 0x84
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e00f      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	425a      	negs	r2, r3
 80053c2:	4153      	adcs	r3, r2
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	001a      	movs	r2, r3
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d09e      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b090      	sub	sp, #64	@ 0x40
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	1dbb      	adds	r3, r7, #6
 80053e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1dba      	adds	r2, r7, #6
 80053f4:	215c      	movs	r1, #92	@ 0x5c
 80053f6:	8812      	ldrh	r2, [r2, #0]
 80053f8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2290      	movs	r2, #144	@ 0x90
 80053fe:	2100      	movs	r1, #0
 8005400:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	228c      	movs	r2, #140	@ 0x8c
 8005406:	2122      	movs	r1, #34	@ 0x22
 8005408:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2280      	movs	r2, #128	@ 0x80
 800540e:	589b      	ldr	r3, [r3, r2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02d      	beq.n	8005470 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2280      	movs	r2, #128	@ 0x80
 8005418:	589b      	ldr	r3, [r3, r2]
 800541a:	4a40      	ldr	r2, [pc, #256]	@ (800551c <UART_Start_Receive_DMA+0x140>)
 800541c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2280      	movs	r2, #128	@ 0x80
 8005422:	589b      	ldr	r3, [r3, r2]
 8005424:	4a3e      	ldr	r2, [pc, #248]	@ (8005520 <UART_Start_Receive_DMA+0x144>)
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2280      	movs	r2, #128	@ 0x80
 800542c:	589b      	ldr	r3, [r3, r2]
 800542e:	4a3d      	ldr	r2, [pc, #244]	@ (8005524 <UART_Start_Receive_DMA+0x148>)
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2280      	movs	r2, #128	@ 0x80
 8005436:	589b      	ldr	r3, [r3, r2]
 8005438:	2200      	movs	r2, #0
 800543a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2280      	movs	r2, #128	@ 0x80
 8005440:	5898      	ldr	r0, [r3, r2]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3324      	adds	r3, #36	@ 0x24
 8005448:	0019      	movs	r1, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	001a      	movs	r2, r3
 8005450:	1dbb      	adds	r3, r7, #6
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	f7fc fbc6 	bl	8001be4 <HAL_DMA_Start_IT>
 8005458:	1e03      	subs	r3, r0, #0
 800545a:	d009      	beq.n	8005470 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2290      	movs	r2, #144	@ 0x90
 8005460:	2110      	movs	r1, #16
 8005462:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	228c      	movs	r2, #140	@ 0x8c
 8005468:	2120      	movs	r1, #32
 800546a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e050      	b.n	8005512 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d019      	beq.n	80054ac <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005478:	f3ef 8310 	mrs	r3, PRIMASK
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005482:	2301      	movs	r3, #1
 8005484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005488:	f383 8810 	msr	PRIMASK, r3
}
 800548c:	46c0      	nop			@ (mov r8, r8)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2180      	movs	r1, #128	@ 0x80
 800549a:	0049      	lsls	r1, r1, #1
 800549c:	430a      	orrs	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ac:	f3ef 8310 	mrs	r3, PRIMASK
 80054b0:	613b      	str	r3, [r7, #16]
  return(result);
 80054b2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054b6:	2301      	movs	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f383 8810 	msr	PRIMASK, r3
}
 80054c0:	46c0      	nop			@ (mov r8, r8)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2101      	movs	r1, #1
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f383 8810 	msr	PRIMASK, r3
}
 80054dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054de:	f3ef 8310 	mrs	r3, PRIMASK
 80054e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80054e4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e8:	2301      	movs	r3, #1
 80054ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	f383 8810 	msr	PRIMASK, r3
}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2140      	movs	r1, #64	@ 0x40
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	f383 8810 	msr	PRIMASK, r3
}
 800550e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	0018      	movs	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	b010      	add	sp, #64	@ 0x40
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	0800572d 	.word	0x0800572d
 8005520:	0800585d 	.word	0x0800585d
 8005524:	0800589f 	.word	0x0800589f

08005528 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	@ 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005530:	f3ef 8310 	mrs	r3, PRIMASK
 8005534:	60bb      	str	r3, [r7, #8]
  return(result);
 8005536:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
 800553a:	2301      	movs	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			@ (mov r8, r8)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	21c0      	movs	r1, #192	@ 0xc0
 8005552:	438a      	bics	r2, r1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f383 8810 	msr	PRIMASK, r3
}
 8005560:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005562:	f3ef 8310 	mrs	r3, PRIMASK
 8005566:	617b      	str	r3, [r7, #20]
  return(result);
 8005568:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	2301      	movs	r3, #1
 800556e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4908      	ldr	r1, [pc, #32]	@ (80055a4 <UART_EndTxTransfer+0x7c>)
 8005584:	400a      	ands	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f383 8810 	msr	PRIMASK, r3
}
 8005592:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2288      	movs	r2, #136	@ 0x88
 8005598:	2120      	movs	r1, #32
 800559a:	5099      	str	r1, [r3, r2]
}
 800559c:	46c0      	nop			@ (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b00a      	add	sp, #40	@ 0x28
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	ff7fffff 	.word	0xff7fffff

080055a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	@ 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b0:	f3ef 8310 	mrs	r3, PRIMASK
 80055b4:	617b      	str	r3, [r7, #20]
  return(result);
 80055b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ba:	2301      	movs	r3, #1
 80055bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f383 8810 	msr	PRIMASK, r3
}
 80055c4:	46c0      	nop			@ (mov r8, r8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4926      	ldr	r1, [pc, #152]	@ (800566c <UART_EndRxTransfer+0xc4>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f383 8810 	msr	PRIMASK, r3
}
 80055e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	623b      	str	r3, [r7, #32]
  return(result);
 80055e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ec:	2301      	movs	r3, #1
 80055ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	491b      	ldr	r1, [pc, #108]	@ (8005670 <UART_EndRxTransfer+0xc8>)
 8005604:	400a      	ands	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d118      	bne.n	800564e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561c:	f3ef 8310 	mrs	r3, PRIMASK
 8005620:	60bb      	str	r3, [r7, #8]
  return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005626:	2301      	movs	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			@ (mov r8, r8)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2110      	movs	r1, #16
 800563e:	438a      	bics	r2, r1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f383 8810 	msr	PRIMASK, r3
}
 800564c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	228c      	movs	r2, #140	@ 0x8c
 8005652:	2120      	movs	r1, #32
 8005654:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	46bd      	mov	sp, r7
 8005666:	b00e      	add	sp, #56	@ 0x38
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	fffffedf 	.word	0xfffffedf
 8005670:	effffffe 	.word	0xeffffffe

08005674 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	@ 0x30
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2220      	movs	r2, #32
 800568a:	4013      	ands	r3, r2
 800568c:	d135      	bne.n	80056fa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	2256      	movs	r2, #86	@ 0x56
 8005692:	2100      	movs	r1, #0
 8005694:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005696:	f3ef 8310 	mrs	r3, PRIMASK
 800569a:	60fb      	str	r3, [r7, #12]
  return(result);
 800569c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800569e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a0:	2301      	movs	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f383 8810 	msr	PRIMASK, r3
}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	438a      	bics	r2, r1
 80056ba:	609a      	str	r2, [r3, #8]
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f383 8810 	msr	PRIMASK, r3
}
 80056c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c8:	f3ef 8310 	mrs	r3, PRIMASK
 80056cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80056ce:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d2:	2301      	movs	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2140      	movs	r1, #64	@ 0x40
 80056ea:	430a      	orrs	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	e004      	b.n	8005704 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fb fa3d 	bl	8000b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	46c0      	nop			@ (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b00c      	add	sp, #48	@ 0x30
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	0018      	movs	r0, r3
 800571e:	f7ff fb05 	bl	8004d2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b004      	add	sp, #16
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b094      	sub	sp, #80	@ 0x50
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2220      	movs	r2, #32
 8005742:	4013      	ands	r3, r2
 8005744:	d16f      	bne.n	8005826 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005748:	225e      	movs	r2, #94	@ 0x5e
 800574a:	2100      	movs	r1, #0
 800574c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574e:	f3ef 8310 	mrs	r3, PRIMASK
 8005752:	61bb      	str	r3, [r7, #24]
  return(result);
 8005754:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005758:	2301      	movs	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f383 8810 	msr	PRIMASK, r3
}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	493a      	ldr	r1, [pc, #232]	@ (8005858 <UART_DMAReceiveCplt+0x12c>)
 8005770:	400a      	ands	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005776:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005780:	f3ef 8310 	mrs	r3, PRIMASK
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005788:	647b      	str	r3, [r7, #68]	@ 0x44
 800578a:	2301      	movs	r3, #1
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	f383 8810 	msr	PRIMASK, r3
}
 8005794:	46c0      	nop			@ (mov r8, r8)
 8005796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2101      	movs	r1, #1
 80057a2:	438a      	bics	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b2:	f3ef 8310 	mrs	r3, PRIMASK
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80057bc:	2301      	movs	r3, #1
 80057be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c2:	f383 8810 	msr	PRIMASK, r3
}
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2140      	movs	r1, #64	@ 0x40
 80057d4:	438a      	bics	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057da:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057de:	f383 8810 	msr	PRIMASK, r3
}
 80057e2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e6:	228c      	movs	r2, #140	@ 0x8c
 80057e8:	2120      	movs	r1, #32
 80057ea:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d118      	bne.n	8005826 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f4:	f3ef 8310 	mrs	r3, PRIMASK
 80057f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80057fa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057fe:	2301      	movs	r3, #1
 8005800:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f383 8810 	msr	PRIMASK, r3
}
 8005808:	46c0      	nop			@ (mov r8, r8)
 800580a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2110      	movs	r1, #16
 8005816:	438a      	bics	r2, r1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f383 8810 	msr	PRIMASK, r3
}
 8005824:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005828:	2200      	movs	r2, #0
 800582a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800582e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d108      	bne.n	8005846 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005836:	225c      	movs	r2, #92	@ 0x5c
 8005838:	5a9a      	ldrh	r2, [r3, r2]
 800583a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f7fb f9d8 	bl	8000bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005844:	e003      	b.n	800584e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005848:	0018      	movs	r0, r3
 800584a:	f7ff fa77 	bl	8004d3c <HAL_UART_RxCpltCallback>
}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	46bd      	mov	sp, r7
 8005852:	b014      	add	sp, #80	@ 0x50
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	fffffeff 	.word	0xfffffeff

0800585c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10a      	bne.n	800588e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	225c      	movs	r2, #92	@ 0x5c
 800587c:	5a9b      	ldrh	r3, [r3, r2]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	0011      	movs	r1, r2
 8005886:	0018      	movs	r0, r3
 8005888:	f7fb f9b4 	bl	8000bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800588c:	e003      	b.n	8005896 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff fa5b 	bl	8004d4c <HAL_UART_RxHalfCpltCallback>
}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	46bd      	mov	sp, r7
 800589a:	b004      	add	sp, #16
 800589c:	bd80      	pop	{r7, pc}

0800589e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2288      	movs	r2, #136	@ 0x88
 80058b0:	589b      	ldr	r3, [r3, r2]
 80058b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	228c      	movs	r2, #140	@ 0x8c
 80058b8:	589b      	ldr	r3, [r3, r2]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2280      	movs	r2, #128	@ 0x80
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b80      	cmp	r3, #128	@ 0x80
 80058c8:	d10a      	bne.n	80058e0 <UART_DMAError+0x42>
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b21      	cmp	r3, #33	@ 0x21
 80058ce:	d107      	bne.n	80058e0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2256      	movs	r2, #86	@ 0x56
 80058d4:	2100      	movs	r1, #0
 80058d6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	0018      	movs	r0, r3
 80058dc:	f7ff fe24 	bl	8005528 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2240      	movs	r2, #64	@ 0x40
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b40      	cmp	r3, #64	@ 0x40
 80058ec:	d10a      	bne.n	8005904 <UART_DMAError+0x66>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b22      	cmp	r3, #34	@ 0x22
 80058f2:	d107      	bne.n	8005904 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	225e      	movs	r2, #94	@ 0x5e
 80058f8:	2100      	movs	r1, #0
 80058fa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff fe52 	bl	80055a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2290      	movs	r2, #144	@ 0x90
 8005908:	589b      	ldr	r3, [r3, r2]
 800590a:	2210      	movs	r2, #16
 800590c:	431a      	orrs	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2190      	movs	r1, #144	@ 0x90
 8005912:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	0018      	movs	r0, r3
 8005918:	f7ff fa20 	bl	8004d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800591c:	46c0      	nop			@ (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	b006      	add	sp, #24
 8005922:	bd80      	pop	{r7, pc}

08005924 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	225e      	movs	r2, #94	@ 0x5e
 8005936:	2100      	movs	r1, #0
 8005938:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2256      	movs	r2, #86	@ 0x56
 800593e:	2100      	movs	r1, #0
 8005940:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	0018      	movs	r0, r3
 8005946:	f7ff fa09 	bl	8004d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594a:	46c0      	nop			@ (mov r8, r8)
 800594c:	46bd      	mov	sp, r7
 800594e:	b004      	add	sp, #16
 8005950:	bd80      	pop	{r7, pc}

08005952 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595a:	f3ef 8310 	mrs	r3, PRIMASK
 800595e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005960:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	2301      	movs	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2140      	movs	r1, #64	@ 0x40
 800597c:	438a      	bics	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2288      	movs	r2, #136	@ 0x88
 8005990:	2120      	movs	r1, #32
 8005992:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	0018      	movs	r0, r3
 800599e:	f7fb f8ed 	bl	8000b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b006      	add	sp, #24
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b002      	add	sp, #8
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b002      	add	sp, #8
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80059d2:	46c0      	nop			@ (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b002      	add	sp, #8
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2284      	movs	r2, #132	@ 0x84
 80059e8:	5c9b      	ldrb	r3, [r3, r2]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e027      	b.n	8005a42 <HAL_UARTEx_DisableFifoMode+0x66>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2284      	movs	r2, #132	@ 0x84
 80059f6:	2101      	movs	r1, #1
 80059f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2288      	movs	r2, #136	@ 0x88
 80059fe:	2124      	movs	r1, #36	@ 0x24
 8005a00:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2101      	movs	r1, #1
 8005a16:	438a      	bics	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005a4c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2288      	movs	r2, #136	@ 0x88
 8005a34:	2120      	movs	r1, #32
 8005a36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2284      	movs	r2, #132	@ 0x84
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b004      	add	sp, #16
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	dfffffff 	.word	0xdfffffff

08005a50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2284      	movs	r2, #132	@ 0x84
 8005a5e:	5c9b      	ldrb	r3, [r3, r2]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e02e      	b.n	8005ac6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2284      	movs	r2, #132	@ 0x84
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2288      	movs	r2, #136	@ 0x88
 8005a74:	2124      	movs	r1, #36	@ 0x24
 8005a76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	438a      	bics	r2, r1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	08d9      	lsrs	r1, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 f8bc 	bl	8005c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2288      	movs	r2, #136	@ 0x88
 8005ab8:	2120      	movs	r1, #32
 8005aba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2284      	movs	r2, #132	@ 0x84
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	b004      	add	sp, #16
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2284      	movs	r2, #132	@ 0x84
 8005ade:	5c9b      	ldrb	r3, [r3, r2]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e02f      	b.n	8005b48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2284      	movs	r2, #132	@ 0x84
 8005aec:	2101      	movs	r1, #1
 8005aee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2288      	movs	r2, #136	@ 0x88
 8005af4:	2124      	movs	r1, #36	@ 0x24
 8005af6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	4a0e      	ldr	r2, [pc, #56]	@ (8005b50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f000 f87b 	bl	8005c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2288      	movs	r2, #136	@ 0x88
 8005b3a:	2120      	movs	r1, #32
 8005b3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2284      	movs	r2, #132	@ 0x84
 8005b42:	2100      	movs	r1, #0
 8005b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	0018      	movs	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b004      	add	sp, #16
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	f1ffffff 	.word	0xf1ffffff

08005b54 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b54:	b5b0      	push	{r4, r5, r7, lr}
 8005b56:	b08a      	sub	sp, #40	@ 0x28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	1dbb      	adds	r3, r7, #6
 8005b60:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	228c      	movs	r2, #140	@ 0x8c
 8005b66:	589b      	ldr	r3, [r3, r2]
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d156      	bne.n	8005c1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005b72:	1dbb      	adds	r3, r7, #6
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e04e      	b.n	8005c1c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	2380      	movs	r3, #128	@ 0x80
 8005b84:	015b      	lsls	r3, r3, #5
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d109      	bne.n	8005b9e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2201      	movs	r2, #1
 8005b96:	4013      	ands	r3, r2
 8005b98:	d001      	beq.n	8005b9e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e03e      	b.n	8005c1c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005baa:	2527      	movs	r5, #39	@ 0x27
 8005bac:	197c      	adds	r4, r7, r5
 8005bae:	1dbb      	adds	r3, r7, #6
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff fc10 	bl	80053dc <UART_Start_Receive_DMA>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005bc0:	197b      	adds	r3, r7, r5
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d124      	bne.n	8005c12 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d11c      	bne.n	8005c0a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8005bde:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	2301      	movs	r3, #1
 8005be4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f383 8810 	msr	PRIMASK, r3
}
 8005bec:	46c0      	nop			@ (mov r8, r8)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2110      	movs	r1, #16
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f383 8810 	msr	PRIMASK, r3
}
 8005c08:	e003      	b.n	8005c12 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c0a:	2327      	movs	r3, #39	@ 0x27
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005c12:	2327      	movs	r3, #39	@ 0x27
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	e000      	b.n	8005c1c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005c1a:	2302      	movs	r3, #2
  }
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b00a      	add	sp, #40	@ 0x28
 8005c22:	bdb0      	pop	{r4, r5, r7, pc}

08005c24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d108      	bne.n	8005c46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	226a      	movs	r2, #106	@ 0x6a
 8005c38:	2101      	movs	r1, #1
 8005c3a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2268      	movs	r2, #104	@ 0x68
 8005c40:	2101      	movs	r1, #1
 8005c42:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c44:	e043      	b.n	8005cce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c46:	260f      	movs	r6, #15
 8005c48:	19bb      	adds	r3, r7, r6
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c4e:	200e      	movs	r0, #14
 8005c50:	183b      	adds	r3, r7, r0
 8005c52:	2208      	movs	r2, #8
 8005c54:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	0e5b      	lsrs	r3, r3, #25
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	240d      	movs	r4, #13
 8005c62:	193b      	adds	r3, r7, r4
 8005c64:	2107      	movs	r1, #7
 8005c66:	400a      	ands	r2, r1
 8005c68:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	0f5b      	lsrs	r3, r3, #29
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	250c      	movs	r5, #12
 8005c76:	197b      	adds	r3, r7, r5
 8005c78:	2107      	movs	r1, #7
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	197a      	adds	r2, r7, r5
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	4914      	ldr	r1, [pc, #80]	@ (8005cd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c88:	5c8a      	ldrb	r2, [r1, r2]
 8005c8a:	435a      	muls	r2, r3
 8005c8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c8e:	197b      	adds	r3, r7, r5
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	4a12      	ldr	r2, [pc, #72]	@ (8005cdc <UARTEx_SetNbDataToProcess+0xb8>)
 8005c94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c96:	0019      	movs	r1, r3
 8005c98:	f7fa fabc 	bl	8000214 <__divsi3>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	b299      	uxth	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	226a      	movs	r2, #106	@ 0x6a
 8005ca4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ca6:	19bb      	adds	r3, r7, r6
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	193a      	adds	r2, r7, r4
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	490a      	ldr	r1, [pc, #40]	@ (8005cd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cb0:	5c8a      	ldrb	r2, [r1, r2]
 8005cb2:	435a      	muls	r2, r3
 8005cb4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cb6:	193b      	adds	r3, r7, r4
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <UARTEx_SetNbDataToProcess+0xb8>)
 8005cbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	f7fa faa8 	bl	8000214 <__divsi3>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	b299      	uxth	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2268      	movs	r2, #104	@ 0x68
 8005ccc:	5299      	strh	r1, [r3, r2]
}
 8005cce:	46c0      	nop			@ (mov r8, r8)
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b005      	add	sp, #20
 8005cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
 8005cd8:	08005e60 	.word	0x08005e60
 8005cdc:	08005e68 	.word	0x08005e68

08005ce0 <memset>:
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	1882      	adds	r2, r0, r2
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d100      	bne.n	8005cea <memset+0xa>
 8005ce8:	4770      	bx	lr
 8005cea:	7019      	strb	r1, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	e7f9      	b.n	8005ce4 <memset+0x4>

08005cf0 <__libc_init_array>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	4c0c      	ldr	r4, [pc, #48]	@ (8005d28 <__libc_init_array+0x38>)
 8005cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8005d2c <__libc_init_array+0x3c>)
 8005cf8:	1b64      	subs	r4, r4, r5
 8005cfa:	10a4      	asrs	r4, r4, #2
 8005cfc:	42a6      	cmp	r6, r4
 8005cfe:	d109      	bne.n	8005d14 <__libc_init_array+0x24>
 8005d00:	2600      	movs	r6, #0
 8005d02:	f000 f819 	bl	8005d38 <_init>
 8005d06:	4c0a      	ldr	r4, [pc, #40]	@ (8005d30 <__libc_init_array+0x40>)
 8005d08:	4d0a      	ldr	r5, [pc, #40]	@ (8005d34 <__libc_init_array+0x44>)
 8005d0a:	1b64      	subs	r4, r4, r5
 8005d0c:	10a4      	asrs	r4, r4, #2
 8005d0e:	42a6      	cmp	r6, r4
 8005d10:	d105      	bne.n	8005d1e <__libc_init_array+0x2e>
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	00b3      	lsls	r3, r6, #2
 8005d16:	58eb      	ldr	r3, [r5, r3]
 8005d18:	4798      	blx	r3
 8005d1a:	3601      	adds	r6, #1
 8005d1c:	e7ee      	b.n	8005cfc <__libc_init_array+0xc>
 8005d1e:	00b3      	lsls	r3, r6, #2
 8005d20:	58eb      	ldr	r3, [r5, r3]
 8005d22:	4798      	blx	r3
 8005d24:	3601      	adds	r6, #1
 8005d26:	e7f2      	b.n	8005d0e <__libc_init_array+0x1e>
 8005d28:	08005e70 	.word	0x08005e70
 8005d2c:	08005e70 	.word	0x08005e70
 8005d30:	08005e74 	.word	0x08005e74
 8005d34:	08005e70 	.word	0x08005e70

08005d38 <_init>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3e:	bc08      	pop	{r3}
 8005d40:	469e      	mov	lr, r3
 8005d42:	4770      	bx	lr

08005d44 <_fini>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr
