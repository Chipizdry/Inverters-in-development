
PWM_Controller_Full_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c18  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007cd0  08007cd0  00008cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df0  08007df0  00009010  2**0
                  CONTENTS
  4 .ARM          00000000  08007df0  08007df0  00009010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007df0  08007df0  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df0  08007df0  00008df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007df4  08007df4  00008df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007df8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000010  08007e08  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08007e08  00009560  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e29  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003361  00000000  00000000  00021e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  000251c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001071  00000000  00000000  000266a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f77  00000000  00000000  00027711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ada6  00000000  00000000  0003f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f94  00000000  00000000  0005a42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f13c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c14  00000000  00000000  000f1408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000f601c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007cb8 	.word	0x08007cb8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08007cb8 	.word	0x08007cb8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
 80003f8:	001a      	movs	r2, r3
 80003fa:	1cbb      	adds	r3, r7, #2
 80003fc:	801a      	strh	r2, [r3, #0]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	781a      	ldrb	r2, [r3, #0]
 8000402:	4b5c      	ldr	r3, [pc, #368]	@ (8000574 <Registers_handler+0x188>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	429a      	cmp	r2, r3
 8000408:	d032      	beq.n	8000470 <Registers_handler+0x84>
 800040a:	2316      	movs	r3, #22
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	2200      	movs	r2, #0
 8000410:	801a      	strh	r2, [r3, #0]
 8000412:	e00b      	b.n	800042c <Registers_handler+0x40>
 8000414:	2116      	movs	r1, #22
 8000416:	187b      	adds	r3, r7, r1
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	18d3      	adds	r3, r2, r3
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	187b      	adds	r3, r7, r1
 8000424:	881a      	ldrh	r2, [r3, #0]
 8000426:	187b      	adds	r3, r7, r1
 8000428:	3201      	adds	r2, #1
 800042a:	801a      	strh	r2, [r3, #0]
 800042c:	2316      	movs	r3, #22
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	2b3f      	cmp	r3, #63	@ 0x3f
 8000434:	d9ee      	bls.n	8000414 <Registers_handler+0x28>
	     RX_2;
 8000436:	2380      	movs	r3, #128	@ 0x80
 8000438:	01db      	lsls	r3, r3, #7
 800043a:	484f      	ldr	r0, [pc, #316]	@ (8000578 <Registers_handler+0x18c>)
 800043c:	2200      	movs	r2, #0
 800043e:	0019      	movs	r1, r3
 8000440:	f003 fcde 	bl	8003e00 <HAL_GPIO_WritePin>

	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000444:	68f9      	ldr	r1, [r7, #12]
 8000446:	4b4d      	ldr	r3, [pc, #308]	@ (800057c <Registers_handler+0x190>)
 8000448:	2240      	movs	r2, #64	@ 0x40
 800044a:	0018      	movs	r0, r3
 800044c:	f007 fb42 	bl	8007ad4 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);LED_1_OFF;
 8000450:	4b4b      	ldr	r3, [pc, #300]	@ (8000580 <Registers_handler+0x194>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	4b4a      	ldr	r3, [pc, #296]	@ (8000580 <Registers_handler+0x194>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2104      	movs	r1, #4
 800045c:	438a      	bics	r2, r1
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	2380      	movs	r3, #128	@ 0x80
 8000462:	021b      	lsls	r3, r3, #8
 8000464:	4844      	ldr	r0, [pc, #272]	@ (8000578 <Registers_handler+0x18c>)
 8000466:	2200      	movs	r2, #0
 8000468:	0019      	movs	r1, r3
 800046a:	f003 fcc9 	bl	8003e00 <HAL_GPIO_WritePin>
		return;}
 800046e:	e07e      	b.n	800056e <Registers_handler+0x182>


	if (Size < 4) {
 8000470:	1cbb      	adds	r3, r7, #2
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d806      	bhi.n	8000486 <Registers_handler+0x9a>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 8000478:	4b40      	ldr	r3, [pc, #256]	@ (800057c <Registers_handler+0x190>)
 800047a:	2202      	movs	r2, #2
 800047c:	2103      	movs	r1, #3
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fe80 	bl	8001184 <sendError>

	        return;
 8000484:	e073      	b.n	800056e <Registers_handler+0x182>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 8000486:	1cbb      	adds	r3, r7, #2
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b21a      	sxth	r2, r3
 8000494:	1cbb      	adds	r3, r7, #2
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	3b02      	subs	r3, #2
 800049a:	68f9      	ldr	r1, [r7, #12]
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	021b      	lsls	r3, r3, #8
 80004a2:	b21b      	sxth	r3, r3
 80004a4:	4313      	orrs	r3, r2
 80004a6:	b21a      	sxth	r2, r3
 80004a8:	2514      	movs	r5, #20
 80004aa:	197b      	adds	r3, r7, r5
 80004ac:	801a      	strh	r2, [r3, #0]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80004ae:	1cbb      	adds	r3, r7, #2
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	3b02      	subs	r3, #2
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	2612      	movs	r6, #18
 80004ba:	19bc      	adds	r4, r7, r6
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fdb5 	bl	8001030 <calcCRC16ModBus>
 80004c6:	0003      	movs	r3, r0
 80004c8:	8023      	strh	r3, [r4, #0]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 80004ca:	197a      	adds	r2, r7, r5
 80004cc:	19bb      	adds	r3, r7, r6
 80004ce:	8812      	ldrh	r2, [r2, #0]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d006      	beq.n	80004e4 <Registers_handler+0xf8>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 80004d6:	4b29      	ldr	r3, [pc, #164]	@ (800057c <Registers_handler+0x190>)
 80004d8:	2203      	movs	r2, #3
 80004da:	2103      	movs	r1, #3
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fe51 	bl	8001184 <sendError>

	        return;
 80004e2:	e044      	b.n	800056e <Registers_handler+0x182>
	    }


                       uint8_t opCode = rxFrame[1];
 80004e4:	2111      	movs	r1, #17
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	7852      	ldrb	r2, [r2, #1]
 80004ec:	701a      	strb	r2, [r3, #0]

				  			  switch (opCode) {
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b10      	cmp	r3, #16
 80004f4:	d832      	bhi.n	800055c <Registers_handler+0x170>
 80004f6:	009a      	lsls	r2, r3, #2
 80004f8:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <Registers_handler+0x198>)
 80004fa:	18d3      	adds	r3, r2, r3
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	469f      	mov	pc, r3
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 8000500:	4b21      	ldr	r3, [pc, #132]	@ (8000588 <Registers_handler+0x19c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	001a      	movs	r2, r3
 8000506:	4b1d      	ldr	r3, [pc, #116]	@ (800057c <Registers_handler+0x190>)
 8000508:	0011      	movs	r1, r2
 800050a:	0018      	movs	r0, r3
 800050c:	f000 ff7e 	bl	800140c <handleReadCoils>
				  			   break;
 8000510:	e02d      	b.n	800056e <Registers_handler+0x182>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 8000512:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <Registers_handler+0x1a0>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	001a      	movs	r2, r3
 8000518:	4b18      	ldr	r3, [pc, #96]	@ (800057c <Registers_handler+0x190>)
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fff1 	bl	8001504 <handleReadDiscreteInputs>
							   break;
 8000522:	e024      	b.n	800056e <Registers_handler+0x182>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <Registers_handler+0x190>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fe54 	bl	80011d8 <handleReadHoldingRegs>
				  			   break;
 8000530:	e01d      	b.n	800056e <Registers_handler+0x182>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <Registers_handler+0x190>)
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fed9 	bl	80012f0 <handleReadInputRegs>

				  			   break;
 800053e:	e016      	b.n	800056e <Registers_handler+0x182>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <Registers_handler+0x190>)
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f001 f85a 	bl	8001600 <handleWriteMulyipleHandlingRegister>

                               break;
 800054c:	e00f      	b.n	800056e <Registers_handler+0x182>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <Registers_handler+0x190>)
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f853 	bl	8001600 <handleWriteMulyipleHandlingRegister>

                               break;
 800055a:	e008      	b.n	800056e <Registers_handler+0x182>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 800055c:	2311      	movs	r3, #17
 800055e:	18fb      	adds	r3, r7, r3
 8000560:	7819      	ldrb	r1, [r3, #0]
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <Registers_handler+0x190>)
 8000564:	2201      	movs	r2, #1
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fe0c 	bl	8001184 <sendError>
				  			   break;
 800056c:	46c0      	nop			@ (mov r8, r8)
				  			     }



                          }
 800056e:	46bd      	mov	sp, r7
 8000570:	b007      	add	sp, #28
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	50000800 	.word	0x50000800
 800057c:	200001c8 	.word	0x200001c8
 8000580:	2000025c 	.word	0x2000025c
 8000584:	08007cd0 	.word	0x08007cd0
 8000588:	20000559 	.word	0x20000559
 800058c:	20000558 	.word	0x20000558

08000590 <Check_USART1_Timeout>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

 void Check_USART1_Timeout(void)
 {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8000594:	f001 fc54 	bl	8001e40 <HAL_GetTick>
 8000598:	0002      	movs	r2, r0
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <Check_USART1_Timeout+0x40>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1ad2      	subs	r2, r2, r3
 80005a0:	23fa      	movs	r3, #250	@ 0xfa
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d30f      	bcc.n	80005c8 <Check_USART1_Timeout+0x38>
     {

         Reset_USART1();
 80005a8:	f000 f816 	bl	80005d8 <Reset_USART1>
         RX_2;
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	01db      	lsls	r3, r3, #7
 80005b0:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <Check_USART1_Timeout+0x44>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	0019      	movs	r1, r3
 80005b6:	f003 fc23 	bl	8003e00 <HAL_GPIO_WritePin>
         LED_1_OFF;
 80005ba:	2380      	movs	r3, #128	@ 0x80
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <Check_USART1_Timeout+0x44>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	0019      	movs	r1, r3
 80005c4:	f003 fc1c 	bl	8003e00 <HAL_GPIO_WritePin>
     }
 }
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	20000314 	.word	0x20000314
 80005d4:	50000800 	.word	0x50000800

080005d8 <Reset_USART1>:


 void Reset_USART1(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
     // Остановите передачу и прием по DMA, если активны
     HAL_UART_DMAStop(&huart1);
 80005dc:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <Reset_USART1+0xc8>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f005 ffaa 	bl	8006538 <HAL_UART_DMAStop>

     // Прерывайте любые активные DMA транзакции
     if (hdma_usart1_rx.Instance != NULL) {
 80005e4:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <Reset_USART1+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <Reset_USART1+0x1c>
         HAL_DMA_Abort(&hdma_usart1_rx);
 80005ec:	4b2d      	ldr	r3, [pc, #180]	@ (80006a4 <Reset_USART1+0xcc>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 ffba 	bl	8003568 <HAL_DMA_Abort>
     }
     if (hdma_usart1_tx.Instance != NULL) {
 80005f4:	4b2c      	ldr	r3, [pc, #176]	@ (80006a8 <Reset_USART1+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <Reset_USART1+0x2c>
         HAL_DMA_Abort(&hdma_usart1_tx);
 80005fc:	4b2a      	ldr	r3, [pc, #168]	@ (80006a8 <Reset_USART1+0xd0>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f002 ffb2 	bl	8003568 <HAL_DMA_Abort>
     }

     // Отключите все прерывания UART
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <Reset_USART1+0xc8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <Reset_USART1+0xc8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2110      	movs	r1, #16
 8000610:	438a      	bics	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <Reset_USART1+0xc8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <Reset_USART1+0xc8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2140      	movs	r1, #64	@ 0x40
 8000620:	438a      	bics	r2, r1
 8000622:	601a      	str	r2, [r3, #0]
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <Reset_USART1+0xc8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <Reset_USART1+0xc8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2120      	movs	r1, #32
 8000630:	438a      	bics	r2, r1
 8000632:	601a      	str	r2, [r3, #0]

     // Сбросите периферийный модуль USART1
     __HAL_RCC_USART1_FORCE_RESET();
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <Reset_USART1+0xd4>)
 8000636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <Reset_USART1+0xd4>)
 800063a:	2180      	movs	r1, #128	@ 0x80
 800063c:	01c9      	lsls	r1, r1, #7
 800063e:	430a      	orrs	r2, r1
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
     HAL_Delay(1); // Дождитесь завершения сброса
 8000642:	2001      	movs	r0, #1
 8000644:	f001 fc06 	bl	8001e54 <HAL_Delay>
     __HAL_RCC_USART1_RELEASE_RESET();
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <Reset_USART1+0xd4>)
 800064a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <Reset_USART1+0xd4>)
 800064e:	4918      	ldr	r1, [pc, #96]	@ (80006b0 <Reset_USART1+0xd8>)
 8000650:	400a      	ands	r2, r1
 8000652:	631a      	str	r2, [r3, #48]	@ 0x30

     // Обнуляем настройки UART (в случае, если библиотека HAL требует)
     HAL_UART_DeInit(&huart1);
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <Reset_USART1+0xc8>)
 8000656:	0018      	movs	r0, r3
 8000658:	f005 fe9c 	bl	8006394 <HAL_UART_DeInit>

     // �?нициализируем UART заново
     MX_USART1_UART_Init();
 800065c:	f000 fb36 	bl	8000ccc <MX_USART1_UART_Init>

     // �?нициализируем DMA заново (если DMA используется)
     MX_DMA_Init();
 8000660:	f000 fb82 	bl	8000d68 <MX_DMA_Init>

     // Настройка UART для приема данных с использованием DMA
     HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000664:	4913      	ldr	r1, [pc, #76]	@ (80006b4 <Reset_USART1+0xdc>)
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <Reset_USART1+0xc8>)
 8000668:	2240      	movs	r2, #64	@ 0x40
 800066a:	0018      	movs	r0, r3
 800066c:	f007 fa32 	bl	8007ad4 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <Reset_USART1+0xcc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <Reset_USART1+0xcc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2104      	movs	r1, #4
 800067c:	438a      	bics	r2, r1
 800067e:	601a      	str	r2, [r3, #0]


      RX_2;
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	01db      	lsls	r3, r3, #7
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <Reset_USART1+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	0019      	movs	r1, r3
 800068a:	f003 fbb9 	bl	8003e00 <HAL_GPIO_WritePin>

     // Сброс параметров и таймеров, связанных с UART
     lastActivityTime = HAL_GetTick();
 800068e:	f001 fbd7 	bl	8001e40 <HAL_GetTick>
 8000692:	0002      	movs	r2, r0
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <Reset_USART1+0xe4>)
 8000696:	601a      	str	r2, [r3, #0]
 }
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	200001c8 	.word	0x200001c8
 80006a4:	2000025c 	.word	0x2000025c
 80006a8:	200002b8 	.word	0x200002b8
 80006ac:	40021000 	.word	0x40021000
 80006b0:	ffffbfff 	.word	0xffffbfff
 80006b4:	20000318 	.word	0x20000318
 80006b8:	50000800 	.word	0x50000800
 80006bc:	20000314 	.word	0x20000314

080006c0 <ADC_Read>:

 uint16_t ADC_Read(uint32_t channel) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b087      	sub	sp, #28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 80006c8:	2408      	movs	r4, #8
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	230c      	movs	r3, #12
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f007 fac4 	bl	8007c60 <memset>


     // Настраиваем новый канал
     sConfig.Channel = channel;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
     sConfig.Rank = ADC_REGULAR_RANK_1;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
     sConfig.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2205      	movs	r2, #5
 80006e8:	609a      	str	r2, [r3, #8]
     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006ea:	193a      	adds	r2, r7, r4
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <ADC_Read+0x88>)
 80006ee:	0011      	movs	r1, r2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 f80f 	bl	8002714 <HAL_ADC_ConfigChannel>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <ADC_Read+0x3e>
         return 0;  // Возврат в случае ошибки
 80006fa:	2300      	movs	r3, #0
 80006fc:	e020      	b.n	8000740 <ADC_Read+0x80>
     }

     // Запуск одиночного преобразования
     if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <ADC_Read+0x88>)
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fedd 	bl	80024c0 <HAL_ADC_Start>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <ADC_Read+0x4e>
         return 0;  // Ошибка запуска
 800070a:	2300      	movs	r3, #0
 800070c:	e018      	b.n	8000740 <ADC_Read+0x80>
     }

     // Ожидание завершения преобразования
     if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 800070e:	2301      	movs	r3, #1
 8000710:	425a      	negs	r2, r3
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <ADC_Read+0x88>)
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f001 ff5c 	bl	80025d4 <HAL_ADC_PollForConversion>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <ADC_Read+0x64>
         return 0;  // Ошибка преобразования
 8000720:	2300      	movs	r3, #0
 8000722:	e00d      	b.n	8000740 <ADC_Read+0x80>
     }

     // Считываем значение
     uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <ADC_Read+0x88>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 ffe8 	bl	80026fc <HAL_ADC_GetValue>
 800072c:	0002      	movs	r2, r0
 800072e:	2416      	movs	r4, #22
 8000730:	193b      	adds	r3, r7, r4
 8000732:	801a      	strh	r2, [r3, #0]

     // Останавливаем ADC после завершения
     HAL_ADC_Stop(&hadc1);
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <ADC_Read+0x88>)
 8000736:	0018      	movs	r0, r3
 8000738:	f001 ff10 	bl	800255c <HAL_ADC_Stop>

     return value;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	881b      	ldrh	r3, [r3, #0]
 }
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b007      	add	sp, #28
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	2000002c 	.word	0x2000002c

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f001 fafa 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f842 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 fb2c 	bl	8000db4 <MX_GPIO_Init>
  MX_DMA_Init();
 800075c:	f000 fb04 	bl	8000d68 <MX_DMA_Init>
  MX_I2C2_Init();
 8000760:	f000 f902 	bl	8000968 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000764:	f000 f940 	bl	80009e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000768:	f000 fa0a 	bl	8000b80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800076c:	f000 faae 	bl	8000ccc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000770:	f000 f88e 	bl	8000890 <MX_ADC1_Init>
  MX_TIM14_Init();
 8000774:	f000 fa86 	bl	8000c84 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <main+0x74>)
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fb60 	bl	8002e40 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <main+0x78>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f004 fc11 	bl	8004fac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <main+0x7c>)
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f004 fc0c 	bl	8004fac <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000794:	490d      	ldr	r1, [pc, #52]	@ (80007cc <main+0x80>)
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <main+0x84>)
 8000798:	2240      	movs	r2, #64	@ 0x40
 800079a:	0018      	movs	r0, r3
 800079c:	f007 f99a 	bl	8007ad4 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <main+0x88>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <main+0x88>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2104      	movs	r1, #4
 80007ac:	438a      	bics	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]
   HAL_TIM_Base_Start_IT(&htim14);
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <main+0x8c>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f004 fb1e 	bl	8004df4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Check_USART1_Timeout();
 80007b8:	f7ff feea 	bl	8000590 <Check_USART1_Timeout>
 80007bc:	e7fc      	b.n	80007b8 <main+0x6c>
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	2000002c 	.word	0x2000002c
 80007c4:	200000e4 	.word	0x200000e4
 80007c8:	20000130 	.word	0x20000130
 80007cc:	20000318 	.word	0x20000318
 80007d0:	200001c8 	.word	0x200001c8
 80007d4:	2000025c 	.word	0x2000025c
 80007d8:	2000017c 	.word	0x2000017c

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b093      	sub	sp, #76	@ 0x4c
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	2414      	movs	r4, #20
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2334      	movs	r3, #52	@ 0x34
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f007 fa37 	bl	8007c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2310      	movs	r3, #16
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f007 fa30 	bl	8007c60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2380      	movs	r3, #128	@ 0x80
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	0018      	movs	r0, r3
 8000806:	f003 fc71 	bl	80040ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	0052      	lsls	r2, r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000818:	0021      	movs	r1, r4
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2240      	movs	r2, #64	@ 0x40
 8000824:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2202      	movs	r2, #2
 800082a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2202      	movs	r2, #2
 8000830:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2208      	movs	r2, #8
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	0292      	lsls	r2, r2, #10
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	@ 0x80
 800084a:	0592      	lsls	r2, r2, #22
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	187b      	adds	r3, r7, r1
 8000850:	0018      	movs	r0, r3
 8000852:	f003 fc97 	bl	8004184 <HAL_RCC_OscConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800085a:	f000 fbe3 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2202      	movs	r2, #2
 8000868:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2102      	movs	r1, #2
 800087a:	0018      	movs	r0, r3
 800087c:	f003 ff92 	bl	80047a4 <HAL_RCC_ClockConfig>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000884:	f000 fbce 	bl	8001024 <Error_Handler>
  }
}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b013      	add	sp, #76	@ 0x4c
 800088e:	bd90      	pop	{r4, r7, pc}

08000890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	0018      	movs	r0, r3
 800089a:	230c      	movs	r3, #12
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f007 f9de 	bl	8007c60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a4:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000960 <MX_ADC1_Init+0xd0>)
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008aa:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	0612      	lsls	r2, r2, #24
 80008b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b8:	4b28      	ldr	r3, [pc, #160]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008be:	4b27      	ldr	r3, [pc, #156]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c4:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ca:	4b24      	ldr	r3, [pc, #144]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d6:	4b21      	ldr	r3, [pc, #132]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008de:	2201      	movs	r2, #1
 80008e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008e4:	2220      	movs	r2, #32
 80008e6:	2100      	movs	r1, #0
 80008e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_ADC1_Init+0xcc>)
 80008f8:	222c      	movs	r2, #44	@ 0x2c
 80008fa:	2100      	movs	r1, #0
 80008fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_ADC1_Init+0xcc>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_ADC1_Init+0xcc>)
 8000906:	2205      	movs	r2, #5
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_ADC1_Init+0xcc>)
 800090c:	2205      	movs	r2, #5
 800090e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_ADC1_Init+0xcc>)
 8000912:	223c      	movs	r2, #60	@ 0x3c
 8000914:	2100      	movs	r1, #0
 8000916:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000918:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_ADC1_Init+0xcc>)
 800091a:	2200      	movs	r2, #0
 800091c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_ADC1_Init+0xcc>)
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fc25 	bl	8002170 <HAL_ADC_Init>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800092a:	f000 fb7b 	bl	8001024 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4a0c      	ldr	r2, [pc, #48]	@ (8000964 <MX_ADC1_Init+0xd4>)
 8000932:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000940:	1d3a      	adds	r2, r7, #4
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_ADC1_Init+0xcc>)
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f001 fee4 	bl	8002714 <HAL_ADC_ConfigChannel>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000950:	f000 fb68 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000002c 	.word	0x2000002c
 8000960:	40012400 	.word	0x40012400
 8000964:	1c000080 	.word	0x1c000080

08000968 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_I2C2_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <MX_I2C2_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_I2C2_Init+0x74>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <MX_I2C2_Init+0x7c>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_I2C2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_I2C2_Init+0x74>)
 8000980:	2201      	movs	r2, #1
 8000982:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_I2C2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_I2C2_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_I2C2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_I2C2_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_I2C2_Init+0x74>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f003 fa63 	bl	8003e70 <HAL_I2C_Init>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009ae:	f000 fb39 	bl	8001024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <MX_I2C2_Init+0x74>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f003 fb00 	bl	8003fbc <HAL_I2CEx_ConfigAnalogFilter>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c0:	f000 fb30 	bl	8001024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <MX_I2C2_Init+0x74>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f003 fb43 	bl	8004054 <HAL_I2CEx_ConfigDigitalFilter>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 fb27 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000090 	.word	0x20000090
 80009e0:	40005800 	.word	0x40005800
 80009e4:	10b17db5 	.word	0x10b17db5

080009e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09c      	sub	sp, #112	@ 0x70
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	2360      	movs	r3, #96	@ 0x60
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	0018      	movs	r0, r3
 80009f4:	2310      	movs	r3, #16
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f007 f931 	bl	8007c60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	2354      	movs	r3, #84	@ 0x54
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	230c      	movs	r3, #12
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f007 f929 	bl	8007c60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0e:	2338      	movs	r3, #56	@ 0x38
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	0018      	movs	r0, r3
 8000a14:	231c      	movs	r3, #28
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f007 f921 	bl	8007c60 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	2334      	movs	r3, #52	@ 0x34
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f007 f91a 	bl	8007c60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2c:	4b52      	ldr	r3, [pc, #328]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a2e:	4a53      	ldr	r2, [pc, #332]	@ (8000b7c <MX_TIM1_Init+0x194>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a32:	4b51      	ldr	r3, [pc, #324]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b4f      	ldr	r3, [pc, #316]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 700;
 8000a3e:	4b4e      	ldr	r3, [pc, #312]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a40:	22af      	movs	r2, #175	@ 0xaf
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b4c      	ldr	r3, [pc, #304]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b49      	ldr	r3, [pc, #292]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a58:	4b47      	ldr	r3, [pc, #284]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f004 f972 	bl	8004d44 <HAL_TIM_Base_Init>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000a64:	f000 fade 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	2160      	movs	r1, #96	@ 0x60
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2280      	movs	r2, #128	@ 0x80
 8000a6e:	0152      	lsls	r2, r2, #5
 8000a70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a72:	187a      	adds	r2, r7, r1
 8000a74:	4b40      	ldr	r3, [pc, #256]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f004 fd77 	bl	800556c <HAL_TIM_ConfigClockSource>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a82:	f000 facf 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a86:	4b3c      	ldr	r3, [pc, #240]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f004 fa2f 	bl	8004eec <HAL_TIM_PWM_Init>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000a92:	f000 fac7 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2154      	movs	r1, #84	@ 0x54
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aaa:	187a      	adds	r2, r7, r1
 8000aac:	4b32      	ldr	r3, [pc, #200]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f005 fb03 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000aba:	f000 fab3 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000abe:	2138      	movs	r1, #56	@ 0x38
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2260      	movs	r2, #96	@ 0x60
 8000ac4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 350;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	22af      	movs	r2, #175	@ 0xaf
 8000aca:	0052      	lsls	r2, r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2204      	movs	r2, #4
 8000ade:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aec:	1879      	adds	r1, r7, r1
 8000aee:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f004 fc3a 	bl	800536c <HAL_TIM_PWM_ConfigChannel>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000afc:	f000 fa92 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	0192      	lsls	r2, r2, #6
 8000b24:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	0492      	lsls	r2, r2, #18
 8000b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b52:	1d3a      	adds	r2, r7, #4
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f005 fb11 	bl	8006180 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000b62:	f000 fa5f 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <MX_TIM1_Init+0x190>)
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 ff13 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b01c      	add	sp, #112	@ 0x70
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	200000e4 	.word	0x200000e4
 8000b7c:	40012c00 	.word	0x40012c00

08000b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	@ 0x40
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b86:	232c      	movs	r3, #44	@ 0x2c
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2314      	movs	r3, #20
 8000b8e:	001a      	movs	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	f007 f865 	bl	8007c60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b96:	2320      	movs	r3, #32
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f007 f85d 	bl	8007c60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	231c      	movs	r3, #28
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f007 f856 	bl	8007c60 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb4:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bb6:	4a32      	ldr	r2, [pc, #200]	@ (8000c80 <MX_TIM3_Init+0x100>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bba:	4b30      	ldr	r3, [pc, #192]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 700;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bc8:	22af      	movs	r2, #175	@ 0xaf
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f004 f8b1 	bl	8004d44 <HAL_TIM_Base_Init>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f000 fa1d 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f004 f97d 	bl	8004eec <HAL_TIM_PWM_Init>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000bf6:	f000 fa15 	bl	8001024 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000bfa:	212c      	movs	r1, #44	@ 0x2c
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000c08:	187a      	adds	r2, r7, r1
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f004 fd82 	bl	8005718 <HAL_TIM_SlaveConfigSynchro>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c18:	f000 fa04 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c2a:	187a      	adds	r2, r7, r1
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f005 fa43 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000c3a:	f000 f9f3 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2260      	movs	r2, #96	@ 0x60
 8000c42:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 350;
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	22af      	movs	r2, #175	@ 0xaf
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2204      	movs	r2, #4
 8000c56:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c58:	1d39      	adds	r1, r7, #4
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f004 fb84 	bl	800536c <HAL_TIM_PWM_ConfigChannel>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c68:	f000 f9dc 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <MX_TIM3_Init+0xfc>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 fe90 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b010      	add	sp, #64	@ 0x40
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000130 	.word	0x20000130
 8000c80:	40000400 	.word	0x40000400

08000c84 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_TIM14_Init+0x40>)
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <MX_TIM14_Init+0x44>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <MX_TIM14_Init+0x40>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <MX_TIM14_Init+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_TIM14_Init+0x40>)
 8000c9c:	22fa      	movs	r2, #250	@ 0xfa
 8000c9e:	00d2      	lsls	r2, r2, #3
 8000ca0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <MX_TIM14_Init+0x40>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_TIM14_Init+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <MX_TIM14_Init+0x40>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 f847 	bl	8004d44 <HAL_TIM_Base_Init>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000cba:	f000 f9b3 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000017c 	.word	0x2000017c
 8000cc8:	40002000 	.word	0x40002000

08000ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000cd2:	4a24      	ldr	r2, [pc, #144]	@ (8000d64 <MX_USART1_UART_Init+0x98>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000cd8:	2296      	movs	r2, #150	@ 0x96
 8000cda:	0192      	lsls	r2, r2, #6
 8000cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f005 fae6 	bl	80062e8 <HAL_UART_Init>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d20:	f000 f980 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f006 fe51 	bl	80079d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d32:	f000 f977 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f006 fe88 	bl	8007a50 <HAL_UARTEx_SetRxFifoThreshold>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d44:	f000 f96e 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f006 fe06 	bl	800795c <HAL_UARTEx_DisableFifoMode>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d54:	f000 f966 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	200001c8 	.word	0x200001c8
 8000d64:	40013800 	.word	0x40013800

08000d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <MX_DMA_Init+0x48>)
 8000d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_DMA_Init+0x48>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <MX_DMA_Init+0x48>)
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2009      	movs	r0, #9
 8000d8c:	f002 fa22 	bl	80031d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d90:	2009      	movs	r0, #9
 8000d92:	f002 fa34 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f002 fa1a 	bl	80031d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f002 fa2c 	bl	80031fe <HAL_NVIC_EnableIRQ>

}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	240c      	movs	r4, #12
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f006 ff4b 	bl	8007c60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b37      	ldr	r3, [pc, #220]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dce:	4b36      	ldr	r3, [pc, #216]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dd6:	4b34      	ldr	r3, [pc, #208]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dda:	2202      	movs	r2, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de6:	4b30      	ldr	r3, [pc, #192]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000de8:	2104      	movs	r1, #4
 8000dea:	430a      	orrs	r2, r1
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000df2:	2204      	movs	r2, #4
 8000df4:	4013      	ands	r3, r2
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e06:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <MX_GPIO_Init+0xf4>)
 8000e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000e12:	23c0      	movs	r3, #192	@ 0xc0
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	4825      	ldr	r0, [pc, #148]	@ (8000eac <MX_GPIO_Init+0xf8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	f002 fff0 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin, GPIO_PIN_RESET);
 8000e20:	23a0      	movs	r3, #160	@ 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	2200      	movs	r2, #0
 8000e26:	211c      	movs	r1, #28
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 ffe9 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECT_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin|LED_1_Pin;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	22c0      	movs	r2, #192	@ 0xc0
 8000e32:	0212      	lsls	r2, r2, #8
 8000e34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	2201      	movs	r2, #1
 8000e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <MX_GPIO_Init+0xf8>)
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	0010      	movs	r0, r2
 8000e50:	f002 fda2 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_UI_Pin INT_EXT_Pin */
  GPIO_InitStruct.Pin = INT_UI_Pin|INT_EXT_Pin;
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	2203      	movs	r2, #3
 8000e58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2288      	movs	r2, #136	@ 0x88
 8000e5e:	0352      	lsls	r2, r2, #13
 8000e60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	193a      	adds	r2, r7, r4
 8000e6a:	23a0      	movs	r3, #160	@ 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 fd91 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_Pin OUT_2_Pin OUT_3_Pin */
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin;
 8000e76:	0021      	movs	r1, r4
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	221c      	movs	r2, #28
 8000e7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2201      	movs	r2, #1
 8000e82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	187a      	adds	r2, r7, r1
 8000e92:	23a0      	movs	r3, #160	@ 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f002 fd7d 	bl	8003998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b009      	add	sp, #36	@ 0x24
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	50000800 	.word	0x50000800

08000eb0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

	    LED_1_OFF;
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <HAL_UART_TxCpltCallback+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	f002 ff9d 	bl	8003e00 <HAL_GPIO_WritePin>
	    RX_2;
 8000ec6:	2380      	movs	r3, #128	@ 0x80
 8000ec8:	01db      	lsls	r3, r3, #7
 8000eca:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <HAL_UART_TxCpltCallback+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0019      	movs	r1, r3
 8000ed0:	f002 ff96 	bl	8003e00 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8000ed4:	f000 ffb4 	bl	8001e40 <HAL_GetTick>
 8000ed8:	0002      	movs	r2, r0
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <HAL_UART_TxCpltCallback+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 8000ede:	490f      	ldr	r1, [pc, #60]	@ (8000f1c <HAL_UART_TxCpltCallback+0x6c>)
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <HAL_UART_TxCpltCallback+0x70>)
 8000ee2:	2240      	movs	r2, #64	@ 0x40
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f006 fdf5 	bl	8007ad4 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_UART_TxCpltCallback+0x70>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_UART_TxCpltCallback+0x70>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_UART_TxCpltCallback+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <HAL_UART_TxCpltCallback+0x74>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2104      	movs	r1, #4
 8000f06:	438a      	bics	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	50000800 	.word	0x50000800
 8000f18:	20000314 	.word	0x20000314
 8000f1c:	20000318 	.word	0x20000318
 8000f20:	200001c8 	.word	0x200001c8
 8000f24:	2000025c 	.word	0x2000025c

08000f28 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	000a      	movs	r2, r1
 8000f32:	1cbb      	adds	r3, r7, #2
 8000f34:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <HAL_UARTEx_RxEventCallback+0x70>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d126      	bne.n	8000f8e <HAL_UARTEx_RxEventCallback+0x66>
	{

        LED_1_ON;
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	4815      	ldr	r0, [pc, #84]	@ (8000f9c <HAL_UARTEx_RxEventCallback+0x74>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	0019      	movs	r1, r3
 8000f4a:	f002 ff59 	bl	8003e00 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim14);
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_UARTEx_RxEventCallback+0x78>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f003 ff9d 	bl	8004e90 <HAL_TIM_Base_Stop_IT>
		lastActivityTime = HAL_GetTick();
 8000f56:	f000 ff73 	bl	8001e40 <HAL_GetTick>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000f5e:	601a      	str	r2, [r3, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_UARTEx_RxEventCallback+0x84>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 faf8 	bl	8003568 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 8000f78:	1cbb      	adds	r3, r7, #2
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <HAL_UARTEx_RxEventCallback+0x88>)
 8000f7e:	490d      	ldr	r1, [pc, #52]	@ (8000fb4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000f80:	480d      	ldr	r0, [pc, #52]	@ (8000fb8 <HAL_UARTEx_RxEventCallback+0x90>)
 8000f82:	f7ff fa33 	bl	80003ec <Registers_handler>
	    HAL_TIM_Base_Start_IT(&htim14);
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_UARTEx_RxEventCallback+0x78>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f003 ff33 	bl	8004df4 <HAL_TIM_Base_Start_IT>
	}
}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	50000800 	.word	0x50000800
 8000fa0:	2000017c 	.word	0x2000017c
 8000fa4:	20000314 	.word	0x20000314
 8000fa8:	200001c8 	.word	0x200001c8
 8000fac:	2000025c 	.word	0x2000025c
 8000fb0:	200004d8 	.word	0x200004d8
 8000fb4:	20000458 	.word	0x20000458
 8000fb8:	20000318 	.word	0x20000318

08000fbc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM14)  // Проверяем, от какого таймера пришло прерывание
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11c      	bne.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x4c>
    {

    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000fce:	2380      	movs	r3, #128	@ 0x80
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	0010      	movs	r0, r2
 8000fd8:	f002 ff2f 	bl	8003e3a <HAL_GPIO_TogglePin>

    	data_reg[0]=0xFF;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fde:	22ff      	movs	r2, #255	@ 0xff
 8000fe0:	801a      	strh	r2, [r3, #0]
    	data_reg[1]=0xAA;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fe4:	22aa      	movs	r2, #170	@ 0xaa
 8000fe6:	805a      	strh	r2, [r3, #2]
    	data_reg[2] = ADC_Read(ADC_CHANNEL_5); // Преобразование для канала 5
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fb68 	bl	80006c0 <ADC_Read>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ff6:	809a      	strh	r2, [r3, #4]
    	data_reg[3] = ADC_Read(ADC_CHANNEL_7); // Преобразование для канала 7
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fb60 	bl	80006c0 <ADC_Read>
 8001000:	0003      	movs	r3, r0
 8001002:	001a      	movs	r2, r3
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001006:	80da      	strh	r2, [r3, #6]


    }
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40002000 	.word	0x40002000
 8001014:	50000800 	.word	0x50000800
 8001018:	20000458 	.word	0x20000458
 800101c:	14000020 	.word	0x14000020
 8001020:	1c000080 	.word	0x1c000080

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	000a      	movs	r2, r1
 800103a:	1cfb      	adds	r3, r7, #3
 800103c:	701a      	strb	r2, [r3, #0]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 800103e:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <calcCRC16ModBus+0xac>)
 8001040:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8001042:	2313      	movs	r3, #19
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e02d      	b.n	80010a8 <calcCRC16ModBus+0x78>
		temp = temp ^ buffer[i];
 800104c:	2313      	movs	r3, #19
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	001a      	movs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	4053      	eors	r3, r2
 800105e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001060:	2312      	movs	r3, #18
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e013      	b.n	8001092 <calcCRC16ModBus+0x62>
			flag = temp & 0x0001;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2201      	movs	r2, #1
 800106e:	4013      	ands	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	617b      	str	r3, [r7, #20]
			if (flag)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <calcCRC16ModBus+0x56>
				temp ^= 0xA001;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <calcCRC16ModBus+0xb0>)
 8001082:	4053      	eors	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001086:	2112      	movs	r1, #18
 8001088:	187b      	adds	r3, r7, r1
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	187b      	adds	r3, r7, r1
 800108e:	3201      	adds	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	2312      	movs	r3, #18
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b08      	cmp	r3, #8
 800109a:	d9e6      	bls.n	800106a <calcCRC16ModBus+0x3a>
	for (unsigned char i = 0; i < u8length; i++) {
 800109c:	2113      	movs	r1, #19
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	3201      	adds	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	2313      	movs	r3, #19
 80010aa:	18fa      	adds	r2, r7, r3
 80010ac:	1cfb      	adds	r3, r7, #3
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3ca      	bcc.n	800104c <calcCRC16ModBus+0x1c>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	b29b      	uxth	r3, r3

}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b006      	add	sp, #24
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	0000ffff 	.word	0x0000ffff
 80010e0:	0000a001 	.word	0x0000a001

080010e4 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calcCRC16ModBus(frame, len);
 80010f2:	2516      	movs	r5, #22
 80010f4:	197c      	adds	r4, r7, r5
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff ff96 	bl	8001030 <calcCRC16ModBus>
 8001104:	0003      	movs	r3, r0
 8001106:	8023      	strh	r3, [r4, #0]
   // frame[len] = crc & 0xFF;       // CRC LOW
   // frame[len+1] = (crc >> 8) & 0xFF;  // CRC HIGH


    frame[len] =  (crc >> 8) & 0xFF;      // CRC LOW
 8001108:	0028      	movs	r0, r5
 800110a:	183b      	adds	r3, r7, r0
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b299      	uxth	r1, r3
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
    frame[len+1] = crc & 0xFF; // CRC HIGH
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	18d3      	adds	r3, r2, r3
 8001128:	183a      	adds	r2, r7, r0
 800112a:	8812      	ldrh	r2, [r2, #0]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]


    TX_2;
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	4811      	ldr	r0, [pc, #68]	@ (800117c <sendModBusRequest+0x98>)
 8001136:	2201      	movs	r2, #1
 8001138:	0019      	movs	r1, r3
 800113a:	f002 fe61 	bl	8003e00 <HAL_GPIO_WritePin>
 //   HAL_UART_Transmit_DMA(huart,  frame, len+2);
    LED_1_OFF;
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	480e      	ldr	r0, [pc, #56]	@ (800117c <sendModBusRequest+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	0019      	movs	r1, r3
 8001148:	f002 fe5a 	bl	8003e00 <HAL_GPIO_WritePin>

    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	3302      	adds	r3, #2
 8001154:	b29a      	uxth	r2, r3
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	0018      	movs	r0, r3
 800115c:	f005 f95a 	bl	8006414 <HAL_UART_Transmit_DMA>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d005      	beq.n	8001170 <sendModBusRequest+0x8c>
    	 HAL_TIM_Base_Start_IT(&htim14);
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <sendModBusRequest+0x9c>)
 8001166:	0018      	movs	r0, r3
 8001168:	f003 fe44 	bl	8004df4 <HAL_TIM_Base_Start_IT>


	        Error_Handler();
 800116c:	f7ff ff5a 	bl	8001024 <Error_Handler>
	// else{
	//	 RX_2;

	 // }

return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b006      	add	sp, #24
 8001178:	bdb0      	pop	{r4, r5, r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	50000800 	.word	0x50000800
 8001180:	2000017c 	.word	0x2000017c

08001184 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	0008      	movs	r0, r1
 800118e:	0011      	movs	r1, r2
 8001190:	1cfb      	adds	r3, r7, #3
 8001192:	1c02      	adds	r2, r0, #0
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	1cbb      	adds	r3, r7, #2
 8001198:	1c0a      	adds	r2, r1, #0
 800119a:	701a      	strb	r2, [r3, #0]
    uint8_t errorFrame[3];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <sendError+0x50>)
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	210c      	movs	r1, #12
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	701a      	strb	r2, [r3, #0]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 80011a6:	1cfb      	adds	r3, r7, #3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	4252      	negs	r2, r2
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	705a      	strb	r2, [r3, #1]
    errorFrame[2] = errorCode;      // Код ошибки
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	1cba      	adds	r2, r7, #2
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	709a      	strb	r2, [r3, #2]


    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 80011be:	1879      	adds	r1, r7, r1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff8d 	bl	80010e4 <sendModBusRequest>

}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000000 	.word	0x20000000

080011d8 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80011e2:	4b40      	ldr	r3, [pc, #256]	@ (80012e4 <handleReadHoldingRegs+0x10c>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	4b3e      	ldr	r3, [pc, #248]	@ (80012e4 <handleReadHoldingRegs+0x10c>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	2116      	movs	r1, #22
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80011fa:	4b3a      	ldr	r3, [pc, #232]	@ (80012e4 <handleReadHoldingRegs+0x10c>)
 80011fc:	791b      	ldrb	r3, [r3, #4]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <handleReadHoldingRegs+0x10c>)
 8001204:	795b      	ldrb	r3, [r3, #5]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	200a      	movs	r0, #10
 800120e:	183b      	adds	r3, r7, r0
 8001210:	801a      	strh	r2, [r3, #0]

	//startingReg=startingReg-30001;

	uint16_t endAddr = startingReg+numOfregs;
 8001212:	2308      	movs	r3, #8
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	1879      	adds	r1, r7, r1
 8001218:	183a      	adds	r2, r7, r0
 800121a:	8809      	ldrh	r1, [r1, #0]
 800121c:	8812      	ldrh	r2, [r2, #0]
 800121e:	188a      	adds	r2, r1, r2
 8001220:	801a      	strh	r2, [r3, #0]



	if((numOfregs<0)|(numOfregs >125)){
 8001222:	183b      	adds	r3, r7, r0
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	2b7d      	cmp	r3, #125	@ 0x7d
 8001228:	d906      	bls.n	8001238 <handleReadHoldingRegs+0x60>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2103      	movs	r1, #3
 800122e:	0018      	movs	r0, r3
 8001230:	f000 fa7c 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 8001234:	2300      	movs	r3, #0
 8001236:	e051      	b.n	80012dc <handleReadHoldingRegs+0x104>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001238:	2308      	movs	r3, #8
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001240:	d906      	bls.n	8001250 <handleReadHoldingRegs+0x78>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2102      	movs	r1, #2
 8001246:	0018      	movs	r0, r3
 8001248:	f000 fa70 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 800124c:	2300      	movs	r3, #0
 800124e:	e045      	b.n	80012dc <handleReadHoldingRegs+0x104>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <handleReadHoldingRegs+0x110>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <handleReadHoldingRegs+0x114>)
 8001256:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <handleReadHoldingRegs+0x10c>)
 800125a:	785a      	ldrb	r2, [r3, #1]
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <handleReadHoldingRegs+0x114>)
 800125e:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001260:	230a      	movs	r3, #10
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	18db      	adds	r3, r3, r3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <handleReadHoldingRegs+0x114>)
 800126e:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001270:	2303      	movs	r3, #3
 8001272:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e022      	b.n	80012c0 <handleReadHoldingRegs+0xe8>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 800127a:	2016      	movs	r0, #22
 800127c:	183b      	adds	r3, r7, r0
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	18d3      	adds	r3, r2, r3
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b299      	uxth	r1, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	613a      	str	r2, [r7, #16]
 8001292:	b2c9      	uxtb	r1, r1
 8001294:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <handleReadHoldingRegs+0x114>)
 8001296:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001298:	183b      	adds	r3, r7, r0
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	8819      	ldrh	r1, [r3, #0]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	613a      	str	r2, [r7, #16]
 80012aa:	b2c9      	uxtb	r1, r1
 80012ac:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <handleReadHoldingRegs+0x114>)
 80012ae:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	3201      	adds	r2, #1
 80012b8:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	230a      	movs	r3, #10
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbd6      	blt.n	800127a <handleReadHoldingRegs+0xa2>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4906      	ldr	r1, [pc, #24]	@ (80012ec <handleReadHoldingRegs+0x114>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff ff05 	bl	80010e4 <sendModBusRequest>
	return 1;
 80012da:	2301      	movs	r3, #1

}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b006      	add	sp, #24
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000318 	.word	0x20000318
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000358 	.word	0x20000358

080012f0 <handleReadInputRegs>:

modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80012fa:	4b41      	ldr	r3, [pc, #260]	@ (8001400 <handleReadInputRegs+0x110>)
 80012fc:	789b      	ldrb	r3, [r3, #2]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <handleReadInputRegs+0x110>)
 8001304:	78db      	ldrb	r3, [r3, #3]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	2016      	movs	r0, #22
 800130e:	183b      	adds	r3, r7, r0
 8001310:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001312:	4b3b      	ldr	r3, [pc, #236]	@ (8001400 <handleReadInputRegs+0x110>)
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <handleReadInputRegs+0x110>)
 800131c:	795b      	ldrb	r3, [r3, #5]
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21a      	sxth	r2, r3
 8001324:	210a      	movs	r1, #10
 8001326:	187b      	adds	r3, r7, r1
 8001328:	801a      	strh	r2, [r3, #0]

	uint16_t endAddr = startingReg+numOfregs-1;
 800132a:	183a      	adds	r2, r7, r0
 800132c:	187b      	adds	r3, r7, r1
 800132e:	8812      	ldrh	r2, [r2, #0]
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	b29a      	uxth	r2, r3
 8001336:	2308      	movs	r3, #8
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	3a01      	subs	r2, #1
 800133c:	801a      	strh	r2, [r3, #0]

	if((numOfregs<0)|(numOfregs >125)){
 800133e:	187b      	adds	r3, r7, r1
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	2b7d      	cmp	r3, #125	@ 0x7d
 8001344:	d906      	bls.n	8001354 <handleReadInputRegs+0x64>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2103      	movs	r1, #3
 800134a:	0018      	movs	r0, r3
 800134c:	f000 f9ee 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 8001350:	2300      	movs	r3, #0
 8001352:	e051      	b.n	80013f8 <handleReadInputRegs+0x108>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001354:	2308      	movs	r3, #8
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	2b3c      	cmp	r3, #60	@ 0x3c
 800135c:	d906      	bls.n	800136c <handleReadInputRegs+0x7c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2102      	movs	r1, #2
 8001362:	0018      	movs	r0, r3
 8001364:	f000 f9e2 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 8001368:	2300      	movs	r3, #0
 800136a:	e045      	b.n	80013f8 <handleReadInputRegs+0x108>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <handleReadInputRegs+0x114>)
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <handleReadInputRegs+0x118>)
 8001372:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <handleReadInputRegs+0x110>)
 8001376:	785a      	ldrb	r2, [r3, #1]
 8001378:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <handleReadInputRegs+0x118>)
 800137a:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 800137c:	230a      	movs	r3, #10
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	18db      	adds	r3, r3, r3
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <handleReadInputRegs+0x118>)
 800138a:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 800138c:	2303      	movs	r3, #3
 800138e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e022      	b.n	80013dc <handleReadInputRegs+0xec>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001396:	2016      	movs	r0, #22
 8001398:	183b      	adds	r3, r7, r0
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b299      	uxth	r1, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	613a      	str	r2, [r7, #16]
 80013ae:	b2c9      	uxtb	r1, r1
 80013b0:	4a15      	ldr	r2, [pc, #84]	@ (8001408 <handleReadInputRegs+0x118>)
 80013b2:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80013b4:	183b      	adds	r3, r7, r0
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	8819      	ldrh	r1, [r3, #0]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	613a      	str	r2, [r7, #16]
 80013c6:	b2c9      	uxtb	r1, r1
 80013c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <handleReadInputRegs+0x118>)
 80013ca:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80013cc:	183b      	adds	r3, r7, r0
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	3201      	adds	r2, #1
 80013d4:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	230a      	movs	r3, #10
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbd6      	blt.n	8001396 <handleReadInputRegs+0xa6>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4906      	ldr	r1, [pc, #24]	@ (8001408 <handleReadInputRegs+0x118>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff fe77 	bl	80010e4 <sendModBusRequest>
	return 1;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b006      	add	sp, #24
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000318 	.word	0x20000318
 8001404:	20000000 	.word	0x20000000
 8001408:	20000358 	.word	0x20000358

0800140c <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <handleReadCoils+0xec>)
 8001418:	789b      	ldrb	r3, [r3, #2]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <handleReadCoils+0xec>)
 8001420:	78db      	ldrb	r3, [r3, #3]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21a      	sxth	r2, r3
 8001428:	230e      	movs	r3, #14
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	801a      	strh	r2, [r3, #0]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 800142e:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <handleReadCoils+0xec>)
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <handleReadCoils+0xec>)
 8001438:	795b      	ldrb	r3, [r3, #5]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21a      	sxth	r2, r3
 8001440:	210c      	movs	r1, #12
 8001442:	187b      	adds	r3, r7, r1
 8001444:	801a      	strh	r2, [r3, #0]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001446:	000a      	movs	r2, r1
 8001448:	18bb      	adds	r3, r7, r2
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <handleReadCoils+0x50>
 8001450:	18bb      	adds	r3, r7, r2
 8001452:	881a      	ldrh	r2, [r3, #0]
 8001454:	23fa      	movs	r3, #250	@ 0xfa
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	429a      	cmp	r2, r3
 800145a:	d906      	bls.n	800146a <handleReadCoils+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2103      	movs	r1, #3
 8001460:	0018      	movs	r0, r3
 8001462:	f000 f963 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 8001466:	2300      	movs	r3, #0
 8001468:	e041      	b.n	80014ee <handleReadCoils+0xe2>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 800146a:	230e      	movs	r3, #14
 800146c:	18fa      	adds	r2, r7, r3
 800146e:	230c      	movs	r3, #12
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	8812      	ldrh	r2, [r2, #0]
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	18d3      	adds	r3, r2, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	210a      	movs	r1, #10
 800147c:	187b      	adds	r3, r7, r1
 800147e:	3a01      	subs	r2, #1
 8001480:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001482:	187b      	adds	r3, r7, r1
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	2bc7      	cmp	r3, #199	@ 0xc7
 8001488:	d906      	bls.n	8001498 <handleReadCoils+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2102      	movs	r1, #2
 800148e:	0018      	movs	r0, r3
 8001490:	f000 f94c 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 8001494:	2300      	movs	r3, #0
 8001496:	e02a      	b.n	80014ee <handleReadCoils+0xe2>
	}
	memset (txFrame, '\0', 256);
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	005a      	lsls	r2, r3, #1
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <handleReadCoils+0xf0>)
 800149e:	2100      	movs	r1, #0
 80014a0:	0018      	movs	r0, r3
 80014a2:	f006 fbdd 	bl	8007c60 <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <handleReadCoils+0xf4>)
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <handleReadCoils+0xf0>)
 80014ac:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <handleReadCoils+0xec>)
 80014b0:	785a      	ldrb	r2, [r3, #1]
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <handleReadCoils+0xf0>)
 80014b4:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 80014b6:	220c      	movs	r2, #12
 80014b8:	18bb      	adds	r3, r7, r2
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	18ba      	adds	r2, r7, r2
 80014c4:	8812      	ldrh	r2, [r2, #0]
 80014c6:	2107      	movs	r1, #7
 80014c8:	400a      	ands	r2, r1
 80014ca:	b292      	uxth	r2, r2
 80014cc:	1e51      	subs	r1, r2, #1
 80014ce:	418a      	sbcs	r2, r1
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	189b      	adds	r3, r3, r2
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <handleReadCoils+0xf0>)
 80014d8:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <handleReadCoils+0xf0>)
 80014dc:	789b      	ldrb	r3, [r3, #2]
 80014de:	3303      	adds	r3, #3
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4906      	ldr	r1, [pc, #24]	@ (80014fc <handleReadCoils+0xf0>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff fdfc 	bl	80010e4 <sendModBusRequest>
	return 1;
 80014ec:	2301      	movs	r3, #1

}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	20000318 	.word	0x20000318
 80014fc:	20000358 	.word	0x20000358
 8001500:	20000000 	.word	0x20000000

08001504 <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 800150e:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <handleReadDiscreteInputs+0xf0>)
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <handleReadDiscreteInputs+0xf0>)
 8001518:	78db      	ldrb	r3, [r3, #3]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21a      	sxth	r2, r3
 8001520:	230e      	movs	r3, #14
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	801a      	strh	r2, [r3, #0]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <handleReadDiscreteInputs+0xf0>)
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b31      	ldr	r3, [pc, #196]	@ (80015f4 <handleReadDiscreteInputs+0xf0>)
 8001530:	795b      	ldrb	r3, [r3, #5]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21a      	sxth	r2, r3
 8001538:	210c      	movs	r1, #12
 800153a:	187b      	adds	r3, r7, r1
 800153c:	801a      	strh	r2, [r3, #0]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 800153e:	000a      	movs	r2, r1
 8001540:	18bb      	adds	r3, r7, r2
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <handleReadDiscreteInputs+0x50>
 8001548:	18bb      	adds	r3, r7, r2
 800154a:	881a      	ldrh	r2, [r3, #0]
 800154c:	23fa      	movs	r3, #250	@ 0xfa
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	429a      	cmp	r2, r3
 8001552:	d906      	bls.n	8001562 <handleReadDiscreteInputs+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2103      	movs	r1, #3
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f8e7 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 800155e:	2300      	movs	r3, #0
 8001560:	e044      	b.n	80015ec <handleReadDiscreteInputs+0xe8>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001562:	230e      	movs	r3, #14
 8001564:	18fa      	adds	r2, r7, r3
 8001566:	230c      	movs	r3, #12
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	8812      	ldrh	r2, [r2, #0]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	18d3      	adds	r3, r2, r3
 8001570:	b29a      	uxth	r2, r3
 8001572:	210a      	movs	r1, #10
 8001574:	187b      	adds	r3, r7, r1
 8001576:	3a01      	subs	r2, #1
 8001578:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  										 // end coil can not be more than 199
 800157a:	187b      	adds	r3, r7, r1
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001580:	d906      	bls.n	8001590 <handleReadDiscreteInputs+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2102      	movs	r1, #2
 8001586:	0018      	movs	r0, r3
 8001588:	f000 f8d0 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 800158c:	2300      	movs	r3, #0
 800158e:	e02d      	b.n	80015ec <handleReadDiscreteInputs+0xe8>
	}
	memset (txFrame, '\0', 256);
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	005a      	lsls	r2, r3, #1
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <handleReadDiscreteInputs+0xf4>)
 8001596:	2100      	movs	r1, #0
 8001598:	0018      	movs	r0, r3
 800159a:	f006 fb61 	bl	8007c60 <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <handleReadDiscreteInputs+0xf8>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <handleReadDiscreteInputs+0xf4>)
 80015a4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 80015a6:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <handleReadDiscreteInputs+0xf0>)
 80015a8:	785a      	ldrb	r2, [r3, #1]
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <handleReadDiscreteInputs+0xf4>)
 80015ac:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 80015ae:	220c      	movs	r2, #12
 80015b0:	18bb      	adds	r3, r7, r2
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	08db      	lsrs	r3, r3, #3
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	18ba      	adds	r2, r7, r2
 80015bc:	8812      	ldrh	r2, [r2, #0]
 80015be:	2107      	movs	r1, #7
 80015c0:	400a      	ands	r2, r1
 80015c2:	b292      	uxth	r2, r2
 80015c4:	1e51      	subs	r1, r2, #1
 80015c6:	418a      	sbcs	r2, r1
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	189b      	adds	r3, r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <handleReadDiscreteInputs+0xf4>)
 80015d0:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <handleReadDiscreteInputs+0xf4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <handleReadDiscreteInputs+0xf4>)
 80015da:	789b      	ldrb	r3, [r3, #2]
 80015dc:	3303      	adds	r3, #3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4905      	ldr	r1, [pc, #20]	@ (80015f8 <handleReadDiscreteInputs+0xf4>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff fd7d 	bl	80010e4 <sendModBusRequest>
	return 1;
 80015ea:	2301      	movs	r3, #1

}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b004      	add	sp, #16
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000318 	.word	0x20000318
 80015f8:	20000358 	.word	0x20000358
 80015fc:	20000000 	.word	0x20000000

08001600 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 800160a:	4b45      	ldr	r3, [pc, #276]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b43      	ldr	r3, [pc, #268]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21a      	sxth	r2, r3
 800161c:	2316      	movs	r3, #22
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	801a      	strh	r2, [r3, #0]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 8001624:	791b      	ldrb	r3, [r3, #4]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 800162c:	795b      	ldrb	r3, [r3, #5]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21a      	sxth	r2, r3
 8001634:	210a      	movs	r1, #10
 8001636:	187b      	adds	r3, r7, r1
 8001638:	801a      	strh	r2, [r3, #0]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 800163a:	000a      	movs	r2, r1
 800163c:	18bb      	adds	r3, r7, r2
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <handleWriteMulyipleHandlingRegister+0x4c>
 8001644:	18bb      	adds	r3, r7, r2
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	2b7b      	cmp	r3, #123	@ 0x7b
 800164a:	d906      	bls.n	800165a <handleWriteMulyipleHandlingRegister+0x5a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2103      	movs	r1, #3
 8001650:	0018      	movs	r0, r3
 8001652:	f000 f86b 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 8001656:	2300      	movs	r3, #0
 8001658:	e05d      	b.n	8001716 <handleWriteMulyipleHandlingRegister+0x116>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 800165a:	2316      	movs	r3, #22
 800165c:	18fa      	adds	r2, r7, r3
 800165e:	230a      	movs	r3, #10
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	8812      	ldrh	r2, [r2, #0]
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	18d3      	adds	r3, r2, r3
 8001668:	b29a      	uxth	r2, r3
 800166a:	2108      	movs	r1, #8
 800166c:	187b      	adds	r3, r7, r1
 800166e:	3a01      	subs	r2, #1
 8001670:	801a      	strh	r2, [r3, #0]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001672:	187b      	adds	r3, r7, r1
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	2b3c      	cmp	r3, #60	@ 0x3c
 8001678:	d906      	bls.n	8001688 <handleWriteMulyipleHandlingRegister+0x88>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2102      	movs	r1, #2
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f854 	bl	800172c <sendModbusException>
		return MODBUS_ERROR;
 8001684:	2300      	movs	r3, #0
 8001686:	e046      	b.n	8001716 <handleWriteMulyipleHandlingRegister+0x116>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001688:	2307      	movs	r3, #7
 800168a:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e01c      	b.n	80016cc <handleWriteMulyipleHandlingRegister+0xcc>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	613a      	str	r2, [r7, #16]
 8001698:	4a21      	ldr	r2, [pc, #132]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21a      	sxth	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	6139      	str	r1, [r7, #16]
 80016a6:	491e      	ldr	r1, [pc, #120]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 80016a8:	5ccb      	ldrb	r3, [r1, r3]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b219      	sxth	r1, r3
 80016b0:	2216      	movs	r2, #22
 80016b2:	18bb      	adds	r3, r7, r2
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	18ba      	adds	r2, r7, r2
 80016b8:	1c58      	adds	r0, r3, #1
 80016ba:	8010      	strh	r0, [r2, #0]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	b28a      	uxth	r2, r1
 80016c4:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	230a      	movs	r3, #10
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbdc      	blt.n	8001692 <handleWriteMulyipleHandlingRegister+0x92>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <handleWriteMulyipleHandlingRegister+0x124>)
 80016da:	781a      	ldrb	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <handleWriteMulyipleHandlingRegister+0x128>)
 80016de:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 80016e2:	785a      	ldrb	r2, [r3, #1]
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <handleWriteMulyipleHandlingRegister+0x128>)
 80016e6:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80016e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 80016ea:	789a      	ldrb	r2, [r3, #2]
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <handleWriteMulyipleHandlingRegister+0x128>)
 80016ee:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 80016f2:	78da      	ldrb	r2, [r3, #3]
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <handleWriteMulyipleHandlingRegister+0x128>)
 80016f6:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 80016fa:	791a      	ldrb	r2, [r3, #4]
 80016fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <handleWriteMulyipleHandlingRegister+0x128>)
 80016fe:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <handleWriteMulyipleHandlingRegister+0x120>)
 8001702:	795a      	ldrb	r2, [r3, #5]
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <handleWriteMulyipleHandlingRegister+0x128>)
 8001706:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001708:	4907      	ldr	r1, [pc, #28]	@ (8001728 <handleWriteMulyipleHandlingRegister+0x128>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2206      	movs	r2, #6
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff fce8 	bl	80010e4 <sendModBusRequest>
	return 1;   // success
 8001714:	2301      	movs	r3, #1

}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b006      	add	sp, #24
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	20000318 	.word	0x20000318
 8001724:	20000000 	.word	0x20000000
 8001728:	20000358 	.word	0x20000358

0800172c <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	000a      	movs	r2, r1
 8001736:	1cfb      	adds	r3, r7, #3
 8001738:	701a      	strb	r2, [r3, #0]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <sendModbusException+0x44>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <sendModbusException+0x48>)
 8001740:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <sendModbusException+0x44>)
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	2280      	movs	r2, #128	@ 0x80
 8001748:	4252      	negs	r2, r2
 800174a:	4313      	orrs	r3, r2
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <sendModbusException+0x48>)
 8001750:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <sendModbusException+0x48>)
 8001754:	1cfa      	adds	r2, r7, #3
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	709a      	strb	r2, [r3, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 800175a:	4906      	ldr	r1, [pc, #24]	@ (8001774 <sendModbusException+0x48>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2203      	movs	r2, #3
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fcbf 	bl	80010e4 <sendModBusRequest>
 8001766:	0003      	movs	r3, r0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000318 	.word	0x20000318
 8001774:	20000358 	.word	0x20000358

08001778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <HAL_MspInit+0x54>)
 8001780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_MspInit+0x54>)
 8001784:	2101      	movs	r1, #1
 8001786:	430a      	orrs	r2, r1
 8001788:	641a      	str	r2, [r3, #64]	@ 0x40
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_MspInit+0x54>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	2201      	movs	r2, #1
 8001790:	4013      	ands	r3, r2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_MspInit+0x54>)
 8001798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_MspInit+0x54>)
 800179c:	2180      	movs	r1, #128	@ 0x80
 800179e:	0549      	lsls	r1, r1, #21
 80017a0:	430a      	orrs	r2, r1
 80017a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_MspInit+0x54>)
 80017a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	055b      	lsls	r3, r3, #21
 80017ac:	4013      	ands	r3, r2
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2004      	movs	r0, #4
 80017b8:	f001 fd0c 	bl	80031d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017bc:	2004      	movs	r0, #4
 80017be:	f001 fd1e 	bl	80031fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08b      	sub	sp, #44	@ 0x2c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	2414      	movs	r4, #20
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	0018      	movs	r0, r3
 80017de:	2314      	movs	r3, #20
 80017e0:	001a      	movs	r2, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	f006 fa3c 	bl	8007c60 <memset>
  if(hadc->Instance==ADC1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a18      	ldr	r2, [pc, #96]	@ (8001850 <HAL_ADC_MspInit+0x80>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d129      	bne.n	8001846 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017f2:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_ADC_MspInit+0x84>)
 80017f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_ADC_MspInit+0x84>)
 80017f8:	2180      	movs	r1, #128	@ 0x80
 80017fa:	0349      	lsls	r1, r1, #13
 80017fc:	430a      	orrs	r2, r1
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_ADC_MspInit+0x84>)
 8001802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	035b      	lsls	r3, r3, #13
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_ADC_MspInit+0x84>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_ADC_MspInit+0x84>)
 8001814:	2101      	movs	r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	@ 0x34
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_ADC_MspInit+0x84>)
 800181c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181e:	2201      	movs	r2, #1
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	22a0      	movs	r2, #160	@ 0xa0
 800182a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182c:	193b      	adds	r3, r7, r4
 800182e:	2203      	movs	r2, #3
 8001830:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	193b      	adds	r3, r7, r4
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	193a      	adds	r2, r7, r4
 800183a:	23a0      	movs	r3, #160	@ 0xa0
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f002 f8a9 	bl	8003998 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b00b      	add	sp, #44	@ 0x2c
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	40012400 	.word	0x40012400
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b08b      	sub	sp, #44	@ 0x2c
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	2414      	movs	r4, #20
 8001862:	193b      	adds	r3, r7, r4
 8001864:	0018      	movs	r0, r3
 8001866:	2314      	movs	r3, #20
 8001868:	001a      	movs	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	f006 f9f8 	bl	8007c60 <memset>
  if(hi2c->Instance==I2C2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <HAL_I2C_MspInit+0x90>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d131      	bne.n	80018de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <HAL_I2C_MspInit+0x94>)
 800187c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_I2C_MspInit+0x94>)
 8001880:	2101      	movs	r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	635a      	str	r2, [r3, #52]	@ 0x34
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_I2C_MspInit+0x94>)
 8001888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001892:	193b      	adds	r3, r7, r4
 8001894:	22c0      	movs	r2, #192	@ 0xc0
 8001896:	0152      	lsls	r2, r2, #5
 8001898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189a:	0021      	movs	r1, r4
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2212      	movs	r2, #18
 80018a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2206      	movs	r2, #6
 80018b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	187a      	adds	r2, r7, r1
 80018b6:	23a0      	movs	r3, #160	@ 0xa0
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f002 f86b 	bl	8003998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_I2C_MspInit+0x94>)
 80018c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_I2C_MspInit+0x94>)
 80018c8:	2180      	movs	r1, #128	@ 0x80
 80018ca:	03c9      	lsls	r1, r1, #15
 80018cc:	430a      	orrs	r2, r1
 80018ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_I2C_MspInit+0x94>)
 80018d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	03db      	lsls	r3, r3, #15
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b00b      	add	sp, #44	@ 0x2c
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	40005800 	.word	0x40005800
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a21      	ldr	r2, [pc, #132]	@ (8001984 <HAL_TIM_Base_MspInit+0x94>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10e      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 8001904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	0109      	lsls	r1, r1, #4
 800190c:	430a      	orrs	r2, r1
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001910:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 8001912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4013      	ands	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800191e:	e02c      	b.n	800197a <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_TIM_Base_MspInit+0x9c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10c      	bne.n	8001944 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 800192c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 8001930:	2102      	movs	r1, #2
 8001932:	430a      	orrs	r2, r1
 8001934:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 8001938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
}
 8001942:	e01a      	b.n	800197a <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM14)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <HAL_TIM_Base_MspInit+0xa0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d115      	bne.n	800197a <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 8001950:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001952:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 8001954:	2180      	movs	r1, #128	@ 0x80
 8001956:	0209      	lsls	r1, r1, #8
 8001958:	430a      	orrs	r2, r1
 800195a:	641a      	str	r2, [r3, #64]	@ 0x40
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_TIM_Base_MspInit+0x98>)
 800195e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2103      	movs	r1, #3
 800196e:	2013      	movs	r0, #19
 8001970:	f001 fc30 	bl	80031d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001974:	2013      	movs	r0, #19
 8001976:	f001 fc42 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b006      	add	sp, #24
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40000400 	.word	0x40000400
 8001990:	40002000 	.word	0x40002000

08001994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b08b      	sub	sp, #44	@ 0x2c
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	2414      	movs	r4, #20
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	0018      	movs	r0, r3
 80019a2:	2314      	movs	r3, #20
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f006 f95a 	bl	8007c60 <memset>
  if(htim->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a29      	ldr	r2, [pc, #164]	@ (8001a58 <HAL_TIM_MspPostInit+0xc4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d124      	bne.n	8001a00 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <HAL_TIM_MspPostInit+0xc8>)
 80019b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ba:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <HAL_TIM_MspPostInit+0xc8>)
 80019bc:	2101      	movs	r1, #1
 80019be:	430a      	orrs	r2, r1
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <HAL_TIM_MspPostInit+0xc8>)
 80019c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ce:	193b      	adds	r3, r7, r4
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	0052      	lsls	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	0021      	movs	r1, r4
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2202      	movs	r2, #2
 80019dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	2202      	movs	r2, #2
 80019e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2202      	movs	r2, #2
 80019ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	187a      	adds	r2, r7, r1
 80019f2:	23a0      	movs	r3, #160	@ 0xa0
 80019f4:	05db      	lsls	r3, r3, #23
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f001 ffcd 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019fe:	e027      	b.n	8001a50 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <HAL_TIM_MspPostInit+0xcc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d122      	bne.n	8001a50 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <HAL_TIM_MspPostInit+0xc8>)
 8001a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_TIM_MspPostInit+0xc8>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	430a      	orrs	r2, r1
 8001a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_TIM_MspPostInit+0xc8>)
 8001a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a22:	2114      	movs	r1, #20
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2240      	movs	r2, #64	@ 0x40
 8001a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2202      	movs	r2, #2
 8001a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2201      	movs	r2, #1
 8001a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	187a      	adds	r2, r7, r1
 8001a44:	23a0      	movs	r3, #160	@ 0xa0
 8001a46:	05db      	lsls	r3, r3, #23
 8001a48:	0011      	movs	r1, r2
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f001 ffa4 	bl	8003998 <HAL_GPIO_Init>
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b00b      	add	sp, #44	@ 0x2c
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40000400 	.word	0x40000400

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b091      	sub	sp, #68	@ 0x44
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	232c      	movs	r3, #44	@ 0x2c
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	0018      	movs	r0, r3
 8001a72:	2314      	movs	r3, #20
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f006 f8f2 	bl	8007c60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7c:	2414      	movs	r4, #20
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	0018      	movs	r0, r3
 8001a82:	2318      	movs	r3, #24
 8001a84:	001a      	movs	r2, r3
 8001a86:	2100      	movs	r1, #0
 8001a88:	f006 f8ea 	bl	8007c60 <memset>
  if(huart->Instance==USART1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a50      	ldr	r2, [pc, #320]	@ (8001bd4 <HAL_UART_MspInit+0x170>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d000      	beq.n	8001a98 <HAL_UART_MspInit+0x34>
 8001a96:	e099      	b.n	8001bcc <HAL_UART_MspInit+0x168>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f003 f826 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 8001aac:	1e03      	subs	r3, r0, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ab0:	f7ff fab8 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab4:	4b48      	ldr	r3, [pc, #288]	@ (8001bd8 <HAL_UART_MspInit+0x174>)
 8001ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ab8:	4b47      	ldr	r3, [pc, #284]	@ (8001bd8 <HAL_UART_MspInit+0x174>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	01c9      	lsls	r1, r1, #7
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac2:	4b45      	ldr	r3, [pc, #276]	@ (8001bd8 <HAL_UART_MspInit+0x174>)
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	01db      	lsls	r3, r3, #7
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_UART_MspInit+0x174>)
 8001ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ad4:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <HAL_UART_MspInit+0x174>)
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	@ 0x34
 8001adc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_UART_MspInit+0x174>)
 8001ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001ae8:	212c      	movs	r1, #44	@ 0x2c
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	22c0      	movs	r2, #192	@ 0xc0
 8001aee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2202      	movs	r2, #2
 8001af4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	4a34      	ldr	r2, [pc, #208]	@ (8001bdc <HAL_UART_MspInit+0x178>)
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	0010      	movs	r0, r2
 8001b10:	f001 ff42 	bl	8003998 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001b14:	4b32      	ldr	r3, [pc, #200]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b16:	4a33      	ldr	r2, [pc, #204]	@ (8001be4 <HAL_UART_MspInit+0x180>)
 8001b18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001b1a:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b1c:	2232      	movs	r2, #50	@ 0x32
 8001b1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b26:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b32:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b38:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b3e:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b44:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b46:	22c0      	movs	r2, #192	@ 0xc0
 8001b48:	0192      	lsls	r2, r2, #6
 8001b4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b4c:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f001 fb82 	bl	8003258 <HAL_DMA_Init>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001b58:	f7ff fa64 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2180      	movs	r1, #128	@ 0x80
 8001b60:	4a1f      	ldr	r2, [pc, #124]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b62:	505a      	str	r2, [r3, r1]
 8001b64:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <HAL_UART_MspInit+0x17c>)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bec <HAL_UART_MspInit+0x188>)
 8001b6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b72:	2233      	movs	r2, #51	@ 0x33
 8001b74:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b78:	2210      	movs	r2, #16
 8001b7a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b82:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b88:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f001 fb58 	bl	8003258 <HAL_DMA_Init>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8001bac:	f7ff fa3a 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001bb4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_UART_MspInit+0x184>)
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	201b      	movs	r0, #27
 8001bc2:	f001 fb07 	bl	80031d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc6:	201b      	movs	r0, #27
 8001bc8:	f001 fb19 	bl	80031fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b011      	add	sp, #68	@ 0x44
 8001bd2:	bd90      	pop	{r4, r7, pc}
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	50000400 	.word	0x50000400
 8001be0:	2000025c 	.word	0x2000025c
 8001be4:	40020008 	.word	0x40020008
 8001be8:	200002b8 	.word	0x200002b8
 8001bec:	4002001c 	.word	0x4002001c

08001bf0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c3c <HAL_UART_MspDeInit+0x4c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d118      	bne.n	8001c34 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_UART_MspDeInit+0x50>)
 8001c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_UART_MspDeInit+0x50>)
 8001c08:	490e      	ldr	r1, [pc, #56]	@ (8001c44 <HAL_UART_MspDeInit+0x54>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_UART_MspDeInit+0x58>)
 8001c10:	21c0      	movs	r1, #192	@ 0xc0
 8001c12:	0018      	movs	r0, r3
 8001c14:	f002 f824 	bl	8003c60 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2280      	movs	r2, #128	@ 0x80
 8001c1c:	589b      	ldr	r3, [r3, r2]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f001 fba4 	bl	800336c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f001 fb9f 	bl	800336c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001c2e:	201b      	movs	r0, #27
 8001c30:	f001 faf5 	bl	800321e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001c34:	46c0      	nop			@ (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	ffffbfff 	.word	0xffffbfff
 8001c48:	50000400 	.word	0x50000400

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	e7fd      	b.n	8001c50 <NMI_Handler+0x4>

08001c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c58:	46c0      	nop			@ (mov r8, r8)
 8001c5a:	e7fd      	b.n	8001c58 <HardFault_Handler+0x4>

08001c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c74:	f000 f8d2 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <DMA1_Channel1_IRQHandler+0x14>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f001 fd36 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c94:	46c0      	nop			@ (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	2000025c 	.word	0x2000025c

08001ca0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f001 fd2a 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001cac:	46c0      	nop			@ (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	200002b8 	.word	0x200002b8

08001cb8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <TIM14_IRQHandler+0x14>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f003 fa4c 	bl	800515c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	2000017c 	.word	0x2000017c

08001cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <USART1_IRQHandler+0x14>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f004 fcc2 	bl	8006660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cdc:	46c0      	nop			@ (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	200001c8 	.word	0x200001c8

08001ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf4:	480d      	ldr	r0, [pc, #52]	@ (8001d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cf6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cf8:	f7ff fff6 	bl	8001ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopForever+0xe>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopForever+0x16>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d22:	f005 ffa5 	bl	8007c70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d26:	f7fe fd11 	bl	800074c <main>

08001d2a <LoopForever>:

LoopForever:
  b LoopForever
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
  ldr   r0, =_estack
 8001d2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d38:	08007df8 	.word	0x08007df8
  ldr r2, =_sbss
 8001d3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d40:	20000560 	.word	0x20000560

08001d44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_Init+0x3c>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Init+0x3c>)
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	0049      	lsls	r1, r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d62:	2003      	movs	r0, #3
 8001d64:	f000 f810 	bl	8001d88 <HAL_InitTick>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fd00 	bl	8001778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	781b      	ldrb	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_InitTick+0x88>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d02b      	beq.n	8001df8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <HAL_InitTick+0x8c>)
 8001da2:	681c      	ldr	r4, [r3, #0]
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_InitTick+0x88>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	0019      	movs	r1, r3
 8001daa:	23fa      	movs	r3, #250	@ 0xfa
 8001dac:	0098      	lsls	r0, r3, #2
 8001dae:	f7fe f9a7 	bl	8000100 <__udivsi3>
 8001db2:	0003      	movs	r3, r0
 8001db4:	0019      	movs	r1, r3
 8001db6:	0020      	movs	r0, r4
 8001db8:	f7fe f9a2 	bl	8000100 <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f001 fa3d 	bl	800323e <HAL_SYSTICK_Config>
 8001dc4:	1e03      	subs	r3, r0, #0
 8001dc6:	d112      	bne.n	8001dee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d80a      	bhi.n	8001de4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f001 f9fc 	bl	80031d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <HAL_InitTick+0x90>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e00d      	b.n	8001e00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001de4:	230f      	movs	r3, #15
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e008      	b.n	8001e00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dee:	230f      	movs	r3, #15
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e003      	b.n	8001e00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b005      	add	sp, #20
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	20000004 	.word	0x20000004
 8001e18:	20000008 	.word	0x20000008

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	001a      	movs	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	18d2      	adds	r2, r2, r3
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	2000055c 	.word	0x2000055c

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	2000055c 	.word	0x2000055c

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	001a      	movs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	f7ff ffe0 	bl	8001e40 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	2000000c 	.word	0x2000000c

08001e9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001eac:	401a      	ands	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	601a      	str	r2, [r3, #0]
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	fe3fffff 	.word	0xfe3fffff

08001ec4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	23e0      	movs	r3, #224	@ 0xe0
 8001ed2:	045b      	lsls	r3, r3, #17
 8001ed4:	4013      	ands	r3, r2
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}

08001ede <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	2107      	movs	r1, #7
 8001ef6:	4091      	lsls	r1, r2
 8001ef8:	000a      	movs	r2, r1
 8001efa:	43d2      	mvns	r2, r2
 8001efc:	401a      	ands	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2104      	movs	r1, #4
 8001f02:	400b      	ands	r3, r1
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4099      	lsls	r1, r3
 8001f08:	000b      	movs	r3, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	2104      	movs	r1, #4
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	2107      	movs	r1, #7
 8001f2e:	4091      	lsls	r1, r2
 8001f30:	000a      	movs	r2, r1
 8001f32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2104      	movs	r1, #4
 8001f38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f3a:	40da      	lsrs	r2, r3
 8001f3c:	0013      	movs	r3, r2
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	23c0      	movs	r3, #192	@ 0xc0
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	211f      	movs	r1, #31
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	210f      	movs	r1, #15
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	4019      	ands	r1, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	201f      	movs	r0, #31
 8001f94:	4003      	ands	r3, r0
 8001f96:	4099      	lsls	r1, r3
 8001f98:	000b      	movs	r3, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b004      	add	sp, #16
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	035b      	lsls	r3, r3, #13
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	0352      	lsls	r2, r2, #13
 8001fdc:	0b52      	lsrs	r2, r2, #13
 8001fde:	43d2      	mvns	r2, r2
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	0212      	lsls	r2, r2, #8
 8002004:	43d2      	mvns	r2, r2
 8002006:	401a      	ands	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	400b      	ands	r3, r1
 8002010:	4904      	ldr	r1, [pc, #16]	@ (8002024 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002012:	400b      	ands	r3, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b004      	add	sp, #16
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	07ffff00 	.word	0x07ffff00

08002028 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a05      	ldr	r2, [pc, #20]	@ (800204c <LL_ADC_EnableInternalRegulator+0x24>)
 8002036:	4013      	ands	r3, r2
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	0552      	lsls	r2, r2, #21
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	6fffffe8 	.word	0x6fffffe8

08002050 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	055b      	lsls	r3, r3, #21
 8002060:	401a      	ands	r2, r3
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	429a      	cmp	r2, r3
 8002068:	d101      	bne.n	800206e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800206e:	2300      	movs	r3, #0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}

08002078 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <LL_ADC_Enable+0x20>)
 8002086:	4013      	ands	r3, r2
 8002088:	2201      	movs	r2, #1
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}
 8002098:	7fffffe8 	.word	0x7fffffe8

0800209c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <LL_ADC_Disable+0x20>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	2202      	movs	r2, #2
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	7fffffe8 	.word	0x7fffffe8

080020c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <LL_ADC_IsEnabled+0x18>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <LL_ADC_IsEnabled+0x1a>
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2202      	movs	r2, #2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d101      	bne.n	80020fa <LL_ADC_IsDisableOngoing+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_IsDisableOngoing+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <LL_ADC_REG_StartConversion+0x20>)
 8002112:	4013      	ands	r3, r2
 8002114:	2204      	movs	r2, #4
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	7fffffe8 	.word	0x7fffffe8

08002128 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <LL_ADC_REG_StopConversion+0x20>)
 8002136:	4013      	ands	r3, r2
 8002138:	2210      	movs	r2, #16
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}
 8002148:	7fffffe8 	.word	0x7fffffe8

0800214c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2204      	movs	r2, #4
 800215a:	4013      	ands	r3, r2
 800215c:	2b04      	cmp	r3, #4
 800215e:	d101      	bne.n	8002164 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	231f      	movs	r3, #31
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e17f      	b.n	8002496 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fb15 	bl	80017d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2254      	movs	r2, #84	@ 0x54
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7ff ff49 	bl	8002050 <LL_ADC_IsInternalRegulatorEnabled>
 80021be:	1e03      	subs	r3, r0, #0
 80021c0:	d115      	bne.n	80021ee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff ff2e 	bl	8002028 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021cc:	4bb4      	ldr	r3, [pc, #720]	@ (80024a0 <HAL_ADC_Init+0x330>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	49b4      	ldr	r1, [pc, #720]	@ (80024a4 <HAL_ADC_Init+0x334>)
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fd ff94 	bl	8000100 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ff2c 	bl	8002050 <LL_ADC_IsInternalRegulatorEnabled>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d10f      	bne.n	800221c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	2210      	movs	r2, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220c:	2201      	movs	r2, #1
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002214:	231f      	movs	r3, #31
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ff93 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 8002226:	0003      	movs	r3, r0
 8002228:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	2210      	movs	r2, #16
 8002230:	4013      	ands	r3, r2
 8002232:	d000      	beq.n	8002236 <HAL_ADC_Init+0xc6>
 8002234:	e122      	b.n	800247c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d000      	beq.n	800223e <HAL_ADC_Init+0xce>
 800223c:	e11e      	b.n	800247c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	4a99      	ldr	r2, [pc, #612]	@ (80024a8 <HAL_ADC_Init+0x338>)
 8002244:	4013      	ands	r3, r2
 8002246:	2202      	movs	r2, #2
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff ff34 	bl	80020c0 <LL_ADC_IsEnabled>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d000      	beq.n	800225e <HAL_ADC_Init+0xee>
 800225c:	e0ad      	b.n	80023ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7e1b      	ldrb	r3, [r3, #24]
 8002266:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002268:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e5b      	ldrb	r3, [r3, #25]
 800226e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002270:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7e9b      	ldrb	r3, [r3, #26]
 8002276:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002278:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_ADC_Init+0x118>
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	e000      	b.n	800228a <HAL_ADC_Init+0x11a>
 8002288:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800228a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002290:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da04      	bge.n	80022a4 <HAL_ADC_Init+0x134>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	e001      	b.n	80022a8 <HAL_ADC_Init+0x138>
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80022a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	212c      	movs	r1, #44	@ 0x2c
 80022ae:	5c5b      	ldrb	r3, [r3, r1]
 80022b0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022b2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	5c9b      	ldrb	r3, [r3, r2]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d115      	bne.n	80022f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7e9b      	ldrb	r3, [r3, #26]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	0252      	lsls	r2, r2, #9
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	e00b      	b.n	80022f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	2220      	movs	r2, #32
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	2201      	movs	r2, #1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022fc:	23e0      	movs	r3, #224	@ 0xe0
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002306:	4313      	orrs	r3, r2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a65      	ldr	r2, [pc, #404]	@ (80024ac <HAL_ADC_Init+0x33c>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0f9b      	lsrs	r3, r3, #30
 800232a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002330:	4313      	orrs	r3, r2
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	223c      	movs	r2, #60	@ 0x3c
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d111      	bne.n	8002366 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0f9b      	lsrs	r3, r3, #30
 8002348:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800234e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002354:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800235a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	2201      	movs	r2, #1
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4a50      	ldr	r2, [pc, #320]	@ (80024b0 <HAL_ADC_Init+0x340>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	430a      	orrs	r2, r1
 800237a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	23c0      	movs	r3, #192	@ 0xc0
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	429a      	cmp	r2, r3
 8002386:	d018      	beq.n	80023ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	05db      	lsls	r3, r3, #23
 8002390:	429a      	cmp	r2, r3
 8002392:	d012      	beq.n	80023ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	429a      	cmp	r2, r3
 800239e:	d00c      	beq.n	80023ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80023a0:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <HAL_ADC_Init+0x344>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a44      	ldr	r2, [pc, #272]	@ (80024b8 <HAL_ADC_Init+0x348>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	23f0      	movs	r3, #240	@ 0xf0
 80023b0:	039b      	lsls	r3, r3, #14
 80023b2:	401a      	ands	r2, r3
 80023b4:	4b3f      	ldr	r3, [pc, #252]	@ (80024b4 <HAL_ADC_Init+0x344>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	001a      	movs	r2, r3
 80023c4:	2100      	movs	r1, #0
 80023c6:	f7ff fd8a 	bl	8001ede <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	493a      	ldr	r1, [pc, #232]	@ (80024bc <HAL_ADC_Init+0x34c>)
 80023d4:	001a      	movs	r2, r3
 80023d6:	f7ff fd82 	bl	8001ede <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2110      	movs	r1, #16
 80023ee:	4249      	negs	r1, r1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80023f4:	e018      	b.n	8002428 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	039b      	lsls	r3, r3, #14
 80023fe:	429a      	cmp	r2, r3
 8002400:	d112      	bne.n	8002428 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	3b01      	subs	r3, #1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	221c      	movs	r2, #28
 8002412:	4013      	ands	r3, r2
 8002414:	2210      	movs	r2, #16
 8002416:	4252      	negs	r2, r2
 8002418:	409a      	lsls	r2, r3
 800241a:	0011      	movs	r1, r2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2100      	movs	r1, #0
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fd72 	bl	8001f18 <LL_ADC_GetSamplingTimeCommonChannels>
 8002434:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800243a:	429a      	cmp	r2, r3
 800243c:	d10b      	bne.n	8002456 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	2203      	movs	r2, #3
 800244a:	4393      	bics	r3, r2
 800244c:	2201      	movs	r2, #1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002454:	e01c      	b.n	8002490 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	2212      	movs	r2, #18
 800245c:	4393      	bics	r3, r2
 800245e:	2210      	movs	r2, #16
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246a:	2201      	movs	r2, #1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002472:	231f      	movs	r3, #31
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800247a:	e009      	b.n	8002490 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	2210      	movs	r2, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002488:	231f      	movs	r3, #31
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002490:	231f      	movs	r3, #31
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b008      	add	sp, #32
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	20000004 	.word	0x20000004
 80024a4:	00030d40 	.word	0x00030d40
 80024a8:	fffffefd 	.word	0xfffffefd
 80024ac:	ffde0201 	.word	0xffde0201
 80024b0:	1ffffc02 	.word	0x1ffffc02
 80024b4:	40012708 	.word	0x40012708
 80024b8:	ffc3ffff 	.word	0xffc3ffff
 80024bc:	07ffff04 	.word	0x07ffff04

080024c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff fe3d 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 80024d2:	1e03      	subs	r3, r0, #0
 80024d4:	d135      	bne.n	8002542 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2254      	movs	r2, #84	@ 0x54
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_Start+0x24>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e035      	b.n	8002550 <HAL_ADC_Start+0x90>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2254      	movs	r2, #84	@ 0x54
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024ec:	250f      	movs	r5, #15
 80024ee:	197c      	adds	r4, r7, r5
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fb28 	bl	8002b48 <ADC_Enable>
 80024f8:	0003      	movs	r3, r0
 80024fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024fc:	197b      	adds	r3, r7, r5
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d119      	bne.n	8002538 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <HAL_ADC_Start+0x98>)
 800250a:	4013      	ands	r3, r2
 800250c:	2280      	movs	r2, #128	@ 0x80
 800250e:	0052      	lsls	r2, r2, #1
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	221c      	movs	r2, #28
 8002522:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2254      	movs	r2, #84	@ 0x54
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff fde7 	bl	8002104 <LL_ADC_REG_StartConversion>
 8002536:	e008      	b.n	800254a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2254      	movs	r2, #84	@ 0x54
 800253c:	2100      	movs	r1, #0
 800253e:	5499      	strb	r1, [r3, r2]
 8002540:	e003      	b.n	800254a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002542:	230f      	movs	r3, #15
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800254a:	230f      	movs	r3, #15
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b004      	add	sp, #16
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	fffff0fe 	.word	0xfffff0fe

0800255c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2254      	movs	r2, #84	@ 0x54
 8002568:	5c9b      	ldrb	r3, [r3, r2]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Stop+0x16>
 800256e:	2302      	movs	r3, #2
 8002570:	e029      	b.n	80025c6 <HAL_ADC_Stop+0x6a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2254      	movs	r2, #84	@ 0x54
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800257a:	250f      	movs	r5, #15
 800257c:	197c      	adds	r4, r7, r5
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 fa9f 	bl	8002ac4 <ADC_ConversionStop>
 8002586:	0003      	movs	r3, r0
 8002588:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800258a:	197b      	adds	r3, r7, r5
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d112      	bne.n	80025b8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002592:	197c      	adds	r4, r7, r5
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0018      	movs	r0, r3
 8002598:	f000 fb5c 	bl	8002c54 <ADC_Disable>
 800259c:	0003      	movs	r3, r0
 800259e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025a0:	197b      	adds	r3, r7, r5
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	4a08      	ldr	r2, [pc, #32]	@ (80025d0 <HAL_ADC_Stop+0x74>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	2201      	movs	r2, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2254      	movs	r2, #84	@ 0x54
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80025c0:	230f      	movs	r3, #15
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bdb0      	pop	{r4, r5, r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	fffffefe 	.word	0xfffffefe

080025d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d102      	bne.n	80025ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80025e6:	2308      	movs	r3, #8
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e00f      	b.n	800260c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d007      	beq.n	8002608 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	2220      	movs	r2, #32
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e072      	b.n	80026ee <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002608:	2304      	movs	r3, #4
 800260a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800260c:	f7ff fc18 	bl	8001e40 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002614:	e01f      	b.n	8002656 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	d01c      	beq.n	8002656 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800261c:	f7ff fc10 	bl	8001e40 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <HAL_ADC_PollForConversion+0x5e>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d111      	bne.n	8002656 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	d10b      	bne.n	8002656 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	2204      	movs	r2, #4
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2254      	movs	r2, #84	@ 0x54
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e04b      	b.n	80026ee <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	d0d9      	beq.n	8002616 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	2280      	movs	r2, #128	@ 0x80
 8002668:	0092      	lsls	r2, r2, #2
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff fc66 	bl	8001f46 <LL_ADC_REG_IsTriggerSourceSWStart>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d02e      	beq.n	80026dc <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7e9b      	ldrb	r3, [r3, #26]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d12a      	bne.n	80026dc <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2208      	movs	r2, #8
 800268e:	4013      	ands	r3, r2
 8002690:	2b08      	cmp	r3, #8
 8002692:	d123      	bne.n	80026dc <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff fd57 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d110      	bne.n	80026c4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	210c      	movs	r1, #12
 80026ae:	438a      	bics	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	4a10      	ldr	r2, [pc, #64]	@ (80026f8 <HAL_ADC_PollForConversion+0x124>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	2201      	movs	r2, #1
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80026c2:	e00b      	b.n	80026dc <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	2220      	movs	r2, #32
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	2201      	movs	r2, #1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7e1b      	ldrb	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d103      	bne.n	80026ec <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	220c      	movs	r2, #12
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b004      	add	sp, #16
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	fffffefe 	.word	0xfffffefe

080026fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271e:	2317      	movs	r3, #23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2254      	movs	r2, #84	@ 0x54
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x24>
 8002734:	2302      	movs	r3, #2
 8002736:	e1c0      	b.n	8002aba <HAL_ADC_ConfigChannel+0x3a6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2254      	movs	r2, #84	@ 0x54
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0018      	movs	r0, r3
 8002746:	f7ff fd01 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d000      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x3c>
 800274e:	e1a3      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d100      	bne.n	800275a <HAL_ADC_ConfigChannel+0x46>
 8002758:	e143      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	429a      	cmp	r2, r3
 8002764:	d004      	beq.n	8002770 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800276a:	4ac1      	ldr	r2, [pc, #772]	@ (8002a70 <HAL_ADC_ConfigChannel+0x35c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0019      	movs	r1, r3
 800277a:	0010      	movs	r0, r2
 800277c:	f7ff fc14 	bl	8001fa8 <LL_ADC_REG_SetSequencerChAdd>
 8002780:	e0c9      	b.n	8002916 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	211f      	movs	r1, #31
 800278c:	400b      	ands	r3, r1
 800278e:	210f      	movs	r1, #15
 8002790:	4099      	lsls	r1, r3
 8002792:	000b      	movs	r3, r1
 8002794:	43db      	mvns	r3, r3
 8002796:	4013      	ands	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	035b      	lsls	r3, r3, #13
 80027a0:	0b5b      	lsrs	r3, r3, #13
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x9c>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	221f      	movs	r2, #31
 80027ac:	4013      	ands	r3, r2
 80027ae:	e098      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	d000      	beq.n	80027bc <HAL_ADC_ConfigChannel+0xa8>
 80027ba:	e091      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x1cc>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d000      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0xb4>
 80027c6:	e089      	b.n	80028dc <HAL_ADC_ConfigChannel+0x1c8>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2204      	movs	r2, #4
 80027ce:	4013      	ands	r3, r2
 80027d0:	d000      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0xc0>
 80027d2:	e081      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x1c4>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	4013      	ands	r3, r2
 80027dc:	d000      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0xcc>
 80027de:	e079      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x1c0>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2210      	movs	r2, #16
 80027e6:	4013      	ands	r3, r2
 80027e8:	d000      	beq.n	80027ec <HAL_ADC_ConfigChannel+0xd8>
 80027ea:	e071      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1bc>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2220      	movs	r2, #32
 80027f2:	4013      	ands	r3, r2
 80027f4:	d000      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0xe4>
 80027f6:	e069      	b.n	80028cc <HAL_ADC_ConfigChannel+0x1b8>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2240      	movs	r2, #64	@ 0x40
 80027fe:	4013      	ands	r3, r2
 8002800:	d000      	beq.n	8002804 <HAL_ADC_ConfigChannel+0xf0>
 8002802:	e061      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x1b4>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	4013      	ands	r3, r2
 800280c:	d000      	beq.n	8002810 <HAL_ADC_ConfigChannel+0xfc>
 800280e:	e059      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x1b0>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d151      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1ac>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4013      	ands	r3, r2
 8002826:	d149      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1a8>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4013      	ands	r3, r2
 8002832:	d141      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1a4>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d139      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1a0>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	015b      	lsls	r3, r3, #5
 8002848:	4013      	ands	r3, r2
 800284a:	d131      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x19c>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	019b      	lsls	r3, r3, #6
 8002854:	4013      	ands	r3, r2
 8002856:	d129      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x198>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	01db      	lsls	r3, r3, #7
 8002860:	4013      	ands	r3, r2
 8002862:	d121      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x194>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	4013      	ands	r3, r2
 800286e:	d119      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x190>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	025b      	lsls	r3, r3, #9
 8002878:	4013      	ands	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x18c>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	029b      	lsls	r3, r3, #10
 8002884:	4013      	ands	r3, r2
 8002886:	d109      	bne.n	800289c <HAL_ADC_ConfigChannel+0x188>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	02db      	lsls	r3, r3, #11
 8002890:	4013      	ands	r3, r2
 8002892:	d001      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x184>
 8002894:	2312      	movs	r3, #18
 8002896:	e024      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 8002898:	2300      	movs	r3, #0
 800289a:	e022      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 800289c:	2311      	movs	r3, #17
 800289e:	e020      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028a0:	2310      	movs	r3, #16
 80028a2:	e01e      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028a4:	230f      	movs	r3, #15
 80028a6:	e01c      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028a8:	230e      	movs	r3, #14
 80028aa:	e01a      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028ac:	230d      	movs	r3, #13
 80028ae:	e018      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028b0:	230c      	movs	r3, #12
 80028b2:	e016      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028b4:	230b      	movs	r3, #11
 80028b6:	e014      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028b8:	230a      	movs	r3, #10
 80028ba:	e012      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028bc:	2309      	movs	r3, #9
 80028be:	e010      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028c0:	2308      	movs	r3, #8
 80028c2:	e00e      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028c4:	2307      	movs	r3, #7
 80028c6:	e00c      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028c8:	2306      	movs	r3, #6
 80028ca:	e00a      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028cc:	2305      	movs	r3, #5
 80028ce:	e008      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028d0:	2304      	movs	r3, #4
 80028d2:	e006      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028d4:	2303      	movs	r3, #3
 80028d6:	e004      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028d8:	2302      	movs	r3, #2
 80028da:	e002      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1ce>
 80028e0:	2300      	movs	r3, #0
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	6852      	ldr	r2, [r2, #4]
 80028e6:	201f      	movs	r0, #31
 80028e8:	4002      	ands	r2, r0
 80028ea:	4093      	lsls	r3, r2
 80028ec:	000a      	movs	r2, r1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	429a      	cmp	r2, r3
 8002902:	d808      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	001a      	movs	r2, r3
 8002912:	f7ff fb29 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6819      	ldr	r1, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	001a      	movs	r2, r3
 8002924:	f7ff fb64 	bl	8001ff0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db00      	blt.n	8002932 <HAL_ADC_ConfigChannel+0x21e>
 8002930:	e0bc      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002932:	4b50      	ldr	r3, [pc, #320]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff fac5 	bl	8001ec4 <LL_ADC_GetCommonPathInternalCh>
 800293a:	0003      	movs	r3, r0
 800293c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4d      	ldr	r2, [pc, #308]	@ (8002a78 <HAL_ADC_ConfigChannel+0x364>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d122      	bne.n	800298e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002950:	d11d      	bne.n	800298e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	0412      	lsls	r2, r2, #16
 8002958:	4313      	orrs	r3, r2
 800295a:	4a46      	ldr	r2, [pc, #280]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 800295c:	0019      	movs	r1, r3
 800295e:	0010      	movs	r0, r2
 8002960:	f7ff fa9c 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002964:	4b45      	ldr	r3, [pc, #276]	@ (8002a7c <HAL_ADC_ConfigChannel+0x368>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4945      	ldr	r1, [pc, #276]	@ (8002a80 <HAL_ADC_ConfigChannel+0x36c>)
 800296a:	0018      	movs	r0, r3
 800296c:	f7fd fbc8 	bl	8000100 <__udivsi3>
 8002970:	0003      	movs	r3, r0
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	0013      	movs	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	189b      	adds	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800297e:	e002      	b.n	8002986 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f9      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800298c:	e08e      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a3c      	ldr	r2, [pc, #240]	@ (8002a84 <HAL_ADC_ConfigChannel+0x370>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d10e      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	045b      	lsls	r3, r3, #17
 800299e:	4013      	ands	r3, r2
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	0452      	lsls	r2, r2, #17
 80029a8:	4313      	orrs	r3, r2
 80029aa:	4a32      	ldr	r2, [pc, #200]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 80029ac:	0019      	movs	r1, r3
 80029ae:	0010      	movs	r0, r2
 80029b0:	f7ff fa74 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 80029b4:	e07a      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a33      	ldr	r2, [pc, #204]	@ (8002a88 <HAL_ADC_ConfigChannel+0x374>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d000      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x2ae>
 80029c0:	e074      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	03db      	lsls	r3, r3, #15
 80029c8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029ca:	d000      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x2ba>
 80029cc:	e06e      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	03d2      	lsls	r2, r2, #15
 80029d4:	4313      	orrs	r3, r2
 80029d6:	4a27      	ldr	r2, [pc, #156]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 80029d8:	0019      	movs	r1, r3
 80029da:	0010      	movs	r0, r2
 80029dc:	f7ff fa5e 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 80029e0:	e064      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d004      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a70 <HAL_ADC_ConfigChannel+0x35c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d107      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0019      	movs	r1, r3
 8002a02:	0010      	movs	r0, r2
 8002a04:	f7ff fae1 	bl	8001fca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da4d      	bge.n	8002aac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a10:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff fa56 	bl	8001ec4 <LL_ADC_GetCommonPathInternalCh>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a15      	ldr	r2, [pc, #84]	@ (8002a78 <HAL_ADC_ConfigChannel+0x364>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4a18      	ldr	r2, [pc, #96]	@ (8002a8c <HAL_ADC_ConfigChannel+0x378>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 8002a2e:	0019      	movs	r1, r3
 8002a30:	0010      	movs	r0, r2
 8002a32:	f7ff fa33 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002a36:	e039      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a11      	ldr	r2, [pc, #68]	@ (8002a84 <HAL_ADC_ConfigChannel+0x370>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d108      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <HAL_ADC_ConfigChannel+0x37c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	f7ff fa25 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002a52:	e02b      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	@ (8002a88 <HAL_ADC_ConfigChannel+0x374>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d126      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4a0c      	ldr	r2, [pc, #48]	@ (8002a94 <HAL_ADC_ConfigChannel+0x380>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	4a03      	ldr	r2, [pc, #12]	@ (8002a74 <HAL_ADC_ConfigChannel+0x360>)
 8002a66:	0019      	movs	r1, r3
 8002a68:	0010      	movs	r0, r2
 8002a6a:	f7ff fa17 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002a6e:	e01d      	b.n	8002aac <HAL_ADC_ConfigChannel+0x398>
 8002a70:	80000004 	.word	0x80000004
 8002a74:	40012708 	.word	0x40012708
 8002a78:	b0001000 	.word	0xb0001000
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	00030d40 	.word	0x00030d40
 8002a84:	b8004000 	.word	0xb8004000
 8002a88:	b4002000 	.word	0xb4002000
 8002a8c:	ff7fffff 	.word	0xff7fffff
 8002a90:	feffffff 	.word	0xfeffffff
 8002a94:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002aa4:	2317      	movs	r3, #23
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2254      	movs	r2, #84	@ 0x54
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ab4:	2317      	movs	r3, #23
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b006      	add	sp, #24
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			@ (mov r8, r8)

08002ac4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff fb3b 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d031      	beq.n	8002b3e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7ff faff 	bl	80020e2 <LL_ADC_IsDisableOngoing>
 8002ae4:	1e03      	subs	r3, r0, #0
 8002ae6:	d104      	bne.n	8002af2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fb1b 	bl	8002128 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002af2:	f7ff f9a5 	bl	8001e40 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002afa:	e01a      	b.n	8002b32 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002afc:	f7ff f9a0 	bl	8001e40 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d913      	bls.n	8002b32 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2204      	movs	r2, #4
 8002b12:	4013      	ands	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	2201      	movs	r2, #1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e006      	b.n	8002b40 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d1de      	bne.n	8002afc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff fab1 	bl	80020c0 <LL_ADC_IsEnabled>
 8002b5e:	1e03      	subs	r3, r0, #0
 8002b60:	d000      	beq.n	8002b64 <ADC_Enable+0x1c>
 8002b62:	e069      	b.n	8002c38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	4a36      	ldr	r2, [pc, #216]	@ (8002c44 <ADC_Enable+0xfc>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d00d      	beq.n	8002b8c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	2210      	movs	r2, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b80:	2201      	movs	r2, #1
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e056      	b.n	8002c3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff fa71 	bl	8002078 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002b96:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <ADC_Enable+0x100>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff f993 	bl	8001ec4 <LL_ADC_GetCommonPathInternalCh>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d00f      	beq.n	8002bc8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <ADC_Enable+0x104>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4928      	ldr	r1, [pc, #160]	@ (8002c50 <ADC_Enable+0x108>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7fd faa6 	bl	8000100 <__udivsi3>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002bb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bba:	e002      	b.n	8002bc2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e5b      	ldrb	r3, [r3, #25]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d033      	beq.n	8002c38 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002bd0:	f7ff f936 	bl	8001e40 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd8:	e027      	b.n	8002c2a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff fa6e 	bl	80020c0 <LL_ADC_IsEnabled>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d104      	bne.n	8002bf2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff fa43 	bl	8002078 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bf2:	f7ff f925 	bl	8001e40 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d914      	bls.n	8002c2a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d00d      	beq.n	8002c2a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	2210      	movs	r2, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1e:	2201      	movs	r2, #1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e007      	b.n	8002c3a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d1d0      	bne.n	8002bda <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	80000017 	.word	0x80000017
 8002c48:	40012708 	.word	0x40012708
 8002c4c:	20000004 	.word	0x20000004
 8002c50:	00030d40 	.word	0x00030d40

08002c54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff fa3e 	bl	80020e2 <LL_ADC_IsDisableOngoing>
 8002c66:	0003      	movs	r3, r0
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff fa26 	bl	80020c0 <LL_ADC_IsEnabled>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d046      	beq.n	8002d06 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d143      	bne.n	8002d06 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2205      	movs	r2, #5
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10d      	bne.n	8002ca8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff fa03 	bl	800209c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c9e:	f7ff f8cf 	bl	8001e40 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ca6:	e028      	b.n	8002cfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	2210      	movs	r2, #16
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e021      	b.n	8002d08 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cc4:	f7ff f8bc 	bl	8001e40 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d913      	bls.n	8002cfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	2201      	movs	r2, #1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e006      	b.n	8002d08 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1de      	bne.n	8002cc4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <LL_ADC_GetCommonClock>:
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	23f0      	movs	r3, #240	@ 0xf0
 8002d1e:	039b      	lsls	r3, r3, #14
 8002d20:	4013      	ands	r3, r2
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <LL_ADC_GetClock>:
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	0f9b      	lsrs	r3, r3, #30
 8002d38:	079b      	lsls	r3, r3, #30
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <LL_ADC_SetCalibrationFactor>:
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	22b4      	movs	r2, #180	@ 0xb4
 8002d50:	589b      	ldr	r3, [r3, r2]
 8002d52:	227f      	movs	r2, #127	@ 0x7f
 8002d54:	4393      	bics	r3, r2
 8002d56:	001a      	movs	r2, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	21b4      	movs	r1, #180	@ 0xb4
 8002d60:	505a      	str	r2, [r3, r1]
}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <LL_ADC_GetCalibrationFactor>:
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	22b4      	movs	r2, #180	@ 0xb4
 8002d76:	589b      	ldr	r3, [r3, r2]
 8002d78:	227f      	movs	r2, #127	@ 0x7f
 8002d7a:	4013      	ands	r3, r2
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <LL_ADC_Enable>:
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <LL_ADC_Enable+0x20>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	2201      	movs	r2, #1
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	7fffffe8 	.word	0x7fffffe8

08002da8 <LL_ADC_Disable>:
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <LL_ADC_Disable+0x20>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	2202      	movs	r2, #2
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	7fffffe8 	.word	0x7fffffe8

08002dcc <LL_ADC_IsEnabled>:
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_IsEnabled+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_IsEnabled+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <LL_ADC_StartCalibration>:
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <LL_ADC_StartCalibration+0x24>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2280      	movs	r2, #128	@ 0x80
 8002e02:	0612      	lsls	r2, r2, #24
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]
}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	7fffffe8 	.word	0x7fffffe8

08002e18 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	0fdb      	lsrs	r3, r3, #31
 8002e26:	07da      	lsls	r2, r3, #31
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d101      	bne.n	8002e34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b08b      	sub	sp, #44	@ 0x2c
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2254      	movs	r2, #84	@ 0x54
 8002e54:	5c9b      	ldrb	r3, [r3, r2]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_ADCEx_Calibration_Start+0x1e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0dd      	b.n	800301a <HAL_ADCEx_Calibration_Start+0x1da>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2254      	movs	r2, #84	@ 0x54
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e66:	231f      	movs	r3, #31
 8002e68:	18fc      	adds	r4, r7, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff fef1 	bl	8002c54 <ADC_Disable>
 8002e72:	0003      	movs	r3, r0
 8002e74:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7ff ffa6 	bl	8002dcc <LL_ADC_IsEnabled>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d000      	beq.n	8002e86 <HAL_ADCEx_Calibration_Start+0x46>
 8002e84:	e0bc      	b.n	8003000 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	4a66      	ldr	r2, [pc, #408]	@ (8003024 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2202      	movs	r2, #2
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a62      	ldr	r2, [pc, #392]	@ (8003028 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	495f      	ldr	r1, [pc, #380]	@ (800302c <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	e02d      	b.n	8002f14 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7ff ff97 	bl	8002df0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ec2:	e014      	b.n	8002eee <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	@ (8003030 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d90d      	bls.n	8002eee <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	2212      	movs	r2, #18
 8002ed8:	4393      	bics	r3, r2
 8002eda:	2210      	movs	r2, #16
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2254      	movs	r2, #84	@ 0x54
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e095      	b.n	800301a <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff ff90 	bl	8002e18 <LL_ADC_IsCalibrationOnGoing>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d1e3      	bne.n	8002ec4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff ff32 	bl	8002d6a <LL_ADC_GetCalibrationFactor>
 8002f06:	0002      	movs	r2, r0
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	3301      	adds	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	d9ce      	bls.n	8002eb8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002f1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f1c:	6a38      	ldr	r0, [r7, #32]
 8002f1e:	f7fd f8ef 	bl	8000100 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff ff2a 	bl	8002d84 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7ff fef8 	bl	8002d2a <LL_ADC_GetClock>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d11b      	bne.n	8002f76 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff fee5 	bl	8002d10 <LL_ADC_GetCommonClock>
 8002f46:	0003      	movs	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	23e0      	movs	r3, #224	@ 0xe0
 8002f4e:	035b      	lsls	r3, r3, #13
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d310      	bcc.n	8002f76 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	0013      	movs	r3, r2
 8002f60:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002f68:	e002      	b.n	8002f70 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f9      	bne.n	8002f6a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a3a      	ldr	r2, [r7, #32]
 8002f7c:	0011      	movs	r1, r2
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7ff fedf 	bl	8002d42 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff ff0d 	bl	8002da8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe ff57 	bl	8001e40 <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f96:	e01b      	b.n	8002fd0 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f98:	f7fe ff52 	bl	8001e40 <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d914      	bls.n	8002fd0 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7ff ff0e 	bl	8002dcc <LL_ADC_IsEnabled>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	2210      	movs	r2, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e024      	b.n	800301a <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fef9 	bl	8002dcc <LL_ADC_IsEnabled>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d1dc      	bne.n	8002f98 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68d9      	ldr	r1, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ffe:	e005      	b.n	800300c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003004:	2210      	movs	r2, #16
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2254      	movs	r2, #84	@ 0x54
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003014:	231f      	movs	r3, #31
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	781b      	ldrb	r3, [r3, #0]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b00b      	add	sp, #44	@ 0x2c
 8003020:	bd90      	pop	{r4, r7, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	fffffefd 	.word	0xfffffefd
 8003028:	00008003 	.word	0x00008003
 800302c:	ffff7ffc 	.word	0xffff7ffc
 8003030:	0002f1ff 	.word	0x0002f1ff
 8003034:	40012708 	.word	0x40012708

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	0002      	movs	r2, r0
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003044:	1dfb      	adds	r3, r7, #7
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b7f      	cmp	r3, #127	@ 0x7f
 800304a:	d809      	bhi.n	8003060 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	001a      	movs	r2, r3
 8003052:	231f      	movs	r3, #31
 8003054:	401a      	ands	r2, r3
 8003056:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <__NVIC_EnableIRQ+0x30>)
 8003058:	2101      	movs	r1, #1
 800305a:	4091      	lsls	r1, r2
 800305c:	000a      	movs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}
 8003068:	e000e100 	.word	0xe000e100

0800306c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	0002      	movs	r2, r0
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b7f      	cmp	r3, #127	@ 0x7f
 800307e:	d810      	bhi.n	80030a2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	001a      	movs	r2, r3
 8003086:	231f      	movs	r3, #31
 8003088:	4013      	ands	r3, r2
 800308a:	4908      	ldr	r1, [pc, #32]	@ (80030ac <__NVIC_DisableIRQ+0x40>)
 800308c:	2201      	movs	r2, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	0013      	movs	r3, r2
 8003092:	2280      	movs	r2, #128	@ 0x80
 8003094:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003096:	f3bf 8f4f 	dsb	sy
}
 800309a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800309c:	f3bf 8f6f 	isb	sy
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	0002      	movs	r2, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80030c4:	d828      	bhi.n	8003118 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003184 <__NVIC_SetPriority+0xd4>)
 80030c8:	1dfb      	adds	r3, r7, #7
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	33c0      	adds	r3, #192	@ 0xc0
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	589b      	ldr	r3, [r3, r2]
 80030d6:	1dfa      	adds	r2, r7, #7
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	0011      	movs	r1, r2
 80030dc:	2203      	movs	r2, #3
 80030de:	400a      	ands	r2, r1
 80030e0:	00d2      	lsls	r2, r2, #3
 80030e2:	21ff      	movs	r1, #255	@ 0xff
 80030e4:	4091      	lsls	r1, r2
 80030e6:	000a      	movs	r2, r1
 80030e8:	43d2      	mvns	r2, r2
 80030ea:	401a      	ands	r2, r3
 80030ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	22ff      	movs	r2, #255	@ 0xff
 80030f4:	401a      	ands	r2, r3
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	0018      	movs	r0, r3
 80030fc:	2303      	movs	r3, #3
 80030fe:	4003      	ands	r3, r0
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003104:	481f      	ldr	r0, [pc, #124]	@ (8003184 <__NVIC_SetPriority+0xd4>)
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b25b      	sxtb	r3, r3
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	430a      	orrs	r2, r1
 8003110:	33c0      	adds	r3, #192	@ 0xc0
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003116:	e031      	b.n	800317c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003118:	4a1b      	ldr	r2, [pc, #108]	@ (8003188 <__NVIC_SetPriority+0xd8>)
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	0019      	movs	r1, r3
 8003120:	230f      	movs	r3, #15
 8003122:	400b      	ands	r3, r1
 8003124:	3b08      	subs	r3, #8
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	3306      	adds	r3, #6
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	18d3      	adds	r3, r2, r3
 800312e:	3304      	adds	r3, #4
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1dfa      	adds	r2, r7, #7
 8003134:	7812      	ldrb	r2, [r2, #0]
 8003136:	0011      	movs	r1, r2
 8003138:	2203      	movs	r2, #3
 800313a:	400a      	ands	r2, r1
 800313c:	00d2      	lsls	r2, r2, #3
 800313e:	21ff      	movs	r1, #255	@ 0xff
 8003140:	4091      	lsls	r1, r2
 8003142:	000a      	movs	r2, r1
 8003144:	43d2      	mvns	r2, r2
 8003146:	401a      	ands	r2, r3
 8003148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	22ff      	movs	r2, #255	@ 0xff
 8003150:	401a      	ands	r2, r3
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	0018      	movs	r0, r3
 8003158:	2303      	movs	r3, #3
 800315a:	4003      	ands	r3, r0
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003160:	4809      	ldr	r0, [pc, #36]	@ (8003188 <__NVIC_SetPriority+0xd8>)
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	001c      	movs	r4, r3
 8003168:	230f      	movs	r3, #15
 800316a:	4023      	ands	r3, r4
 800316c:	3b08      	subs	r3, #8
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	430a      	orrs	r2, r1
 8003172:	3306      	adds	r3, #6
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	18c3      	adds	r3, r0, r3
 8003178:	3304      	adds	r3, #4
 800317a:	601a      	str	r2, [r3, #0]
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b003      	add	sp, #12
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1e5a      	subs	r2, r3, #1
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	045b      	lsls	r3, r3, #17
 800319c:	429a      	cmp	r2, r3
 800319e:	d301      	bcc.n	80031a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a0:	2301      	movs	r3, #1
 80031a2:	e010      	b.n	80031c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <SysTick_Config+0x44>)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	3a01      	subs	r2, #1
 80031aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ac:	2301      	movs	r3, #1
 80031ae:	425b      	negs	r3, r3
 80031b0:	2103      	movs	r1, #3
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7ff ff7c 	bl	80030b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <SysTick_Config+0x44>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <SysTick_Config+0x44>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b002      	add	sp, #8
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	210f      	movs	r1, #15
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	1c02      	adds	r2, r0, #0
 80031e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b25b      	sxtb	r3, r3
 80031ee:	0011      	movs	r1, r2
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff ff5d 	bl	80030b0 <__NVIC_SetPriority>
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b004      	add	sp, #16
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	0002      	movs	r2, r0
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b25b      	sxtb	r3, r3
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff ff11 	bl	8003038 <__NVIC_EnableIRQ>
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	0002      	movs	r2, r0
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b25b      	sxtb	r3, r3
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff ff1b 	bl	800306c <__NVIC_DisableIRQ>
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff ff9f 	bl	800318c <SysTick_Config>
 800324e:	0003      	movs	r3, r0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e077      	b.n	800335a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3d      	ldr	r2, [pc, #244]	@ (8003364 <HAL_DMA_Init+0x10c>)
 8003270:	4694      	mov	ip, r2
 8003272:	4463      	add	r3, ip
 8003274:	2114      	movs	r1, #20
 8003276:	0018      	movs	r0, r3
 8003278:	f7fc ff42 	bl	8000100 <__udivsi3>
 800327c:	0003      	movs	r3, r0
 800327e:	009a      	lsls	r2, r3, #2
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2225      	movs	r2, #37	@ 0x25
 8003288:	2102      	movs	r1, #2
 800328a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4934      	ldr	r1, [pc, #208]	@ (8003368 <HAL_DMA_Init+0x110>)
 8003298:	400a      	ands	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 fb0f 	bl	80038f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	01db      	lsls	r3, r3, #7
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d102      	bne.n	80032ec <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f4:	213f      	movs	r1, #63	@ 0x3f
 80032f6:	400a      	ands	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003302:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d011      	beq.n	8003330 <HAL_DMA_Init+0xd8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d80d      	bhi.n	8003330 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fb1a 	bl	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	e008      	b.n	8003342 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2225      	movs	r2, #37	@ 0x25
 800334c:	2101      	movs	r1, #1
 800334e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	@ 0x24
 8003354:	2100      	movs	r1, #0
 8003356:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	bffdfff8 	.word	0xbffdfff8
 8003368:	ffff800f 	.word	0xffff800f

0800336c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e066      	b.n	800344c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	438a      	bics	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a30      	ldr	r2, [pc, #192]	@ (8003454 <HAL_DMA_DeInit+0xe8>)
 8003394:	4694      	mov	ip, r2
 8003396:	4463      	add	r3, ip
 8003398:	2114      	movs	r1, #20
 800339a:	0018      	movs	r0, r3
 800339c:	f7fc feb0 	bl	8000100 <__udivsi3>
 80033a0:	0003      	movs	r3, r0
 80033a2:	009a      	lsls	r2, r3, #2
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80033b0:	4b29      	ldr	r3, [pc, #164]	@ (8003458 <HAL_DMA_DeInit+0xec>)
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	221c      	movs	r2, #28
 80033ba:	4013      	ands	r3, r2
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	4b25      	ldr	r3, [pc, #148]	@ (8003458 <HAL_DMA_DeInit+0xec>)
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fa95 	bl	80038f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033de:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d010      	beq.n	800340a <HAL_DMA_DeInit+0x9e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d80c      	bhi.n	800340a <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 faac 	bl	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003408:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2225      	movs	r2, #37	@ 0x25
 800343e:	2100      	movs	r1, #0
 8003440:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2224      	movs	r2, #36	@ 0x24
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}
 8003454:	bffdfff8 	.word	0xbffdfff8
 8003458:	40020000 	.word	0x40020000

0800345c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2317      	movs	r3, #23
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2224      	movs	r2, #36	@ 0x24
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_DMA_Start_IT+0x24>
 800347c:	2302      	movs	r3, #2
 800347e:	e06f      	b.n	8003560 <HAL_DMA_Start_IT+0x104>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2224      	movs	r2, #36	@ 0x24
 8003484:	2101      	movs	r1, #1
 8003486:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2225      	movs	r2, #37	@ 0x25
 800348c:	5c9b      	ldrb	r3, [r3, r2]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d157      	bne.n	8003544 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2225      	movs	r2, #37	@ 0x25
 8003498:	2102      	movs	r1, #2
 800349a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	438a      	bics	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f9dd 	bl	8003878 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	210e      	movs	r1, #14
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e00f      	b.n	80034f8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2104      	movs	r1, #4
 80034e4:	438a      	bics	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	210a      	movs	r1, #10
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	025b      	lsls	r3, r3, #9
 8003502:	4013      	ands	r3, r2
 8003504:	d008      	beq.n	8003518 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	0049      	lsls	r1, r1, #1
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352a:	2180      	movs	r1, #128	@ 0x80
 800352c:	0049      	lsls	r1, r1, #1
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2101      	movs	r1, #1
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e00a      	b.n	800355a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2280      	movs	r2, #128	@ 0x80
 8003548:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2224      	movs	r2, #36	@ 0x24
 800354e:	2100      	movs	r1, #0
 8003550:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003552:	2317      	movs	r3, #23
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800355a:	2317      	movs	r3, #23
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	781b      	ldrb	r3, [r3, #0]
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b006      	add	sp, #24
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e050      	b.n	800361c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2225      	movs	r2, #37	@ 0x25
 800357e:	5c9b      	ldrb	r3, [r3, r2]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d008      	beq.n	8003598 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2224      	movs	r2, #36	@ 0x24
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e041      	b.n	800361c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	210e      	movs	r1, #14
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	491c      	ldr	r1, [pc, #112]	@ (8003624 <HAL_DMA_Abort+0xbc>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80035c8:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <HAL_DMA_Abort+0xc0>)
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	221c      	movs	r2, #28
 80035d2:	4013      	ands	r3, r2
 80035d4:	2201      	movs	r2, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_DMA_Abort+0xc0>)
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00c      	beq.n	800360a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fa:	490a      	ldr	r1, [pc, #40]	@ (8003624 <HAL_DMA_Abort+0xbc>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003608:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2225      	movs	r2, #37	@ 0x25
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2224      	movs	r2, #36	@ 0x24
 8003616:	2100      	movs	r1, #0
 8003618:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}
 8003624:	fffffeff 	.word	0xfffffeff
 8003628:	40020000 	.word	0x40020000

0800362c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003634:	210f      	movs	r1, #15
 8003636:	187b      	adds	r3, r7, r1
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2225      	movs	r2, #37	@ 0x25
 8003640:	5c9b      	ldrb	r3, [r3, r2]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d006      	beq.n	8003656 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2204      	movs	r2, #4
 800364c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800364e:	187b      	adds	r3, r7, r1
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e049      	b.n	80036ea <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	210e      	movs	r1, #14
 8003662:	438a      	bics	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003680:	491d      	ldr	r1, [pc, #116]	@ (80036f8 <HAL_DMA_Abort_IT+0xcc>)
 8003682:	400a      	ands	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003686:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_DMA_Abort_IT+0xd0>)
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	221c      	movs	r2, #28
 8003690:	4013      	ands	r3, r2
 8003692:	2201      	movs	r2, #1
 8003694:	409a      	lsls	r2, r3
 8003696:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_DMA_Abort_IT+0xd0>)
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00c      	beq.n	80036c8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b8:	490f      	ldr	r1, [pc, #60]	@ (80036f8 <HAL_DMA_Abort_IT+0xcc>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80036c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2225      	movs	r2, #37	@ 0x25
 80036cc:	2101      	movs	r1, #1
 80036ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	@ 0x24
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	0010      	movs	r0, r2
 80036e8:	4798      	blx	r3
    }
  }
  return status;
 80036ea:	230f      	movs	r3, #15
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	781b      	ldrb	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	fffffeff 	.word	0xfffffeff
 80036fc:	40020000 	.word	0x40020000

08003700 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003708:	4b55      	ldr	r3, [pc, #340]	@ (8003860 <HAL_DMA_IRQHandler+0x160>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	221c      	movs	r2, #28
 800371c:	4013      	ands	r3, r2
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	0013      	movs	r3, r2
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	d027      	beq.n	800377a <HAL_DMA_IRQHandler+0x7a>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2204      	movs	r2, #4
 800372e:	4013      	ands	r3, r2
 8003730:	d023      	beq.n	800377a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2220      	movs	r2, #32
 800373a:	4013      	ands	r3, r2
 800373c:	d107      	bne.n	800374e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2104      	movs	r1, #4
 800374a:	438a      	bics	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800374e:	4b44      	ldr	r3, [pc, #272]	@ (8003860 <HAL_DMA_IRQHandler+0x160>)
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	221c      	movs	r2, #28
 8003758:	4013      	ands	r3, r2
 800375a:	2204      	movs	r2, #4
 800375c:	409a      	lsls	r2, r3
 800375e:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <HAL_DMA_IRQHandler+0x160>)
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	2b00      	cmp	r3, #0
 800376a:	d100      	bne.n	800376e <HAL_DMA_IRQHandler+0x6e>
 800376c:	e073      	b.n	8003856 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	0010      	movs	r0, r2
 8003776:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003778:	e06d      	b.n	8003856 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	221c      	movs	r2, #28
 8003780:	4013      	ands	r3, r2
 8003782:	2202      	movs	r2, #2
 8003784:	409a      	lsls	r2, r3
 8003786:	0013      	movs	r3, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	d02e      	beq.n	80037ec <HAL_DMA_IRQHandler+0xec>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2202      	movs	r2, #2
 8003792:	4013      	ands	r3, r2
 8003794:	d02a      	beq.n	80037ec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	4013      	ands	r3, r2
 80037a0:	d10b      	bne.n	80037ba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	210a      	movs	r1, #10
 80037ae:	438a      	bics	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2225      	movs	r2, #37	@ 0x25
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80037ba:	4b29      	ldr	r3, [pc, #164]	@ (8003860 <HAL_DMA_IRQHandler+0x160>)
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	221c      	movs	r2, #28
 80037c4:	4013      	ands	r3, r2
 80037c6:	2202      	movs	r2, #2
 80037c8:	409a      	lsls	r2, r3
 80037ca:	4b25      	ldr	r3, [pc, #148]	@ (8003860 <HAL_DMA_IRQHandler+0x160>)
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	@ 0x24
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03a      	beq.n	8003856 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	0010      	movs	r0, r2
 80037e8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80037ea:	e034      	b.n	8003856 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	221c      	movs	r2, #28
 80037f2:	4013      	ands	r3, r2
 80037f4:	2208      	movs	r2, #8
 80037f6:	409a      	lsls	r2, r3
 80037f8:	0013      	movs	r3, r2
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4013      	ands	r3, r2
 80037fe:	d02b      	beq.n	8003858 <HAL_DMA_IRQHandler+0x158>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2208      	movs	r2, #8
 8003804:	4013      	ands	r3, r2
 8003806:	d027      	beq.n	8003858 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	210e      	movs	r1, #14
 8003814:	438a      	bics	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <HAL_DMA_IRQHandler+0x160>)
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	221c      	movs	r2, #28
 8003822:	4013      	ands	r3, r2
 8003824:	2201      	movs	r2, #1
 8003826:	409a      	lsls	r2, r3
 8003828:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <HAL_DMA_IRQHandler+0x160>)
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2225      	movs	r2, #37	@ 0x25
 8003838:	2101      	movs	r1, #1
 800383a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	@ 0x24
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	0010      	movs	r0, r2
 8003854:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	46c0      	nop			@ (mov r8, r8)
}
 800385a:	46bd      	mov	sp, r7
 800385c:	b004      	add	sp, #16
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40020000 	.word	0x40020000

08003864 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800388e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80038a0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80038a2:	4b14      	ldr	r3, [pc, #80]	@ (80038f4 <DMA_SetConfig+0x7c>)
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	221c      	movs	r2, #28
 80038ac:	4013      	ands	r3, r2
 80038ae:	2201      	movs	r2, #1
 80038b0:	409a      	lsls	r2, r3
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <DMA_SetConfig+0x7c>)
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d108      	bne.n	80038da <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038d8:	e007      	b.n	80038ea <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	60da      	str	r2, [r3, #12]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	40020000 	.word	0x40020000

080038f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	4a10      	ldr	r2, [pc, #64]	@ (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003908:	4694      	mov	ip, r2
 800390a:	4463      	add	r3, ip
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	001a      	movs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	001a      	movs	r2, r3
 800391a:	23ff      	movs	r3, #255	@ 0xff
 800391c:	4013      	ands	r3, r2
 800391e:	3b08      	subs	r3, #8
 8003920:	2114      	movs	r1, #20
 8003922:	0018      	movs	r0, r3
 8003924:	f7fc fbec 	bl	8000100 <__udivsi3>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a07      	ldr	r2, [pc, #28]	@ (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003930:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	221f      	movs	r2, #31
 8003936:	4013      	ands	r3, r2
 8003938:	2201      	movs	r2, #1
 800393a:	409a      	lsls	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bd80      	pop	{r7, pc}
 8003948:	10008200 	.word	0x10008200
 800394c:	40020880 	.word	0x40020880

08003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	223f      	movs	r2, #63	@ 0x3f
 800395e:	4013      	ands	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003966:	4694      	mov	ip, r2
 8003968:	4463      	add	r3, ip
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	001a      	movs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a07      	ldr	r2, [pc, #28]	@ (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003976:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3b01      	subs	r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	4013      	ands	r3, r2
 8003980:	2201      	movs	r2, #1
 8003982:	409a      	lsls	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b004      	add	sp, #16
 800398e:	bd80      	pop	{r7, pc}
 8003990:	1000823f 	.word	0x1000823f
 8003994:	40020940 	.word	0x40020940

08003998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a6:	e147      	b.n	8003c38 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4091      	lsls	r1, r2
 80039b2:	000a      	movs	r2, r1
 80039b4:	4013      	ands	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d100      	bne.n	80039c0 <HAL_GPIO_Init+0x28>
 80039be:	e138      	b.n	8003c32 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d005      	beq.n	80039d8 <HAL_GPIO_Init+0x40>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2203      	movs	r2, #3
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d130      	bne.n	8003a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	2203      	movs	r2, #3
 80039e4:	409a      	lsls	r2, r3
 80039e6:	0013      	movs	r3, r2
 80039e8:	43da      	mvns	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	409a      	lsls	r2, r3
 80039fa:	0013      	movs	r3, r2
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a0e:	2201      	movs	r2, #1
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	409a      	lsls	r2, r3
 8003a14:	0013      	movs	r3, r2
 8003a16:	43da      	mvns	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	2201      	movs	r2, #1
 8003a26:	401a      	ands	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d017      	beq.n	8003a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	409a      	lsls	r2, r3
 8003a54:	0013      	movs	r3, r2
 8003a56:	43da      	mvns	r2, r3
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	0013      	movs	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d123      	bne.n	8003aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	08da      	lsrs	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3208      	adds	r2, #8
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	58d3      	ldr	r3, [r2, r3]
 8003a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2207      	movs	r2, #7
 8003a94:	4013      	ands	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	220f      	movs	r2, #15
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2107      	movs	r1, #7
 8003aae:	400b      	ands	r3, r1
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	0013      	movs	r3, r2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	08da      	lsrs	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3208      	adds	r2, #8
 8003ac4:	0092      	lsls	r2, r2, #2
 8003ac6:	6939      	ldr	r1, [r7, #16]
 8003ac8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	0013      	movs	r3, r2
 8003ada:	43da      	mvns	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	401a      	ands	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	0013      	movs	r3, r2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	23c0      	movs	r3, #192	@ 0xc0
 8003b04:	029b      	lsls	r3, r3, #10
 8003b06:	4013      	ands	r3, r2
 8003b08:	d100      	bne.n	8003b0c <HAL_GPIO_Init+0x174>
 8003b0a:	e092      	b.n	8003c32 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b0c:	4a50      	ldr	r2, [pc, #320]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3318      	adds	r3, #24
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	589b      	ldr	r3, [r3, r2]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4013      	ands	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	220f      	movs	r2, #15
 8003b24:	409a      	lsls	r2, r3
 8003b26:	0013      	movs	r3, r2
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	23a0      	movs	r3, #160	@ 0xa0
 8003b34:	05db      	lsls	r3, r3, #23
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d013      	beq.n	8003b62 <HAL_GPIO_Init+0x1ca>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a45      	ldr	r2, [pc, #276]	@ (8003c54 <HAL_GPIO_Init+0x2bc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00d      	beq.n	8003b5e <HAL_GPIO_Init+0x1c6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a44      	ldr	r2, [pc, #272]	@ (8003c58 <HAL_GPIO_Init+0x2c0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <HAL_GPIO_Init+0x1c2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a43      	ldr	r2, [pc, #268]	@ (8003c5c <HAL_GPIO_Init+0x2c4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_GPIO_Init+0x1be>
 8003b52:	2303      	movs	r3, #3
 8003b54:	e006      	b.n	8003b64 <HAL_GPIO_Init+0x1cc>
 8003b56:	2305      	movs	r3, #5
 8003b58:	e004      	b.n	8003b64 <HAL_GPIO_Init+0x1cc>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e002      	b.n	8003b64 <HAL_GPIO_Init+0x1cc>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_GPIO_Init+0x1cc>
 8003b62:	2300      	movs	r3, #0
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	2103      	movs	r1, #3
 8003b68:	400a      	ands	r2, r1
 8003b6a:	00d2      	lsls	r2, r2, #3
 8003b6c:	4093      	lsls	r3, r2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b74:	4936      	ldr	r1, [pc, #216]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	3318      	adds	r3, #24
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b82:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	2380      	movs	r3, #128	@ 0x80
 8003b98:	035b      	lsls	r3, r3, #13
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003bac:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	039b      	lsls	r3, r3, #14
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003bd8:	2384      	movs	r3, #132	@ 0x84
 8003bda:	58d3      	ldr	r3, [r2, r3]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43da      	mvns	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	029b      	lsls	r3, r3, #10
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bfc:	4914      	ldr	r1, [pc, #80]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003bfe:	2284      	movs	r2, #132	@ 0x84
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c04:	4a12      	ldr	r2, [pc, #72]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	58d3      	ldr	r3, [r2, r3]
 8003c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	2380      	movs	r3, #128	@ 0x80
 8003c1c:	025b      	lsls	r3, r3, #9
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c2a:	4909      	ldr	r1, [pc, #36]	@ (8003c50 <HAL_GPIO_Init+0x2b8>)
 8003c2c:	2280      	movs	r2, #128	@ 0x80
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	40da      	lsrs	r2, r3
 8003c40:	1e13      	subs	r3, r2, #0
 8003c42:	d000      	beq.n	8003c46 <HAL_GPIO_Init+0x2ae>
 8003c44:	e6b0      	b.n	80039a8 <HAL_GPIO_Init+0x10>
  }
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b006      	add	sp, #24
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021800 	.word	0x40021800
 8003c54:	50000400 	.word	0x50000400
 8003c58:	50000800 	.word	0x50000800
 8003c5c:	50000c00 	.word	0x50000c00

08003c60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c6e:	e0b4      	b.n	8003dda <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c70:	2201      	movs	r2, #1
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	409a      	lsls	r2, r3
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d100      	bne.n	8003c84 <HAL_GPIO_DeInit+0x24>
 8003c82:	e0a7      	b.n	8003dd4 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003c84:	4a5a      	ldr	r2, [pc, #360]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	589b      	ldr	r3, [r3, r2]
 8003c90:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2203      	movs	r2, #3
 8003c96:	4013      	ands	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	23a0      	movs	r3, #160	@ 0xa0
 8003ca8:	05db      	lsls	r3, r3, #23
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_DeInit+0x76>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a50      	ldr	r2, [pc, #320]	@ (8003df4 <HAL_GPIO_DeInit+0x194>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_DeInit+0x72>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8003df8 <HAL_GPIO_DeInit+0x198>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_DeInit+0x6e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4e      	ldr	r2, [pc, #312]	@ (8003dfc <HAL_GPIO_DeInit+0x19c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_DeInit+0x6a>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e006      	b.n	8003cd8 <HAL_GPIO_DeInit+0x78>
 8003cca:	2305      	movs	r3, #5
 8003ccc:	e004      	b.n	8003cd8 <HAL_GPIO_DeInit+0x78>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_DeInit+0x78>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_GPIO_DeInit+0x78>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	2103      	movs	r1, #3
 8003cdc:	400a      	ands	r2, r1
 8003cde:	00d2      	lsls	r2, r2, #3
 8003ce0:	4093      	lsls	r3, r2
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d136      	bne.n	8003d56 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ce8:	4a41      	ldr	r2, [pc, #260]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	58d3      	ldr	r3, [r2, r3]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	43d2      	mvns	r2, r2
 8003cf2:	493f      	ldr	r1, [pc, #252]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2280      	movs	r2, #128	@ 0x80
 8003cf8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003cfc:	2384      	movs	r3, #132	@ 0x84
 8003cfe:	58d3      	ldr	r3, [r2, r3]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	43d2      	mvns	r2, r2
 8003d04:	493a      	ldr	r1, [pc, #232]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	2284      	movs	r2, #132	@ 0x84
 8003d0a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d0c:	4b38      	ldr	r3, [pc, #224]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43d9      	mvns	r1, r3
 8003d14:	4b36      	ldr	r3, [pc, #216]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003d16:	400a      	ands	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d1a:	4b35      	ldr	r3, [pc, #212]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	43d9      	mvns	r1, r3
 8003d22:	4b33      	ldr	r3, [pc, #204]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003d24:	400a      	ands	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	220f      	movs	r2, #15
 8003d32:	409a      	lsls	r2, r3
 8003d34:	0013      	movs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003d38:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3318      	adds	r3, #24
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	589a      	ldr	r2, [r3, r2]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	4829      	ldr	r0, [pc, #164]	@ (8003df0 <HAL_GPIO_DeInit+0x190>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	400a      	ands	r2, r1
 8003d50:	3318      	adds	r3, #24
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	2103      	movs	r1, #3
 8003d60:	4099      	lsls	r1, r3
 8003d62:	000b      	movs	r3, r1
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	08da      	lsrs	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3208      	adds	r2, #8
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	58d3      	ldr	r3, [r2, r3]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	2107      	movs	r1, #7
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	0092      	lsls	r2, r2, #2
 8003d7e:	210f      	movs	r1, #15
 8003d80:	4091      	lsls	r1, r2
 8003d82:	000a      	movs	r2, r1
 8003d84:	43d1      	mvns	r1, r2
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	08d2      	lsrs	r2, r2, #3
 8003d8a:	4019      	ands	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3208      	adds	r2, #8
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	0052      	lsls	r2, r2, #1
 8003d9c:	2103      	movs	r1, #3
 8003d9e:	4091      	lsls	r1, r2
 8003da0:	000a      	movs	r2, r1
 8003da2:	43d2      	mvns	r2, r2
 8003da4:	401a      	ands	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2101      	movs	r1, #1
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4091      	lsls	r1, r2
 8003db4:	000a      	movs	r2, r1
 8003db6:	43d2      	mvns	r2, r2
 8003db8:	401a      	ands	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	0052      	lsls	r2, r2, #1
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	4091      	lsls	r1, r2
 8003dca:	000a      	movs	r2, r1
 8003dcc:	43d2      	mvns	r2, r2
 8003dce:	401a      	ands	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	40da      	lsrs	r2, r3
 8003de0:	1e13      	subs	r3, r2, #0
 8003de2:	d000      	beq.n	8003de6 <HAL_GPIO_DeInit+0x186>
 8003de4:	e744      	b.n	8003c70 <HAL_GPIO_DeInit+0x10>
  }
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	46c0      	nop			@ (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b006      	add	sp, #24
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021800 	.word	0x40021800
 8003df4:	50000400 	.word	0x50000400
 8003df8:	50000800 	.word	0x50000800
 8003dfc:	50000c00 	.word	0x50000c00

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	0008      	movs	r0, r1
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	1cbb      	adds	r3, r7, #2
 8003e0e:	1c02      	adds	r2, r0, #0
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	1c7b      	adds	r3, r7, #1
 8003e14:	1c0a      	adds	r2, r1, #0
 8003e16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e18:	1c7b      	adds	r3, r7, #1
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e20:	1cbb      	adds	r3, r7, #2
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e2a:	1cbb      	adds	r3, r7, #2
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b002      	add	sp, #8
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	000a      	movs	r2, r1
 8003e44:	1cbb      	adds	r3, r7, #2
 8003e46:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e4e:	1cbb      	adds	r3, r7, #2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	041a      	lsls	r2, r3, #16
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	1cb9      	adds	r1, r7, #2
 8003e5e:	8809      	ldrh	r1, [r1, #0]
 8003e60:	400b      	ands	r3, r1
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	619a      	str	r2, [r3, #24]
}
 8003e68:	46c0      	nop			@ (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b004      	add	sp, #16
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e08f      	b.n	8003fa2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2241      	movs	r2, #65	@ 0x41
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2240      	movs	r2, #64	@ 0x40
 8003e92:	2100      	movs	r1, #0
 8003e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7fd fcdd 	bl	8001858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2241      	movs	r2, #65	@ 0x41
 8003ea2:	2124      	movs	r1, #36	@ 0x24
 8003ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	438a      	bics	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	493b      	ldr	r1, [pc, #236]	@ (8003fac <HAL_I2C_Init+0x13c>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4938      	ldr	r1, [pc, #224]	@ (8003fb0 <HAL_I2C_Init+0x140>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d108      	bne.n	8003eee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2180      	movs	r1, #128	@ 0x80
 8003ee6:	0209      	lsls	r1, r1, #8
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	e007      	b.n	8003efe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2184      	movs	r1, #132	@ 0x84
 8003ef8:	0209      	lsls	r1, r1, #8
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d109      	bne.n	8003f1a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2180      	movs	r1, #128	@ 0x80
 8003f12:	0109      	lsls	r1, r1, #4
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	e007      	b.n	8003f2a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4923      	ldr	r1, [pc, #140]	@ (8003fb4 <HAL_I2C_Init+0x144>)
 8003f26:	400a      	ands	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4920      	ldr	r1, [pc, #128]	@ (8003fb8 <HAL_I2C_Init+0x148>)
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	491a      	ldr	r1, [pc, #104]	@ (8003fb0 <HAL_I2C_Init+0x140>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69d9      	ldr	r1, [r3, #28]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2241      	movs	r2, #65	@ 0x41
 8003f8e:	2120      	movs	r1, #32
 8003f90:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2242      	movs	r2, #66	@ 0x42
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b002      	add	sp, #8
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	f0ffffff 	.word	0xf0ffffff
 8003fb0:	ffff7fff 	.word	0xffff7fff
 8003fb4:	fffff7ff 	.word	0xfffff7ff
 8003fb8:	02008000 	.word	0x02008000

08003fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2241      	movs	r2, #65	@ 0x41
 8003fca:	5c9b      	ldrb	r3, [r3, r2]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d138      	bne.n	8004044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2240      	movs	r2, #64	@ 0x40
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e032      	b.n	8004046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2240      	movs	r2, #64	@ 0x40
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2241      	movs	r2, #65	@ 0x41
 8003fec:	2124      	movs	r1, #36	@ 0x24
 8003fee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	438a      	bics	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4911      	ldr	r1, [pc, #68]	@ (8004050 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800400c:	400a      	ands	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2101      	movs	r1, #1
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2241      	movs	r2, #65	@ 0x41
 8004034:	2120      	movs	r1, #32
 8004036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2240      	movs	r2, #64	@ 0x40
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b002      	add	sp, #8
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	ffffefff 	.word	0xffffefff

08004054 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2241      	movs	r2, #65	@ 0x41
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b20      	cmp	r3, #32
 8004068:	d139      	bne.n	80040de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2240      	movs	r2, #64	@ 0x40
 800406e:	5c9b      	ldrb	r3, [r3, r2]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004074:	2302      	movs	r3, #2
 8004076:	e033      	b.n	80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	@ 0x40
 800407c:	2101      	movs	r1, #1
 800407e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2241      	movs	r2, #65	@ 0x41
 8004084:	2124      	movs	r1, #36	@ 0x24
 8004086:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2101      	movs	r1, #1
 80040c6:	430a      	orrs	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2241      	movs	r2, #65	@ 0x41
 80040ce:	2120      	movs	r1, #32
 80040d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2240      	movs	r2, #64	@ 0x40
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
  }
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	fffff0ff 	.word	0xfffff0ff

080040ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80040f4:	4b19      	ldr	r3, [pc, #100]	@ (800415c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a19      	ldr	r2, [pc, #100]	@ (8004160 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	4b17      	ldr	r3, [pc, #92]	@ (800415c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	429a      	cmp	r2, r3
 800410e:	d11f      	bne.n	8004150 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004110:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	0013      	movs	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	189b      	adds	r3, r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4912      	ldr	r1, [pc, #72]	@ (8004168 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800411e:	0018      	movs	r0, r3
 8004120:	f7fb ffee 	bl	8000100 <__udivsi3>
 8004124:	0003      	movs	r3, r0
 8004126:	3301      	adds	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800412a:	e008      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e009      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413e:	4b07      	ldr	r3, [pc, #28]	@ (800415c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	401a      	ands	r2, r3
 8004148:	2380      	movs	r3, #128	@ 0x80
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	429a      	cmp	r2, r3
 800414e:	d0ed      	beq.n	800412c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b004      	add	sp, #16
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	40007000 	.word	0x40007000
 8004160:	fffff9ff 	.word	0xfffff9ff
 8004164:	20000004 	.word	0x20000004
 8004168:	000f4240 	.word	0x000f4240

0800416c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004170:	4b03      	ldr	r3, [pc, #12]	@ (8004180 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	23e0      	movs	r3, #224	@ 0xe0
 8004176:	01db      	lsls	r3, r3, #7
 8004178:	4013      	ands	r3, r2
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000

08004184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e2f3      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d100      	bne.n	80041a2 <HAL_RCC_OscConfig+0x1e>
 80041a0:	e07c      	b.n	800429c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a2:	4bc3      	ldr	r3, [pc, #780]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2238      	movs	r2, #56	@ 0x38
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ac:	4bc0      	ldr	r3, [pc, #768]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2203      	movs	r2, #3
 80041b2:	4013      	ands	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_OscConfig+0x3e>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d002      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4bb9      	ldr	r3, [pc, #740]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	029b      	lsls	r3, r3, #10
 80041d0:	4013      	ands	r3, r2
 80041d2:	d062      	beq.n	800429a <HAL_RCC_OscConfig+0x116>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d15e      	bne.n	800429a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e2ce      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	025b      	lsls	r3, r3, #9
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_OscConfig+0x78>
 80041ec:	4bb0      	ldr	r3, [pc, #704]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4baf      	ldr	r3, [pc, #700]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80041f2:	2180      	movs	r1, #128	@ 0x80
 80041f4:	0249      	lsls	r1, r1, #9
 80041f6:	430a      	orrs	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e020      	b.n	800423e <HAL_RCC_OscConfig+0xba>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	23a0      	movs	r3, #160	@ 0xa0
 8004202:	02db      	lsls	r3, r3, #11
 8004204:	429a      	cmp	r2, r3
 8004206:	d10e      	bne.n	8004226 <HAL_RCC_OscConfig+0xa2>
 8004208:	4ba9      	ldr	r3, [pc, #676]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4ba8      	ldr	r3, [pc, #672]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	02c9      	lsls	r1, r1, #11
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	4ba6      	ldr	r3, [pc, #664]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba5      	ldr	r3, [pc, #660]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800421c:	2180      	movs	r1, #128	@ 0x80
 800421e:	0249      	lsls	r1, r1, #9
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0xba>
 8004226:	4ba2      	ldr	r3, [pc, #648]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4ba1      	ldr	r3, [pc, #644]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800422c:	49a1      	ldr	r1, [pc, #644]	@ (80044b4 <HAL_RCC_OscConfig+0x330>)
 800422e:	400a      	ands	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	4b9f      	ldr	r3, [pc, #636]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b9e      	ldr	r3, [pc, #632]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004238:	499f      	ldr	r1, [pc, #636]	@ (80044b8 <HAL_RCC_OscConfig+0x334>)
 800423a:	400a      	ands	r2, r1
 800423c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d014      	beq.n	8004270 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd fdfb 	bl	8001e40 <HAL_GetTick>
 800424a:	0003      	movs	r3, r0
 800424c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd fdf6 	bl	8001e40 <HAL_GetTick>
 8004254:	0002      	movs	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	@ 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e28d      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004262:	4b93      	ldr	r3, [pc, #588]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	@ 0x80
 8004268:	029b      	lsls	r3, r3, #10
 800426a:	4013      	ands	r3, r2
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xcc>
 800426e:	e015      	b.n	800429c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd fde6 	bl	8001e40 <HAL_GetTick>
 8004274:	0003      	movs	r3, r0
 8004276:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427a:	f7fd fde1 	bl	8001e40 <HAL_GetTick>
 800427e:	0002      	movs	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	@ 0x64
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e278      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428c:	4b88      	ldr	r3, [pc, #544]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	4013      	ands	r3, r2
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0xf6>
 8004298:	e000      	b.n	800429c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2202      	movs	r2, #2
 80042a2:	4013      	ands	r3, r2
 80042a4:	d100      	bne.n	80042a8 <HAL_RCC_OscConfig+0x124>
 80042a6:	e099      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a8:	4b81      	ldr	r3, [pc, #516]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2238      	movs	r2, #56	@ 0x38
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b2:	4b7f      	ldr	r3, [pc, #508]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2203      	movs	r2, #3
 80042b8:	4013      	ands	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_OscConfig+0x144>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d002      	beq.n	80042ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d135      	bne.n	800433a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ce:	4b78      	ldr	r3, [pc, #480]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4013      	ands	r3, r2
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x162>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e24b      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e6:	4b72      	ldr	r3, [pc, #456]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4a74      	ldr	r2, [pc, #464]	@ (80044bc <HAL_RCC_OscConfig+0x338>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	0019      	movs	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	4b6e      	ldr	r3, [pc, #440]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d112      	bne.n	8004328 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004302:	4b6b      	ldr	r3, [pc, #428]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6e      	ldr	r2, [pc, #440]	@ (80044c0 <HAL_RCC_OscConfig+0x33c>)
 8004308:	4013      	ands	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	4b67      	ldr	r3, [pc, #412]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004316:	4b66      	ldr	r3, [pc, #408]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	0adb      	lsrs	r3, r3, #11
 800431c:	2207      	movs	r2, #7
 800431e:	4013      	ands	r3, r2
 8004320:	4a68      	ldr	r2, [pc, #416]	@ (80044c4 <HAL_RCC_OscConfig+0x340>)
 8004322:	40da      	lsrs	r2, r3
 8004324:	4b68      	ldr	r3, [pc, #416]	@ (80044c8 <HAL_RCC_OscConfig+0x344>)
 8004326:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004328:	4b68      	ldr	r3, [pc, #416]	@ (80044cc <HAL_RCC_OscConfig+0x348>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fd fd2b 	bl	8001d88 <HAL_InitTick>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d051      	beq.n	80043da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e221      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d030      	beq.n	80043a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004342:	4b5b      	ldr	r3, [pc, #364]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5e      	ldr	r2, [pc, #376]	@ (80044c0 <HAL_RCC_OscConfig+0x33c>)
 8004348:	4013      	ands	r3, r2
 800434a:	0019      	movs	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	4b57      	ldr	r3, [pc, #348]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004356:	4b56      	ldr	r3, [pc, #344]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b55      	ldr	r3, [pc, #340]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800435c:	2180      	movs	r1, #128	@ 0x80
 800435e:	0049      	lsls	r1, r1, #1
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd fd6c 	bl	8001e40 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436e:	f7fd fd67 	bl	8001e40 <HAL_GetTick>
 8004372:	0002      	movs	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1fe      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004380:	4b4b      	ldr	r3, [pc, #300]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4013      	ands	r3, r2
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b48      	ldr	r3, [pc, #288]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a4a      	ldr	r2, [pc, #296]	@ (80044bc <HAL_RCC_OscConfig+0x338>)
 8004392:	4013      	ands	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	4b44      	ldr	r3, [pc, #272]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	e01b      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043a4:	4b42      	ldr	r3, [pc, #264]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b41      	ldr	r3, [pc, #260]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80043aa:	4949      	ldr	r1, [pc, #292]	@ (80044d0 <HAL_RCC_OscConfig+0x34c>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd fd46 	bl	8001e40 <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ba:	f7fd fd41 	bl	8001e40 <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e1d8      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043cc:	4b38      	ldr	r3, [pc, #224]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	@ 0x80
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4013      	ands	r3, r2
 80043d6:	d1f0      	bne.n	80043ba <HAL_RCC_OscConfig+0x236>
 80043d8:	e000      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	4013      	ands	r3, r2
 80043e4:	d047      	beq.n	8004476 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043e6:	4b32      	ldr	r3, [pc, #200]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2238      	movs	r2, #56	@ 0x38
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b18      	cmp	r3, #24
 80043f0:	d10a      	bne.n	8004408 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80043f2:	4b2f      	ldr	r3, [pc, #188]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	2202      	movs	r2, #2
 80043f8:	4013      	ands	r3, r2
 80043fa:	d03c      	beq.n	8004476 <HAL_RCC_OscConfig+0x2f2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d138      	bne.n	8004476 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e1ba      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d019      	beq.n	8004444 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004410:	4b27      	ldr	r3, [pc, #156]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004412:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004414:	4b26      	ldr	r3, [pc, #152]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004416:	2101      	movs	r1, #1
 8004418:	430a      	orrs	r2, r1
 800441a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fd fd10 	bl	8001e40 <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004426:	f7fd fd0b 	bl	8001e40 <HAL_GetTick>
 800442a:	0002      	movs	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a2      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004438:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800443a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443c:	2202      	movs	r2, #2
 800443e:	4013      	ands	r3, r2
 8004440:	d0f1      	beq.n	8004426 <HAL_RCC_OscConfig+0x2a2>
 8004442:	e018      	b.n	8004476 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004444:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004446:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004448:	4b19      	ldr	r3, [pc, #100]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800444a:	2101      	movs	r1, #1
 800444c:	438a      	bics	r2, r1
 800444e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd fcf6 	bl	8001e40 <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445a:	f7fd fcf1 	bl	8001e40 <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e188      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800446c:	4b10      	ldr	r3, [pc, #64]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	2202      	movs	r2, #2
 8004472:	4013      	ands	r3, r2
 8004474:	d1f1      	bne.n	800445a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2204      	movs	r2, #4
 800447c:	4013      	ands	r3, r2
 800447e:	d100      	bne.n	8004482 <HAL_RCC_OscConfig+0x2fe>
 8004480:	e0c6      	b.n	8004610 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004482:	231f      	movs	r3, #31
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800448a:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2238      	movs	r2, #56	@ 0x38
 8004490:	4013      	ands	r3, r2
 8004492:	2b20      	cmp	r3, #32
 8004494:	d11e      	bne.n	80044d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCC_OscConfig+0x32c>)
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	2202      	movs	r2, #2
 800449c:	4013      	ands	r3, r2
 800449e:	d100      	bne.n	80044a2 <HAL_RCC_OscConfig+0x31e>
 80044a0:	e0b6      	b.n	8004610 <HAL_RCC_OscConfig+0x48c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d000      	beq.n	80044ac <HAL_RCC_OscConfig+0x328>
 80044aa:	e0b1      	b.n	8004610 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e166      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
 80044b0:	40021000 	.word	0x40021000
 80044b4:	fffeffff 	.word	0xfffeffff
 80044b8:	fffbffff 	.word	0xfffbffff
 80044bc:	ffff80ff 	.word	0xffff80ff
 80044c0:	ffffc7ff 	.word	0xffffc7ff
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	20000004 	.word	0x20000004
 80044cc:	20000008 	.word	0x20000008
 80044d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044d4:	4bac      	ldr	r3, [pc, #688]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80044d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	055b      	lsls	r3, r3, #21
 80044dc:	4013      	ands	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_OscConfig+0x360>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x362>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d011      	beq.n	800450e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	4ba7      	ldr	r3, [pc, #668]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80044ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80044f0:	2180      	movs	r1, #128	@ 0x80
 80044f2:	0549      	lsls	r1, r1, #21
 80044f4:	430a      	orrs	r2, r1
 80044f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044f8:	4ba3      	ldr	r3, [pc, #652]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80044fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044fc:	2380      	movs	r3, #128	@ 0x80
 80044fe:	055b      	lsls	r3, r3, #21
 8004500:	4013      	ands	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004506:	231f      	movs	r3, #31
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450e:	4b9f      	ldr	r3, [pc, #636]	@ (800478c <HAL_RCC_OscConfig+0x608>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4013      	ands	r3, r2
 8004518:	d11a      	bne.n	8004550 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800451a:	4b9c      	ldr	r3, [pc, #624]	@ (800478c <HAL_RCC_OscConfig+0x608>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b9b      	ldr	r3, [pc, #620]	@ (800478c <HAL_RCC_OscConfig+0x608>)
 8004520:	2180      	movs	r1, #128	@ 0x80
 8004522:	0049      	lsls	r1, r1, #1
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004528:	f7fd fc8a 	bl	8001e40 <HAL_GetTick>
 800452c:	0003      	movs	r3, r0
 800452e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fd fc85 	bl	8001e40 <HAL_GetTick>
 8004536:	0002      	movs	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e11c      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	4b91      	ldr	r3, [pc, #580]	@ (800478c <HAL_RCC_OscConfig+0x608>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2380      	movs	r3, #128	@ 0x80
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4013      	ands	r3, r2
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x3e2>
 8004558:	4b8b      	ldr	r3, [pc, #556]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800455a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800455c:	4b8a      	ldr	r3, [pc, #552]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800455e:	2101      	movs	r1, #1
 8004560:	430a      	orrs	r2, r1
 8004562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004564:	e01c      	b.n	80045a0 <HAL_RCC_OscConfig+0x41c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x404>
 800456e:	4b86      	ldr	r3, [pc, #536]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004570:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004572:	4b85      	ldr	r3, [pc, #532]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004574:	2104      	movs	r1, #4
 8004576:	430a      	orrs	r2, r1
 8004578:	65da      	str	r2, [r3, #92]	@ 0x5c
 800457a:	4b83      	ldr	r3, [pc, #524]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800457c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800457e:	4b82      	ldr	r3, [pc, #520]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004580:	2101      	movs	r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x41c>
 8004588:	4b7f      	ldr	r3, [pc, #508]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800458a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800458c:	4b7e      	ldr	r3, [pc, #504]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800458e:	2101      	movs	r1, #1
 8004590:	438a      	bics	r2, r1
 8004592:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004594:	4b7c      	ldr	r3, [pc, #496]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004596:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004598:	4b7b      	ldr	r3, [pc, #492]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800459a:	2104      	movs	r1, #4
 800459c:	438a      	bics	r2, r1
 800459e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fc4a 	bl	8001e40 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b0:	e009      	b.n	80045c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fd fc45 	bl	8001e40 <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	4a74      	ldr	r2, [pc, #464]	@ (8004790 <HAL_RCC_OscConfig+0x60c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0db      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	4b70      	ldr	r3, [pc, #448]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	2202      	movs	r2, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x42e>
 80045d0:	e013      	b.n	80045fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fd fc35 	bl	8001e40 <HAL_GetTick>
 80045d6:	0003      	movs	r3, r0
 80045d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045da:	e009      	b.n	80045f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fd fc30 	bl	8001e40 <HAL_GetTick>
 80045e0:	0002      	movs	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004790 <HAL_RCC_OscConfig+0x60c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e0c6      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f0:	4b65      	ldr	r3, [pc, #404]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80045f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f4:	2202      	movs	r2, #2
 80045f6:	4013      	ands	r3, r2
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80045fa:	231f      	movs	r3, #31
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004604:	4b60      	ldr	r3, [pc, #384]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004608:	4b5f      	ldr	r3, [pc, #380]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800460a:	4962      	ldr	r1, [pc, #392]	@ (8004794 <HAL_RCC_OscConfig+0x610>)
 800460c:	400a      	ands	r2, r1
 800460e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d100      	bne.n	800461a <HAL_RCC_OscConfig+0x496>
 8004618:	e0b0      	b.n	800477c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800461a:	4b5b      	ldr	r3, [pc, #364]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2238      	movs	r2, #56	@ 0x38
 8004620:	4013      	ands	r3, r2
 8004622:	2b10      	cmp	r3, #16
 8004624:	d100      	bne.n	8004628 <HAL_RCC_OscConfig+0x4a4>
 8004626:	e078      	b.n	800471a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d153      	bne.n	80046d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004630:	4b55      	ldr	r3, [pc, #340]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b54      	ldr	r3, [pc, #336]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004636:	4958      	ldr	r1, [pc, #352]	@ (8004798 <HAL_RCC_OscConfig+0x614>)
 8004638:	400a      	ands	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fc00 	bl	8001e40 <HAL_GetTick>
 8004640:	0003      	movs	r3, r0
 8004642:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fd fbfb 	bl	8001e40 <HAL_GetTick>
 800464a:	0002      	movs	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e092      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	4b4b      	ldr	r3, [pc, #300]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	2380      	movs	r3, #128	@ 0x80
 800465e:	049b      	lsls	r3, r3, #18
 8004660:	4013      	ands	r3, r2
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004664:	4b48      	ldr	r3, [pc, #288]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a4c      	ldr	r2, [pc, #304]	@ (800479c <HAL_RCC_OscConfig+0x618>)
 800466a:	4013      	ands	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	431a      	orrs	r2, r3
 800468c:	4b3e      	ldr	r3, [pc, #248]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800468e:	430a      	orrs	r2, r1
 8004690:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004692:	4b3d      	ldr	r3, [pc, #244]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b3c      	ldr	r3, [pc, #240]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004698:	2180      	movs	r1, #128	@ 0x80
 800469a:	0449      	lsls	r1, r1, #17
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046a0:	4b39      	ldr	r3, [pc, #228]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b38      	ldr	r3, [pc, #224]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80046a6:	2180      	movs	r1, #128	@ 0x80
 80046a8:	0549      	lsls	r1, r1, #21
 80046aa:	430a      	orrs	r2, r1
 80046ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fd fbc7 	bl	8001e40 <HAL_GetTick>
 80046b2:	0003      	movs	r3, r0
 80046b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fd fbc2 	bl	8001e40 <HAL_GetTick>
 80046bc:	0002      	movs	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e059      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	2380      	movs	r3, #128	@ 0x80
 80046d0:	049b      	lsls	r3, r3, #18
 80046d2:	4013      	ands	r3, r2
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x534>
 80046d6:	e051      	b.n	800477c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 80046de:	492e      	ldr	r1, [pc, #184]	@ (8004798 <HAL_RCC_OscConfig+0x614>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fbac 	bl	8001e40 <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fd fba7 	bl	8001e40 <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e03e      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004700:	4b21      	ldr	r3, [pc, #132]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	049b      	lsls	r3, r3, #18
 8004708:	4013      	ands	r3, r2
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800470c:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004712:	4923      	ldr	r1, [pc, #140]	@ (80047a0 <HAL_RCC_OscConfig+0x61c>)
 8004714:	400a      	ands	r2, r1
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	e030      	b.n	800477c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e02b      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004726:	4b18      	ldr	r3, [pc, #96]	@ (8004788 <HAL_RCC_OscConfig+0x604>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2203      	movs	r2, #3
 8004730:	401a      	ands	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	429a      	cmp	r2, r3
 8004738:	d11e      	bne.n	8004778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2270      	movs	r2, #112	@ 0x70
 800473e:	401a      	ands	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d117      	bne.n	8004778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	23fe      	movs	r3, #254	@ 0xfe
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	401a      	ands	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d10e      	bne.n	8004778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	23f8      	movs	r3, #248	@ 0xf8
 800475e:	039b      	lsls	r3, r3, #14
 8004760:	401a      	ands	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d106      	bne.n	8004778 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	0f5b      	lsrs	r3, r3, #29
 800476e:	075a      	lsls	r2, r3, #29
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b008      	add	sp, #32
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
 8004790:	00001388 	.word	0x00001388
 8004794:	efffffff 	.word	0xefffffff
 8004798:	feffffff 	.word	0xfeffffff
 800479c:	1fc1808c 	.word	0x1fc1808c
 80047a0:	effefffc 	.word	0xeffefffc

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0e9      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b76      	ldr	r3, [pc, #472]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2207      	movs	r2, #7
 80047be:	4013      	ands	r3, r2
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d91e      	bls.n	8004804 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b73      	ldr	r3, [pc, #460]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2207      	movs	r2, #7
 80047cc:	4393      	bics	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	4b70      	ldr	r3, [pc, #448]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047d8:	f7fd fb32 	bl	8001e40 <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047e0:	e009      	b.n	80047f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e2:	f7fd fb2d 	bl	8001e40 <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e0ca      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047f6:	4b67      	ldr	r3, [pc, #412]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2207      	movs	r2, #7
 80047fc:	4013      	ands	r3, r2
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d1ee      	bne.n	80047e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2202      	movs	r2, #2
 800480a:	4013      	ands	r3, r2
 800480c:	d015      	beq.n	800483a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2204      	movs	r2, #4
 8004814:	4013      	ands	r3, r2
 8004816:	d006      	beq.n	8004826 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004818:	4b60      	ldr	r3, [pc, #384]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	4b5f      	ldr	r3, [pc, #380]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800481e:	21e0      	movs	r1, #224	@ 0xe0
 8004820:	01c9      	lsls	r1, r1, #7
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004826:	4b5d      	ldr	r3, [pc, #372]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	4a5d      	ldr	r2, [pc, #372]	@ (80049a0 <HAL_RCC_ClockConfig+0x1fc>)
 800482c:	4013      	ands	r3, r2
 800482e:	0019      	movs	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	4b59      	ldr	r3, [pc, #356]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	4013      	ands	r3, r2
 8004842:	d057      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800484c:	4b53      	ldr	r3, [pc, #332]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	4013      	ands	r3, r2
 8004856:	d12b      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e097      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d107      	bne.n	8004874 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004864:	4b4d      	ldr	r3, [pc, #308]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	049b      	lsls	r3, r3, #18
 800486c:	4013      	ands	r3, r2
 800486e:	d11f      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e08b      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800487c:	4b47      	ldr	r3, [pc, #284]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4013      	ands	r3, r2
 8004886:	d113      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e07f      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004894:	4b41      	ldr	r3, [pc, #260]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004898:	2202      	movs	r2, #2
 800489a:	4013      	ands	r3, r2
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e074      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a2:	4b3e      	ldr	r3, [pc, #248]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a6:	2202      	movs	r2, #2
 80048a8:	4013      	ands	r3, r2
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e06d      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048b0:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2207      	movs	r2, #7
 80048b6:	4393      	bics	r3, r2
 80048b8:	0019      	movs	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	4b37      	ldr	r3, [pc, #220]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c4:	f7fd fabc 	bl	8001e40 <HAL_GetTick>
 80048c8:	0003      	movs	r3, r0
 80048ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048cc:	e009      	b.n	80048e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ce:	f7fd fab7 	bl	8001e40 <HAL_GetTick>
 80048d2:	0002      	movs	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e054      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	4b2e      	ldr	r3, [pc, #184]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2238      	movs	r2, #56	@ 0x38
 80048e8:	401a      	ands	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1ec      	bne.n	80048ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f4:	4b27      	ldr	r3, [pc, #156]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2207      	movs	r2, #7
 80048fa:	4013      	ands	r3, r2
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d21e      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2207      	movs	r2, #7
 8004908:	4393      	bics	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	4b21      	ldr	r3, [pc, #132]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004914:	f7fd fa94 	bl	8001e40 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800491c:	e009      	b.n	8004932 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491e:	f7fd fa8f 	bl	8001e40 <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	4a1b      	ldr	r2, [pc, #108]	@ (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e02c      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004932:	4b18      	ldr	r3, [pc, #96]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2207      	movs	r2, #7
 8004938:	4013      	ands	r3, r2
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2204      	movs	r2, #4
 8004946:	4013      	ands	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4a15      	ldr	r2, [pc, #84]	@ (80049a4 <HAL_RCC_ClockConfig+0x200>)
 8004950:	4013      	ands	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	4b10      	ldr	r3, [pc, #64]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800495e:	f000 f829 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004962:	0001      	movs	r1, r0
 8004964:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	220f      	movs	r2, #15
 800496c:	401a      	ands	r2, r3
 800496e:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <HAL_RCC_ClockConfig+0x204>)
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	58d3      	ldr	r3, [r2, r3]
 8004974:	221f      	movs	r2, #31
 8004976:	4013      	ands	r3, r2
 8004978:	000a      	movs	r2, r1
 800497a:	40da      	lsrs	r2, r3
 800497c:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <HAL_RCC_ClockConfig+0x208>)
 800497e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004980:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <HAL_RCC_ClockConfig+0x20c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fd f9ff 	bl	8001d88 <HAL_InitTick>
 800498a:	0003      	movs	r3, r0
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	b004      	add	sp, #16
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40022000 	.word	0x40022000
 8004998:	00001388 	.word	0x00001388
 800499c:	40021000 	.word	0x40021000
 80049a0:	fffff0ff 	.word	0xfffff0ff
 80049a4:	ffff8fff 	.word	0xffff8fff
 80049a8:	08007d14 	.word	0x08007d14
 80049ac:	20000004 	.word	0x20000004
 80049b0:	20000008 	.word	0x20000008

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ba:	4b3c      	ldr	r3, [pc, #240]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2238      	movs	r2, #56	@ 0x38
 80049c0:	4013      	ands	r3, r2
 80049c2:	d10f      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80049c4:	4b39      	ldr	r3, [pc, #228]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0adb      	lsrs	r3, r3, #11
 80049ca:	2207      	movs	r2, #7
 80049cc:	4013      	ands	r3, r2
 80049ce:	2201      	movs	r2, #1
 80049d0:	409a      	lsls	r2, r3
 80049d2:	0013      	movs	r3, r2
 80049d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	4835      	ldr	r0, [pc, #212]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049da:	f7fb fb91 	bl	8000100 <__udivsi3>
 80049de:	0003      	movs	r3, r0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e05d      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e4:	4b31      	ldr	r3, [pc, #196]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2238      	movs	r2, #56	@ 0x38
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d102      	bne.n	80049f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f0:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	e054      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f6:	4b2d      	ldr	r3, [pc, #180]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2238      	movs	r2, #56	@ 0x38
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d138      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a02:	4b2a      	ldr	r3, [pc, #168]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2203      	movs	r2, #3
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a0c:	4b27      	ldr	r3, [pc, #156]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	2207      	movs	r2, #7
 8004a14:	4013      	ands	r3, r2
 8004a16:	3301      	adds	r3, #1
 8004a18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	4824      	ldr	r0, [pc, #144]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a24:	f7fb fb6c 	bl	8000100 <__udivsi3>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	227f      	movs	r2, #127	@ 0x7f
 8004a34:	4013      	ands	r3, r2
 8004a36:	434b      	muls	r3, r1
 8004a38:	617b      	str	r3, [r7, #20]
        break;
 8004a3a:	e00d      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	481c      	ldr	r0, [pc, #112]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a40:	f7fb fb5e 	bl	8000100 <__udivsi3>
 8004a44:	0003      	movs	r3, r0
 8004a46:	0019      	movs	r1, r3
 8004a48:	4b18      	ldr	r3, [pc, #96]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	227f      	movs	r2, #127	@ 0x7f
 8004a50:	4013      	ands	r3, r2
 8004a52:	434b      	muls	r3, r1
 8004a54:	617b      	str	r3, [r7, #20]
        break;
 8004a56:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a58:	4b14      	ldr	r3, [pc, #80]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	0f5b      	lsrs	r3, r3, #29
 8004a5e:	2207      	movs	r2, #7
 8004a60:	4013      	ands	r3, r2
 8004a62:	3301      	adds	r3, #1
 8004a64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	6978      	ldr	r0, [r7, #20]
 8004a6a:	f7fb fb49 	bl	8000100 <__udivsi3>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e015      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a74:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2238      	movs	r2, #56	@ 0x38
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d103      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a88:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2238      	movs	r2, #56	@ 0x38
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b18      	cmp	r3, #24
 8004a92:	d103      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a94:	23fa      	movs	r3, #250	@ 0xfa
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004aa0:	693b      	ldr	r3, [r7, #16]
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b006      	add	sp, #24
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	00f42400 	.word	0x00f42400
 8004ab4:	007a1200 	.word	0x007a1200

08004ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004abc:	4b02      	ldr	r3, [pc, #8]	@ (8004ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	20000004 	.word	0x20000004

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b5b0      	push	{r4, r5, r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ad0:	f7ff fff2 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004ad4:	0004      	movs	r4, r0
 8004ad6:	f7ff fb49 	bl	800416c <LL_RCC_GetAPB1Prescaler>
 8004ada:	0003      	movs	r3, r0
 8004adc:	0b1a      	lsrs	r2, r3, #12
 8004ade:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	58d3      	ldr	r3, [r2, r3]
 8004ae4:	221f      	movs	r2, #31
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	40dc      	lsrs	r4, r3
 8004aea:	0023      	movs	r3, r4
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bdb0      	pop	{r4, r5, r7, pc}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	08007d54 	.word	0x08007d54

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b00:	2313      	movs	r3, #19
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b08:	2312      	movs	r3, #18
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b1c:	e0a3      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1e:	2011      	movs	r0, #17
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b26:	4b7f      	ldr	r3, [pc, #508]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	055b      	lsls	r3, r3, #21
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d110      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b7c      	ldr	r3, [pc, #496]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b36:	4b7b      	ldr	r3, [pc, #492]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b38:	2180      	movs	r1, #128	@ 0x80
 8004b3a:	0549      	lsls	r1, r1, #21
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b40:	4b78      	ldr	r3, [pc, #480]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	055b      	lsls	r3, r3, #21
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	183b      	adds	r3, r7, r0
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b54:	4b74      	ldr	r3, [pc, #464]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b73      	ldr	r3, [pc, #460]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b5a:	2180      	movs	r1, #128	@ 0x80
 8004b5c:	0049      	lsls	r1, r1, #1
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b62:	f7fd f96d 	bl	8001e40 <HAL_GetTick>
 8004b66:	0003      	movs	r3, r0
 8004b68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6c:	f7fd f968 	bl	8001e40 <HAL_GetTick>
 8004b70:	0002      	movs	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d904      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004b7a:	2313      	movs	r3, #19
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	2203      	movs	r2, #3
 8004b80:	701a      	strb	r2, [r3, #0]
        break;
 8004b82:	e005      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b84:	4b68      	ldr	r3, [pc, #416]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	2380      	movs	r3, #128	@ 0x80
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d0ed      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004b90:	2313      	movs	r3, #19
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d154      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b9a:	4b62      	ldr	r3, [pc, #392]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b9e:	23c0      	movs	r3, #192	@ 0xc0
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d019      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d014      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	4a5c      	ldr	r2, [pc, #368]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bc0:	4b58      	ldr	r3, [pc, #352]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bc4:	4b57      	ldr	r3, [pc, #348]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bc6:	2180      	movs	r1, #128	@ 0x80
 8004bc8:	0249      	lsls	r1, r1, #9
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bce:	4b55      	ldr	r3, [pc, #340]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bd2:	4b54      	ldr	r3, [pc, #336]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bd4:	4956      	ldr	r1, [pc, #344]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bda:	4b52      	ldr	r3, [pc, #328]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2201      	movs	r2, #1
 8004be4:	4013      	ands	r3, r2
 8004be6:	d016      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd f92a 	bl	8001e40 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf0:	e00c      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fd f925 	bl	8001e40 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d904      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c02:	2313      	movs	r3, #19
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	2203      	movs	r2, #3
 8004c08:	701a      	strb	r2, [r3, #0]
            break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	4b45      	ldr	r3, [pc, #276]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d0ed      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c16:	2313      	movs	r3, #19
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c20:	4b40      	ldr	r3, [pc, #256]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	4a41      	ldr	r2, [pc, #260]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c34:	e00c      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c36:	2312      	movs	r3, #18
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2213      	movs	r2, #19
 8004c3c:	18ba      	adds	r2, r7, r2
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e005      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	2312      	movs	r3, #18
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2213      	movs	r2, #19
 8004c4a:	18ba      	adds	r2, r7, r2
 8004c4c:	7812      	ldrb	r2, [r2, #0]
 8004c4e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c50:	2311      	movs	r3, #17
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5a:	4b32      	ldr	r3, [pc, #200]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5e:	4b31      	ldr	r3, [pc, #196]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c60:	4935      	ldr	r1, [pc, #212]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c62:	400a      	ands	r2, r1
 8004c64:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c70:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c74:	2203      	movs	r2, #3
 8004c76:	4393      	bics	r3, r2
 8004c78:	0019      	movs	r1, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	4b29      	ldr	r3, [pc, #164]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c80:	430a      	orrs	r2, r1
 8004c82:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c8e:	4b25      	ldr	r3, [pc, #148]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	4a2a      	ldr	r2, [pc, #168]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	4b21      	ldr	r3, [pc, #132]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	01db      	lsls	r3, r3, #7
 8004caa:	4013      	ands	r3, r2
 8004cac:	d015      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cae:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	0899      	lsrs	r1, r3, #2
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	2380      	movs	r3, #128	@ 0x80
 8004cc6:	05db      	lsls	r3, r3, #23
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d106      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ccc:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cd2:	2180      	movs	r1, #128	@ 0x80
 8004cd4:	0249      	lsls	r1, r1, #9
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cea:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	0019      	movs	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	01db      	lsls	r3, r3, #7
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d106      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d06:	4b07      	ldr	r3, [pc, #28]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d0c:	2180      	movs	r1, #128	@ 0x80
 8004d0e:	0249      	lsls	r1, r1, #9
 8004d10:	430a      	orrs	r2, r1
 8004d12:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d14:	2312      	movs	r3, #18
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
}
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b006      	add	sp, #24
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	fffffcff 	.word	0xfffffcff
 8004d30:	fffeffff 	.word	0xfffeffff
 8004d34:	00001388 	.word	0x00001388
 8004d38:	efffffff 	.word	0xefffffff
 8004d3c:	ffffcfff 	.word	0xffffcfff
 8004d40:	ffff3fff 	.word	0xffff3fff

08004d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e04a      	b.n	8004dec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223d      	movs	r2, #61	@ 0x3d
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	223c      	movs	r2, #60	@ 0x3c
 8004d66:	2100      	movs	r1, #0
 8004d68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fc fdbf 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223d      	movs	r2, #61	@ 0x3d
 8004d76:	2102      	movs	r1, #2
 8004d78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	0019      	movs	r1, r3
 8004d84:	0010      	movs	r0, r2
 8004d86:	f000 fd2d 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2248      	movs	r2, #72	@ 0x48
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	223e      	movs	r2, #62	@ 0x3e
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	223f      	movs	r2, #63	@ 0x3f
 8004d9e:	2101      	movs	r1, #1
 8004da0:	5499      	strb	r1, [r3, r2]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2240      	movs	r2, #64	@ 0x40
 8004da6:	2101      	movs	r1, #1
 8004da8:	5499      	strb	r1, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2241      	movs	r2, #65	@ 0x41
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2242      	movs	r2, #66	@ 0x42
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2243      	movs	r2, #67	@ 0x43
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2244      	movs	r2, #68	@ 0x44
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2245      	movs	r2, #69	@ 0x45
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2246      	movs	r2, #70	@ 0x46
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2247      	movs	r2, #71	@ 0x47
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	223d      	movs	r2, #61	@ 0x3d
 8004de6:	2101      	movs	r1, #1
 8004de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	0018      	movs	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b002      	add	sp, #8
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223d      	movs	r2, #61	@ 0x3d
 8004e00:	5c9b      	ldrb	r3, [r3, r2]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d001      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e037      	b.n	8004e7c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	223d      	movs	r2, #61	@ 0x3d
 8004e10:	2102      	movs	r1, #2
 8004e12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2101      	movs	r1, #1
 8004e20:	430a      	orrs	r2, r1
 8004e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a16      	ldr	r2, [pc, #88]	@ (8004e84 <HAL_TIM_Base_Start_IT+0x90>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x44>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a15      	ldr	r2, [pc, #84]	@ (8004e88 <HAL_TIM_Base_Start_IT+0x94>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d116      	bne.n	8004e66 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <HAL_TIM_Base_Start_IT+0x98>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d016      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0x84>
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	025b      	lsls	r3, r3, #9
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d011      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2101      	movs	r1, #1
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e64:	e008      	b.n	8004e78 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e000      	b.n	8004e7a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b004      	add	sp, #16
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	00010007 	.word	0x00010007

08004e90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	438a      	bics	r2, r1
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee4 <HAL_TIM_Base_Stop_IT+0x54>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_TIM_Base_Stop_IT+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee8 <HAL_TIM_Base_Stop_IT+0x58>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_Base_Stop_IT+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2101      	movs	r1, #1
 8004ecc:	438a      	bics	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	223d      	movs	r2, #61	@ 0x3d
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	00001111 	.word	0x00001111
 8004ee8:	00000444 	.word	0x00000444

08004eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e04a      	b.n	8004f94 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	223d      	movs	r2, #61	@ 0x3d
 8004f02:	5c9b      	ldrb	r3, [r3, r2]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	223c      	movs	r2, #60	@ 0x3c
 8004f0e:	2100      	movs	r1, #0
 8004f10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f000 f841 	bl	8004f9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	223d      	movs	r2, #61	@ 0x3d
 8004f1e:	2102      	movs	r1, #2
 8004f20:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	0010      	movs	r0, r2
 8004f2e:	f000 fc59 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2248      	movs	r2, #72	@ 0x48
 8004f36:	2101      	movs	r1, #1
 8004f38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	223e      	movs	r2, #62	@ 0x3e
 8004f3e:	2101      	movs	r1, #1
 8004f40:	5499      	strb	r1, [r3, r2]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	223f      	movs	r2, #63	@ 0x3f
 8004f46:	2101      	movs	r1, #1
 8004f48:	5499      	strb	r1, [r3, r2]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2240      	movs	r2, #64	@ 0x40
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5499      	strb	r1, [r3, r2]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2241      	movs	r2, #65	@ 0x41
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2242      	movs	r2, #66	@ 0x42
 8004f5e:	2101      	movs	r1, #1
 8004f60:	5499      	strb	r1, [r3, r2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2243      	movs	r2, #67	@ 0x43
 8004f66:	2101      	movs	r1, #1
 8004f68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2244      	movs	r2, #68	@ 0x44
 8004f6e:	2101      	movs	r1, #1
 8004f70:	5499      	strb	r1, [r3, r2]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2245      	movs	r2, #69	@ 0x45
 8004f76:	2101      	movs	r1, #1
 8004f78:	5499      	strb	r1, [r3, r2]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2246      	movs	r2, #70	@ 0x46
 8004f7e:	2101      	movs	r1, #1
 8004f80:	5499      	strb	r1, [r3, r2]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2247      	movs	r2, #71	@ 0x47
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	223d      	movs	r2, #61	@ 0x3d
 8004f8e:	2101      	movs	r1, #1
 8004f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b002      	add	sp, #8
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d108      	bne.n	8004fce <HAL_TIM_PWM_Start+0x22>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	223e      	movs	r2, #62	@ 0x3e
 8004fc0:	5c9b      	ldrb	r3, [r3, r2]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	1e5a      	subs	r2, r3, #1
 8004fc8:	4193      	sbcs	r3, r2
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e037      	b.n	800503e <HAL_TIM_PWM_Start+0x92>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d108      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0x3a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	223f      	movs	r2, #63	@ 0x3f
 8004fd8:	5c9b      	ldrb	r3, [r3, r2]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	4193      	sbcs	r3, r2
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	e02b      	b.n	800503e <HAL_TIM_PWM_Start+0x92>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d108      	bne.n	8004ffe <HAL_TIM_PWM_Start+0x52>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2240      	movs	r2, #64	@ 0x40
 8004ff0:	5c9b      	ldrb	r3, [r3, r2]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	1e5a      	subs	r2, r3, #1
 8004ff8:	4193      	sbcs	r3, r2
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e01f      	b.n	800503e <HAL_TIM_PWM_Start+0x92>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b0c      	cmp	r3, #12
 8005002:	d108      	bne.n	8005016 <HAL_TIM_PWM_Start+0x6a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2241      	movs	r2, #65	@ 0x41
 8005008:	5c9b      	ldrb	r3, [r3, r2]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	4193      	sbcs	r3, r2
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e013      	b.n	800503e <HAL_TIM_PWM_Start+0x92>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b10      	cmp	r3, #16
 800501a:	d108      	bne.n	800502e <HAL_TIM_PWM_Start+0x82>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2242      	movs	r2, #66	@ 0x42
 8005020:	5c9b      	ldrb	r3, [r3, r2]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	4193      	sbcs	r3, r2
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e007      	b.n	800503e <HAL_TIM_PWM_Start+0x92>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2243      	movs	r2, #67	@ 0x43
 8005032:	5c9b      	ldrb	r3, [r3, r2]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	4193      	sbcs	r3, r2
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e07b      	b.n	800513e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0xaa>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	223e      	movs	r2, #62	@ 0x3e
 8005050:	2102      	movs	r1, #2
 8005052:	5499      	strb	r1, [r3, r2]
 8005054:	e023      	b.n	800509e <HAL_TIM_PWM_Start+0xf2>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start+0xba>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	223f      	movs	r2, #63	@ 0x3f
 8005060:	2102      	movs	r1, #2
 8005062:	5499      	strb	r1, [r3, r2]
 8005064:	e01b      	b.n	800509e <HAL_TIM_PWM_Start+0xf2>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start+0xca>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2240      	movs	r2, #64	@ 0x40
 8005070:	2102      	movs	r1, #2
 8005072:	5499      	strb	r1, [r3, r2]
 8005074:	e013      	b.n	800509e <HAL_TIM_PWM_Start+0xf2>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Start+0xda>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2241      	movs	r2, #65	@ 0x41
 8005080:	2102      	movs	r1, #2
 8005082:	5499      	strb	r1, [r3, r2]
 8005084:	e00b      	b.n	800509e <HAL_TIM_PWM_Start+0xf2>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b10      	cmp	r3, #16
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Start+0xea>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2242      	movs	r2, #66	@ 0x42
 8005090:	2102      	movs	r1, #2
 8005092:	5499      	strb	r1, [r3, r2]
 8005094:	e003      	b.n	800509e <HAL_TIM_PWM_Start+0xf2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2243      	movs	r2, #67	@ 0x43
 800509a:	2102      	movs	r1, #2
 800509c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 ffe4 	bl	8006074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a25      	ldr	r2, [pc, #148]	@ (8005148 <HAL_TIM_PWM_Start+0x19c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_TIM_PWM_Start+0x11e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a24      	ldr	r2, [pc, #144]	@ (800514c <HAL_TIM_PWM_Start+0x1a0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_TIM_PWM_Start+0x11e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a22      	ldr	r2, [pc, #136]	@ (8005150 <HAL_TIM_PWM_Start+0x1a4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_PWM_Start+0x122>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_TIM_PWM_Start+0x124>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2180      	movs	r1, #128	@ 0x80
 80050e0:	0209      	lsls	r1, r1, #8
 80050e2:	430a      	orrs	r2, r1
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a17      	ldr	r2, [pc, #92]	@ (8005148 <HAL_TIM_PWM_Start+0x19c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIM_PWM_Start+0x14e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a17      	ldr	r2, [pc, #92]	@ (8005154 <HAL_TIM_PWM_Start+0x1a8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d116      	bne.n	8005128 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a15      	ldr	r2, [pc, #84]	@ (8005158 <HAL_TIM_PWM_Start+0x1ac>)
 8005102:	4013      	ands	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b06      	cmp	r3, #6
 800510a:	d016      	beq.n	800513a <HAL_TIM_PWM_Start+0x18e>
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	025b      	lsls	r3, r3, #9
 8005112:	429a      	cmp	r2, r3
 8005114:	d011      	beq.n	800513a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2101      	movs	r1, #1
 8005122:	430a      	orrs	r2, r1
 8005124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005126:	e008      	b.n	800513a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2101      	movs	r1, #1
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e000      	b.n	800513c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	0018      	movs	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	b004      	add	sp, #16
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800
 8005154:	40000400 	.word	0x40000400
 8005158:	00010007 	.word	0x00010007

0800515c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d021      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2203      	movs	r2, #3
 800518a:	4252      	negs	r2, r2
 800518c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2203      	movs	r2, #3
 800519c:	4013      	ands	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 fb06 	bl	80057b4 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e007      	b.n	80051ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 faf9 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f000 fb05 	bl	80057c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2204      	movs	r2, #4
 80051c4:	4013      	ands	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2204      	movs	r2, #4
 80051cc:	4013      	ands	r3, r2
 80051ce:	d01e      	beq.n	800520e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2205      	movs	r2, #5
 80051d6:	4252      	negs	r2, r2
 80051d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	23c0      	movs	r3, #192	@ 0xc0
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4013      	ands	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 fadf 	bl	80057b4 <HAL_TIM_IC_CaptureCallback>
 80051f6:	e007      	b.n	8005208 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 fad2 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 fade 	bl	80057c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2208      	movs	r2, #8
 8005212:	4013      	ands	r3, r2
 8005214:	d021      	beq.n	800525a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2208      	movs	r2, #8
 800521a:	4013      	ands	r3, r2
 800521c:	d01d      	beq.n	800525a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2209      	movs	r2, #9
 8005224:	4252      	negs	r2, r2
 8005226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2204      	movs	r2, #4
 800522c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	2203      	movs	r2, #3
 8005236:	4013      	ands	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	0018      	movs	r0, r3
 800523e:	f000 fab9 	bl	80057b4 <HAL_TIM_IC_CaptureCallback>
 8005242:	e007      	b.n	8005254 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	0018      	movs	r0, r3
 8005248:	f000 faac 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0018      	movs	r0, r3
 8005250:	f000 fab8 	bl	80057c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d022      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2210      	movs	r2, #16
 8005266:	4013      	ands	r3, r2
 8005268:	d01e      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2211      	movs	r2, #17
 8005270:	4252      	negs	r2, r2
 8005272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2208      	movs	r2, #8
 8005278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	23c0      	movs	r3, #192	@ 0xc0
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4013      	ands	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	0018      	movs	r0, r3
 800528c:	f000 fa92 	bl	80057b4 <HAL_TIM_IC_CaptureCallback>
 8005290:	e007      	b.n	80052a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fa85 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fa91 	bl	80057c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d00c      	beq.n	80052ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4013      	ands	r3, r2
 80052b6:	d008      	beq.n	80052ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2202      	movs	r2, #2
 80052be:	4252      	negs	r2, r2
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7fb fe79 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2280      	movs	r2, #128	@ 0x80
 80052ce:	4013      	ands	r3, r2
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	019b      	lsls	r3, r3, #6
 80052d8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052da:	d00b      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2280      	movs	r2, #128	@ 0x80
 80052e0:	4013      	ands	r3, r2
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <HAL_TIM_IRQHandler+0x208>)
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	0018      	movs	r0, r3
 80052f0:	f000 ffea 	bl	80062c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	d00b      	beq.n	8005316 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2280      	movs	r2, #128	@ 0x80
 8005302:	4013      	ands	r3, r2
 8005304:	d007      	beq.n	8005316 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <HAL_TIM_IRQHandler+0x20c>)
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0018      	movs	r0, r3
 8005312:	f000 ffe1 	bl	80062d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2240      	movs	r2, #64	@ 0x40
 800531a:	4013      	ands	r3, r2
 800531c:	d00c      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2240      	movs	r2, #64	@ 0x40
 8005322:	4013      	ands	r3, r2
 8005324:	d008      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2241      	movs	r2, #65	@ 0x41
 800532c:	4252      	negs	r2, r2
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 fa4e 	bl	80057d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2220      	movs	r2, #32
 800533c:	4013      	ands	r3, r2
 800533e:	d00c      	beq.n	800535a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	4013      	ands	r3, r2
 8005346:	d008      	beq.n	800535a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2221      	movs	r2, #33	@ 0x21
 800534e:	4252      	negs	r2, r2
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 ffaf 	bl	80062b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	ffffdf7f 	.word	0xffffdf7f
 8005368:	fffffeff 	.word	0xfffffeff

0800536c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005378:	2317      	movs	r3, #23
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	223c      	movs	r2, #60	@ 0x3c
 8005384:	5c9b      	ldrb	r3, [r3, r2]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_TIM_PWM_ConfigChannel+0x22>
 800538a:	2302      	movs	r3, #2
 800538c:	e0e5      	b.n	800555a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	223c      	movs	r2, #60	@ 0x3c
 8005392:	2101      	movs	r1, #1
 8005394:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b14      	cmp	r3, #20
 800539a:	d900      	bls.n	800539e <HAL_TIM_PWM_ConfigChannel+0x32>
 800539c:	e0d1      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	009a      	lsls	r2, r3, #2
 80053a2:	4b70      	ldr	r3, [pc, #448]	@ (8005564 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80053a4:	18d3      	adds	r3, r2, r3
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	0011      	movs	r1, r2
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 fa90 	bl	80058d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2108      	movs	r1, #8
 80053c4:	430a      	orrs	r2, r1
 80053c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2104      	movs	r1, #4
 80053d4:	438a      	bics	r2, r1
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]
      break;
 80053ea:	e0af      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0011      	movs	r1, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 faef 	bl	80059d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2180      	movs	r1, #128	@ 0x80
 8005406:	0109      	lsls	r1, r1, #4
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4954      	ldr	r1, [pc, #336]	@ (8005568 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005418:	400a      	ands	r2, r1
 800541a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6999      	ldr	r1, [r3, #24]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	021a      	lsls	r2, r3, #8
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	619a      	str	r2, [r3, #24]
      break;
 8005430:	e08c      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0011      	movs	r1, r2
 800543a:	0018      	movs	r0, r3
 800543c:	f000 fb4a 	bl	8005ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2108      	movs	r1, #8
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2104      	movs	r1, #4
 800545c:	438a      	bics	r2, r1
 800545e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69d9      	ldr	r1, [r3, #28]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	61da      	str	r2, [r3, #28]
      break;
 8005472:	e06b      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	0011      	movs	r1, r2
 800547c:	0018      	movs	r0, r3
 800547e:	f000 fbab 	bl	8005bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2180      	movs	r1, #128	@ 0x80
 800548e:	0109      	lsls	r1, r1, #4
 8005490:	430a      	orrs	r2, r1
 8005492:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4932      	ldr	r1, [pc, #200]	@ (8005568 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69d9      	ldr	r1, [r3, #28]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	61da      	str	r2, [r3, #28]
      break;
 80054b8:	e048      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	0011      	movs	r1, r2
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 fbec 	bl	8005ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2108      	movs	r1, #8
 80054d4:	430a      	orrs	r2, r1
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2104      	movs	r1, #4
 80054e4:	438a      	bics	r2, r1
 80054e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054fa:	e027      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	0011      	movs	r1, r2
 8005504:	0018      	movs	r0, r3
 8005506:	f000 fc25 	bl	8005d54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2180      	movs	r1, #128	@ 0x80
 8005516:	0109      	lsls	r1, r1, #4
 8005518:	430a      	orrs	r2, r1
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4910      	ldr	r1, [pc, #64]	@ (8005568 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005528:	400a      	ands	r2, r1
 800552a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005540:	e004      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005542:	2317      	movs	r3, #23
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
      break;
 800554a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	223c      	movs	r2, #60	@ 0x3c
 8005550:	2100      	movs	r1, #0
 8005552:	5499      	strb	r1, [r3, r2]

  return status;
 8005554:	2317      	movs	r3, #23
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	781b      	ldrb	r3, [r3, #0]
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b006      	add	sp, #24
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	08007d74 	.word	0x08007d74
 8005568:	fffffbff 	.word	0xfffffbff

0800556c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	230f      	movs	r3, #15
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	223c      	movs	r2, #60	@ 0x3c
 8005582:	5c9b      	ldrb	r3, [r3, r2]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIM_ConfigClockSource+0x20>
 8005588:	2302      	movs	r3, #2
 800558a:	e0bc      	b.n	8005706 <HAL_TIM_ConfigClockSource+0x19a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	223c      	movs	r2, #60	@ 0x3c
 8005590:	2101      	movs	r1, #1
 8005592:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	223d      	movs	r2, #61	@ 0x3d
 8005598:	2102      	movs	r1, #2
 800559a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a5a      	ldr	r2, [pc, #360]	@ (8005710 <HAL_TIM_ConfigClockSource+0x1a4>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a59      	ldr	r2, [pc, #356]	@ (8005714 <HAL_TIM_ConfigClockSource+0x1a8>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2280      	movs	r2, #128	@ 0x80
 80055c2:	0192      	lsls	r2, r2, #6
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_TIM_ConfigClockSource+0xde>
 80055c8:	2280      	movs	r2, #128	@ 0x80
 80055ca:	0192      	lsls	r2, r2, #6
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d900      	bls.n	80055d2 <HAL_TIM_ConfigClockSource+0x66>
 80055d0:	e088      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 80055d2:	2280      	movs	r2, #128	@ 0x80
 80055d4:	0152      	lsls	r2, r2, #5
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d100      	bne.n	80055dc <HAL_TIM_ConfigClockSource+0x70>
 80055da:	e088      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x182>
 80055dc:	2280      	movs	r2, #128	@ 0x80
 80055de:	0152      	lsls	r2, r2, #5
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d900      	bls.n	80055e6 <HAL_TIM_ConfigClockSource+0x7a>
 80055e4:	e07e      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 80055e6:	2b70      	cmp	r3, #112	@ 0x70
 80055e8:	d018      	beq.n	800561c <HAL_TIM_ConfigClockSource+0xb0>
 80055ea:	d900      	bls.n	80055ee <HAL_TIM_ConfigClockSource+0x82>
 80055ec:	e07a      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 80055ee:	2b60      	cmp	r3, #96	@ 0x60
 80055f0:	d04f      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x126>
 80055f2:	d900      	bls.n	80055f6 <HAL_TIM_ConfigClockSource+0x8a>
 80055f4:	e076      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 80055f6:	2b50      	cmp	r3, #80	@ 0x50
 80055f8:	d03b      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x106>
 80055fa:	d900      	bls.n	80055fe <HAL_TIM_ConfigClockSource+0x92>
 80055fc:	e072      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d057      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x146>
 8005602:	d900      	bls.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
 8005604:	e06e      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 8005606:	2b30      	cmp	r3, #48	@ 0x30
 8005608:	d063      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x166>
 800560a:	d86b      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 800560c:	2b20      	cmp	r3, #32
 800560e:	d060      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x166>
 8005610:	d868      	bhi.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d05d      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x166>
 8005616:	2b10      	cmp	r3, #16
 8005618:	d05b      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x166>
 800561a:	e063      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800562c:	f000 fd02 	bl	8006034 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2277      	movs	r2, #119	@ 0x77
 800563c:	4313      	orrs	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	609a      	str	r2, [r3, #8]
      break;
 8005648:	e052      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800565a:	f000 fceb 	bl	8006034 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2180      	movs	r1, #128	@ 0x80
 800566a:	01c9      	lsls	r1, r1, #7
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
      break;
 8005670:	e03e      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	001a      	movs	r2, r3
 8005680:	f000 fc5c 	bl	8005f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2150      	movs	r1, #80	@ 0x50
 800568a:	0018      	movs	r0, r3
 800568c:	f000 fcb6 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 8005690:	e02e      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800569e:	001a      	movs	r2, r3
 80056a0:	f000 fc7a 	bl	8005f98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2160      	movs	r1, #96	@ 0x60
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 fca6 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 80056b0:	e01e      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056be:	001a      	movs	r2, r3
 80056c0:	f000 fc3c 	bl	8005f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2140      	movs	r1, #64	@ 0x40
 80056ca:	0018      	movs	r0, r3
 80056cc:	f000 fc96 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 80056d0:	e00e      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	0019      	movs	r1, r3
 80056dc:	0010      	movs	r0, r2
 80056de:	f000 fc8d 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 80056e2:	e005      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80056e4:	230f      	movs	r3, #15
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
      break;
 80056ec:	e000      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80056ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	223d      	movs	r2, #61	@ 0x3d
 80056f4:	2101      	movs	r1, #1
 80056f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	223c      	movs	r2, #60	@ 0x3c
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

  return status;
 8005700:	230f      	movs	r3, #15
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	781b      	ldrb	r3, [r3, #0]
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b004      	add	sp, #16
 800570c:	bd80      	pop	{r7, pc}
 800570e:	46c0      	nop			@ (mov r8, r8)
 8005710:	ffceff88 	.word	0xffceff88
 8005714:	ffff00ff 	.word	0xffff00ff

08005718 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	223c      	movs	r2, #60	@ 0x3c
 8005726:	5c9b      	ldrb	r3, [r3, r2]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_TIM_SlaveConfigSynchro+0x18>
 800572c:	2302      	movs	r3, #2
 800572e:	e032      	b.n	8005796 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	223c      	movs	r2, #60	@ 0x3c
 8005734:	2101      	movs	r1, #1
 8005736:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	223d      	movs	r2, #61	@ 0x3d
 800573c:	2102      	movs	r1, #2
 800573e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0011      	movs	r1, r2
 8005746:	0018      	movs	r0, r3
 8005748:	f000 fb62 	bl	8005e10 <TIM_SlaveTimer_SetConfig>
 800574c:	1e03      	subs	r3, r0, #0
 800574e:	d009      	beq.n	8005764 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	223d      	movs	r2, #61	@ 0x3d
 8005754:	2101      	movs	r1, #1
 8005756:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	223c      	movs	r2, #60	@ 0x3c
 800575c:	2100      	movs	r1, #0
 800575e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e018      	b.n	8005796 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2140      	movs	r1, #64	@ 0x40
 8005770:	438a      	bics	r2, r1
 8005772:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4908      	ldr	r1, [pc, #32]	@ (80057a0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005780:	400a      	ands	r2, r1
 8005782:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	223d      	movs	r2, #61	@ 0x3d
 8005788:	2101      	movs	r1, #1
 800578a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	223c      	movs	r2, #60	@ 0x3c
 8005790:	2100      	movs	r1, #0
 8005792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	0018      	movs	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	b002      	add	sp, #8
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	ffffbfff 	.word	0xffffbfff

080057a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ac:	46c0      	nop			@ (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b002      	add	sp, #8
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057cc:	46c0      	nop			@ (mov r8, r8)
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b002      	add	sp, #8
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057dc:	46c0      	nop			@ (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a32      	ldr	r2, [pc, #200]	@ (80058c0 <TIM_Base_SetConfig+0xdc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0x20>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a31      	ldr	r2, [pc, #196]	@ (80058c4 <TIM_Base_SetConfig+0xe0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2270      	movs	r2, #112	@ 0x70
 8005808:	4393      	bics	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a29      	ldr	r2, [pc, #164]	@ (80058c0 <TIM_Base_SetConfig+0xdc>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00f      	beq.n	800583e <TIM_Base_SetConfig+0x5a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a28      	ldr	r2, [pc, #160]	@ (80058c4 <TIM_Base_SetConfig+0xe0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00b      	beq.n	800583e <TIM_Base_SetConfig+0x5a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a27      	ldr	r2, [pc, #156]	@ (80058c8 <TIM_Base_SetConfig+0xe4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <TIM_Base_SetConfig+0x5a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a26      	ldr	r2, [pc, #152]	@ (80058cc <TIM_Base_SetConfig+0xe8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_Base_SetConfig+0x5a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a25      	ldr	r2, [pc, #148]	@ (80058d0 <TIM_Base_SetConfig+0xec>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d108      	bne.n	8005850 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a24      	ldr	r2, [pc, #144]	@ (80058d4 <TIM_Base_SetConfig+0xf0>)
 8005842:	4013      	ands	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2280      	movs	r2, #128	@ 0x80
 8005854:	4393      	bics	r3, r2
 8005856:	001a      	movs	r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <TIM_Base_SetConfig+0xdc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_Base_SetConfig+0xaa>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a12      	ldr	r2, [pc, #72]	@ (80058cc <TIM_Base_SetConfig+0xe8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_Base_SetConfig+0xaa>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a11      	ldr	r2, [pc, #68]	@ (80058d0 <TIM_Base_SetConfig+0xec>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d103      	bne.n	8005896 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2201      	movs	r2, #1
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d106      	bne.n	80058b6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2201      	movs	r2, #1
 80058ae:	4393      	bics	r3, r2
 80058b0:	001a      	movs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	611a      	str	r2, [r3, #16]
  }
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b004      	add	sp, #16
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40002000 	.word	0x40002000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800
 80058d4:	fffffcff 	.word	0xfffffcff

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	2201      	movs	r2, #1
 80058ee:	4393      	bics	r3, r2
 80058f0:	001a      	movs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a2e      	ldr	r2, [pc, #184]	@ (80059c0 <TIM_OC1_SetConfig+0xe8>)
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2203      	movs	r2, #3
 800590e:	4393      	bics	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2202      	movs	r2, #2
 8005920:	4393      	bics	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a24      	ldr	r2, [pc, #144]	@ (80059c4 <TIM_OC1_SetConfig+0xec>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <TIM_OC1_SetConfig+0x6e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a23      	ldr	r2, [pc, #140]	@ (80059c8 <TIM_OC1_SetConfig+0xf0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_OC1_SetConfig+0x6e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a22      	ldr	r2, [pc, #136]	@ (80059cc <TIM_OC1_SetConfig+0xf4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10c      	bne.n	8005960 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2208      	movs	r2, #8
 800594a:	4393      	bics	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2204      	movs	r2, #4
 800595c:	4393      	bics	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <TIM_OC1_SetConfig+0xec>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_OC1_SetConfig+0xa0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <TIM_OC1_SetConfig+0xf0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC1_SetConfig+0xa0>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <TIM_OC1_SetConfig+0xf4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d111      	bne.n	800599c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <TIM_OC1_SetConfig+0xf8>)
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4a14      	ldr	r2, [pc, #80]	@ (80059d4 <TIM_OC1_SetConfig+0xfc>)
 8005984:	4013      	ands	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b006      	add	sp, #24
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	fffeff8f 	.word	0xfffeff8f
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	fffffeff 	.word	0xfffffeff
 80059d4:	fffffdff 	.word	0xfffffdff

080059d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	2210      	movs	r2, #16
 80059ee:	4393      	bics	r3, r2
 80059f0:	001a      	movs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab8 <TIM_OC2_SetConfig+0xe0>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005abc <TIM_OC2_SetConfig+0xe4>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2220      	movs	r2, #32
 8005a22:	4393      	bics	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a22      	ldr	r2, [pc, #136]	@ (8005ac0 <TIM_OC2_SetConfig+0xe8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10d      	bne.n	8005a56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2280      	movs	r2, #128	@ 0x80
 8005a3e:	4393      	bics	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2240      	movs	r2, #64	@ 0x40
 8005a52:	4393      	bics	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a19      	ldr	r2, [pc, #100]	@ (8005ac0 <TIM_OC2_SetConfig+0xe8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d007      	beq.n	8005a6e <TIM_OC2_SetConfig+0x96>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <TIM_OC2_SetConfig+0xec>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC2_SetConfig+0x96>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a17      	ldr	r2, [pc, #92]	@ (8005ac8 <TIM_OC2_SetConfig+0xf0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d113      	bne.n	8005a96 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <TIM_OC2_SetConfig+0xf4>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4a15      	ldr	r2, [pc, #84]	@ (8005ad0 <TIM_OC2_SetConfig+0xf8>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	621a      	str	r2, [r3, #32]
}
 8005ab0:	46c0      	nop			@ (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b006      	add	sp, #24
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	feff8fff 	.word	0xfeff8fff
 8005abc:	fffffcff 	.word	0xfffffcff
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800
 8005acc:	fffffbff 	.word	0xfffffbff
 8005ad0:	fffff7ff 	.word	0xfffff7ff

08005ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	4a31      	ldr	r2, [pc, #196]	@ (8005bb0 <TIM_OC3_SetConfig+0xdc>)
 8005aea:	401a      	ands	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a2d      	ldr	r2, [pc, #180]	@ (8005bb4 <TIM_OC3_SetConfig+0xe0>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2203      	movs	r2, #3
 8005b08:	4393      	bics	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4a27      	ldr	r2, [pc, #156]	@ (8005bb8 <TIM_OC3_SetConfig+0xe4>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a23      	ldr	r2, [pc, #140]	@ (8005bbc <TIM_OC3_SetConfig+0xe8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d10d      	bne.n	8005b4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4a22      	ldr	r2, [pc, #136]	@ (8005bc0 <TIM_OC3_SetConfig+0xec>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc4 <TIM_OC3_SetConfig+0xf0>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1a      	ldr	r2, [pc, #104]	@ (8005bbc <TIM_OC3_SetConfig+0xe8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <TIM_OC3_SetConfig+0x92>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <TIM_OC3_SetConfig+0xf4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_OC3_SetConfig+0x92>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1a      	ldr	r2, [pc, #104]	@ (8005bcc <TIM_OC3_SetConfig+0xf8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d113      	bne.n	8005b8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4a19      	ldr	r2, [pc, #100]	@ (8005bd0 <TIM_OC3_SetConfig+0xfc>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4a18      	ldr	r2, [pc, #96]	@ (8005bd4 <TIM_OC3_SetConfig+0x100>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b006      	add	sp, #24
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	fffffeff 	.word	0xfffffeff
 8005bb4:	fffeff8f 	.word	0xfffeff8f
 8005bb8:	fffffdff 	.word	0xfffffdff
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	fffff7ff 	.word	0xfffff7ff
 8005bc4:	fffffbff 	.word	0xfffffbff
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800
 8005bd0:	ffffefff 	.word	0xffffefff
 8005bd4:	ffffdfff 	.word	0xffffdfff

08005bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	4a24      	ldr	r2, [pc, #144]	@ (8005c80 <TIM_OC4_SetConfig+0xa8>)
 8005bee:	401a      	ands	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a20      	ldr	r2, [pc, #128]	@ (8005c84 <TIM_OC4_SetConfig+0xac>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c88 <TIM_OC4_SetConfig+0xb0>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c8c <TIM_OC4_SetConfig+0xb4>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <TIM_OC4_SetConfig+0xb8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_OC4_SetConfig+0x70>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a16      	ldr	r2, [pc, #88]	@ (8005c94 <TIM_OC4_SetConfig+0xbc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC4_SetConfig+0x70>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a15      	ldr	r2, [pc, #84]	@ (8005c98 <TIM_OC4_SetConfig+0xc0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d109      	bne.n	8005c5c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4a14      	ldr	r2, [pc, #80]	@ (8005c9c <TIM_OC4_SetConfig+0xc4>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	019b      	lsls	r3, r3, #6
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	46c0      	nop			@ (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b006      	add	sp, #24
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	ffffefff 	.word	0xffffefff
 8005c84:	feff8fff 	.word	0xfeff8fff
 8005c88:	fffffcff 	.word	0xfffffcff
 8005c8c:	ffffdfff 	.word	0xffffdfff
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800
 8005c9c:	ffffbfff 	.word	0xffffbfff

08005ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	4a21      	ldr	r2, [pc, #132]	@ (8005d3c <TIM_OC5_SetConfig+0x9c>)
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a1d      	ldr	r2, [pc, #116]	@ (8005d40 <TIM_OC5_SetConfig+0xa0>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4a19      	ldr	r2, [pc, #100]	@ (8005d44 <TIM_OC5_SetConfig+0xa4>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a15      	ldr	r2, [pc, #84]	@ (8005d48 <TIM_OC5_SetConfig+0xa8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_OC5_SetConfig+0x66>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a14      	ldr	r2, [pc, #80]	@ (8005d4c <TIM_OC5_SetConfig+0xac>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC5_SetConfig+0x66>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a13      	ldr	r2, [pc, #76]	@ (8005d50 <TIM_OC5_SetConfig+0xb0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d109      	bne.n	8005d1a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4a0c      	ldr	r2, [pc, #48]	@ (8005d3c <TIM_OC5_SetConfig+0x9c>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	621a      	str	r2, [r3, #32]
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b006      	add	sp, #24
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	fffeffff 	.word	0xfffeffff
 8005d40:	fffeff8f 	.word	0xfffeff8f
 8005d44:	fffdffff 	.word	0xfffdffff
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	4a22      	ldr	r2, [pc, #136]	@ (8005df4 <TIM_OC6_SetConfig+0xa0>)
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <TIM_OC6_SetConfig+0xa4>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4a1a      	ldr	r2, [pc, #104]	@ (8005dfc <TIM_OC6_SetConfig+0xa8>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	051b      	lsls	r3, r3, #20
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <TIM_OC6_SetConfig+0xac>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d007      	beq.n	8005dbc <TIM_OC6_SetConfig+0x68>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a15      	ldr	r2, [pc, #84]	@ (8005e04 <TIM_OC6_SetConfig+0xb0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC6_SetConfig+0x68>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a14      	ldr	r2, [pc, #80]	@ (8005e08 <TIM_OC6_SetConfig+0xb4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d109      	bne.n	8005dd0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4a13      	ldr	r2, [pc, #76]	@ (8005e0c <TIM_OC6_SetConfig+0xb8>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b006      	add	sp, #24
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	ffefffff 	.word	0xffefffff
 8005df8:	feff8fff 	.word	0xfeff8fff
 8005dfc:	ffdfffff 	.word	0xffdfffff
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40014400 	.word	0x40014400
 8005e08:	40014800 	.word	0x40014800
 8005e0c:	fffbffff 	.word	0xfffbffff

08005e10 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2317      	movs	r3, #23
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4a41      	ldr	r2, [pc, #260]	@ (8005f34 <TIM_SlaveTimer_SetConfig+0x124>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f38 <TIM_SlaveTimer_SetConfig+0x128>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b70      	cmp	r3, #112	@ 0x70
 8005e5c:	d015      	beq.n	8005e8a <TIM_SlaveTimer_SetConfig+0x7a>
 8005e5e:	d900      	bls.n	8005e62 <TIM_SlaveTimer_SetConfig+0x52>
 8005e60:	e05b      	b.n	8005f1a <TIM_SlaveTimer_SetConfig+0x10a>
 8005e62:	2b60      	cmp	r3, #96	@ 0x60
 8005e64:	d04f      	beq.n	8005f06 <TIM_SlaveTimer_SetConfig+0xf6>
 8005e66:	d858      	bhi.n	8005f1a <TIM_SlaveTimer_SetConfig+0x10a>
 8005e68:	2b50      	cmp	r3, #80	@ 0x50
 8005e6a:	d042      	beq.n	8005ef2 <TIM_SlaveTimer_SetConfig+0xe2>
 8005e6c:	d855      	bhi.n	8005f1a <TIM_SlaveTimer_SetConfig+0x10a>
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d016      	beq.n	8005ea0 <TIM_SlaveTimer_SetConfig+0x90>
 8005e72:	d852      	bhi.n	8005f1a <TIM_SlaveTimer_SetConfig+0x10a>
 8005e74:	2b30      	cmp	r3, #48	@ 0x30
 8005e76:	d055      	beq.n	8005f24 <TIM_SlaveTimer_SetConfig+0x114>
 8005e78:	d84f      	bhi.n	8005f1a <TIM_SlaveTimer_SetConfig+0x10a>
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d052      	beq.n	8005f24 <TIM_SlaveTimer_SetConfig+0x114>
 8005e7e:	d84c      	bhi.n	8005f1a <TIM_SlaveTimer_SetConfig+0x10a>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d04f      	beq.n	8005f24 <TIM_SlaveTimer_SetConfig+0x114>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d04d      	beq.n	8005f24 <TIM_SlaveTimer_SetConfig+0x114>
 8005e88:	e047      	b.n	8005f1a <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005e9a:	f000 f8cb 	bl	8006034 <TIM_ETR_SetConfig>
      break;
 8005e9e:	e042      	b.n	8005f26 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d101      	bne.n	8005eac <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e03f      	b.n	8005f2c <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	438a      	bics	r2, r1
 8005ec2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	22f0      	movs	r2, #240	@ 0xf0
 8005ed0:	4393      	bics	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]
      break;
 8005ef0:	e019      	b.n	8005f26 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efe:	001a      	movs	r2, r3
 8005f00:	f000 f81c 	bl	8005f3c <TIM_TI1_ConfigInputStage>
      break;
 8005f04:	e00f      	b.n	8005f26 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f12:	001a      	movs	r2, r3
 8005f14:	f000 f840 	bl	8005f98 <TIM_TI2_ConfigInputStage>
      break;
 8005f18:	e005      	b.n	8005f26 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f1a:	2317      	movs	r3, #23
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]
      break;
 8005f22:	e000      	b.n	8005f26 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005f24:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8005f26:	2317      	movs	r3, #23
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	781b      	ldrb	r3, [r3, #0]
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b006      	add	sp, #24
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	ffcfff8f 	.word	0xffcfff8f
 8005f38:	fffefff8 	.word	0xfffefff8

08005f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	2201      	movs	r2, #1
 8005f54:	4393      	bics	r3, r2
 8005f56:	001a      	movs	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	22f0      	movs	r2, #240	@ 0xf0
 8005f66:	4393      	bics	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	220a      	movs	r2, #10
 8005f78:	4393      	bics	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	46c0      	nop			@ (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b006      	add	sp, #24
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	2210      	movs	r2, #16
 8005fb0:	4393      	bics	r3, r2
 8005fb2:	001a      	movs	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff8 <TIM_TI2_ConfigInputStage+0x60>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	031b      	lsls	r3, r3, #12
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	22a0      	movs	r2, #160	@ 0xa0
 8005fd4:	4393      	bics	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b006      	add	sp, #24
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	46c0      	nop			@ (mov r8, r8)
 8005ff8:	ffff0fff 	.word	0xffff0fff

08005ffc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a08      	ldr	r2, [pc, #32]	@ (8006030 <TIM_ITRx_SetConfig+0x34>)
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	2207      	movs	r2, #7
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	609a      	str	r2, [r3, #8]
}
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	46bd      	mov	sp, r7
 800602a:	b004      	add	sp, #16
 800602c:	bd80      	pop	{r7, pc}
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	ffcfff8f 	.word	0xffcfff8f

08006034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	4a09      	ldr	r2, [pc, #36]	@ (8006070 <TIM_ETR_SetConfig+0x3c>)
 800604c:	4013      	ands	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	021a      	lsls	r2, r3, #8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	431a      	orrs	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	609a      	str	r2, [r3, #8]
}
 8006068:	46c0      	nop			@ (mov r8, r8)
 800606a:	46bd      	mov	sp, r7
 800606c:	b006      	add	sp, #24
 800606e:	bd80      	pop	{r7, pc}
 8006070:	ffff00ff 	.word	0xffff00ff

08006074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	221f      	movs	r2, #31
 8006084:	4013      	ands	r3, r2
 8006086:	2201      	movs	r2, #1
 8006088:	409a      	lsls	r2, r3
 800608a:	0013      	movs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	43d2      	mvns	r2, r2
 8006096:	401a      	ands	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1a      	ldr	r2, [r3, #32]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	211f      	movs	r1, #31
 80060a4:	400b      	ands	r3, r1
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4099      	lsls	r1, r3
 80060aa:	000b      	movs	r3, r1
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b006      	add	sp, #24
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	223c      	movs	r2, #60	@ 0x3c
 80060ca:	5c9b      	ldrb	r3, [r3, r2]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e04a      	b.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	223c      	movs	r2, #60	@ 0x3c
 80060d8:	2101      	movs	r1, #1
 80060da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	223d      	movs	r2, #61	@ 0x3d
 80060e0:	2102      	movs	r1, #2
 80060e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006102:	4013      	ands	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2270      	movs	r2, #112	@ 0x70
 8006114:	4393      	bics	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a11      	ldr	r2, [pc, #68]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a10      	ldr	r2, [pc, #64]	@ (800617c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d10c      	bne.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2280      	movs	r2, #128	@ 0x80
 8006142:	4393      	bics	r3, r2
 8006144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	223d      	movs	r2, #61	@ 0x3d
 800615c:	2101      	movs	r1, #1
 800615e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	223c      	movs	r2, #60	@ 0x3c
 8006164:	2100      	movs	r1, #0
 8006166:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b004      	add	sp, #16
 8006170:	bd80      	pop	{r7, pc}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	40012c00 	.word	0x40012c00
 8006178:	ff0fffff 	.word	0xff0fffff
 800617c:	40000400 	.word	0x40000400

08006180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	223c      	movs	r2, #60	@ 0x3c
 8006192:	5c9b      	ldrb	r3, [r3, r2]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006198:	2302      	movs	r3, #2
 800619a:	e06f      	b.n	800627c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	223c      	movs	r2, #60	@ 0x3c
 80061a0:	2101      	movs	r1, #1
 80061a2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	22ff      	movs	r2, #255	@ 0xff
 80061a8:	4393      	bics	r3, r2
 80061aa:	001a      	movs	r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4a33      	ldr	r2, [pc, #204]	@ (8006284 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80061b8:	401a      	ands	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a30      	ldr	r2, [pc, #192]	@ (8006288 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80061c6:	401a      	ands	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a2e      	ldr	r2, [pc, #184]	@ (800628c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80061d4:	401a      	ands	r2, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006290 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80061e2:	401a      	ands	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a29      	ldr	r2, [pc, #164]	@ (8006294 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80061f0:	401a      	ands	r2, r3
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80061fe:	401a      	ands	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a24      	ldr	r2, [pc, #144]	@ (800629c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800620c:	401a      	ands	r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a21      	ldr	r2, [pc, #132]	@ (80062a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800621c:	401a      	ands	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1e      	ldr	r2, [pc, #120]	@ (80062a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d11c      	bne.n	800626a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a1d      	ldr	r2, [pc, #116]	@ (80062a8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006234:	401a      	ands	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	051b      	lsls	r3, r3, #20
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a1a      	ldr	r2, [pc, #104]	@ (80062ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006244:	401a      	ands	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006252:	401a      	ands	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006260:	401a      	ands	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	223c      	movs	r2, #60	@ 0x3c
 8006276:	2100      	movs	r1, #0
 8006278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b004      	add	sp, #16
 8006282:	bd80      	pop	{r7, pc}
 8006284:	fffffcff 	.word	0xfffffcff
 8006288:	fffffbff 	.word	0xfffffbff
 800628c:	fffff7ff 	.word	0xfffff7ff
 8006290:	ffffefff 	.word	0xffffefff
 8006294:	ffffdfff 	.word	0xffffdfff
 8006298:	ffffbfff 	.word	0xffffbfff
 800629c:	fff0ffff 	.word	0xfff0ffff
 80062a0:	efffffff 	.word	0xefffffff
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	ff0fffff 	.word	0xff0fffff
 80062ac:	feffffff 	.word	0xfeffffff
 80062b0:	fdffffff 	.word	0xfdffffff
 80062b4:	dfffffff 	.word	0xdfffffff

080062b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c0:	46c0      	nop			@ (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d0:	46c0      	nop			@ (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b002      	add	sp, #8
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062e0:	46c0      	nop			@ (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b002      	add	sp, #8
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e046      	b.n	8006388 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2288      	movs	r2, #136	@ 0x88
 80062fe:	589b      	ldr	r3, [r3, r2]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d107      	bne.n	8006314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2284      	movs	r2, #132	@ 0x84
 8006308:	2100      	movs	r1, #0
 800630a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	0018      	movs	r0, r3
 8006310:	f7fb fba8 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2288      	movs	r2, #136	@ 0x88
 8006318:	2124      	movs	r1, #36	@ 0x24
 800631a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2101      	movs	r1, #1
 8006328:	438a      	bics	r2, r1
 800632a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	0018      	movs	r0, r3
 8006338:	f000 fe42 	bl	8006fc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0018      	movs	r0, r3
 8006340:	f000 fcd4 	bl	8006cec <UART_SetConfig>
 8006344:	0003      	movs	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e01c      	b.n	8006388 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	490d      	ldr	r1, [pc, #52]	@ (8006390 <HAL_UART_Init+0xa8>)
 800635a:	400a      	ands	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	212a      	movs	r1, #42	@ 0x2a
 800636a:	438a      	bics	r2, r1
 800636c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2101      	movs	r1, #1
 800637a:	430a      	orrs	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 fed1 	bl	8007128 <UART_CheckIdleState>
 8006386:	0003      	movs	r3, r0
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b002      	add	sp, #8
 800638e:	bd80      	pop	{r7, pc}
 8006390:	ffffb7ff 	.word	0xffffb7ff

08006394 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e032      	b.n	800640c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2288      	movs	r2, #136	@ 0x88
 80063aa:	2124      	movs	r1, #36	@ 0x24
 80063ac:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2101      	movs	r1, #1
 80063ba:	438a      	bics	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2200      	movs	r2, #0
 80063cc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2200      	movs	r2, #0
 80063d4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	0018      	movs	r0, r3
 80063da:	f7fb fc09 	bl	8001bf0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2290      	movs	r2, #144	@ 0x90
 80063e2:	2100      	movs	r1, #0
 80063e4:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2288      	movs	r2, #136	@ 0x88
 80063ea:	2100      	movs	r1, #0
 80063ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	228c      	movs	r2, #140	@ 0x8c
 80063f2:	2100      	movs	r1, #0
 80063f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2284      	movs	r2, #132	@ 0x84
 8006406:	2100      	movs	r1, #0
 8006408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	0018      	movs	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	b002      	add	sp, #8
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	1dbb      	adds	r3, r7, #6
 8006420:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2288      	movs	r2, #136	@ 0x88
 8006426:	589b      	ldr	r3, [r3, r2]
 8006428:	2b20      	cmp	r3, #32
 800642a:	d000      	beq.n	800642e <HAL_UART_Transmit_DMA+0x1a>
 800642c:	e079      	b.n	8006522 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_UART_Transmit_DMA+0x28>
 8006434:	1dbb      	adds	r3, r7, #6
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e071      	b.n	8006524 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	2380      	movs	r3, #128	@ 0x80
 8006446:	015b      	lsls	r3, r3, #5
 8006448:	429a      	cmp	r2, r3
 800644a:	d109      	bne.n	8006460 <HAL_UART_Transmit_DMA+0x4c>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2201      	movs	r2, #1
 8006458:	4013      	ands	r3, r2
 800645a:	d001      	beq.n	8006460 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e061      	b.n	8006524 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1dba      	adds	r2, r7, #6
 800646a:	2154      	movs	r1, #84	@ 0x54
 800646c:	8812      	ldrh	r2, [r2, #0]
 800646e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1dba      	adds	r2, r7, #6
 8006474:	2156      	movs	r1, #86	@ 0x56
 8006476:	8812      	ldrh	r2, [r2, #0]
 8006478:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2290      	movs	r2, #144	@ 0x90
 800647e:	2100      	movs	r1, #0
 8006480:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2288      	movs	r2, #136	@ 0x88
 8006486:	2121      	movs	r1, #33	@ 0x21
 8006488:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d028      	beq.n	80064e4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006496:	4a25      	ldr	r2, [pc, #148]	@ (800652c <HAL_UART_Transmit_DMA+0x118>)
 8006498:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800649e:	4a24      	ldr	r2, [pc, #144]	@ (8006530 <HAL_UART_Transmit_DMA+0x11c>)
 80064a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064a6:	4a23      	ldr	r2, [pc, #140]	@ (8006534 <HAL_UART_Transmit_DMA+0x120>)
 80064a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064ae:	2200      	movs	r2, #0
 80064b0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ba:	0019      	movs	r1, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3328      	adds	r3, #40	@ 0x28
 80064c2:	001a      	movs	r2, r3
 80064c4:	1dbb      	adds	r3, r7, #6
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	f7fc ffc8 	bl	800345c <HAL_DMA_Start_IT>
 80064cc:	1e03      	subs	r3, r0, #0
 80064ce:	d009      	beq.n	80064e4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2290      	movs	r2, #144	@ 0x90
 80064d4:	2110      	movs	r1, #16
 80064d6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2288      	movs	r2, #136	@ 0x88
 80064dc:	2120      	movs	r1, #32
 80064de:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e01f      	b.n	8006524 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2240      	movs	r2, #64	@ 0x40
 80064ea:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ec:	f3ef 8310 	mrs	r3, PRIMASK
 80064f0:	613b      	str	r3, [r7, #16]
  return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	2301      	movs	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f383 8810 	msr	PRIMASK, r3
}
 8006500:	46c0      	nop			@ (mov r8, r8)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2180      	movs	r1, #128	@ 0x80
 800650e:	430a      	orrs	r2, r1
 8006510:	609a      	str	r2, [r3, #8]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f383 8810 	msr	PRIMASK, r3
}
 800651c:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	e000      	b.n	8006524 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006522:	2302      	movs	r3, #2
  }
}
 8006524:	0018      	movs	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	b008      	add	sp, #32
 800652a:	bd80      	pop	{r7, pc}
 800652c:	080075f5 	.word	0x080075f5
 8006530:	0800768d 	.word	0x0800768d
 8006534:	0800781f 	.word	0x0800781f

08006538 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	@ 0x30
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2288      	movs	r2, #136	@ 0x88
 8006544:	589b      	ldr	r3, [r3, r2]
 8006546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	228c      	movs	r2, #140	@ 0x8c
 800654c:	589b      	ldr	r3, [r3, r2]
 800654e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2280      	movs	r2, #128	@ 0x80
 8006558:	4013      	ands	r3, r2
 800655a:	2b80      	cmp	r3, #128	@ 0x80
 800655c:	d138      	bne.n	80065d0 <HAL_UART_DMAStop+0x98>
 800655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006560:	2b21      	cmp	r3, #33	@ 0x21
 8006562:	d135      	bne.n	80065d0 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006564:	f3ef 8310 	mrs	r3, PRIMASK
 8006568:	617b      	str	r3, [r7, #20]
  return(result);
 800656a:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
 800656e:	2301      	movs	r3, #1
 8006570:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f383 8810 	msr	PRIMASK, r3
}
 8006578:	46c0      	nop			@ (mov r8, r8)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2180      	movs	r1, #128	@ 0x80
 8006586:	438a      	bics	r2, r1
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f383 8810 	msr	PRIMASK, r3
}
 8006594:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d014      	beq.n	80065c8 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7fc ffe0 	bl	8003568 <HAL_DMA_Abort>
 80065a8:	1e03      	subs	r3, r0, #0
 80065aa:	d00d      	beq.n	80065c8 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7fd f957 	bl	8003864 <HAL_DMA_GetError>
 80065b6:	0003      	movs	r3, r0
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d105      	bne.n	80065c8 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2290      	movs	r2, #144	@ 0x90
 80065c0:	2110      	movs	r1, #16
 80065c2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e047      	b.n	8006658 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	0018      	movs	r0, r3
 80065cc:	f000 ff6c 	bl	80074a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2240      	movs	r2, #64	@ 0x40
 80065d8:	4013      	ands	r3, r2
 80065da:	2b40      	cmp	r3, #64	@ 0x40
 80065dc:	d13b      	bne.n	8006656 <HAL_UART_DMAStop+0x11e>
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	2b22      	cmp	r3, #34	@ 0x22
 80065e2:	d138      	bne.n	8006656 <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e4:	f3ef 8310 	mrs	r3, PRIMASK
 80065e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ea:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	2301      	movs	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f383 8810 	msr	PRIMASK, r3
}
 80065f8:	46c0      	nop			@ (mov r8, r8)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2140      	movs	r1, #64	@ 0x40
 8006606:	438a      	bics	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f383 8810 	msr	PRIMASK, r3
}
 8006614:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2280      	movs	r2, #128	@ 0x80
 800661a:	589b      	ldr	r3, [r3, r2]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d016      	beq.n	800664e <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2280      	movs	r2, #128	@ 0x80
 8006624:	589b      	ldr	r3, [r3, r2]
 8006626:	0018      	movs	r0, r3
 8006628:	f7fc ff9e 	bl	8003568 <HAL_DMA_Abort>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d00e      	beq.n	800664e <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2280      	movs	r2, #128	@ 0x80
 8006634:	589b      	ldr	r3, [r3, r2]
 8006636:	0018      	movs	r0, r3
 8006638:	f7fd f914 	bl	8003864 <HAL_DMA_GetError>
 800663c:	0003      	movs	r3, r0
 800663e:	2b20      	cmp	r3, #32
 8006640:	d105      	bne.n	800664e <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2290      	movs	r2, #144	@ 0x90
 8006646:	2110      	movs	r1, #16
 8006648:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e004      	b.n	8006658 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 ff69 	bl	8007528 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	b00c      	add	sp, #48	@ 0x30
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006660:	b5b0      	push	{r4, r5, r7, lr}
 8006662:	b0aa      	sub	sp, #168	@ 0xa8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	22a4      	movs	r2, #164	@ 0xa4
 8006670:	18b9      	adds	r1, r7, r2
 8006672:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	20a0      	movs	r0, #160	@ 0xa0
 800667c:	1839      	adds	r1, r7, r0
 800667e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	249c      	movs	r4, #156	@ 0x9c
 8006688:	1939      	adds	r1, r7, r4
 800668a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800668c:	0011      	movs	r1, r2
 800668e:	18bb      	adds	r3, r7, r2
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4aa2      	ldr	r2, [pc, #648]	@ (800691c <HAL_UART_IRQHandler+0x2bc>)
 8006694:	4013      	ands	r3, r2
 8006696:	2298      	movs	r2, #152	@ 0x98
 8006698:	18bd      	adds	r5, r7, r2
 800669a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800669c:	18bb      	adds	r3, r7, r2
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11a      	bne.n	80066da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066a4:	187b      	adds	r3, r7, r1
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2220      	movs	r2, #32
 80066aa:	4013      	ands	r3, r2
 80066ac:	d015      	beq.n	80066da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2220      	movs	r2, #32
 80066b4:	4013      	ands	r3, r2
 80066b6:	d105      	bne.n	80066c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	2380      	movs	r3, #128	@ 0x80
 80066be:	055b      	lsls	r3, r3, #21
 80066c0:	4013      	ands	r3, r2
 80066c2:	d00a      	beq.n	80066da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d100      	bne.n	80066ce <HAL_UART_IRQHandler+0x6e>
 80066cc:	e2dc      	b.n	8006c88 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	0010      	movs	r0, r2
 80066d6:	4798      	blx	r3
      }
      return;
 80066d8:	e2d6      	b.n	8006c88 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066da:	2398      	movs	r3, #152	@ 0x98
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d100      	bne.n	80066e6 <HAL_UART_IRQHandler+0x86>
 80066e4:	e122      	b.n	800692c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066e6:	239c      	movs	r3, #156	@ 0x9c
 80066e8:	18fb      	adds	r3, r7, r3
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a8c      	ldr	r2, [pc, #560]	@ (8006920 <HAL_UART_IRQHandler+0x2c0>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	d106      	bne.n	8006700 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066f2:	23a0      	movs	r3, #160	@ 0xa0
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a8a      	ldr	r2, [pc, #552]	@ (8006924 <HAL_UART_IRQHandler+0x2c4>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	d100      	bne.n	8006700 <HAL_UART_IRQHandler+0xa0>
 80066fe:	e115      	b.n	800692c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006700:	23a4      	movs	r3, #164	@ 0xa4
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	4013      	ands	r3, r2
 800670a:	d012      	beq.n	8006732 <HAL_UART_IRQHandler+0xd2>
 800670c:	23a0      	movs	r3, #160	@ 0xa0
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	2380      	movs	r3, #128	@ 0x80
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	4013      	ands	r3, r2
 8006718:	d00b      	beq.n	8006732 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2201      	movs	r2, #1
 8006720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2290      	movs	r2, #144	@ 0x90
 8006726:	589b      	ldr	r3, [r3, r2]
 8006728:	2201      	movs	r2, #1
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2190      	movs	r1, #144	@ 0x90
 8006730:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006732:	23a4      	movs	r3, #164	@ 0xa4
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2202      	movs	r2, #2
 800673a:	4013      	ands	r3, r2
 800673c:	d011      	beq.n	8006762 <HAL_UART_IRQHandler+0x102>
 800673e:	239c      	movs	r3, #156	@ 0x9c
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	d00b      	beq.n	8006762 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2202      	movs	r2, #2
 8006750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2290      	movs	r2, #144	@ 0x90
 8006756:	589b      	ldr	r3, [r3, r2]
 8006758:	2204      	movs	r2, #4
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2190      	movs	r1, #144	@ 0x90
 8006760:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006762:	23a4      	movs	r3, #164	@ 0xa4
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2204      	movs	r2, #4
 800676a:	4013      	ands	r3, r2
 800676c:	d011      	beq.n	8006792 <HAL_UART_IRQHandler+0x132>
 800676e:	239c      	movs	r3, #156	@ 0x9c
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	4013      	ands	r3, r2
 8006778:	d00b      	beq.n	8006792 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2204      	movs	r2, #4
 8006780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2290      	movs	r2, #144	@ 0x90
 8006786:	589b      	ldr	r3, [r3, r2]
 8006788:	2202      	movs	r2, #2
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2190      	movs	r1, #144	@ 0x90
 8006790:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006792:	23a4      	movs	r3, #164	@ 0xa4
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2208      	movs	r2, #8
 800679a:	4013      	ands	r3, r2
 800679c:	d017      	beq.n	80067ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800679e:	23a0      	movs	r3, #160	@ 0xa0
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2220      	movs	r2, #32
 80067a6:	4013      	ands	r3, r2
 80067a8:	d105      	bne.n	80067b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067aa:	239c      	movs	r3, #156	@ 0x9c
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a5b      	ldr	r2, [pc, #364]	@ (8006920 <HAL_UART_IRQHandler+0x2c0>)
 80067b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067b4:	d00b      	beq.n	80067ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2208      	movs	r2, #8
 80067bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2290      	movs	r2, #144	@ 0x90
 80067c2:	589b      	ldr	r3, [r3, r2]
 80067c4:	2208      	movs	r2, #8
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2190      	movs	r1, #144	@ 0x90
 80067cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067ce:	23a4      	movs	r3, #164	@ 0xa4
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	2380      	movs	r3, #128	@ 0x80
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	4013      	ands	r3, r2
 80067da:	d013      	beq.n	8006804 <HAL_UART_IRQHandler+0x1a4>
 80067dc:	23a0      	movs	r3, #160	@ 0xa0
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	2380      	movs	r3, #128	@ 0x80
 80067e4:	04db      	lsls	r3, r3, #19
 80067e6:	4013      	ands	r3, r2
 80067e8:	d00c      	beq.n	8006804 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2280      	movs	r2, #128	@ 0x80
 80067f0:	0112      	lsls	r2, r2, #4
 80067f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2290      	movs	r2, #144	@ 0x90
 80067f8:	589b      	ldr	r3, [r3, r2]
 80067fa:	2220      	movs	r2, #32
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2190      	movs	r1, #144	@ 0x90
 8006802:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2290      	movs	r2, #144	@ 0x90
 8006808:	589b      	ldr	r3, [r3, r2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d100      	bne.n	8006810 <HAL_UART_IRQHandler+0x1b0>
 800680e:	e23d      	b.n	8006c8c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006810:	23a4      	movs	r3, #164	@ 0xa4
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2220      	movs	r2, #32
 8006818:	4013      	ands	r3, r2
 800681a:	d015      	beq.n	8006848 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800681c:	23a0      	movs	r3, #160	@ 0xa0
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2220      	movs	r2, #32
 8006824:	4013      	ands	r3, r2
 8006826:	d106      	bne.n	8006836 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006828:	239c      	movs	r3, #156	@ 0x9c
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	2380      	movs	r3, #128	@ 0x80
 8006830:	055b      	lsls	r3, r3, #21
 8006832:	4013      	ands	r3, r2
 8006834:	d008      	beq.n	8006848 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	0010      	movs	r0, r2
 8006846:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2290      	movs	r2, #144	@ 0x90
 800684c:	589b      	ldr	r3, [r3, r2]
 800684e:	2194      	movs	r1, #148	@ 0x94
 8006850:	187a      	adds	r2, r7, r1
 8006852:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2240      	movs	r2, #64	@ 0x40
 800685c:	4013      	ands	r3, r2
 800685e:	2b40      	cmp	r3, #64	@ 0x40
 8006860:	d004      	beq.n	800686c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006862:	187b      	adds	r3, r7, r1
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2228      	movs	r2, #40	@ 0x28
 8006868:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800686a:	d04c      	beq.n	8006906 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	0018      	movs	r0, r3
 8006870:	f000 fe5a 	bl	8007528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2240      	movs	r2, #64	@ 0x40
 800687c:	4013      	ands	r3, r2
 800687e:	2b40      	cmp	r3, #64	@ 0x40
 8006880:	d13c      	bne.n	80068fc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006882:	f3ef 8310 	mrs	r3, PRIMASK
 8006886:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006888:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	2090      	movs	r0, #144	@ 0x90
 800688c:	183a      	adds	r2, r7, r0
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	2301      	movs	r3, #1
 8006892:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006896:	f383 8810 	msr	PRIMASK, r3
}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2140      	movs	r1, #64	@ 0x40
 80068a8:	438a      	bics	r2, r1
 80068aa:	609a      	str	r2, [r3, #8]
 80068ac:	183b      	adds	r3, r7, r0
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068b4:	f383 8810 	msr	PRIMASK, r3
}
 80068b8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2280      	movs	r2, #128	@ 0x80
 80068be:	589b      	ldr	r3, [r3, r2]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d016      	beq.n	80068f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2280      	movs	r2, #128	@ 0x80
 80068c8:	589b      	ldr	r3, [r3, r2]
 80068ca:	4a17      	ldr	r2, [pc, #92]	@ (8006928 <HAL_UART_IRQHandler+0x2c8>)
 80068cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2280      	movs	r2, #128	@ 0x80
 80068d2:	589b      	ldr	r3, [r3, r2]
 80068d4:	0018      	movs	r0, r3
 80068d6:	f7fc fea9 	bl	800362c <HAL_DMA_Abort_IT>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d01c      	beq.n	8006918 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2280      	movs	r2, #128	@ 0x80
 80068e2:	589b      	ldr	r3, [r3, r2]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	2180      	movs	r1, #128	@ 0x80
 80068ea:	5852      	ldr	r2, [r2, r1]
 80068ec:	0010      	movs	r0, r2
 80068ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	e012      	b.n	8006918 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 f9f1 	bl	8006cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fa:	e00d      	b.n	8006918 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	0018      	movs	r0, r3
 8006900:	f000 f9ec 	bl	8006cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	e008      	b.n	8006918 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	0018      	movs	r0, r3
 800690a:	f000 f9e7 	bl	8006cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2290      	movs	r2, #144	@ 0x90
 8006912:	2100      	movs	r1, #0
 8006914:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006916:	e1b9      	b.n	8006c8c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	46c0      	nop			@ (mov r8, r8)
    return;
 800691a:	e1b7      	b.n	8006c8c <HAL_UART_IRQHandler+0x62c>
 800691c:	0000080f 	.word	0x0000080f
 8006920:	10000001 	.word	0x10000001
 8006924:	04000120 	.word	0x04000120
 8006928:	080078a5 	.word	0x080078a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d000      	beq.n	8006936 <HAL_UART_IRQHandler+0x2d6>
 8006934:	e13e      	b.n	8006bb4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006936:	23a4      	movs	r3, #164	@ 0xa4
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2210      	movs	r2, #16
 800693e:	4013      	ands	r3, r2
 8006940:	d100      	bne.n	8006944 <HAL_UART_IRQHandler+0x2e4>
 8006942:	e137      	b.n	8006bb4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006944:	23a0      	movs	r3, #160	@ 0xa0
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2210      	movs	r2, #16
 800694c:	4013      	ands	r3, r2
 800694e:	d100      	bne.n	8006952 <HAL_UART_IRQHandler+0x2f2>
 8006950:	e130      	b.n	8006bb4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2210      	movs	r2, #16
 8006958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2240      	movs	r2, #64	@ 0x40
 8006962:	4013      	ands	r3, r2
 8006964:	2b40      	cmp	r3, #64	@ 0x40
 8006966:	d000      	beq.n	800696a <HAL_UART_IRQHandler+0x30a>
 8006968:	e0a4      	b.n	8006ab4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2280      	movs	r2, #128	@ 0x80
 800696e:	589b      	ldr	r3, [r3, r2]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	217e      	movs	r1, #126	@ 0x7e
 8006976:	187b      	adds	r3, r7, r1
 8006978:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800697a:	187b      	adds	r3, r7, r1
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d100      	bne.n	8006984 <HAL_UART_IRQHandler+0x324>
 8006982:	e185      	b.n	8006c90 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	225c      	movs	r2, #92	@ 0x5c
 8006988:	5a9b      	ldrh	r3, [r3, r2]
 800698a:	187a      	adds	r2, r7, r1
 800698c:	8812      	ldrh	r2, [r2, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d300      	bcc.n	8006994 <HAL_UART_IRQHandler+0x334>
 8006992:	e17d      	b.n	8006c90 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	187a      	adds	r2, r7, r1
 8006998:	215e      	movs	r1, #94	@ 0x5e
 800699a:	8812      	ldrh	r2, [r2, #0]
 800699c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2280      	movs	r2, #128	@ 0x80
 80069a2:	589b      	ldr	r3, [r3, r2]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2220      	movs	r2, #32
 80069aa:	4013      	ands	r3, r2
 80069ac:	d170      	bne.n	8006a90 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ae:	f3ef 8310 	mrs	r3, PRIMASK
 80069b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069b8:	2301      	movs	r3, #1
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069be:	f383 8810 	msr	PRIMASK, r3
}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	49b4      	ldr	r1, [pc, #720]	@ (8006ca0 <HAL_UART_IRQHandler+0x640>)
 80069d0:	400a      	ands	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	f383 8810 	msr	PRIMASK, r3
}
 80069de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e0:	f3ef 8310 	mrs	r3, PRIMASK
 80069e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80069e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80069ea:	2301      	movs	r3, #1
 80069ec:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f0:	f383 8810 	msr	PRIMASK, r3
}
 80069f4:	46c0      	nop			@ (mov r8, r8)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2101      	movs	r1, #1
 8006a02:	438a      	bics	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]
 8006a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a08:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a0c:	f383 8810 	msr	PRIMASK, r3
}
 8006a10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a12:	f3ef 8310 	mrs	r3, PRIMASK
 8006a16:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a22:	f383 8810 	msr	PRIMASK, r3
}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2140      	movs	r1, #64	@ 0x40
 8006a34:	438a      	bics	r2, r1
 8006a36:	609a      	str	r2, [r3, #8]
 8006a38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a3a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a3e:	f383 8810 	msr	PRIMASK, r3
}
 8006a42:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	228c      	movs	r2, #140	@ 0x8c
 8006a48:	2120      	movs	r1, #32
 8006a4a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a52:	f3ef 8310 	mrs	r3, PRIMASK
 8006a56:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a62:	f383 8810 	msr	PRIMASK, r3
}
 8006a66:	46c0      	nop			@ (mov r8, r8)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2110      	movs	r1, #16
 8006a74:	438a      	bics	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a7e:	f383 8810 	msr	PRIMASK, r3
}
 8006a82:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2280      	movs	r2, #128	@ 0x80
 8006a88:	589b      	ldr	r3, [r3, r2]
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7fc fd6c 	bl	8003568 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	225c      	movs	r2, #92	@ 0x5c
 8006a9a:	5a9a      	ldrh	r2, [r3, r2]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	215e      	movs	r1, #94	@ 0x5e
 8006aa0:	5a5b      	ldrh	r3, [r3, r1]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0011      	movs	r1, r2
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fa fa3b 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ab2:	e0ed      	b.n	8006c90 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	225c      	movs	r2, #92	@ 0x5c
 8006ab8:	5a99      	ldrh	r1, [r3, r2]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	225e      	movs	r2, #94	@ 0x5e
 8006abe:	5a9b      	ldrh	r3, [r3, r2]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	208e      	movs	r0, #142	@ 0x8e
 8006ac4:	183b      	adds	r3, r7, r0
 8006ac6:	1a8a      	subs	r2, r1, r2
 8006ac8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	225e      	movs	r2, #94	@ 0x5e
 8006ace:	5a9b      	ldrh	r3, [r3, r2]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d100      	bne.n	8006ad8 <HAL_UART_IRQHandler+0x478>
 8006ad6:	e0dd      	b.n	8006c94 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006ad8:	183b      	adds	r3, r7, r0
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d100      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x482>
 8006ae0:	e0d8      	b.n	8006c94 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aea:	2488      	movs	r4, #136	@ 0x88
 8006aec:	193a      	adds	r2, r7, r4
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	2301      	movs	r3, #1
 8006af2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f383 8810 	msr	PRIMASK, r3
}
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4967      	ldr	r1, [pc, #412]	@ (8006ca4 <HAL_UART_IRQHandler+0x644>)
 8006b08:	400a      	ands	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	193b      	adds	r3, r7, r4
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f383 8810 	msr	PRIMASK, r3
}
 8006b18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b20:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b22:	2484      	movs	r4, #132	@ 0x84
 8006b24:	193a      	adds	r2, r7, r4
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	2301      	movs	r3, #1
 8006b2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f383 8810 	msr	PRIMASK, r3
}
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	495a      	ldr	r1, [pc, #360]	@ (8006ca8 <HAL_UART_IRQHandler+0x648>)
 8006b40:	400a      	ands	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]
 8006b44:	193b      	adds	r3, r7, r4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	f383 8810 	msr	PRIMASK, r3
}
 8006b50:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	228c      	movs	r2, #140	@ 0x8c
 8006b56:	2120      	movs	r1, #32
 8006b58:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b66:	f3ef 8310 	mrs	r3, PRIMASK
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6e:	2480      	movs	r4, #128	@ 0x80
 8006b70:	193a      	adds	r2, r7, r4
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	2301      	movs	r3, #1
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	f383 8810 	msr	PRIMASK, r3
}
 8006b7e:	46c0      	nop			@ (mov r8, r8)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2110      	movs	r1, #16
 8006b8c:	438a      	bics	r2, r1
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	193b      	adds	r3, r7, r4
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ba4:	183b      	adds	r3, r7, r0
 8006ba6:	881a      	ldrh	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0011      	movs	r1, r2
 8006bac:	0018      	movs	r0, r3
 8006bae:	f7fa f9bb 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bb2:	e06f      	b.n	8006c94 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bb4:	23a4      	movs	r3, #164	@ 0xa4
 8006bb6:	18fb      	adds	r3, r7, r3
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	2380      	movs	r3, #128	@ 0x80
 8006bbc:	035b      	lsls	r3, r3, #13
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	d010      	beq.n	8006be4 <HAL_UART_IRQHandler+0x584>
 8006bc2:	239c      	movs	r3, #156	@ 0x9c
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	2380      	movs	r3, #128	@ 0x80
 8006bca:	03db      	lsls	r3, r3, #15
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2280      	movs	r2, #128	@ 0x80
 8006bd6:	0352      	lsls	r2, r2, #13
 8006bd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fea4 	bl	800792a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006be2:	e05a      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006be4:	23a4      	movs	r3, #164	@ 0xa4
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2280      	movs	r2, #128	@ 0x80
 8006bec:	4013      	ands	r3, r2
 8006bee:	d016      	beq.n	8006c1e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006bf0:	23a0      	movs	r3, #160	@ 0xa0
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2280      	movs	r2, #128	@ 0x80
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d106      	bne.n	8006c0a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006bfc:	239c      	movs	r3, #156	@ 0x9c
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	2380      	movs	r3, #128	@ 0x80
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	4013      	ands	r3, r2
 8006c08:	d009      	beq.n	8006c1e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d042      	beq.n	8006c98 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	0010      	movs	r0, r2
 8006c1a:	4798      	blx	r3
    }
    return;
 8006c1c:	e03c      	b.n	8006c98 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c1e:	23a4      	movs	r3, #164	@ 0xa4
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2240      	movs	r2, #64	@ 0x40
 8006c26:	4013      	ands	r3, r2
 8006c28:	d00a      	beq.n	8006c40 <HAL_UART_IRQHandler+0x5e0>
 8006c2a:	23a0      	movs	r3, #160	@ 0xa0
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2240      	movs	r2, #64	@ 0x40
 8006c32:	4013      	ands	r3, r2
 8006c34:	d004      	beq.n	8006c40 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f000 fe4a 	bl	80078d2 <UART_EndTransmit_IT>
    return;
 8006c3e:	e02c      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c40:	23a4      	movs	r3, #164	@ 0xa4
 8006c42:	18fb      	adds	r3, r7, r3
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	2380      	movs	r3, #128	@ 0x80
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <HAL_UART_IRQHandler+0x606>
 8006c4e:	23a0      	movs	r3, #160	@ 0xa0
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	2380      	movs	r3, #128	@ 0x80
 8006c56:	05db      	lsls	r3, r3, #23
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 fe73 	bl	800794a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c64:	e019      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c66:	23a4      	movs	r3, #164	@ 0xa4
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	2380      	movs	r3, #128	@ 0x80
 8006c6e:	045b      	lsls	r3, r3, #17
 8006c70:	4013      	ands	r3, r2
 8006c72:	d012      	beq.n	8006c9a <HAL_UART_IRQHandler+0x63a>
 8006c74:	23a0      	movs	r3, #160	@ 0xa0
 8006c76:	18fb      	adds	r3, r7, r3
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da0d      	bge.n	8006c9a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	0018      	movs	r0, r3
 8006c82:	f000 fe5a 	bl	800793a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c86:	e008      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
      return;
 8006c88:	46c0      	nop			@ (mov r8, r8)
 8006c8a:	e006      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
    return;
 8006c8c:	46c0      	nop			@ (mov r8, r8)
 8006c8e:	e004      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
      return;
 8006c90:	46c0      	nop			@ (mov r8, r8)
 8006c92:	e002      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
      return;
 8006c94:	46c0      	nop			@ (mov r8, r8)
 8006c96:	e000      	b.n	8006c9a <HAL_UART_IRQHandler+0x63a>
    return;
 8006c98:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b02a      	add	sp, #168	@ 0xa8
 8006c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca0:	fffffeff 	.word	0xfffffeff
 8006ca4:	fffffedf 	.word	0xfffffedf
 8006ca8:	effffffe 	.word	0xeffffffe

08006cac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006cb4:	46c0      	nop			@ (mov r8, r8)
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b002      	add	sp, #8
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006cc4:	46c0      	nop			@ (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006cd4:	46c0      	nop			@ (mov r8, r8)
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ce4:	46c0      	nop			@ (mov r8, r8)
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b002      	add	sp, #8
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cf4:	231a      	movs	r3, #26
 8006cf6:	18fb      	adds	r3, r7, r3
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4aa1      	ldr	r2, [pc, #644]	@ (8006fa0 <UART_SetConfig+0x2b4>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	0019      	movs	r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a9c      	ldr	r2, [pc, #624]	@ (8006fa4 <UART_SetConfig+0x2b8>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	0019      	movs	r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4a93      	ldr	r2, [pc, #588]	@ (8006fa8 <UART_SetConfig+0x2bc>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	0019      	movs	r1, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	220f      	movs	r2, #15
 8006d70:	4393      	bics	r3, r2
 8006d72:	0019      	movs	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a89      	ldr	r2, [pc, #548]	@ (8006fac <UART_SetConfig+0x2c0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d127      	bne.n	8006dda <UART_SetConfig+0xee>
 8006d8a:	4b89      	ldr	r3, [pc, #548]	@ (8006fb0 <UART_SetConfig+0x2c4>)
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8e:	2203      	movs	r2, #3
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d017      	beq.n	8006dc6 <UART_SetConfig+0xda>
 8006d96:	d81b      	bhi.n	8006dd0 <UART_SetConfig+0xe4>
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d00a      	beq.n	8006db2 <UART_SetConfig+0xc6>
 8006d9c:	d818      	bhi.n	8006dd0 <UART_SetConfig+0xe4>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <UART_SetConfig+0xbc>
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d00a      	beq.n	8006dbc <UART_SetConfig+0xd0>
 8006da6:	e013      	b.n	8006dd0 <UART_SetConfig+0xe4>
 8006da8:	231b      	movs	r3, #27
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	e021      	b.n	8006df6 <UART_SetConfig+0x10a>
 8006db2:	231b      	movs	r3, #27
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	e01c      	b.n	8006df6 <UART_SetConfig+0x10a>
 8006dbc:	231b      	movs	r3, #27
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e017      	b.n	8006df6 <UART_SetConfig+0x10a>
 8006dc6:	231b      	movs	r3, #27
 8006dc8:	18fb      	adds	r3, r7, r3
 8006dca:	2208      	movs	r2, #8
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e012      	b.n	8006df6 <UART_SetConfig+0x10a>
 8006dd0:	231b      	movs	r3, #27
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	e00d      	b.n	8006df6 <UART_SetConfig+0x10a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a75      	ldr	r2, [pc, #468]	@ (8006fb4 <UART_SetConfig+0x2c8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d104      	bne.n	8006dee <UART_SetConfig+0x102>
 8006de4:	231b      	movs	r3, #27
 8006de6:	18fb      	adds	r3, r7, r3
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e003      	b.n	8006df6 <UART_SetConfig+0x10a>
 8006dee:	231b      	movs	r3, #27
 8006df0:	18fb      	adds	r3, r7, r3
 8006df2:	2210      	movs	r2, #16
 8006df4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69da      	ldr	r2, [r3, #28]
 8006dfa:	2380      	movs	r3, #128	@ 0x80
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d000      	beq.n	8006e04 <UART_SetConfig+0x118>
 8006e02:	e065      	b.n	8006ed0 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8006e04:	231b      	movs	r3, #27
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d015      	beq.n	8006e3a <UART_SetConfig+0x14e>
 8006e0e:	dc18      	bgt.n	8006e42 <UART_SetConfig+0x156>
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d00d      	beq.n	8006e30 <UART_SetConfig+0x144>
 8006e14:	dc15      	bgt.n	8006e42 <UART_SetConfig+0x156>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <UART_SetConfig+0x134>
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d005      	beq.n	8006e2a <UART_SetConfig+0x13e>
 8006e1e:	e010      	b.n	8006e42 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e20:	f7fd fe54 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8006e24:	0003      	movs	r3, r0
 8006e26:	617b      	str	r3, [r7, #20]
        break;
 8006e28:	e012      	b.n	8006e50 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e2a:	4b63      	ldr	r3, [pc, #396]	@ (8006fb8 <UART_SetConfig+0x2cc>)
 8006e2c:	617b      	str	r3, [r7, #20]
        break;
 8006e2e:	e00f      	b.n	8006e50 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e30:	f7fd fdc0 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8006e34:	0003      	movs	r3, r0
 8006e36:	617b      	str	r3, [r7, #20]
        break;
 8006e38:	e00a      	b.n	8006e50 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3a:	2380      	movs	r3, #128	@ 0x80
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	617b      	str	r3, [r7, #20]
        break;
 8006e40:	e006      	b.n	8006e50 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e46:	231a      	movs	r3, #26
 8006e48:	18fb      	adds	r3, r7, r3
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
        break;
 8006e4e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d100      	bne.n	8006e58 <UART_SetConfig+0x16c>
 8006e56:	e08d      	b.n	8006f74 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e5c:	4b57      	ldr	r3, [pc, #348]	@ (8006fbc <UART_SetConfig+0x2d0>)
 8006e5e:	0052      	lsls	r2, r2, #1
 8006e60:	5ad3      	ldrh	r3, [r2, r3]
 8006e62:	0019      	movs	r1, r3
 8006e64:	6978      	ldr	r0, [r7, #20]
 8006e66:	f7f9 f94b 	bl	8000100 <__udivsi3>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	005a      	lsls	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	18d2      	adds	r2, r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	0019      	movs	r1, r3
 8006e7c:	0010      	movs	r0, r2
 8006e7e:	f7f9 f93f 	bl	8000100 <__udivsi3>
 8006e82:	0003      	movs	r3, r0
 8006e84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b0f      	cmp	r3, #15
 8006e8a:	d91c      	bls.n	8006ec6 <UART_SetConfig+0x1da>
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	2380      	movs	r3, #128	@ 0x80
 8006e90:	025b      	lsls	r3, r3, #9
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d217      	bcs.n	8006ec6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	200e      	movs	r0, #14
 8006e9c:	183b      	adds	r3, r7, r0
 8006e9e:	210f      	movs	r1, #15
 8006ea0:	438a      	bics	r2, r1
 8006ea2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2207      	movs	r2, #7
 8006eac:	4013      	ands	r3, r2
 8006eae:	b299      	uxth	r1, r3
 8006eb0:	183b      	adds	r3, r7, r0
 8006eb2:	183a      	adds	r2, r7, r0
 8006eb4:	8812      	ldrh	r2, [r2, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	183a      	adds	r2, r7, r0
 8006ec0:	8812      	ldrh	r2, [r2, #0]
 8006ec2:	60da      	str	r2, [r3, #12]
 8006ec4:	e056      	b.n	8006f74 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec6:	231a      	movs	r3, #26
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	2201      	movs	r2, #1
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e051      	b.n	8006f74 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ed0:	231b      	movs	r3, #27
 8006ed2:	18fb      	adds	r3, r7, r3
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d015      	beq.n	8006f06 <UART_SetConfig+0x21a>
 8006eda:	dc18      	bgt.n	8006f0e <UART_SetConfig+0x222>
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d00d      	beq.n	8006efc <UART_SetConfig+0x210>
 8006ee0:	dc15      	bgt.n	8006f0e <UART_SetConfig+0x222>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <UART_SetConfig+0x200>
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d005      	beq.n	8006ef6 <UART_SetConfig+0x20a>
 8006eea:	e010      	b.n	8006f0e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fd fdee 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	617b      	str	r3, [r7, #20]
        break;
 8006ef4:	e012      	b.n	8006f1c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef6:	4b30      	ldr	r3, [pc, #192]	@ (8006fb8 <UART_SetConfig+0x2cc>)
 8006ef8:	617b      	str	r3, [r7, #20]
        break;
 8006efa:	e00f      	b.n	8006f1c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efc:	f7fd fd5a 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8006f00:	0003      	movs	r3, r0
 8006f02:	617b      	str	r3, [r7, #20]
        break;
 8006f04:	e00a      	b.n	8006f1c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f06:	2380      	movs	r3, #128	@ 0x80
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	617b      	str	r3, [r7, #20]
        break;
 8006f0c:	e006      	b.n	8006f1c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f12:	231a      	movs	r3, #26
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
        break;
 8006f1a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d028      	beq.n	8006f74 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f26:	4b25      	ldr	r3, [pc, #148]	@ (8006fbc <UART_SetConfig+0x2d0>)
 8006f28:	0052      	lsls	r2, r2, #1
 8006f2a:	5ad3      	ldrh	r3, [r2, r3]
 8006f2c:	0019      	movs	r1, r3
 8006f2e:	6978      	ldr	r0, [r7, #20]
 8006f30:	f7f9 f8e6 	bl	8000100 <__udivsi3>
 8006f34:	0003      	movs	r3, r0
 8006f36:	001a      	movs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	18d2      	adds	r2, r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	0019      	movs	r1, r3
 8006f46:	0010      	movs	r0, r2
 8006f48:	f7f9 f8da 	bl	8000100 <__udivsi3>
 8006f4c:	0003      	movs	r3, r0
 8006f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b0f      	cmp	r3, #15
 8006f54:	d90a      	bls.n	8006f6c <UART_SetConfig+0x280>
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	2380      	movs	r3, #128	@ 0x80
 8006f5a:	025b      	lsls	r3, r3, #9
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d205      	bcs.n	8006f6c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	e003      	b.n	8006f74 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006f6c:	231a      	movs	r3, #26
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	2201      	movs	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	226a      	movs	r2, #106	@ 0x6a
 8006f78:	2101      	movs	r1, #1
 8006f7a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2268      	movs	r2, #104	@ 0x68
 8006f80:	2101      	movs	r1, #1
 8006f82:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f90:	231a      	movs	r3, #26
 8006f92:	18fb      	adds	r3, r7, r3
 8006f94:	781b      	ldrb	r3, [r3, #0]
}
 8006f96:	0018      	movs	r0, r3
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b008      	add	sp, #32
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	46c0      	nop			@ (mov r8, r8)
 8006fa0:	cfff69f3 	.word	0xcfff69f3
 8006fa4:	ffffcfff 	.word	0xffffcfff
 8006fa8:	11fff4ff 	.word	0x11fff4ff
 8006fac:	40013800 	.word	0x40013800
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	40004400 	.word	0x40004400
 8006fb8:	00f42400 	.word	0x00f42400
 8006fbc:	08007dc8 	.word	0x08007dc8

08006fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	2208      	movs	r2, #8
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d00b      	beq.n	8006fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8007104 <UART_AdvFeatureConfig+0x144>)
 8006fda:	4013      	ands	r3, r2
 8006fdc:	0019      	movs	r1, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	d00b      	beq.n	800700c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	4a43      	ldr	r2, [pc, #268]	@ (8007108 <UART_AdvFeatureConfig+0x148>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	0019      	movs	r1, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	2202      	movs	r2, #2
 8007012:	4013      	ands	r3, r2
 8007014:	d00b      	beq.n	800702e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a3b      	ldr	r2, [pc, #236]	@ (800710c <UART_AdvFeatureConfig+0x14c>)
 800701e:	4013      	ands	r3, r2
 8007020:	0019      	movs	r1, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	2204      	movs	r2, #4
 8007034:	4013      	ands	r3, r2
 8007036:	d00b      	beq.n	8007050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	4a34      	ldr	r2, [pc, #208]	@ (8007110 <UART_AdvFeatureConfig+0x150>)
 8007040:	4013      	ands	r3, r2
 8007042:	0019      	movs	r1, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	2210      	movs	r2, #16
 8007056:	4013      	ands	r3, r2
 8007058:	d00b      	beq.n	8007072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4a2c      	ldr	r2, [pc, #176]	@ (8007114 <UART_AdvFeatureConfig+0x154>)
 8007062:	4013      	ands	r3, r2
 8007064:	0019      	movs	r1, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	2220      	movs	r2, #32
 8007078:	4013      	ands	r3, r2
 800707a:	d00b      	beq.n	8007094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	4a25      	ldr	r2, [pc, #148]	@ (8007118 <UART_AdvFeatureConfig+0x158>)
 8007084:	4013      	ands	r3, r2
 8007086:	0019      	movs	r1, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	2240      	movs	r2, #64	@ 0x40
 800709a:	4013      	ands	r3, r2
 800709c:	d01d      	beq.n	80070da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	@ (800711c <UART_AdvFeatureConfig+0x15c>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	0019      	movs	r1, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ba:	2380      	movs	r3, #128	@ 0x80
 80070bc:	035b      	lsls	r3, r3, #13
 80070be:	429a      	cmp	r2, r3
 80070c0:	d10b      	bne.n	80070da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	4a15      	ldr	r2, [pc, #84]	@ (8007120 <UART_AdvFeatureConfig+0x160>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	0019      	movs	r1, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070de:	2280      	movs	r2, #128	@ 0x80
 80070e0:	4013      	ands	r3, r2
 80070e2:	d00b      	beq.n	80070fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007124 <UART_AdvFeatureConfig+0x164>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	0019      	movs	r1, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }
}
 80070fc:	46c0      	nop			@ (mov r8, r8)
 80070fe:	46bd      	mov	sp, r7
 8007100:	b002      	add	sp, #8
 8007102:	bd80      	pop	{r7, pc}
 8007104:	ffff7fff 	.word	0xffff7fff
 8007108:	fffdffff 	.word	0xfffdffff
 800710c:	fffeffff 	.word	0xfffeffff
 8007110:	fffbffff 	.word	0xfffbffff
 8007114:	ffffefff 	.word	0xffffefff
 8007118:	ffffdfff 	.word	0xffffdfff
 800711c:	ffefffff 	.word	0xffefffff
 8007120:	ff9fffff 	.word	0xff9fffff
 8007124:	fff7ffff 	.word	0xfff7ffff

08007128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b092      	sub	sp, #72	@ 0x48
 800712c:	af02      	add	r7, sp, #8
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2290      	movs	r2, #144	@ 0x90
 8007134:	2100      	movs	r1, #0
 8007136:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007138:	f7fa fe82 	bl	8001e40 <HAL_GetTick>
 800713c:	0003      	movs	r3, r0
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2208      	movs	r2, #8
 8007148:	4013      	ands	r3, r2
 800714a:	2b08      	cmp	r3, #8
 800714c:	d12d      	bne.n	80071aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800714e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007150:	2280      	movs	r2, #128	@ 0x80
 8007152:	0391      	lsls	r1, r2, #14
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4a47      	ldr	r2, [pc, #284]	@ (8007274 <UART_CheckIdleState+0x14c>)
 8007158:	9200      	str	r2, [sp, #0]
 800715a:	2200      	movs	r2, #0
 800715c:	f000 f88e 	bl	800727c <UART_WaitOnFlagUntilTimeout>
 8007160:	1e03      	subs	r3, r0, #0
 8007162:	d022      	beq.n	80071aa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007164:	f3ef 8310 	mrs	r3, PRIMASK
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800716c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800716e:	2301      	movs	r3, #1
 8007170:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007174:	f383 8810 	msr	PRIMASK, r3
}
 8007178:	46c0      	nop			@ (mov r8, r8)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2180      	movs	r1, #128	@ 0x80
 8007186:	438a      	bics	r2, r1
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007190:	f383 8810 	msr	PRIMASK, r3
}
 8007194:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2288      	movs	r2, #136	@ 0x88
 800719a:	2120      	movs	r1, #32
 800719c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2284      	movs	r2, #132	@ 0x84
 80071a2:	2100      	movs	r1, #0
 80071a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e060      	b.n	800726c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2204      	movs	r2, #4
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d146      	bne.n	8007246 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ba:	2280      	movs	r2, #128	@ 0x80
 80071bc:	03d1      	lsls	r1, r2, #15
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007274 <UART_CheckIdleState+0x14c>)
 80071c2:	9200      	str	r2, [sp, #0]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f000 f859 	bl	800727c <UART_WaitOnFlagUntilTimeout>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d03b      	beq.n	8007246 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ce:	f3ef 8310 	mrs	r3, PRIMASK
 80071d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80071d4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d8:	2301      	movs	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f383 8810 	msr	PRIMASK, r3
}
 80071e2:	46c0      	nop			@ (mov r8, r8)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4922      	ldr	r1, [pc, #136]	@ (8007278 <UART_CheckIdleState+0x150>)
 80071f0:	400a      	ands	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f383 8810 	msr	PRIMASK, r3
}
 80071fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007200:	f3ef 8310 	mrs	r3, PRIMASK
 8007204:	61bb      	str	r3, [r7, #24]
  return(result);
 8007206:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007208:	633b      	str	r3, [r7, #48]	@ 0x30
 800720a:	2301      	movs	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	f383 8810 	msr	PRIMASK, r3
}
 8007214:	46c0      	nop			@ (mov r8, r8)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2101      	movs	r1, #1
 8007222:	438a      	bics	r2, r1
 8007224:	609a      	str	r2, [r3, #8]
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	f383 8810 	msr	PRIMASK, r3
}
 8007230:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	228c      	movs	r2, #140	@ 0x8c
 8007236:	2120      	movs	r1, #32
 8007238:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2284      	movs	r2, #132	@ 0x84
 800723e:	2100      	movs	r1, #0
 8007240:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e012      	b.n	800726c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2288      	movs	r2, #136	@ 0x88
 800724a:	2120      	movs	r1, #32
 800724c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	228c      	movs	r2, #140	@ 0x8c
 8007252:	2120      	movs	r1, #32
 8007254:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2284      	movs	r2, #132	@ 0x84
 8007266:	2100      	movs	r1, #0
 8007268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	0018      	movs	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	b010      	add	sp, #64	@ 0x40
 8007272:	bd80      	pop	{r7, pc}
 8007274:	01ffffff 	.word	0x01ffffff
 8007278:	fffffedf 	.word	0xfffffedf

0800727c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	1dfb      	adds	r3, r7, #7
 800728a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800728c:	e051      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	3301      	adds	r3, #1
 8007292:	d04e      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007294:	f7fa fdd4 	bl	8001e40 <HAL_GetTick>
 8007298:	0002      	movs	r2, r0
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d302      	bcc.n	80072aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e051      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2204      	movs	r2, #4
 80072b6:	4013      	ands	r3, r2
 80072b8:	d03b      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb6>
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b80      	cmp	r3, #128	@ 0x80
 80072be:	d038      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb6>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d035      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	2208      	movs	r2, #8
 80072ce:	4013      	ands	r3, r2
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d111      	bne.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2208      	movs	r2, #8
 80072da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	0018      	movs	r0, r3
 80072e0:	f000 f922 	bl	8007528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2290      	movs	r2, #144	@ 0x90
 80072e8:	2108      	movs	r1, #8
 80072ea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2284      	movs	r2, #132	@ 0x84
 80072f0:	2100      	movs	r1, #0
 80072f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e02c      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69da      	ldr	r2, [r3, #28]
 80072fe:	2380      	movs	r3, #128	@ 0x80
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	401a      	ands	r2, r3
 8007304:	2380      	movs	r3, #128	@ 0x80
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	429a      	cmp	r2, r3
 800730a:	d112      	bne.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2280      	movs	r2, #128	@ 0x80
 8007312:	0112      	lsls	r2, r2, #4
 8007314:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	0018      	movs	r0, r3
 800731a:	f000 f905 	bl	8007528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2290      	movs	r2, #144	@ 0x90
 8007322:	2120      	movs	r1, #32
 8007324:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2284      	movs	r2, #132	@ 0x84
 800732a:	2100      	movs	r1, #0
 800732c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e00f      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	425a      	negs	r2, r3
 8007342:	4153      	adcs	r3, r2
 8007344:	b2db      	uxtb	r3, r3
 8007346:	001a      	movs	r2, r3
 8007348:	1dfb      	adds	r3, r7, #7
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d09e      	beq.n	800728e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	0018      	movs	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	b004      	add	sp, #16
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b090      	sub	sp, #64	@ 0x40
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	1dbb      	adds	r3, r7, #6
 8007368:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1dba      	adds	r2, r7, #6
 8007374:	215c      	movs	r1, #92	@ 0x5c
 8007376:	8812      	ldrh	r2, [r2, #0]
 8007378:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2290      	movs	r2, #144	@ 0x90
 800737e:	2100      	movs	r1, #0
 8007380:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	228c      	movs	r2, #140	@ 0x8c
 8007386:	2122      	movs	r1, #34	@ 0x22
 8007388:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2280      	movs	r2, #128	@ 0x80
 800738e:	589b      	ldr	r3, [r3, r2]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02d      	beq.n	80073f0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2280      	movs	r2, #128	@ 0x80
 8007398:	589b      	ldr	r3, [r3, r2]
 800739a:	4a40      	ldr	r2, [pc, #256]	@ (800749c <UART_Start_Receive_DMA+0x140>)
 800739c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2280      	movs	r2, #128	@ 0x80
 80073a2:	589b      	ldr	r3, [r3, r2]
 80073a4:	4a3e      	ldr	r2, [pc, #248]	@ (80074a0 <UART_Start_Receive_DMA+0x144>)
 80073a6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2280      	movs	r2, #128	@ 0x80
 80073ac:	589b      	ldr	r3, [r3, r2]
 80073ae:	4a3d      	ldr	r2, [pc, #244]	@ (80074a4 <UART_Start_Receive_DMA+0x148>)
 80073b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2280      	movs	r2, #128	@ 0x80
 80073b6:	589b      	ldr	r3, [r3, r2]
 80073b8:	2200      	movs	r2, #0
 80073ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2280      	movs	r2, #128	@ 0x80
 80073c0:	5898      	ldr	r0, [r3, r2]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3324      	adds	r3, #36	@ 0x24
 80073c8:	0019      	movs	r1, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ce:	001a      	movs	r2, r3
 80073d0:	1dbb      	adds	r3, r7, #6
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	f7fc f842 	bl	800345c <HAL_DMA_Start_IT>
 80073d8:	1e03      	subs	r3, r0, #0
 80073da:	d009      	beq.n	80073f0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2290      	movs	r2, #144	@ 0x90
 80073e0:	2110      	movs	r1, #16
 80073e2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	228c      	movs	r2, #140	@ 0x8c
 80073e8:	2120      	movs	r1, #32
 80073ea:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e050      	b.n	8007492 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d019      	beq.n	800742c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f8:	f3ef 8310 	mrs	r3, PRIMASK
 80073fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007402:	2301      	movs	r3, #1
 8007404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007408:	f383 8810 	msr	PRIMASK, r3
}
 800740c:	46c0      	nop			@ (mov r8, r8)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2180      	movs	r1, #128	@ 0x80
 800741a:	0049      	lsls	r1, r1, #1
 800741c:	430a      	orrs	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007422:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	f383 8810 	msr	PRIMASK, r3
}
 800742a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800742c:	f3ef 8310 	mrs	r3, PRIMASK
 8007430:	613b      	str	r3, [r7, #16]
  return(result);
 8007432:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007434:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f383 8810 	msr	PRIMASK, r3
}
 8007440:	46c0      	nop			@ (mov r8, r8)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2101      	movs	r1, #1
 800744e:	430a      	orrs	r2, r1
 8007450:	609a      	str	r2, [r3, #8]
 8007452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007454:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f383 8810 	msr	PRIMASK, r3
}
 800745c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745e:	f3ef 8310 	mrs	r3, PRIMASK
 8007462:	61fb      	str	r3, [r7, #28]
  return(result);
 8007464:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
 8007468:	2301      	movs	r3, #1
 800746a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f383 8810 	msr	PRIMASK, r3
}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2140      	movs	r1, #64	@ 0x40
 8007480:	430a      	orrs	r2, r1
 8007482:	609a      	str	r2, [r3, #8]
 8007484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	f383 8810 	msr	PRIMASK, r3
}
 800748e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	0018      	movs	r0, r3
 8007494:	46bd      	mov	sp, r7
 8007496:	b010      	add	sp, #64	@ 0x40
 8007498:	bd80      	pop	{r7, pc}
 800749a:	46c0      	nop			@ (mov r8, r8)
 800749c:	080076ad 	.word	0x080076ad
 80074a0:	080077dd 	.word	0x080077dd
 80074a4:	0800781f 	.word	0x0800781f

080074a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	@ 0x28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b0:	f3ef 8310 	mrs	r3, PRIMASK
 80074b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80074b6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ba:	2301      	movs	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f383 8810 	msr	PRIMASK, r3
}
 80074c4:	46c0      	nop			@ (mov r8, r8)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	21c0      	movs	r1, #192	@ 0xc0
 80074d2:	438a      	bics	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f383 8810 	msr	PRIMASK, r3
}
 80074e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e2:	f3ef 8310 	mrs	r3, PRIMASK
 80074e6:	617b      	str	r3, [r7, #20]
  return(result);
 80074e8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80074ea:	623b      	str	r3, [r7, #32]
 80074ec:	2301      	movs	r3, #1
 80074ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f383 8810 	msr	PRIMASK, r3
}
 80074f6:	46c0      	nop			@ (mov r8, r8)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4908      	ldr	r1, [pc, #32]	@ (8007524 <UART_EndTxTransfer+0x7c>)
 8007504:	400a      	ands	r2, r1
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f383 8810 	msr	PRIMASK, r3
}
 8007512:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2288      	movs	r2, #136	@ 0x88
 8007518:	2120      	movs	r1, #32
 800751a:	5099      	str	r1, [r3, r2]
}
 800751c:	46c0      	nop			@ (mov r8, r8)
 800751e:	46bd      	mov	sp, r7
 8007520:	b00a      	add	sp, #40	@ 0x28
 8007522:	bd80      	pop	{r7, pc}
 8007524:	ff7fffff 	.word	0xff7fffff

08007528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08e      	sub	sp, #56	@ 0x38
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007530:	f3ef 8310 	mrs	r3, PRIMASK
 8007534:	617b      	str	r3, [r7, #20]
  return(result);
 8007536:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
 800753a:	2301      	movs	r3, #1
 800753c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	f383 8810 	msr	PRIMASK, r3
}
 8007544:	46c0      	nop			@ (mov r8, r8)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4926      	ldr	r1, [pc, #152]	@ (80075ec <UART_EndRxTransfer+0xc4>)
 8007552:	400a      	ands	r2, r1
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f383 8810 	msr	PRIMASK, r3
}
 8007560:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007562:	f3ef 8310 	mrs	r3, PRIMASK
 8007566:	623b      	str	r3, [r7, #32]
  return(result);
 8007568:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800756a:	633b      	str	r3, [r7, #48]	@ 0x30
 800756c:	2301      	movs	r3, #1
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	f383 8810 	msr	PRIMASK, r3
}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	491b      	ldr	r1, [pc, #108]	@ (80075f0 <UART_EndRxTransfer+0xc8>)
 8007584:	400a      	ands	r2, r1
 8007586:	609a      	str	r2, [r3, #8]
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	f383 8810 	msr	PRIMASK, r3
}
 8007592:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d118      	bne.n	80075ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800759c:	f3ef 8310 	mrs	r3, PRIMASK
 80075a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075a6:	2301      	movs	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f383 8810 	msr	PRIMASK, r3
}
 80075b0:	46c0      	nop			@ (mov r8, r8)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2110      	movs	r1, #16
 80075be:	438a      	bics	r2, r1
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f383 8810 	msr	PRIMASK, r3
}
 80075cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	228c      	movs	r2, #140	@ 0x8c
 80075d2:	2120      	movs	r1, #32
 80075d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075e2:	46c0      	nop			@ (mov r8, r8)
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b00e      	add	sp, #56	@ 0x38
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	46c0      	nop			@ (mov r8, r8)
 80075ec:	fffffedf 	.word	0xfffffedf
 80075f0:	effffffe 	.word	0xeffffffe

080075f4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08c      	sub	sp, #48	@ 0x30
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007600:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2220      	movs	r2, #32
 800760a:	4013      	ands	r3, r2
 800760c:	d135      	bne.n	800767a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	2256      	movs	r2, #86	@ 0x56
 8007612:	2100      	movs	r1, #0
 8007614:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007616:	f3ef 8310 	mrs	r3, PRIMASK
 800761a:	60fb      	str	r3, [r7, #12]
  return(result);
 800761c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800761e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007620:	2301      	movs	r3, #1
 8007622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f383 8810 	msr	PRIMASK, r3
}
 800762a:	46c0      	nop			@ (mov r8, r8)
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2180      	movs	r1, #128	@ 0x80
 8007638:	438a      	bics	r2, r1
 800763a:	609a      	str	r2, [r3, #8]
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f383 8810 	msr	PRIMASK, r3
}
 8007646:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007648:	f3ef 8310 	mrs	r3, PRIMASK
 800764c:	61bb      	str	r3, [r7, #24]
  return(result);
 800764e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
 8007652:	2301      	movs	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f383 8810 	msr	PRIMASK, r3
}
 800765c:	46c0      	nop			@ (mov r8, r8)
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2140      	movs	r1, #64	@ 0x40
 800766a:	430a      	orrs	r2, r1
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f383 8810 	msr	PRIMASK, r3
}
 8007678:	e004      	b.n	8007684 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	0018      	movs	r0, r3
 800767e:	f7f9 fc17 	bl	8000eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	46c0      	nop			@ (mov r8, r8)
 8007686:	46bd      	mov	sp, r7
 8007688:	b00c      	add	sp, #48	@ 0x30
 800768a:	bd80      	pop	{r7, pc}

0800768c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	0018      	movs	r0, r3
 800769e:	f7ff fb05 	bl	8006cac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076a2:	46c0      	nop			@ (mov r8, r8)
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b004      	add	sp, #16
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b094      	sub	sp, #80	@ 0x50
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2220      	movs	r2, #32
 80076c2:	4013      	ands	r3, r2
 80076c4:	d16f      	bne.n	80077a6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80076c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c8:	225e      	movs	r2, #94	@ 0x5e
 80076ca:	2100      	movs	r1, #0
 80076cc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ce:	f3ef 8310 	mrs	r3, PRIMASK
 80076d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80076d4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d8:	2301      	movs	r3, #1
 80076da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f383 8810 	msr	PRIMASK, r3
}
 80076e2:	46c0      	nop			@ (mov r8, r8)
 80076e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	493a      	ldr	r1, [pc, #232]	@ (80077d8 <UART_DMAReceiveCplt+0x12c>)
 80076f0:	400a      	ands	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	f383 8810 	msr	PRIMASK, r3
}
 80076fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007700:	f3ef 8310 	mrs	r3, PRIMASK
 8007704:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007708:	647b      	str	r3, [r7, #68]	@ 0x44
 800770a:	2301      	movs	r3, #1
 800770c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	f383 8810 	msr	PRIMASK, r3
}
 8007714:	46c0      	nop			@ (mov r8, r8)
 8007716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2101      	movs	r1, #1
 8007722:	438a      	bics	r2, r1
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	f383 8810 	msr	PRIMASK, r3
}
 8007730:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007732:	f3ef 8310 	mrs	r3, PRIMASK
 8007736:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	643b      	str	r3, [r7, #64]	@ 0x40
 800773c:	2301      	movs	r3, #1
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007742:	f383 8810 	msr	PRIMASK, r3
}
 8007746:	46c0      	nop			@ (mov r8, r8)
 8007748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2140      	movs	r1, #64	@ 0x40
 8007754:	438a      	bics	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800775a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	f383 8810 	msr	PRIMASK, r3
}
 8007762:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007766:	228c      	movs	r2, #140	@ 0x8c
 8007768:	2120      	movs	r1, #32
 800776a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d118      	bne.n	80077a6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007774:	f3ef 8310 	mrs	r3, PRIMASK
 8007778:	60fb      	str	r3, [r7, #12]
  return(result);
 800777a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800777e:	2301      	movs	r3, #1
 8007780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f383 8810 	msr	PRIMASK, r3
}
 8007788:	46c0      	nop			@ (mov r8, r8)
 800778a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2110      	movs	r1, #16
 8007796:	438a      	bics	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800779c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f383 8810 	msr	PRIMASK, r3
}
 80077a4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077a8:	2200      	movs	r2, #0
 80077aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d108      	bne.n	80077c6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b6:	225c      	movs	r2, #92	@ 0x5c
 80077b8:	5a9a      	ldrh	r2, [r3, r2]
 80077ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077bc:	0011      	movs	r1, r2
 80077be:	0018      	movs	r0, r3
 80077c0:	f7f9 fbb2 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077c4:	e003      	b.n	80077ce <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80077c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c8:	0018      	movs	r0, r3
 80077ca:	f7ff fa77 	bl	8006cbc <HAL_UART_RxCpltCallback>
}
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b014      	add	sp, #80	@ 0x50
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	46c0      	nop			@ (mov r8, r8)
 80077d8:	fffffeff 	.word	0xfffffeff

080077dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d10a      	bne.n	800780e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	225c      	movs	r2, #92	@ 0x5c
 80077fc:	5a9b      	ldrh	r3, [r3, r2]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	0011      	movs	r1, r2
 8007806:	0018      	movs	r0, r3
 8007808:	f7f9 fb8e 	bl	8000f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800780c:	e003      	b.n	8007816 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	0018      	movs	r0, r3
 8007812:	f7ff fa5b 	bl	8006ccc <HAL_UART_RxHalfCpltCallback>
}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b004      	add	sp, #16
 800781c:	bd80      	pop	{r7, pc}

0800781e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2288      	movs	r2, #136	@ 0x88
 8007830:	589b      	ldr	r3, [r3, r2]
 8007832:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	228c      	movs	r2, #140	@ 0x8c
 8007838:	589b      	ldr	r3, [r3, r2]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2280      	movs	r2, #128	@ 0x80
 8007844:	4013      	ands	r3, r2
 8007846:	2b80      	cmp	r3, #128	@ 0x80
 8007848:	d10a      	bne.n	8007860 <UART_DMAError+0x42>
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b21      	cmp	r3, #33	@ 0x21
 800784e:	d107      	bne.n	8007860 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2256      	movs	r2, #86	@ 0x56
 8007854:	2100      	movs	r1, #0
 8007856:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	0018      	movs	r0, r3
 800785c:	f7ff fe24 	bl	80074a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2240      	movs	r2, #64	@ 0x40
 8007868:	4013      	ands	r3, r2
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d10a      	bne.n	8007884 <UART_DMAError+0x66>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b22      	cmp	r3, #34	@ 0x22
 8007872:	d107      	bne.n	8007884 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	225e      	movs	r2, #94	@ 0x5e
 8007878:	2100      	movs	r1, #0
 800787a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	0018      	movs	r0, r3
 8007880:	f7ff fe52 	bl	8007528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2290      	movs	r2, #144	@ 0x90
 8007888:	589b      	ldr	r3, [r3, r2]
 800788a:	2210      	movs	r2, #16
 800788c:	431a      	orrs	r2, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2190      	movs	r1, #144	@ 0x90
 8007892:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	0018      	movs	r0, r3
 8007898:	f7ff fa20 	bl	8006cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800789c:	46c0      	nop			@ (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b006      	add	sp, #24
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	225e      	movs	r2, #94	@ 0x5e
 80078b6:	2100      	movs	r1, #0
 80078b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2256      	movs	r2, #86	@ 0x56
 80078be:	2100      	movs	r1, #0
 80078c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7ff fa09 	bl	8006cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ca:	46c0      	nop			@ (mov r8, r8)
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b004      	add	sp, #16
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078da:	f3ef 8310 	mrs	r3, PRIMASK
 80078de:	60bb      	str	r3, [r7, #8]
  return(result);
 80078e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	2301      	movs	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f383 8810 	msr	PRIMASK, r3
}
 80078ee:	46c0      	nop			@ (mov r8, r8)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2140      	movs	r1, #64	@ 0x40
 80078fc:	438a      	bics	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f383 8810 	msr	PRIMASK, r3
}
 800790a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2288      	movs	r2, #136	@ 0x88
 8007910:	2120      	movs	r1, #32
 8007912:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	0018      	movs	r0, r3
 800791e:	f7f9 fac7 	bl	8000eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007922:	46c0      	nop			@ (mov r8, r8)
 8007924:	46bd      	mov	sp, r7
 8007926:	b006      	add	sp, #24
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007932:	46c0      	nop			@ (mov r8, r8)
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	46bd      	mov	sp, r7
 8007946:	b002      	add	sp, #8
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	46bd      	mov	sp, r7
 8007956:	b002      	add	sp, #8
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2284      	movs	r2, #132	@ 0x84
 8007968:	5c9b      	ldrb	r3, [r3, r2]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_UARTEx_DisableFifoMode+0x16>
 800796e:	2302      	movs	r3, #2
 8007970:	e027      	b.n	80079c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2284      	movs	r2, #132	@ 0x84
 8007976:	2101      	movs	r1, #1
 8007978:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2288      	movs	r2, #136	@ 0x88
 800797e:	2124      	movs	r1, #36	@ 0x24
 8007980:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2101      	movs	r1, #1
 8007996:	438a      	bics	r2, r1
 8007998:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a0b      	ldr	r2, [pc, #44]	@ (80079cc <HAL_UARTEx_DisableFifoMode+0x70>)
 800799e:	4013      	ands	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2288      	movs	r2, #136	@ 0x88
 80079b4:	2120      	movs	r1, #32
 80079b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2284      	movs	r2, #132	@ 0x84
 80079bc:	2100      	movs	r1, #0
 80079be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	0018      	movs	r0, r3
 80079c4:	46bd      	mov	sp, r7
 80079c6:	b004      	add	sp, #16
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	dfffffff 	.word	0xdfffffff

080079d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2284      	movs	r2, #132	@ 0x84
 80079de:	5c9b      	ldrb	r3, [r3, r2]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e02e      	b.n	8007a46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2284      	movs	r2, #132	@ 0x84
 80079ec:	2101      	movs	r1, #1
 80079ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2288      	movs	r2, #136	@ 0x88
 80079f4:	2124      	movs	r1, #36	@ 0x24
 80079f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	438a      	bics	r2, r1
 8007a0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	08d9      	lsrs	r1, r3, #3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0018      	movs	r0, r3
 8007a28:	f000 f8bc 	bl	8007ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2288      	movs	r2, #136	@ 0x88
 8007a38:	2120      	movs	r1, #32
 8007a3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2284      	movs	r2, #132	@ 0x84
 8007a40:	2100      	movs	r1, #0
 8007a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	0018      	movs	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b004      	add	sp, #16
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2284      	movs	r2, #132	@ 0x84
 8007a5e:	5c9b      	ldrb	r3, [r3, r2]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e02f      	b.n	8007ac8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2284      	movs	r2, #132	@ 0x84
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2288      	movs	r2, #136	@ 0x88
 8007a74:	2124      	movs	r1, #36	@ 0x24
 8007a76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	438a      	bics	r2, r1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	4a0e      	ldr	r2, [pc, #56]	@ (8007ad0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	0019      	movs	r1, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f000 f87b 	bl	8007ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2288      	movs	r2, #136	@ 0x88
 8007aba:	2120      	movs	r1, #32
 8007abc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2284      	movs	r2, #132	@ 0x84
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	0018      	movs	r0, r3
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b004      	add	sp, #16
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	f1ffffff 	.word	0xf1ffffff

08007ad4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ad4:	b5b0      	push	{r4, r5, r7, lr}
 8007ad6:	b08a      	sub	sp, #40	@ 0x28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	1dbb      	adds	r3, r7, #6
 8007ae0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	228c      	movs	r2, #140	@ 0x8c
 8007ae6:	589b      	ldr	r3, [r3, r2]
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d156      	bne.n	8007b9a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007af2:	1dbb      	adds	r3, r7, #6
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e04e      	b.n	8007b9c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	2380      	movs	r3, #128	@ 0x80
 8007b04:	015b      	lsls	r3, r3, #5
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d109      	bne.n	8007b1e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d105      	bne.n	8007b1e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2201      	movs	r2, #1
 8007b16:	4013      	ands	r3, r2
 8007b18:	d001      	beq.n	8007b1e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e03e      	b.n	8007b9c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007b2a:	2527      	movs	r5, #39	@ 0x27
 8007b2c:	197c      	adds	r4, r7, r5
 8007b2e:	1dbb      	adds	r3, r7, #6
 8007b30:	881a      	ldrh	r2, [r3, #0]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	0018      	movs	r0, r3
 8007b38:	f7ff fc10 	bl	800735c <UART_Start_Receive_DMA>
 8007b3c:	0003      	movs	r3, r0
 8007b3e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007b40:	197b      	adds	r3, r7, r5
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d124      	bne.n	8007b92 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d11c      	bne.n	8007b8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2210      	movs	r2, #16
 8007b56:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b58:	f3ef 8310 	mrs	r3, PRIMASK
 8007b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b5e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b60:	623b      	str	r3, [r7, #32]
 8007b62:	2301      	movs	r3, #1
 8007b64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f383 8810 	msr	PRIMASK, r3
}
 8007b6c:	46c0      	nop			@ (mov r8, r8)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2110      	movs	r1, #16
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f383 8810 	msr	PRIMASK, r3
}
 8007b88:	e003      	b.n	8007b92 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007b8a:	2327      	movs	r3, #39	@ 0x27
 8007b8c:	18fb      	adds	r3, r7, r3
 8007b8e:	2201      	movs	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8007b92:	2327      	movs	r3, #39	@ 0x27
 8007b94:	18fb      	adds	r3, r7, r3
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	e000      	b.n	8007b9c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007b9a:	2302      	movs	r3, #2
  }
}
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b00a      	add	sp, #40	@ 0x28
 8007ba2:	bdb0      	pop	{r4, r5, r7, pc}

08007ba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d108      	bne.n	8007bc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	226a      	movs	r2, #106	@ 0x6a
 8007bb8:	2101      	movs	r1, #1
 8007bba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2268      	movs	r2, #104	@ 0x68
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bc4:	e043      	b.n	8007c4e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bc6:	260f      	movs	r6, #15
 8007bc8:	19bb      	adds	r3, r7, r6
 8007bca:	2208      	movs	r2, #8
 8007bcc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bce:	200e      	movs	r0, #14
 8007bd0:	183b      	adds	r3, r7, r0
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	0e5b      	lsrs	r3, r3, #25
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	240d      	movs	r4, #13
 8007be2:	193b      	adds	r3, r7, r4
 8007be4:	2107      	movs	r1, #7
 8007be6:	400a      	ands	r2, r1
 8007be8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	0f5b      	lsrs	r3, r3, #29
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	250c      	movs	r5, #12
 8007bf6:	197b      	adds	r3, r7, r5
 8007bf8:	2107      	movs	r1, #7
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bfe:	183b      	adds	r3, r7, r0
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	197a      	adds	r2, r7, r5
 8007c04:	7812      	ldrb	r2, [r2, #0]
 8007c06:	4914      	ldr	r1, [pc, #80]	@ (8007c58 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c08:	5c8a      	ldrb	r2, [r1, r2]
 8007c0a:	435a      	muls	r2, r3
 8007c0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c0e:	197b      	adds	r3, r7, r5
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	4a12      	ldr	r2, [pc, #72]	@ (8007c5c <UARTEx_SetNbDataToProcess+0xb8>)
 8007c14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c16:	0019      	movs	r1, r3
 8007c18:	f7f8 fafc 	bl	8000214 <__divsi3>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	b299      	uxth	r1, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	226a      	movs	r2, #106	@ 0x6a
 8007c24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c26:	19bb      	adds	r3, r7, r6
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	193a      	adds	r2, r7, r4
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	490a      	ldr	r1, [pc, #40]	@ (8007c58 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c30:	5c8a      	ldrb	r2, [r1, r2]
 8007c32:	435a      	muls	r2, r3
 8007c34:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c36:	193b      	adds	r3, r7, r4
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	4a08      	ldr	r2, [pc, #32]	@ (8007c5c <UARTEx_SetNbDataToProcess+0xb8>)
 8007c3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c3e:	0019      	movs	r1, r3
 8007c40:	f7f8 fae8 	bl	8000214 <__divsi3>
 8007c44:	0003      	movs	r3, r0
 8007c46:	b299      	uxth	r1, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2268      	movs	r2, #104	@ 0x68
 8007c4c:	5299      	strh	r1, [r3, r2]
}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b005      	add	sp, #20
 8007c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	08007de0 	.word	0x08007de0
 8007c5c:	08007de8 	.word	0x08007de8

08007c60 <memset>:
 8007c60:	0003      	movs	r3, r0
 8007c62:	1882      	adds	r2, r0, r2
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d100      	bne.n	8007c6a <memset+0xa>
 8007c68:	4770      	bx	lr
 8007c6a:	7019      	strb	r1, [r3, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	e7f9      	b.n	8007c64 <memset+0x4>

08007c70 <__libc_init_array>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	2600      	movs	r6, #0
 8007c74:	4c0c      	ldr	r4, [pc, #48]	@ (8007ca8 <__libc_init_array+0x38>)
 8007c76:	4d0d      	ldr	r5, [pc, #52]	@ (8007cac <__libc_init_array+0x3c>)
 8007c78:	1b64      	subs	r4, r4, r5
 8007c7a:	10a4      	asrs	r4, r4, #2
 8007c7c:	42a6      	cmp	r6, r4
 8007c7e:	d109      	bne.n	8007c94 <__libc_init_array+0x24>
 8007c80:	2600      	movs	r6, #0
 8007c82:	f000 f819 	bl	8007cb8 <_init>
 8007c86:	4c0a      	ldr	r4, [pc, #40]	@ (8007cb0 <__libc_init_array+0x40>)
 8007c88:	4d0a      	ldr	r5, [pc, #40]	@ (8007cb4 <__libc_init_array+0x44>)
 8007c8a:	1b64      	subs	r4, r4, r5
 8007c8c:	10a4      	asrs	r4, r4, #2
 8007c8e:	42a6      	cmp	r6, r4
 8007c90:	d105      	bne.n	8007c9e <__libc_init_array+0x2e>
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	00b3      	lsls	r3, r6, #2
 8007c96:	58eb      	ldr	r3, [r5, r3]
 8007c98:	4798      	blx	r3
 8007c9a:	3601      	adds	r6, #1
 8007c9c:	e7ee      	b.n	8007c7c <__libc_init_array+0xc>
 8007c9e:	00b3      	lsls	r3, r6, #2
 8007ca0:	58eb      	ldr	r3, [r5, r3]
 8007ca2:	4798      	blx	r3
 8007ca4:	3601      	adds	r6, #1
 8007ca6:	e7f2      	b.n	8007c8e <__libc_init_array+0x1e>
 8007ca8:	08007df0 	.word	0x08007df0
 8007cac:	08007df0 	.word	0x08007df0
 8007cb0:	08007df4 	.word	0x08007df4
 8007cb4:	08007df0 	.word	0x08007df0

08007cb8 <_init>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr

08007cc4 <_fini>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr
