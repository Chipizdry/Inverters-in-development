
PWM_Controller_Full_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007c90  08007c90  00008c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007db0  08007db0  00009010  2**0
                  CONTENTS
  4 .ARM          00000000  08007db0  08007db0  00009010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007db0  08007db0  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007db8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000010  08007dc8  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08007dc8  00009560  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a49  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003364  00000000  00000000  00021a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00024de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  000262c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f77  00000000  00000000  00027332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adb9  00000000  00000000  0003f2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f79  00000000  00000000  0005a062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0fdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c14  00000000  00000000  000f1020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000f5c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007c78 	.word	0x08007c78

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08007c78 	.word	0x08007c78

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
 80003f8:	001a      	movs	r2, r3
 80003fa:	1cbb      	adds	r3, r7, #2
 80003fc:	801a      	strh	r2, [r3, #0]


	if (rxFrame[0] != SLAVE_ID || Size < 4) {
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	781a      	ldrb	r2, [r3, #0]
 8000402:	4b59      	ldr	r3, [pc, #356]	@ (8000568 <Registers_handler+0x17c>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	429a      	cmp	r2, r3
 8000408:	d103      	bne.n	8000412 <Registers_handler+0x26>
 800040a:	1cbb      	adds	r3, r7, #2
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	2b03      	cmp	r3, #3
 8000410:	d806      	bhi.n	8000420 <Registers_handler+0x34>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 8000412:	4b56      	ldr	r3, [pc, #344]	@ (800056c <Registers_handler+0x180>)
 8000414:	2202      	movs	r2, #2
 8000416:	2103      	movs	r1, #3
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fe9f 	bl	800115c <sendError>

	        return;
 800041e:	e0a0      	b.n	8000562 <Registers_handler+0x176>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 2]<<8) | (rxFrame[Size - 1]);
 8000420:	1cbb      	adds	r3, r7, #2
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	3b02      	subs	r3, #2
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	18d3      	adds	r3, r2, r3
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	021b      	lsls	r3, r3, #8
 800042e:	b21a      	sxth	r2, r3
 8000430:	1cbb      	adds	r3, r7, #2
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	68f9      	ldr	r1, [r7, #12]
 8000438:	18cb      	adds	r3, r1, r3
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b21b      	sxth	r3, r3
 800043e:	4313      	orrs	r3, r2
 8000440:	b21a      	sxth	r2, r3
 8000442:	2314      	movs	r3, #20
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	801a      	strh	r2, [r3, #0]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 8000448:	1cbb      	adds	r3, r7, #2
 800044a:	881b      	ldrh	r3, [r3, #0]
 800044c:	b2db      	uxtb	r3, r3
 800044e:	3b02      	subs	r3, #2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	2312      	movs	r3, #18
 8000454:	18fc      	adds	r4, r7, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fddc 	bl	8001018 <calcCRC16ModBus>
 8000460:	0003      	movs	r3, r0
 8000462:	8023      	strh	r3, [r4, #0]
	   //     sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных

	     //   return;
	   // }

			 if (rxFrame[0] == SLAVE_ID) {
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b3f      	ldr	r3, [pc, #252]	@ (8000568 <Registers_handler+0x17c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d14b      	bne.n	8000508 <Registers_handler+0x11c>
                       uint8_t opCode = rxFrame[1];
 8000470:	2111      	movs	r1, #17
 8000472:	187b      	adds	r3, r7, r1
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	7852      	ldrb	r2, [r2, #1]
 8000478:	701a      	strb	r2, [r3, #0]

				  			  switch (opCode) {
 800047a:	187b      	adds	r3, r7, r1
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b10      	cmp	r3, #16
 8000480:	d832      	bhi.n	80004e8 <Registers_handler+0xfc>
 8000482:	009a      	lsls	r2, r3, #2
 8000484:	4b3a      	ldr	r3, [pc, #232]	@ (8000570 <Registers_handler+0x184>)
 8000486:	18d3      	adds	r3, r2, r3
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	469f      	mov	pc, r3
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 800048c:	4b39      	ldr	r3, [pc, #228]	@ (8000574 <Registers_handler+0x188>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	001a      	movs	r2, r3
 8000492:	4b36      	ldr	r3, [pc, #216]	@ (800056c <Registers_handler+0x180>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f000 ffc6 	bl	8001428 <handleReadCoils>
				  			   break;
 800049c:	e061      	b.n	8000562 <Registers_handler+0x176>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 800049e:	4b36      	ldr	r3, [pc, #216]	@ (8000578 <Registers_handler+0x18c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	001a      	movs	r2, r3
 80004a4:	4b31      	ldr	r3, [pc, #196]	@ (800056c <Registers_handler+0x180>)
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 f839 	bl	8001520 <handleReadDiscreteInputs>
							   break;
 80004ae:	e058      	b.n	8000562 <Registers_handler+0x176>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	4b2e      	ldr	r3, [pc, #184]	@ (800056c <Registers_handler+0x180>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fe90 	bl	80011dc <handleReadHoldingRegs>
				  			   break;
 80004bc:	e051      	b.n	8000562 <Registers_handler+0x176>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <Registers_handler+0x180>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 ff21 	bl	800130c <handleReadInputRegs>

				  			   break;
 80004ca:	e04a      	b.n	8000562 <Registers_handler+0x176>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	4b27      	ldr	r3, [pc, #156]	@ (800056c <Registers_handler+0x180>)
 80004d0:	0011      	movs	r1, r2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 f8a2 	bl	800161c <handleWriteMulyipleHandlingRegister>

                               break;
 80004d8:	e043      	b.n	8000562 <Registers_handler+0x176>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4b23      	ldr	r3, [pc, #140]	@ (800056c <Registers_handler+0x180>)
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 f89b 	bl	800161c <handleWriteMulyipleHandlingRegister>

                               break;
 80004e6:	e03c      	b.n	8000562 <Registers_handler+0x176>


				  			   default:

				  				 LED_1_ON;
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	021b      	lsls	r3, r3, #8
 80004ec:	4823      	ldr	r0, [pc, #140]	@ (800057c <Registers_handler+0x190>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	0019      	movs	r1, r3
 80004f2:	f003 fc93 	bl	8003e1c <HAL_GPIO_WritePin>
				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 80004f6:	2311      	movs	r3, #17
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	7819      	ldrb	r1, [r3, #0]
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <Registers_handler+0x180>)
 80004fe:	2201      	movs	r2, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fe2b 	bl	800115c <sendError>
				  			   break;
 8000506:	e02c      	b.n	8000562 <Registers_handler+0x176>
				  			     }

				  			 }

			                  else{
			                            for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8000508:	2316      	movs	r3, #22
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	801a      	strh	r2, [r3, #0]
 8000510:	e00b      	b.n	800052a <Registers_handler+0x13e>
 8000512:	2116      	movs	r1, #22
 8000514:	187b      	adds	r3, r7, r1
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	187b      	adds	r3, r7, r1
 8000522:	881a      	ldrh	r2, [r3, #0]
 8000524:	187b      	adds	r3, r7, r1
 8000526:	3201      	adds	r2, #1
 8000528:	801a      	strh	r2, [r3, #0]
 800052a:	2316      	movs	r3, #22
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	2b3f      	cmp	r3, #63	@ 0x3f
 8000532:	d9ee      	bls.n	8000512 <Registers_handler+0x126>
			 				  			    	     RX_2;
 8000534:	2380      	movs	r3, #128	@ 0x80
 8000536:	01db      	lsls	r3, r3, #7
 8000538:	4810      	ldr	r0, [pc, #64]	@ (800057c <Registers_handler+0x190>)
 800053a:	2200      	movs	r2, #0
 800053c:	0019      	movs	r1, r3
 800053e:	f003 fc6d 	bl	8003e1c <HAL_GPIO_WritePin>
			 				  			    	  Reset_USART1();
 8000542:	f000 f841 	bl	80005c8 <Reset_USART1>
			 				  			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000546:	68f9      	ldr	r1, [r7, #12]
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <Registers_handler+0x180>)
 800054a:	2240      	movs	r2, #64	@ 0x40
 800054c:	0018      	movs	r0, r3
 800054e:	f007 faa1 	bl	8007a94 <HAL_UARTEx_ReceiveToIdle_DMA>
			 				  			    			    // Включение прерывания IDLE
			 				  			   __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); }
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <Registers_handler+0x180>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b04      	ldr	r3, [pc, #16]	@ (800056c <Registers_handler+0x180>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2110      	movs	r1, #16
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]

                          }
 8000562:	46bd      	mov	sp, r7
 8000564:	b007      	add	sp, #28
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	20000000 	.word	0x20000000
 800056c:	200001c8 	.word	0x200001c8
 8000570:	08007c90 	.word	0x08007c90
 8000574:	20000559 	.word	0x20000559
 8000578:	20000558 	.word	0x20000558
 800057c:	50000800 	.word	0x50000800

08000580 <Check_USART1_Timeout>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

 void Check_USART1_Timeout(void)
 {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8000584:	f001 fc6a 	bl	8001e5c <HAL_GetTick>
 8000588:	0002      	movs	r2, r0
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <Check_USART1_Timeout+0x40>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad2      	subs	r2, r2, r3
 8000590:	23fa      	movs	r3, #250	@ 0xfa
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	429a      	cmp	r2, r3
 8000596:	d30f      	bcc.n	80005b8 <Check_USART1_Timeout+0x38>
     {

         Reset_USART1();
 8000598:	f000 f816 	bl	80005c8 <Reset_USART1>
         RX_2;
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	01db      	lsls	r3, r3, #7
 80005a0:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <Check_USART1_Timeout+0x44>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	0019      	movs	r1, r3
 80005a6:	f003 fc39 	bl	8003e1c <HAL_GPIO_WritePin>
         LED_1_OFF;
 80005aa:	2380      	movs	r3, #128	@ 0x80
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <Check_USART1_Timeout+0x44>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	0019      	movs	r1, r3
 80005b4:	f003 fc32 	bl	8003e1c <HAL_GPIO_WritePin>
     }
 }
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000314 	.word	0x20000314
 80005c4:	50000800 	.word	0x50000800

080005c8 <Reset_USART1>:


 void Reset_USART1(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
     // Остановите передачу и прием по DMA, если активны
     HAL_UART_DMAStop(&huart1);
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <Reset_USART1+0xc8>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f005 ff92 	bl	80064f8 <HAL_UART_DMAStop>

     // Прерывайте любые активные DMA транзакции
     if (hdma_usart1_rx.Instance != NULL) {
 80005d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <Reset_USART1+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <Reset_USART1+0x1c>
         HAL_DMA_Abort(&hdma_usart1_rx);
 80005dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <Reset_USART1+0xcc>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 ffd0 	bl	8003584 <HAL_DMA_Abort>
     }
     if (hdma_usart1_tx.Instance != NULL) {
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <Reset_USART1+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <Reset_USART1+0x2c>
         HAL_DMA_Abort(&hdma_usart1_tx);
 80005ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <Reset_USART1+0xd0>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 ffc8 	bl	8003584 <HAL_DMA_Abort>
     }

     // Отключите все прерывания UART
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80005f4:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <Reset_USART1+0xc8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <Reset_USART1+0xc8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2110      	movs	r1, #16
 8000600:	438a      	bics	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <Reset_USART1+0xc8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <Reset_USART1+0xc8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	438a      	bics	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <Reset_USART1+0xc8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <Reset_USART1+0xc8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2120      	movs	r1, #32
 8000620:	438a      	bics	r2, r1
 8000622:	601a      	str	r2, [r3, #0]

     // Сбросите периферийный модуль USART1
     __HAL_RCC_USART1_FORCE_RESET();
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <Reset_USART1+0xd4>)
 8000626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <Reset_USART1+0xd4>)
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	01c9      	lsls	r1, r1, #7
 800062e:	430a      	orrs	r2, r1
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
     HAL_Delay(1); // Дождитесь завершения сброса
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fc1c 	bl	8001e70 <HAL_Delay>
     __HAL_RCC_USART1_RELEASE_RESET();
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <Reset_USART1+0xd4>)
 800063a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <Reset_USART1+0xd4>)
 800063e:	4918      	ldr	r1, [pc, #96]	@ (80006a0 <Reset_USART1+0xd8>)
 8000640:	400a      	ands	r2, r1
 8000642:	631a      	str	r2, [r3, #48]	@ 0x30

     // Обнуляем настройки UART (в случае, если библиотека HAL требует)
     HAL_UART_DeInit(&huart1);
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <Reset_USART1+0xc8>)
 8000646:	0018      	movs	r0, r3
 8000648:	f005 fe84 	bl	8006354 <HAL_UART_DeInit>

     // �?нициализируем UART заново
     MX_USART1_UART_Init();
 800064c:	f000 fb36 	bl	8000cbc <MX_USART1_UART_Init>

     // �?нициализируем DMA заново (если DMA используется)
     MX_DMA_Init();
 8000650:	f000 fb82 	bl	8000d58 <MX_DMA_Init>

     // Настройка UART для приема данных с использованием DMA
     HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000654:	4913      	ldr	r1, [pc, #76]	@ (80006a4 <Reset_USART1+0xdc>)
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <Reset_USART1+0xc8>)
 8000658:	2240      	movs	r2, #64	@ 0x40
 800065a:	0018      	movs	r0, r3
 800065c:	f007 fa1a 	bl	8007a94 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <Reset_USART1+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <Reset_USART1+0xcc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2104      	movs	r1, #4
 800066c:	438a      	bics	r2, r1
 800066e:	601a      	str	r2, [r3, #0]


      RX_2;
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	01db      	lsls	r3, r3, #7
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <Reset_USART1+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	0019      	movs	r1, r3
 800067a:	f003 fbcf 	bl	8003e1c <HAL_GPIO_WritePin>

     // Сброс параметров и таймеров, связанных с UART
     lastActivityTime = HAL_GetTick();
 800067e:	f001 fbed 	bl	8001e5c <HAL_GetTick>
 8000682:	0002      	movs	r2, r0
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <Reset_USART1+0xe4>)
 8000686:	601a      	str	r2, [r3, #0]
 }
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	200001c8 	.word	0x200001c8
 8000694:	2000025c 	.word	0x2000025c
 8000698:	200002b8 	.word	0x200002b8
 800069c:	40021000 	.word	0x40021000
 80006a0:	ffffbfff 	.word	0xffffbfff
 80006a4:	20000318 	.word	0x20000318
 80006a8:	50000800 	.word	0x50000800
 80006ac:	20000314 	.word	0x20000314

080006b0 <ADC_Read>:

 uint16_t ADC_Read(uint32_t channel) {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
     ADC_ChannelConfTypeDef sConfig = {0};
 80006b8:	2408      	movs	r4, #8
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	230c      	movs	r3, #12
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f007 faac 	bl	8007c20 <memset>


     // Настраиваем новый канал
     sConfig.Channel = channel;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
     sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
     sConfig.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2205      	movs	r2, #5
 80006d8:	609a      	str	r2, [r3, #8]
     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006da:	193a      	adds	r2, r7, r4
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <ADC_Read+0x88>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 f825 	bl	8002730 <HAL_ADC_ConfigChannel>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <ADC_Read+0x3e>
         return 0;  // Возврат в случае ошибки
 80006ea:	2300      	movs	r3, #0
 80006ec:	e020      	b.n	8000730 <ADC_Read+0x80>
     }

     // Запуск одиночного преобразования
     if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <ADC_Read+0x88>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fef3 	bl	80024dc <HAL_ADC_Start>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <ADC_Read+0x4e>
         return 0;  // Ошибка запуска
 80006fa:	2300      	movs	r3, #0
 80006fc:	e018      	b.n	8000730 <ADC_Read+0x80>
     }

     // Ожидание завершения преобразования
     if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80006fe:	2301      	movs	r3, #1
 8000700:	425a      	negs	r2, r3
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <ADC_Read+0x88>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f001 ff72 	bl	80025f0 <HAL_ADC_PollForConversion>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <ADC_Read+0x64>
         return 0;  // Ошибка преобразования
 8000710:	2300      	movs	r3, #0
 8000712:	e00d      	b.n	8000730 <ADC_Read+0x80>
     }

     // Считываем значение
     uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <ADC_Read+0x88>)
 8000716:	0018      	movs	r0, r3
 8000718:	f001 fffe 	bl	8002718 <HAL_ADC_GetValue>
 800071c:	0002      	movs	r2, r0
 800071e:	2416      	movs	r4, #22
 8000720:	193b      	adds	r3, r7, r4
 8000722:	801a      	strh	r2, [r3, #0]

     // Останавливаем ADC после завершения
     HAL_ADC_Stop(&hadc1);
 8000724:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <ADC_Read+0x88>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 ff26 	bl	8002578 <HAL_ADC_Stop>

     return value;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	881b      	ldrh	r3, [r3, #0]
 }
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	b007      	add	sp, #28
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	2000002c 	.word	0x2000002c

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f001 fb10 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f842 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 fb2c 	bl	8000da4 <MX_GPIO_Init>
  MX_DMA_Init();
 800074c:	f000 fb04 	bl	8000d58 <MX_DMA_Init>
  MX_I2C2_Init();
 8000750:	f000 f902 	bl	8000958 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000754:	f000 f940 	bl	80009d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000758:	f000 fa0a 	bl	8000b70 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800075c:	f000 faae 	bl	8000cbc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000760:	f000 f88e 	bl	8000880 <MX_ADC1_Init>
  MX_TIM14_Init();
 8000764:	f000 fa86 	bl	8000c74 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <main+0x74>)
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fb76 	bl	8002e5c <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <main+0x78>)
 8000772:	2100      	movs	r1, #0
 8000774:	0018      	movs	r0, r3
 8000776:	f004 fbf9 	bl	8004f6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <main+0x7c>)
 800077c:	2100      	movs	r1, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f004 fbf4 	bl	8004f6c <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000784:	490d      	ldr	r1, [pc, #52]	@ (80007bc <main+0x80>)
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <main+0x84>)
 8000788:	2240      	movs	r2, #64	@ 0x40
 800078a:	0018      	movs	r0, r3
 800078c:	f007 f982 	bl	8007a94 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <main+0x88>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <main+0x88>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2104      	movs	r1, #4
 800079c:	438a      	bics	r2, r1
 800079e:	601a      	str	r2, [r3, #0]
   HAL_TIM_Base_Start_IT(&htim14);
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <main+0x8c>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f004 fb34 	bl	8004e10 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Check_USART1_Timeout();
 80007a8:	f7ff feea 	bl	8000580 <Check_USART1_Timeout>
 80007ac:	e7fc      	b.n	80007a8 <main+0x6c>
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	200000e4 	.word	0x200000e4
 80007b8:	20000130 	.word	0x20000130
 80007bc:	20000318 	.word	0x20000318
 80007c0:	200001c8 	.word	0x200001c8
 80007c4:	2000025c 	.word	0x2000025c
 80007c8:	2000017c 	.word	0x2000017c

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b093      	sub	sp, #76	@ 0x4c
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	2414      	movs	r4, #20
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f007 fa1f 	bl	8007c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	0018      	movs	r0, r3
 80007e6:	2310      	movs	r3, #16
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f007 fa18 	bl	8007c20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 fc87 	bl	8004108 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2202      	movs	r2, #2
 80007fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000808:	0021      	movs	r1, r4
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2240      	movs	r2, #64	@ 0x40
 8000814:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2202      	movs	r2, #2
 8000820:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2208      	movs	r2, #8
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	0292      	lsls	r2, r2, #10
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	0592      	lsls	r2, r2, #22
 800083c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	187b      	adds	r3, r7, r1
 8000840:	0018      	movs	r0, r3
 8000842:	f003 fcad 	bl	80041a0 <HAL_RCC_OscConfig>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800084a:	f000 fbdf 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2202      	movs	r2, #2
 8000858:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2102      	movs	r1, #2
 800086a:	0018      	movs	r0, r3
 800086c:	f003 ffa8 	bl	80047c0 <HAL_RCC_ClockConfig>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000874:	f000 fbca 	bl	800100c <Error_Handler>
  }
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b013      	add	sp, #76	@ 0x4c
 800087e:	bd90      	pop	{r4, r7, pc}

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	0018      	movs	r0, r3
 800088a:	230c      	movs	r3, #12
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f007 f9c6 	bl	8007c20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000894:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_ADC1_Init+0xcc>)
 8000896:	4a2e      	ldr	r2, [pc, #184]	@ (8000950 <MX_ADC1_Init+0xd0>)
 8000898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089a:	4b2c      	ldr	r3, [pc, #176]	@ (800094c <MX_ADC1_Init+0xcc>)
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	0612      	lsls	r2, r2, #24
 80008a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a2:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b28      	ldr	r3, [pc, #160]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ae:	4b27      	ldr	r3, [pc, #156]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b4:	4b25      	ldr	r3, [pc, #148]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ba:	4b24      	ldr	r3, [pc, #144]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008d4:	2220      	movs	r2, #32
 80008d6:	2100      	movs	r1, #0
 80008d8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008e8:	222c      	movs	r2, #44	@ 0x2c
 80008ea:	2100      	movs	r1, #0
 80008ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008f6:	2205      	movs	r2, #5
 80008f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_ADC1_Init+0xcc>)
 80008fc:	2205      	movs	r2, #5
 80008fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_ADC1_Init+0xcc>)
 8000902:	223c      	movs	r2, #60	@ 0x3c
 8000904:	2100      	movs	r1, #0
 8000906:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_ADC1_Init+0xcc>)
 800090a:	2200      	movs	r2, #0
 800090c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_ADC1_Init+0xcc>)
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fc3b 	bl	800218c <HAL_ADC_Init>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800091a:	f000 fb77 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <MX_ADC1_Init+0xd4>)
 8000922:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	1d3a      	adds	r2, r7, #4
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_ADC1_Init+0xcc>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fefa 	bl	8002730 <HAL_ADC_ConfigChannel>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000940:	f000 fb64 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b004      	add	sp, #16
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000002c 	.word	0x2000002c
 8000950:	40012400 	.word	0x40012400
 8000954:	1c000080 	.word	0x1c000080

08000958 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <MX_I2C2_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	@ (80009d0 <MX_I2C2_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_I2C2_Init+0x74>)
 8000964:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <MX_I2C2_Init+0x7c>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_I2C2_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_I2C2_Init+0x74>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_I2C2_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_I2C2_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_I2C2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_I2C2_Init+0x74>)
 8000994:	0018      	movs	r0, r3
 8000996:	f003 fa79 	bl	8003e8c <HAL_I2C_Init>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800099e:	f000 fb35 	bl	800100c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <MX_I2C2_Init+0x74>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fb16 	bl	8003fd8 <HAL_I2CEx_ConfigAnalogFilter>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 fb2c 	bl	800100c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <MX_I2C2_Init+0x74>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	0018      	movs	r0, r3
 80009ba:	f003 fb59 	bl	8004070 <HAL_I2CEx_ConfigDigitalFilter>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 fb23 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000090 	.word	0x20000090
 80009d0:	40005800 	.word	0x40005800
 80009d4:	10b17db5 	.word	0x10b17db5

080009d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09c      	sub	sp, #112	@ 0x70
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	2360      	movs	r3, #96	@ 0x60
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	2310      	movs	r3, #16
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f007 f919 	bl	8007c20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	2354      	movs	r3, #84	@ 0x54
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	0018      	movs	r0, r3
 80009f4:	230c      	movs	r3, #12
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f007 f911 	bl	8007c20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	2338      	movs	r3, #56	@ 0x38
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	231c      	movs	r3, #28
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f007 f909 	bl	8007c20 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2334      	movs	r3, #52	@ 0x34
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f007 f902 	bl	8007c20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a1c:	4b52      	ldr	r3, [pc, #328]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a1e:	4a53      	ldr	r2, [pc, #332]	@ (8000b6c <MX_TIM1_Init+0x194>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a22:	4b51      	ldr	r3, [pc, #324]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b4f      	ldr	r3, [pc, #316]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a30:	22fa      	movs	r2, #250	@ 0xfa
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b4c      	ldr	r3, [pc, #304]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b49      	ldr	r3, [pc, #292]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a48:	4b47      	ldr	r3, [pc, #284]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f004 f988 	bl	8004d60 <HAL_TIM_Base_Init>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000a54:	f000 fada 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	2160      	movs	r1, #96	@ 0x60
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	0152      	lsls	r2, r2, #5
 8000a60:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a62:	187a      	adds	r2, r7, r1
 8000a64:	4b40      	ldr	r3, [pc, #256]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f004 fd5f 	bl	800552c <HAL_TIM_ConfigClockSource>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a72:	f000 facb 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a76:	4b3c      	ldr	r3, [pc, #240]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f004 fa17 	bl	8004eac <HAL_TIM_PWM_Init>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000a82:	f000 fac3 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2154      	movs	r1, #84	@ 0x54
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2280      	movs	r2, #128	@ 0x80
 8000a98:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f005 faeb 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000aaa:	f000 faaf 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	2138      	movs	r1, #56	@ 0x38
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2260      	movs	r2, #96	@ 0x60
 8000ab4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	22fa      	movs	r2, #250	@ 0xfa
 8000aba:	0052      	lsls	r2, r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2204      	movs	r2, #4
 8000ace:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000adc:	1879      	adds	r1, r7, r1
 8000ade:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f004 fc22 	bl	800532c <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000aec:	f000 fa8e 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	0192      	lsls	r2, r2, #6
 8000b14:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	0492      	lsls	r2, r2, #18
 8000b2e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b42:	1d3a      	adds	r2, r7, #4
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f005 faf9 	bl	8006140 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000b52:	f000 fa5b 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <MX_TIM1_Init+0x190>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 ff29 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b01c      	add	sp, #112	@ 0x70
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	200000e4 	.word	0x200000e4
 8000b6c:	40012c00 	.word	0x40012c00

08000b70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	@ 0x40
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b76:	232c      	movs	r3, #44	@ 0x2c
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2314      	movs	r3, #20
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	f007 f84d 	bl	8007c20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	2320      	movs	r3, #32
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	001a      	movs	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	f007 f845 	bl	8007c20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	231c      	movs	r3, #28
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f007 f83e 	bl	8007c20 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba4:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000ba6:	4a32      	ldr	r2, [pc, #200]	@ (8000c70 <MX_TIM3_Init+0x100>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000baa:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bb8:	22fa      	movs	r2, #250	@ 0xfa
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bca:	4b28      	ldr	r3, [pc, #160]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f004 f8c7 	bl	8004d60 <HAL_TIM_Base_Init>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 fa19 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bda:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f004 f965 	bl	8004eac <HAL_TIM_PWM_Init>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000be6:	f000 fa11 	bl	800100c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000bea:	212c      	movs	r1, #44	@ 0x2c
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000bf8:	187a      	adds	r2, r7, r1
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f004 fd6a 	bl	80056d8 <HAL_TIM_SlaveConfigSynchro>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c08:	f000 fa00 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1a:	187a      	adds	r2, r7, r1
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f005 fa2b 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000c2a:	f000 f9ef 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2260      	movs	r2, #96	@ 0x60
 8000c32:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	22fa      	movs	r2, #250	@ 0xfa
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2204      	movs	r2, #4
 8000c46:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c48:	1d39      	adds	r1, r7, #4
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f004 fb6c 	bl	800532c <HAL_TIM_PWM_ConfigChannel>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c58:	f000 f9d8 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <MX_TIM3_Init+0xfc>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fea6 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b010      	add	sp, #64	@ 0x40
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000130 	.word	0x20000130
 8000c70:	40000400 	.word	0x40000400

08000c74 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_TIM14_Init+0x40>)
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <MX_TIM14_Init+0x44>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <MX_TIM14_Init+0x40>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_TIM14_Init+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <MX_TIM14_Init+0x40>)
 8000c8c:	22fa      	movs	r2, #250	@ 0xfa
 8000c8e:	00d2      	lsls	r2, r2, #3
 8000c90:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_TIM14_Init+0x40>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_TIM14_Init+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c9e:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <MX_TIM14_Init+0x40>)
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f004 f85d 	bl	8004d60 <HAL_TIM_Base_Init>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000caa:	f000 f9af 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000017c 	.word	0x2000017c
 8000cb8:	40002000 	.word	0x40002000

08000cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cc2:	4a24      	ldr	r2, [pc, #144]	@ (8000d54 <MX_USART1_UART_Init+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cc8:	22e1      	movs	r2, #225	@ 0xe1
 8000cca:	0212      	lsls	r2, r2, #8
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f005 face 	bl	80062a8 <HAL_UART_Init>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 f97c 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f006 fe39 	bl	8007990 <HAL_UARTEx_SetTxFifoThreshold>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f973 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f006 fe70 	bl	8007a10 <HAL_UARTEx_SetRxFifoThreshold>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 f96a 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f006 fdee 	bl	800791c <HAL_UARTEx_DisableFifoMode>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f962 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	200001c8 	.word	0x200001c8
 8000d54:	40013800 	.word	0x40013800

08000d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_DMA_Init+0x48>)
 8000d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_DMA_Init+0x48>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <MX_DMA_Init+0x48>)
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2009      	movs	r0, #9
 8000d7c:	f002 fa38 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d80:	2009      	movs	r0, #9
 8000d82:	f002 fa4a 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200a      	movs	r0, #10
 8000d8c:	f002 fa30 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f002 fa42 	bl	800321a <HAL_NVIC_EnableIRQ>

}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b089      	sub	sp, #36	@ 0x24
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	240c      	movs	r4, #12
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	0018      	movs	r0, r3
 8000db0:	2314      	movs	r3, #20
 8000db2:	001a      	movs	r2, r3
 8000db4:	2100      	movs	r1, #0
 8000db6:	f006 ff33 	bl	8007c20 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b37      	ldr	r3, [pc, #220]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dbe:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dc6:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dd6:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000dd8:	2104      	movs	r1, #4
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dde:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de2:	2204      	movs	r2, #4
 8000de4:	4013      	ands	r3, r2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b2b      	ldr	r3, [pc, #172]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	430a      	orrs	r2, r1
 8000df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df6:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <MX_GPIO_Init+0xf4>)
 8000df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000e02:	23c0      	movs	r3, #192	@ 0xc0
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	4825      	ldr	r0, [pc, #148]	@ (8000e9c <MX_GPIO_Init+0xf8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	f003 f806 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin, GPIO_PIN_RESET);
 8000e10:	23a0      	movs	r3, #160	@ 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	2200      	movs	r2, #0
 8000e16:	211c      	movs	r1, #28
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f002 ffff 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECT_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin|LED_1_Pin;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	22c0      	movs	r2, #192	@ 0xc0
 8000e22:	0212      	lsls	r2, r2, #8
 8000e24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	2201      	movs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <MX_GPIO_Init+0xf8>)
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0010      	movs	r0, r2
 8000e40:	f002 fdb8 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_UI_Pin INT_EXT_Pin */
  GPIO_InitStruct.Pin = INT_UI_Pin|INT_EXT_Pin;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2203      	movs	r2, #3
 8000e48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2288      	movs	r2, #136	@ 0x88
 8000e4e:	0352      	lsls	r2, r2, #13
 8000e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	193a      	adds	r2, r7, r4
 8000e5a:	23a0      	movs	r3, #160	@ 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 fda7 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_Pin OUT_2_Pin OUT_3_Pin */
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin;
 8000e66:	0021      	movs	r1, r4
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	221c      	movs	r2, #28
 8000e6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2201      	movs	r2, #1
 8000e72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	187a      	adds	r2, r7, r1
 8000e82:	23a0      	movs	r3, #160	@ 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f002 fd93 	bl	80039b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b009      	add	sp, #36	@ 0x24
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	50000800 	.word	0x50000800

08000ea0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]


	    RX_2;
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	01db      	lsls	r3, r3, #7
 8000eac:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <HAL_UART_TxCpltCallback+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	f002 ffb3 	bl	8003e1c <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8000eb6:	f000 ffd1 	bl	8001e5c <HAL_GetTick>
 8000eba:	0002      	movs	r2, r0
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_UART_TxCpltCallback+0x68>)
 8000ebe:	601a      	str	r2, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 8000ec0:	4912      	ldr	r1, [pc, #72]	@ (8000f0c <HAL_UART_TxCpltCallback+0x6c>)
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_UART_TxCpltCallback+0x70>)
 8000ec4:	2240      	movs	r2, #64	@ 0x40
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f006 fde4 	bl	8007a94 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000ecc:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_UART_TxCpltCallback+0x70>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_UART_TxCpltCallback+0x70>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <HAL_UART_TxCpltCallback+0x74>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <HAL_UART_TxCpltCallback+0x74>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	438a      	bics	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
	    LED_1_OFF;
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <HAL_UART_TxCpltCallback+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	f002 ff91 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	50000800 	.word	0x50000800
 8000f08:	20000314 	.word	0x20000314
 8000f0c:	20000318 	.word	0x20000318
 8000f10:	200001c8 	.word	0x200001c8
 8000f14:	2000025c 	.word	0x2000025c

08000f18 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	000a      	movs	r2, r1
 8000f22:	1cbb      	adds	r3, r7, #2
 8000f24:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d125      	bne.n	8000f7c <HAL_UARTEx_RxEventCallback+0x64>
	{
        LED_1_ON;
 8000f30:	2380      	movs	r3, #128	@ 0x80
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <HAL_UARTEx_RxEventCallback+0x70>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	0019      	movs	r1, r3
 8000f3a:	f002 ff6f 	bl	8003e1c <HAL_GPIO_WritePin>
		lastActivityTime = HAL_GetTick();
 8000f3e:	f000 ff8d 	bl	8001e5c <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_UARTEx_RxEventCallback+0x74>)
 8000f46:	601a      	str	r2, [r3, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_UARTEx_RxEventCallback+0x78>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_UARTEx_RxEventCallback+0x78>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2110      	movs	r1, #16
 8000f54:	438a      	bics	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 fb12 	bl	8003584 <HAL_DMA_Abort>
	   Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	4a0c      	ldr	r2, [pc, #48]	@ (8000f98 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <HAL_UARTEx_RxEventCallback+0x84>)
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <HAL_UARTEx_RxEventCallback+0x88>)
 8000f6a:	f7ff fa3f 	bl	80003ec <Registers_handler>
        TX_2;
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	01db      	lsls	r3, r3, #7
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <HAL_UARTEx_RxEventCallback+0x70>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	0019      	movs	r1, r3
 8000f78:	f002 ff50 	bl	8003e1c <HAL_GPIO_WritePin>
	}
}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40013800 	.word	0x40013800
 8000f88:	50000800 	.word	0x50000800
 8000f8c:	20000314 	.word	0x20000314
 8000f90:	200001c8 	.word	0x200001c8
 8000f94:	2000025c 	.word	0x2000025c
 8000f98:	200004d8 	.word	0x200004d8
 8000f9c:	20000458 	.word	0x20000458
 8000fa0:	20000318 	.word	0x20000318

08000fa4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM14)  // Проверяем, от какого таймера пришло прерывание
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a11      	ldr	r2, [pc, #68]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d11c      	bne.n	8000ff0 <HAL_TIM_PeriodElapsedCallback+0x4c>
    {

    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f002 ff49 	bl	8003e56 <HAL_GPIO_TogglePin>

    	data_reg[0]=0xFF;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fc6:	22ff      	movs	r2, #255	@ 0xff
 8000fc8:	801a      	strh	r2, [r3, #0]
    	data_reg[1]=0xAA;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fcc:	22aa      	movs	r2, #170	@ 0xaa
 8000fce:	805a      	strh	r2, [r3, #2]
    	data_reg[2] = ADC_Read(ADC_CHANNEL_5); // Преобразование для канала 5
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff fb6c 	bl	80006b0 <ADC_Read>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	001a      	movs	r2, r3
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fde:	809a      	strh	r2, [r3, #4]
    	data_reg[3] = ADC_Read(ADC_CHANNEL_7); // Преобразование для канала 7
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fb64 	bl	80006b0 <ADC_Read>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	001a      	movs	r2, r3
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fee:	80da      	strh	r2, [r3, #6]


    }
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40002000 	.word	0x40002000
 8000ffc:	50000800 	.word	0x50000800
 8001000:	20000458 	.word	0x20000458
 8001004:	14000020 	.word	0x14000020
 8001008:	1c000080 	.word	0x1c000080

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	000a      	movs	r2, r1
 8001022:	1cfb      	adds	r3, r7, #3
 8001024:	701a      	strb	r2, [r3, #0]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8001026:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <calcCRC16ModBus+0xac>)
 8001028:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 800102a:	2313      	movs	r3, #19
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e02d      	b.n	8001090 <calcCRC16ModBus+0x78>
		temp = temp ^ buffer[i];
 8001034:	2313      	movs	r3, #19
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	18d3      	adds	r3, r2, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	001a      	movs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	4053      	eors	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001048:	2312      	movs	r3, #18
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e013      	b.n	800107a <calcCRC16ModBus+0x62>
			flag = temp & 0x0001;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2201      	movs	r2, #1
 8001056:	4013      	ands	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	617b      	str	r3, [r7, #20]
			if (flag)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <calcCRC16ModBus+0x56>
				temp ^= 0xA001;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <calcCRC16ModBus+0xb0>)
 800106a:	4053      	eors	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 800106e:	2112      	movs	r1, #18
 8001070:	187b      	adds	r3, r7, r1
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	187b      	adds	r3, r7, r1
 8001076:	3201      	adds	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	2312      	movs	r3, #18
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b08      	cmp	r3, #8
 8001082:	d9e6      	bls.n	8001052 <calcCRC16ModBus+0x3a>
	for (unsigned char i = 0; i < u8length; i++) {
 8001084:	2113      	movs	r1, #19
 8001086:	187b      	adds	r3, r7, r1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	187b      	adds	r3, r7, r1
 800108c:	3201      	adds	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	2313      	movs	r3, #19
 8001092:	18fa      	adds	r2, r7, r3
 8001094:	1cfb      	adds	r3, r7, #3
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d3ca      	bcc.n	8001034 <calcCRC16ModBus+0x1c>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	b29b      	uxth	r3, r3

}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b006      	add	sp, #24
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	0000ffff 	.word	0x0000ffff
 80010c8:	0000a001 	.word	0x0000a001

080010cc <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calcCRC16ModBus(frame, len);
 80010da:	2516      	movs	r5, #22
 80010dc:	197c      	adds	r4, r7, r5
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff ff96 	bl	8001018 <calcCRC16ModBus>
 80010ec:	0003      	movs	r3, r0
 80010ee:	8023      	strh	r3, [r4, #0]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	197a      	adds	r2, r7, r5
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 8001102:	197b      	adds	r3, r7, r5
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b299      	uxth	r1, r3
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]

    TX_2;
 8001116:	2380      	movs	r3, #128	@ 0x80
 8001118:	01db      	lsls	r3, r3, #7
 800111a:	480f      	ldr	r0, [pc, #60]	@ (8001158 <sendModBusRequest+0x8c>)
 800111c:	2201      	movs	r2, #1
 800111e:	0019      	movs	r1, r3
 8001120:	f002 fe7c 	bl	8003e1c <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);

    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	3302      	adds	r3, #2
 800112c:	b29a      	uxth	r2, r3
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	0018      	movs	r0, r3
 8001134:	f005 f94e 	bl	80063d4 <HAL_UART_Transmit_DMA>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d008      	beq.n	800114e <sendModBusRequest+0x82>

    	LED_1_OFF;
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <sendModBusRequest+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	0019      	movs	r1, r3
 8001146:	f002 fe69 	bl	8003e1c <HAL_GPIO_WritePin>

	        Error_Handler();
 800114a:	f7ff ff5f 	bl	800100c <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b006      	add	sp, #24
 8001156:	bdb0      	pop	{r4, r5, r7, pc}
 8001158:	50000800 	.word	0x50000800

0800115c <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	0008      	movs	r0, r1
 8001166:	0011      	movs	r1, r2
 8001168:	1cfb      	adds	r3, r7, #3
 800116a:	1c02      	adds	r2, r0, #0
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	1cbb      	adds	r3, r7, #2
 8001170:	1c0a      	adds	r2, r1, #0
 8001172:	701a      	strb	r2, [r3, #0]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <sendError+0x7c>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	2508      	movs	r5, #8
 800117a:	197b      	adds	r3, r7, r5
 800117c:	701a      	strb	r2, [r3, #0]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 800117e:	1cfb      	adds	r3, r7, #3
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2280      	movs	r2, #128	@ 0x80
 8001184:	4252      	negs	r2, r2
 8001186:	4313      	orrs	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	197b      	adds	r3, r7, r5
 800118c:	705a      	strb	r2, [r3, #1]
    errorFrame[2] = errorCode;      // Код ошибки
 800118e:	197b      	adds	r3, r7, r5
 8001190:	1cba      	adds	r2, r7, #2
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	709a      	strb	r2, [r3, #2]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001196:	260e      	movs	r6, #14
 8001198:	19bc      	adds	r4, r7, r6
 800119a:	197b      	adds	r3, r7, r5
 800119c:	2103      	movs	r1, #3
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff ff3a 	bl	8001018 <calcCRC16ModBus>
 80011a4:	0003      	movs	r3, r0
 80011a6:	8023      	strh	r3, [r4, #0]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 80011a8:	0031      	movs	r1, r6
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	197b      	adds	r3, r7, r5
 80011b2:	70da      	strb	r2, [r3, #3]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	197b      	adds	r3, r7, r5
 80011c0:	711a      	strb	r2, [r3, #4]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 80011c2:	1979      	adds	r1, r7, r5
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2205      	movs	r2, #5
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff7f 	bl	80010cc <sendModBusRequest>

}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b005      	add	sp, #20
 80011d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	20000000 	.word	0x20000000

080011dc <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80011e6:	4b45      	ldr	r3, [pc, #276]	@ (80012fc <handleReadHoldingRegs+0x120>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b43      	ldr	r3, [pc, #268]	@ (80012fc <handleReadHoldingRegs+0x120>)
 80011f0:	78db      	ldrb	r3, [r3, #3]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	2116      	movs	r1, #22
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80011fe:	4b3f      	ldr	r3, [pc, #252]	@ (80012fc <handleReadHoldingRegs+0x120>)
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <handleReadHoldingRegs+0x120>)
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21a      	sxth	r2, r3
 8001210:	200a      	movs	r0, #10
 8001212:	183b      	adds	r3, r7, r0
 8001214:	801a      	strh	r2, [r3, #0]

	startingReg=startingReg-30001;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	187a      	adds	r2, r7, r1
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	4c38      	ldr	r4, [pc, #224]	@ (8001300 <handleReadHoldingRegs+0x124>)
 800121e:	46a4      	mov	ip, r4
 8001220:	4462      	add	r2, ip
 8001222:	801a      	strh	r2, [r3, #0]

	uint16_t endAddr = startingReg+numOfregs-1;
 8001224:	187a      	adds	r2, r7, r1
 8001226:	183b      	adds	r3, r7, r0
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	b29a      	uxth	r2, r3
 8001230:	2308      	movs	r3, #8
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	3a01      	subs	r2, #1
 8001236:	801a      	strh	r2, [r3, #0]



	if((numOfregs<0)|(numOfregs >125)){
 8001238:	183b      	adds	r3, r7, r0
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	2b7d      	cmp	r3, #125	@ 0x7d
 800123e:	d906      	bls.n	800124e <handleReadHoldingRegs+0x72>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2103      	movs	r1, #3
 8001244:	0018      	movs	r0, r3
 8001246:	f000 fa7f 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 800124a:	2300      	movs	r3, #0
 800124c:	e051      	b.n	80012f2 <handleReadHoldingRegs+0x116>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 800124e:	2308      	movs	r3, #8
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	2b3c      	cmp	r3, #60	@ 0x3c
 8001256:	d906      	bls.n	8001266 <handleReadHoldingRegs+0x8a>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2102      	movs	r1, #2
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fa73 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 8001262:	2300      	movs	r3, #0
 8001264:	e045      	b.n	80012f2 <handleReadHoldingRegs+0x116>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <handleReadHoldingRegs+0x128>)
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <handleReadHoldingRegs+0x12c>)
 800126c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <handleReadHoldingRegs+0x120>)
 8001270:	785a      	ldrb	r2, [r3, #1]
 8001272:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <handleReadHoldingRegs+0x12c>)
 8001274:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001276:	230a      	movs	r3, #10
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	18db      	adds	r3, r3, r3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <handleReadHoldingRegs+0x12c>)
 8001284:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001286:	2303      	movs	r3, #3
 8001288:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e022      	b.n	80012d6 <handleReadHoldingRegs+0xfa>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001290:	2016      	movs	r0, #22
 8001292:	183b      	adds	r3, r7, r0
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	18d3      	adds	r3, r2, r3
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	b299      	uxth	r1, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	613a      	str	r2, [r7, #16]
 80012a8:	b2c9      	uxtb	r1, r1
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <handleReadHoldingRegs+0x12c>)
 80012ac:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80012ae:	183b      	adds	r3, r7, r0
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	18d3      	adds	r3, r2, r3
 80012b8:	8819      	ldrh	r1, [r3, #0]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	613a      	str	r2, [r7, #16]
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	4a11      	ldr	r2, [pc, #68]	@ (8001308 <handleReadHoldingRegs+0x12c>)
 80012c4:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80012c6:	183b      	adds	r3, r7, r0
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	183b      	adds	r3, r7, r0
 80012cc:	3201      	adds	r2, #1
 80012ce:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	230a      	movs	r3, #10
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dbd6      	blt.n	8001290 <handleReadHoldingRegs+0xb4>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	@ (8001308 <handleReadHoldingRegs+0x12c>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff feee 	bl	80010cc <sendModBusRequest>
	return 1;
 80012f0:	2301      	movs	r3, #1

}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b007      	add	sp, #28
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	20000318 	.word	0x20000318
 8001300:	ffff8acf 	.word	0xffff8acf
 8001304:	20000000 	.word	0x20000000
 8001308:	20000358 	.word	0x20000358

0800130c <handleReadInputRegs>:

modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001316:	4b41      	ldr	r3, [pc, #260]	@ (800141c <handleReadInputRegs+0x110>)
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b3f      	ldr	r3, [pc, #252]	@ (800141c <handleReadInputRegs+0x110>)
 8001320:	78db      	ldrb	r3, [r3, #3]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b21a      	sxth	r2, r3
 8001328:	2016      	movs	r0, #22
 800132a:	183b      	adds	r3, r7, r0
 800132c:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <handleReadInputRegs+0x110>)
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	4b39      	ldr	r3, [pc, #228]	@ (800141c <handleReadInputRegs+0x110>)
 8001338:	795b      	ldrb	r3, [r3, #5]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21a      	sxth	r2, r3
 8001340:	210a      	movs	r1, #10
 8001342:	187b      	adds	r3, r7, r1
 8001344:	801a      	strh	r2, [r3, #0]

	uint16_t endAddr = startingReg+numOfregs-1;
 8001346:	183a      	adds	r2, r7, r0
 8001348:	187b      	adds	r3, r7, r1
 800134a:	8812      	ldrh	r2, [r2, #0]
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	2308      	movs	r3, #8
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	3a01      	subs	r2, #1
 8001358:	801a      	strh	r2, [r3, #0]

	if((numOfregs<0)|(numOfregs >125)){
 800135a:	187b      	adds	r3, r7, r1
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001360:	d906      	bls.n	8001370 <handleReadInputRegs+0x64>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2103      	movs	r1, #3
 8001366:	0018      	movs	r0, r3
 8001368:	f000 f9ee 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 800136c:	2300      	movs	r3, #0
 800136e:	e051      	b.n	8001414 <handleReadInputRegs+0x108>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001370:	2308      	movs	r3, #8
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b3c      	cmp	r3, #60	@ 0x3c
 8001378:	d906      	bls.n	8001388 <handleReadInputRegs+0x7c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2102      	movs	r1, #2
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f9e2 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 8001384:	2300      	movs	r3, #0
 8001386:	e045      	b.n	8001414 <handleReadInputRegs+0x108>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <handleReadInputRegs+0x114>)
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <handleReadInputRegs+0x118>)
 800138e:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <handleReadInputRegs+0x110>)
 8001392:	785a      	ldrb	r2, [r3, #1]
 8001394:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <handleReadInputRegs+0x118>)
 8001396:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001398:	230a      	movs	r3, #10
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	18db      	adds	r3, r3, r3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <handleReadInputRegs+0x118>)
 80013a6:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80013a8:	2303      	movs	r3, #3
 80013aa:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e022      	b.n	80013f8 <handleReadInputRegs+0xec>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80013b2:	2016      	movs	r0, #22
 80013b4:	183b      	adds	r3, r7, r0
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	b299      	uxth	r1, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	613a      	str	r2, [r7, #16]
 80013ca:	b2c9      	uxtb	r1, r1
 80013cc:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <handleReadInputRegs+0x118>)
 80013ce:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	8819      	ldrh	r1, [r3, #0]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	613a      	str	r2, [r7, #16]
 80013e2:	b2c9      	uxtb	r1, r1
 80013e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <handleReadInputRegs+0x118>)
 80013e6:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 80013e8:	183b      	adds	r3, r7, r0
 80013ea:	881a      	ldrh	r2, [r3, #0]
 80013ec:	183b      	adds	r3, r7, r0
 80013ee:	3201      	adds	r2, #1
 80013f0:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	230a      	movs	r3, #10
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbd6      	blt.n	80013b2 <handleReadInputRegs+0xa6>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4906      	ldr	r1, [pc, #24]	@ (8001424 <handleReadInputRegs+0x118>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff fe5d 	bl	80010cc <sendModBusRequest>
	return 1;
 8001412:	2301      	movs	r3, #1
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b006      	add	sp, #24
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000318 	.word	0x20000318
 8001420:	20000000 	.word	0x20000000
 8001424:	20000358 	.word	0x20000358

08001428 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001432:	4b38      	ldr	r3, [pc, #224]	@ (8001514 <handleReadCoils+0xec>)
 8001434:	789b      	ldrb	r3, [r3, #2]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <handleReadCoils+0xec>)
 800143c:	78db      	ldrb	r3, [r3, #3]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21a      	sxth	r2, r3
 8001444:	230e      	movs	r3, #14
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	801a      	strh	r2, [r3, #0]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 800144a:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <handleReadCoils+0xec>)
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <handleReadCoils+0xec>)
 8001454:	795b      	ldrb	r3, [r3, #5]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	210c      	movs	r1, #12
 800145e:	187b      	adds	r3, r7, r1
 8001460:	801a      	strh	r2, [r3, #0]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001462:	000a      	movs	r2, r1
 8001464:	18bb      	adds	r3, r7, r2
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <handleReadCoils+0x50>
 800146c:	18bb      	adds	r3, r7, r2
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	23fa      	movs	r3, #250	@ 0xfa
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	429a      	cmp	r2, r3
 8001476:	d906      	bls.n	8001486 <handleReadCoils+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2103      	movs	r1, #3
 800147c:	0018      	movs	r0, r3
 800147e:	f000 f963 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 8001482:	2300      	movs	r3, #0
 8001484:	e041      	b.n	800150a <handleReadCoils+0xe2>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001486:	230e      	movs	r3, #14
 8001488:	18fa      	adds	r2, r7, r3
 800148a:	230c      	movs	r3, #12
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	8812      	ldrh	r2, [r2, #0]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	b29a      	uxth	r2, r3
 8001496:	210a      	movs	r1, #10
 8001498:	187b      	adds	r3, r7, r1
 800149a:	3a01      	subs	r2, #1
 800149c:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80014a4:	d906      	bls.n	80014b4 <handleReadCoils+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2102      	movs	r1, #2
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 f94c 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e02a      	b.n	800150a <handleReadCoils+0xe2>
	}
	memset (txFrame, '\0', 256);
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	005a      	lsls	r2, r3, #1
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <handleReadCoils+0xf0>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	0018      	movs	r0, r3
 80014be:	f006 fbaf 	bl	8007c20 <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <handleReadCoils+0xf4>)
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <handleReadCoils+0xf0>)
 80014c8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <handleReadCoils+0xec>)
 80014cc:	785a      	ldrb	r2, [r3, #1]
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <handleReadCoils+0xf0>)
 80014d0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 80014d2:	220c      	movs	r2, #12
 80014d4:	18bb      	adds	r3, r7, r2
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	18ba      	adds	r2, r7, r2
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	2107      	movs	r1, #7
 80014e4:	400a      	ands	r2, r1
 80014e6:	b292      	uxth	r2, r2
 80014e8:	1e51      	subs	r1, r2, #1
 80014ea:	418a      	sbcs	r2, r1
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	189b      	adds	r3, r3, r2
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <handleReadCoils+0xf0>)
 80014f4:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <handleReadCoils+0xf0>)
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	3303      	adds	r3, #3
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4906      	ldr	r1, [pc, #24]	@ (8001518 <handleReadCoils+0xf0>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fde2 	bl	80010cc <sendModBusRequest>
	return 1;
 8001508:	2301      	movs	r3, #1

}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b004      	add	sp, #16
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	20000318 	.word	0x20000318
 8001518:	20000358 	.word	0x20000358
 800151c:	20000000 	.word	0x20000000

08001520 <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 800152a:	4b39      	ldr	r3, [pc, #228]	@ (8001610 <handleReadDiscreteInputs+0xf0>)
 800152c:	789b      	ldrb	r3, [r3, #2]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	4b37      	ldr	r3, [pc, #220]	@ (8001610 <handleReadDiscreteInputs+0xf0>)
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21a      	sxth	r2, r3
 800153c:	230e      	movs	r3, #14
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	801a      	strh	r2, [r3, #0]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001542:	4b33      	ldr	r3, [pc, #204]	@ (8001610 <handleReadDiscreteInputs+0xf0>)
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <handleReadDiscreteInputs+0xf0>)
 800154c:	795b      	ldrb	r3, [r3, #5]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21a      	sxth	r2, r3
 8001554:	210c      	movs	r1, #12
 8001556:	187b      	adds	r3, r7, r1
 8001558:	801a      	strh	r2, [r3, #0]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 800155a:	000a      	movs	r2, r1
 800155c:	18bb      	adds	r3, r7, r2
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <handleReadDiscreteInputs+0x50>
 8001564:	18bb      	adds	r3, r7, r2
 8001566:	881a      	ldrh	r2, [r3, #0]
 8001568:	23fa      	movs	r3, #250	@ 0xfa
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	429a      	cmp	r2, r3
 800156e:	d906      	bls.n	800157e <handleReadDiscreteInputs+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2103      	movs	r1, #3
 8001574:	0018      	movs	r0, r3
 8001576:	f000 f8e7 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 800157a:	2300      	movs	r3, #0
 800157c:	e044      	b.n	8001608 <handleReadDiscreteInputs+0xe8>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 800157e:	230e      	movs	r3, #14
 8001580:	18fa      	adds	r2, r7, r3
 8001582:	230c      	movs	r3, #12
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	8812      	ldrh	r2, [r2, #0]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	18d3      	adds	r3, r2, r3
 800158c:	b29a      	uxth	r2, r3
 800158e:	210a      	movs	r1, #10
 8001590:	187b      	adds	r3, r7, r1
 8001592:	3a01      	subs	r2, #1
 8001594:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001596:	187b      	adds	r3, r7, r1
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	2bc7      	cmp	r3, #199	@ 0xc7
 800159c:	d906      	bls.n	80015ac <handleReadDiscreteInputs+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2102      	movs	r1, #2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f000 f8d0 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e02d      	b.n	8001608 <handleReadDiscreteInputs+0xe8>
	}
	memset (txFrame, '\0', 256);
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	005a      	lsls	r2, r3, #1
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <handleReadDiscreteInputs+0xf4>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	0018      	movs	r0, r3
 80015b6:	f006 fb33 	bl	8007c20 <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <handleReadDiscreteInputs+0xf8>)
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <handleReadDiscreteInputs+0xf4>)
 80015c0:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <handleReadDiscreteInputs+0xf0>)
 80015c4:	785a      	ldrb	r2, [r3, #1]
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <handleReadDiscreteInputs+0xf4>)
 80015c8:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 80015ca:	220c      	movs	r2, #12
 80015cc:	18bb      	adds	r3, r7, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	18ba      	adds	r2, r7, r2
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	2107      	movs	r1, #7
 80015dc:	400a      	ands	r2, r1
 80015de:	b292      	uxth	r2, r2
 80015e0:	1e51      	subs	r1, r2, #1
 80015e2:	418a      	sbcs	r2, r1
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	189b      	adds	r3, r3, r2
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <handleReadDiscreteInputs+0xf4>)
 80015ec:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <handleReadDiscreteInputs+0xf4>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <handleReadDiscreteInputs+0xf4>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	3303      	adds	r3, #3
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4905      	ldr	r1, [pc, #20]	@ (8001614 <handleReadDiscreteInputs+0xf4>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fd63 	bl	80010cc <sendModBusRequest>
	return 1;
 8001606:	2301      	movs	r3, #1

}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000318 	.word	0x20000318
 8001614:	20000358 	.word	0x20000358
 8001618:	20000000 	.word	0x20000000

0800161c <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001626:	4b45      	ldr	r3, [pc, #276]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 8001628:	789b      	ldrb	r3, [r3, #2]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	4b43      	ldr	r3, [pc, #268]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 8001630:	78db      	ldrb	r3, [r3, #3]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21a      	sxth	r2, r3
 8001638:	2316      	movs	r3, #22
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	801a      	strh	r2, [r3, #0]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 800163e:	4b3f      	ldr	r3, [pc, #252]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 8001640:	791b      	ldrb	r3, [r3, #4]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 8001648:	795b      	ldrb	r3, [r3, #5]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21a      	sxth	r2, r3
 8001650:	210a      	movs	r1, #10
 8001652:	187b      	adds	r3, r7, r1
 8001654:	801a      	strh	r2, [r3, #0]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001656:	000a      	movs	r2, r1
 8001658:	18bb      	adds	r3, r7, r2
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <handleWriteMulyipleHandlingRegister+0x4c>
 8001660:	18bb      	adds	r3, r7, r2
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	2b7b      	cmp	r3, #123	@ 0x7b
 8001666:	d906      	bls.n	8001676 <handleWriteMulyipleHandlingRegister+0x5a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2103      	movs	r1, #3
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f86b 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 8001672:	2300      	movs	r3, #0
 8001674:	e05d      	b.n	8001732 <handleWriteMulyipleHandlingRegister+0x116>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001676:	2316      	movs	r3, #22
 8001678:	18fa      	adds	r2, r7, r3
 800167a:	230a      	movs	r3, #10
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	8812      	ldrh	r2, [r2, #0]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	18d3      	adds	r3, r2, r3
 8001684:	b29a      	uxth	r2, r3
 8001686:	2108      	movs	r1, #8
 8001688:	187b      	adds	r3, r7, r1
 800168a:	3a01      	subs	r2, #1
 800168c:	801a      	strh	r2, [r3, #0]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 800168e:	187b      	adds	r3, r7, r1
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	2b3c      	cmp	r3, #60	@ 0x3c
 8001694:	d906      	bls.n	80016a4 <handleWriteMulyipleHandlingRegister+0x88>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2102      	movs	r1, #2
 800169a:	0018      	movs	r0, r3
 800169c:	f000 f854 	bl	8001748 <sendModbusException>
		return MODBUS_ERROR;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e046      	b.n	8001732 <handleWriteMulyipleHandlingRegister+0x116>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 80016a4:	2307      	movs	r3, #7
 80016a6:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e01c      	b.n	80016e8 <handleWriteMulyipleHandlingRegister+0xcc>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	613a      	str	r2, [r7, #16]
 80016b4:	4a21      	ldr	r2, [pc, #132]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	6139      	str	r1, [r7, #16]
 80016c2:	491e      	ldr	r1, [pc, #120]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b219      	sxth	r1, r3
 80016cc:	2216      	movs	r2, #22
 80016ce:	18bb      	adds	r3, r7, r2
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	18ba      	adds	r2, r7, r2
 80016d4:	1c58      	adds	r0, r3, #1
 80016d6:	8010      	strh	r0, [r2, #0]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	b28a      	uxth	r2, r1
 80016e0:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	230a      	movs	r3, #10
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbdc      	blt.n	80016ae <handleWriteMulyipleHandlingRegister+0x92>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <handleWriteMulyipleHandlingRegister+0x124>)
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <handleWriteMulyipleHandlingRegister+0x128>)
 80016fa:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 80016fe:	785a      	ldrb	r2, [r3, #1]
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <handleWriteMulyipleHandlingRegister+0x128>)
 8001702:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 8001706:	789a      	ldrb	r2, [r3, #2]
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <handleWriteMulyipleHandlingRegister+0x128>)
 800170a:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 800170e:	78da      	ldrb	r2, [r3, #3]
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <handleWriteMulyipleHandlingRegister+0x128>)
 8001712:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001714:	4b09      	ldr	r3, [pc, #36]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 8001716:	791a      	ldrb	r2, [r3, #4]
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <handleWriteMulyipleHandlingRegister+0x128>)
 800171a:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <handleWriteMulyipleHandlingRegister+0x120>)
 800171e:	795a      	ldrb	r2, [r3, #5]
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <handleWriteMulyipleHandlingRegister+0x128>)
 8001722:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <handleWriteMulyipleHandlingRegister+0x128>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2206      	movs	r2, #6
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fcce 	bl	80010cc <sendModBusRequest>
	return 1;   // success
 8001730:	2301      	movs	r3, #1

}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b006      	add	sp, #24
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	20000318 	.word	0x20000318
 8001740:	20000000 	.word	0x20000000
 8001744:	20000358 	.word	0x20000358

08001748 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	000a      	movs	r2, r1
 8001752:	1cfb      	adds	r3, r7, #3
 8001754:	701a      	strb	r2, [r3, #0]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <sendModbusException+0x44>)
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <sendModbusException+0x48>)
 800175c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <sendModbusException+0x44>)
 8001760:	785b      	ldrb	r3, [r3, #1]
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	4252      	negs	r2, r2
 8001766:	4313      	orrs	r3, r2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <sendModbusException+0x48>)
 800176c:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <sendModbusException+0x48>)
 8001770:	1cfa      	adds	r2, r7, #3
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	709a      	strb	r2, [r3, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001776:	4906      	ldr	r1, [pc, #24]	@ (8001790 <sendModbusException+0x48>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2203      	movs	r2, #3
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fca5 	bl	80010cc <sendModBusRequest>
 8001782:	0003      	movs	r3, r0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000318 	.word	0x20000318
 8001790:	20000358 	.word	0x20000358

08001794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <HAL_MspInit+0x54>)
 800179c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_MspInit+0x54>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <HAL_MspInit+0x54>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <HAL_MspInit+0x54>)
 80017b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <HAL_MspInit+0x54>)
 80017b8:	2180      	movs	r1, #128	@ 0x80
 80017ba:	0549      	lsls	r1, r1, #21
 80017bc:	430a      	orrs	r2, r1
 80017be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_MspInit+0x54>)
 80017c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	055b      	lsls	r3, r3, #21
 80017c8:	4013      	ands	r3, r2
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2004      	movs	r0, #4
 80017d4:	f001 fd0c 	bl	80031f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017d8:	2004      	movs	r0, #4
 80017da:	f001 fd1e 	bl	800321a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08b      	sub	sp, #44	@ 0x2c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	2414      	movs	r4, #20
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0018      	movs	r0, r3
 80017fa:	2314      	movs	r3, #20
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f006 fa0e 	bl	8007c20 <memset>
  if(hadc->Instance==ADC1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a18      	ldr	r2, [pc, #96]	@ (800186c <HAL_ADC_MspInit+0x80>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d129      	bne.n	8001862 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <HAL_ADC_MspInit+0x84>)
 8001810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <HAL_ADC_MspInit+0x84>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0349      	lsls	r1, r1, #13
 8001818:	430a      	orrs	r2, r1
 800181a:	641a      	str	r2, [r3, #64]	@ 0x40
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <HAL_ADC_MspInit+0x84>)
 800181e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	035b      	lsls	r3, r3, #13
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_ADC_MspInit+0x84>)
 800182c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_ADC_MspInit+0x84>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_ADC_MspInit+0x84>)
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001842:	193b      	adds	r3, r7, r4
 8001844:	22a0      	movs	r2, #160	@ 0xa0
 8001846:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001848:	193b      	adds	r3, r7, r4
 800184a:	2203      	movs	r2, #3
 800184c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	193a      	adds	r2, r7, r4
 8001856:	23a0      	movs	r3, #160	@ 0xa0
 8001858:	05db      	lsls	r3, r3, #23
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f002 f8a9 	bl	80039b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b00b      	add	sp, #44	@ 0x2c
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	40012400 	.word	0x40012400
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b08b      	sub	sp, #44	@ 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	2414      	movs	r4, #20
 800187e:	193b      	adds	r3, r7, r4
 8001880:	0018      	movs	r0, r3
 8001882:	2314      	movs	r3, #20
 8001884:	001a      	movs	r2, r3
 8001886:	2100      	movs	r1, #0
 8001888:	f006 f9ca 	bl	8007c20 <memset>
  if(hi2c->Instance==I2C2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <HAL_I2C_MspInit+0x90>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d131      	bne.n	80018fa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <HAL_I2C_MspInit+0x94>)
 8001898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_I2C_MspInit+0x94>)
 800189c:	2101      	movs	r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80018a2:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_I2C_MspInit+0x94>)
 80018a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	22c0      	movs	r2, #192	@ 0xc0
 80018b2:	0152      	lsls	r2, r2, #5
 80018b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b6:	0021      	movs	r1, r4
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2212      	movs	r2, #18
 80018bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2206      	movs	r2, #6
 80018ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	187a      	adds	r2, r7, r1
 80018d2:	23a0      	movs	r3, #160	@ 0xa0
 80018d4:	05db      	lsls	r3, r3, #23
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f002 f86b 	bl	80039b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HAL_I2C_MspInit+0x94>)
 80018e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_I2C_MspInit+0x94>)
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	03c9      	lsls	r1, r1, #15
 80018e8:	430a      	orrs	r2, r1
 80018ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_I2C_MspInit+0x94>)
 80018ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	03db      	lsls	r3, r3, #15
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b00b      	add	sp, #44	@ 0x2c
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	40005800 	.word	0x40005800
 8001908:	40021000 	.word	0x40021000

0800190c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a21      	ldr	r2, [pc, #132]	@ (80019a0 <HAL_TIM_Base_MspInit+0x94>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10e      	bne.n	800193c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	0109      	lsls	r1, r1, #4
 8001928:	430a      	orrs	r2, r1
 800192a:	641a      	str	r2, [r3, #64]	@ 0x40
 800192c:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 800192e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4013      	ands	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800193a:	e02c      	b.n	8001996 <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10c      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 800194c:	2102      	movs	r1, #2
 800194e:	430a      	orrs	r2, r1
 8001950:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
}
 800195e:	e01a      	b.n	8001996 <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM14)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <HAL_TIM_Base_MspInit+0xa0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d115      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 800196c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	0209      	lsls	r1, r1, #8
 8001974:	430a      	orrs	r2, r1
 8001976:	641a      	str	r2, [r3, #64]	@ 0x40
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 800197a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2103      	movs	r1, #3
 800198a:	2013      	movs	r0, #19
 800198c:	f001 fc30 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001990:	2013      	movs	r0, #19
 8001992:	f001 fc42 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b006      	add	sp, #24
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40002000 	.word	0x40002000

080019b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08b      	sub	sp, #44	@ 0x2c
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	2414      	movs	r4, #20
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	0018      	movs	r0, r3
 80019be:	2314      	movs	r3, #20
 80019c0:	001a      	movs	r2, r3
 80019c2:	2100      	movs	r1, #0
 80019c4:	f006 f92c 	bl	8007c20 <memset>
  if(htim->Instance==TIM1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a29      	ldr	r2, [pc, #164]	@ (8001a74 <HAL_TIM_MspPostInit+0xc4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d124      	bne.n	8001a1c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <HAL_TIM_MspPostInit+0xc8>)
 80019d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <HAL_TIM_MspPostInit+0xc8>)
 80019d8:	2101      	movs	r1, #1
 80019da:	430a      	orrs	r2, r1
 80019dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80019de:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <HAL_TIM_MspPostInit+0xc8>)
 80019e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e2:	2201      	movs	r2, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	0052      	lsls	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	0021      	movs	r1, r4
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2202      	movs	r2, #2
 80019f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2202      	movs	r2, #2
 8001a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2202      	movs	r2, #2
 8001a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	187a      	adds	r2, r7, r1
 8001a0e:	23a0      	movs	r3, #160	@ 0xa0
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 ffcd 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a1a:	e027      	b.n	8001a6c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a16      	ldr	r2, [pc, #88]	@ (8001a7c <HAL_TIM_MspPostInit+0xcc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <HAL_TIM_MspPostInit+0xc8>)
 8001a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_TIM_MspPostInit+0xc8>)
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <HAL_TIM_MspPostInit+0xc8>)
 8001a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a3e:	2114      	movs	r1, #20
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2202      	movs	r2, #2
 8001a4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2202      	movs	r2, #2
 8001a56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	187a      	adds	r2, r7, r1
 8001a60:	23a0      	movs	r3, #160	@ 0xa0
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	0011      	movs	r1, r2
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 ffa4 	bl	80039b4 <HAL_GPIO_Init>
}
 8001a6c:	46c0      	nop			@ (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b00b      	add	sp, #44	@ 0x2c
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40000400 	.word	0x40000400

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b091      	sub	sp, #68	@ 0x44
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	232c      	movs	r3, #44	@ 0x2c
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	2314      	movs	r3, #20
 8001a90:	001a      	movs	r2, r3
 8001a92:	2100      	movs	r1, #0
 8001a94:	f006 f8c4 	bl	8007c20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	2414      	movs	r4, #20
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	2318      	movs	r3, #24
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	f006 f8bc 	bl	8007c20 <memset>
  if(huart->Instance==USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a50      	ldr	r2, [pc, #320]	@ (8001bf0 <HAL_UART_MspInit+0x170>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d000      	beq.n	8001ab4 <HAL_UART_MspInit+0x34>
 8001ab2:	e098      	b.n	8001be6 <HAL_UART_MspInit+0x166>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001aba:	193b      	adds	r3, r7, r4
 8001abc:	2200      	movs	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	193b      	adds	r3, r7, r4
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f003 f826 	bl	8004b14 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001acc:	f7ff fa9e 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad0:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ad4:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001ad6:	2180      	movs	r1, #128	@ 0x80
 8001ad8:	01c9      	lsls	r1, r1, #7
 8001ada:	430a      	orrs	r2, r1
 8001adc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ade:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	01db      	lsls	r3, r3, #7
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af0:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001af2:	2102      	movs	r1, #2
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001b04:	212c      	movs	r1, #44	@ 0x2c
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	22c0      	movs	r2, #192	@ 0xc0
 8001b0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	2202      	movs	r2, #2
 8001b10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	4a34      	ldr	r2, [pc, #208]	@ (8001bf8 <HAL_UART_MspInit+0x178>)
 8001b28:	0019      	movs	r1, r3
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	f001 ff42 	bl	80039b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b32:	4a33      	ldr	r2, [pc, #204]	@ (8001c00 <HAL_UART_MspInit+0x180>)
 8001b34:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b38:	2232      	movs	r2, #50	@ 0x32
 8001b3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b66:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f001 fb83 	bl	8003274 <HAL_DMA_Init>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8001b72:	f7ff fa4b 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2180      	movs	r1, #128	@ 0x80
 8001b7a:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b7c:	505a      	str	r2, [r3, r1]
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <HAL_UART_MspInit+0x17c>)
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001b86:	4a20      	ldr	r2, [pc, #128]	@ (8001c08 <HAL_UART_MspInit+0x188>)
 8001b88:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001b8c:	2233      	movs	r2, #51	@ 0x33
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001b92:	2210      	movs	r2, #16
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f001 fb59 	bl	8003274 <HAL_DMA_Init>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 8001bc6:	f7ff fa21 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001bce:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <HAL_UART_MspInit+0x184>)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	201b      	movs	r0, #27
 8001bdc:	f001 fb08 	bl	80031f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be0:	201b      	movs	r0, #27
 8001be2:	f001 fb1a 	bl	800321a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b011      	add	sp, #68	@ 0x44
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	2000025c 	.word	0x2000025c
 8001c00:	40020008 	.word	0x40020008
 8001c04:	200002b8 	.word	0x200002b8
 8001c08:	4002001c 	.word	0x4002001c

08001c0c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <HAL_UART_MspDeInit+0x4c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d118      	bne.n	8001c50 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_UART_MspDeInit+0x50>)
 8001c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_UART_MspDeInit+0x50>)
 8001c24:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <HAL_UART_MspDeInit+0x54>)
 8001c26:	400a      	ands	r2, r1
 8001c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <HAL_UART_MspDeInit+0x58>)
 8001c2c:	21c0      	movs	r1, #192	@ 0xc0
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f002 f824 	bl	8003c7c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2280      	movs	r2, #128	@ 0x80
 8001c38:	589b      	ldr	r3, [r3, r2]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f001 fba4 	bl	8003388 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c44:	0018      	movs	r0, r3
 8001c46:	f001 fb9f 	bl	8003388 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001c4a:	201b      	movs	r0, #27
 8001c4c:	f001 faf5 	bl	800323a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	ffffbfff 	.word	0xffffbfff
 8001c64:	50000400 	.word	0x50000400

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	e7fd      	b.n	8001c6c <NMI_Handler+0x4>

08001c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	e7fd      	b.n	8001c74 <HardFault_Handler+0x4>

08001c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c7c:	46c0      	nop			@ (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f000 f8d2 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	46c0      	nop			@ (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <DMA1_Channel1_IRQHandler+0x14>)
 8001caa:	0018      	movs	r0, r3
 8001cac:	f001 fd36 	bl	800371c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	2000025c 	.word	0x2000025c

08001cbc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f001 fd2a 	bl	800371c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	200002b8 	.word	0x200002b8

08001cd4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <TIM14_IRQHandler+0x14>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f003 fa1e 	bl	800511c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001ce0:	46c0      	nop			@ (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	2000017c 	.word	0x2000017c

08001cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <USART1_IRQHandler+0x14>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f004 fc94 	bl	8006620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cf8:	46c0      	nop			@ (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	200001c8 	.word	0x200001c8

08001d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d10:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d14:	f7ff fff6 	bl	8001d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d18:	480c      	ldr	r0, [pc, #48]	@ (8001d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1a:	490d      	ldr	r1, [pc, #52]	@ (8001d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d54 <LoopForever+0xe>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d30:	4c0a      	ldr	r4, [pc, #40]	@ (8001d5c <LoopForever+0x16>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d3e:	f005 ff77 	bl	8007c30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d42:	f7fe fcfb 	bl	800073c <main>

08001d46 <LoopForever>:

LoopForever:
  b LoopForever
 8001d46:	e7fe      	b.n	8001d46 <LoopForever>
  ldr   r0, =_estack
 8001d48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d54:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 8001d58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d5c:	20000560 	.word	0x20000560

08001d60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_Init+0x3c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_Init+0x3c>)
 8001d76:	2180      	movs	r1, #128	@ 0x80
 8001d78:	0049      	lsls	r1, r1, #1
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f000 f810 	bl	8001da4 <HAL_InitTick>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e001      	b.n	8001d94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fd00 	bl	8001794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40022000 	.word	0x40022000

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	230f      	movs	r3, #15
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001db4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <HAL_InitTick+0x88>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d02b      	beq.n	8001e14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <HAL_InitTick+0x8c>)
 8001dbe:	681c      	ldr	r4, [r3, #0]
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_InitTick+0x88>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	23fa      	movs	r3, #250	@ 0xfa
 8001dc8:	0098      	lsls	r0, r3, #2
 8001dca:	f7fe f999 	bl	8000100 <__udivsi3>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	0020      	movs	r0, r4
 8001dd4:	f7fe f994 	bl	8000100 <__udivsi3>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f001 fa3d 	bl	800325a <HAL_SYSTICK_Config>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d112      	bne.n	8001e0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d80a      	bhi.n	8001e00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	2301      	movs	r3, #1
 8001dee:	425b      	negs	r3, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	0018      	movs	r0, r3
 8001df4:	f001 f9fc 	bl	80031f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <HAL_InitTick+0x90>)
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e00d      	b.n	8001e1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e008      	b.n	8001e1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0a:	230f      	movs	r3, #15
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	e003      	b.n	8001e1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e14:	230f      	movs	r3, #15
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b005      	add	sp, #20
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	2000000c 	.word	0x2000000c
 8001e30:	20000004 	.word	0x20000004
 8001e34:	20000008 	.word	0x20000008

08001e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <HAL_IncTick+0x1c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	001a      	movs	r2, r3
 8001e42:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_IncTick+0x20>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	18d2      	adds	r2, r2, r3
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_IncTick+0x20>)
 8001e4a:	601a      	str	r2, [r3, #0]
}
 8001e4c:	46c0      	nop			@ (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	2000000c 	.word	0x2000000c
 8001e58:	2000055c 	.word	0x2000055c

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b02      	ldr	r3, [pc, #8]	@ (8001e6c <HAL_GetTick+0x10>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	2000055c 	.word	0x2000055c

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fff0 	bl	8001e5c <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3301      	adds	r3, #1
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	001a      	movs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	189b      	adds	r3, r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	f7ff ffe0 	bl	8001e5c <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	2000000c 	.word	0x2000000c

08001eb8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001ec8:	401a      	ands	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	fe3fffff 	.word	0xfe3fffff

08001ee0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	23e0      	movs	r3, #224	@ 0xe0
 8001eee:	045b      	lsls	r3, r3, #17
 8001ef0:	4013      	ands	r3, r2
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	400a      	ands	r2, r1
 8001f10:	2107      	movs	r1, #7
 8001f12:	4091      	lsls	r1, r2
 8001f14:	000a      	movs	r2, r1
 8001f16:	43d2      	mvns	r2, r2
 8001f18:	401a      	ands	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	400b      	ands	r3, r1
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4099      	lsls	r1, r3
 8001f24:	000b      	movs	r3, r1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b004      	add	sp, #16
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	2104      	movs	r1, #4
 8001f46:	400a      	ands	r2, r1
 8001f48:	2107      	movs	r1, #7
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2104      	movs	r1, #4
 8001f54:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f56:	40da      	lsrs	r2, r3
 8001f58:	0013      	movs	r3, r2
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b002      	add	sp, #8
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	23c0      	movs	r3, #192	@ 0xc0
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	4013      	ands	r3, r2
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	211f      	movs	r1, #31
 8001f98:	400a      	ands	r2, r1
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	4091      	lsls	r1, r2
 8001f9e:	000a      	movs	r2, r1
 8001fa0:	43d2      	mvns	r2, r2
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	210f      	movs	r1, #15
 8001faa:	4019      	ands	r1, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	201f      	movs	r0, #31
 8001fb0:	4003      	ands	r3, r0
 8001fb2:	4099      	lsls	r1, r3
 8001fb4:	000b      	movs	r3, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	035b      	lsls	r3, r3, #13
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	0352      	lsls	r2, r2, #13
 8001ff8:	0b52      	lsrs	r2, r2, #13
 8001ffa:	43d2      	mvns	r2, r2
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	0212      	lsls	r2, r2, #8
 8002020:	43d2      	mvns	r2, r2
 8002022:	401a      	ands	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	400b      	ands	r3, r1
 800202c:	4904      	ldr	r1, [pc, #16]	@ (8002040 <LL_ADC_SetChannelSamplingTime+0x34>)
 800202e:	400b      	ands	r3, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	07ffff00 	.word	0x07ffff00

08002044 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <LL_ADC_EnableInternalRegulator+0x24>)
 8002052:	4013      	ands	r3, r2
 8002054:	2280      	movs	r2, #128	@ 0x80
 8002056:	0552      	lsls	r2, r2, #21
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	6fffffe8 	.word	0x6fffffe8

0800206c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	055b      	lsls	r3, r3, #21
 800207c:	401a      	ands	r2, r3
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	055b      	lsls	r3, r3, #21
 8002082:	429a      	cmp	r2, r3
 8002084:	d101      	bne.n	800208a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <LL_ADC_Enable+0x20>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	2201      	movs	r2, #1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	7fffffe8 	.word	0x7fffffe8

080020b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <LL_ADC_Disable+0x20>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	2202      	movs	r2, #2
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	7fffffe8 	.word	0x7fffffe8

080020dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <LL_ADC_IsEnabled+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_ADC_IsEnabled+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}

080020fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d101      	bne.n	8002116 <LL_ADC_IsDisableOngoing+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_IsDisableOngoing+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <LL_ADC_REG_StartConversion+0x20>)
 800212e:	4013      	ands	r3, r2
 8002130:	2204      	movs	r2, #4
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}
 8002140:	7fffffe8 	.word	0x7fffffe8

08002144 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <LL_ADC_REG_StopConversion+0x20>)
 8002152:	4013      	ands	r3, r2
 8002154:	2210      	movs	r2, #16
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}
 8002164:	7fffffe8 	.word	0x7fffffe8

08002168 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2204      	movs	r2, #4
 8002176:	4013      	ands	r3, r2
 8002178:	2b04      	cmp	r3, #4
 800217a:	d101      	bne.n	8002180 <LL_ADC_REG_IsConversionOngoing+0x18>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002180:	2300      	movs	r3, #0
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002194:	231f      	movs	r3, #31
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e17f      	b.n	80024b2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff fb15 	bl	80017ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2254      	movs	r2, #84	@ 0x54
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff ff49 	bl	800206c <LL_ADC_IsInternalRegulatorEnabled>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d115      	bne.n	800220a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff ff2e 	bl	8002044 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e8:	4bb4      	ldr	r3, [pc, #720]	@ (80024bc <HAL_ADC_Init+0x330>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	49b4      	ldr	r1, [pc, #720]	@ (80024c0 <HAL_ADC_Init+0x334>)
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7fd ff86 	bl	8000100 <__udivsi3>
 80021f4:	0003      	movs	r3, r0
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021fc:	e002      	b.n	8002204 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3b01      	subs	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0018      	movs	r0, r3
 8002210:	f7ff ff2c 	bl	800206c <LL_ADC_IsInternalRegulatorEnabled>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d10f      	bne.n	8002238 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	2210      	movs	r2, #16
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2201      	movs	r2, #1
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002230:	231f      	movs	r3, #31
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0018      	movs	r0, r3
 800223e:	f7ff ff93 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	2210      	movs	r2, #16
 800224c:	4013      	ands	r3, r2
 800224e:	d000      	beq.n	8002252 <HAL_ADC_Init+0xc6>
 8002250:	e122      	b.n	8002498 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d000      	beq.n	800225a <HAL_ADC_Init+0xce>
 8002258:	e11e      	b.n	8002498 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	4a99      	ldr	r2, [pc, #612]	@ (80024c4 <HAL_ADC_Init+0x338>)
 8002260:	4013      	ands	r3, r2
 8002262:	2202      	movs	r2, #2
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff ff34 	bl	80020dc <LL_ADC_IsEnabled>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d000      	beq.n	800227a <HAL_ADC_Init+0xee>
 8002278:	e0ad      	b.n	80023d6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7e1b      	ldrb	r3, [r3, #24]
 8002282:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002284:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7e5b      	ldrb	r3, [r3, #25]
 800228a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800228c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7e9b      	ldrb	r3, [r3, #26]
 8002292:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002294:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <HAL_ADC_Init+0x118>
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	015b      	lsls	r3, r3, #5
 80022a2:	e000      	b.n	80022a6 <HAL_ADC_Init+0x11a>
 80022a4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022a6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022ac:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	da04      	bge.n	80022c0 <HAL_ADC_Init+0x134>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	e001      	b.n	80022c4 <HAL_ADC_Init+0x138>
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80022c4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	212c      	movs	r1, #44	@ 0x2c
 80022ca:	5c5b      	ldrb	r3, [r3, r1]
 80022cc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022ce:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	5c9b      	ldrb	r3, [r3, r2]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d115      	bne.n	800230c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e9b      	ldrb	r3, [r3, #26]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2280      	movs	r2, #128	@ 0x80
 80022ec:	0252      	lsls	r2, r2, #9
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e00b      	b.n	800230c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f8:	2220      	movs	r2, #32
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	2201      	movs	r2, #1
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002318:	23e0      	movs	r3, #224	@ 0xe0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002322:	4313      	orrs	r3, r2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a65      	ldr	r2, [pc, #404]	@ (80024c8 <HAL_ADC_Init+0x33c>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0f9b      	lsrs	r3, r3, #30
 8002346:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800234c:	4313      	orrs	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	223c      	movs	r2, #60	@ 0x3c
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d111      	bne.n	8002382 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0f9b      	lsrs	r3, r3, #30
 8002364:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800236a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002370:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002376:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	2201      	movs	r2, #1
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a50      	ldr	r2, [pc, #320]	@ (80024cc <HAL_ADC_Init+0x340>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	430a      	orrs	r2, r1
 8002396:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	23c0      	movs	r3, #192	@ 0xc0
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d018      	beq.n	80023d6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	05db      	lsls	r3, r3, #23
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d012      	beq.n	80023d6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d00c      	beq.n	80023d6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80023bc:	4b44      	ldr	r3, [pc, #272]	@ (80024d0 <HAL_ADC_Init+0x344>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a44      	ldr	r2, [pc, #272]	@ (80024d4 <HAL_ADC_Init+0x348>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	23f0      	movs	r3, #240	@ 0xf0
 80023cc:	039b      	lsls	r3, r3, #14
 80023ce:	401a      	ands	r2, r3
 80023d0:	4b3f      	ldr	r3, [pc, #252]	@ (80024d0 <HAL_ADC_Init+0x344>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023de:	001a      	movs	r2, r3
 80023e0:	2100      	movs	r1, #0
 80023e2:	f7ff fd8a 	bl	8001efa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	493a      	ldr	r1, [pc, #232]	@ (80024d8 <HAL_ADC_Init+0x34c>)
 80023f0:	001a      	movs	r2, r3
 80023f2:	f7ff fd82 	bl	8001efa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2110      	movs	r1, #16
 800240a:	4249      	negs	r1, r1
 800240c:	430a      	orrs	r2, r1
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002410:	e018      	b.n	8002444 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	039b      	lsls	r3, r3, #14
 800241a:	429a      	cmp	r2, r3
 800241c:	d112      	bne.n	8002444 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	3b01      	subs	r3, #1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	221c      	movs	r2, #28
 800242e:	4013      	ands	r3, r2
 8002430:	2210      	movs	r2, #16
 8002432:	4252      	negs	r2, r2
 8002434:	409a      	lsls	r2, r3
 8002436:	0011      	movs	r1, r2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2100      	movs	r1, #0
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff fd72 	bl	8001f34 <LL_ADC_GetSamplingTimeCommonChannels>
 8002450:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002456:	429a      	cmp	r2, r3
 8002458:	d10b      	bne.n	8002472 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	2203      	movs	r2, #3
 8002466:	4393      	bics	r3, r2
 8002468:	2201      	movs	r2, #1
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002470:	e01c      	b.n	80024ac <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	2212      	movs	r2, #18
 8002478:	4393      	bics	r3, r2
 800247a:	2210      	movs	r2, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	2201      	movs	r2, #1
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800248e:	231f      	movs	r3, #31
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002496:	e009      	b.n	80024ac <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	2210      	movs	r2, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024a4:	231f      	movs	r3, #31
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80024ac:	231f      	movs	r3, #31
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	781b      	ldrb	r3, [r3, #0]
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b008      	add	sp, #32
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	20000004 	.word	0x20000004
 80024c0:	00030d40 	.word	0x00030d40
 80024c4:	fffffefd 	.word	0xfffffefd
 80024c8:	ffde0201 	.word	0xffde0201
 80024cc:	1ffffc02 	.word	0x1ffffc02
 80024d0:	40012708 	.word	0x40012708
 80024d4:	ffc3ffff 	.word	0xffc3ffff
 80024d8:	07ffff04 	.word	0x07ffff04

080024dc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024dc:	b5b0      	push	{r4, r5, r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff fe3d 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d135      	bne.n	800255e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2254      	movs	r2, #84	@ 0x54
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_Start+0x24>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e035      	b.n	800256c <HAL_ADC_Start+0x90>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2254      	movs	r2, #84	@ 0x54
 8002504:	2101      	movs	r1, #1
 8002506:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002508:	250f      	movs	r5, #15
 800250a:	197c      	adds	r4, r7, r5
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f000 fb28 	bl	8002b64 <ADC_Enable>
 8002514:	0003      	movs	r3, r0
 8002516:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002518:	197b      	adds	r3, r7, r5
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d119      	bne.n	8002554 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	4a13      	ldr	r2, [pc, #76]	@ (8002574 <HAL_ADC_Start+0x98>)
 8002526:	4013      	ands	r3, r2
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	0052      	lsls	r2, r2, #1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	221c      	movs	r2, #28
 800253e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2254      	movs	r2, #84	@ 0x54
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0018      	movs	r0, r3
 800254e:	f7ff fde7 	bl	8002120 <LL_ADC_REG_StartConversion>
 8002552:	e008      	b.n	8002566 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2254      	movs	r2, #84	@ 0x54
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]
 800255c:	e003      	b.n	8002566 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800255e:	230f      	movs	r3, #15
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2202      	movs	r2, #2
 8002564:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002566:	230f      	movs	r3, #15
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	781b      	ldrb	r3, [r3, #0]
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	fffff0fe 	.word	0xfffff0fe

08002578 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2254      	movs	r2, #84	@ 0x54
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADC_Stop+0x16>
 800258a:	2302      	movs	r3, #2
 800258c:	e029      	b.n	80025e2 <HAL_ADC_Stop+0x6a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2254      	movs	r2, #84	@ 0x54
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002596:	250f      	movs	r5, #15
 8002598:	197c      	adds	r4, r7, r5
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fa9f 	bl	8002ae0 <ADC_ConversionStop>
 80025a2:	0003      	movs	r3, r0
 80025a4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80025a6:	197b      	adds	r3, r7, r5
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d112      	bne.n	80025d4 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80025ae:	197c      	adds	r4, r7, r5
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fb5c 	bl	8002c70 <ADC_Disable>
 80025b8:	0003      	movs	r3, r0
 80025ba:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025bc:	197b      	adds	r3, r7, r5
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	4a08      	ldr	r2, [pc, #32]	@ (80025ec <HAL_ADC_Stop+0x74>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	2201      	movs	r2, #1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2254      	movs	r2, #84	@ 0x54
 80025d8:	2100      	movs	r1, #0
 80025da:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80025dc:	230f      	movs	r3, #15
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	fffffefe 	.word	0xfffffefe

080025f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d102      	bne.n	8002608 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002602:	2308      	movs	r3, #8
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e00f      	b.n	8002628 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	d007      	beq.n	8002624 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	2220      	movs	r2, #32
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e072      	b.n	800270a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002624:	2304      	movs	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002628:	f7ff fc18 	bl	8001e5c <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002630:	e01f      	b.n	8002672 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	d01c      	beq.n	8002672 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002638:	f7ff fc10 	bl	8001e5c <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d302      	bcc.n	800264e <HAL_ADC_PollForConversion+0x5e>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d111      	bne.n	8002672 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4013      	ands	r3, r2
 8002658:	d10b      	bne.n	8002672 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	2204      	movs	r2, #4
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2254      	movs	r2, #84	@ 0x54
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e04b      	b.n	800270a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	d0d9      	beq.n	8002632 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	0092      	lsls	r2, r2, #2
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff fc66 	bl	8001f62 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d02e      	beq.n	80026f8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7e9b      	ldrb	r3, [r3, #26]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12a      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2208      	movs	r2, #8
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d123      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff fd57 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d110      	bne.n	80026e0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	210c      	movs	r1, #12
 80026ca:	438a      	bics	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	4a10      	ldr	r2, [pc, #64]	@ (8002714 <HAL_ADC_PollForConversion+0x124>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	2201      	movs	r2, #1
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80026de:	e00b      	b.n	80026f8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	2220      	movs	r2, #32
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	2201      	movs	r2, #1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e1b      	ldrb	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	220c      	movs	r2, #12
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	fffffefe 	.word	0xfffffefe

08002718 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273a:	2317      	movs	r3, #23
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2254      	movs	r2, #84	@ 0x54
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x24>
 8002750:	2302      	movs	r3, #2
 8002752:	e1c0      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x3a6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2254      	movs	r2, #84	@ 0x54
 8002758:	2101      	movs	r1, #1
 800275a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff fd01 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d000      	beq.n	800276c <HAL_ADC_ConfigChannel+0x3c>
 800276a:	e1a3      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d100      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x46>
 8002774:	e143      	b.n	80029fe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	429a      	cmp	r2, r3
 8002780:	d004      	beq.n	800278c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002786:	4ac1      	ldr	r2, [pc, #772]	@ (8002a8c <HAL_ADC_ConfigChannel+0x35c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d108      	bne.n	800279e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0019      	movs	r1, r3
 8002796:	0010      	movs	r0, r2
 8002798:	f7ff fc14 	bl	8001fc4 <LL_ADC_REG_SetSequencerChAdd>
 800279c:	e0c9      	b.n	8002932 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	211f      	movs	r1, #31
 80027a8:	400b      	ands	r3, r1
 80027aa:	210f      	movs	r1, #15
 80027ac:	4099      	lsls	r1, r3
 80027ae:	000b      	movs	r3, r1
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4013      	ands	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	035b      	lsls	r3, r3, #13
 80027bc:	0b5b      	lsrs	r3, r3, #13
 80027be:	d105      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x9c>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	221f      	movs	r2, #31
 80027c8:	4013      	ands	r3, r2
 80027ca:	e098      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d000      	beq.n	80027d8 <HAL_ADC_ConfigChannel+0xa8>
 80027d6:	e091      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1cc>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	d000      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0xb4>
 80027e2:	e089      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1c8>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2204      	movs	r2, #4
 80027ea:	4013      	ands	r3, r2
 80027ec:	d000      	beq.n	80027f0 <HAL_ADC_ConfigChannel+0xc0>
 80027ee:	e081      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x1c4>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d000      	beq.n	80027fc <HAL_ADC_ConfigChannel+0xcc>
 80027fa:	e079      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x1c0>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	4013      	ands	r3, r2
 8002804:	d000      	beq.n	8002808 <HAL_ADC_ConfigChannel+0xd8>
 8002806:	e071      	b.n	80028ec <HAL_ADC_ConfigChannel+0x1bc>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2220      	movs	r2, #32
 800280e:	4013      	ands	r3, r2
 8002810:	d000      	beq.n	8002814 <HAL_ADC_ConfigChannel+0xe4>
 8002812:	e069      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1b8>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2240      	movs	r2, #64	@ 0x40
 800281a:	4013      	ands	r3, r2
 800281c:	d000      	beq.n	8002820 <HAL_ADC_ConfigChannel+0xf0>
 800281e:	e061      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1b4>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	4013      	ands	r3, r2
 8002828:	d000      	beq.n	800282c <HAL_ADC_ConfigChannel+0xfc>
 800282a:	e059      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x1b0>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d151      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1ac>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4013      	ands	r3, r2
 8002842:	d149      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1a8>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4013      	ands	r3, r2
 800284e:	d141      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1a4>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	@ 0x80
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4013      	ands	r3, r2
 800285a:	d139      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1a0>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	4013      	ands	r3, r2
 8002866:	d131      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x19c>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	@ 0x80
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	4013      	ands	r3, r2
 8002872:	d129      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x198>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	01db      	lsls	r3, r3, #7
 800287c:	4013      	ands	r3, r2
 800287e:	d121      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x194>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	4013      	ands	r3, r2
 800288a:	d119      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x190>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	025b      	lsls	r3, r3, #9
 8002894:	4013      	ands	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x18c>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	4013      	ands	r3, r2
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x188>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	02db      	lsls	r3, r3, #11
 80028ac:	4013      	ands	r3, r2
 80028ae:	d001      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x184>
 80028b0:	2312      	movs	r3, #18
 80028b2:	e024      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028b4:	2300      	movs	r3, #0
 80028b6:	e022      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028b8:	2311      	movs	r3, #17
 80028ba:	e020      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028bc:	2310      	movs	r3, #16
 80028be:	e01e      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028c0:	230f      	movs	r3, #15
 80028c2:	e01c      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028c4:	230e      	movs	r3, #14
 80028c6:	e01a      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028c8:	230d      	movs	r3, #13
 80028ca:	e018      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028cc:	230c      	movs	r3, #12
 80028ce:	e016      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028d0:	230b      	movs	r3, #11
 80028d2:	e014      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028d4:	230a      	movs	r3, #10
 80028d6:	e012      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028d8:	2309      	movs	r3, #9
 80028da:	e010      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028dc:	2308      	movs	r3, #8
 80028de:	e00e      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028e0:	2307      	movs	r3, #7
 80028e2:	e00c      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028e4:	2306      	movs	r3, #6
 80028e6:	e00a      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028e8:	2305      	movs	r3, #5
 80028ea:	e008      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e006      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028f0:	2303      	movs	r3, #3
 80028f2:	e004      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e002      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1ce>
 80028fc:	2300      	movs	r3, #0
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	6852      	ldr	r2, [r2, #4]
 8002902:	201f      	movs	r0, #31
 8002904:	4002      	ands	r2, r0
 8002906:	4093      	lsls	r3, r2
 8002908:	000a      	movs	r2, r1
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	429a      	cmp	r2, r3
 800291e:	d808      	bhi.n	8002932 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	001a      	movs	r2, r3
 800292e:	f7ff fb29 	bl	8001f84 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	001a      	movs	r2, r3
 8002940:	f7ff fb64 	bl	800200c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db00      	blt.n	800294e <HAL_ADC_ConfigChannel+0x21e>
 800294c:	e0bc      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800294e:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff fac5 	bl	8001ee0 <LL_ADC_GetCommonPathInternalCh>
 8002956:	0003      	movs	r3, r0
 8002958:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a4d      	ldr	r2, [pc, #308]	@ (8002a94 <HAL_ADC_ConfigChannel+0x364>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d122      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800296c:	d11d      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2280      	movs	r2, #128	@ 0x80
 8002972:	0412      	lsls	r2, r2, #16
 8002974:	4313      	orrs	r3, r2
 8002976:	4a46      	ldr	r2, [pc, #280]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 8002978:	0019      	movs	r1, r3
 800297a:	0010      	movs	r0, r2
 800297c:	f7ff fa9c 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002980:	4b45      	ldr	r3, [pc, #276]	@ (8002a98 <HAL_ADC_ConfigChannel+0x368>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4945      	ldr	r1, [pc, #276]	@ (8002a9c <HAL_ADC_ConfigChannel+0x36c>)
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd fbba 	bl	8000100 <__udivsi3>
 800298c:	0003      	movs	r3, r0
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	0013      	movs	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	189b      	adds	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800299a:	e002      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3b01      	subs	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029a8:	e08e      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a3c      	ldr	r2, [pc, #240]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x370>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10e      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	045b      	lsls	r3, r3, #17
 80029ba:	4013      	ands	r3, r2
 80029bc:	d109      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2280      	movs	r2, #128	@ 0x80
 80029c2:	0452      	lsls	r2, r2, #17
 80029c4:	4313      	orrs	r3, r2
 80029c6:	4a32      	ldr	r2, [pc, #200]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 80029c8:	0019      	movs	r1, r3
 80029ca:	0010      	movs	r0, r2
 80029cc:	f7ff fa74 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 80029d0:	e07a      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a33      	ldr	r2, [pc, #204]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x374>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d000      	beq.n	80029de <HAL_ADC_ConfigChannel+0x2ae>
 80029dc:	e074      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	03db      	lsls	r3, r3, #15
 80029e4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029e6:	d000      	beq.n	80029ea <HAL_ADC_ConfigChannel+0x2ba>
 80029e8:	e06e      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	03d2      	lsls	r2, r2, #15
 80029f0:	4313      	orrs	r3, r2
 80029f2:	4a27      	ldr	r2, [pc, #156]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 80029f4:	0019      	movs	r1, r3
 80029f6:	0010      	movs	r0, r2
 80029f8:	f7ff fa5e 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 80029fc:	e064      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a8c <HAL_ADC_ConfigChannel+0x35c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d107      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f7ff fae1 	bl	8001fe6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	da4d      	bge.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a2c:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fa56 	bl	8001ee0 <LL_ADC_GetCommonPathInternalCh>
 8002a34:	0003      	movs	r3, r0
 8002a36:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a15      	ldr	r2, [pc, #84]	@ (8002a94 <HAL_ADC_ConfigChannel+0x364>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d108      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4a18      	ldr	r2, [pc, #96]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x378>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	f7ff fa33 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 8002a52:	e039      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a11      	ldr	r2, [pc, #68]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x370>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <HAL_ADC_ConfigChannel+0x37c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 8002a66:	0019      	movs	r1, r3
 8002a68:	0010      	movs	r0, r2
 8002a6a:	f7ff fa25 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 8002a6e:	e02b      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x374>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d126      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x380>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	4a03      	ldr	r2, [pc, #12]	@ (8002a90 <HAL_ADC_ConfigChannel+0x360>)
 8002a82:	0019      	movs	r1, r3
 8002a84:	0010      	movs	r0, r2
 8002a86:	f7ff fa17 	bl	8001eb8 <LL_ADC_SetCommonPathInternalCh>
 8002a8a:	e01d      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x398>
 8002a8c:	80000004 	.word	0x80000004
 8002a90:	40012708 	.word	0x40012708
 8002a94:	b0001000 	.word	0xb0001000
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	00030d40 	.word	0x00030d40
 8002aa0:	b8004000 	.word	0xb8004000
 8002aa4:	b4002000 	.word	0xb4002000
 8002aa8:	ff7fffff 	.word	0xff7fffff
 8002aac:	feffffff 	.word	0xfeffffff
 8002ab0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	2220      	movs	r2, #32
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ac0:	2317      	movs	r3, #23
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2254      	movs	r2, #84	@ 0x54
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ad0:	2317      	movs	r3, #23
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	781b      	ldrb	r3, [r3, #0]
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b006      	add	sp, #24
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			@ (mov r8, r8)

08002ae0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fb3b 	bl	8002168 <LL_ADC_REG_IsConversionOngoing>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d031      	beq.n	8002b5a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7ff faff 	bl	80020fe <LL_ADC_IsDisableOngoing>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d104      	bne.n	8002b0e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7ff fb1b 	bl	8002144 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b0e:	f7ff f9a5 	bl	8001e5c <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002b16:	e01a      	b.n	8002b4e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b18:	f7ff f9a0 	bl	8001e5c <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d913      	bls.n	8002b4e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	2210      	movs	r2, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	2201      	movs	r2, #1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e006      	b.n	8002b5c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2204      	movs	r2, #4
 8002b56:	4013      	ands	r3, r2
 8002b58:	d1de      	bne.n	8002b18 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff fab1 	bl	80020dc <LL_ADC_IsEnabled>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d000      	beq.n	8002b80 <ADC_Enable+0x1c>
 8002b7e:	e069      	b.n	8002c54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4a36      	ldr	r2, [pc, #216]	@ (8002c60 <ADC_Enable+0xfc>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d00d      	beq.n	8002ba8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	2210      	movs	r2, #16
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e056      	b.n	8002c56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff fa71 	bl	8002094 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c64 <ADC_Enable+0x100>)
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7ff f993 	bl	8001ee0 <LL_ADC_GetCommonPathInternalCh>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d00f      	beq.n	8002be4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc4:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <ADC_Enable+0x104>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4928      	ldr	r1, [pc, #160]	@ (8002c6c <ADC_Enable+0x108>)
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7fd fa98 	bl	8000100 <__udivsi3>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002bd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bd6:	e002      	b.n	8002bde <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f9      	bne.n	8002bd8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e5b      	ldrb	r3, [r3, #25]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d033      	beq.n	8002c54 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002bec:	f7ff f936 	bl	8001e5c <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf4:	e027      	b.n	8002c46 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff fa6e 	bl	80020dc <LL_ADC_IsEnabled>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d104      	bne.n	8002c0e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7ff fa43 	bl	8002094 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c0e:	f7ff f925 	bl	8001e5c <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d914      	bls.n	8002c46 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d00d      	beq.n	8002c46 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	2210      	movs	r2, #16
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e007      	b.n	8002c56 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d1d0      	bne.n	8002bf6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	80000017 	.word	0x80000017
 8002c64:	40012708 	.word	0x40012708
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	00030d40 	.word	0x00030d40

08002c70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff fa3e 	bl	80020fe <LL_ADC_IsDisableOngoing>
 8002c82:	0003      	movs	r3, r0
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7ff fa26 	bl	80020dc <LL_ADC_IsEnabled>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d046      	beq.n	8002d22 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d143      	bne.n	8002d22 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10d      	bne.n	8002cc4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff fa03 	bl	80020b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cba:	f7ff f8cf 	bl	8001e5c <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc2:	e028      	b.n	8002d16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc8:	2210      	movs	r2, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e021      	b.n	8002d24 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ce0:	f7ff f8bc 	bl	8001e5c <HAL_GetTick>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d913      	bls.n	8002d16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d00d      	beq.n	8002d16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	2210      	movs	r2, #16
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e006      	b.n	8002d24 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d1de      	bne.n	8002ce0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b004      	add	sp, #16
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <LL_ADC_GetCommonClock>:
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	23f0      	movs	r3, #240	@ 0xf0
 8002d3a:	039b      	lsls	r3, r3, #14
 8002d3c:	4013      	ands	r3, r2
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <LL_ADC_GetClock>:
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	0f9b      	lsrs	r3, r3, #30
 8002d54:	079b      	lsls	r3, r3, #30
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <LL_ADC_SetCalibrationFactor>:
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	22b4      	movs	r2, #180	@ 0xb4
 8002d6c:	589b      	ldr	r3, [r3, r2]
 8002d6e:	227f      	movs	r2, #127	@ 0x7f
 8002d70:	4393      	bics	r3, r2
 8002d72:	001a      	movs	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	21b4      	movs	r1, #180	@ 0xb4
 8002d7c:	505a      	str	r2, [r3, r1]
}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <LL_ADC_GetCalibrationFactor>:
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	22b4      	movs	r2, #180	@ 0xb4
 8002d92:	589b      	ldr	r3, [r3, r2]
 8002d94:	227f      	movs	r2, #127	@ 0x7f
 8002d96:	4013      	ands	r3, r2
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <LL_ADC_Enable>:
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <LL_ADC_Enable+0x20>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	2201      	movs	r2, #1
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	7fffffe8 	.word	0x7fffffe8

08002dc4 <LL_ADC_Disable>:
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <LL_ADC_Disable+0x20>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	7fffffe8 	.word	0x7fffffe8

08002de8 <LL_ADC_IsEnabled>:
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <LL_ADC_IsEnabled+0x18>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <LL_ADC_IsEnabled+0x1a>
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	0018      	movs	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <LL_ADC_StartCalibration>:
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a05      	ldr	r2, [pc, #20]	@ (8002e30 <LL_ADC_StartCalibration+0x24>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2280      	movs	r2, #128	@ 0x80
 8002e1e:	0612      	lsls	r2, r2, #24
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	7fffffe8 	.word	0x7fffffe8

08002e34 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	0fdb      	lsrs	r3, r3, #31
 8002e42:	07da      	lsls	r2, r3, #31
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d101      	bne.n	8002e50 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b08b      	sub	sp, #44	@ 0x2c
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2254      	movs	r2, #84	@ 0x54
 8002e70:	5c9b      	ldrb	r3, [r3, r2]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADCEx_Calibration_Start+0x1e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e0dd      	b.n	8003036 <HAL_ADCEx_Calibration_Start+0x1da>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2254      	movs	r2, #84	@ 0x54
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e82:	231f      	movs	r3, #31
 8002e84:	18fc      	adds	r4, r7, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff fef1 	bl	8002c70 <ADC_Disable>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7ff ffa6 	bl	8002de8 <LL_ADC_IsEnabled>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d000      	beq.n	8002ea2 <HAL_ADCEx_Calibration_Start+0x46>
 8002ea0:	e0bc      	b.n	800301c <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	4a66      	ldr	r2, [pc, #408]	@ (8003040 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2202      	movs	r2, #2
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a62      	ldr	r2, [pc, #392]	@ (8003044 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	495f      	ldr	r1, [pc, #380]	@ (8003048 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002eca:	400a      	ands	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed2:	e02d      	b.n	8002f30 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff ff97 	bl	8002e0c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ede:	e014      	b.n	8002f0a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	@ (800304c <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d90d      	bls.n	8002f0a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	2212      	movs	r2, #18
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2254      	movs	r2, #84	@ 0x54
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e095      	b.n	8003036 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff ff90 	bl	8002e34 <LL_ADC_IsCalibrationOnGoing>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d1e3      	bne.n	8002ee0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff ff32 	bl	8002d86 <LL_ADC_GetCalibrationFactor>
 8002f22:	0002      	movs	r2, r0
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	2b07      	cmp	r3, #7
 8002f34:	d9ce      	bls.n	8002ed4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002f36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f38:	6a38      	ldr	r0, [r7, #32]
 8002f3a:	f7fd f8e1 	bl	8000100 <__udivsi3>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7ff ff2a 	bl	8002da0 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7ff fef8 	bl	8002d46 <LL_ADC_GetClock>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d11b      	bne.n	8002f92 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003050 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff fee5 	bl	8002d2c <LL_ADC_GetCommonClock>
 8002f62:	0003      	movs	r3, r0
 8002f64:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	23e0      	movs	r3, #224	@ 0xe0
 8002f6a:	035b      	lsls	r3, r3, #13
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d310      	bcc.n	8002f92 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	0c9b      	lsrs	r3, r3, #18
 8002f74:	3b03      	subs	r3, #3
 8002f76:	2201      	movs	r2, #1
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	0013      	movs	r3, r2
 8002f7c:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002f84:	e002      	b.n	8002f8c <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f9      	bne.n	8002f86 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff fedf 	bl	8002d5e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff ff0d 	bl	8002dc4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002faa:	f7fe ff57 	bl	8001e5c <HAL_GetTick>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fb2:	e01b      	b.n	8002fec <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fb4:	f7fe ff52 	bl	8001e5c <HAL_GetTick>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d914      	bls.n	8002fec <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff ff0e 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d00d      	beq.n	8002fec <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e024      	b.n	8003036 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fef9 	bl	8002de8 <LL_ADC_IsEnabled>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d1dc      	bne.n	8002fb4 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68d9      	ldr	r1, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	430a      	orrs	r2, r1
 8003008:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	2203      	movs	r2, #3
 8003010:	4393      	bics	r3, r2
 8003012:	2201      	movs	r2, #1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	@ 0x58
 800301a:	e005      	b.n	8003028 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003020:	2210      	movs	r2, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2254      	movs	r2, #84	@ 0x54
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003030:	231f      	movs	r3, #31
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b00b      	add	sp, #44	@ 0x2c
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	fffffefd 	.word	0xfffffefd
 8003044:	00008003 	.word	0x00008003
 8003048:	ffff7ffc 	.word	0xffff7ffc
 800304c:	0002f1ff 	.word	0x0002f1ff
 8003050:	40012708 	.word	0x40012708

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	0002      	movs	r2, r0
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b7f      	cmp	r3, #127	@ 0x7f
 8003066:	d809      	bhi.n	800307c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	001a      	movs	r2, r3
 800306e:	231f      	movs	r3, #31
 8003070:	401a      	ands	r2, r3
 8003072:	4b04      	ldr	r3, [pc, #16]	@ (8003084 <__NVIC_EnableIRQ+0x30>)
 8003074:	2101      	movs	r1, #1
 8003076:	4091      	lsls	r1, r2
 8003078:	000a      	movs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	0002      	movs	r2, r0
 8003090:	1dfb      	adds	r3, r7, #7
 8003092:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b7f      	cmp	r3, #127	@ 0x7f
 800309a:	d810      	bhi.n	80030be <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309c:	1dfb      	adds	r3, r7, #7
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	001a      	movs	r2, r3
 80030a2:	231f      	movs	r3, #31
 80030a4:	4013      	ands	r3, r2
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <__NVIC_DisableIRQ+0x40>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	409a      	lsls	r2, r3
 80030ac:	0013      	movs	r3, r2
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030b2:	f3bf 8f4f 	dsb	sy
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80030b8:	f3bf 8f6f 	isb	sy
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	0002      	movs	r2, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	1dfb      	adds	r3, r7, #7
 80030d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030da:	1dfb      	adds	r3, r7, #7
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b7f      	cmp	r3, #127	@ 0x7f
 80030e0:	d828      	bhi.n	8003134 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030e2:	4a2f      	ldr	r2, [pc, #188]	@ (80031a0 <__NVIC_SetPriority+0xd4>)
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	33c0      	adds	r3, #192	@ 0xc0
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	589b      	ldr	r3, [r3, r2]
 80030f2:	1dfa      	adds	r2, r7, #7
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	0011      	movs	r1, r2
 80030f8:	2203      	movs	r2, #3
 80030fa:	400a      	ands	r2, r1
 80030fc:	00d2      	lsls	r2, r2, #3
 80030fe:	21ff      	movs	r1, #255	@ 0xff
 8003100:	4091      	lsls	r1, r2
 8003102:	000a      	movs	r2, r1
 8003104:	43d2      	mvns	r2, r2
 8003106:	401a      	ands	r2, r3
 8003108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	22ff      	movs	r2, #255	@ 0xff
 8003110:	401a      	ands	r2, r3
 8003112:	1dfb      	adds	r3, r7, #7
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	0018      	movs	r0, r3
 8003118:	2303      	movs	r3, #3
 800311a:	4003      	ands	r3, r0
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003120:	481f      	ldr	r0, [pc, #124]	@ (80031a0 <__NVIC_SetPriority+0xd4>)
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b25b      	sxtb	r3, r3
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	430a      	orrs	r2, r1
 800312c:	33c0      	adds	r3, #192	@ 0xc0
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003132:	e031      	b.n	8003198 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003134:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <__NVIC_SetPriority+0xd8>)
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	0019      	movs	r1, r3
 800313c:	230f      	movs	r3, #15
 800313e:	400b      	ands	r3, r1
 8003140:	3b08      	subs	r3, #8
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3306      	adds	r3, #6
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	3304      	adds	r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1dfa      	adds	r2, r7, #7
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	0011      	movs	r1, r2
 8003154:	2203      	movs	r2, #3
 8003156:	400a      	ands	r2, r1
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	21ff      	movs	r1, #255	@ 0xff
 800315c:	4091      	lsls	r1, r2
 800315e:	000a      	movs	r2, r1
 8003160:	43d2      	mvns	r2, r2
 8003162:	401a      	ands	r2, r3
 8003164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	22ff      	movs	r2, #255	@ 0xff
 800316c:	401a      	ands	r2, r3
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	0018      	movs	r0, r3
 8003174:	2303      	movs	r3, #3
 8003176:	4003      	ands	r3, r0
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800317c:	4809      	ldr	r0, [pc, #36]	@ (80031a4 <__NVIC_SetPriority+0xd8>)
 800317e:	1dfb      	adds	r3, r7, #7
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	001c      	movs	r4, r3
 8003184:	230f      	movs	r3, #15
 8003186:	4023      	ands	r3, r4
 8003188:	3b08      	subs	r3, #8
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	430a      	orrs	r2, r1
 800318e:	3306      	adds	r3, #6
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	18c3      	adds	r3, r0, r3
 8003194:	3304      	adds	r3, #4
 8003196:	601a      	str	r2, [r3, #0]
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b003      	add	sp, #12
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	045b      	lsls	r3, r3, #17
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d301      	bcc.n	80031c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031bc:	2301      	movs	r3, #1
 80031be:	e010      	b.n	80031e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c0:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <SysTick_Config+0x44>)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	3a01      	subs	r2, #1
 80031c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c8:	2301      	movs	r3, #1
 80031ca:	425b      	negs	r3, r3
 80031cc:	2103      	movs	r1, #3
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7ff ff7c 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d4:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <SysTick_Config+0x44>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031da:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <SysTick_Config+0x44>)
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b002      	add	sp, #8
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	210f      	movs	r1, #15
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	1c02      	adds	r2, r0, #0
 8003200:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	187b      	adds	r3, r7, r1
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b25b      	sxtb	r3, r3
 800320a:	0011      	movs	r1, r2
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	0002      	movs	r2, r0
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b25b      	sxtb	r3, r3
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff ff11 	bl	8003054 <__NVIC_EnableIRQ>
}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b002      	add	sp, #8
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	0002      	movs	r2, r0
 8003242:	1dfb      	adds	r3, r7, #7
 8003244:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	b25b      	sxtb	r3, r3
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff ff1b 	bl	8003088 <__NVIC_DisableIRQ>
}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff ff9f 	bl	80031a8 <SysTick_Config>
 800326a:	0003      	movs	r3, r0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e077      	b.n	8003376 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3d      	ldr	r2, [pc, #244]	@ (8003380 <HAL_DMA_Init+0x10c>)
 800328c:	4694      	mov	ip, r2
 800328e:	4463      	add	r3, ip
 8003290:	2114      	movs	r1, #20
 8003292:	0018      	movs	r0, r3
 8003294:	f7fc ff34 	bl	8000100 <__udivsi3>
 8003298:	0003      	movs	r3, r0
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2225      	movs	r2, #37	@ 0x25
 80032a4:	2102      	movs	r1, #2
 80032a6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4934      	ldr	r1, [pc, #208]	@ (8003384 <HAL_DMA_Init+0x110>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 fb0f 	bl	8003914 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	01db      	lsls	r3, r3, #7
 80032fe:	429a      	cmp	r2, r3
 8003300:	d102      	bne.n	8003308 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003310:	213f      	movs	r1, #63	@ 0x3f
 8003312:	400a      	ands	r2, r1
 8003314:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800331e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d011      	beq.n	800334c <HAL_DMA_Init+0xd8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d80d      	bhi.n	800334c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 fb1a 	bl	800396c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	e008      	b.n	800335e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2225      	movs	r2, #37	@ 0x25
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	@ 0x24
 8003370:	2100      	movs	r1, #0
 8003372:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b002      	add	sp, #8
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	bffdfff8 	.word	0xbffdfff8
 8003384:	ffff800f 	.word	0xffff800f

08003388 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e066      	b.n	8003468 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	438a      	bics	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a30      	ldr	r2, [pc, #192]	@ (8003470 <HAL_DMA_DeInit+0xe8>)
 80033b0:	4694      	mov	ip, r2
 80033b2:	4463      	add	r3, ip
 80033b4:	2114      	movs	r1, #20
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7fc fea2 	bl	8000100 <__udivsi3>
 80033bc:	0003      	movs	r3, r0
 80033be:	009a      	lsls	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80033cc:	4b29      	ldr	r3, [pc, #164]	@ (8003474 <HAL_DMA_DeInit+0xec>)
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	221c      	movs	r2, #28
 80033d6:	4013      	ands	r3, r2
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <HAL_DMA_DeInit+0xec>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 fa95 	bl	8003914 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033fa:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <HAL_DMA_DeInit+0x9e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d80c      	bhi.n	8003426 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 faac 	bl	800396c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003424:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2225      	movs	r2, #37	@ 0x25
 800345a:	2100      	movs	r1, #0
 800345c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2224      	movs	r2, #36	@ 0x24
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}
 8003470:	bffdfff8 	.word	0xbffdfff8
 8003474:	40020000 	.word	0x40020000

08003478 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2317      	movs	r3, #23
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2224      	movs	r2, #36	@ 0x24
 8003492:	5c9b      	ldrb	r3, [r3, r2]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_DMA_Start_IT+0x24>
 8003498:	2302      	movs	r3, #2
 800349a:	e06f      	b.n	800357c <HAL_DMA_Start_IT+0x104>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2224      	movs	r2, #36	@ 0x24
 80034a0:	2101      	movs	r1, #1
 80034a2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2225      	movs	r2, #37	@ 0x25
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d157      	bne.n	8003560 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2225      	movs	r2, #37	@ 0x25
 80034b4:	2102      	movs	r1, #2
 80034b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2101      	movs	r1, #1
 80034ca:	438a      	bics	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f9dd 	bl	8003894 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	210e      	movs	r1, #14
 80034ee:	430a      	orrs	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e00f      	b.n	8003514 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2104      	movs	r1, #4
 8003500:	438a      	bics	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	210a      	movs	r1, #10
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	025b      	lsls	r3, r3, #9
 800351e:	4013      	ands	r3, r2
 8003520:	d008      	beq.n	8003534 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352c:	2180      	movs	r1, #128	@ 0x80
 800352e:	0049      	lsls	r1, r1, #1
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	2180      	movs	r1, #128	@ 0x80
 8003548:	0049      	lsls	r1, r1, #1
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e00a      	b.n	8003576 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2280      	movs	r2, #128	@ 0x80
 8003564:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2224      	movs	r2, #36	@ 0x24
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800356e:	2317      	movs	r3, #23
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003576:	2317      	movs	r3, #23
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	781b      	ldrb	r3, [r3, #0]
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b006      	add	sp, #24
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e050      	b.n	8003638 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2225      	movs	r2, #37	@ 0x25
 800359a:	5c9b      	ldrb	r3, [r3, r2]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d008      	beq.n	80035b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2204      	movs	r2, #4
 80035a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	@ 0x24
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e041      	b.n	8003638 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	210e      	movs	r1, #14
 80035c0:	438a      	bics	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	491c      	ldr	r1, [pc, #112]	@ (8003640 <HAL_DMA_Abort+0xbc>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	438a      	bics	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80035e4:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <HAL_DMA_Abort+0xc0>)
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	221c      	movs	r2, #28
 80035ee:	4013      	ands	r3, r2
 80035f0:	2201      	movs	r2, #1
 80035f2:	409a      	lsls	r2, r3
 80035f4:	4b13      	ldr	r3, [pc, #76]	@ (8003644 <HAL_DMA_Abort+0xc0>)
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003602:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003616:	490a      	ldr	r1, [pc, #40]	@ (8003640 <HAL_DMA_Abort+0xbc>)
 8003618:	400a      	ands	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003624:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2225      	movs	r2, #37	@ 0x25
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2224      	movs	r2, #36	@ 0x24
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}
 8003640:	fffffeff 	.word	0xfffffeff
 8003644:	40020000 	.word	0x40020000

08003648 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	210f      	movs	r1, #15
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2225      	movs	r2, #37	@ 0x25
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d006      	beq.n	8003672 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800366a:	187b      	adds	r3, r7, r1
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e049      	b.n	8003706 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	210e      	movs	r1, #14
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	491d      	ldr	r1, [pc, #116]	@ (8003714 <HAL_DMA_Abort_IT+0xcc>)
 800369e:	400a      	ands	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80036a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <HAL_DMA_Abort_IT+0xd0>)
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	221c      	movs	r2, #28
 80036ac:	4013      	ands	r3, r2
 80036ae:	2201      	movs	r2, #1
 80036b0:	409a      	lsls	r2, r3
 80036b2:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <HAL_DMA_Abort_IT+0xd0>)
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d4:	490f      	ldr	r1, [pc, #60]	@ (8003714 <HAL_DMA_Abort_IT+0xcc>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80036e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2225      	movs	r2, #37	@ 0x25
 80036e8:	2101      	movs	r1, #1
 80036ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	@ 0x24
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	0010      	movs	r0, r2
 8003704:	4798      	blx	r3
    }
  }
  return status;
 8003706:	230f      	movs	r3, #15
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	781b      	ldrb	r3, [r3, #0]
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}
 8003714:	fffffeff 	.word	0xfffffeff
 8003718:	40020000 	.word	0x40020000

0800371c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003724:	4b55      	ldr	r3, [pc, #340]	@ (800387c <HAL_DMA_IRQHandler+0x160>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	221c      	movs	r2, #28
 8003738:	4013      	ands	r3, r2
 800373a:	2204      	movs	r2, #4
 800373c:	409a      	lsls	r2, r3
 800373e:	0013      	movs	r3, r2
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4013      	ands	r3, r2
 8003744:	d027      	beq.n	8003796 <HAL_DMA_IRQHandler+0x7a>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2204      	movs	r2, #4
 800374a:	4013      	ands	r3, r2
 800374c:	d023      	beq.n	8003796 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2220      	movs	r2, #32
 8003756:	4013      	ands	r3, r2
 8003758:	d107      	bne.n	800376a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2104      	movs	r1, #4
 8003766:	438a      	bics	r2, r1
 8003768:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800376a:	4b44      	ldr	r3, [pc, #272]	@ (800387c <HAL_DMA_IRQHandler+0x160>)
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	221c      	movs	r2, #28
 8003774:	4013      	ands	r3, r2
 8003776:	2204      	movs	r2, #4
 8003778:	409a      	lsls	r2, r3
 800377a:	4b40      	ldr	r3, [pc, #256]	@ (800387c <HAL_DMA_IRQHandler+0x160>)
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003784:	2b00      	cmp	r3, #0
 8003786:	d100      	bne.n	800378a <HAL_DMA_IRQHandler+0x6e>
 8003788:	e073      	b.n	8003872 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	0010      	movs	r0, r2
 8003792:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003794:	e06d      	b.n	8003872 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	221c      	movs	r2, #28
 800379c:	4013      	ands	r3, r2
 800379e:	2202      	movs	r2, #2
 80037a0:	409a      	lsls	r2, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	d02e      	beq.n	8003808 <HAL_DMA_IRQHandler+0xec>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d02a      	beq.n	8003808 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2220      	movs	r2, #32
 80037ba:	4013      	ands	r3, r2
 80037bc:	d10b      	bne.n	80037d6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	210a      	movs	r1, #10
 80037ca:	438a      	bics	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2225      	movs	r2, #37	@ 0x25
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80037d6:	4b29      	ldr	r3, [pc, #164]	@ (800387c <HAL_DMA_IRQHandler+0x160>)
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	221c      	movs	r2, #28
 80037e0:	4013      	ands	r3, r2
 80037e2:	2202      	movs	r2, #2
 80037e4:	409a      	lsls	r2, r3
 80037e6:	4b25      	ldr	r3, [pc, #148]	@ (800387c <HAL_DMA_IRQHandler+0x160>)
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d03a      	beq.n	8003872 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	0010      	movs	r0, r2
 8003804:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003806:	e034      	b.n	8003872 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	221c      	movs	r2, #28
 800380e:	4013      	ands	r3, r2
 8003810:	2208      	movs	r2, #8
 8003812:	409a      	lsls	r2, r3
 8003814:	0013      	movs	r3, r2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	d02b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x158>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2208      	movs	r2, #8
 8003820:	4013      	ands	r3, r2
 8003822:	d027      	beq.n	8003874 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	210e      	movs	r1, #14
 8003830:	438a      	bics	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003834:	4b11      	ldr	r3, [pc, #68]	@ (800387c <HAL_DMA_IRQHandler+0x160>)
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	221c      	movs	r2, #28
 800383e:	4013      	ands	r3, r2
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <HAL_DMA_IRQHandler+0x160>)
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2225      	movs	r2, #37	@ 0x25
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	@ 0x24
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	0010      	movs	r0, r2
 8003870:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46c0      	nop			@ (mov r8, r8)
}
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40020000 	.word	0x40020000

08003880 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80038aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80038bc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80038be:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <DMA_SetConfig+0x7c>)
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	221c      	movs	r2, #28
 80038c8:	4013      	ands	r3, r2
 80038ca:	2201      	movs	r2, #1
 80038cc:	409a      	lsls	r2, r3
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <DMA_SetConfig+0x7c>)
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d108      	bne.n	80038f6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038f4:	e007      	b.n	8003906 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	60da      	str	r2, [r3, #12]
}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	40020000 	.word	0x40020000

08003914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	4a10      	ldr	r2, [pc, #64]	@ (8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003924:	4694      	mov	ip, r2
 8003926:	4463      	add	r3, ip
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	001a      	movs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	001a      	movs	r2, r3
 8003936:	23ff      	movs	r3, #255	@ 0xff
 8003938:	4013      	ands	r3, r2
 800393a:	3b08      	subs	r3, #8
 800393c:	2114      	movs	r1, #20
 800393e:	0018      	movs	r0, r3
 8003940:	f7fc fbde 	bl	8000100 <__udivsi3>
 8003944:	0003      	movs	r3, r0
 8003946:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a07      	ldr	r2, [pc, #28]	@ (8003968 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800394c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	221f      	movs	r2, #31
 8003952:	4013      	ands	r3, r2
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800395c:	46c0      	nop			@ (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	10008200 	.word	0x10008200
 8003968:	40020880 	.word	0x40020880

0800396c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	223f      	movs	r2, #63	@ 0x3f
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003982:	4694      	mov	ip, r2
 8003984:	4463      	add	r3, ip
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	001a      	movs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a07      	ldr	r2, [pc, #28]	@ (80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3b01      	subs	r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	4013      	ands	r3, r2
 800399c:	2201      	movs	r2, #1
 800399e:	409a      	lsls	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80039a4:	46c0      	nop			@ (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b004      	add	sp, #16
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	1000823f 	.word	0x1000823f
 80039b0:	40020940 	.word	0x40020940

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c2:	e147      	b.n	8003c54 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4091      	lsls	r1, r2
 80039ce:	000a      	movs	r2, r1
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d100      	bne.n	80039dc <HAL_GPIO_Init+0x28>
 80039da:	e138      	b.n	8003c4e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2203      	movs	r2, #3
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x40>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	409a      	lsls	r2, r3
 8003a02:	0013      	movs	r3, r2
 8003a04:	43da      	mvns	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	409a      	lsls	r2, r3
 8003a16:	0013      	movs	r3, r2
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	0013      	movs	r3, r2
 8003a32:	43da      	mvns	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	2201      	movs	r2, #1
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
 8003a48:	0013      	movs	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d017      	beq.n	8003a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	0013      	movs	r3, r2
 8003a72:	43da      	mvns	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d123      	bne.n	8003ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	58d3      	ldr	r3, [r2, r3]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2207      	movs	r2, #7
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	43da      	mvns	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2107      	movs	r1, #7
 8003aca:	400b      	ands	r3, r1
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	0092      	lsls	r2, r2, #2
 8003ae2:	6939      	ldr	r1, [r7, #16]
 8003ae4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	409a      	lsls	r2, r3
 8003af4:	0013      	movs	r3, r2
 8003af6:	43da      	mvns	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	401a      	ands	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	23c0      	movs	r3, #192	@ 0xc0
 8003b20:	029b      	lsls	r3, r3, #10
 8003b22:	4013      	ands	r3, r2
 8003b24:	d100      	bne.n	8003b28 <HAL_GPIO_Init+0x174>
 8003b26:	e092      	b.n	8003c4e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b28:	4a50      	ldr	r2, [pc, #320]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	3318      	adds	r3, #24
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	589b      	ldr	r3, [r3, r2]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2203      	movs	r2, #3
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	220f      	movs	r2, #15
 8003b40:	409a      	lsls	r2, r3
 8003b42:	0013      	movs	r3, r2
 8003b44:	43da      	mvns	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	23a0      	movs	r3, #160	@ 0xa0
 8003b50:	05db      	lsls	r3, r3, #23
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d013      	beq.n	8003b7e <HAL_GPIO_Init+0x1ca>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a45      	ldr	r2, [pc, #276]	@ (8003c70 <HAL_GPIO_Init+0x2bc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00d      	beq.n	8003b7a <HAL_GPIO_Init+0x1c6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a44      	ldr	r2, [pc, #272]	@ (8003c74 <HAL_GPIO_Init+0x2c0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <HAL_GPIO_Init+0x1c2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a43      	ldr	r2, [pc, #268]	@ (8003c78 <HAL_GPIO_Init+0x2c4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_GPIO_Init+0x1be>
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x1cc>
 8003b72:	2305      	movs	r3, #5
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x1cc>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x1cc>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x1cc>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	2103      	movs	r1, #3
 8003b84:	400a      	ands	r2, r1
 8003b86:	00d2      	lsls	r2, r2, #3
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b90:	4936      	ldr	r1, [pc, #216]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3318      	adds	r3, #24
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9e:	4b33      	ldr	r3, [pc, #204]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	035b      	lsls	r3, r3, #13
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003bc8:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	039b      	lsls	r3, r3, #14
 8003be0:	4013      	ands	r3, r2
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bec:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003bf4:	2384      	movs	r3, #132	@ 0x84
 8003bf6:	58d3      	ldr	r3, [r2, r3]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c18:	4914      	ldr	r1, [pc, #80]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003c1a:	2284      	movs	r2, #132	@ 0x84
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c20:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	58d3      	ldr	r3, [r2, r3]
 8003c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	025b      	lsls	r3, r3, #9
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c46:	4909      	ldr	r1, [pc, #36]	@ (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003c48:	2280      	movs	r2, #128	@ 0x80
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	40da      	lsrs	r2, r3
 8003c5c:	1e13      	subs	r3, r2, #0
 8003c5e:	d000      	beq.n	8003c62 <HAL_GPIO_Init+0x2ae>
 8003c60:	e6b0      	b.n	80039c4 <HAL_GPIO_Init+0x10>
  }
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021800 	.word	0x40021800
 8003c70:	50000400 	.word	0x50000400
 8003c74:	50000800 	.word	0x50000800
 8003c78:	50000c00 	.word	0x50000c00

08003c7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c8a:	e0b4      	b.n	8003df6 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	409a      	lsls	r2, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d100      	bne.n	8003ca0 <HAL_GPIO_DeInit+0x24>
 8003c9e:	e0a7      	b.n	8003df0 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	589b      	ldr	r3, [r3, r2]
 8003cac:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	23a0      	movs	r3, #160	@ 0xa0
 8003cc4:	05db      	lsls	r3, r3, #23
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d013      	beq.n	8003cf2 <HAL_GPIO_DeInit+0x76>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a50      	ldr	r2, [pc, #320]	@ (8003e10 <HAL_GPIO_DeInit+0x194>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00d      	beq.n	8003cee <HAL_GPIO_DeInit+0x72>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e14 <HAL_GPIO_DeInit+0x198>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_DeInit+0x6e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e18 <HAL_GPIO_DeInit+0x19c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_GPIO_DeInit+0x6a>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_DeInit+0x78>
 8003ce6:	2305      	movs	r3, #5
 8003ce8:	e004      	b.n	8003cf4 <HAL_GPIO_DeInit+0x78>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_DeInit+0x78>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_DeInit+0x78>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	00d2      	lsls	r2, r2, #3
 8003cfc:	4093      	lsls	r3, r2
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d136      	bne.n	8003d72 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d04:	4a41      	ldr	r2, [pc, #260]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d06:	2380      	movs	r3, #128	@ 0x80
 8003d08:	58d3      	ldr	r3, [r2, r3]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	43d2      	mvns	r2, r2
 8003d0e:	493f      	ldr	r1, [pc, #252]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	2280      	movs	r2, #128	@ 0x80
 8003d14:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003d16:	4a3d      	ldr	r2, [pc, #244]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d18:	2384      	movs	r3, #132	@ 0x84
 8003d1a:	58d3      	ldr	r3, [r2, r3]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	43d2      	mvns	r2, r2
 8003d20:	493a      	ldr	r1, [pc, #232]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	2284      	movs	r2, #132	@ 0x84
 8003d26:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d28:	4b38      	ldr	r3, [pc, #224]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d32:	400a      	ands	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d36:	4b35      	ldr	r3, [pc, #212]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43d9      	mvns	r1, r3
 8003d3e:	4b33      	ldr	r3, [pc, #204]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d40:	400a      	ands	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003d54:	4a2d      	ldr	r2, [pc, #180]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	589a      	ldr	r2, [r3, r2]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	4829      	ldr	r0, [pc, #164]	@ (8003e0c <HAL_GPIO_DeInit+0x190>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	3318      	adds	r3, #24
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2103      	movs	r1, #3
 8003d7c:	4099      	lsls	r1, r3
 8003d7e:	000b      	movs	r3, r1
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3208      	adds	r2, #8
 8003d8e:	0092      	lsls	r2, r2, #2
 8003d90:	58d3      	ldr	r3, [r2, r3]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	2107      	movs	r1, #7
 8003d96:	400a      	ands	r2, r1
 8003d98:	0092      	lsls	r2, r2, #2
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	4091      	lsls	r1, r2
 8003d9e:	000a      	movs	r2, r1
 8003da0:	43d1      	mvns	r1, r2
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	08d2      	lsrs	r2, r2, #3
 8003da6:	4019      	ands	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3208      	adds	r2, #8
 8003dac:	0092      	lsls	r2, r2, #2
 8003dae:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	0052      	lsls	r2, r2, #1
 8003db8:	2103      	movs	r1, #3
 8003dba:	4091      	lsls	r1, r2
 8003dbc:	000a      	movs	r2, r1
 8003dbe:	43d2      	mvns	r2, r2
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4091      	lsls	r1, r2
 8003dd0:	000a      	movs	r2, r1
 8003dd2:	43d2      	mvns	r2, r2
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	0052      	lsls	r2, r2, #1
 8003de2:	2103      	movs	r1, #3
 8003de4:	4091      	lsls	r1, r2
 8003de6:	000a      	movs	r2, r1
 8003de8:	43d2      	mvns	r2, r2
 8003dea:	401a      	ands	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3301      	adds	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	40da      	lsrs	r2, r3
 8003dfc:	1e13      	subs	r3, r2, #0
 8003dfe:	d000      	beq.n	8003e02 <HAL_GPIO_DeInit+0x186>
 8003e00:	e744      	b.n	8003c8c <HAL_GPIO_DeInit+0x10>
  }
}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	46c0      	nop			@ (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b006      	add	sp, #24
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021800 	.word	0x40021800
 8003e10:	50000400 	.word	0x50000400
 8003e14:	50000800 	.word	0x50000800
 8003e18:	50000c00 	.word	0x50000c00

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	0008      	movs	r0, r1
 8003e26:	0011      	movs	r1, r2
 8003e28:	1cbb      	adds	r3, r7, #2
 8003e2a:	1c02      	adds	r2, r0, #0
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	1c7b      	adds	r3, r7, #1
 8003e30:	1c0a      	adds	r2, r1, #0
 8003e32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e34:	1c7b      	adds	r3, r7, #1
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e3c:	1cbb      	adds	r3, r7, #2
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e44:	e003      	b.n	8003e4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e46:	1cbb      	adds	r3, r7, #2
 8003e48:	881a      	ldrh	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	000a      	movs	r2, r1
 8003e60:	1cbb      	adds	r3, r7, #2
 8003e62:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e6a:	1cbb      	adds	r3, r7, #2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	041a      	lsls	r2, r3, #16
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	1cb9      	adds	r1, r7, #2
 8003e7a:	8809      	ldrh	r1, [r1, #0]
 8003e7c:	400b      	ands	r3, r1
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	619a      	str	r2, [r3, #24]
}
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b004      	add	sp, #16
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e08f      	b.n	8003fbe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2241      	movs	r2, #65	@ 0x41
 8003ea2:	5c9b      	ldrb	r3, [r3, r2]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2240      	movs	r2, #64	@ 0x40
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7fd fcdd 	bl	8001874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2241      	movs	r2, #65	@ 0x41
 8003ebe:	2124      	movs	r1, #36	@ 0x24
 8003ec0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	438a      	bics	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	493b      	ldr	r1, [pc, #236]	@ (8003fc8 <HAL_I2C_Init+0x13c>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4938      	ldr	r1, [pc, #224]	@ (8003fcc <HAL_I2C_Init+0x140>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d108      	bne.n	8003f0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2180      	movs	r1, #128	@ 0x80
 8003f02:	0209      	lsls	r1, r1, #8
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	e007      	b.n	8003f1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2184      	movs	r1, #132	@ 0x84
 8003f14:	0209      	lsls	r1, r1, #8
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d109      	bne.n	8003f36 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2180      	movs	r1, #128	@ 0x80
 8003f2e:	0109      	lsls	r1, r1, #4
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	e007      	b.n	8003f46 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4923      	ldr	r1, [pc, #140]	@ (8003fd0 <HAL_I2C_Init+0x144>)
 8003f42:	400a      	ands	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4920      	ldr	r1, [pc, #128]	@ (8003fd4 <HAL_I2C_Init+0x148>)
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	491a      	ldr	r1, [pc, #104]	@ (8003fcc <HAL_I2C_Init+0x140>)
 8003f62:	400a      	ands	r2, r1
 8003f64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69d9      	ldr	r1, [r3, #28]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2241      	movs	r2, #65	@ 0x41
 8003faa:	2120      	movs	r1, #32
 8003fac:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2242      	movs	r2, #66	@ 0x42
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	f0ffffff 	.word	0xf0ffffff
 8003fcc:	ffff7fff 	.word	0xffff7fff
 8003fd0:	fffff7ff 	.word	0xfffff7ff
 8003fd4:	02008000 	.word	0x02008000

08003fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2241      	movs	r2, #65	@ 0x41
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d138      	bne.n	8004060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2240      	movs	r2, #64	@ 0x40
 8003ff2:	5c9b      	ldrb	r3, [r3, r2]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e032      	b.n	8004062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2240      	movs	r2, #64	@ 0x40
 8004000:	2101      	movs	r1, #1
 8004002:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2241      	movs	r2, #65	@ 0x41
 8004008:	2124      	movs	r1, #36	@ 0x24
 800400a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2101      	movs	r1, #1
 8004018:	438a      	bics	r2, r1
 800401a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4911      	ldr	r1, [pc, #68]	@ (800406c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004028:	400a      	ands	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2241      	movs	r2, #65	@ 0x41
 8004050:	2120      	movs	r1, #32
 8004052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2240      	movs	r2, #64	@ 0x40
 8004058:	2100      	movs	r1, #0
 800405a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b002      	add	sp, #8
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	ffffefff 	.word	0xffffefff

08004070 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2241      	movs	r2, #65	@ 0x41
 800407e:	5c9b      	ldrb	r3, [r3, r2]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b20      	cmp	r3, #32
 8004084:	d139      	bne.n	80040fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2240      	movs	r2, #64	@ 0x40
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004090:	2302      	movs	r3, #2
 8004092:	e033      	b.n	80040fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2240      	movs	r2, #64	@ 0x40
 8004098:	2101      	movs	r1, #1
 800409a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2241      	movs	r2, #65	@ 0x41
 80040a0:	2124      	movs	r1, #36	@ 0x24
 80040a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	438a      	bics	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a11      	ldr	r2, [pc, #68]	@ (8004104 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2241      	movs	r2, #65	@ 0x41
 80040ea:	2120      	movs	r1, #32
 80040ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2240      	movs	r2, #64	@ 0x40
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b004      	add	sp, #16
 8004102:	bd80      	pop	{r7, pc}
 8004104:	fffff0ff 	.word	0xfffff0ff

08004108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004110:	4b19      	ldr	r3, [pc, #100]	@ (8004178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	@ (800417c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004116:	4013      	ands	r3, r2
 8004118:	0019      	movs	r1, r3
 800411a:	4b17      	ldr	r3, [pc, #92]	@ (8004178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	429a      	cmp	r2, r3
 800412a:	d11f      	bne.n	800416c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800412c:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	0013      	movs	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	189b      	adds	r3, r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4912      	ldr	r1, [pc, #72]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800413a:	0018      	movs	r0, r3
 800413c:	f7fb ffe0 	bl	8000100 <__udivsi3>
 8004140:	0003      	movs	r3, r0
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004146:	e008      	b.n	800415a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b01      	subs	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e001      	b.n	800415a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e009      	b.n	800416e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800415a:	4b07      	ldr	r3, [pc, #28]	@ (8004178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	401a      	ands	r2, r3
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	429a      	cmp	r2, r3
 800416a:	d0ed      	beq.n	8004148 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b004      	add	sp, #16
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	40007000 	.word	0x40007000
 800417c:	fffff9ff 	.word	0xfffff9ff
 8004180:	20000004 	.word	0x20000004
 8004184:	000f4240 	.word	0x000f4240

08004188 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800418c:	4b03      	ldr	r3, [pc, #12]	@ (800419c <LL_RCC_GetAPB1Prescaler+0x14>)
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	23e0      	movs	r3, #224	@ 0xe0
 8004192:	01db      	lsls	r3, r3, #7
 8004194:	4013      	ands	r3, r2
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000

080041a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e2f3      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	d100      	bne.n	80041be <HAL_RCC_OscConfig+0x1e>
 80041bc:	e07c      	b.n	80042b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041be:	4bc3      	ldr	r3, [pc, #780]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2238      	movs	r2, #56	@ 0x38
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c8:	4bc0      	ldr	r3, [pc, #768]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2203      	movs	r2, #3
 80041ce:	4013      	ands	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d102      	bne.n	80041de <HAL_RCC_OscConfig+0x3e>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d002      	beq.n	80041e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d10b      	bne.n	80041fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	4bb9      	ldr	r3, [pc, #740]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	4013      	ands	r3, r2
 80041ee:	d062      	beq.n	80042b6 <HAL_RCC_OscConfig+0x116>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d15e      	bne.n	80042b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e2ce      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	2380      	movs	r3, #128	@ 0x80
 8004202:	025b      	lsls	r3, r3, #9
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x78>
 8004208:	4bb0      	ldr	r3, [pc, #704]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4baf      	ldr	r3, [pc, #700]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	0249      	lsls	r1, r1, #9
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e020      	b.n	800425a <HAL_RCC_OscConfig+0xba>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	23a0      	movs	r3, #160	@ 0xa0
 800421e:	02db      	lsls	r3, r3, #11
 8004220:	429a      	cmp	r2, r3
 8004222:	d10e      	bne.n	8004242 <HAL_RCC_OscConfig+0xa2>
 8004224:	4ba9      	ldr	r3, [pc, #676]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4ba8      	ldr	r3, [pc, #672]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800422a:	2180      	movs	r1, #128	@ 0x80
 800422c:	02c9      	lsls	r1, r1, #11
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	4ba6      	ldr	r3, [pc, #664]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4ba5      	ldr	r3, [pc, #660]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004238:	2180      	movs	r1, #128	@ 0x80
 800423a:	0249      	lsls	r1, r1, #9
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e00b      	b.n	800425a <HAL_RCC_OscConfig+0xba>
 8004242:	4ba2      	ldr	r3, [pc, #648]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4ba1      	ldr	r3, [pc, #644]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004248:	49a1      	ldr	r1, [pc, #644]	@ (80044d0 <HAL_RCC_OscConfig+0x330>)
 800424a:	400a      	ands	r2, r1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	4b9f      	ldr	r3, [pc, #636]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b9e      	ldr	r3, [pc, #632]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004254:	499f      	ldr	r1, [pc, #636]	@ (80044d4 <HAL_RCC_OscConfig+0x334>)
 8004256:	400a      	ands	r2, r1
 8004258:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d014      	beq.n	800428c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7fd fdfb 	bl	8001e5c <HAL_GetTick>
 8004266:	0003      	movs	r3, r0
 8004268:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fdf6 	bl	8001e5c <HAL_GetTick>
 8004270:	0002      	movs	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	@ 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e28d      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427e:	4b93      	ldr	r3, [pc, #588]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	2380      	movs	r3, #128	@ 0x80
 8004284:	029b      	lsls	r3, r3, #10
 8004286:	4013      	ands	r3, r2
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xcc>
 800428a:	e015      	b.n	80042b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fde6 	bl	8001e5c <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004296:	f7fd fde1 	bl	8001e5c <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b64      	cmp	r3, #100	@ 0x64
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e278      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a8:	4b88      	ldr	r3, [pc, #544]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	2380      	movs	r3, #128	@ 0x80
 80042ae:	029b      	lsls	r3, r3, #10
 80042b0:	4013      	ands	r3, r2
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0xf6>
 80042b4:	e000      	b.n	80042b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2202      	movs	r2, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	d100      	bne.n	80042c4 <HAL_RCC_OscConfig+0x124>
 80042c2:	e099      	b.n	80043f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c4:	4b81      	ldr	r3, [pc, #516]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2238      	movs	r2, #56	@ 0x38
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ce:	4b7f      	ldr	r3, [pc, #508]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2203      	movs	r2, #3
 80042d4:	4013      	ands	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d102      	bne.n	80042e4 <HAL_RCC_OscConfig+0x144>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d002      	beq.n	80042ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d135      	bne.n	8004356 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ea:	4b78      	ldr	r3, [pc, #480]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4013      	ands	r3, r2
 80042f4:	d005      	beq.n	8004302 <HAL_RCC_OscConfig+0x162>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e24b      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	4b72      	ldr	r3, [pc, #456]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4a74      	ldr	r2, [pc, #464]	@ (80044d8 <HAL_RCC_OscConfig+0x338>)
 8004308:	4013      	ands	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	021a      	lsls	r2, r3, #8
 8004312:	4b6e      	ldr	r3, [pc, #440]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d112      	bne.n	8004344 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800431e:	4b6b      	ldr	r3, [pc, #428]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6e      	ldr	r2, [pc, #440]	@ (80044dc <HAL_RCC_OscConfig+0x33c>)
 8004324:	4013      	ands	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	4b67      	ldr	r3, [pc, #412]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800432e:	430a      	orrs	r2, r1
 8004330:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004332:	4b66      	ldr	r3, [pc, #408]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	0adb      	lsrs	r3, r3, #11
 8004338:	2207      	movs	r2, #7
 800433a:	4013      	ands	r3, r2
 800433c:	4a68      	ldr	r2, [pc, #416]	@ (80044e0 <HAL_RCC_OscConfig+0x340>)
 800433e:	40da      	lsrs	r2, r3
 8004340:	4b68      	ldr	r3, [pc, #416]	@ (80044e4 <HAL_RCC_OscConfig+0x344>)
 8004342:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004344:	4b68      	ldr	r3, [pc, #416]	@ (80044e8 <HAL_RCC_OscConfig+0x348>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0018      	movs	r0, r3
 800434a:	f7fd fd2b 	bl	8001da4 <HAL_InitTick>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d051      	beq.n	80043f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e221      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d030      	beq.n	80043c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800435e:	4b5b      	ldr	r3, [pc, #364]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5e      	ldr	r2, [pc, #376]	@ (80044dc <HAL_RCC_OscConfig+0x33c>)
 8004364:	4013      	ands	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b57      	ldr	r3, [pc, #348]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004372:	4b56      	ldr	r3, [pc, #344]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b55      	ldr	r3, [pc, #340]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004378:	2180      	movs	r1, #128	@ 0x80
 800437a:	0049      	lsls	r1, r1, #1
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd fd6c 	bl	8001e5c <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438a:	f7fd fd67 	bl	8001e5c <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1fe      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800439c:	4b4b      	ldr	r3, [pc, #300]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2380      	movs	r3, #128	@ 0x80
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4013      	ands	r3, r2
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b48      	ldr	r3, [pc, #288]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a4a      	ldr	r2, [pc, #296]	@ (80044d8 <HAL_RCC_OscConfig+0x338>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	4b44      	ldr	r3, [pc, #272]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043c0:	4b42      	ldr	r3, [pc, #264]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b41      	ldr	r3, [pc, #260]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80043c6:	4949      	ldr	r1, [pc, #292]	@ (80044ec <HAL_RCC_OscConfig+0x34c>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fd46 	bl	8001e5c <HAL_GetTick>
 80043d0:	0003      	movs	r3, r0
 80043d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d6:	f7fd fd41 	bl	8001e5c <HAL_GetTick>
 80043da:	0002      	movs	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e1d8      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e8:	4b38      	ldr	r3, [pc, #224]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	2380      	movs	r3, #128	@ 0x80
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4013      	ands	r3, r2
 80043f2:	d1f0      	bne.n	80043d6 <HAL_RCC_OscConfig+0x236>
 80043f4:	e000      	b.n	80043f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2208      	movs	r2, #8
 80043fe:	4013      	ands	r3, r2
 8004400:	d047      	beq.n	8004492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004402:	4b32      	ldr	r3, [pc, #200]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2238      	movs	r2, #56	@ 0x38
 8004408:	4013      	ands	r3, r2
 800440a:	2b18      	cmp	r3, #24
 800440c:	d10a      	bne.n	8004424 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800440e:	4b2f      	ldr	r3, [pc, #188]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004412:	2202      	movs	r2, #2
 8004414:	4013      	ands	r3, r2
 8004416:	d03c      	beq.n	8004492 <HAL_RCC_OscConfig+0x2f2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d138      	bne.n	8004492 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e1ba      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d019      	beq.n	8004460 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800442c:	4b27      	ldr	r3, [pc, #156]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800442e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004430:	4b26      	ldr	r3, [pc, #152]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004432:	2101      	movs	r1, #1
 8004434:	430a      	orrs	r2, r1
 8004436:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fd10 	bl	8001e5c <HAL_GetTick>
 800443c:	0003      	movs	r3, r0
 800443e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004442:	f7fd fd0b 	bl	8001e5c <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1a2      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004458:	2202      	movs	r2, #2
 800445a:	4013      	ands	r3, r2
 800445c:	d0f1      	beq.n	8004442 <HAL_RCC_OscConfig+0x2a2>
 800445e:	e018      	b.n	8004492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004460:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004462:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004464:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 8004466:	2101      	movs	r1, #1
 8004468:	438a      	bics	r2, r1
 800446a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fcf6 	bl	8001e5c <HAL_GetTick>
 8004470:	0003      	movs	r3, r0
 8004472:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004476:	f7fd fcf1 	bl	8001e5c <HAL_GetTick>
 800447a:	0002      	movs	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e188      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004488:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 800448a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448c:	2202      	movs	r2, #2
 800448e:	4013      	ands	r3, r2
 8004490:	d1f1      	bne.n	8004476 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2204      	movs	r2, #4
 8004498:	4013      	ands	r3, r2
 800449a:	d100      	bne.n	800449e <HAL_RCC_OscConfig+0x2fe>
 800449c:	e0c6      	b.n	800462c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449e:	231f      	movs	r3, #31
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044a6:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2238      	movs	r2, #56	@ 0x38
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d11e      	bne.n	80044f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_RCC_OscConfig+0x32c>)
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	2202      	movs	r2, #2
 80044b8:	4013      	ands	r3, r2
 80044ba:	d100      	bne.n	80044be <HAL_RCC_OscConfig+0x31e>
 80044bc:	e0b6      	b.n	800462c <HAL_RCC_OscConfig+0x48c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d000      	beq.n	80044c8 <HAL_RCC_OscConfig+0x328>
 80044c6:	e0b1      	b.n	800462c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e166      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
 80044cc:	40021000 	.word	0x40021000
 80044d0:	fffeffff 	.word	0xfffeffff
 80044d4:	fffbffff 	.word	0xfffbffff
 80044d8:	ffff80ff 	.word	0xffff80ff
 80044dc:	ffffc7ff 	.word	0xffffc7ff
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	20000004 	.word	0x20000004
 80044e8:	20000008 	.word	0x20000008
 80044ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044f0:	4bac      	ldr	r3, [pc, #688]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80044f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	055b      	lsls	r3, r3, #21
 80044f8:	4013      	ands	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_OscConfig+0x360>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_RCC_OscConfig+0x362>
 8004500:	2300      	movs	r3, #0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d011      	beq.n	800452a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4ba7      	ldr	r3, [pc, #668]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004508:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800450a:	4ba6      	ldr	r3, [pc, #664]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800450c:	2180      	movs	r1, #128	@ 0x80
 800450e:	0549      	lsls	r1, r1, #21
 8004510:	430a      	orrs	r2, r1
 8004512:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004514:	4ba3      	ldr	r3, [pc, #652]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004516:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	055b      	lsls	r3, r3, #21
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004522:	231f      	movs	r3, #31
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452a:	4b9f      	ldr	r3, [pc, #636]	@ (80047a8 <HAL_RCC_OscConfig+0x608>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	2380      	movs	r3, #128	@ 0x80
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4013      	ands	r3, r2
 8004534:	d11a      	bne.n	800456c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004536:	4b9c      	ldr	r3, [pc, #624]	@ (80047a8 <HAL_RCC_OscConfig+0x608>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b9b      	ldr	r3, [pc, #620]	@ (80047a8 <HAL_RCC_OscConfig+0x608>)
 800453c:	2180      	movs	r1, #128	@ 0x80
 800453e:	0049      	lsls	r1, r1, #1
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004544:	f7fd fc8a 	bl	8001e5c <HAL_GetTick>
 8004548:	0003      	movs	r3, r0
 800454a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454e:	f7fd fc85 	bl	8001e5c <HAL_GetTick>
 8004552:	0002      	movs	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e11c      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004560:	4b91      	ldr	r3, [pc, #580]	@ (80047a8 <HAL_RCC_OscConfig+0x608>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2380      	movs	r3, #128	@ 0x80
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	4013      	ands	r3, r2
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <HAL_RCC_OscConfig+0x3e2>
 8004574:	4b8b      	ldr	r3, [pc, #556]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004576:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004578:	4b8a      	ldr	r3, [pc, #552]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800457a:	2101      	movs	r1, #1
 800457c:	430a      	orrs	r2, r1
 800457e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004580:	e01c      	b.n	80045bc <HAL_RCC_OscConfig+0x41c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b05      	cmp	r3, #5
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x404>
 800458a:	4b86      	ldr	r3, [pc, #536]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800458c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800458e:	4b85      	ldr	r3, [pc, #532]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004590:	2104      	movs	r1, #4
 8004592:	430a      	orrs	r2, r1
 8004594:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004596:	4b83      	ldr	r3, [pc, #524]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004598:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800459a:	4b82      	ldr	r3, [pc, #520]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800459c:	2101      	movs	r1, #1
 800459e:	430a      	orrs	r2, r1
 80045a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0x41c>
 80045a4:	4b7f      	ldr	r3, [pc, #508]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80045a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045a8:	4b7e      	ldr	r3, [pc, #504]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80045aa:	2101      	movs	r1, #1
 80045ac:	438a      	bics	r2, r1
 80045ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045b0:	4b7c      	ldr	r3, [pc, #496]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80045b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045b4:	4b7b      	ldr	r3, [pc, #492]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80045b6:	2104      	movs	r1, #4
 80045b8:	438a      	bics	r2, r1
 80045ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d014      	beq.n	80045ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fc4a 	bl	8001e5c <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045cc:	e009      	b.n	80045e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7fd fc45 	bl	8001e5c <HAL_GetTick>
 80045d2:	0002      	movs	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	4a74      	ldr	r2, [pc, #464]	@ (80047ac <HAL_RCC_OscConfig+0x60c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0db      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	2202      	movs	r2, #2
 80045e8:	4013      	ands	r3, r2
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x42e>
 80045ec:	e013      	b.n	8004616 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fd fc35 	bl	8001e5c <HAL_GetTick>
 80045f2:	0003      	movs	r3, r0
 80045f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f6:	e009      	b.n	800460c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd fc30 	bl	8001e5c <HAL_GetTick>
 80045fc:	0002      	movs	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	4a6a      	ldr	r2, [pc, #424]	@ (80047ac <HAL_RCC_OscConfig+0x60c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e0c6      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800460c:	4b65      	ldr	r3, [pc, #404]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	2202      	movs	r2, #2
 8004612:	4013      	ands	r3, r2
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004616:	231f      	movs	r3, #31
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d105      	bne.n	800462c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004620:	4b60      	ldr	r3, [pc, #384]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004624:	4b5f      	ldr	r3, [pc, #380]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004626:	4962      	ldr	r1, [pc, #392]	@ (80047b0 <HAL_RCC_OscConfig+0x610>)
 8004628:	400a      	ands	r2, r1
 800462a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d100      	bne.n	8004636 <HAL_RCC_OscConfig+0x496>
 8004634:	e0b0      	b.n	8004798 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004636:	4b5b      	ldr	r3, [pc, #364]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2238      	movs	r2, #56	@ 0x38
 800463c:	4013      	ands	r3, r2
 800463e:	2b10      	cmp	r3, #16
 8004640:	d100      	bne.n	8004644 <HAL_RCC_OscConfig+0x4a4>
 8004642:	e078      	b.n	8004736 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d153      	bne.n	80046f4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464c:	4b55      	ldr	r3, [pc, #340]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b54      	ldr	r3, [pc, #336]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004652:	4958      	ldr	r1, [pc, #352]	@ (80047b4 <HAL_RCC_OscConfig+0x614>)
 8004654:	400a      	ands	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd fc00 	bl	8001e5c <HAL_GetTick>
 800465c:	0003      	movs	r3, r0
 800465e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004662:	f7fd fbfb 	bl	8001e5c <HAL_GetTick>
 8004666:	0002      	movs	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e092      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	4b4b      	ldr	r3, [pc, #300]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	049b      	lsls	r3, r3, #18
 800467c:	4013      	ands	r3, r2
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004680:	4b48      	ldr	r3, [pc, #288]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a4c      	ldr	r2, [pc, #304]	@ (80047b8 <HAL_RCC_OscConfig+0x618>)
 8004686:	4013      	ands	r3, r2
 8004688:	0019      	movs	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	431a      	orrs	r2, r3
 80046a8:	4b3e      	ldr	r3, [pc, #248]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046aa:	430a      	orrs	r2, r1
 80046ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ae:	4b3d      	ldr	r3, [pc, #244]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b3c      	ldr	r3, [pc, #240]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046b4:	2180      	movs	r1, #128	@ 0x80
 80046b6:	0449      	lsls	r1, r1, #17
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046bc:	4b39      	ldr	r3, [pc, #228]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	4b38      	ldr	r3, [pc, #224]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046c2:	2180      	movs	r1, #128	@ 0x80
 80046c4:	0549      	lsls	r1, r1, #21
 80046c6:	430a      	orrs	r2, r1
 80046c8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fbc7 	bl	8001e5c <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd fbc2 	bl	8001e5c <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e059      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	4b2f      	ldr	r3, [pc, #188]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2380      	movs	r3, #128	@ 0x80
 80046ec:	049b      	lsls	r3, r3, #18
 80046ee:	4013      	ands	r3, r2
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x534>
 80046f2:	e051      	b.n	8004798 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f4:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b2a      	ldr	r3, [pc, #168]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 80046fa:	492e      	ldr	r1, [pc, #184]	@ (80047b4 <HAL_RCC_OscConfig+0x614>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fbac 	bl	8001e5c <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fd fba7 	bl	8001e5c <HAL_GetTick>
 800470e:	0002      	movs	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e03e      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471c:	4b21      	ldr	r3, [pc, #132]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2380      	movs	r3, #128	@ 0x80
 8004722:	049b      	lsls	r3, r3, #18
 8004724:	4013      	ands	r3, r2
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004728:	4b1e      	ldr	r3, [pc, #120]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	4b1d      	ldr	r3, [pc, #116]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 800472e:	4923      	ldr	r1, [pc, #140]	@ (80047bc <HAL_RCC_OscConfig+0x61c>)
 8004730:	400a      	ands	r2, r1
 8004732:	60da      	str	r2, [r3, #12]
 8004734:	e030      	b.n	8004798 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e02b      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004742:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <HAL_RCC_OscConfig+0x604>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2203      	movs	r2, #3
 800474c:	401a      	ands	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	429a      	cmp	r2, r3
 8004754:	d11e      	bne.n	8004794 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2270      	movs	r2, #112	@ 0x70
 800475a:	401a      	ands	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d117      	bne.n	8004794 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	23fe      	movs	r3, #254	@ 0xfe
 8004768:	01db      	lsls	r3, r3, #7
 800476a:	401a      	ands	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d10e      	bne.n	8004794 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	23f8      	movs	r3, #248	@ 0xf8
 800477a:	039b      	lsls	r3, r3, #14
 800477c:	401a      	ands	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d106      	bne.n	8004794 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0f5b      	lsrs	r3, r3, #29
 800478a:	075a      	lsls	r2, r3, #29
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b008      	add	sp, #32
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40007000 	.word	0x40007000
 80047ac:	00001388 	.word	0x00001388
 80047b0:	efffffff 	.word	0xefffffff
 80047b4:	feffffff 	.word	0xfeffffff
 80047b8:	1fc1808c 	.word	0x1fc1808c
 80047bc:	effefffc 	.word	0xeffefffc

080047c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0e9      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b76      	ldr	r3, [pc, #472]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2207      	movs	r2, #7
 80047da:	4013      	ands	r3, r2
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d91e      	bls.n	8004820 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b73      	ldr	r3, [pc, #460]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2207      	movs	r2, #7
 80047e8:	4393      	bics	r3, r2
 80047ea:	0019      	movs	r1, r3
 80047ec:	4b70      	ldr	r3, [pc, #448]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047f4:	f7fd fb32 	bl	8001e5c <HAL_GetTick>
 80047f8:	0003      	movs	r3, r0
 80047fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047fc:	e009      	b.n	8004812 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fe:	f7fd fb2d 	bl	8001e5c <HAL_GetTick>
 8004802:	0002      	movs	r2, r0
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	4a6a      	ldr	r2, [pc, #424]	@ (80049b4 <HAL_RCC_ClockConfig+0x1f4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0ca      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004812:	4b67      	ldr	r3, [pc, #412]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2207      	movs	r2, #7
 8004818:	4013      	ands	r3, r2
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d1ee      	bne.n	80047fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2202      	movs	r2, #2
 8004826:	4013      	ands	r3, r2
 8004828:	d015      	beq.n	8004856 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2204      	movs	r2, #4
 8004830:	4013      	ands	r3, r2
 8004832:	d006      	beq.n	8004842 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004834:	4b60      	ldr	r3, [pc, #384]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	4b5f      	ldr	r3, [pc, #380]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 800483a:	21e0      	movs	r1, #224	@ 0xe0
 800483c:	01c9      	lsls	r1, r1, #7
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004842:	4b5d      	ldr	r3, [pc, #372]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4a5d      	ldr	r2, [pc, #372]	@ (80049bc <HAL_RCC_ClockConfig+0x1fc>)
 8004848:	4013      	ands	r3, r2
 800484a:	0019      	movs	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	4b59      	ldr	r3, [pc, #356]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	4013      	ands	r3, r2
 800485e:	d057      	beq.n	8004910 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d107      	bne.n	8004878 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004868:	4b53      	ldr	r3, [pc, #332]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	029b      	lsls	r3, r3, #10
 8004870:	4013      	ands	r3, r2
 8004872:	d12b      	bne.n	80048cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e097      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d107      	bne.n	8004890 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004880:	4b4d      	ldr	r3, [pc, #308]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	049b      	lsls	r3, r3, #18
 8004888:	4013      	ands	r3, r2
 800488a:	d11f      	bne.n	80048cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e08b      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004898:	4b47      	ldr	r3, [pc, #284]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4013      	ands	r3, r2
 80048a2:	d113      	bne.n	80048cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e07f      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d106      	bne.n	80048be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b0:	4b41      	ldr	r3, [pc, #260]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 80048b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b4:	2202      	movs	r2, #2
 80048b6:	4013      	ands	r3, r2
 80048b8:	d108      	bne.n	80048cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e074      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048be:	4b3e      	ldr	r3, [pc, #248]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 80048c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c2:	2202      	movs	r2, #2
 80048c4:	4013      	ands	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e06d      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048cc:	4b3a      	ldr	r3, [pc, #232]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2207      	movs	r2, #7
 80048d2:	4393      	bics	r3, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fd fabc 	bl	8001e5c <HAL_GetTick>
 80048e4:	0003      	movs	r3, r0
 80048e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e8:	e009      	b.n	80048fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ea:	f7fd fab7 	bl	8001e5c <HAL_GetTick>
 80048ee:	0002      	movs	r2, r0
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	4a2f      	ldr	r2, [pc, #188]	@ (80049b4 <HAL_RCC_ClockConfig+0x1f4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e054      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	4b2e      	ldr	r3, [pc, #184]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2238      	movs	r2, #56	@ 0x38
 8004904:	401a      	ands	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	429a      	cmp	r2, r3
 800490e:	d1ec      	bne.n	80048ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004910:	4b27      	ldr	r3, [pc, #156]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2207      	movs	r2, #7
 8004916:	4013      	ands	r3, r2
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d21e      	bcs.n	800495c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b24      	ldr	r3, [pc, #144]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2207      	movs	r2, #7
 8004924:	4393      	bics	r3, r2
 8004926:	0019      	movs	r1, r3
 8004928:	4b21      	ldr	r3, [pc, #132]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004930:	f7fd fa94 	bl	8001e5c <HAL_GetTick>
 8004934:	0003      	movs	r3, r0
 8004936:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004938:	e009      	b.n	800494e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493a:	f7fd fa8f 	bl	8001e5c <HAL_GetTick>
 800493e:	0002      	movs	r2, r0
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e02c      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800494e:	4b18      	ldr	r3, [pc, #96]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2207      	movs	r2, #7
 8004954:	4013      	ands	r3, r2
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d1ee      	bne.n	800493a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2204      	movs	r2, #4
 8004962:	4013      	ands	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004966:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4a15      	ldr	r2, [pc, #84]	@ (80049c0 <HAL_RCC_ClockConfig+0x200>)
 800496c:	4013      	ands	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800497a:	f000 f829 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800497e:	0001      	movs	r1, r0
 8004980:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	220f      	movs	r2, #15
 8004988:	401a      	ands	r2, r3
 800498a:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <HAL_RCC_ClockConfig+0x204>)
 800498c:	0092      	lsls	r2, r2, #2
 800498e:	58d3      	ldr	r3, [r2, r3]
 8004990:	221f      	movs	r2, #31
 8004992:	4013      	ands	r3, r2
 8004994:	000a      	movs	r2, r1
 8004996:	40da      	lsrs	r2, r3
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_RCC_ClockConfig+0x208>)
 800499a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800499c:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <HAL_RCC_ClockConfig+0x20c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fd f9ff 	bl	8001da4 <HAL_InitTick>
 80049a6:	0003      	movs	r3, r0
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40022000 	.word	0x40022000
 80049b4:	00001388 	.word	0x00001388
 80049b8:	40021000 	.word	0x40021000
 80049bc:	fffff0ff 	.word	0xfffff0ff
 80049c0:	ffff8fff 	.word	0xffff8fff
 80049c4:	08007cd4 	.word	0x08007cd4
 80049c8:	20000004 	.word	0x20000004
 80049cc:	20000008 	.word	0x20000008

080049d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2238      	movs	r2, #56	@ 0x38
 80049dc:	4013      	ands	r3, r2
 80049de:	d10f      	bne.n	8004a00 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80049e0:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	0adb      	lsrs	r3, r3, #11
 80049e6:	2207      	movs	r2, #7
 80049e8:	4013      	ands	r3, r2
 80049ea:	2201      	movs	r2, #1
 80049ec:	409a      	lsls	r2, r3
 80049ee:	0013      	movs	r3, r2
 80049f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	4835      	ldr	r0, [pc, #212]	@ (8004acc <HAL_RCC_GetSysClockFreq+0xfc>)
 80049f6:	f7fb fb83 	bl	8000100 <__udivsi3>
 80049fa:	0003      	movs	r3, r0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	e05d      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a00:	4b31      	ldr	r3, [pc, #196]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2238      	movs	r2, #56	@ 0x38
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a0c:	4b30      	ldr	r3, [pc, #192]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	e054      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2238      	movs	r2, #56	@ 0x38
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d138      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2203      	movs	r2, #3
 8004a24:	4013      	ands	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a28:	4b27      	ldr	r3, [pc, #156]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	2207      	movs	r2, #7
 8004a30:	4013      	ands	r3, r2
 8004a32:	3301      	adds	r3, #1
 8004a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4824      	ldr	r0, [pc, #144]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a40:	f7fb fb5e 	bl	8000100 <__udivsi3>
 8004a44:	0003      	movs	r3, r0
 8004a46:	0019      	movs	r1, r3
 8004a48:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	227f      	movs	r2, #127	@ 0x7f
 8004a50:	4013      	ands	r3, r2
 8004a52:	434b      	muls	r3, r1
 8004a54:	617b      	str	r3, [r7, #20]
        break;
 8004a56:	e00d      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	481c      	ldr	r0, [pc, #112]	@ (8004acc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a5c:	f7fb fb50 	bl	8000100 <__udivsi3>
 8004a60:	0003      	movs	r3, r0
 8004a62:	0019      	movs	r1, r3
 8004a64:	4b18      	ldr	r3, [pc, #96]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	227f      	movs	r2, #127	@ 0x7f
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	434b      	muls	r3, r1
 8004a70:	617b      	str	r3, [r7, #20]
        break;
 8004a72:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a74:	4b14      	ldr	r3, [pc, #80]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	0f5b      	lsrs	r3, r3, #29
 8004a7a:	2207      	movs	r2, #7
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	3301      	adds	r3, #1
 8004a80:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	6978      	ldr	r0, [r7, #20]
 8004a86:	f7fb fb3b 	bl	8000100 <__udivsi3>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	e015      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2238      	movs	r2, #56	@ 0x38
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d103      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a9c:	2380      	movs	r3, #128	@ 0x80
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	e00b      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004aa4:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2238      	movs	r2, #56	@ 0x38
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b18      	cmp	r3, #24
 8004aae:	d103      	bne.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ab0:	23fa      	movs	r3, #250	@ 0xfa
 8004ab2:	01db      	lsls	r3, r3, #7
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e001      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004abc:	693b      	ldr	r3, [r7, #16]
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b006      	add	sp, #24
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200

08004ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad8:	4b02      	ldr	r3, [pc, #8]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b5b0      	push	{r4, r5, r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004aec:	f7ff fff2 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004af0:	0004      	movs	r4, r0
 8004af2:	f7ff fb49 	bl	8004188 <LL_RCC_GetAPB1Prescaler>
 8004af6:	0003      	movs	r3, r0
 8004af8:	0b1a      	lsrs	r2, r3, #12
 8004afa:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004afc:	0092      	lsls	r2, r2, #2
 8004afe:	58d3      	ldr	r3, [r2, r3]
 8004b00:	221f      	movs	r2, #31
 8004b02:	4013      	ands	r3, r2
 8004b04:	40dc      	lsrs	r4, r3
 8004b06:	0023      	movs	r3, r4
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	08007d14 	.word	0x08007d14

08004b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b1c:	2313      	movs	r3, #19
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b24:	2312      	movs	r3, #18
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	029b      	lsls	r3, r3, #10
 8004b34:	4013      	ands	r3, r2
 8004b36:	d100      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b38:	e0a3      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3a:	2011      	movs	r0, #17
 8004b3c:	183b      	adds	r3, r7, r0
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b42:	4b7f      	ldr	r3, [pc, #508]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	055b      	lsls	r3, r3, #21
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d110      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b52:	4b7b      	ldr	r3, [pc, #492]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b54:	2180      	movs	r1, #128	@ 0x80
 8004b56:	0549      	lsls	r1, r1, #21
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b5c:	4b78      	ldr	r3, [pc, #480]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b60:	2380      	movs	r3, #128	@ 0x80
 8004b62:	055b      	lsls	r3, r3, #21
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6a:	183b      	adds	r3, r7, r0
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b70:	4b74      	ldr	r3, [pc, #464]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b73      	ldr	r3, [pc, #460]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b76:	2180      	movs	r1, #128	@ 0x80
 8004b78:	0049      	lsls	r1, r1, #1
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b7e:	f7fd f96d 	bl	8001e5c <HAL_GetTick>
 8004b82:	0003      	movs	r3, r0
 8004b84:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b88:	f7fd f968 	bl	8001e5c <HAL_GetTick>
 8004b8c:	0002      	movs	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d904      	bls.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004b96:	2313      	movs	r3, #19
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	701a      	strb	r2, [r3, #0]
        break;
 8004b9e:	e005      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ba0:	4b68      	ldr	r3, [pc, #416]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d0ed      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004bac:	2313      	movs	r3, #19
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d154      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bb6:	4b62      	ldr	r3, [pc, #392]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bba:	23c0      	movs	r3, #192	@ 0xc0
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d019      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d014      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bdc:	4b58      	ldr	r3, [pc, #352]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004be0:	4b57      	ldr	r3, [pc, #348]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004be2:	2180      	movs	r1, #128	@ 0x80
 8004be4:	0249      	lsls	r1, r1, #9
 8004be6:	430a      	orrs	r2, r1
 8004be8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bea:	4b55      	ldr	r3, [pc, #340]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bee:	4b54      	ldr	r3, [pc, #336]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bf0:	4956      	ldr	r1, [pc, #344]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf6:	4b52      	ldr	r3, [pc, #328]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	4013      	ands	r3, r2
 8004c02:	d016      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fd f92a 	bl	8001e5c <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	e00c      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fd f925 	bl	8001e5c <HAL_GetTick>
 8004c12:	0002      	movs	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	4a4d      	ldr	r2, [pc, #308]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d904      	bls.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c1e:	2313      	movs	r3, #19
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	2203      	movs	r2, #3
 8004c24:	701a      	strb	r2, [r3, #0]
            break;
 8004c26:	e004      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c28:	4b45      	ldr	r3, [pc, #276]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d0ed      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c32:	2313      	movs	r3, #19
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3c:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c40:	4a41      	ldr	r2, [pc, #260]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c50:	e00c      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c52:	2312      	movs	r3, #18
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	2213      	movs	r2, #19
 8004c58:	18ba      	adds	r2, r7, r2
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e005      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	2312      	movs	r3, #18
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2213      	movs	r2, #19
 8004c66:	18ba      	adds	r2, r7, r2
 8004c68:	7812      	ldrb	r2, [r2, #0]
 8004c6a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c6c:	2311      	movs	r3, #17
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c76:	4b32      	ldr	r3, [pc, #200]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c7a:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c7c:	4935      	ldr	r1, [pc, #212]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c7e:	400a      	ands	r2, r1
 8004c80:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2201      	movs	r2, #1
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c90:	2203      	movs	r2, #3
 8004c92:	4393      	bics	r3, r2
 8004c94:	0019      	movs	r1, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	4b29      	ldr	r3, [pc, #164]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004caa:	4b25      	ldr	r3, [pc, #148]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cae:	4a2a      	ldr	r2, [pc, #168]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	2380      	movs	r3, #128	@ 0x80
 8004cc4:	01db      	lsls	r3, r3, #7
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d015      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cca:	4b1d      	ldr	r3, [pc, #116]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	0899      	lsrs	r1, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	05db      	lsls	r3, r3, #23
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cee:	2180      	movs	r1, #128	@ 0x80
 8004cf0:	0249      	lsls	r1, r1, #9
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d016      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004d02:	4b0f      	ldr	r3, [pc, #60]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	4a15      	ldr	r2, [pc, #84]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d12:	430a      	orrs	r2, r1
 8004d14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	01db      	lsls	r3, r3, #7
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d106      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d22:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d28:	2180      	movs	r1, #128	@ 0x80
 8004d2a:	0249      	lsls	r1, r1, #9
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d30:	2312      	movs	r3, #18
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	781b      	ldrb	r3, [r3, #0]
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b006      	add	sp, #24
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40007000 	.word	0x40007000
 8004d48:	fffffcff 	.word	0xfffffcff
 8004d4c:	fffeffff 	.word	0xfffeffff
 8004d50:	00001388 	.word	0x00001388
 8004d54:	efffffff 	.word	0xefffffff
 8004d58:	ffffcfff 	.word	0xffffcfff
 8004d5c:	ffff3fff 	.word	0xffff3fff

08004d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e04a      	b.n	8004e08 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223d      	movs	r2, #61	@ 0x3d
 8004d76:	5c9b      	ldrb	r3, [r3, r2]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	223c      	movs	r2, #60	@ 0x3c
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7fc fdbf 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223d      	movs	r2, #61	@ 0x3d
 8004d92:	2102      	movs	r1, #2
 8004d94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	0019      	movs	r1, r3
 8004da0:	0010      	movs	r0, r2
 8004da2:	f000 fcff 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2248      	movs	r2, #72	@ 0x48
 8004daa:	2101      	movs	r1, #1
 8004dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	223e      	movs	r2, #62	@ 0x3e
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	223f      	movs	r2, #63	@ 0x3f
 8004dba:	2101      	movs	r1, #1
 8004dbc:	5499      	strb	r1, [r3, r2]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2240      	movs	r2, #64	@ 0x40
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	5499      	strb	r1, [r3, r2]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2241      	movs	r2, #65	@ 0x41
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2242      	movs	r2, #66	@ 0x42
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	5499      	strb	r1, [r3, r2]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2243      	movs	r2, #67	@ 0x43
 8004dda:	2101      	movs	r1, #1
 8004ddc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2244      	movs	r2, #68	@ 0x44
 8004de2:	2101      	movs	r1, #1
 8004de4:	5499      	strb	r1, [r3, r2]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2245      	movs	r2, #69	@ 0x45
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2246      	movs	r2, #70	@ 0x46
 8004df2:	2101      	movs	r1, #1
 8004df4:	5499      	strb	r1, [r3, r2]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2247      	movs	r2, #71	@ 0x47
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	223d      	movs	r2, #61	@ 0x3d
 8004e02:	2101      	movs	r1, #1
 8004e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	223d      	movs	r2, #61	@ 0x3d
 8004e1c:	5c9b      	ldrb	r3, [r3, r2]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d001      	beq.n	8004e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e037      	b.n	8004e98 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	223d      	movs	r2, #61	@ 0x3d
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a16      	ldr	r2, [pc, #88]	@ (8004ea0 <HAL_TIM_Base_Start_IT+0x90>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x44>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ea4 <HAL_TIM_Base_Start_IT+0x94>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d116      	bne.n	8004e82 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ea8 <HAL_TIM_Base_Start_IT+0x98>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d016      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x84>
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	2380      	movs	r3, #128	@ 0x80
 8004e6a:	025b      	lsls	r3, r3, #9
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d011      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	e008      	b.n	8004e94 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e000      	b.n	8004e96 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	00010007 	.word	0x00010007

08004eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e04a      	b.n	8004f54 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	223d      	movs	r2, #61	@ 0x3d
 8004ec2:	5c9b      	ldrb	r3, [r3, r2]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	223c      	movs	r2, #60	@ 0x3c
 8004ece:	2100      	movs	r1, #0
 8004ed0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 f841 	bl	8004f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	223d      	movs	r2, #61	@ 0x3d
 8004ede:	2102      	movs	r1, #2
 8004ee0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	0019      	movs	r1, r3
 8004eec:	0010      	movs	r0, r2
 8004eee:	f000 fc59 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2248      	movs	r2, #72	@ 0x48
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	223e      	movs	r2, #62	@ 0x3e
 8004efe:	2101      	movs	r1, #1
 8004f00:	5499      	strb	r1, [r3, r2]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	223f      	movs	r2, #63	@ 0x3f
 8004f06:	2101      	movs	r1, #1
 8004f08:	5499      	strb	r1, [r3, r2]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2240      	movs	r2, #64	@ 0x40
 8004f0e:	2101      	movs	r1, #1
 8004f10:	5499      	strb	r1, [r3, r2]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2241      	movs	r2, #65	@ 0x41
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2242      	movs	r2, #66	@ 0x42
 8004f1e:	2101      	movs	r1, #1
 8004f20:	5499      	strb	r1, [r3, r2]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2243      	movs	r2, #67	@ 0x43
 8004f26:	2101      	movs	r1, #1
 8004f28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2244      	movs	r2, #68	@ 0x44
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2245      	movs	r2, #69	@ 0x45
 8004f36:	2101      	movs	r1, #1
 8004f38:	5499      	strb	r1, [r3, r2]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2246      	movs	r2, #70	@ 0x46
 8004f3e:	2101      	movs	r1, #1
 8004f40:	5499      	strb	r1, [r3, r2]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2247      	movs	r2, #71	@ 0x47
 8004f46:	2101      	movs	r1, #1
 8004f48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	223d      	movs	r2, #61	@ 0x3d
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f64:	46c0      	nop			@ (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d108      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x22>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	223e      	movs	r2, #62	@ 0x3e
 8004f80:	5c9b      	ldrb	r3, [r3, r2]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	4193      	sbcs	r3, r2
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	e037      	b.n	8004ffe <HAL_TIM_PWM_Start+0x92>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d108      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0x3a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	223f      	movs	r2, #63	@ 0x3f
 8004f98:	5c9b      	ldrb	r3, [r3, r2]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	4193      	sbcs	r3, r2
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e02b      	b.n	8004ffe <HAL_TIM_PWM_Start+0x92>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d108      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x52>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2240      	movs	r2, #64	@ 0x40
 8004fb0:	5c9b      	ldrb	r3, [r3, r2]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	1e5a      	subs	r2, r3, #1
 8004fb8:	4193      	sbcs	r3, r2
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e01f      	b.n	8004ffe <HAL_TIM_PWM_Start+0x92>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d108      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0x6a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2241      	movs	r2, #65	@ 0x41
 8004fc8:	5c9b      	ldrb	r3, [r3, r2]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	1e5a      	subs	r2, r3, #1
 8004fd0:	4193      	sbcs	r3, r2
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e013      	b.n	8004ffe <HAL_TIM_PWM_Start+0x92>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d108      	bne.n	8004fee <HAL_TIM_PWM_Start+0x82>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2242      	movs	r2, #66	@ 0x42
 8004fe0:	5c9b      	ldrb	r3, [r3, r2]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	1e5a      	subs	r2, r3, #1
 8004fe8:	4193      	sbcs	r3, r2
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	e007      	b.n	8004ffe <HAL_TIM_PWM_Start+0x92>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2243      	movs	r2, #67	@ 0x43
 8004ff2:	5c9b      	ldrb	r3, [r3, r2]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	1e5a      	subs	r2, r3, #1
 8004ffa:	4193      	sbcs	r3, r2
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07b      	b.n	80050fe <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_TIM_PWM_Start+0xaa>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	223e      	movs	r2, #62	@ 0x3e
 8005010:	2102      	movs	r1, #2
 8005012:	5499      	strb	r1, [r3, r2]
 8005014:	e023      	b.n	800505e <HAL_TIM_PWM_Start+0xf2>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d104      	bne.n	8005026 <HAL_TIM_PWM_Start+0xba>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	223f      	movs	r2, #63	@ 0x3f
 8005020:	2102      	movs	r1, #2
 8005022:	5499      	strb	r1, [r3, r2]
 8005024:	e01b      	b.n	800505e <HAL_TIM_PWM_Start+0xf2>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d104      	bne.n	8005036 <HAL_TIM_PWM_Start+0xca>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2240      	movs	r2, #64	@ 0x40
 8005030:	2102      	movs	r1, #2
 8005032:	5499      	strb	r1, [r3, r2]
 8005034:	e013      	b.n	800505e <HAL_TIM_PWM_Start+0xf2>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b0c      	cmp	r3, #12
 800503a:	d104      	bne.n	8005046 <HAL_TIM_PWM_Start+0xda>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2241      	movs	r2, #65	@ 0x41
 8005040:	2102      	movs	r1, #2
 8005042:	5499      	strb	r1, [r3, r2]
 8005044:	e00b      	b.n	800505e <HAL_TIM_PWM_Start+0xf2>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b10      	cmp	r3, #16
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0xea>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2242      	movs	r2, #66	@ 0x42
 8005050:	2102      	movs	r1, #2
 8005052:	5499      	strb	r1, [r3, r2]
 8005054:	e003      	b.n	800505e <HAL_TIM_PWM_Start+0xf2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2243      	movs	r2, #67	@ 0x43
 800505a:	2102      	movs	r1, #2
 800505c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	2201      	movs	r2, #1
 8005066:	0018      	movs	r0, r3
 8005068:	f000 ffe4 	bl	8006034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a25      	ldr	r2, [pc, #148]	@ (8005108 <HAL_TIM_PWM_Start+0x19c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_TIM_PWM_Start+0x11e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a24      	ldr	r2, [pc, #144]	@ (800510c <HAL_TIM_PWM_Start+0x1a0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_TIM_PWM_Start+0x11e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a22      	ldr	r2, [pc, #136]	@ (8005110 <HAL_TIM_PWM_Start+0x1a4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_Start+0x122>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_TIM_PWM_Start+0x124>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	0209      	lsls	r1, r1, #8
 80050a2:	430a      	orrs	r2, r1
 80050a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a17      	ldr	r2, [pc, #92]	@ (8005108 <HAL_TIM_PWM_Start+0x19c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIM_PWM_Start+0x14e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a17      	ldr	r2, [pc, #92]	@ (8005114 <HAL_TIM_PWM_Start+0x1a8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d116      	bne.n	80050e8 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <HAL_TIM_PWM_Start+0x1ac>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b06      	cmp	r3, #6
 80050ca:	d016      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18e>
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d011      	beq.n	80050fa <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e008      	b.n	80050fa <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2101      	movs	r1, #1
 80050f4:	430a      	orrs	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e000      	b.n	80050fc <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b004      	add	sp, #16
 8005104:	bd80      	pop	{r7, pc}
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	40000400 	.word	0x40000400
 8005118:	00010007 	.word	0x00010007

0800511c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2202      	movs	r2, #2
 8005138:	4013      	ands	r3, r2
 800513a:	d021      	beq.n	8005180 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2202      	movs	r2, #2
 8005140:	4013      	ands	r3, r2
 8005142:	d01d      	beq.n	8005180 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2203      	movs	r2, #3
 800514a:	4252      	negs	r2, r2
 800514c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2203      	movs	r2, #3
 800515c:	4013      	ands	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	0018      	movs	r0, r3
 8005164:	f000 fb06 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 8005168:	e007      	b.n	800517a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	0018      	movs	r0, r3
 800516e:	f000 faf9 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f000 fb05 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2204      	movs	r2, #4
 8005184:	4013      	ands	r3, r2
 8005186:	d022      	beq.n	80051ce <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2204      	movs	r2, #4
 800518c:	4013      	ands	r3, r2
 800518e:	d01e      	beq.n	80051ce <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2205      	movs	r2, #5
 8005196:	4252      	negs	r2, r2
 8005198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	23c0      	movs	r3, #192	@ 0xc0
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4013      	ands	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 fadf 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 80051b6:	e007      	b.n	80051c8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	0018      	movs	r0, r3
 80051bc:	f000 fad2 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 fade 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2208      	movs	r2, #8
 80051d2:	4013      	ands	r3, r2
 80051d4:	d021      	beq.n	800521a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2208      	movs	r2, #8
 80051da:	4013      	ands	r3, r2
 80051dc:	d01d      	beq.n	800521a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2209      	movs	r2, #9
 80051e4:	4252      	negs	r2, r2
 80051e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	2203      	movs	r2, #3
 80051f6:	4013      	ands	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f000 fab9 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 8005202:	e007      	b.n	8005214 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0018      	movs	r0, r3
 8005208:	f000 faac 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	0018      	movs	r0, r3
 8005210:	f000 fab8 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2210      	movs	r2, #16
 800521e:	4013      	ands	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2210      	movs	r2, #16
 8005226:	4013      	ands	r3, r2
 8005228:	d01e      	beq.n	8005268 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2211      	movs	r2, #17
 8005230:	4252      	negs	r2, r2
 8005232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2208      	movs	r2, #8
 8005238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	23c0      	movs	r3, #192	@ 0xc0
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4013      	ands	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0018      	movs	r0, r3
 800524c:	f000 fa92 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 8005250:	e007      	b.n	8005262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0018      	movs	r0, r3
 8005256:	f000 fa85 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fa91 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2201      	movs	r2, #1
 800526c:	4013      	ands	r3, r2
 800526e:	d00c      	beq.n	800528a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	4013      	ands	r3, r2
 8005276:	d008      	beq.n	800528a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2202      	movs	r2, #2
 800527e:	4252      	negs	r2, r2
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f7fb fe8d 	bl	8000fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2280      	movs	r2, #128	@ 0x80
 800528e:	4013      	ands	r3, r2
 8005290:	d104      	bne.n	800529c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	2380      	movs	r3, #128	@ 0x80
 8005296:	019b      	lsls	r3, r3, #6
 8005298:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800529a:	d00b      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2280      	movs	r2, #128	@ 0x80
 80052a0:	4013      	ands	r3, r2
 80052a2:	d007      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005324 <HAL_TIM_IRQHandler+0x208>)
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0018      	movs	r0, r3
 80052b0:	f000 ffea 	bl	8006288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2280      	movs	r2, #128	@ 0x80
 80052c2:	4013      	ands	r3, r2
 80052c4:	d007      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a17      	ldr	r2, [pc, #92]	@ (8005328 <HAL_TIM_IRQHandler+0x20c>)
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 ffe1 	bl	8006298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2240      	movs	r2, #64	@ 0x40
 80052da:	4013      	ands	r3, r2
 80052dc:	d00c      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2240      	movs	r2, #64	@ 0x40
 80052e2:	4013      	ands	r3, r2
 80052e4:	d008      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2241      	movs	r2, #65	@ 0x41
 80052ec:	4252      	negs	r2, r2
 80052ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 fa4e 	bl	8005794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2220      	movs	r2, #32
 80052fc:	4013      	ands	r3, r2
 80052fe:	d00c      	beq.n	800531a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	4013      	ands	r3, r2
 8005306:	d008      	beq.n	800531a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2221      	movs	r2, #33	@ 0x21
 800530e:	4252      	negs	r2, r2
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 ffaf 	bl	8006278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	ffffdf7f 	.word	0xffffdf7f
 8005328:	fffffeff 	.word	0xfffffeff

0800532c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005338:	2317      	movs	r3, #23
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	223c      	movs	r2, #60	@ 0x3c
 8005344:	5c9b      	ldrb	r3, [r3, r2]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_TIM_PWM_ConfigChannel+0x22>
 800534a:	2302      	movs	r3, #2
 800534c:	e0e5      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	223c      	movs	r2, #60	@ 0x3c
 8005352:	2101      	movs	r1, #1
 8005354:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b14      	cmp	r3, #20
 800535a:	d900      	bls.n	800535e <HAL_TIM_PWM_ConfigChannel+0x32>
 800535c:	e0d1      	b.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	009a      	lsls	r2, r3, #2
 8005362:	4b70      	ldr	r3, [pc, #448]	@ (8005524 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005364:	18d3      	adds	r3, r2, r3
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	0011      	movs	r1, r2
 8005372:	0018      	movs	r0, r3
 8005374:	f000 fa90 	bl	8005898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2108      	movs	r1, #8
 8005384:	430a      	orrs	r2, r1
 8005386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2104      	movs	r1, #4
 8005394:	438a      	bics	r2, r1
 8005396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6999      	ldr	r1, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	619a      	str	r2, [r3, #24]
      break;
 80053aa:	e0af      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	0011      	movs	r1, r2
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 faef 	bl	8005998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2180      	movs	r1, #128	@ 0x80
 80053c6:	0109      	lsls	r1, r1, #4
 80053c8:	430a      	orrs	r2, r1
 80053ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4954      	ldr	r1, [pc, #336]	@ (8005528 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053d8:	400a      	ands	r2, r1
 80053da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	619a      	str	r2, [r3, #24]
      break;
 80053f0:	e08c      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	0011      	movs	r1, r2
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fb4a 	bl	8005a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2108      	movs	r1, #8
 800540c:	430a      	orrs	r2, r1
 800540e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2104      	movs	r1, #4
 800541c:	438a      	bics	r2, r1
 800541e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69d9      	ldr	r1, [r3, #28]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	61da      	str	r2, [r3, #28]
      break;
 8005432:	e06b      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	0011      	movs	r1, r2
 800543c:	0018      	movs	r0, r3
 800543e:	f000 fbab 	bl	8005b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2180      	movs	r1, #128	@ 0x80
 800544e:	0109      	lsls	r1, r1, #4
 8005450:	430a      	orrs	r2, r1
 8005452:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4932      	ldr	r1, [pc, #200]	@ (8005528 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005460:	400a      	ands	r2, r1
 8005462:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69d9      	ldr	r1, [r3, #28]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	61da      	str	r2, [r3, #28]
      break;
 8005478:	e048      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	0011      	movs	r1, r2
 8005482:	0018      	movs	r0, r3
 8005484:	f000 fbec 	bl	8005c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2108      	movs	r1, #8
 8005494:	430a      	orrs	r2, r1
 8005496:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2104      	movs	r1, #4
 80054a4:	438a      	bics	r2, r1
 80054a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054ba:	e027      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	0011      	movs	r1, r2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fc25 	bl	8005d14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2180      	movs	r1, #128	@ 0x80
 80054d6:	0109      	lsls	r1, r1, #4
 80054d8:	430a      	orrs	r2, r1
 80054da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4910      	ldr	r1, [pc, #64]	@ (8005528 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054e8:	400a      	ands	r2, r1
 80054ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005500:	e004      	b.n	800550c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005502:	2317      	movs	r3, #23
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	2201      	movs	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
      break;
 800550a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	223c      	movs	r2, #60	@ 0x3c
 8005510:	2100      	movs	r1, #0
 8005512:	5499      	strb	r1, [r3, r2]

  return status;
 8005514:	2317      	movs	r3, #23
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	781b      	ldrb	r3, [r3, #0]
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b006      	add	sp, #24
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	08007d34 	.word	0x08007d34
 8005528:	fffffbff 	.word	0xfffffbff

0800552c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	230f      	movs	r3, #15
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	223c      	movs	r2, #60	@ 0x3c
 8005542:	5c9b      	ldrb	r3, [r3, r2]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x20>
 8005548:	2302      	movs	r3, #2
 800554a:	e0bc      	b.n	80056c6 <HAL_TIM_ConfigClockSource+0x19a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	223c      	movs	r2, #60	@ 0x3c
 8005550:	2101      	movs	r1, #1
 8005552:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	223d      	movs	r2, #61	@ 0x3d
 8005558:	2102      	movs	r1, #2
 800555a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a5a      	ldr	r2, [pc, #360]	@ (80056d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a59      	ldr	r2, [pc, #356]	@ (80056d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005570:	4013      	ands	r3, r2
 8005572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2280      	movs	r2, #128	@ 0x80
 8005582:	0192      	lsls	r2, r2, #6
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_TIM_ConfigClockSource+0xde>
 8005588:	2280      	movs	r2, #128	@ 0x80
 800558a:	0192      	lsls	r2, r2, #6
 800558c:	4293      	cmp	r3, r2
 800558e:	d900      	bls.n	8005592 <HAL_TIM_ConfigClockSource+0x66>
 8005590:	e088      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 8005592:	2280      	movs	r2, #128	@ 0x80
 8005594:	0152      	lsls	r2, r2, #5
 8005596:	4293      	cmp	r3, r2
 8005598:	d100      	bne.n	800559c <HAL_TIM_ConfigClockSource+0x70>
 800559a:	e088      	b.n	80056ae <HAL_TIM_ConfigClockSource+0x182>
 800559c:	2280      	movs	r2, #128	@ 0x80
 800559e:	0152      	lsls	r2, r2, #5
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d900      	bls.n	80055a6 <HAL_TIM_ConfigClockSource+0x7a>
 80055a4:	e07e      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 80055a6:	2b70      	cmp	r3, #112	@ 0x70
 80055a8:	d018      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0xb0>
 80055aa:	d900      	bls.n	80055ae <HAL_TIM_ConfigClockSource+0x82>
 80055ac:	e07a      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 80055ae:	2b60      	cmp	r3, #96	@ 0x60
 80055b0:	d04f      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x126>
 80055b2:	d900      	bls.n	80055b6 <HAL_TIM_ConfigClockSource+0x8a>
 80055b4:	e076      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 80055b6:	2b50      	cmp	r3, #80	@ 0x50
 80055b8:	d03b      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x106>
 80055ba:	d900      	bls.n	80055be <HAL_TIM_ConfigClockSource+0x92>
 80055bc:	e072      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 80055be:	2b40      	cmp	r3, #64	@ 0x40
 80055c0:	d057      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x146>
 80055c2:	d900      	bls.n	80055c6 <HAL_TIM_ConfigClockSource+0x9a>
 80055c4:	e06e      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 80055c6:	2b30      	cmp	r3, #48	@ 0x30
 80055c8:	d063      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x166>
 80055ca:	d86b      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d060      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x166>
 80055d0:	d868      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d05d      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x166>
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d05b      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x166>
 80055da:	e063      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ec:	f000 fd02 	bl	8005ff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2277      	movs	r2, #119	@ 0x77
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	609a      	str	r2, [r3, #8]
      break;
 8005608:	e052      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800561a:	f000 fceb 	bl	8005ff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2180      	movs	r1, #128	@ 0x80
 800562a:	01c9      	lsls	r1, r1, #7
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]
      break;
 8005630:	e03e      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	001a      	movs	r2, r3
 8005640:	f000 fc5c 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2150      	movs	r1, #80	@ 0x50
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fcb6 	bl	8005fbc <TIM_ITRx_SetConfig>
      break;
 8005650:	e02e      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800565e:	001a      	movs	r2, r3
 8005660:	f000 fc7a 	bl	8005f58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2160      	movs	r1, #96	@ 0x60
 800566a:	0018      	movs	r0, r3
 800566c:	f000 fca6 	bl	8005fbc <TIM_ITRx_SetConfig>
      break;
 8005670:	e01e      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	001a      	movs	r2, r3
 8005680:	f000 fc3c 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2140      	movs	r1, #64	@ 0x40
 800568a:	0018      	movs	r0, r3
 800568c:	f000 fc96 	bl	8005fbc <TIM_ITRx_SetConfig>
      break;
 8005690:	e00e      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	0019      	movs	r1, r3
 800569c:	0010      	movs	r0, r2
 800569e:	f000 fc8d 	bl	8005fbc <TIM_ITRx_SetConfig>
      break;
 80056a2:	e005      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80056a4:	230f      	movs	r3, #15
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	2201      	movs	r2, #1
 80056aa:	701a      	strb	r2, [r3, #0]
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80056ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	223d      	movs	r2, #61	@ 0x3d
 80056b4:	2101      	movs	r1, #1
 80056b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	223c      	movs	r2, #60	@ 0x3c
 80056bc:	2100      	movs	r1, #0
 80056be:	5499      	strb	r1, [r3, r2]

  return status;
 80056c0:	230f      	movs	r3, #15
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	781b      	ldrb	r3, [r3, #0]
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b004      	add	sp, #16
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	ffceff88 	.word	0xffceff88
 80056d4:	ffff00ff 	.word	0xffff00ff

080056d8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	223c      	movs	r2, #60	@ 0x3c
 80056e6:	5c9b      	ldrb	r3, [r3, r2]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e032      	b.n	8005756 <HAL_TIM_SlaveConfigSynchro+0x7e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	223c      	movs	r2, #60	@ 0x3c
 80056f4:	2101      	movs	r1, #1
 80056f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	223d      	movs	r2, #61	@ 0x3d
 80056fc:	2102      	movs	r1, #2
 80056fe:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0011      	movs	r1, r2
 8005706:	0018      	movs	r0, r3
 8005708:	f000 fb62 	bl	8005dd0 <TIM_SlaveTimer_SetConfig>
 800570c:	1e03      	subs	r3, r0, #0
 800570e:	d009      	beq.n	8005724 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	223d      	movs	r2, #61	@ 0x3d
 8005714:	2101      	movs	r1, #1
 8005716:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	223c      	movs	r2, #60	@ 0x3c
 800571c:	2100      	movs	r1, #0
 800571e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e018      	b.n	8005756 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2140      	movs	r1, #64	@ 0x40
 8005730:	438a      	bics	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4908      	ldr	r1, [pc, #32]	@ (8005760 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005740:	400a      	ands	r2, r1
 8005742:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	223d      	movs	r2, #61	@ 0x3d
 8005748:	2101      	movs	r1, #1
 800574a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	223c      	movs	r2, #60	@ 0x3c
 8005750:	2100      	movs	r1, #0
 8005752:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b002      	add	sp, #8
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	ffffbfff 	.word	0xffffbfff

08005764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800576c:	46c0      	nop			@ (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800577c:	46c0      	nop			@ (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800578c:	46c0      	nop			@ (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b002      	add	sp, #8
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579c:	46c0      	nop			@ (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b002      	add	sp, #8
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a32      	ldr	r2, [pc, #200]	@ (8005880 <TIM_Base_SetConfig+0xdc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0x20>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a31      	ldr	r2, [pc, #196]	@ (8005884 <TIM_Base_SetConfig+0xe0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d108      	bne.n	80057d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2270      	movs	r2, #112	@ 0x70
 80057c8:	4393      	bics	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a29      	ldr	r2, [pc, #164]	@ (8005880 <TIM_Base_SetConfig+0xdc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_Base_SetConfig+0x5a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a28      	ldr	r2, [pc, #160]	@ (8005884 <TIM_Base_SetConfig+0xe0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_Base_SetConfig+0x5a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a27      	ldr	r2, [pc, #156]	@ (8005888 <TIM_Base_SetConfig+0xe4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_Base_SetConfig+0x5a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a26      	ldr	r2, [pc, #152]	@ (800588c <TIM_Base_SetConfig+0xe8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_Base_SetConfig+0x5a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a25      	ldr	r2, [pc, #148]	@ (8005890 <TIM_Base_SetConfig+0xec>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d108      	bne.n	8005810 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4a24      	ldr	r2, [pc, #144]	@ (8005894 <TIM_Base_SetConfig+0xf0>)
 8005802:	4013      	ands	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2280      	movs	r2, #128	@ 0x80
 8005814:	4393      	bics	r3, r2
 8005816:	001a      	movs	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a11      	ldr	r2, [pc, #68]	@ (8005880 <TIM_Base_SetConfig+0xdc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a12      	ldr	r2, [pc, #72]	@ (800588c <TIM_Base_SetConfig+0xe8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a11      	ldr	r2, [pc, #68]	@ (8005890 <TIM_Base_SetConfig+0xec>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d103      	bne.n	8005856 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	2b01      	cmp	r3, #1
 8005866:	d106      	bne.n	8005876 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2201      	movs	r2, #1
 800586e:	4393      	bics	r3, r2
 8005870:	001a      	movs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	611a      	str	r2, [r3, #16]
  }
}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	46bd      	mov	sp, r7
 800587a:	b004      	add	sp, #16
 800587c:	bd80      	pop	{r7, pc}
 800587e:	46c0      	nop			@ (mov r8, r8)
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40000400 	.word	0x40000400
 8005888:	40002000 	.word	0x40002000
 800588c:	40014400 	.word	0x40014400
 8005890:	40014800 	.word	0x40014800
 8005894:	fffffcff 	.word	0xfffffcff

08005898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	2201      	movs	r2, #1
 80058ae:	4393      	bics	r3, r2
 80058b0:	001a      	movs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005980 <TIM_OC1_SetConfig+0xe8>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2203      	movs	r2, #3
 80058ce:	4393      	bics	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2202      	movs	r2, #2
 80058e0:	4393      	bics	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a24      	ldr	r2, [pc, #144]	@ (8005984 <TIM_OC1_SetConfig+0xec>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC1_SetConfig+0x6e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a23      	ldr	r2, [pc, #140]	@ (8005988 <TIM_OC1_SetConfig+0xf0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC1_SetConfig+0x6e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a22      	ldr	r2, [pc, #136]	@ (800598c <TIM_OC1_SetConfig+0xf4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10c      	bne.n	8005920 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2208      	movs	r2, #8
 800590a:	4393      	bics	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2204      	movs	r2, #4
 800591c:	4393      	bics	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a18      	ldr	r2, [pc, #96]	@ (8005984 <TIM_OC1_SetConfig+0xec>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d007      	beq.n	8005938 <TIM_OC1_SetConfig+0xa0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a17      	ldr	r2, [pc, #92]	@ (8005988 <TIM_OC1_SetConfig+0xf0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_OC1_SetConfig+0xa0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a16      	ldr	r2, [pc, #88]	@ (800598c <TIM_OC1_SetConfig+0xf4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d111      	bne.n	800595c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4a15      	ldr	r2, [pc, #84]	@ (8005990 <TIM_OC1_SetConfig+0xf8>)
 800593c:	4013      	ands	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4a14      	ldr	r2, [pc, #80]	@ (8005994 <TIM_OC1_SetConfig+0xfc>)
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	46c0      	nop			@ (mov r8, r8)
 8005978:	46bd      	mov	sp, r7
 800597a:	b006      	add	sp, #24
 800597c:	bd80      	pop	{r7, pc}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	fffeff8f 	.word	0xfffeff8f
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800
 8005990:	fffffeff 	.word	0xfffffeff
 8005994:	fffffdff 	.word	0xfffffdff

08005998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	2210      	movs	r2, #16
 80059ae:	4393      	bics	r3, r2
 80059b0:	001a      	movs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005a78 <TIM_OC2_SetConfig+0xe0>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4a2b      	ldr	r2, [pc, #172]	@ (8005a7c <TIM_OC2_SetConfig+0xe4>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2220      	movs	r2, #32
 80059e2:	4393      	bics	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a22      	ldr	r2, [pc, #136]	@ (8005a80 <TIM_OC2_SetConfig+0xe8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10d      	bne.n	8005a16 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2280      	movs	r2, #128	@ 0x80
 80059fe:	4393      	bics	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2240      	movs	r2, #64	@ 0x40
 8005a12:	4393      	bics	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a19      	ldr	r2, [pc, #100]	@ (8005a80 <TIM_OC2_SetConfig+0xe8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <TIM_OC2_SetConfig+0x96>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <TIM_OC2_SetConfig+0xec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_OC2_SetConfig+0x96>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a17      	ldr	r2, [pc, #92]	@ (8005a88 <TIM_OC2_SetConfig+0xf0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d113      	bne.n	8005a56 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <TIM_OC2_SetConfig+0xf4>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <TIM_OC2_SetConfig+0xf8>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	46c0      	nop			@ (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b006      	add	sp, #24
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	feff8fff 	.word	0xfeff8fff
 8005a7c:	fffffcff 	.word	0xfffffcff
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800
 8005a8c:	fffffbff 	.word	0xfffffbff
 8005a90:	fffff7ff 	.word	0xfffff7ff

08005a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	4a31      	ldr	r2, [pc, #196]	@ (8005b70 <TIM_OC3_SetConfig+0xdc>)
 8005aaa:	401a      	ands	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a2d      	ldr	r2, [pc, #180]	@ (8005b74 <TIM_OC3_SetConfig+0xe0>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	4393      	bics	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	4a27      	ldr	r2, [pc, #156]	@ (8005b78 <TIM_OC3_SetConfig+0xe4>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a23      	ldr	r2, [pc, #140]	@ (8005b7c <TIM_OC3_SetConfig+0xe8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10d      	bne.n	8005b0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4a22      	ldr	r2, [pc, #136]	@ (8005b80 <TIM_OC3_SetConfig+0xec>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4a1e      	ldr	r2, [pc, #120]	@ (8005b84 <TIM_OC3_SetConfig+0xf0>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1a      	ldr	r2, [pc, #104]	@ (8005b7c <TIM_OC3_SetConfig+0xe8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <TIM_OC3_SetConfig+0x92>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1b      	ldr	r2, [pc, #108]	@ (8005b88 <TIM_OC3_SetConfig+0xf4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC3_SetConfig+0x92>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1a      	ldr	r2, [pc, #104]	@ (8005b8c <TIM_OC3_SetConfig+0xf8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d113      	bne.n	8005b4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4a19      	ldr	r2, [pc, #100]	@ (8005b90 <TIM_OC3_SetConfig+0xfc>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4a18      	ldr	r2, [pc, #96]	@ (8005b94 <TIM_OC3_SetConfig+0x100>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	46c0      	nop			@ (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b006      	add	sp, #24
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	fffffeff 	.word	0xfffffeff
 8005b74:	fffeff8f 	.word	0xfffeff8f
 8005b78:	fffffdff 	.word	0xfffffdff
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	fffff7ff 	.word	0xfffff7ff
 8005b84:	fffffbff 	.word	0xfffffbff
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800
 8005b90:	ffffefff 	.word	0xffffefff
 8005b94:	ffffdfff 	.word	0xffffdfff

08005b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	4a24      	ldr	r2, [pc, #144]	@ (8005c40 <TIM_OC4_SetConfig+0xa8>)
 8005bae:	401a      	ands	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a20      	ldr	r2, [pc, #128]	@ (8005c44 <TIM_OC4_SetConfig+0xac>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a1f      	ldr	r2, [pc, #124]	@ (8005c48 <TIM_OC4_SetConfig+0xb0>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4a1b      	ldr	r2, [pc, #108]	@ (8005c4c <TIM_OC4_SetConfig+0xb4>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	031b      	lsls	r3, r3, #12
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a17      	ldr	r2, [pc, #92]	@ (8005c50 <TIM_OC4_SetConfig+0xb8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_OC4_SetConfig+0x70>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <TIM_OC4_SetConfig+0xbc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC4_SetConfig+0x70>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <TIM_OC4_SetConfig+0xc0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d109      	bne.n	8005c1c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4a14      	ldr	r2, [pc, #80]	@ (8005c5c <TIM_OC4_SetConfig+0xc4>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b006      	add	sp, #24
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	ffffefff 	.word	0xffffefff
 8005c44:	feff8fff 	.word	0xfeff8fff
 8005c48:	fffffcff 	.word	0xfffffcff
 8005c4c:	ffffdfff 	.word	0xffffdfff
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800
 8005c5c:	ffffbfff 	.word	0xffffbfff

08005c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4a21      	ldr	r2, [pc, #132]	@ (8005cfc <TIM_OC5_SetConfig+0x9c>)
 8005c76:	401a      	ands	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <TIM_OC5_SetConfig+0xa0>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	@ (8005d04 <TIM_OC5_SetConfig+0xa4>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	@ (8005d08 <TIM_OC5_SetConfig+0xa8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_OC5_SetConfig+0x66>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a14      	ldr	r2, [pc, #80]	@ (8005d0c <TIM_OC5_SetConfig+0xac>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_OC5_SetConfig+0x66>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a13      	ldr	r2, [pc, #76]	@ (8005d10 <TIM_OC5_SetConfig+0xb0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d109      	bne.n	8005cda <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8005cfc <TIM_OC5_SetConfig+0x9c>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b006      	add	sp, #24
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	fffeffff 	.word	0xfffeffff
 8005d00:	fffeff8f 	.word	0xfffeff8f
 8005d04:	fffdffff 	.word	0xfffdffff
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800

08005d14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	4a22      	ldr	r2, [pc, #136]	@ (8005db4 <TIM_OC6_SetConfig+0xa0>)
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005db8 <TIM_OC6_SetConfig+0xa4>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	@ (8005dbc <TIM_OC6_SetConfig+0xa8>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	051b      	lsls	r3, r3, #20
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a16      	ldr	r2, [pc, #88]	@ (8005dc0 <TIM_OC6_SetConfig+0xac>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d007      	beq.n	8005d7c <TIM_OC6_SetConfig+0x68>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a15      	ldr	r2, [pc, #84]	@ (8005dc4 <TIM_OC6_SetConfig+0xb0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC6_SetConfig+0x68>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a14      	ldr	r2, [pc, #80]	@ (8005dc8 <TIM_OC6_SetConfig+0xb4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d109      	bne.n	8005d90 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4a13      	ldr	r2, [pc, #76]	@ (8005dcc <TIM_OC6_SetConfig+0xb8>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	46c0      	nop			@ (mov r8, r8)
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b006      	add	sp, #24
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	ffefffff 	.word	0xffefffff
 8005db8:	feff8fff 	.word	0xfeff8fff
 8005dbc:	ffdfffff 	.word	0xffdfffff
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800
 8005dcc:	fffbffff 	.word	0xfffbffff

08005dd0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2317      	movs	r3, #23
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4a41      	ldr	r2, [pc, #260]	@ (8005ef4 <TIM_SlaveTimer_SetConfig+0x124>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8005ef8 <TIM_SlaveTimer_SetConfig+0x128>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b70      	cmp	r3, #112	@ 0x70
 8005e1c:	d015      	beq.n	8005e4a <TIM_SlaveTimer_SetConfig+0x7a>
 8005e1e:	d900      	bls.n	8005e22 <TIM_SlaveTimer_SetConfig+0x52>
 8005e20:	e05b      	b.n	8005eda <TIM_SlaveTimer_SetConfig+0x10a>
 8005e22:	2b60      	cmp	r3, #96	@ 0x60
 8005e24:	d04f      	beq.n	8005ec6 <TIM_SlaveTimer_SetConfig+0xf6>
 8005e26:	d858      	bhi.n	8005eda <TIM_SlaveTimer_SetConfig+0x10a>
 8005e28:	2b50      	cmp	r3, #80	@ 0x50
 8005e2a:	d042      	beq.n	8005eb2 <TIM_SlaveTimer_SetConfig+0xe2>
 8005e2c:	d855      	bhi.n	8005eda <TIM_SlaveTimer_SetConfig+0x10a>
 8005e2e:	2b40      	cmp	r3, #64	@ 0x40
 8005e30:	d016      	beq.n	8005e60 <TIM_SlaveTimer_SetConfig+0x90>
 8005e32:	d852      	bhi.n	8005eda <TIM_SlaveTimer_SetConfig+0x10a>
 8005e34:	2b30      	cmp	r3, #48	@ 0x30
 8005e36:	d055      	beq.n	8005ee4 <TIM_SlaveTimer_SetConfig+0x114>
 8005e38:	d84f      	bhi.n	8005eda <TIM_SlaveTimer_SetConfig+0x10a>
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d052      	beq.n	8005ee4 <TIM_SlaveTimer_SetConfig+0x114>
 8005e3e:	d84c      	bhi.n	8005eda <TIM_SlaveTimer_SetConfig+0x10a>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d04f      	beq.n	8005ee4 <TIM_SlaveTimer_SetConfig+0x114>
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d04d      	beq.n	8005ee4 <TIM_SlaveTimer_SetConfig+0x114>
 8005e48:	e047      	b.n	8005eda <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005e5a:	f000 f8cb 	bl	8005ff4 <TIM_ETR_SetConfig>
      break;
 8005e5e:	e042      	b.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d101      	bne.n	8005e6c <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e03f      	b.n	8005eec <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6a1a      	ldr	r2, [r3, #32]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	438a      	bics	r2, r1
 8005e82:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	22f0      	movs	r2, #240	@ 0xf0
 8005e90:	4393      	bics	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	621a      	str	r2, [r3, #32]
      break;
 8005eb0:	e019      	b.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	f000 f81c 	bl	8005efc <TIM_TI1_ConfigInputStage>
      break;
 8005ec4:	e00f      	b.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed2:	001a      	movs	r2, r3
 8005ed4:	f000 f840 	bl	8005f58 <TIM_TI2_ConfigInputStage>
      break;
 8005ed8:	e005      	b.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005eda:	2317      	movs	r3, #23
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	2201      	movs	r2, #1
 8005ee0:	701a      	strb	r2, [r3, #0]
      break;
 8005ee2:	e000      	b.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005ee4:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8005ee6:	2317      	movs	r3, #23
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	781b      	ldrb	r3, [r3, #0]
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b006      	add	sp, #24
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	ffcfff8f 	.word	0xffcfff8f
 8005ef8:	fffefff8 	.word	0xfffefff8

08005efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	2201      	movs	r2, #1
 8005f14:	4393      	bics	r3, r2
 8005f16:	001a      	movs	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	22f0      	movs	r2, #240	@ 0xf0
 8005f26:	4393      	bics	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	220a      	movs	r2, #10
 8005f38:	4393      	bics	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	621a      	str	r2, [r3, #32]
}
 8005f50:	46c0      	nop			@ (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b006      	add	sp, #24
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	2210      	movs	r2, #16
 8005f70:	4393      	bics	r3, r2
 8005f72:	001a      	movs	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb8 <TIM_TI2_ConfigInputStage+0x60>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	031b      	lsls	r3, r3, #12
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	22a0      	movs	r2, #160	@ 0xa0
 8005f94:	4393      	bics	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b006      	add	sp, #24
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	ffff0fff 	.word	0xffff0fff

08005fbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4a08      	ldr	r2, [pc, #32]	@ (8005ff0 <TIM_ITRx_SetConfig+0x34>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	2207      	movs	r2, #7
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	609a      	str	r2, [r3, #8]
}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	ffcfff8f 	.word	0xffcfff8f

08005ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4a09      	ldr	r2, [pc, #36]	@ (8006030 <TIM_ETR_SetConfig+0x3c>)
 800600c:	4013      	ands	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	021a      	lsls	r2, r3, #8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	431a      	orrs	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	46c0      	nop			@ (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	b006      	add	sp, #24
 800602e:	bd80      	pop	{r7, pc}
 8006030:	ffff00ff 	.word	0xffff00ff

08006034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	221f      	movs	r2, #31
 8006044:	4013      	ands	r3, r2
 8006046:	2201      	movs	r2, #1
 8006048:	409a      	lsls	r2, r3
 800604a:	0013      	movs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	43d2      	mvns	r2, r2
 8006056:	401a      	ands	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	211f      	movs	r1, #31
 8006064:	400b      	ands	r3, r1
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4099      	lsls	r1, r3
 800606a:	000b      	movs	r3, r1
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	46bd      	mov	sp, r7
 8006076:	b006      	add	sp, #24
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	223c      	movs	r2, #60	@ 0x3c
 800608a:	5c9b      	ldrb	r3, [r3, r2]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e04a      	b.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	223c      	movs	r2, #60	@ 0x3c
 8006098:	2101      	movs	r1, #1
 800609a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	223d      	movs	r2, #61	@ 0x3d
 80060a0:	2102      	movs	r1, #2
 80060a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d108      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2270      	movs	r2, #112	@ 0x70
 80060d4:	4393      	bics	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a11      	ldr	r2, [pc, #68]	@ (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a10      	ldr	r2, [pc, #64]	@ (800613c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d10c      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2280      	movs	r2, #128	@ 0x80
 8006102:	4393      	bics	r3, r2
 8006104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4313      	orrs	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	223d      	movs	r2, #61	@ 0x3d
 800611c:	2101      	movs	r1, #1
 800611e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	223c      	movs	r2, #60	@ 0x3c
 8006124:	2100      	movs	r1, #0
 8006126:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	b004      	add	sp, #16
 8006130:	bd80      	pop	{r7, pc}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	40012c00 	.word	0x40012c00
 8006138:	ff0fffff 	.word	0xff0fffff
 800613c:	40000400 	.word	0x40000400

08006140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	223c      	movs	r2, #60	@ 0x3c
 8006152:	5c9b      	ldrb	r3, [r3, r2]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006158:	2302      	movs	r3, #2
 800615a:	e06f      	b.n	800623c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	223c      	movs	r2, #60	@ 0x3c
 8006160:	2101      	movs	r1, #1
 8006162:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	22ff      	movs	r2, #255	@ 0xff
 8006168:	4393      	bics	r3, r2
 800616a:	001a      	movs	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a33      	ldr	r2, [pc, #204]	@ (8006244 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006178:	401a      	ands	r2, r3
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a30      	ldr	r2, [pc, #192]	@ (8006248 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006186:	401a      	ands	r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a2e      	ldr	r2, [pc, #184]	@ (800624c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006194:	401a      	ands	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006250 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80061a2:	401a      	ands	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a29      	ldr	r2, [pc, #164]	@ (8006254 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80061b0:	401a      	ands	r2, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a26      	ldr	r2, [pc, #152]	@ (8006258 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80061be:	401a      	ands	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a24      	ldr	r2, [pc, #144]	@ (800625c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80061cc:	401a      	ands	r2, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4a21      	ldr	r2, [pc, #132]	@ (8006260 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80061dc:	401a      	ands	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006264 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d11c      	bne.n	800622a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80061f4:	401a      	ands	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fa:	051b      	lsls	r3, r3, #20
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a1a      	ldr	r2, [pc, #104]	@ (800626c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006204:	401a      	ands	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a17      	ldr	r2, [pc, #92]	@ (8006270 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006212:	401a      	ands	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006220:	401a      	ands	r2, r3
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	223c      	movs	r2, #60	@ 0x3c
 8006236:	2100      	movs	r1, #0
 8006238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	0018      	movs	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	b004      	add	sp, #16
 8006242:	bd80      	pop	{r7, pc}
 8006244:	fffffcff 	.word	0xfffffcff
 8006248:	fffffbff 	.word	0xfffffbff
 800624c:	fffff7ff 	.word	0xfffff7ff
 8006250:	ffffefff 	.word	0xffffefff
 8006254:	ffffdfff 	.word	0xffffdfff
 8006258:	ffffbfff 	.word	0xffffbfff
 800625c:	fff0ffff 	.word	0xfff0ffff
 8006260:	efffffff 	.word	0xefffffff
 8006264:	40012c00 	.word	0x40012c00
 8006268:	ff0fffff 	.word	0xff0fffff
 800626c:	feffffff 	.word	0xfeffffff
 8006270:	fdffffff 	.word	0xfdffffff
 8006274:	dfffffff 	.word	0xdfffffff

08006278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006280:	46c0      	nop			@ (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006290:	46c0      	nop			@ (mov r8, r8)
 8006292:	46bd      	mov	sp, r7
 8006294:	b002      	add	sp, #8
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062a0:	46c0      	nop			@ (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b002      	add	sp, #8
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e046      	b.n	8006348 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2288      	movs	r2, #136	@ 0x88
 80062be:	589b      	ldr	r3, [r3, r2]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d107      	bne.n	80062d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2284      	movs	r2, #132	@ 0x84
 80062c8:	2100      	movs	r1, #0
 80062ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7fb fbd6 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2288      	movs	r2, #136	@ 0x88
 80062d8:	2124      	movs	r1, #36	@ 0x24
 80062da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2101      	movs	r1, #1
 80062e8:	438a      	bics	r2, r1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	0018      	movs	r0, r3
 80062f8:	f000 fe42 	bl	8006f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0018      	movs	r0, r3
 8006300:	f000 fcd4 	bl	8006cac <UART_SetConfig>
 8006304:	0003      	movs	r3, r0
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e01c      	b.n	8006348 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	490d      	ldr	r1, [pc, #52]	@ (8006350 <HAL_UART_Init+0xa8>)
 800631a:	400a      	ands	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	212a      	movs	r1, #42	@ 0x2a
 800632a:	438a      	bics	r2, r1
 800632c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2101      	movs	r1, #1
 800633a:	430a      	orrs	r2, r1
 800633c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f000 fed1 	bl	80070e8 <UART_CheckIdleState>
 8006346:	0003      	movs	r3, r0
}
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b002      	add	sp, #8
 800634e:	bd80      	pop	{r7, pc}
 8006350:	ffffb7ff 	.word	0xffffb7ff

08006354 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e032      	b.n	80063cc <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2288      	movs	r2, #136	@ 0x88
 800636a:	2124      	movs	r1, #36	@ 0x24
 800636c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2101      	movs	r1, #1
 800637a:	438a      	bics	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0018      	movs	r0, r3
 800639a:	f7fb fc37 	bl	8001c0c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2290      	movs	r2, #144	@ 0x90
 80063a2:	2100      	movs	r1, #0
 80063a4:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2288      	movs	r2, #136	@ 0x88
 80063aa:	2100      	movs	r1, #0
 80063ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	228c      	movs	r2, #140	@ 0x8c
 80063b2:	2100      	movs	r1, #0
 80063b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2284      	movs	r2, #132	@ 0x84
 80063c6:	2100      	movs	r1, #0
 80063c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	0018      	movs	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b002      	add	sp, #8
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	1dbb      	adds	r3, r7, #6
 80063e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2288      	movs	r2, #136	@ 0x88
 80063e6:	589b      	ldr	r3, [r3, r2]
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d000      	beq.n	80063ee <HAL_UART_Transmit_DMA+0x1a>
 80063ec:	e079      	b.n	80064e2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_UART_Transmit_DMA+0x28>
 80063f4:	1dbb      	adds	r3, r7, #6
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e071      	b.n	80064e4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	2380      	movs	r3, #128	@ 0x80
 8006406:	015b      	lsls	r3, r3, #5
 8006408:	429a      	cmp	r2, r3
 800640a:	d109      	bne.n	8006420 <HAL_UART_Transmit_DMA+0x4c>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2201      	movs	r2, #1
 8006418:	4013      	ands	r3, r2
 800641a:	d001      	beq.n	8006420 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e061      	b.n	80064e4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1dba      	adds	r2, r7, #6
 800642a:	2154      	movs	r1, #84	@ 0x54
 800642c:	8812      	ldrh	r2, [r2, #0]
 800642e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1dba      	adds	r2, r7, #6
 8006434:	2156      	movs	r1, #86	@ 0x56
 8006436:	8812      	ldrh	r2, [r2, #0]
 8006438:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2290      	movs	r2, #144	@ 0x90
 800643e:	2100      	movs	r1, #0
 8006440:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2288      	movs	r2, #136	@ 0x88
 8006446:	2121      	movs	r1, #33	@ 0x21
 8006448:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d028      	beq.n	80064a4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006456:	4a25      	ldr	r2, [pc, #148]	@ (80064ec <HAL_UART_Transmit_DMA+0x118>)
 8006458:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645e:	4a24      	ldr	r2, [pc, #144]	@ (80064f0 <HAL_UART_Transmit_DMA+0x11c>)
 8006460:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006466:	4a23      	ldr	r2, [pc, #140]	@ (80064f4 <HAL_UART_Transmit_DMA+0x120>)
 8006468:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800646e:	2200      	movs	r2, #0
 8006470:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800647a:	0019      	movs	r1, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3328      	adds	r3, #40	@ 0x28
 8006482:	001a      	movs	r2, r3
 8006484:	1dbb      	adds	r3, r7, #6
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	f7fc fff6 	bl	8003478 <HAL_DMA_Start_IT>
 800648c:	1e03      	subs	r3, r0, #0
 800648e:	d009      	beq.n	80064a4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2290      	movs	r2, #144	@ 0x90
 8006494:	2110      	movs	r1, #16
 8006496:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2288      	movs	r2, #136	@ 0x88
 800649c:	2120      	movs	r1, #32
 800649e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e01f      	b.n	80064e4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2240      	movs	r2, #64	@ 0x40
 80064aa:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ac:	f3ef 8310 	mrs	r3, PRIMASK
 80064b0:	613b      	str	r3, [r7, #16]
  return(result);
 80064b2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	2301      	movs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f383 8810 	msr	PRIMASK, r3
}
 80064c0:	46c0      	nop			@ (mov r8, r8)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2180      	movs	r1, #128	@ 0x80
 80064ce:	430a      	orrs	r2, r1
 80064d0:	609a      	str	r2, [r3, #8]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f383 8810 	msr	PRIMASK, r3
}
 80064dc:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80064e2:	2302      	movs	r3, #2
  }
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b008      	add	sp, #32
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	080075b5 	.word	0x080075b5
 80064f0:	0800764d 	.word	0x0800764d
 80064f4:	080077df 	.word	0x080077df

080064f8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	@ 0x30
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2288      	movs	r2, #136	@ 0x88
 8006504:	589b      	ldr	r3, [r3, r2]
 8006506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	228c      	movs	r2, #140	@ 0x8c
 800650c:	589b      	ldr	r3, [r3, r2]
 800650e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2280      	movs	r2, #128	@ 0x80
 8006518:	4013      	ands	r3, r2
 800651a:	2b80      	cmp	r3, #128	@ 0x80
 800651c:	d138      	bne.n	8006590 <HAL_UART_DMAStop+0x98>
 800651e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006520:	2b21      	cmp	r3, #33	@ 0x21
 8006522:	d135      	bne.n	8006590 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006524:	f3ef 8310 	mrs	r3, PRIMASK
 8006528:	617b      	str	r3, [r7, #20]
  return(result);
 800652a:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800652c:	627b      	str	r3, [r7, #36]	@ 0x24
 800652e:	2301      	movs	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			@ (mov r8, r8)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2180      	movs	r1, #128	@ 0x80
 8006546:	438a      	bics	r2, r1
 8006548:	609a      	str	r2, [r3, #8]
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f383 8810 	msr	PRIMASK, r3
}
 8006554:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d014      	beq.n	8006588 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006562:	0018      	movs	r0, r3
 8006564:	f7fd f80e 	bl	8003584 <HAL_DMA_Abort>
 8006568:	1e03      	subs	r3, r0, #0
 800656a:	d00d      	beq.n	8006588 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006570:	0018      	movs	r0, r3
 8006572:	f7fd f985 	bl	8003880 <HAL_DMA_GetError>
 8006576:	0003      	movs	r3, r0
 8006578:	2b20      	cmp	r3, #32
 800657a:	d105      	bne.n	8006588 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2290      	movs	r2, #144	@ 0x90
 8006580:	2110      	movs	r1, #16
 8006582:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e047      	b.n	8006618 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	0018      	movs	r0, r3
 800658c:	f000 ff6c 	bl	8007468 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2240      	movs	r2, #64	@ 0x40
 8006598:	4013      	ands	r3, r2
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d13b      	bne.n	8006616 <HAL_UART_DMAStop+0x11e>
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	2b22      	cmp	r3, #34	@ 0x22
 80065a2:	d138      	bne.n	8006616 <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a4:	f3ef 8310 	mrs	r3, PRIMASK
 80065a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80065aa:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ac:	623b      	str	r3, [r7, #32]
 80065ae:	2301      	movs	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f383 8810 	msr	PRIMASK, r3
}
 80065b8:	46c0      	nop			@ (mov r8, r8)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2140      	movs	r1, #64	@ 0x40
 80065c6:	438a      	bics	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f383 8810 	msr	PRIMASK, r3
}
 80065d4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2280      	movs	r2, #128	@ 0x80
 80065da:	589b      	ldr	r3, [r3, r2]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d016      	beq.n	800660e <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2280      	movs	r2, #128	@ 0x80
 80065e4:	589b      	ldr	r3, [r3, r2]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7fc ffcc 	bl	8003584 <HAL_DMA_Abort>
 80065ec:	1e03      	subs	r3, r0, #0
 80065ee:	d00e      	beq.n	800660e <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2280      	movs	r2, #128	@ 0x80
 80065f4:	589b      	ldr	r3, [r3, r2]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7fd f942 	bl	8003880 <HAL_DMA_GetError>
 80065fc:	0003      	movs	r3, r0
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d105      	bne.n	800660e <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2290      	movs	r2, #144	@ 0x90
 8006606:	2110      	movs	r1, #16
 8006608:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e004      	b.n	8006618 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	0018      	movs	r0, r3
 8006612:	f000 ff69 	bl	80074e8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	0018      	movs	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	b00c      	add	sp, #48	@ 0x30
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006620:	b5b0      	push	{r4, r5, r7, lr}
 8006622:	b0aa      	sub	sp, #168	@ 0xa8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	22a4      	movs	r2, #164	@ 0xa4
 8006630:	18b9      	adds	r1, r7, r2
 8006632:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	20a0      	movs	r0, #160	@ 0xa0
 800663c:	1839      	adds	r1, r7, r0
 800663e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	249c      	movs	r4, #156	@ 0x9c
 8006648:	1939      	adds	r1, r7, r4
 800664a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800664c:	0011      	movs	r1, r2
 800664e:	18bb      	adds	r3, r7, r2
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4aa2      	ldr	r2, [pc, #648]	@ (80068dc <HAL_UART_IRQHandler+0x2bc>)
 8006654:	4013      	ands	r3, r2
 8006656:	2298      	movs	r2, #152	@ 0x98
 8006658:	18bd      	adds	r5, r7, r2
 800665a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800665c:	18bb      	adds	r3, r7, r2
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d11a      	bne.n	800669a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006664:	187b      	adds	r3, r7, r1
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2220      	movs	r2, #32
 800666a:	4013      	ands	r3, r2
 800666c:	d015      	beq.n	800669a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800666e:	183b      	adds	r3, r7, r0
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2220      	movs	r2, #32
 8006674:	4013      	ands	r3, r2
 8006676:	d105      	bne.n	8006684 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006678:	193b      	adds	r3, r7, r4
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	055b      	lsls	r3, r3, #21
 8006680:	4013      	ands	r3, r2
 8006682:	d00a      	beq.n	800669a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006688:	2b00      	cmp	r3, #0
 800668a:	d100      	bne.n	800668e <HAL_UART_IRQHandler+0x6e>
 800668c:	e2dc      	b.n	8006c48 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	0010      	movs	r0, r2
 8006696:	4798      	blx	r3
      }
      return;
 8006698:	e2d6      	b.n	8006c48 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800669a:	2398      	movs	r3, #152	@ 0x98
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d100      	bne.n	80066a6 <HAL_UART_IRQHandler+0x86>
 80066a4:	e122      	b.n	80068ec <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066a6:	239c      	movs	r3, #156	@ 0x9c
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a8c      	ldr	r2, [pc, #560]	@ (80068e0 <HAL_UART_IRQHandler+0x2c0>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	d106      	bne.n	80066c0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066b2:	23a0      	movs	r3, #160	@ 0xa0
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a8a      	ldr	r2, [pc, #552]	@ (80068e4 <HAL_UART_IRQHandler+0x2c4>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	d100      	bne.n	80066c0 <HAL_UART_IRQHandler+0xa0>
 80066be:	e115      	b.n	80068ec <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066c0:	23a4      	movs	r3, #164	@ 0xa4
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2201      	movs	r2, #1
 80066c8:	4013      	ands	r3, r2
 80066ca:	d012      	beq.n	80066f2 <HAL_UART_IRQHandler+0xd2>
 80066cc:	23a0      	movs	r3, #160	@ 0xa0
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	2380      	movs	r3, #128	@ 0x80
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4013      	ands	r3, r2
 80066d8:	d00b      	beq.n	80066f2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2201      	movs	r2, #1
 80066e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2290      	movs	r2, #144	@ 0x90
 80066e6:	589b      	ldr	r3, [r3, r2]
 80066e8:	2201      	movs	r2, #1
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2190      	movs	r1, #144	@ 0x90
 80066f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f2:	23a4      	movs	r3, #164	@ 0xa4
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2202      	movs	r2, #2
 80066fa:	4013      	ands	r3, r2
 80066fc:	d011      	beq.n	8006722 <HAL_UART_IRQHandler+0x102>
 80066fe:	239c      	movs	r3, #156	@ 0x9c
 8006700:	18fb      	adds	r3, r7, r3
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2201      	movs	r2, #1
 8006706:	4013      	ands	r3, r2
 8006708:	d00b      	beq.n	8006722 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2202      	movs	r2, #2
 8006710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2290      	movs	r2, #144	@ 0x90
 8006716:	589b      	ldr	r3, [r3, r2]
 8006718:	2204      	movs	r2, #4
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2190      	movs	r1, #144	@ 0x90
 8006720:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006722:	23a4      	movs	r3, #164	@ 0xa4
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2204      	movs	r2, #4
 800672a:	4013      	ands	r3, r2
 800672c:	d011      	beq.n	8006752 <HAL_UART_IRQHandler+0x132>
 800672e:	239c      	movs	r3, #156	@ 0x9c
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	4013      	ands	r3, r2
 8006738:	d00b      	beq.n	8006752 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2204      	movs	r2, #4
 8006740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2290      	movs	r2, #144	@ 0x90
 8006746:	589b      	ldr	r3, [r3, r2]
 8006748:	2202      	movs	r2, #2
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2190      	movs	r1, #144	@ 0x90
 8006750:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006752:	23a4      	movs	r3, #164	@ 0xa4
 8006754:	18fb      	adds	r3, r7, r3
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2208      	movs	r2, #8
 800675a:	4013      	ands	r3, r2
 800675c:	d017      	beq.n	800678e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800675e:	23a0      	movs	r3, #160	@ 0xa0
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2220      	movs	r2, #32
 8006766:	4013      	ands	r3, r2
 8006768:	d105      	bne.n	8006776 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800676a:	239c      	movs	r3, #156	@ 0x9c
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a5b      	ldr	r2, [pc, #364]	@ (80068e0 <HAL_UART_IRQHandler+0x2c0>)
 8006772:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006774:	d00b      	beq.n	800678e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2208      	movs	r2, #8
 800677c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2290      	movs	r2, #144	@ 0x90
 8006782:	589b      	ldr	r3, [r3, r2]
 8006784:	2208      	movs	r2, #8
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2190      	movs	r1, #144	@ 0x90
 800678c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800678e:	23a4      	movs	r3, #164	@ 0xa4
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	2380      	movs	r3, #128	@ 0x80
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	4013      	ands	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_UART_IRQHandler+0x1a4>
 800679c:	23a0      	movs	r3, #160	@ 0xa0
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	2380      	movs	r3, #128	@ 0x80
 80067a4:	04db      	lsls	r3, r3, #19
 80067a6:	4013      	ands	r3, r2
 80067a8:	d00c      	beq.n	80067c4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2280      	movs	r2, #128	@ 0x80
 80067b0:	0112      	lsls	r2, r2, #4
 80067b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2290      	movs	r2, #144	@ 0x90
 80067b8:	589b      	ldr	r3, [r3, r2]
 80067ba:	2220      	movs	r2, #32
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2190      	movs	r1, #144	@ 0x90
 80067c2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2290      	movs	r2, #144	@ 0x90
 80067c8:	589b      	ldr	r3, [r3, r2]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d100      	bne.n	80067d0 <HAL_UART_IRQHandler+0x1b0>
 80067ce:	e23d      	b.n	8006c4c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067d0:	23a4      	movs	r3, #164	@ 0xa4
 80067d2:	18fb      	adds	r3, r7, r3
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2220      	movs	r2, #32
 80067d8:	4013      	ands	r3, r2
 80067da:	d015      	beq.n	8006808 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067dc:	23a0      	movs	r3, #160	@ 0xa0
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2220      	movs	r2, #32
 80067e4:	4013      	ands	r3, r2
 80067e6:	d106      	bne.n	80067f6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067e8:	239c      	movs	r3, #156	@ 0x9c
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	2380      	movs	r3, #128	@ 0x80
 80067f0:	055b      	lsls	r3, r3, #21
 80067f2:	4013      	ands	r3, r2
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	0010      	movs	r0, r2
 8006806:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2290      	movs	r2, #144	@ 0x90
 800680c:	589b      	ldr	r3, [r3, r2]
 800680e:	2194      	movs	r1, #148	@ 0x94
 8006810:	187a      	adds	r2, r7, r1
 8006812:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2240      	movs	r2, #64	@ 0x40
 800681c:	4013      	ands	r3, r2
 800681e:	2b40      	cmp	r3, #64	@ 0x40
 8006820:	d004      	beq.n	800682c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006822:	187b      	adds	r3, r7, r1
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2228      	movs	r2, #40	@ 0x28
 8006828:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800682a:	d04c      	beq.n	80068c6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0018      	movs	r0, r3
 8006830:	f000 fe5a 	bl	80074e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2240      	movs	r2, #64	@ 0x40
 800683c:	4013      	ands	r3, r2
 800683e:	2b40      	cmp	r3, #64	@ 0x40
 8006840:	d13c      	bne.n	80068bc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006842:	f3ef 8310 	mrs	r3, PRIMASK
 8006846:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684a:	2090      	movs	r0, #144	@ 0x90
 800684c:	183a      	adds	r2, r7, r0
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	2301      	movs	r3, #1
 8006852:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006856:	f383 8810 	msr	PRIMASK, r3
}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2140      	movs	r1, #64	@ 0x40
 8006868:	438a      	bics	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	183b      	adds	r3, r7, r0
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006874:	f383 8810 	msr	PRIMASK, r3
}
 8006878:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2280      	movs	r2, #128	@ 0x80
 800687e:	589b      	ldr	r3, [r3, r2]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d016      	beq.n	80068b2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2280      	movs	r2, #128	@ 0x80
 8006888:	589b      	ldr	r3, [r3, r2]
 800688a:	4a17      	ldr	r2, [pc, #92]	@ (80068e8 <HAL_UART_IRQHandler+0x2c8>)
 800688c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2280      	movs	r2, #128	@ 0x80
 8006892:	589b      	ldr	r3, [r3, r2]
 8006894:	0018      	movs	r0, r3
 8006896:	f7fc fed7 	bl	8003648 <HAL_DMA_Abort_IT>
 800689a:	1e03      	subs	r3, r0, #0
 800689c:	d01c      	beq.n	80068d8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2280      	movs	r2, #128	@ 0x80
 80068a2:	589b      	ldr	r3, [r3, r2]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	2180      	movs	r1, #128	@ 0x80
 80068aa:	5852      	ldr	r2, [r2, r1]
 80068ac:	0010      	movs	r0, r2
 80068ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	e012      	b.n	80068d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f9f1 	bl	8006c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ba:	e00d      	b.n	80068d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	0018      	movs	r0, r3
 80068c0:	f000 f9ec 	bl	8006c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c4:	e008      	b.n	80068d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f000 f9e7 	bl	8006c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2290      	movs	r2, #144	@ 0x90
 80068d2:	2100      	movs	r1, #0
 80068d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80068d6:	e1b9      	b.n	8006c4c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	46c0      	nop			@ (mov r8, r8)
    return;
 80068da:	e1b7      	b.n	8006c4c <HAL_UART_IRQHandler+0x62c>
 80068dc:	0000080f 	.word	0x0000080f
 80068e0:	10000001 	.word	0x10000001
 80068e4:	04000120 	.word	0x04000120
 80068e8:	08007865 	.word	0x08007865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d000      	beq.n	80068f6 <HAL_UART_IRQHandler+0x2d6>
 80068f4:	e13e      	b.n	8006b74 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068f6:	23a4      	movs	r3, #164	@ 0xa4
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2210      	movs	r2, #16
 80068fe:	4013      	ands	r3, r2
 8006900:	d100      	bne.n	8006904 <HAL_UART_IRQHandler+0x2e4>
 8006902:	e137      	b.n	8006b74 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006904:	23a0      	movs	r3, #160	@ 0xa0
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2210      	movs	r2, #16
 800690c:	4013      	ands	r3, r2
 800690e:	d100      	bne.n	8006912 <HAL_UART_IRQHandler+0x2f2>
 8006910:	e130      	b.n	8006b74 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2210      	movs	r2, #16
 8006918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2240      	movs	r2, #64	@ 0x40
 8006922:	4013      	ands	r3, r2
 8006924:	2b40      	cmp	r3, #64	@ 0x40
 8006926:	d000      	beq.n	800692a <HAL_UART_IRQHandler+0x30a>
 8006928:	e0a4      	b.n	8006a74 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2280      	movs	r2, #128	@ 0x80
 800692e:	589b      	ldr	r3, [r3, r2]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	217e      	movs	r1, #126	@ 0x7e
 8006936:	187b      	adds	r3, r7, r1
 8006938:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800693a:	187b      	adds	r3, r7, r1
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d100      	bne.n	8006944 <HAL_UART_IRQHandler+0x324>
 8006942:	e185      	b.n	8006c50 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	225c      	movs	r2, #92	@ 0x5c
 8006948:	5a9b      	ldrh	r3, [r3, r2]
 800694a:	187a      	adds	r2, r7, r1
 800694c:	8812      	ldrh	r2, [r2, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d300      	bcc.n	8006954 <HAL_UART_IRQHandler+0x334>
 8006952:	e17d      	b.n	8006c50 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	187a      	adds	r2, r7, r1
 8006958:	215e      	movs	r1, #94	@ 0x5e
 800695a:	8812      	ldrh	r2, [r2, #0]
 800695c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2280      	movs	r2, #128	@ 0x80
 8006962:	589b      	ldr	r3, [r3, r2]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2220      	movs	r2, #32
 800696a:	4013      	ands	r3, r2
 800696c:	d170      	bne.n	8006a50 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696e:	f3ef 8310 	mrs	r3, PRIMASK
 8006972:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006976:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006978:	2301      	movs	r3, #1
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697e:	f383 8810 	msr	PRIMASK, r3
}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	49b4      	ldr	r1, [pc, #720]	@ (8006c60 <HAL_UART_IRQHandler+0x640>)
 8006990:	400a      	ands	r2, r1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006996:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699a:	f383 8810 	msr	PRIMASK, r3
}
 800699e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80069a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80069aa:	2301      	movs	r3, #1
 80069ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b0:	f383 8810 	msr	PRIMASK, r3
}
 80069b4:	46c0      	nop			@ (mov r8, r8)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2101      	movs	r1, #1
 80069c2:	438a      	bics	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]
 80069c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d2:	f3ef 8310 	mrs	r3, PRIMASK
 80069d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80069d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069da:	673b      	str	r3, [r7, #112]	@ 0x70
 80069dc:	2301      	movs	r3, #1
 80069de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e2:	f383 8810 	msr	PRIMASK, r3
}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2140      	movs	r1, #64	@ 0x40
 80069f4:	438a      	bics	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]
 80069f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069fa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fe:	f383 8810 	msr	PRIMASK, r3
}
 8006a02:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	228c      	movs	r2, #140	@ 0x8c
 8006a08:	2120      	movs	r1, #32
 8006a0a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a12:	f3ef 8310 	mrs	r3, PRIMASK
 8006a16:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a22:	f383 8810 	msr	PRIMASK, r3
}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2110      	movs	r1, #16
 8006a34:	438a      	bics	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a3e:	f383 8810 	msr	PRIMASK, r3
}
 8006a42:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2280      	movs	r2, #128	@ 0x80
 8006a48:	589b      	ldr	r3, [r3, r2]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7fc fd9a 	bl	8003584 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	225c      	movs	r2, #92	@ 0x5c
 8006a5a:	5a9a      	ldrh	r2, [r3, r2]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	215e      	movs	r1, #94	@ 0x5e
 8006a60:	5a5b      	ldrh	r3, [r3, r1]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	0011      	movs	r1, r2
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7fa fa53 	bl	8000f18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a72:	e0ed      	b.n	8006c50 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	225c      	movs	r2, #92	@ 0x5c
 8006a78:	5a99      	ldrh	r1, [r3, r2]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	225e      	movs	r2, #94	@ 0x5e
 8006a7e:	5a9b      	ldrh	r3, [r3, r2]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	208e      	movs	r0, #142	@ 0x8e
 8006a84:	183b      	adds	r3, r7, r0
 8006a86:	1a8a      	subs	r2, r1, r2
 8006a88:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	225e      	movs	r2, #94	@ 0x5e
 8006a8e:	5a9b      	ldrh	r3, [r3, r2]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d100      	bne.n	8006a98 <HAL_UART_IRQHandler+0x478>
 8006a96:	e0dd      	b.n	8006c54 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006a98:	183b      	adds	r3, r7, r0
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d100      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x482>
 8006aa0:	e0d8      	b.n	8006c54 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aaa:	2488      	movs	r4, #136	@ 0x88
 8006aac:	193a      	adds	r2, r7, r4
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f383 8810 	msr	PRIMASK, r3
}
 8006aba:	46c0      	nop			@ (mov r8, r8)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4967      	ldr	r1, [pc, #412]	@ (8006c64 <HAL_UART_IRQHandler+0x644>)
 8006ac8:	400a      	ands	r2, r1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	193b      	adds	r3, r7, r4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f383 8810 	msr	PRIMASK, r3
}
 8006ad8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ada:	f3ef 8310 	mrs	r3, PRIMASK
 8006ade:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ae0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae2:	2484      	movs	r4, #132	@ 0x84
 8006ae4:	193a      	adds	r2, r7, r4
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f383 8810 	msr	PRIMASK, r3
}
 8006af2:	46c0      	nop			@ (mov r8, r8)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	495a      	ldr	r1, [pc, #360]	@ (8006c68 <HAL_UART_IRQHandler+0x648>)
 8006b00:	400a      	ands	r2, r1
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	193b      	adds	r3, r7, r4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	f383 8810 	msr	PRIMASK, r3
}
 8006b10:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	228c      	movs	r2, #140	@ 0x8c
 8006b16:	2120      	movs	r1, #32
 8006b18:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b26:	f3ef 8310 	mrs	r3, PRIMASK
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2e:	2480      	movs	r4, #128	@ 0x80
 8006b30:	193a      	adds	r2, r7, r4
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	2301      	movs	r3, #1
 8006b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	f383 8810 	msr	PRIMASK, r3
}
 8006b3e:	46c0      	nop			@ (mov r8, r8)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2110      	movs	r1, #16
 8006b4c:	438a      	bics	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	193b      	adds	r3, r7, r4
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b58:	f383 8810 	msr	PRIMASK, r3
}
 8006b5c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2202      	movs	r2, #2
 8006b62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b64:	183b      	adds	r3, r7, r0
 8006b66:	881a      	ldrh	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	0011      	movs	r1, r2
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7fa f9d3 	bl	8000f18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b72:	e06f      	b.n	8006c54 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b74:	23a4      	movs	r3, #164	@ 0xa4
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	2380      	movs	r3, #128	@ 0x80
 8006b7c:	035b      	lsls	r3, r3, #13
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d010      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x584>
 8006b82:	239c      	movs	r3, #156	@ 0x9c
 8006b84:	18fb      	adds	r3, r7, r3
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	2380      	movs	r3, #128	@ 0x80
 8006b8a:	03db      	lsls	r3, r3, #15
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2280      	movs	r2, #128	@ 0x80
 8006b96:	0352      	lsls	r2, r2, #13
 8006b98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f000 fea4 	bl	80078ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba2:	e05a      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ba4:	23a4      	movs	r3, #164	@ 0xa4
 8006ba6:	18fb      	adds	r3, r7, r3
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2280      	movs	r2, #128	@ 0x80
 8006bac:	4013      	ands	r3, r2
 8006bae:	d016      	beq.n	8006bde <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006bb0:	23a0      	movs	r3, #160	@ 0xa0
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2280      	movs	r2, #128	@ 0x80
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d106      	bne.n	8006bca <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006bbc:	239c      	movs	r3, #156	@ 0x9c
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	2380      	movs	r3, #128	@ 0x80
 8006bc4:	041b      	lsls	r3, r3, #16
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d042      	beq.n	8006c58 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	0010      	movs	r0, r2
 8006bda:	4798      	blx	r3
    }
    return;
 8006bdc:	e03c      	b.n	8006c58 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bde:	23a4      	movs	r3, #164	@ 0xa4
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2240      	movs	r2, #64	@ 0x40
 8006be6:	4013      	ands	r3, r2
 8006be8:	d00a      	beq.n	8006c00 <HAL_UART_IRQHandler+0x5e0>
 8006bea:	23a0      	movs	r3, #160	@ 0xa0
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2240      	movs	r2, #64	@ 0x40
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d004      	beq.n	8006c00 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 fe4a 	bl	8007892 <UART_EndTransmit_IT>
    return;
 8006bfe:	e02c      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c00:	23a4      	movs	r3, #164	@ 0xa4
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	2380      	movs	r3, #128	@ 0x80
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	d00b      	beq.n	8006c26 <HAL_UART_IRQHandler+0x606>
 8006c0e:	23a0      	movs	r3, #160	@ 0xa0
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	2380      	movs	r3, #128	@ 0x80
 8006c16:	05db      	lsls	r3, r3, #23
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f000 fe73 	bl	800790a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c24:	e019      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c26:	23a4      	movs	r3, #164	@ 0xa4
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	2380      	movs	r3, #128	@ 0x80
 8006c2e:	045b      	lsls	r3, r3, #17
 8006c30:	4013      	ands	r3, r2
 8006c32:	d012      	beq.n	8006c5a <HAL_UART_IRQHandler+0x63a>
 8006c34:	23a0      	movs	r3, #160	@ 0xa0
 8006c36:	18fb      	adds	r3, r7, r3
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da0d      	bge.n	8006c5a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f000 fe5a 	bl	80078fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c46:	e008      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
      return;
 8006c48:	46c0      	nop			@ (mov r8, r8)
 8006c4a:	e006      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
    return;
 8006c4c:	46c0      	nop			@ (mov r8, r8)
 8006c4e:	e004      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
      return;
 8006c50:	46c0      	nop			@ (mov r8, r8)
 8006c52:	e002      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
      return;
 8006c54:	46c0      	nop			@ (mov r8, r8)
 8006c56:	e000      	b.n	8006c5a <HAL_UART_IRQHandler+0x63a>
    return;
 8006c58:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	b02a      	add	sp, #168	@ 0xa8
 8006c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c60:	fffffeff 	.word	0xfffffeff
 8006c64:	fffffedf 	.word	0xfffffedf
 8006c68:	effffffe 	.word	0xeffffffe

08006c6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c74:	46c0      	nop			@ (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b002      	add	sp, #8
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006c84:	46c0      	nop			@ (mov r8, r8)
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b002      	add	sp, #8
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c94:	46c0      	nop			@ (mov r8, r8)
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b002      	add	sp, #8
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ca4:	46c0      	nop			@ (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd80      	pop	{r7, pc}

08006cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cb4:	231a      	movs	r3, #26
 8006cb6:	18fb      	adds	r3, r7, r3
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4aa1      	ldr	r2, [pc, #644]	@ (8006f60 <UART_SetConfig+0x2b4>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	0019      	movs	r1, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4a9c      	ldr	r2, [pc, #624]	@ (8006f64 <UART_SetConfig+0x2b8>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4a93      	ldr	r2, [pc, #588]	@ (8006f68 <UART_SetConfig+0x2bc>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	0019      	movs	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	220f      	movs	r2, #15
 8006d30:	4393      	bics	r3, r2
 8006d32:	0019      	movs	r1, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a89      	ldr	r2, [pc, #548]	@ (8006f6c <UART_SetConfig+0x2c0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d127      	bne.n	8006d9a <UART_SetConfig+0xee>
 8006d4a:	4b89      	ldr	r3, [pc, #548]	@ (8006f70 <UART_SetConfig+0x2c4>)
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4e:	2203      	movs	r2, #3
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d017      	beq.n	8006d86 <UART_SetConfig+0xda>
 8006d56:	d81b      	bhi.n	8006d90 <UART_SetConfig+0xe4>
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d00a      	beq.n	8006d72 <UART_SetConfig+0xc6>
 8006d5c:	d818      	bhi.n	8006d90 <UART_SetConfig+0xe4>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <UART_SetConfig+0xbc>
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d00a      	beq.n	8006d7c <UART_SetConfig+0xd0>
 8006d66:	e013      	b.n	8006d90 <UART_SetConfig+0xe4>
 8006d68:	231b      	movs	r3, #27
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	e021      	b.n	8006db6 <UART_SetConfig+0x10a>
 8006d72:	231b      	movs	r3, #27
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	2202      	movs	r2, #2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	e01c      	b.n	8006db6 <UART_SetConfig+0x10a>
 8006d7c:	231b      	movs	r3, #27
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	2204      	movs	r2, #4
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e017      	b.n	8006db6 <UART_SetConfig+0x10a>
 8006d86:	231b      	movs	r3, #27
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e012      	b.n	8006db6 <UART_SetConfig+0x10a>
 8006d90:	231b      	movs	r3, #27
 8006d92:	18fb      	adds	r3, r7, r3
 8006d94:	2210      	movs	r2, #16
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	e00d      	b.n	8006db6 <UART_SetConfig+0x10a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a75      	ldr	r2, [pc, #468]	@ (8006f74 <UART_SetConfig+0x2c8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d104      	bne.n	8006dae <UART_SetConfig+0x102>
 8006da4:	231b      	movs	r3, #27
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	e003      	b.n	8006db6 <UART_SetConfig+0x10a>
 8006dae:	231b      	movs	r3, #27
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	2210      	movs	r2, #16
 8006db4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69da      	ldr	r2, [r3, #28]
 8006dba:	2380      	movs	r3, #128	@ 0x80
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d000      	beq.n	8006dc4 <UART_SetConfig+0x118>
 8006dc2:	e065      	b.n	8006e90 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8006dc4:	231b      	movs	r3, #27
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d015      	beq.n	8006dfa <UART_SetConfig+0x14e>
 8006dce:	dc18      	bgt.n	8006e02 <UART_SetConfig+0x156>
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d00d      	beq.n	8006df0 <UART_SetConfig+0x144>
 8006dd4:	dc15      	bgt.n	8006e02 <UART_SetConfig+0x156>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <UART_SetConfig+0x134>
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d005      	beq.n	8006dea <UART_SetConfig+0x13e>
 8006dde:	e010      	b.n	8006e02 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de0:	f7fd fe82 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8006de4:	0003      	movs	r3, r0
 8006de6:	617b      	str	r3, [r7, #20]
        break;
 8006de8:	e012      	b.n	8006e10 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dea:	4b63      	ldr	r3, [pc, #396]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006dec:	617b      	str	r3, [r7, #20]
        break;
 8006dee:	e00f      	b.n	8006e10 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006df0:	f7fd fdee 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8006df4:	0003      	movs	r3, r0
 8006df6:	617b      	str	r3, [r7, #20]
        break;
 8006df8:	e00a      	b.n	8006e10 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dfa:	2380      	movs	r3, #128	@ 0x80
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	617b      	str	r3, [r7, #20]
        break;
 8006e00:	e006      	b.n	8006e10 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e06:	231a      	movs	r3, #26
 8006e08:	18fb      	adds	r3, r7, r3
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]
        break;
 8006e0e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d100      	bne.n	8006e18 <UART_SetConfig+0x16c>
 8006e16:	e08d      	b.n	8006f34 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e1c:	4b57      	ldr	r3, [pc, #348]	@ (8006f7c <UART_SetConfig+0x2d0>)
 8006e1e:	0052      	lsls	r2, r2, #1
 8006e20:	5ad3      	ldrh	r3, [r2, r3]
 8006e22:	0019      	movs	r1, r3
 8006e24:	6978      	ldr	r0, [r7, #20]
 8006e26:	f7f9 f96b 	bl	8000100 <__udivsi3>
 8006e2a:	0003      	movs	r3, r0
 8006e2c:	005a      	lsls	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	085b      	lsrs	r3, r3, #1
 8006e34:	18d2      	adds	r2, r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	0010      	movs	r0, r2
 8006e3e:	f7f9 f95f 	bl	8000100 <__udivsi3>
 8006e42:	0003      	movs	r3, r0
 8006e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b0f      	cmp	r3, #15
 8006e4a:	d91c      	bls.n	8006e86 <UART_SetConfig+0x1da>
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	2380      	movs	r3, #128	@ 0x80
 8006e50:	025b      	lsls	r3, r3, #9
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d217      	bcs.n	8006e86 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	200e      	movs	r0, #14
 8006e5c:	183b      	adds	r3, r7, r0
 8006e5e:	210f      	movs	r1, #15
 8006e60:	438a      	bics	r2, r1
 8006e62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2207      	movs	r2, #7
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	b299      	uxth	r1, r3
 8006e70:	183b      	adds	r3, r7, r0
 8006e72:	183a      	adds	r2, r7, r0
 8006e74:	8812      	ldrh	r2, [r2, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	183a      	adds	r2, r7, r0
 8006e80:	8812      	ldrh	r2, [r2, #0]
 8006e82:	60da      	str	r2, [r3, #12]
 8006e84:	e056      	b.n	8006f34 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006e86:	231a      	movs	r3, #26
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	e051      	b.n	8006f34 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e90:	231b      	movs	r3, #27
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d015      	beq.n	8006ec6 <UART_SetConfig+0x21a>
 8006e9a:	dc18      	bgt.n	8006ece <UART_SetConfig+0x222>
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d00d      	beq.n	8006ebc <UART_SetConfig+0x210>
 8006ea0:	dc15      	bgt.n	8006ece <UART_SetConfig+0x222>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <UART_SetConfig+0x200>
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d005      	beq.n	8006eb6 <UART_SetConfig+0x20a>
 8006eaa:	e010      	b.n	8006ece <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eac:	f7fd fe1c 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	0003      	movs	r3, r0
 8006eb2:	617b      	str	r3, [r7, #20]
        break;
 8006eb4:	e012      	b.n	8006edc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb6:	4b30      	ldr	r3, [pc, #192]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006eb8:	617b      	str	r3, [r7, #20]
        break;
 8006eba:	e00f      	b.n	8006edc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebc:	f7fd fd88 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	617b      	str	r3, [r7, #20]
        break;
 8006ec4:	e00a      	b.n	8006edc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	2380      	movs	r3, #128	@ 0x80
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	617b      	str	r3, [r7, #20]
        break;
 8006ecc:	e006      	b.n	8006edc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ed2:	231a      	movs	r3, #26
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
        break;
 8006eda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d028      	beq.n	8006f34 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ee6:	4b25      	ldr	r3, [pc, #148]	@ (8006f7c <UART_SetConfig+0x2d0>)
 8006ee8:	0052      	lsls	r2, r2, #1
 8006eea:	5ad3      	ldrh	r3, [r2, r3]
 8006eec:	0019      	movs	r1, r3
 8006eee:	6978      	ldr	r0, [r7, #20]
 8006ef0:	f7f9 f906 	bl	8000100 <__udivsi3>
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	18d2      	adds	r2, r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	0019      	movs	r1, r3
 8006f06:	0010      	movs	r0, r2
 8006f08:	f7f9 f8fa 	bl	8000100 <__udivsi3>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b0f      	cmp	r3, #15
 8006f14:	d90a      	bls.n	8006f2c <UART_SetConfig+0x280>
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	2380      	movs	r3, #128	@ 0x80
 8006f1a:	025b      	lsls	r3, r3, #9
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d205      	bcs.n	8006f2c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	e003      	b.n	8006f34 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2c:	231a      	movs	r3, #26
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	2201      	movs	r2, #1
 8006f32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	226a      	movs	r2, #106	@ 0x6a
 8006f38:	2101      	movs	r1, #1
 8006f3a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2268      	movs	r2, #104	@ 0x68
 8006f40:	2101      	movs	r1, #1
 8006f42:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f50:	231a      	movs	r3, #26
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	781b      	ldrb	r3, [r3, #0]
}
 8006f56:	0018      	movs	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b008      	add	sp, #32
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	46c0      	nop			@ (mov r8, r8)
 8006f60:	cfff69f3 	.word	0xcfff69f3
 8006f64:	ffffcfff 	.word	0xffffcfff
 8006f68:	11fff4ff 	.word	0x11fff4ff
 8006f6c:	40013800 	.word	0x40013800
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40004400 	.word	0x40004400
 8006f78:	00f42400 	.word	0x00f42400
 8006f7c:	08007d88 	.word	0x08007d88

08006f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d00b      	beq.n	8006faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a4a      	ldr	r2, [pc, #296]	@ (80070c4 <UART_AdvFeatureConfig+0x144>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	0019      	movs	r1, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4a43      	ldr	r2, [pc, #268]	@ (80070c8 <UART_AdvFeatureConfig+0x148>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	0019      	movs	r1, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80070cc <UART_AdvFeatureConfig+0x14c>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4a34      	ldr	r2, [pc, #208]	@ (80070d0 <UART_AdvFeatureConfig+0x150>)
 8007000:	4013      	ands	r3, r2
 8007002:	0019      	movs	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	2210      	movs	r2, #16
 8007016:	4013      	ands	r3, r2
 8007018:	d00b      	beq.n	8007032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <UART_AdvFeatureConfig+0x154>)
 8007022:	4013      	ands	r3, r2
 8007024:	0019      	movs	r1, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	2220      	movs	r2, #32
 8007038:	4013      	ands	r3, r2
 800703a:	d00b      	beq.n	8007054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4a25      	ldr	r2, [pc, #148]	@ (80070d8 <UART_AdvFeatureConfig+0x158>)
 8007044:	4013      	ands	r3, r2
 8007046:	0019      	movs	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	2240      	movs	r2, #64	@ 0x40
 800705a:	4013      	ands	r3, r2
 800705c:	d01d      	beq.n	800709a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a1d      	ldr	r2, [pc, #116]	@ (80070dc <UART_AdvFeatureConfig+0x15c>)
 8007066:	4013      	ands	r3, r2
 8007068:	0019      	movs	r1, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800707a:	2380      	movs	r3, #128	@ 0x80
 800707c:	035b      	lsls	r3, r3, #13
 800707e:	429a      	cmp	r2, r3
 8007080:	d10b      	bne.n	800709a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <UART_AdvFeatureConfig+0x160>)
 800708a:	4013      	ands	r3, r2
 800708c:	0019      	movs	r1, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	2280      	movs	r2, #128	@ 0x80
 80070a0:	4013      	ands	r3, r2
 80070a2:	d00b      	beq.n	80070bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4a0e      	ldr	r2, [pc, #56]	@ (80070e4 <UART_AdvFeatureConfig+0x164>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	0019      	movs	r1, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }
}
 80070bc:	46c0      	nop			@ (mov r8, r8)
 80070be:	46bd      	mov	sp, r7
 80070c0:	b002      	add	sp, #8
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	ffff7fff 	.word	0xffff7fff
 80070c8:	fffdffff 	.word	0xfffdffff
 80070cc:	fffeffff 	.word	0xfffeffff
 80070d0:	fffbffff 	.word	0xfffbffff
 80070d4:	ffffefff 	.word	0xffffefff
 80070d8:	ffffdfff 	.word	0xffffdfff
 80070dc:	ffefffff 	.word	0xffefffff
 80070e0:	ff9fffff 	.word	0xff9fffff
 80070e4:	fff7ffff 	.word	0xfff7ffff

080070e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b092      	sub	sp, #72	@ 0x48
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2290      	movs	r2, #144	@ 0x90
 80070f4:	2100      	movs	r1, #0
 80070f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f8:	f7fa feb0 	bl	8001e5c <HAL_GetTick>
 80070fc:	0003      	movs	r3, r0
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2208      	movs	r2, #8
 8007108:	4013      	ands	r3, r2
 800710a:	2b08      	cmp	r3, #8
 800710c:	d12d      	bne.n	800716a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007110:	2280      	movs	r2, #128	@ 0x80
 8007112:	0391      	lsls	r1, r2, #14
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4a47      	ldr	r2, [pc, #284]	@ (8007234 <UART_CheckIdleState+0x14c>)
 8007118:	9200      	str	r2, [sp, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	f000 f88e 	bl	800723c <UART_WaitOnFlagUntilTimeout>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d022      	beq.n	800716a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007124:	f3ef 8310 	mrs	r3, PRIMASK
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800712c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800712e:	2301      	movs	r3, #1
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			@ (mov r8, r8)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2180      	movs	r1, #128	@ 0x80
 8007146:	438a      	bics	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2288      	movs	r2, #136	@ 0x88
 800715a:	2120      	movs	r1, #32
 800715c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2284      	movs	r2, #132	@ 0x84
 8007162:	2100      	movs	r1, #0
 8007164:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e060      	b.n	800722c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2204      	movs	r2, #4
 8007172:	4013      	ands	r3, r2
 8007174:	2b04      	cmp	r3, #4
 8007176:	d146      	bne.n	8007206 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717a:	2280      	movs	r2, #128	@ 0x80
 800717c:	03d1      	lsls	r1, r2, #15
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <UART_CheckIdleState+0x14c>)
 8007182:	9200      	str	r2, [sp, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	f000 f859 	bl	800723c <UART_WaitOnFlagUntilTimeout>
 800718a:	1e03      	subs	r3, r0, #0
 800718c:	d03b      	beq.n	8007206 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718e:	f3ef 8310 	mrs	r3, PRIMASK
 8007192:	60fb      	str	r3, [r7, #12]
  return(result);
 8007194:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
 8007198:	2301      	movs	r3, #1
 800719a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f383 8810 	msr	PRIMASK, r3
}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4922      	ldr	r1, [pc, #136]	@ (8007238 <UART_CheckIdleState+0x150>)
 80071b0:	400a      	ands	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f383 8810 	msr	PRIMASK, r3
}
 80071be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c0:	f3ef 8310 	mrs	r3, PRIMASK
 80071c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80071c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ca:	2301      	movs	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f383 8810 	msr	PRIMASK, r3
}
 80071d4:	46c0      	nop			@ (mov r8, r8)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2101      	movs	r1, #1
 80071e2:	438a      	bics	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f383 8810 	msr	PRIMASK, r3
}
 80071f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	228c      	movs	r2, #140	@ 0x8c
 80071f6:	2120      	movs	r1, #32
 80071f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2284      	movs	r2, #132	@ 0x84
 80071fe:	2100      	movs	r1, #0
 8007200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e012      	b.n	800722c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2288      	movs	r2, #136	@ 0x88
 800720a:	2120      	movs	r1, #32
 800720c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	228c      	movs	r2, #140	@ 0x8c
 8007212:	2120      	movs	r1, #32
 8007214:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2284      	movs	r2, #132	@ 0x84
 8007226:	2100      	movs	r1, #0
 8007228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b010      	add	sp, #64	@ 0x40
 8007232:	bd80      	pop	{r7, pc}
 8007234:	01ffffff 	.word	0x01ffffff
 8007238:	fffffedf 	.word	0xfffffedf

0800723c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	1dfb      	adds	r3, r7, #7
 800724a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800724c:	e051      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	3301      	adds	r3, #1
 8007252:	d04e      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007254:	f7fa fe02 	bl	8001e5c <HAL_GetTick>
 8007258:	0002      	movs	r2, r0
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e051      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2204      	movs	r2, #4
 8007276:	4013      	ands	r3, r2
 8007278:	d03b      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b80      	cmp	r3, #128	@ 0x80
 800727e:	d038      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b40      	cmp	r3, #64	@ 0x40
 8007284:	d035      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	2208      	movs	r2, #8
 800728e:	4013      	ands	r3, r2
 8007290:	2b08      	cmp	r3, #8
 8007292:	d111      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 f922 	bl	80074e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2290      	movs	r2, #144	@ 0x90
 80072a8:	2108      	movs	r1, #8
 80072aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2284      	movs	r2, #132	@ 0x84
 80072b0:	2100      	movs	r1, #0
 80072b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e02c      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	401a      	ands	r2, r3
 80072c4:	2380      	movs	r3, #128	@ 0x80
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d112      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2280      	movs	r2, #128	@ 0x80
 80072d2:	0112      	lsls	r2, r2, #4
 80072d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0018      	movs	r0, r3
 80072da:	f000 f905 	bl	80074e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2290      	movs	r2, #144	@ 0x90
 80072e2:	2120      	movs	r1, #32
 80072e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2284      	movs	r2, #132	@ 0x84
 80072ea:	2100      	movs	r1, #0
 80072ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	425a      	negs	r2, r3
 8007302:	4153      	adcs	r3, r2
 8007304:	b2db      	uxtb	r3, r3
 8007306:	001a      	movs	r2, r3
 8007308:	1dfb      	adds	r3, r7, #7
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d09e      	beq.n	800724e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	0018      	movs	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	b004      	add	sp, #16
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b090      	sub	sp, #64	@ 0x40
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	1dbb      	adds	r3, r7, #6
 8007328:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	1dba      	adds	r2, r7, #6
 8007334:	215c      	movs	r1, #92	@ 0x5c
 8007336:	8812      	ldrh	r2, [r2, #0]
 8007338:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2290      	movs	r2, #144	@ 0x90
 800733e:	2100      	movs	r1, #0
 8007340:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	228c      	movs	r2, #140	@ 0x8c
 8007346:	2122      	movs	r1, #34	@ 0x22
 8007348:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2280      	movs	r2, #128	@ 0x80
 800734e:	589b      	ldr	r3, [r3, r2]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d02d      	beq.n	80073b0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2280      	movs	r2, #128	@ 0x80
 8007358:	589b      	ldr	r3, [r3, r2]
 800735a:	4a40      	ldr	r2, [pc, #256]	@ (800745c <UART_Start_Receive_DMA+0x140>)
 800735c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2280      	movs	r2, #128	@ 0x80
 8007362:	589b      	ldr	r3, [r3, r2]
 8007364:	4a3e      	ldr	r2, [pc, #248]	@ (8007460 <UART_Start_Receive_DMA+0x144>)
 8007366:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2280      	movs	r2, #128	@ 0x80
 800736c:	589b      	ldr	r3, [r3, r2]
 800736e:	4a3d      	ldr	r2, [pc, #244]	@ (8007464 <UART_Start_Receive_DMA+0x148>)
 8007370:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2280      	movs	r2, #128	@ 0x80
 8007376:	589b      	ldr	r3, [r3, r2]
 8007378:	2200      	movs	r2, #0
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2280      	movs	r2, #128	@ 0x80
 8007380:	5898      	ldr	r0, [r3, r2]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3324      	adds	r3, #36	@ 0x24
 8007388:	0019      	movs	r1, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800738e:	001a      	movs	r2, r3
 8007390:	1dbb      	adds	r3, r7, #6
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	f7fc f870 	bl	8003478 <HAL_DMA_Start_IT>
 8007398:	1e03      	subs	r3, r0, #0
 800739a:	d009      	beq.n	80073b0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2290      	movs	r2, #144	@ 0x90
 80073a0:	2110      	movs	r1, #16
 80073a2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	228c      	movs	r2, #140	@ 0x8c
 80073a8:	2120      	movs	r1, #32
 80073aa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e050      	b.n	8007452 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d019      	beq.n	80073ec <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b8:	f3ef 8310 	mrs	r3, PRIMASK
 80073bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80073be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c2:	2301      	movs	r3, #1
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c8:	f383 8810 	msr	PRIMASK, r3
}
 80073cc:	46c0      	nop			@ (mov r8, r8)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2180      	movs	r1, #128	@ 0x80
 80073da:	0049      	lsls	r1, r1, #1
 80073dc:	430a      	orrs	r2, r1
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e6:	f383 8810 	msr	PRIMASK, r3
}
 80073ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ec:	f3ef 8310 	mrs	r3, PRIMASK
 80073f0:	613b      	str	r3, [r7, #16]
  return(result);
 80073f2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073f6:	2301      	movs	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f383 8810 	msr	PRIMASK, r3
}
 8007400:	46c0      	nop			@ (mov r8, r8)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2101      	movs	r1, #1
 800740e:	430a      	orrs	r2, r1
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f383 8810 	msr	PRIMASK, r3
}
 800741c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800741e:	f3ef 8310 	mrs	r3, PRIMASK
 8007422:	61fb      	str	r3, [r7, #28]
  return(result);
 8007424:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007426:	637b      	str	r3, [r7, #52]	@ 0x34
 8007428:	2301      	movs	r3, #1
 800742a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	f383 8810 	msr	PRIMASK, r3
}
 8007432:	46c0      	nop			@ (mov r8, r8)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2140      	movs	r1, #64	@ 0x40
 8007440:	430a      	orrs	r2, r1
 8007442:	609a      	str	r2, [r3, #8]
 8007444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	f383 8810 	msr	PRIMASK, r3
}
 800744e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	0018      	movs	r0, r3
 8007454:	46bd      	mov	sp, r7
 8007456:	b010      	add	sp, #64	@ 0x40
 8007458:	bd80      	pop	{r7, pc}
 800745a:	46c0      	nop			@ (mov r8, r8)
 800745c:	0800766d 	.word	0x0800766d
 8007460:	0800779d 	.word	0x0800779d
 8007464:	080077df 	.word	0x080077df

08007468 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	@ 0x28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007470:	f3ef 8310 	mrs	r3, PRIMASK
 8007474:	60bb      	str	r3, [r7, #8]
  return(result);
 8007476:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
 800747a:	2301      	movs	r3, #1
 800747c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f383 8810 	msr	PRIMASK, r3
}
 8007484:	46c0      	nop			@ (mov r8, r8)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	21c0      	movs	r1, #192	@ 0xc0
 8007492:	438a      	bics	r2, r1
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f383 8810 	msr	PRIMASK, r3
}
 80074a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a2:	f3ef 8310 	mrs	r3, PRIMASK
 80074a6:	617b      	str	r3, [r7, #20]
  return(result);
 80074a8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80074aa:	623b      	str	r3, [r7, #32]
 80074ac:	2301      	movs	r3, #1
 80074ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f383 8810 	msr	PRIMASK, r3
}
 80074b6:	46c0      	nop			@ (mov r8, r8)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4908      	ldr	r1, [pc, #32]	@ (80074e4 <UART_EndTxTransfer+0x7c>)
 80074c4:	400a      	ands	r2, r1
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f383 8810 	msr	PRIMASK, r3
}
 80074d2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2288      	movs	r2, #136	@ 0x88
 80074d8:	2120      	movs	r1, #32
 80074da:	5099      	str	r1, [r3, r2]
}
 80074dc:	46c0      	nop			@ (mov r8, r8)
 80074de:	46bd      	mov	sp, r7
 80074e0:	b00a      	add	sp, #40	@ 0x28
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	ff7fffff 	.word	0xff7fffff

080074e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	@ 0x38
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f0:	f3ef 8310 	mrs	r3, PRIMASK
 80074f4:	617b      	str	r3, [r7, #20]
  return(result);
 80074f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074fa:	2301      	movs	r3, #1
 80074fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f383 8810 	msr	PRIMASK, r3
}
 8007504:	46c0      	nop			@ (mov r8, r8)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4926      	ldr	r1, [pc, #152]	@ (80075ac <UART_EndRxTransfer+0xc4>)
 8007512:	400a      	ands	r2, r1
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f383 8810 	msr	PRIMASK, r3
}
 8007520:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007522:	f3ef 8310 	mrs	r3, PRIMASK
 8007526:	623b      	str	r3, [r7, #32]
  return(result);
 8007528:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800752a:	633b      	str	r3, [r7, #48]	@ 0x30
 800752c:	2301      	movs	r3, #1
 800752e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	f383 8810 	msr	PRIMASK, r3
}
 8007536:	46c0      	nop			@ (mov r8, r8)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	491b      	ldr	r1, [pc, #108]	@ (80075b0 <UART_EndRxTransfer+0xc8>)
 8007544:	400a      	ands	r2, r1
 8007546:	609a      	str	r2, [r3, #8]
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	f383 8810 	msr	PRIMASK, r3
}
 8007552:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d118      	bne.n	800758e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800755c:	f3ef 8310 	mrs	r3, PRIMASK
 8007560:	60bb      	str	r3, [r7, #8]
  return(result);
 8007562:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007566:	2301      	movs	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f383 8810 	msr	PRIMASK, r3
}
 8007570:	46c0      	nop			@ (mov r8, r8)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2110      	movs	r1, #16
 800757e:	438a      	bics	r2, r1
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f383 8810 	msr	PRIMASK, r3
}
 800758c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	228c      	movs	r2, #140	@ 0x8c
 8007592:	2120      	movs	r1, #32
 8007594:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b00e      	add	sp, #56	@ 0x38
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	46c0      	nop			@ (mov r8, r8)
 80075ac:	fffffedf 	.word	0xfffffedf
 80075b0:	effffffe 	.word	0xeffffffe

080075b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08c      	sub	sp, #48	@ 0x30
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2220      	movs	r2, #32
 80075ca:	4013      	ands	r3, r2
 80075cc:	d135      	bne.n	800763a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80075ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d0:	2256      	movs	r2, #86	@ 0x56
 80075d2:	2100      	movs	r1, #0
 80075d4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d6:	f3ef 8310 	mrs	r3, PRIMASK
 80075da:	60fb      	str	r3, [r7, #12]
  return(result);
 80075dc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075e0:	2301      	movs	r3, #1
 80075e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f383 8810 	msr	PRIMASK, r3
}
 80075ea:	46c0      	nop			@ (mov r8, r8)
 80075ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2180      	movs	r1, #128	@ 0x80
 80075f8:	438a      	bics	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]
 80075fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f383 8810 	msr	PRIMASK, r3
}
 8007606:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007608:	f3ef 8310 	mrs	r3, PRIMASK
 800760c:	61bb      	str	r3, [r7, #24]
  return(result);
 800760e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24
 8007612:	2301      	movs	r3, #1
 8007614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	f383 8810 	msr	PRIMASK, r3
}
 800761c:	46c0      	nop			@ (mov r8, r8)
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2140      	movs	r1, #64	@ 0x40
 800762a:	430a      	orrs	r2, r1
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	f383 8810 	msr	PRIMASK, r3
}
 8007638:	e004      	b.n	8007644 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	0018      	movs	r0, r3
 800763e:	f7f9 fc2f 	bl	8000ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007642:	46c0      	nop			@ (mov r8, r8)
 8007644:	46c0      	nop			@ (mov r8, r8)
 8007646:	46bd      	mov	sp, r7
 8007648:	b00c      	add	sp, #48	@ 0x30
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	0018      	movs	r0, r3
 800765e:	f7ff fb05 	bl	8006c6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007662:	46c0      	nop			@ (mov r8, r8)
 8007664:	46bd      	mov	sp, r7
 8007666:	b004      	add	sp, #16
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b094      	sub	sp, #80	@ 0x50
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2220      	movs	r2, #32
 8007682:	4013      	ands	r3, r2
 8007684:	d16f      	bne.n	8007766 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007688:	225e      	movs	r2, #94	@ 0x5e
 800768a:	2100      	movs	r1, #0
 800768c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768e:	f3ef 8310 	mrs	r3, PRIMASK
 8007692:	61bb      	str	r3, [r7, #24]
  return(result);
 8007694:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007698:	2301      	movs	r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f383 8810 	msr	PRIMASK, r3
}
 80076a2:	46c0      	nop			@ (mov r8, r8)
 80076a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	493a      	ldr	r1, [pc, #232]	@ (8007798 <UART_DMAReceiveCplt+0x12c>)
 80076b0:	400a      	ands	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c0:	f3ef 8310 	mrs	r3, PRIMASK
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ca:	2301      	movs	r3, #1
 80076cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	f383 8810 	msr	PRIMASK, r3
}
 80076d4:	46c0      	nop			@ (mov r8, r8)
 80076d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2101      	movs	r1, #1
 80076e2:	438a      	bics	r2, r1
 80076e4:	609a      	str	r2, [r3, #8]
 80076e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ec:	f383 8810 	msr	PRIMASK, r3
}
 80076f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f2:	f3ef 8310 	mrs	r3, PRIMASK
 80076f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80076fc:	2301      	movs	r3, #1
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007702:	f383 8810 	msr	PRIMASK, r3
}
 8007706:	46c0      	nop			@ (mov r8, r8)
 8007708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2140      	movs	r1, #64	@ 0x40
 8007714:	438a      	bics	r2, r1
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800771a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	f383 8810 	msr	PRIMASK, r3
}
 8007722:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007726:	228c      	movs	r2, #140	@ 0x8c
 8007728:	2120      	movs	r1, #32
 800772a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d118      	bne.n	8007766 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007734:	f3ef 8310 	mrs	r3, PRIMASK
 8007738:	60fb      	str	r3, [r7, #12]
  return(result);
 800773a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800773e:	2301      	movs	r3, #1
 8007740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f383 8810 	msr	PRIMASK, r3
}
 8007748:	46c0      	nop			@ (mov r8, r8)
 800774a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2110      	movs	r1, #16
 8007756:	438a      	bics	r2, r1
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800775c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f383 8810 	msr	PRIMASK, r3
}
 8007764:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007768:	2200      	movs	r2, #0
 800776a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d108      	bne.n	8007786 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007776:	225c      	movs	r2, #92	@ 0x5c
 8007778:	5a9a      	ldrh	r2, [r3, r2]
 800777a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800777c:	0011      	movs	r1, r2
 800777e:	0018      	movs	r0, r3
 8007780:	f7f9 fbca 	bl	8000f18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007784:	e003      	b.n	800778e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8007786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007788:	0018      	movs	r0, r3
 800778a:	f7ff fa77 	bl	8006c7c <HAL_UART_RxCpltCallback>
}
 800778e:	46c0      	nop			@ (mov r8, r8)
 8007790:	46bd      	mov	sp, r7
 8007792:	b014      	add	sp, #80	@ 0x50
 8007794:	bd80      	pop	{r7, pc}
 8007796:	46c0      	nop			@ (mov r8, r8)
 8007798:	fffffeff 	.word	0xfffffeff

0800779c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d10a      	bne.n	80077ce <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	225c      	movs	r2, #92	@ 0x5c
 80077bc:	5a9b      	ldrh	r3, [r3, r2]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	0011      	movs	r1, r2
 80077c6:	0018      	movs	r0, r3
 80077c8:	f7f9 fba6 	bl	8000f18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077cc:	e003      	b.n	80077d6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	0018      	movs	r0, r3
 80077d2:	f7ff fa5b 	bl	8006c8c <HAL_UART_RxHalfCpltCallback>
}
 80077d6:	46c0      	nop			@ (mov r8, r8)
 80077d8:	46bd      	mov	sp, r7
 80077da:	b004      	add	sp, #16
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2288      	movs	r2, #136	@ 0x88
 80077f0:	589b      	ldr	r3, [r3, r2]
 80077f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	228c      	movs	r2, #140	@ 0x8c
 80077f8:	589b      	ldr	r3, [r3, r2]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	2280      	movs	r2, #128	@ 0x80
 8007804:	4013      	ands	r3, r2
 8007806:	2b80      	cmp	r3, #128	@ 0x80
 8007808:	d10a      	bne.n	8007820 <UART_DMAError+0x42>
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b21      	cmp	r3, #33	@ 0x21
 800780e:	d107      	bne.n	8007820 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2256      	movs	r2, #86	@ 0x56
 8007814:	2100      	movs	r1, #0
 8007816:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	0018      	movs	r0, r3
 800781c:	f7ff fe24 	bl	8007468 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2240      	movs	r2, #64	@ 0x40
 8007828:	4013      	ands	r3, r2
 800782a:	2b40      	cmp	r3, #64	@ 0x40
 800782c:	d10a      	bne.n	8007844 <UART_DMAError+0x66>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b22      	cmp	r3, #34	@ 0x22
 8007832:	d107      	bne.n	8007844 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	225e      	movs	r2, #94	@ 0x5e
 8007838:	2100      	movs	r1, #0
 800783a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	0018      	movs	r0, r3
 8007840:	f7ff fe52 	bl	80074e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2290      	movs	r2, #144	@ 0x90
 8007848:	589b      	ldr	r3, [r3, r2]
 800784a:	2210      	movs	r2, #16
 800784c:	431a      	orrs	r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2190      	movs	r1, #144	@ 0x90
 8007852:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	0018      	movs	r0, r3
 8007858:	f7ff fa20 	bl	8006c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800785c:	46c0      	nop			@ (mov r8, r8)
 800785e:	46bd      	mov	sp, r7
 8007860:	b006      	add	sp, #24
 8007862:	bd80      	pop	{r7, pc}

08007864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	225e      	movs	r2, #94	@ 0x5e
 8007876:	2100      	movs	r1, #0
 8007878:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2256      	movs	r2, #86	@ 0x56
 800787e:	2100      	movs	r1, #0
 8007880:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	0018      	movs	r0, r3
 8007886:	f7ff fa09 	bl	8006c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788a:	46c0      	nop			@ (mov r8, r8)
 800788c:	46bd      	mov	sp, r7
 800788e:	b004      	add	sp, #16
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789a:	f3ef 8310 	mrs	r3, PRIMASK
 800789e:	60bb      	str	r3, [r7, #8]
  return(result);
 80078a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	2301      	movs	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f383 8810 	msr	PRIMASK, r3
}
 80078ae:	46c0      	nop			@ (mov r8, r8)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2140      	movs	r1, #64	@ 0x40
 80078bc:	438a      	bics	r2, r1
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f383 8810 	msr	PRIMASK, r3
}
 80078ca:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2288      	movs	r2, #136	@ 0x88
 80078d0:	2120      	movs	r1, #32
 80078d2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	0018      	movs	r0, r3
 80078de:	f7f9 fadf 	bl	8000ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b006      	add	sp, #24
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	46bd      	mov	sp, r7
 80078f6:	b002      	add	sp, #8
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	46bd      	mov	sp, r7
 8007906:	b002      	add	sp, #8
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	46bd      	mov	sp, r7
 8007916:	b002      	add	sp, #8
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2284      	movs	r2, #132	@ 0x84
 8007928:	5c9b      	ldrb	r3, [r3, r2]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_UARTEx_DisableFifoMode+0x16>
 800792e:	2302      	movs	r3, #2
 8007930:	e027      	b.n	8007982 <HAL_UARTEx_DisableFifoMode+0x66>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2284      	movs	r2, #132	@ 0x84
 8007936:	2101      	movs	r1, #1
 8007938:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2288      	movs	r2, #136	@ 0x88
 800793e:	2124      	movs	r1, #36	@ 0x24
 8007940:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2101      	movs	r1, #1
 8007956:	438a      	bics	r2, r1
 8007958:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4a0b      	ldr	r2, [pc, #44]	@ (800798c <HAL_UARTEx_DisableFifoMode+0x70>)
 800795e:	4013      	ands	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2288      	movs	r2, #136	@ 0x88
 8007974:	2120      	movs	r1, #32
 8007976:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2284      	movs	r2, #132	@ 0x84
 800797c:	2100      	movs	r1, #0
 800797e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	0018      	movs	r0, r3
 8007984:	46bd      	mov	sp, r7
 8007986:	b004      	add	sp, #16
 8007988:	bd80      	pop	{r7, pc}
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	dfffffff 	.word	0xdfffffff

08007990 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2284      	movs	r2, #132	@ 0x84
 800799e:	5c9b      	ldrb	r3, [r3, r2]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e02e      	b.n	8007a06 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2284      	movs	r2, #132	@ 0x84
 80079ac:	2101      	movs	r1, #1
 80079ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2288      	movs	r2, #136	@ 0x88
 80079b4:	2124      	movs	r1, #36	@ 0x24
 80079b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2101      	movs	r1, #1
 80079cc:	438a      	bics	r2, r1
 80079ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	08d9      	lsrs	r1, r3, #3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	0018      	movs	r0, r3
 80079e8:	f000 f8bc 	bl	8007b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2288      	movs	r2, #136	@ 0x88
 80079f8:	2120      	movs	r1, #32
 80079fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2284      	movs	r2, #132	@ 0x84
 8007a00:	2100      	movs	r1, #0
 8007a02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	0018      	movs	r0, r3
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	b004      	add	sp, #16
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2284      	movs	r2, #132	@ 0x84
 8007a1e:	5c9b      	ldrb	r3, [r3, r2]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e02f      	b.n	8007a88 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2284      	movs	r2, #132	@ 0x84
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2288      	movs	r2, #136	@ 0x88
 8007a34:	2124      	movs	r1, #36	@ 0x24
 8007a36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	438a      	bics	r2, r1
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	@ (8007a90 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	0019      	movs	r1, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f000 f87b 	bl	8007b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2288      	movs	r2, #136	@ 0x88
 8007a7a:	2120      	movs	r1, #32
 8007a7c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2284      	movs	r2, #132	@ 0x84
 8007a82:	2100      	movs	r1, #0
 8007a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	0018      	movs	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b004      	add	sp, #16
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	f1ffffff 	.word	0xf1ffffff

08007a94 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a94:	b5b0      	push	{r4, r5, r7, lr}
 8007a96:	b08a      	sub	sp, #40	@ 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	1dbb      	adds	r3, r7, #6
 8007aa0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	228c      	movs	r2, #140	@ 0x8c
 8007aa6:	589b      	ldr	r3, [r3, r2]
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d156      	bne.n	8007b5a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007ab2:	1dbb      	adds	r3, r7, #6
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e04e      	b.n	8007b5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	2380      	movs	r3, #128	@ 0x80
 8007ac4:	015b      	lsls	r3, r3, #5
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d109      	bne.n	8007ade <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d001      	beq.n	8007ade <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e03e      	b.n	8007b5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007aea:	2527      	movs	r5, #39	@ 0x27
 8007aec:	197c      	adds	r4, r7, r5
 8007aee:	1dbb      	adds	r3, r7, #6
 8007af0:	881a      	ldrh	r2, [r3, #0]
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	0018      	movs	r0, r3
 8007af8:	f7ff fc10 	bl	800731c <UART_Start_Receive_DMA>
 8007afc:	0003      	movs	r3, r0
 8007afe:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007b00:	197b      	adds	r3, r7, r5
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d124      	bne.n	8007b52 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d11c      	bne.n	8007b4a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2210      	movs	r2, #16
 8007b16:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b18:	f3ef 8310 	mrs	r3, PRIMASK
 8007b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b1e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	2301      	movs	r3, #1
 8007b24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	f383 8810 	msr	PRIMASK, r3
}
 8007b2c:	46c0      	nop			@ (mov r8, r8)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2110      	movs	r1, #16
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f383 8810 	msr	PRIMASK, r3
}
 8007b48:	e003      	b.n	8007b52 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007b4a:	2327      	movs	r3, #39	@ 0x27
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8007b52:	2327      	movs	r3, #39	@ 0x27
 8007b54:	18fb      	adds	r3, r7, r3
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	e000      	b.n	8007b5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007b5a:	2302      	movs	r3, #2
  }
}
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b00a      	add	sp, #40	@ 0x28
 8007b62:	bdb0      	pop	{r4, r5, r7, pc}

08007b64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d108      	bne.n	8007b86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	226a      	movs	r2, #106	@ 0x6a
 8007b78:	2101      	movs	r1, #1
 8007b7a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2268      	movs	r2, #104	@ 0x68
 8007b80:	2101      	movs	r1, #1
 8007b82:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b84:	e043      	b.n	8007c0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b86:	260f      	movs	r6, #15
 8007b88:	19bb      	adds	r3, r7, r6
 8007b8a:	2208      	movs	r2, #8
 8007b8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b8e:	200e      	movs	r0, #14
 8007b90:	183b      	adds	r3, r7, r0
 8007b92:	2208      	movs	r2, #8
 8007b94:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	0e5b      	lsrs	r3, r3, #25
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	240d      	movs	r4, #13
 8007ba2:	193b      	adds	r3, r7, r4
 8007ba4:	2107      	movs	r1, #7
 8007ba6:	400a      	ands	r2, r1
 8007ba8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	0f5b      	lsrs	r3, r3, #29
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	250c      	movs	r5, #12
 8007bb6:	197b      	adds	r3, r7, r5
 8007bb8:	2107      	movs	r1, #7
 8007bba:	400a      	ands	r2, r1
 8007bbc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bbe:	183b      	adds	r3, r7, r0
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	197a      	adds	r2, r7, r5
 8007bc4:	7812      	ldrb	r2, [r2, #0]
 8007bc6:	4914      	ldr	r1, [pc, #80]	@ (8007c18 <UARTEx_SetNbDataToProcess+0xb4>)
 8007bc8:	5c8a      	ldrb	r2, [r1, r2]
 8007bca:	435a      	muls	r2, r3
 8007bcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bce:	197b      	adds	r3, r7, r5
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	4a12      	ldr	r2, [pc, #72]	@ (8007c1c <UARTEx_SetNbDataToProcess+0xb8>)
 8007bd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd6:	0019      	movs	r1, r3
 8007bd8:	f7f8 fb1c 	bl	8000214 <__divsi3>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	b299      	uxth	r1, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	226a      	movs	r2, #106	@ 0x6a
 8007be4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007be6:	19bb      	adds	r3, r7, r6
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	193a      	adds	r2, r7, r4
 8007bec:	7812      	ldrb	r2, [r2, #0]
 8007bee:	490a      	ldr	r1, [pc, #40]	@ (8007c18 <UARTEx_SetNbDataToProcess+0xb4>)
 8007bf0:	5c8a      	ldrb	r2, [r1, r2]
 8007bf2:	435a      	muls	r2, r3
 8007bf4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bf6:	193b      	adds	r3, r7, r4
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	4a08      	ldr	r2, [pc, #32]	@ (8007c1c <UARTEx_SetNbDataToProcess+0xb8>)
 8007bfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bfe:	0019      	movs	r1, r3
 8007c00:	f7f8 fb08 	bl	8000214 <__divsi3>
 8007c04:	0003      	movs	r3, r0
 8007c06:	b299      	uxth	r1, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2268      	movs	r2, #104	@ 0x68
 8007c0c:	5299      	strh	r1, [r3, r2]
}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	46bd      	mov	sp, r7
 8007c12:	b005      	add	sp, #20
 8007c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c16:	46c0      	nop			@ (mov r8, r8)
 8007c18:	08007da0 	.word	0x08007da0
 8007c1c:	08007da8 	.word	0x08007da8

08007c20 <memset>:
 8007c20:	0003      	movs	r3, r0
 8007c22:	1882      	adds	r2, r0, r2
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d100      	bne.n	8007c2a <memset+0xa>
 8007c28:	4770      	bx	lr
 8007c2a:	7019      	strb	r1, [r3, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	e7f9      	b.n	8007c24 <memset+0x4>

08007c30 <__libc_init_array>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	2600      	movs	r6, #0
 8007c34:	4c0c      	ldr	r4, [pc, #48]	@ (8007c68 <__libc_init_array+0x38>)
 8007c36:	4d0d      	ldr	r5, [pc, #52]	@ (8007c6c <__libc_init_array+0x3c>)
 8007c38:	1b64      	subs	r4, r4, r5
 8007c3a:	10a4      	asrs	r4, r4, #2
 8007c3c:	42a6      	cmp	r6, r4
 8007c3e:	d109      	bne.n	8007c54 <__libc_init_array+0x24>
 8007c40:	2600      	movs	r6, #0
 8007c42:	f000 f819 	bl	8007c78 <_init>
 8007c46:	4c0a      	ldr	r4, [pc, #40]	@ (8007c70 <__libc_init_array+0x40>)
 8007c48:	4d0a      	ldr	r5, [pc, #40]	@ (8007c74 <__libc_init_array+0x44>)
 8007c4a:	1b64      	subs	r4, r4, r5
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	42a6      	cmp	r6, r4
 8007c50:	d105      	bne.n	8007c5e <__libc_init_array+0x2e>
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	00b3      	lsls	r3, r6, #2
 8007c56:	58eb      	ldr	r3, [r5, r3]
 8007c58:	4798      	blx	r3
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7ee      	b.n	8007c3c <__libc_init_array+0xc>
 8007c5e:	00b3      	lsls	r3, r6, #2
 8007c60:	58eb      	ldr	r3, [r5, r3]
 8007c62:	4798      	blx	r3
 8007c64:	3601      	adds	r6, #1
 8007c66:	e7f2      	b.n	8007c4e <__libc_init_array+0x1e>
 8007c68:	08007db0 	.word	0x08007db0
 8007c6c:	08007db0 	.word	0x08007db0
 8007c70:	08007db4 	.word	0x08007db4
 8007c74:	08007db0 	.word	0x08007db0

08007c78 <_init>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr

08007c84 <_fini>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	46c0      	nop			@ (mov r8, r8)
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr
