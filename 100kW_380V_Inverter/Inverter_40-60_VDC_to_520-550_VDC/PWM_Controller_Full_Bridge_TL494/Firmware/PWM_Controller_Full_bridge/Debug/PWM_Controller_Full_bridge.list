
PWM_Controller_Full_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007290  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007348  08007348  00008348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007468  08007468  00009010  2**0
                  CONTENTS
  4 .ARM          00000000  08007468  08007468  00009010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007468  08007468  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800746c  0800746c  0000846c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007470  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000010  08007480  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08007480  00009560  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e0d  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003107  00000000  00000000  00020e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00023f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fea  00000000  00000000  00025370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d4b  00000000  00000000  0002635a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1fb  00000000  00000000  0003e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d54  00000000  00000000  000582a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eeff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004984  00000000  00000000  000ef038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000f39bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007330 	.word	0x08007330

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08007330 	.word	0x08007330

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
 80003f8:	001a      	movs	r2, r3
 80003fa:	1cbb      	adds	r3, r7, #2
 80003fc:	801a      	strh	r2, [r3, #0]


	if (rxFrame[0] != SLAVE_ID || Size < 4) {
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	781a      	ldrb	r2, [r3, #0]
 8000402:	4b59      	ldr	r3, [pc, #356]	@ (8000568 <Registers_handler+0x17c>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	429a      	cmp	r2, r3
 8000408:	d103      	bne.n	8000412 <Registers_handler+0x26>
 800040a:	1cbb      	adds	r3, r7, #2
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	2b03      	cmp	r3, #3
 8000410:	d806      	bhi.n	8000420 <Registers_handler+0x34>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 8000412:	4b56      	ldr	r3, [pc, #344]	@ (800056c <Registers_handler+0x180>)
 8000414:	2202      	movs	r2, #2
 8000416:	2103      	movs	r1, #3
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fe4b 	bl	80010b4 <sendError>

	        return;
 800041e:	e0a0      	b.n	8000562 <Registers_handler+0x176>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 2]<<8) | (rxFrame[Size - 1]);
 8000420:	1cbb      	adds	r3, r7, #2
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	3b02      	subs	r3, #2
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	18d3      	adds	r3, r2, r3
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	021b      	lsls	r3, r3, #8
 800042e:	b21a      	sxth	r2, r3
 8000430:	1cbb      	adds	r3, r7, #2
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	68f9      	ldr	r1, [r7, #12]
 8000438:	18cb      	adds	r3, r1, r3
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b21b      	sxth	r3, r3
 800043e:	4313      	orrs	r3, r2
 8000440:	b21a      	sxth	r2, r3
 8000442:	2314      	movs	r3, #20
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	801a      	strh	r2, [r3, #0]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 8000448:	1cbb      	adds	r3, r7, #2
 800044a:	881b      	ldrh	r3, [r3, #0]
 800044c:	b2db      	uxtb	r3, r3
 800044e:	3b02      	subs	r3, #2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	2312      	movs	r3, #18
 8000454:	18fc      	adds	r4, r7, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fd88 	bl	8000f70 <calcCRC16ModBus>
 8000460:	0003      	movs	r3, r0
 8000462:	8023      	strh	r3, [r4, #0]
	   //     sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных

	     //   return;
	   // }

			 if (rxFrame[0] == SLAVE_ID) {
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b3f      	ldr	r3, [pc, #252]	@ (8000568 <Registers_handler+0x17c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d14b      	bne.n	8000508 <Registers_handler+0x11c>
                       uint8_t opCode = rxFrame[1];
 8000470:	2111      	movs	r1, #17
 8000472:	187b      	adds	r3, r7, r1
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	7852      	ldrb	r2, [r2, #1]
 8000478:	701a      	strb	r2, [r3, #0]

				  			  switch (opCode) {
 800047a:	187b      	adds	r3, r7, r1
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b10      	cmp	r3, #16
 8000480:	d832      	bhi.n	80004e8 <Registers_handler+0xfc>
 8000482:	009a      	lsls	r2, r3, #2
 8000484:	4b3a      	ldr	r3, [pc, #232]	@ (8000570 <Registers_handler+0x184>)
 8000486:	18d3      	adds	r3, r2, r3
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	469f      	mov	pc, r3
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 800048c:	4b39      	ldr	r3, [pc, #228]	@ (8000574 <Registers_handler+0x188>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	001a      	movs	r2, r3
 8000492:	4b36      	ldr	r3, [pc, #216]	@ (800056c <Registers_handler+0x180>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f000 ff72 	bl	8001380 <handleReadCoils>
				  			   break;
 800049c:	e061      	b.n	8000562 <Registers_handler+0x176>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 800049e:	4b36      	ldr	r3, [pc, #216]	@ (8000578 <Registers_handler+0x18c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	001a      	movs	r2, r3
 80004a4:	4b31      	ldr	r3, [pc, #196]	@ (800056c <Registers_handler+0x180>)
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 ffe5 	bl	8001478 <handleReadDiscreteInputs>
							   break;
 80004ae:	e058      	b.n	8000562 <Registers_handler+0x176>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	4b2e      	ldr	r3, [pc, #184]	@ (800056c <Registers_handler+0x180>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fe3c 	bl	8001134 <handleReadHoldingRegs>
				  			   break;
 80004bc:	e051      	b.n	8000562 <Registers_handler+0x176>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <Registers_handler+0x180>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fecd 	bl	8001264 <handleReadInputRegs>

				  			   break;
 80004ca:	e04a      	b.n	8000562 <Registers_handler+0x176>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	4b27      	ldr	r3, [pc, #156]	@ (800056c <Registers_handler+0x180>)
 80004d0:	0011      	movs	r1, r2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 f84e 	bl	8001574 <handleWriteMulyipleHandlingRegister>

                               break;
 80004d8:	e043      	b.n	8000562 <Registers_handler+0x176>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4b23      	ldr	r3, [pc, #140]	@ (800056c <Registers_handler+0x180>)
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 f847 	bl	8001574 <handleWriteMulyipleHandlingRegister>

                               break;
 80004e6:	e03c      	b.n	8000562 <Registers_handler+0x176>


				  			   default:

				  				 LED_1_ON;
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	021b      	lsls	r3, r3, #8
 80004ec:	4823      	ldr	r0, [pc, #140]	@ (800057c <Registers_handler+0x190>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	0019      	movs	r1, r3
 80004f2:	f002 ffef 	bl	80034d4 <HAL_GPIO_WritePin>
				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 80004f6:	2311      	movs	r3, #17
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	7819      	ldrb	r1, [r3, #0]
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <Registers_handler+0x180>)
 80004fe:	2201      	movs	r2, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fdd7 	bl	80010b4 <sendError>
				  			   break;
 8000506:	e02c      	b.n	8000562 <Registers_handler+0x176>
				  			     }

				  			 }

			                  else{
			                            for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 8000508:	2316      	movs	r3, #22
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	801a      	strh	r2, [r3, #0]
 8000510:	e00b      	b.n	800052a <Registers_handler+0x13e>
 8000512:	2116      	movs	r1, #22
 8000514:	187b      	adds	r3, r7, r1
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	187b      	adds	r3, r7, r1
 8000522:	881a      	ldrh	r2, [r3, #0]
 8000524:	187b      	adds	r3, r7, r1
 8000526:	3201      	adds	r2, #1
 8000528:	801a      	strh	r2, [r3, #0]
 800052a:	2316      	movs	r3, #22
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	2b3f      	cmp	r3, #63	@ 0x3f
 8000532:	d9ee      	bls.n	8000512 <Registers_handler+0x126>
			 				  			    	     RX_2;
 8000534:	2380      	movs	r3, #128	@ 0x80
 8000536:	01db      	lsls	r3, r3, #7
 8000538:	4810      	ldr	r0, [pc, #64]	@ (800057c <Registers_handler+0x190>)
 800053a:	2200      	movs	r2, #0
 800053c:	0019      	movs	r1, r3
 800053e:	f002 ffc9 	bl	80034d4 <HAL_GPIO_WritePin>
			 				  			    	  Reset_USART1();
 8000542:	f000 f841 	bl	80005c8 <Reset_USART1>
			 				  			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000546:	68f9      	ldr	r1, [r7, #12]
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <Registers_handler+0x180>)
 800054a:	2240      	movs	r2, #64	@ 0x40
 800054c:	0018      	movs	r0, r3
 800054e:	f006 fdfd 	bl	800714c <HAL_UARTEx_ReceiveToIdle_DMA>
			 				  			    			    // Включение прерывания IDLE
			 				  			   __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); }
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <Registers_handler+0x180>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b04      	ldr	r3, [pc, #16]	@ (800056c <Registers_handler+0x180>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2110      	movs	r1, #16
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]

                          }
 8000562:	46bd      	mov	sp, r7
 8000564:	b007      	add	sp, #28
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	20000000 	.word	0x20000000
 800056c:	200001c8 	.word	0x200001c8
 8000570:	08007348 	.word	0x08007348
 8000574:	20000559 	.word	0x20000559
 8000578:	20000558 	.word	0x20000558
 800057c:	50000800 	.word	0x50000800

08000580 <Check_USART1_Timeout>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

 void Check_USART1_Timeout(void)
 {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8000584:	f001 fc16 	bl	8001db4 <HAL_GetTick>
 8000588:	0002      	movs	r2, r0
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <Check_USART1_Timeout+0x40>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad2      	subs	r2, r2, r3
 8000590:	23fa      	movs	r3, #250	@ 0xfa
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	429a      	cmp	r2, r3
 8000596:	d30f      	bcc.n	80005b8 <Check_USART1_Timeout+0x38>
     {

         Reset_USART1();
 8000598:	f000 f816 	bl	80005c8 <Reset_USART1>
         RX_2;
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	01db      	lsls	r3, r3, #7
 80005a0:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <Check_USART1_Timeout+0x44>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	0019      	movs	r1, r3
 80005a6:	f002 ff95 	bl	80034d4 <HAL_GPIO_WritePin>
         LED_1_OFF;
 80005aa:	2380      	movs	r3, #128	@ 0x80
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <Check_USART1_Timeout+0x44>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	0019      	movs	r1, r3
 80005b4:	f002 ff8e 	bl	80034d4 <HAL_GPIO_WritePin>
     }
 }
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000314 	.word	0x20000314
 80005c4:	50000800 	.word	0x50000800

080005c8 <Reset_USART1>:


 void Reset_USART1(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
     // Остановите передачу и прием по DMA, если активны
     HAL_UART_DMAStop(&huart1);
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <Reset_USART1+0xc8>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f005 faee 	bl	8005bb0 <HAL_UART_DMAStop>

     // Прерывайте любые активные DMA транзакции
     if (hdma_usart1_rx.Instance != NULL) {
 80005d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <Reset_USART1+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <Reset_USART1+0x1c>
         HAL_DMA_Abort(&hdma_usart1_rx);
 80005dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <Reset_USART1+0xcc>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fb2c 	bl	8002c3c <HAL_DMA_Abort>
     }
     if (hdma_usart1_tx.Instance != NULL) {
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <Reset_USART1+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <Reset_USART1+0x2c>
         HAL_DMA_Abort(&hdma_usart1_tx);
 80005ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <Reset_USART1+0xd0>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 fb24 	bl	8002c3c <HAL_DMA_Abort>
     }

     // Отключите все прерывания UART
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80005f4:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <Reset_USART1+0xc8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <Reset_USART1+0xc8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2110      	movs	r1, #16
 8000600:	438a      	bics	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <Reset_USART1+0xc8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <Reset_USART1+0xc8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	438a      	bics	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <Reset_USART1+0xc8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <Reset_USART1+0xc8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2120      	movs	r1, #32
 8000620:	438a      	bics	r2, r1
 8000622:	601a      	str	r2, [r3, #0]

     // Сбросите периферийный модуль USART1
     __HAL_RCC_USART1_FORCE_RESET();
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <Reset_USART1+0xd4>)
 8000626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <Reset_USART1+0xd4>)
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	01c9      	lsls	r1, r1, #7
 800062e:	430a      	orrs	r2, r1
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
     HAL_Delay(1); // Дождитесь завершения сброса
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fbc8 	bl	8001dc8 <HAL_Delay>
     __HAL_RCC_USART1_RELEASE_RESET();
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <Reset_USART1+0xd4>)
 800063a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <Reset_USART1+0xd4>)
 800063e:	4918      	ldr	r1, [pc, #96]	@ (80006a0 <Reset_USART1+0xd8>)
 8000640:	400a      	ands	r2, r1
 8000642:	631a      	str	r2, [r3, #48]	@ 0x30

     // Обнуляем настройки UART (в случае, если библиотека HAL требует)
     HAL_UART_DeInit(&huart1);
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <Reset_USART1+0xc8>)
 8000646:	0018      	movs	r0, r3
 8000648:	f005 f9e0 	bl	8005a0c <HAL_UART_DeInit>

     // �?нициализируем UART заново
     MX_USART1_UART_Init();
 800064c:	f000 fafe 	bl	8000c4c <MX_USART1_UART_Init>

     // �?нициализируем DMA заново (если DMA используется)
     MX_DMA_Init();
 8000650:	f000 fb4a 	bl	8000ce8 <MX_DMA_Init>

     // Настройка UART для приема данных с использованием DMA
     HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000654:	4913      	ldr	r1, [pc, #76]	@ (80006a4 <Reset_USART1+0xdc>)
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <Reset_USART1+0xc8>)
 8000658:	2240      	movs	r2, #64	@ 0x40
 800065a:	0018      	movs	r0, r3
 800065c:	f006 fd76 	bl	800714c <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <Reset_USART1+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <Reset_USART1+0xcc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2104      	movs	r1, #4
 800066c:	438a      	bics	r2, r1
 800066e:	601a      	str	r2, [r3, #0]


      RX_2;
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	01db      	lsls	r3, r3, #7
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <Reset_USART1+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	0019      	movs	r1, r3
 800067a:	f002 ff2b 	bl	80034d4 <HAL_GPIO_WritePin>

     // Сброс параметров и таймеров, связанных с UART
     lastActivityTime = HAL_GetTick();
 800067e:	f001 fb99 	bl	8001db4 <HAL_GetTick>
 8000682:	0002      	movs	r2, r0
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <Reset_USART1+0xe4>)
 8000686:	601a      	str	r2, [r3, #0]
 }
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	200001c8 	.word	0x200001c8
 8000694:	2000025c 	.word	0x2000025c
 8000698:	200002b8 	.word	0x200002b8
 800069c:	40021000 	.word	0x40021000
 80006a0:	ffffbfff 	.word	0xffffbfff
 80006a4:	20000318 	.word	0x20000318
 80006a8:	50000800 	.word	0x50000800
 80006ac:	20000314 	.word	0x20000314

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f001 fb02 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f83c 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 fb3a 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c0:	f000 fb12 	bl	8000ce8 <MX_DMA_Init>
  MX_I2C2_Init();
 80006c4:	f000 f910 	bl	80008e8 <MX_I2C2_Init>
  MX_TIM1_Init();
 80006c8:	f000 f94e 	bl	8000968 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006cc:	f000 fa18 	bl	8000b00 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006d0:	f000 fabc 	bl	8000c4c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006d4:	f000 f888 	bl	80007e8 <MX_ADC1_Init>
  MX_TIM14_Init();
 80006d8:	f000 fa94 	bl	8000c04 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <main+0x6c>)
 80006de:	2100      	movs	r1, #0
 80006e0:	0018      	movs	r0, r3
 80006e2:	f003 ff9f 	bl	8004624 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <main+0x70>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f003 ff9a 	bl	8004624 <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 80006f0:	490c      	ldr	r1, [pc, #48]	@ (8000724 <main+0x74>)
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <main+0x78>)
 80006f4:	2240      	movs	r2, #64	@ 0x40
 80006f6:	0018      	movs	r0, r3
 80006f8:	f006 fd28 	bl	800714c <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80006fc:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <main+0x7c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <main+0x7c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2104      	movs	r1, #4
 8000708:	438a      	bics	r2, r1
 800070a:	601a      	str	r2, [r3, #0]
   HAL_TIM_Base_Start_IT(&htim14);
 800070c:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <main+0x80>)
 800070e:	0018      	movs	r0, r3
 8000710:	f003 feda 	bl	80044c8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Check_USART1_Timeout();
 8000714:	f7ff ff34 	bl	8000580 <Check_USART1_Timeout>
 8000718:	e7fc      	b.n	8000714 <main+0x64>
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	200000e4 	.word	0x200000e4
 8000720:	20000130 	.word	0x20000130
 8000724:	20000318 	.word	0x20000318
 8000728:	200001c8 	.word	0x200001c8
 800072c:	2000025c 	.word	0x2000025c
 8000730:	2000017c 	.word	0x2000017c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b093      	sub	sp, #76	@ 0x4c
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	2414      	movs	r4, #20
 800073c:	193b      	adds	r3, r7, r4
 800073e:	0018      	movs	r0, r3
 8000740:	2334      	movs	r3, #52	@ 0x34
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f006 fdc7 	bl	80072d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	0018      	movs	r0, r3
 800074e:	2310      	movs	r3, #16
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f006 fdc0 	bl	80072d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2380      	movs	r3, #128	@ 0x80
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	0018      	movs	r0, r3
 800075e:	f003 f82f 	bl	80037c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2202      	movs	r2, #2
 8000766:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000770:	0021      	movs	r1, r4
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2240      	movs	r2, #64	@ 0x40
 800077c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2202      	movs	r2, #2
 8000782:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2202      	movs	r2, #2
 8000788:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2208      	movs	r2, #8
 8000794:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	@ 0x80
 800079a:	0292      	lsls	r2, r2, #10
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2280      	movs	r2, #128	@ 0x80
 80007a2:	0592      	lsls	r2, r2, #22
 80007a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	0018      	movs	r0, r3
 80007aa:	f003 f855 	bl	8003858 <HAL_RCC_OscConfig>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007b2:	f000 fbd7 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2202      	movs	r2, #2
 80007c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2102      	movs	r1, #2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f003 fb50 	bl	8003e78 <HAL_RCC_ClockConfig>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007dc:	f000 fbc2 	bl	8000f64 <Error_Handler>
  }
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b013      	add	sp, #76	@ 0x4c
 80007e6:	bd90      	pop	{r4, r7, pc}

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	0018      	movs	r0, r3
 80007f2:	230c      	movs	r3, #12
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f006 fd6e 	bl	80072d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fc:	4b36      	ldr	r3, [pc, #216]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 80007fe:	4a37      	ldr	r2, [pc, #220]	@ (80008dc <MX_ADC1_Init+0xf4>)
 8000800:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000802:	4b35      	ldr	r3, [pc, #212]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	05d2      	lsls	r2, r2, #23
 8000808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080a:	4b33      	ldr	r3, [pc, #204]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000810:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000816:	4b30      	ldr	r3, [pc, #192]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	0392      	lsls	r2, r2, #14
 800081c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000820:	2204      	movs	r2, #4
 8000822:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800082a:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800082c:	2200      	movs	r2, #0
 800082e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000832:	2200      	movs	r2, #0
 8000834:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8000836:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000838:	2202      	movs	r2, #2
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083c:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800083e:	2220      	movs	r2, #32
 8000840:	2100      	movs	r1, #0
 8000842:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000844:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000850:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000852:	222c      	movs	r2, #44	@ 0x2c
 8000854:	2100      	movs	r1, #0
 8000856:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800085a:	2200      	movs	r2, #0
 800085c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000860:	2200      	movs	r2, #0
 8000862:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000866:	2200      	movs	r2, #0
 8000868:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800086c:	223c      	movs	r2, #60	@ 0x3c
 800086e:	2100      	movs	r1, #0
 8000870:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 8000874:	2200      	movs	r2, #0
 8000876:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800087a:	0018      	movs	r0, r3
 800087c:	f001 fbc6 	bl	800200c <HAL_ADC_Init>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000884:	f000 fb6e 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_ADC1_Init+0xf8>)
 800088c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 fd5b 	bl	800235c <HAL_ADC_ConfigChannel>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80008aa:	f000 fb5b 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4a0c      	ldr	r2, [pc, #48]	@ (80008e4 <MX_ADC1_Init+0xfc>)
 80008b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2204      	movs	r2, #4
 80008b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	1d3a      	adds	r2, r7, #4
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_ADC1_Init+0xf0>)
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fd4b 	bl	800235c <HAL_ADC_ConfigChannel>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80008ca:	f000 fb4b 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	2000002c 	.word	0x2000002c
 80008dc:	40012400 	.word	0x40012400
 80008e0:	1c000080 	.word	0x1c000080
 80008e4:	14000020 	.word	0x14000020

080008e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <MX_I2C2_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <MX_I2C2_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_I2C2_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <MX_I2C2_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_I2C2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_I2C2_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_I2C2_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_I2C2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_I2C2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_I2C2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_I2C2_Init+0x74>)
 8000924:	0018      	movs	r0, r3
 8000926:	f002 fe0d 	bl	8003544 <HAL_I2C_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800092e:	f000 fb19 	bl	8000f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_I2C2_Init+0x74>)
 8000934:	2100      	movs	r1, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f002 feaa 	bl	8003690 <HAL_I2CEx_ConfigAnalogFilter>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fb10 	bl	8000f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <MX_I2C2_Init+0x74>)
 8000946:	2100      	movs	r1, #0
 8000948:	0018      	movs	r0, r3
 800094a:	f002 feed 	bl	8003728 <HAL_I2CEx_ConfigDigitalFilter>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 fb07 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000090 	.word	0x20000090
 8000960:	40005800 	.word	0x40005800
 8000964:	10b17db5 	.word	0x10b17db5

08000968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	@ 0x70
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	2360      	movs	r3, #96	@ 0x60
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	0018      	movs	r0, r3
 8000974:	2310      	movs	r3, #16
 8000976:	001a      	movs	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	f006 fcad 	bl	80072d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097e:	2354      	movs	r3, #84	@ 0x54
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	0018      	movs	r0, r3
 8000984:	230c      	movs	r3, #12
 8000986:	001a      	movs	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f006 fca5 	bl	80072d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	2338      	movs	r3, #56	@ 0x38
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	0018      	movs	r0, r3
 8000994:	231c      	movs	r3, #28
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f006 fc9d 	bl	80072d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	0018      	movs	r0, r3
 80009a2:	2334      	movs	r3, #52	@ 0x34
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f006 fc96 	bl	80072d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ac:	4b52      	ldr	r3, [pc, #328]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009ae:	4a53      	ldr	r2, [pc, #332]	@ (8000afc <MX_TIM1_Init+0x194>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009b2:	4b51      	ldr	r3, [pc, #324]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b4f      	ldr	r3, [pc, #316]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80009be:	4b4e      	ldr	r3, [pc, #312]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009c0:	22fa      	movs	r2, #250	@ 0xfa
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b4c      	ldr	r3, [pc, #304]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009cc:	4b4a      	ldr	r3, [pc, #296]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b49      	ldr	r3, [pc, #292]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d8:	4b47      	ldr	r3, [pc, #284]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f003 fd1c 	bl	8004418 <HAL_TIM_Base_Init>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80009e4:	f000 fabe 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	2160      	movs	r1, #96	@ 0x60
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	0152      	lsls	r2, r2, #5
 80009f0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <MX_TIM1_Init+0x190>)
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f004 f8f3 	bl	8004be4 <HAL_TIM_ConfigClockSource>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a02:	f000 faaf 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a06:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <MX_TIM1_Init+0x190>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f003 fdab 	bl	8004564 <HAL_TIM_PWM_Init>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000a12:	f000 faa7 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2154      	movs	r1, #84	@ 0x54
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2a:	187a      	adds	r2, r7, r1
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <MX_TIM1_Init+0x190>)
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f004 fe7f 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a3a:	f000 fa93 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3e:	2138      	movs	r1, #56	@ 0x38
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2260      	movs	r2, #96	@ 0x60
 8000a44:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	22fa      	movs	r2, #250	@ 0xfa
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6c:	1879      	adds	r1, r7, r1
 8000a6e:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_TIM1_Init+0x190>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f003 ffb6 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000a7c:	f000 fa72 	bl	8000f64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	0192      	lsls	r2, r2, #6
 8000aa4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	0492      	lsls	r2, r2, #18
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad2:	1d3a      	adds	r2, r7, #4
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_TIM1_Init+0x190>)
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f004 fe8d 	bl	80057f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000ae2:	f000 fa3f 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <MX_TIM1_Init+0x190>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 ff0d 	bl	8001908 <HAL_TIM_MspPostInit>

}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b01c      	add	sp, #112	@ 0x70
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	200000e4 	.word	0x200000e4
 8000afc:	40012c00 	.word	0x40012c00

08000b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	@ 0x40
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b06:	232c      	movs	r3, #44	@ 0x2c
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	2314      	movs	r3, #20
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	f006 fbe1 	bl	80072d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b16:	2320      	movs	r3, #32
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	f006 fbd9 	bl	80072d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	231c      	movs	r3, #28
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f006 fbd2 	bl	80072d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b34:	4b31      	ldr	r3, [pc, #196]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b36:	4a32      	ldr	r2, [pc, #200]	@ (8000c00 <MX_TIM3_Init+0x100>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b3a:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000b46:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b48:	22fa      	movs	r2, #250	@ 0xfa
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b5a:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f003 fc5b 	bl	8004418 <HAL_TIM_Base_Init>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 f9fd 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b6a:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f003 fcf9 	bl	8004564 <HAL_TIM_PWM_Init>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000b76:	f000 f9f5 	bl	8000f64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b7a:	212c      	movs	r1, #44	@ 0x2c
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b88:	187a      	adds	r2, r7, r1
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f004 f8fe 	bl	8004d90 <HAL_TIM_SlaveConfigSynchro>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b98:	f000 f9e4 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f004 fdbf 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000bba:	f000 f9d3 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2260      	movs	r2, #96	@ 0x60
 8000bc2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	22fa      	movs	r2, #250	@ 0xfa
 8000bc8:	0052      	lsls	r2, r2, #1
 8000bca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	1d39      	adds	r1, r7, #4
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f003 ff00 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000be8:	f000 f9bc 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <MX_TIM3_Init+0xfc>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fe8a 	bl	8001908 <HAL_TIM_MspPostInit>

}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b010      	add	sp, #64	@ 0x40
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000130 	.word	0x20000130
 8000c00:	40000400 	.word	0x40000400

08000c04 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_TIM14_Init+0x40>)
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <MX_TIM14_Init+0x44>)
 8000c0c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <MX_TIM14_Init+0x40>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_TIM14_Init+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <MX_TIM14_Init+0x40>)
 8000c1c:	22fa      	movs	r2, #250	@ 0xfa
 8000c1e:	00d2      	lsls	r2, r2, #3
 8000c20:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_TIM14_Init+0x40>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_TIM14_Init+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <MX_TIM14_Init+0x40>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f003 fbf1 	bl	8004418 <HAL_TIM_Base_Init>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000c3a:	f000 f993 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000017c 	.word	0x2000017c
 8000c48:	40002000 	.word	0x40002000

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c52:	4a24      	ldr	r2, [pc, #144]	@ (8000ce4 <MX_USART1_UART_Init+0x98>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8000c56:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c58:	22fa      	movs	r2, #250	@ 0xfa
 8000c5a:	0252      	lsls	r2, r2, #9
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f004 fe62 	bl	8005960 <HAL_UART_Init>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f960 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f006 f9cd 	bl	8007048 <HAL_UARTEx_SetTxFifoThreshold>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 f957 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f006 fa04 	bl	80070c8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 f94e 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <MX_USART1_UART_Init+0x94>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f006 f982 	bl	8006fd4 <HAL_UARTEx_DisableFifoMode>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 f946 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	200001c8 	.word	0x200001c8
 8000ce4:	40013800 	.word	0x40013800

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <MX_DMA_Init+0x48>)
 8000cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_DMA_Init+0x48>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <MX_DMA_Init+0x48>)
 8000cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2009      	movs	r0, #9
 8000d0c:	f001 fdcc 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d10:	2009      	movs	r0, #9
 8000d12:	f001 fdde 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f001 fdc4 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d20:	200a      	movs	r0, #10
 8000d22:	f001 fdd6 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	40021000 	.word	0x40021000

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	240c      	movs	r4, #12
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	0018      	movs	r0, r3
 8000d40:	2314      	movs	r3, #20
 8000d42:	001a      	movs	r2, r3
 8000d44:	2100      	movs	r1, #0
 8000d46:	f006 fac7 	bl	80072d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d4e:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d50:	2102      	movs	r1, #2
 8000d52:	430a      	orrs	r2, r1
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d56:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d66:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d68:	2104      	movs	r1, #4
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d72:	2204      	movs	r2, #4
 8000d74:	4013      	ands	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <MX_GPIO_Init+0xf4>)
 8000d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000d92:	23c0      	movs	r3, #192	@ 0xc0
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	4825      	ldr	r0, [pc, #148]	@ (8000e2c <MX_GPIO_Init+0xf8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	f002 fb9a 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin, GPIO_PIN_RESET);
 8000da0:	23a0      	movs	r3, #160	@ 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	2200      	movs	r2, #0
 8000da6:	211c      	movs	r1, #28
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fb93 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECT_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin|LED_1_Pin;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	22c0      	movs	r2, #192	@ 0xc0
 8000db2:	0212      	lsls	r2, r2, #8
 8000db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2201      	movs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	4a18      	ldr	r2, [pc, #96]	@ (8000e2c <MX_GPIO_Init+0xf8>)
 8000dcc:	0019      	movs	r1, r3
 8000dce:	0010      	movs	r0, r2
 8000dd0:	f002 f94c 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_UI_Pin INT_EXT_Pin */
  GPIO_InitStruct.Pin = INT_UI_Pin|INT_EXT_Pin;
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	2288      	movs	r2, #136	@ 0x88
 8000dde:	0352      	lsls	r2, r2, #13
 8000de0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	193a      	adds	r2, r7, r4
 8000dea:	23a0      	movs	r3, #160	@ 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 f93b 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_Pin OUT_2_Pin OUT_3_Pin */
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin;
 8000df6:	0021      	movs	r1, r4
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	221c      	movs	r2, #28
 8000dfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2201      	movs	r2, #1
 8000e02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	187a      	adds	r2, r7, r1
 8000e12:	23a0      	movs	r3, #160	@ 0xa0
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f002 f927 	bl	800306c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b009      	add	sp, #36	@ 0x24
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	50000800 	.word	0x50000800

08000e30 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]


	    RX_2;
 8000e38:	2380      	movs	r3, #128	@ 0x80
 8000e3a:	01db      	lsls	r3, r3, #7
 8000e3c:	4815      	ldr	r0, [pc, #84]	@ (8000e94 <HAL_UART_TxCpltCallback+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	0019      	movs	r1, r3
 8000e42:	f002 fb47 	bl	80034d4 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8000e46:	f000 ffb5 	bl	8001db4 <HAL_GetTick>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_UART_TxCpltCallback+0x68>)
 8000e4e:	601a      	str	r2, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 8000e50:	4912      	ldr	r1, [pc, #72]	@ (8000e9c <HAL_UART_TxCpltCallback+0x6c>)
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <HAL_UART_TxCpltCallback+0x70>)
 8000e54:	2240      	movs	r2, #64	@ 0x40
 8000e56:	0018      	movs	r0, r3
 8000e58:	f006 f978 	bl	800714c <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <HAL_UART_TxCpltCallback+0x70>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_UART_TxCpltCallback+0x70>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2110      	movs	r1, #16
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_UART_TxCpltCallback+0x74>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <HAL_UART_TxCpltCallback+0x74>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2104      	movs	r1, #4
 8000e78:	438a      	bics	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
	    LED_1_OFF;
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <HAL_UART_TxCpltCallback+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	0019      	movs	r1, r3
 8000e86:	f002 fb25 	bl	80034d4 <HAL_GPIO_WritePin>
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	50000800 	.word	0x50000800
 8000e98:	20000314 	.word	0x20000314
 8000e9c:	20000318 	.word	0x20000318
 8000ea0:	200001c8 	.word	0x200001c8
 8000ea4:	2000025c 	.word	0x2000025c

08000ea8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	1cbb      	adds	r3, r7, #2
 8000eb4:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a16      	ldr	r2, [pc, #88]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d125      	bne.n	8000f0c <HAL_UARTEx_RxEventCallback+0x64>
	{
        LED_1_ON;
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0x70>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	0019      	movs	r1, r3
 8000eca:	f002 fb03 	bl	80034d4 <HAL_GPIO_WritePin>
		lastActivityTime = HAL_GetTick();
 8000ece:	f000 ff71 	bl	8001db4 <HAL_GetTick>
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <HAL_UARTEx_RxEventCallback+0x74>)
 8000ed6:	601a      	str	r2, [r3, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x78>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x78>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fea6 	bl	8002c3c <HAL_DMA_Abort>
	   Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 8000ef0:	1cbb      	adds	r3, r7, #2
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f28 <HAL_UARTEx_RxEventCallback+0x80>)
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <HAL_UARTEx_RxEventCallback+0x84>)
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <HAL_UARTEx_RxEventCallback+0x88>)
 8000efa:	f7ff fa77 	bl	80003ec <Registers_handler>
        TX_2;
 8000efe:	2380      	movs	r3, #128	@ 0x80
 8000f00:	01db      	lsls	r3, r3, #7
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0x70>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	0019      	movs	r1, r3
 8000f08:	f002 fae4 	bl	80034d4 <HAL_GPIO_WritePin>
	}
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013800 	.word	0x40013800
 8000f18:	50000800 	.word	0x50000800
 8000f1c:	20000314 	.word	0x20000314
 8000f20:	200001c8 	.word	0x200001c8
 8000f24:	2000025c 	.word	0x2000025c
 8000f28:	200004d8 	.word	0x200004d8
 8000f2c:	20000458 	.word	0x20000458
 8000f30:	20000318 	.word	0x20000318

08000f34 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM14)  // Проверяем, от какого таймера пришло прерывание
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>
    {

    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	0010      	movs	r0, r2
 8000f50:	f002 fadd 	bl	800350e <HAL_GPIO_TogglePin>
    }
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40002000 	.word	0x40002000
 8000f60:	50000800 	.word	0x50000800

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	000a      	movs	r2, r1
 8000f7a:	1cfb      	adds	r3, r7, #3
 8000f7c:	701a      	strb	r2, [r3, #0]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <calcCRC16ModBus+0xac>)
 8000f80:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8000f82:	2313      	movs	r3, #19
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e02d      	b.n	8000fe8 <calcCRC16ModBus+0x78>
		temp = temp ^ buffer[i];
 8000f8c:	2313      	movs	r3, #19
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	001a      	movs	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e013      	b.n	8000fd2 <calcCRC16ModBus+0x62>
			flag = temp & 0x0001;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2201      	movs	r2, #1
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
			if (flag)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <calcCRC16ModBus+0x56>
				temp ^= 0xA001;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <calcCRC16ModBus+0xb0>)
 8000fc2:	4053      	eors	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000fc6:	2112      	movs	r1, #18
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	3201      	adds	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d9e6      	bls.n	8000faa <calcCRC16ModBus+0x3a>
	for (unsigned char i = 0; i < u8length; i++) {
 8000fdc:	2113      	movs	r1, #19
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	2313      	movs	r3, #19
 8000fea:	18fa      	adds	r2, r7, r3
 8000fec:	1cfb      	adds	r3, r7, #3
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d3ca      	bcc.n	8000f8c <calcCRC16ModBus+0x1c>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	0c1b      	lsrs	r3, r3, #16
 800100c:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	b29b      	uxth	r3, r3

}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b006      	add	sp, #24
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	0000ffff 	.word	0x0000ffff
 8001020:	0000a001 	.word	0x0000a001

08001024 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calcCRC16ModBus(frame, len);
 8001032:	2516      	movs	r5, #22
 8001034:	197c      	adds	r4, r7, r5
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff96 	bl	8000f70 <calcCRC16ModBus>
 8001044:	0003      	movs	r3, r0
 8001046:	8023      	strh	r3, [r4, #0]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	18d3      	adds	r3, r2, r3
 8001052:	197a      	adds	r2, r7, r5
 8001054:	8812      	ldrh	r2, [r2, #0]
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 800105a:	197b      	adds	r3, r7, r5
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b299      	uxth	r1, r3
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	b2ca      	uxtb	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]

    TX_2;
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <sendModBusRequest+0x8c>)
 8001074:	2201      	movs	r2, #1
 8001076:	0019      	movs	r1, r3
 8001078:	f002 fa2c 	bl	80034d4 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);

    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b29b      	uxth	r3, r3
 8001082:	3302      	adds	r3, #2
 8001084:	b29a      	uxth	r2, r3
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	0018      	movs	r0, r3
 800108c:	f004 fcfe 	bl	8005a8c <HAL_UART_Transmit_DMA>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d008      	beq.n	80010a6 <sendModBusRequest+0x82>

    	LED_1_OFF;
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <sendModBusRequest+0x8c>)
 800109a:	2200      	movs	r2, #0
 800109c:	0019      	movs	r1, r3
 800109e:	f002 fa19 	bl	80034d4 <HAL_GPIO_WritePin>

	        Error_Handler();
 80010a2:	f7ff ff5f 	bl	8000f64 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b006      	add	sp, #24
 80010ae:	bdb0      	pop	{r4, r5, r7, pc}
 80010b0:	50000800 	.word	0x50000800

080010b4 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	0008      	movs	r0, r1
 80010be:	0011      	movs	r1, r2
 80010c0:	1cfb      	adds	r3, r7, #3
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	1cbb      	adds	r3, r7, #2
 80010c8:	1c0a      	adds	r2, r1, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <sendError+0x7c>)
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	2508      	movs	r5, #8
 80010d2:	197b      	adds	r3, r7, r5
 80010d4:	701a      	strb	r2, [r3, #0]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 80010d6:	1cfb      	adds	r3, r7, #3
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	4252      	negs	r2, r2
 80010de:	4313      	orrs	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	197b      	adds	r3, r7, r5
 80010e4:	705a      	strb	r2, [r3, #1]
    errorFrame[2] = errorCode;      // Код ошибки
 80010e6:	197b      	adds	r3, r7, r5
 80010e8:	1cba      	adds	r2, r7, #2
 80010ea:	7812      	ldrb	r2, [r2, #0]
 80010ec:	709a      	strb	r2, [r3, #2]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 80010ee:	260e      	movs	r6, #14
 80010f0:	19bc      	adds	r4, r7, r6
 80010f2:	197b      	adds	r3, r7, r5
 80010f4:	2103      	movs	r1, #3
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff ff3a 	bl	8000f70 <calcCRC16ModBus>
 80010fc:	0003      	movs	r3, r0
 80010fe:	8023      	strh	r3, [r4, #0]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001100:	0031      	movs	r1, r6
 8001102:	187b      	adds	r3, r7, r1
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	197b      	adds	r3, r7, r5
 800110a:	70da      	strb	r2, [r3, #3]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 800110c:	187b      	adds	r3, r7, r1
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	197b      	adds	r3, r7, r5
 8001118:	711a      	strb	r2, [r3, #4]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 800111a:	1979      	adds	r1, r7, r5
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2205      	movs	r2, #5
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ff7f 	bl	8001024 <sendModBusRequest>

}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b005      	add	sp, #20
 800112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000000 	.word	0x20000000

08001134 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800113e:	4b45      	ldr	r3, [pc, #276]	@ (8001254 <handleReadHoldingRegs+0x120>)
 8001140:	789b      	ldrb	r3, [r3, #2]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <handleReadHoldingRegs+0x120>)
 8001148:	78db      	ldrb	r3, [r3, #3]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	2116      	movs	r1, #22
 8001152:	187b      	adds	r3, r7, r1
 8001154:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <handleReadHoldingRegs+0x120>)
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <handleReadHoldingRegs+0x120>)
 8001160:	795b      	ldrb	r3, [r3, #5]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	200a      	movs	r0, #10
 800116a:	183b      	adds	r3, r7, r0
 800116c:	801a      	strh	r2, [r3, #0]

	startingReg=startingReg-30001;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	187a      	adds	r2, r7, r1
 8001172:	8812      	ldrh	r2, [r2, #0]
 8001174:	4c38      	ldr	r4, [pc, #224]	@ (8001258 <handleReadHoldingRegs+0x124>)
 8001176:	46a4      	mov	ip, r4
 8001178:	4462      	add	r2, ip
 800117a:	801a      	strh	r2, [r3, #0]

	uint16_t endAddr = startingReg+numOfregs-1;
 800117c:	187a      	adds	r2, r7, r1
 800117e:	183b      	adds	r3, r7, r0
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	b29a      	uxth	r2, r3
 8001188:	2308      	movs	r3, #8
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	3a01      	subs	r2, #1
 800118e:	801a      	strh	r2, [r3, #0]



	if((numOfregs<0)|(numOfregs >125)){
 8001190:	183b      	adds	r3, r7, r0
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	2b7d      	cmp	r3, #125	@ 0x7d
 8001196:	d906      	bls.n	80011a6 <handleReadHoldingRegs+0x72>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2103      	movs	r1, #3
 800119c:	0018      	movs	r0, r3
 800119e:	f000 fa7f 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e051      	b.n	800124a <handleReadHoldingRegs+0x116>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80011a6:	2308      	movs	r3, #8
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b3c      	cmp	r3, #60	@ 0x3c
 80011ae:	d906      	bls.n	80011be <handleReadHoldingRegs+0x8a>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2102      	movs	r1, #2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fa73 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e045      	b.n	800124a <handleReadHoldingRegs+0x116>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80011be:	4b27      	ldr	r3, [pc, #156]	@ (800125c <handleReadHoldingRegs+0x128>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <handleReadHoldingRegs+0x12c>)
 80011c4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <handleReadHoldingRegs+0x120>)
 80011c8:	785a      	ldrb	r2, [r3, #1]
 80011ca:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <handleReadHoldingRegs+0x12c>)
 80011cc:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80011ce:	230a      	movs	r3, #10
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	18db      	adds	r3, r3, r3
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <handleReadHoldingRegs+0x12c>)
 80011dc:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80011de:	2303      	movs	r3, #3
 80011e0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e022      	b.n	800122e <handleReadHoldingRegs+0xfa>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80011e8:	2016      	movs	r0, #22
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b299      	uxth	r1, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	613a      	str	r2, [r7, #16]
 8001200:	b2c9      	uxtb	r1, r1
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <handleReadHoldingRegs+0x12c>)
 8001204:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001206:	183b      	adds	r3, r7, r0
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	18d3      	adds	r3, r2, r3
 8001210:	8819      	ldrh	r1, [r3, #0]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	613a      	str	r2, [r7, #16]
 8001218:	b2c9      	uxtb	r1, r1
 800121a:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <handleReadHoldingRegs+0x12c>)
 800121c:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 800121e:	183b      	adds	r3, r7, r0
 8001220:	881a      	ldrh	r2, [r3, #0]
 8001222:	183b      	adds	r3, r7, r0
 8001224:	3201      	adds	r2, #1
 8001226:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	230a      	movs	r3, #10
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbd6      	blt.n	80011e8 <handleReadHoldingRegs+0xb4>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <handleReadHoldingRegs+0x12c>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff feee 	bl	8001024 <sendModBusRequest>
	return 1;
 8001248:	2301      	movs	r3, #1

}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b007      	add	sp, #28
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	20000318 	.word	0x20000318
 8001258:	ffff8acf 	.word	0xffff8acf
 800125c:	20000000 	.word	0x20000000
 8001260:	20000358 	.word	0x20000358

08001264 <handleReadInputRegs>:

modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800126e:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <handleReadInputRegs+0x110>)
 8001270:	789b      	ldrb	r3, [r3, #2]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b3f      	ldr	r3, [pc, #252]	@ (8001374 <handleReadInputRegs+0x110>)
 8001278:	78db      	ldrb	r3, [r3, #3]
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21a      	sxth	r2, r3
 8001280:	2016      	movs	r0, #22
 8001282:	183b      	adds	r3, r7, r0
 8001284:	801a      	strh	r2, [r3, #0]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <handleReadInputRegs+0x110>)
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <handleReadInputRegs+0x110>)
 8001290:	795b      	ldrb	r3, [r3, #5]
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21a      	sxth	r2, r3
 8001298:	210a      	movs	r1, #10
 800129a:	187b      	adds	r3, r7, r1
 800129c:	801a      	strh	r2, [r3, #0]

	uint16_t endAddr = startingReg+numOfregs-1;
 800129e:	183a      	adds	r2, r7, r0
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	8812      	ldrh	r2, [r2, #0]
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	18d3      	adds	r3, r2, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	2308      	movs	r3, #8
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	3a01      	subs	r2, #1
 80012b0:	801a      	strh	r2, [r3, #0]

	if((numOfregs<0)|(numOfregs >125)){
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012b8:	d906      	bls.n	80012c8 <handleReadInputRegs+0x64>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2103      	movs	r1, #3
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 f9ee 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e051      	b.n	800136c <handleReadInputRegs+0x108>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80012c8:	2308      	movs	r3, #8
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	2b3c      	cmp	r3, #60	@ 0x3c
 80012d0:	d906      	bls.n	80012e0 <handleReadInputRegs+0x7c>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2102      	movs	r1, #2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f9e2 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80012dc:	2300      	movs	r3, #0
 80012de:	e045      	b.n	800136c <handleReadInputRegs+0x108>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <handleReadInputRegs+0x114>)
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <handleReadInputRegs+0x118>)
 80012e6:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <handleReadInputRegs+0x110>)
 80012ea:	785a      	ldrb	r2, [r3, #1]
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <handleReadInputRegs+0x118>)
 80012ee:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80012f0:	230a      	movs	r3, #10
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	18db      	adds	r3, r3, r3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <handleReadInputRegs+0x118>)
 80012fe:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001300:	2303      	movs	r3, #3
 8001302:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e022      	b.n	8001350 <handleReadInputRegs+0xec>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 800130a:	2016      	movs	r0, #22
 800130c:	183b      	adds	r3, r7, r0
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	b299      	uxth	r1, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	613a      	str	r2, [r7, #16]
 8001322:	b2c9      	uxtb	r1, r1
 8001324:	4a15      	ldr	r2, [pc, #84]	@ (800137c <handleReadInputRegs+0x118>)
 8001326:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001328:	183b      	adds	r3, r7, r0
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	8819      	ldrh	r1, [r3, #0]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	613a      	str	r2, [r7, #16]
 800133a:	b2c9      	uxtb	r1, r1
 800133c:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <handleReadInputRegs+0x118>)
 800133e:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001340:	183b      	adds	r3, r7, r0
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	183b      	adds	r3, r7, r0
 8001346:	3201      	adds	r2, #1
 8001348:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i<numOfregs;i++){
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	230a      	movs	r3, #10
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbd6      	blt.n	800130a <handleReadInputRegs+0xa6>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4906      	ldr	r1, [pc, #24]	@ (800137c <handleReadInputRegs+0x118>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff fe5d 	bl	8001024 <sendModBusRequest>
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000318 	.word	0x20000318
 8001378:	20000000 	.word	0x20000000
 800137c:	20000358 	.word	0x20000358

08001380 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 800138a:	4b38      	ldr	r3, [pc, #224]	@ (800146c <handleReadCoils+0xec>)
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b36      	ldr	r3, [pc, #216]	@ (800146c <handleReadCoils+0xec>)
 8001394:	78db      	ldrb	r3, [r3, #3]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21a      	sxth	r2, r3
 800139c:	230e      	movs	r3, #14
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	801a      	strh	r2, [r3, #0]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <handleReadCoils+0xec>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b30      	ldr	r3, [pc, #192]	@ (800146c <handleReadCoils+0xec>)
 80013ac:	795b      	ldrb	r3, [r3, #5]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	210c      	movs	r1, #12
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	801a      	strh	r2, [r3, #0]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 80013ba:	000a      	movs	r2, r1
 80013bc:	18bb      	adds	r3, r7, r2
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <handleReadCoils+0x50>
 80013c4:	18bb      	adds	r3, r7, r2
 80013c6:	881a      	ldrh	r2, [r3, #0]
 80013c8:	23fa      	movs	r3, #250	@ 0xfa
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d906      	bls.n	80013de <handleReadCoils+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2103      	movs	r1, #3
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 f963 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80013da:	2300      	movs	r3, #0
 80013dc:	e041      	b.n	8001462 <handleReadCoils+0xe2>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 80013de:	230e      	movs	r3, #14
 80013e0:	18fa      	adds	r2, r7, r3
 80013e2:	230c      	movs	r3, #12
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	18d3      	adds	r3, r2, r3
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	210a      	movs	r1, #10
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	3a01      	subs	r2, #1
 80013f4:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80013fc:	d906      	bls.n	800140c <handleReadCoils+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2102      	movs	r1, #2
 8001402:	0018      	movs	r0, r3
 8001404:	f000 f94c 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 8001408:	2300      	movs	r3, #0
 800140a:	e02a      	b.n	8001462 <handleReadCoils+0xe2>
	}
	memset (txFrame, '\0', 256);
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	005a      	lsls	r2, r3, #1
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <handleReadCoils+0xf0>)
 8001412:	2100      	movs	r1, #0
 8001414:	0018      	movs	r0, r3
 8001416:	f005 ff5f 	bl	80072d8 <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 800141a:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <handleReadCoils+0xf4>)
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <handleReadCoils+0xf0>)
 8001420:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <handleReadCoils+0xec>)
 8001424:	785a      	ldrb	r2, [r3, #1]
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <handleReadCoils+0xf0>)
 8001428:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 800142a:	220c      	movs	r2, #12
 800142c:	18bb      	adds	r3, r7, r2
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b29b      	uxth	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	18ba      	adds	r2, r7, r2
 8001438:	8812      	ldrh	r2, [r2, #0]
 800143a:	2107      	movs	r1, #7
 800143c:	400a      	ands	r2, r1
 800143e:	b292      	uxth	r2, r2
 8001440:	1e51      	subs	r1, r2, #1
 8001442:	418a      	sbcs	r2, r1
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	189b      	adds	r3, r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <handleReadCoils+0xf0>)
 800144c:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <handleReadCoils+0xf0>)
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	3303      	adds	r3, #3
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4906      	ldr	r1, [pc, #24]	@ (8001470 <handleReadCoils+0xf0>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	0018      	movs	r0, r3
 800145c:	f7ff fde2 	bl	8001024 <sendModBusRequest>
	return 1;
 8001460:	2301      	movs	r3, #1

}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	20000318 	.word	0x20000318
 8001470:	20000358 	.word	0x20000358
 8001474:	20000000 	.word	0x20000000

08001478 <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001482:	4b39      	ldr	r3, [pc, #228]	@ (8001568 <handleReadDiscreteInputs+0xf0>)
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <handleReadDiscreteInputs+0xf0>)
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	230e      	movs	r3, #14
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	801a      	strh	r2, [r3, #0]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 800149a:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <handleReadDiscreteInputs+0xf0>)
 800149c:	791b      	ldrb	r3, [r3, #4]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <handleReadDiscreteInputs+0xf0>)
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	210c      	movs	r1, #12
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	801a      	strh	r2, [r3, #0]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 80014b2:	000a      	movs	r2, r1
 80014b4:	18bb      	adds	r3, r7, r2
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <handleReadDiscreteInputs+0x50>
 80014bc:	18bb      	adds	r3, r7, r2
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	23fa      	movs	r3, #250	@ 0xfa
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d906      	bls.n	80014d6 <handleReadDiscreteInputs+0x5e>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2103      	movs	r1, #3
 80014cc:	0018      	movs	r0, r3
 80014ce:	f000 f8e7 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e044      	b.n	8001560 <handleReadDiscreteInputs+0xe8>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 80014d6:	230e      	movs	r3, #14
 80014d8:	18fa      	adds	r2, r7, r3
 80014da:	230c      	movs	r3, #12
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	8812      	ldrh	r2, [r2, #0]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	18d3      	adds	r3, r2, r3
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	210a      	movs	r1, #10
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	3a01      	subs	r2, #1
 80014ec:	801a      	strh	r2, [r3, #0]
	if (endingAddr>199)  										 // end coil can not be more than 199
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80014f4:	d906      	bls.n	8001504 <handleReadDiscreteInputs+0x8c>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2102      	movs	r1, #2
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f8d0 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 8001500:	2300      	movs	r3, #0
 8001502:	e02d      	b.n	8001560 <handleReadDiscreteInputs+0xe8>
	}
	memset (txFrame, '\0', 256);
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	005a      	lsls	r2, r3, #1
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <handleReadDiscreteInputs+0xf4>)
 800150a:	2100      	movs	r1, #0
 800150c:	0018      	movs	r0, r3
 800150e:	f005 fee3 	bl	80072d8 <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <handleReadDiscreteInputs+0xf8>)
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <handleReadDiscreteInputs+0xf4>)
 8001518:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <handleReadDiscreteInputs+0xf0>)
 800151c:	785a      	ldrb	r2, [r3, #1]
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <handleReadDiscreteInputs+0xf4>)
 8001520:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001522:	220c      	movs	r2, #12
 8001524:	18bb      	adds	r3, r7, r2
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	18ba      	adds	r2, r7, r2
 8001530:	8812      	ldrh	r2, [r2, #0]
 8001532:	2107      	movs	r1, #7
 8001534:	400a      	ands	r2, r1
 8001536:	b292      	uxth	r2, r2
 8001538:	1e51      	subs	r1, r2, #1
 800153a:	418a      	sbcs	r2, r1
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	189b      	adds	r3, r3, r2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <handleReadDiscreteInputs+0xf4>)
 8001544:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <handleReadDiscreteInputs+0xf4>)
 8001548:	2201      	movs	r2, #1
 800154a:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <handleReadDiscreteInputs+0xf4>)
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	3303      	adds	r3, #3
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4905      	ldr	r1, [pc, #20]	@ (800156c <handleReadDiscreteInputs+0xf4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff fd63 	bl	8001024 <sendModBusRequest>
	return 1;
 800155e:	2301      	movs	r3, #1

}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b004      	add	sp, #16
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000318 	.word	0x20000318
 800156c:	20000358 	.word	0x20000358
 8001570:	20000000 	.word	0x20000000

08001574 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 800157e:	4b45      	ldr	r3, [pc, #276]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 8001580:	789b      	ldrb	r3, [r3, #2]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 8001588:	78db      	ldrb	r3, [r3, #3]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21a      	sxth	r2, r3
 8001590:	2316      	movs	r3, #22
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	801a      	strh	r2, [r3, #0]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001596:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 8001598:	791b      	ldrb	r3, [r3, #4]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 80015a0:	795b      	ldrb	r3, [r3, #5]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	210a      	movs	r1, #10
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	801a      	strh	r2, [r3, #0]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 80015ae:	000a      	movs	r2, r1
 80015b0:	18bb      	adds	r3, r7, r2
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <handleWriteMulyipleHandlingRegister+0x4c>
 80015b8:	18bb      	adds	r3, r7, r2
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2b7b      	cmp	r3, #123	@ 0x7b
 80015be:	d906      	bls.n	80015ce <handleWriteMulyipleHandlingRegister+0x5a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2103      	movs	r1, #3
 80015c4:	0018      	movs	r0, r3
 80015c6:	f000 f86b 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e05d      	b.n	800168a <handleWriteMulyipleHandlingRegister+0x116>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 80015ce:	2316      	movs	r3, #22
 80015d0:	18fa      	adds	r2, r7, r3
 80015d2:	230a      	movs	r3, #10
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	8812      	ldrh	r2, [r2, #0]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	18d3      	adds	r3, r2, r3
 80015dc:	b29a      	uxth	r2, r3
 80015de:	2108      	movs	r1, #8
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	3a01      	subs	r2, #1
 80015e4:	801a      	strh	r2, [r3, #0]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	2b3c      	cmp	r3, #60	@ 0x3c
 80015ec:	d906      	bls.n	80015fc <handleWriteMulyipleHandlingRegister+0x88>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2102      	movs	r1, #2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 f854 	bl	80016a0 <sendModbusException>
		return MODBUS_ERROR;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e046      	b.n	800168a <handleWriteMulyipleHandlingRegister+0x116>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 80015fc:	2307      	movs	r3, #7
 80015fe:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e01c      	b.n	8001640 <handleWriteMulyipleHandlingRegister+0xcc>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	613a      	str	r2, [r7, #16]
 800160c:	4a21      	ldr	r2, [pc, #132]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6139      	str	r1, [r7, #16]
 800161a:	491e      	ldr	r1, [pc, #120]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 800161c:	5ccb      	ldrb	r3, [r1, r3]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b219      	sxth	r1, r3
 8001624:	2216      	movs	r2, #22
 8001626:	18bb      	adds	r3, r7, r2
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	18ba      	adds	r2, r7, r2
 800162c:	1c58      	adds	r0, r3, #1
 800162e:	8010      	strh	r0, [r2, #0]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	b28a      	uxth	r2, r1
 8001638:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3301      	adds	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	230a      	movs	r3, #10
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbdc      	blt.n	8001606 <handleWriteMulyipleHandlingRegister+0x92>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <handleWriteMulyipleHandlingRegister+0x124>)
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <handleWriteMulyipleHandlingRegister+0x128>)
 8001652:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 8001656:	785a      	ldrb	r2, [r3, #1]
 8001658:	4b10      	ldr	r3, [pc, #64]	@ (800169c <handleWriteMulyipleHandlingRegister+0x128>)
 800165a:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 800165e:	789a      	ldrb	r2, [r3, #2]
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <handleWriteMulyipleHandlingRegister+0x128>)
 8001662:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 8001666:	78da      	ldrb	r2, [r3, #3]
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <handleWriteMulyipleHandlingRegister+0x128>)
 800166a:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 800166e:	791a      	ldrb	r2, [r3, #4]
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <handleWriteMulyipleHandlingRegister+0x128>)
 8001672:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <handleWriteMulyipleHandlingRegister+0x120>)
 8001676:	795a      	ldrb	r2, [r3, #5]
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <handleWriteMulyipleHandlingRegister+0x128>)
 800167a:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 800167c:	4907      	ldr	r1, [pc, #28]	@ (800169c <handleWriteMulyipleHandlingRegister+0x128>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2206      	movs	r2, #6
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff fcce 	bl	8001024 <sendModBusRequest>
	return 1;   // success
 8001688:	2301      	movs	r3, #1

}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b006      	add	sp, #24
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	20000318 	.word	0x20000318
 8001698:	20000000 	.word	0x20000000
 800169c:	20000358 	.word	0x20000358

080016a0 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	000a      	movs	r2, r1
 80016aa:	1cfb      	adds	r3, r7, #3
 80016ac:	701a      	strb	r2, [r3, #0]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <sendModbusException+0x44>)
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <sendModbusException+0x48>)
 80016b4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <sendModbusException+0x44>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	2280      	movs	r2, #128	@ 0x80
 80016bc:	4252      	negs	r2, r2
 80016be:	4313      	orrs	r3, r2
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <sendModbusException+0x48>)
 80016c4:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <sendModbusException+0x48>)
 80016c8:	1cfa      	adds	r2, r7, #3
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	709a      	strb	r2, [r3, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 80016ce:	4906      	ldr	r1, [pc, #24]	@ (80016e8 <sendModbusException+0x48>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2203      	movs	r2, #3
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff fca5 	bl	8001024 <sendModBusRequest>
 80016da:	0003      	movs	r3, r0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000318 	.word	0x20000318
 80016e8:	20000358 	.word	0x20000358

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_MspInit+0x54>)
 80016f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_MspInit+0x54>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_MspInit+0x54>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	2201      	movs	r2, #1
 8001704:	4013      	ands	r3, r2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_MspInit+0x54>)
 800170c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <HAL_MspInit+0x54>)
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	0549      	lsls	r1, r1, #21
 8001714:	430a      	orrs	r2, r1
 8001716:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_MspInit+0x54>)
 800171a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	055b      	lsls	r3, r3, #21
 8001720:	4013      	ands	r3, r2
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2004      	movs	r0, #4
 800172c:	f001 f8bc 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001730:	2004      	movs	r0, #4
 8001732:	f001 f8ce 	bl	80028d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	@ 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	2414      	movs	r4, #20
 800174e:	193b      	adds	r3, r7, r4
 8001750:	0018      	movs	r0, r3
 8001752:	2314      	movs	r3, #20
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f005 fdbe 	bl	80072d8 <memset>
  if(hadc->Instance==ADC1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a18      	ldr	r2, [pc, #96]	@ (80017c4 <HAL_ADC_MspInit+0x80>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d129      	bne.n	80017ba <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001766:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_ADC_MspInit+0x84>)
 8001768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_ADC_MspInit+0x84>)
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	0349      	lsls	r1, r1, #13
 8001770:	430a      	orrs	r2, r1
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_ADC_MspInit+0x84>)
 8001776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	035b      	lsls	r3, r3, #13
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_ADC_MspInit+0x84>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_ADC_MspInit+0x84>)
 8001788:	2101      	movs	r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <HAL_ADC_MspInit+0x84>)
 8001790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800179a:	193b      	adds	r3, r7, r4
 800179c:	22a0      	movs	r2, #160	@ 0xa0
 800179e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	2203      	movs	r2, #3
 80017a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	193a      	adds	r2, r7, r4
 80017ae:	23a0      	movs	r3, #160	@ 0xa0
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f001 fc59 	bl	800306c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b00b      	add	sp, #44	@ 0x2c
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	40012400 	.word	0x40012400
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b08b      	sub	sp, #44	@ 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	2414      	movs	r4, #20
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	0018      	movs	r0, r3
 80017da:	2314      	movs	r3, #20
 80017dc:	001a      	movs	r2, r3
 80017de:	2100      	movs	r1, #0
 80017e0:	f005 fd7a 	bl	80072d8 <memset>
  if(hi2c->Instance==I2C2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <HAL_I2C_MspInit+0x90>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d131      	bne.n	8001852 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_I2C_MspInit+0x94>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <HAL_I2C_MspInit+0x94>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_I2C_MspInit+0x94>)
 80017fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fe:	2201      	movs	r2, #1
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	22c0      	movs	r2, #192	@ 0xc0
 800180a:	0152      	lsls	r2, r2, #5
 800180c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180e:	0021      	movs	r1, r4
 8001810:	187b      	adds	r3, r7, r1
 8001812:	2212      	movs	r2, #18
 8001814:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	187b      	adds	r3, r7, r1
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001822:	187b      	adds	r3, r7, r1
 8001824:	2206      	movs	r2, #6
 8001826:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	187a      	adds	r2, r7, r1
 800182a:	23a0      	movs	r3, #160	@ 0xa0
 800182c:	05db      	lsls	r3, r3, #23
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f001 fc1b 	bl	800306c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_I2C_MspInit+0x94>)
 8001838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_I2C_MspInit+0x94>)
 800183c:	2180      	movs	r1, #128	@ 0x80
 800183e:	03c9      	lsls	r1, r1, #15
 8001840:	430a      	orrs	r2, r1
 8001842:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_I2C_MspInit+0x94>)
 8001846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	03db      	lsls	r3, r3, #15
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b00b      	add	sp, #44	@ 0x2c
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	40005800 	.word	0x40005800
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a21      	ldr	r2, [pc, #132]	@ (80018f8 <HAL_TIM_Base_MspInit+0x94>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 8001878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 800187c:	2180      	movs	r1, #128	@ 0x80
 800187e:	0109      	lsls	r1, r1, #4
 8001880:	430a      	orrs	r2, r1
 8001882:	641a      	str	r2, [r3, #64]	@ 0x40
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 8001886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4013      	ands	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001892:	e02c      	b.n	80018ee <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM3)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	@ (8001900 <HAL_TIM_Base_MspInit+0x9c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10c      	bne.n	80018b8 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189e:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 80018a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 80018a4:	2102      	movs	r1, #2
 80018a6:	430a      	orrs	r2, r1
 80018a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 80018ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
}
 80018b6:	e01a      	b.n	80018ee <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM14)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <HAL_TIM_Base_MspInit+0xa0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d115      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 80018c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 80018c8:	2180      	movs	r1, #128	@ 0x80
 80018ca:	0209      	lsls	r1, r1, #8
 80018cc:	430a      	orrs	r2, r1
 80018ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80018d0:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_TIM_Base_MspInit+0x98>)
 80018d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2013      	movs	r0, #19
 80018e4:	f000 ffe0 	bl	80028a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80018e8:	2013      	movs	r0, #19
 80018ea:	f000 fff2 	bl	80028d2 <HAL_NVIC_EnableIRQ>
}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b006      	add	sp, #24
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40000400 	.word	0x40000400
 8001904:	40002000 	.word	0x40002000

08001908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b08b      	sub	sp, #44	@ 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	2414      	movs	r4, #20
 8001912:	193b      	adds	r3, r7, r4
 8001914:	0018      	movs	r0, r3
 8001916:	2314      	movs	r3, #20
 8001918:	001a      	movs	r2, r3
 800191a:	2100      	movs	r1, #0
 800191c:	f005 fcdc 	bl	80072d8 <memset>
  if(htim->Instance==TIM1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a29      	ldr	r2, [pc, #164]	@ (80019cc <HAL_TIM_MspPostInit+0xc4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d124      	bne.n	8001974 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <HAL_TIM_MspPostInit+0xc8>)
 800192c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <HAL_TIM_MspPostInit+0xc8>)
 8001930:	2101      	movs	r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	@ 0x34
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <HAL_TIM_MspPostInit+0xc8>)
 8001938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001942:	193b      	adds	r3, r7, r4
 8001944:	2280      	movs	r2, #128	@ 0x80
 8001946:	0052      	lsls	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	0021      	movs	r1, r4
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2202      	movs	r2, #2
 8001950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2202      	movs	r2, #2
 800195c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2202      	movs	r2, #2
 8001962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	187a      	adds	r2, r7, r1
 8001966:	23a0      	movs	r3, #160	@ 0xa0
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f001 fb7d 	bl	800306c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001972:	e027      	b.n	80019c4 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <HAL_TIM_MspPostInit+0xcc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d122      	bne.n	80019c4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <HAL_TIM_MspPostInit+0xc8>)
 8001980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001982:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_TIM_MspPostInit+0xc8>)
 8001984:	2101      	movs	r1, #1
 8001986:	430a      	orrs	r2, r1
 8001988:	635a      	str	r2, [r3, #52]	@ 0x34
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_TIM_MspPostInit+0xc8>)
 800198c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198e:	2201      	movs	r2, #1
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001996:	2114      	movs	r1, #20
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2240      	movs	r2, #64	@ 0x40
 800199c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2202      	movs	r2, #2
 80019a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2202      	movs	r2, #2
 80019ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2201      	movs	r2, #1
 80019b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	187a      	adds	r2, r7, r1
 80019b8:	23a0      	movs	r3, #160	@ 0xa0
 80019ba:	05db      	lsls	r3, r3, #23
 80019bc:	0011      	movs	r1, r2
 80019be:	0018      	movs	r0, r3
 80019c0:	f001 fb54 	bl	800306c <HAL_GPIO_Init>
}
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b00b      	add	sp, #44	@ 0x2c
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40000400 	.word	0x40000400

080019d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b091      	sub	sp, #68	@ 0x44
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	232c      	movs	r3, #44	@ 0x2c
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	0018      	movs	r0, r3
 80019e6:	2314      	movs	r3, #20
 80019e8:	001a      	movs	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	f005 fc74 	bl	80072d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f0:	2414      	movs	r4, #20
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	0018      	movs	r0, r3
 80019f6:	2318      	movs	r3, #24
 80019f8:	001a      	movs	r2, r3
 80019fa:	2100      	movs	r1, #0
 80019fc:	f005 fc6c 	bl	80072d8 <memset>
  if(huart->Instance==USART1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a50      	ldr	r2, [pc, #320]	@ (8001b48 <HAL_UART_MspInit+0x170>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d000      	beq.n	8001a0c <HAL_UART_MspInit+0x34>
 8001a0a:	e098      	b.n	8001b3e <HAL_UART_MspInit+0x166>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a0c:	193b      	adds	r3, r7, r4
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f002 fbd6 	bl	80041cc <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001a24:	f7ff fa9e 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	4b48      	ldr	r3, [pc, #288]	@ (8001b4c <HAL_UART_MspInit+0x174>)
 8001a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a2c:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_UART_MspInit+0x174>)
 8001a2e:	2180      	movs	r1, #128	@ 0x80
 8001a30:	01c9      	lsls	r1, r1, #7
 8001a32:	430a      	orrs	r2, r1
 8001a34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a36:	4b45      	ldr	r3, [pc, #276]	@ (8001b4c <HAL_UART_MspInit+0x174>)
 8001a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	01db      	lsls	r3, r3, #7
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	4b41      	ldr	r3, [pc, #260]	@ (8001b4c <HAL_UART_MspInit+0x174>)
 8001a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a48:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <HAL_UART_MspInit+0x174>)
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a50:	4b3e      	ldr	r3, [pc, #248]	@ (8001b4c <HAL_UART_MspInit+0x174>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a5c:	212c      	movs	r1, #44	@ 0x2c
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	22c0      	movs	r2, #192	@ 0xc0
 8001a62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2202      	movs	r2, #2
 8001a68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	4a34      	ldr	r2, [pc, #208]	@ (8001b50 <HAL_UART_MspInit+0x178>)
 8001a80:	0019      	movs	r1, r3
 8001a82:	0010      	movs	r0, r2
 8001a84:	f001 faf2 	bl	800306c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001a88:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001a8a:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <HAL_UART_MspInit+0x180>)
 8001a8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a8e:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001a90:	2232      	movs	r2, #50	@ 0x32
 8001a92:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a94:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aac:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ab2:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab8:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001abe:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 ff33 	bl	800292c <HAL_DMA_Init>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8001aca:	f7ff fa4b 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2180      	movs	r1, #128	@ 0x80
 8001ad2:	4a20      	ldr	r2, [pc, #128]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001ad4:	505a      	str	r2, [r3, r1]
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_UART_MspInit+0x17c>)
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001ade:	4a20      	ldr	r2, [pc, #128]	@ (8001b60 <HAL_UART_MspInit+0x188>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001ae4:	2233      	movs	r2, #51	@ 0x33
 8001ae6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001aea:	2210      	movs	r2, #16
 8001aec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001af6:	2280      	movs	r2, #128	@ 0x80
 8001af8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 ff09 	bl	800292c <HAL_DMA_Init>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 8001b1e:	f7ff fa21 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001b26:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_UART_MspInit+0x184>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	201b      	movs	r0, #27
 8001b34:	f000 feb8 	bl	80028a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b38:	201b      	movs	r0, #27
 8001b3a:	f000 feca 	bl	80028d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b011      	add	sp, #68	@ 0x44
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	50000400 	.word	0x50000400
 8001b54:	2000025c 	.word	0x2000025c
 8001b58:	40020008 	.word	0x40020008
 8001b5c:	200002b8 	.word	0x200002b8
 8001b60:	4002001c 	.word	0x4002001c

08001b64 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_UART_MspDeInit+0x4c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d118      	bne.n	8001ba8 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_UART_MspDeInit+0x50>)
 8001b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_UART_MspDeInit+0x50>)
 8001b7c:	490e      	ldr	r1, [pc, #56]	@ (8001bb8 <HAL_UART_MspDeInit+0x54>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_UART_MspDeInit+0x58>)
 8001b84:	21c0      	movs	r1, #192	@ 0xc0
 8001b86:	0018      	movs	r0, r3
 8001b88:	f001 fbd4 	bl	8003334 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	589b      	ldr	r3, [r3, r2]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 ff54 	bl	8002a40 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 ff4f 	bl	8002a40 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001ba2:	201b      	movs	r0, #27
 8001ba4:	f000 fea5 	bl	80028f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	ffffbfff 	.word	0xffffbfff
 8001bbc:	50000400 	.word	0x50000400

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	e7fd      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	e7fd      	b.n	8001bcc <HardFault_Handler+0x4>

08001bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 f8d2 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <DMA1_Channel1_IRQHandler+0x14>)
 8001c02:	0018      	movs	r0, r3
 8001c04:	f001 f8e6 	bl	8002dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	2000025c 	.word	0x2000025c

08001c14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f001 f8da 	bl	8002dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	200002b8 	.word	0x200002b8

08001c2c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <TIM14_IRQHandler+0x14>)
 8001c32:	0018      	movs	r0, r3
 8001c34:	f002 fdce 	bl	80047d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001c38:	46c0      	nop			@ (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	2000017c 	.word	0x2000017c

08001c44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <USART1_IRQHandler+0x14>)
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f004 f844 	bl	8005cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	200001c8 	.word	0x200001c8

08001c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c68:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c6c:	f7ff fff6 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c96:	f005 fb27 	bl	80072e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c9a:	f7fe fd09 	bl	80006b0 <main>

08001c9e <LoopForever>:

LoopForever:
  b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   r0, =_estack
 8001ca0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cac:	08007470 	.word	0x08007470
  ldr r2, =_sbss
 8001cb0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cb4:	20000560 	.word	0x20000560

08001cb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_Init+0x3c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_Init+0x3c>)
 8001cce:	2180      	movs	r1, #128	@ 0x80
 8001cd0:	0049      	lsls	r1, r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	f000 f810 	bl	8001cfc <HAL_InitTick>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e001      	b.n	8001cec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff fd00 	bl	80016ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	230f      	movs	r3, #15
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_InitTick+0x88>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d02b      	beq.n	8001d6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <HAL_InitTick+0x8c>)
 8001d16:	681c      	ldr	r4, [r3, #0]
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_InitTick+0x88>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	23fa      	movs	r3, #250	@ 0xfa
 8001d20:	0098      	lsls	r0, r3, #2
 8001d22:	f7fe f9ed 	bl	8000100 <__udivsi3>
 8001d26:	0003      	movs	r3, r0
 8001d28:	0019      	movs	r1, r3
 8001d2a:	0020      	movs	r0, r4
 8001d2c:	f7fe f9e8 	bl	8000100 <__udivsi3>
 8001d30:	0003      	movs	r3, r0
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fded 	bl	8002912 <HAL_SYSTICK_Config>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d112      	bne.n	8001d62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d80a      	bhi.n	8001d58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	2301      	movs	r3, #1
 8001d46:	425b      	negs	r3, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 fdac 	bl	80028a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <HAL_InitTick+0x90>)
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e00d      	b.n	8001d74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e008      	b.n	8001d74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d62:	230f      	movs	r3, #15
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	e003      	b.n	8001d74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d74:	230f      	movs	r3, #15
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	781b      	ldrb	r3, [r3, #0]
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b005      	add	sp, #20
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000004 	.word	0x20000004
 8001d8c:	20000008 	.word	0x20000008

08001d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_IncTick+0x1c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	001a      	movs	r2, r3
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_IncTick+0x20>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	18d2      	adds	r2, r2, r3
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_IncTick+0x20>)
 8001da2:	601a      	str	r2, [r3, #0]
}
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	2000055c 	.word	0x2000055c

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b02      	ldr	r3, [pc, #8]	@ (8001dc4 <HAL_GetTick+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	2000055c 	.word	0x2000055c

08001dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff fff0 	bl	8001db4 <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3301      	adds	r3, #1
 8001de0:	d005      	beq.n	8001dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_Delay+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	001a      	movs	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	189b      	adds	r3, r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	f7ff ffe0 	bl	8001db4 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d8f7      	bhi.n	8001df0 <HAL_Delay+0x28>
  {
  }
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e20:	401a      	ands	r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	fe3fffff 	.word	0xfe3fffff

08001e38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	23e0      	movs	r3, #224	@ 0xe0
 8001e46:	045b      	lsls	r3, r3, #17
 8001e48:	4013      	ands	r3, r2
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	2104      	movs	r1, #4
 8001e66:	400a      	ands	r2, r1
 8001e68:	2107      	movs	r1, #7
 8001e6a:	4091      	lsls	r1, r2
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	43d2      	mvns	r2, r2
 8001e70:	401a      	ands	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2104      	movs	r1, #4
 8001e76:	400b      	ands	r3, r1
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4099      	lsls	r1, r3
 8001e7c:	000b      	movs	r3, r1
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b004      	add	sp, #16
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	2107      	movs	r1, #7
 8001ea2:	4091      	lsls	r1, r2
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2104      	movs	r1, #4
 8001eac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	0013      	movs	r3, r2
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	211f      	movs	r1, #31
 8001ece:	400a      	ands	r2, r1
 8001ed0:	210f      	movs	r1, #15
 8001ed2:	4091      	lsls	r1, r2
 8001ed4:	000a      	movs	r2, r1
 8001ed6:	43d2      	mvns	r2, r2
 8001ed8:	401a      	ands	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	210f      	movs	r1, #15
 8001ee0:	4019      	ands	r1, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	201f      	movs	r0, #31
 8001ee6:	4003      	ands	r3, r0
 8001ee8:	4099      	lsls	r1, r3
 8001eea:	000b      	movs	r3, r1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	035b      	lsls	r3, r3, #13
 8001f0c:	0b5b      	lsrs	r3, r3, #13
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	0352      	lsls	r2, r2, #13
 8001f2e:	0b52      	lsrs	r2, r2, #13
 8001f30:	43d2      	mvns	r2, r2
 8001f32:	401a      	ands	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f38:	46c0      	nop			@ (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	0212      	lsls	r2, r2, #8
 8001f54:	43d2      	mvns	r2, r2
 8001f56:	401a      	ands	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
 8001f60:	4904      	ldr	r1, [pc, #16]	@ (8001f74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001f62:	400b      	ands	r3, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b004      	add	sp, #16
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	07ffff00 	.word	0x07ffff00

08001f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <LL_ADC_EnableInternalRegulator+0x24>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	0552      	lsls	r2, r2, #21
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	6fffffe8 	.word	0x6fffffe8

08001fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	055b      	lsls	r3, r3, #21
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	055b      	lsls	r3, r3, #21
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d101      	bne.n	8001fbe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <LL_ADC_IsEnabled+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_ADC_IsEnabled+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	231f      	movs	r3, #31
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e17f      	b.n	8002332 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f7ff fb81 	bl	8001744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2254      	movs	r2, #84	@ 0x54
 800204c:	2100      	movs	r1, #0
 800204e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff ffa3 	bl	8001fa0 <LL_ADC_IsInternalRegulatorEnabled>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d115      	bne.n	800208a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff ff88 	bl	8001f78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002068:	4bb4      	ldr	r3, [pc, #720]	@ (800233c <HAL_ADC_Init+0x330>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	49b4      	ldr	r1, [pc, #720]	@ (8002340 <HAL_ADC_Init+0x334>)
 800206e:	0018      	movs	r0, r3
 8002070:	f7fe f846 	bl	8000100 <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800207c:	e002      	b.n	8002084 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3b01      	subs	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f9      	bne.n	800207e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff ff86 	bl	8001fa0 <LL_ADC_IsInternalRegulatorEnabled>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d10f      	bne.n	80020b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	2210      	movs	r2, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2201      	movs	r2, #1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020b0:	231f      	movs	r3, #31
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff ff94 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 80020c2:	0003      	movs	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	2210      	movs	r2, #16
 80020cc:	4013      	ands	r3, r2
 80020ce:	d000      	beq.n	80020d2 <HAL_ADC_Init+0xc6>
 80020d0:	e122      	b.n	8002318 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d000      	beq.n	80020da <HAL_ADC_Init+0xce>
 80020d8:	e11e      	b.n	8002318 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	4a99      	ldr	r2, [pc, #612]	@ (8002344 <HAL_ADC_Init+0x338>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	2202      	movs	r2, #2
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff ff6a 	bl	8001fc8 <LL_ADC_IsEnabled>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d000      	beq.n	80020fa <HAL_ADC_Init+0xee>
 80020f8:	e0ad      	b.n	8002256 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7e1b      	ldrb	r3, [r3, #24]
 8002102:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002104:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7e5b      	ldrb	r3, [r3, #25]
 800210a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800210c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7e9b      	ldrb	r3, [r3, #26]
 8002112:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002114:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_ADC_Init+0x118>
 800211e:	2380      	movs	r3, #128	@ 0x80
 8002120:	015b      	lsls	r3, r3, #5
 8002122:	e000      	b.n	8002126 <HAL_ADC_Init+0x11a>
 8002124:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002126:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800212c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da04      	bge.n	8002140 <HAL_ADC_Init+0x134>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	e001      	b.n	8002144 <HAL_ADC_Init+0x138>
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002144:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	212c      	movs	r1, #44	@ 0x2c
 800214a:	5c5b      	ldrb	r3, [r3, r1]
 800214c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800214e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	5c9b      	ldrb	r3, [r3, r2]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d115      	bne.n	800218c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e9b      	ldrb	r3, [r3, #26]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	0252      	lsls	r2, r2, #9
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	e00b      	b.n	800218c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	2220      	movs	r2, #32
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002184:	2201      	movs	r2, #1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002198:	23e0      	movs	r3, #224	@ 0xe0
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80021a2:	4313      	orrs	r3, r2
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a65      	ldr	r2, [pc, #404]	@ (8002348 <HAL_ADC_Init+0x33c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	430a      	orrs	r2, r1
 80021be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0f9b      	lsrs	r3, r3, #30
 80021c6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	223c      	movs	r2, #60	@ 0x3c
 80021d8:	5c9b      	ldrb	r3, [r3, r2]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d111      	bne.n	8002202 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0f9b      	lsrs	r3, r3, #30
 80021e4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021ea:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80021f0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80021f6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	2201      	movs	r2, #1
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	4a50      	ldr	r2, [pc, #320]	@ (800234c <HAL_ADC_Init+0x340>)
 800220a:	4013      	ands	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	430a      	orrs	r2, r1
 8002216:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	23c0      	movs	r3, #192	@ 0xc0
 800221e:	061b      	lsls	r3, r3, #24
 8002220:	429a      	cmp	r2, r3
 8002222:	d018      	beq.n	8002256 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	05db      	lsls	r3, r3, #23
 800222c:	429a      	cmp	r2, r3
 800222e:	d012      	beq.n	8002256 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	061b      	lsls	r3, r3, #24
 8002238:	429a      	cmp	r2, r3
 800223a:	d00c      	beq.n	8002256 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800223c:	4b44      	ldr	r3, [pc, #272]	@ (8002350 <HAL_ADC_Init+0x344>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a44      	ldr	r2, [pc, #272]	@ (8002354 <HAL_ADC_Init+0x348>)
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	23f0      	movs	r3, #240	@ 0xf0
 800224c:	039b      	lsls	r3, r3, #14
 800224e:	401a      	ands	r2, r3
 8002250:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_ADC_Init+0x344>)
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225e:	001a      	movs	r2, r3
 8002260:	2100      	movs	r1, #0
 8002262:	f7ff fdf6 	bl	8001e52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	493a      	ldr	r1, [pc, #232]	@ (8002358 <HAL_ADC_Init+0x34c>)
 8002270:	001a      	movs	r2, r3
 8002272:	f7ff fdee 	bl	8001e52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2110      	movs	r1, #16
 800228a:	4249      	negs	r1, r1
 800228c:	430a      	orrs	r2, r1
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002290:	e018      	b.n	80022c4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	039b      	lsls	r3, r3, #14
 800229a:	429a      	cmp	r2, r3
 800229c:	d112      	bne.n	80022c4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	221c      	movs	r2, #28
 80022ae:	4013      	ands	r3, r2
 80022b0:	2210      	movs	r2, #16
 80022b2:	4252      	negs	r2, r2
 80022b4:	409a      	lsls	r2, r3
 80022b6:	0011      	movs	r1, r2
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2100      	movs	r1, #0
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff fdde 	bl	8001e8c <LL_ADC_GetSamplingTimeCommonChannels>
 80022d0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d10b      	bne.n	80022f2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e4:	2203      	movs	r2, #3
 80022e6:	4393      	bics	r3, r2
 80022e8:	2201      	movs	r2, #1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022f0:	e01c      	b.n	800232c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	2212      	movs	r2, #18
 80022f8:	4393      	bics	r3, r2
 80022fa:	2210      	movs	r2, #16
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	2201      	movs	r2, #1
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800230e:	231f      	movs	r3, #31
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002316:	e009      	b.n	800232c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	2210      	movs	r2, #16
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002324:	231f      	movs	r3, #31
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800232c:	231f      	movs	r3, #31
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b008      	add	sp, #32
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	20000004 	.word	0x20000004
 8002340:	00030d40 	.word	0x00030d40
 8002344:	fffffefd 	.word	0xfffffefd
 8002348:	ffde0201 	.word	0xffde0201
 800234c:	1ffffc02 	.word	0x1ffffc02
 8002350:	40012708 	.word	0x40012708
 8002354:	ffc3ffff 	.word	0xffc3ffff
 8002358:	07ffff04 	.word	0x07ffff04

0800235c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002366:	2317      	movs	r3, #23
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2254      	movs	r2, #84	@ 0x54
 8002376:	5c9b      	ldrb	r3, [r3, r2]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x24>
 800237c:	2302      	movs	r3, #2
 800237e:	e1c0      	b.n	8002702 <HAL_ADC_ConfigChannel+0x3a6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2254      	movs	r2, #84	@ 0x54
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff fe2c 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d000      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x3c>
 8002396:	e1a3      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d100      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x46>
 80023a0:	e143      	b.n	800262a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d004      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023b2:	4ac1      	ldr	r2, [pc, #772]	@ (80026b8 <HAL_ADC_ConfigChannel+0x35c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d108      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0019      	movs	r1, r3
 80023c2:	0010      	movs	r0, r2
 80023c4:	f7ff fd99 	bl	8001efa <LL_ADC_REG_SetSequencerChAdd>
 80023c8:	e0c9      	b.n	800255e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	211f      	movs	r1, #31
 80023d4:	400b      	ands	r3, r1
 80023d6:	210f      	movs	r1, #15
 80023d8:	4099      	lsls	r1, r3
 80023da:	000b      	movs	r3, r1
 80023dc:	43db      	mvns	r3, r3
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	035b      	lsls	r3, r3, #13
 80023e8:	0b5b      	lsrs	r3, r3, #13
 80023ea:	d105      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x9c>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	221f      	movs	r2, #31
 80023f4:	4013      	ands	r3, r2
 80023f6:	e098      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	d000      	beq.n	8002404 <HAL_ADC_ConfigChannel+0xa8>
 8002402:	e091      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1cc>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d000      	beq.n	8002410 <HAL_ADC_ConfigChannel+0xb4>
 800240e:	e089      	b.n	8002524 <HAL_ADC_ConfigChannel+0x1c8>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2204      	movs	r2, #4
 8002416:	4013      	ands	r3, r2
 8002418:	d000      	beq.n	800241c <HAL_ADC_ConfigChannel+0xc0>
 800241a:	e081      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1c4>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2208      	movs	r2, #8
 8002422:	4013      	ands	r3, r2
 8002424:	d000      	beq.n	8002428 <HAL_ADC_ConfigChannel+0xcc>
 8002426:	e079      	b.n	800251c <HAL_ADC_ConfigChannel+0x1c0>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2210      	movs	r2, #16
 800242e:	4013      	ands	r3, r2
 8002430:	d000      	beq.n	8002434 <HAL_ADC_ConfigChannel+0xd8>
 8002432:	e071      	b.n	8002518 <HAL_ADC_ConfigChannel+0x1bc>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2220      	movs	r2, #32
 800243a:	4013      	ands	r3, r2
 800243c:	d000      	beq.n	8002440 <HAL_ADC_ConfigChannel+0xe4>
 800243e:	e069      	b.n	8002514 <HAL_ADC_ConfigChannel+0x1b8>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2240      	movs	r2, #64	@ 0x40
 8002446:	4013      	ands	r3, r2
 8002448:	d000      	beq.n	800244c <HAL_ADC_ConfigChannel+0xf0>
 800244a:	e061      	b.n	8002510 <HAL_ADC_ConfigChannel+0x1b4>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	4013      	ands	r3, r2
 8002454:	d000      	beq.n	8002458 <HAL_ADC_ConfigChannel+0xfc>
 8002456:	e059      	b.n	800250c <HAL_ADC_ConfigChannel+0x1b0>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4013      	ands	r3, r2
 8002462:	d151      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1ac>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4013      	ands	r3, r2
 800246e:	d149      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1a8>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4013      	ands	r3, r2
 800247a:	d141      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x1a4>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4013      	ands	r3, r2
 8002486:	d139      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1a0>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	015b      	lsls	r3, r3, #5
 8002490:	4013      	ands	r3, r2
 8002492:	d131      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x19c>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	019b      	lsls	r3, r3, #6
 800249c:	4013      	ands	r3, r2
 800249e:	d129      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x198>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	01db      	lsls	r3, r3, #7
 80024a8:	4013      	ands	r3, r2
 80024aa:	d121      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x194>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4013      	ands	r3, r2
 80024b6:	d119      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x190>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	025b      	lsls	r3, r3, #9
 80024c0:	4013      	ands	r3, r2
 80024c2:	d111      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x18c>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	4013      	ands	r3, r2
 80024ce:	d109      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x188>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	02db      	lsls	r3, r3, #11
 80024d8:	4013      	ands	r3, r2
 80024da:	d001      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x184>
 80024dc:	2312      	movs	r3, #18
 80024de:	e024      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e022      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024e4:	2311      	movs	r3, #17
 80024e6:	e020      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024e8:	2310      	movs	r3, #16
 80024ea:	e01e      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024ec:	230f      	movs	r3, #15
 80024ee:	e01c      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024f0:	230e      	movs	r3, #14
 80024f2:	e01a      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024f4:	230d      	movs	r3, #13
 80024f6:	e018      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024f8:	230c      	movs	r3, #12
 80024fa:	e016      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 80024fc:	230b      	movs	r3, #11
 80024fe:	e014      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002500:	230a      	movs	r3, #10
 8002502:	e012      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002504:	2309      	movs	r3, #9
 8002506:	e010      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002508:	2308      	movs	r3, #8
 800250a:	e00e      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 800250c:	2307      	movs	r3, #7
 800250e:	e00c      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002510:	2306      	movs	r3, #6
 8002512:	e00a      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002514:	2305      	movs	r3, #5
 8002516:	e008      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002518:	2304      	movs	r3, #4
 800251a:	e006      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 800251c:	2303      	movs	r3, #3
 800251e:	e004      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_ADC_ConfigChannel+0x1ce>
 8002528:	2300      	movs	r3, #0
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6852      	ldr	r2, [r2, #4]
 800252e:	201f      	movs	r0, #31
 8002530:	4002      	ands	r2, r0
 8002532:	4093      	lsls	r3, r2
 8002534:	000a      	movs	r2, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	429a      	cmp	r2, r3
 800254a:	d808      	bhi.n	800255e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	001a      	movs	r2, r3
 800255a:	f7ff fcae 	bl	8001eba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	001a      	movs	r2, r3
 800256c:	f7ff fce8 	bl	8001f40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db00      	blt.n	800257a <HAL_ADC_ConfigChannel+0x21e>
 8002578:	e0bc      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800257a:	4b50      	ldr	r3, [pc, #320]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff fc5b 	bl	8001e38 <LL_ADC_GetCommonPathInternalCh>
 8002582:	0003      	movs	r3, r0
 8002584:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a4d      	ldr	r2, [pc, #308]	@ (80026c0 <HAL_ADC_ConfigChannel+0x364>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d122      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002598:	d11d      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	0412      	lsls	r2, r2, #16
 80025a0:	4313      	orrs	r3, r2
 80025a2:	4a46      	ldr	r2, [pc, #280]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 80025a4:	0019      	movs	r1, r3
 80025a6:	0010      	movs	r0, r2
 80025a8:	f7ff fc32 	bl	8001e10 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ac:	4b45      	ldr	r3, [pc, #276]	@ (80026c4 <HAL_ADC_ConfigChannel+0x368>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4945      	ldr	r1, [pc, #276]	@ (80026c8 <HAL_ADC_ConfigChannel+0x36c>)
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7fd fda4 	bl	8000100 <__udivsi3>
 80025b8:	0003      	movs	r3, r0
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	0013      	movs	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	189b      	adds	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025c6:	e002      	b.n	80025ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025d4:	e08e      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a3c      	ldr	r2, [pc, #240]	@ (80026cc <HAL_ADC_ConfigChannel+0x370>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d10e      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	045b      	lsls	r3, r3, #17
 80025e6:	4013      	ands	r3, r2
 80025e8:	d109      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2280      	movs	r2, #128	@ 0x80
 80025ee:	0452      	lsls	r2, r2, #17
 80025f0:	4313      	orrs	r3, r2
 80025f2:	4a32      	ldr	r2, [pc, #200]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 80025f4:	0019      	movs	r1, r3
 80025f6:	0010      	movs	r0, r2
 80025f8:	f7ff fc0a 	bl	8001e10 <LL_ADC_SetCommonPathInternalCh>
 80025fc:	e07a      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a33      	ldr	r2, [pc, #204]	@ (80026d0 <HAL_ADC_ConfigChannel+0x374>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d000      	beq.n	800260a <HAL_ADC_ConfigChannel+0x2ae>
 8002608:	e074      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	03db      	lsls	r3, r3, #15
 8002610:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002612:	d000      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x2ba>
 8002614:	e06e      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2280      	movs	r2, #128	@ 0x80
 800261a:	03d2      	lsls	r2, r2, #15
 800261c:	4313      	orrs	r3, r2
 800261e:	4a27      	ldr	r2, [pc, #156]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 8002620:	0019      	movs	r1, r3
 8002622:	0010      	movs	r0, r2
 8002624:	f7ff fbf4 	bl	8001e10 <LL_ADC_SetCommonPathInternalCh>
 8002628:	e064      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	429a      	cmp	r2, r3
 8002634:	d004      	beq.n	8002640 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800263a:	4a1f      	ldr	r2, [pc, #124]	@ (80026b8 <HAL_ADC_ConfigChannel+0x35c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d107      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0019      	movs	r1, r3
 800264a:	0010      	movs	r0, r2
 800264c:	f7ff fc66 	bl	8001f1c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da4d      	bge.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002658:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff fbec 	bl	8001e38 <LL_ADC_GetCommonPathInternalCh>
 8002660:	0003      	movs	r3, r0
 8002662:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a15      	ldr	r2, [pc, #84]	@ (80026c0 <HAL_ADC_ConfigChannel+0x364>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <HAL_ADC_ConfigChannel+0x378>)
 8002672:	4013      	ands	r3, r2
 8002674:	4a11      	ldr	r2, [pc, #68]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 8002676:	0019      	movs	r1, r3
 8002678:	0010      	movs	r0, r2
 800267a:	f7ff fbc9 	bl	8001e10 <LL_ADC_SetCommonPathInternalCh>
 800267e:	e039      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a11      	ldr	r2, [pc, #68]	@ (80026cc <HAL_ADC_ConfigChannel+0x370>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <HAL_ADC_ConfigChannel+0x37c>)
 800268e:	4013      	ands	r3, r2
 8002690:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 8002692:	0019      	movs	r1, r3
 8002694:	0010      	movs	r0, r2
 8002696:	f7ff fbbb 	bl	8001e10 <LL_ADC_SetCommonPathInternalCh>
 800269a:	e02b      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0b      	ldr	r2, [pc, #44]	@ (80026d0 <HAL_ADC_ConfigChannel+0x374>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d126      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4a0c      	ldr	r2, [pc, #48]	@ (80026dc <HAL_ADC_ConfigChannel+0x380>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	4a03      	ldr	r2, [pc, #12]	@ (80026bc <HAL_ADC_ConfigChannel+0x360>)
 80026ae:	0019      	movs	r1, r3
 80026b0:	0010      	movs	r0, r2
 80026b2:	f7ff fbad 	bl	8001e10 <LL_ADC_SetCommonPathInternalCh>
 80026b6:	e01d      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x398>
 80026b8:	80000004 	.word	0x80000004
 80026bc:	40012708 	.word	0x40012708
 80026c0:	b0001000 	.word	0xb0001000
 80026c4:	20000004 	.word	0x20000004
 80026c8:	00030d40 	.word	0x00030d40
 80026cc:	b8004000 	.word	0xb8004000
 80026d0:	b4002000 	.word	0xb4002000
 80026d4:	ff7fffff 	.word	0xff7fffff
 80026d8:	feffffff 	.word	0xfeffffff
 80026dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	2220      	movs	r2, #32
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026ec:	2317      	movs	r3, #23
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2254      	movs	r2, #84	@ 0x54
 80026f8:	2100      	movs	r1, #0
 80026fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80026fc:	2317      	movs	r3, #23
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b006      	add	sp, #24
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	0002      	movs	r2, r0
 8002714:	1dfb      	adds	r3, r7, #7
 8002716:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b7f      	cmp	r3, #127	@ 0x7f
 800271e:	d809      	bhi.n	8002734 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002720:	1dfb      	adds	r3, r7, #7
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	001a      	movs	r2, r3
 8002726:	231f      	movs	r3, #31
 8002728:	401a      	ands	r2, r3
 800272a:	4b04      	ldr	r3, [pc, #16]	@ (800273c <__NVIC_EnableIRQ+0x30>)
 800272c:	2101      	movs	r1, #1
 800272e:	4091      	lsls	r1, r2
 8002730:	000a      	movs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	0002      	movs	r2, r0
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b7f      	cmp	r3, #127	@ 0x7f
 8002752:	d810      	bhi.n	8002776 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002754:	1dfb      	adds	r3, r7, #7
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	001a      	movs	r2, r3
 800275a:	231f      	movs	r3, #31
 800275c:	4013      	ands	r3, r2
 800275e:	4908      	ldr	r1, [pc, #32]	@ (8002780 <__NVIC_DisableIRQ+0x40>)
 8002760:	2201      	movs	r2, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800276a:	f3bf 8f4f 	dsb	sy
}
 800276e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002770:	f3bf 8f6f 	isb	sy
}
 8002774:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	0002      	movs	r2, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b7f      	cmp	r3, #127	@ 0x7f
 8002798:	d828      	bhi.n	80027ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279a:	4a2f      	ldr	r2, [pc, #188]	@ (8002858 <__NVIC_SetPriority+0xd4>)
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	33c0      	adds	r3, #192	@ 0xc0
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	589b      	ldr	r3, [r3, r2]
 80027aa:	1dfa      	adds	r2, r7, #7
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	0011      	movs	r1, r2
 80027b0:	2203      	movs	r2, #3
 80027b2:	400a      	ands	r2, r1
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	21ff      	movs	r1, #255	@ 0xff
 80027b8:	4091      	lsls	r1, r2
 80027ba:	000a      	movs	r2, r1
 80027bc:	43d2      	mvns	r2, r2
 80027be:	401a      	ands	r2, r3
 80027c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	22ff      	movs	r2, #255	@ 0xff
 80027c8:	401a      	ands	r2, r3
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	2303      	movs	r3, #3
 80027d2:	4003      	ands	r3, r0
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027d8:	481f      	ldr	r0, [pc, #124]	@ (8002858 <__NVIC_SetPriority+0xd4>)
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	430a      	orrs	r2, r1
 80027e4:	33c0      	adds	r3, #192	@ 0xc0
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027ea:	e031      	b.n	8002850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ec:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <__NVIC_SetPriority+0xd8>)
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	0019      	movs	r1, r3
 80027f4:	230f      	movs	r3, #15
 80027f6:	400b      	ands	r3, r1
 80027f8:	3b08      	subs	r3, #8
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3306      	adds	r3, #6
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	18d3      	adds	r3, r2, r3
 8002802:	3304      	adds	r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1dfa      	adds	r2, r7, #7
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	0011      	movs	r1, r2
 800280c:	2203      	movs	r2, #3
 800280e:	400a      	ands	r2, r1
 8002810:	00d2      	lsls	r2, r2, #3
 8002812:	21ff      	movs	r1, #255	@ 0xff
 8002814:	4091      	lsls	r1, r2
 8002816:	000a      	movs	r2, r1
 8002818:	43d2      	mvns	r2, r2
 800281a:	401a      	ands	r2, r3
 800281c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	22ff      	movs	r2, #255	@ 0xff
 8002824:	401a      	ands	r2, r3
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	2303      	movs	r3, #3
 800282e:	4003      	ands	r3, r0
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002834:	4809      	ldr	r0, [pc, #36]	@ (800285c <__NVIC_SetPriority+0xd8>)
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	001c      	movs	r4, r3
 800283c:	230f      	movs	r3, #15
 800283e:	4023      	ands	r3, r4
 8002840:	3b08      	subs	r3, #8
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	430a      	orrs	r2, r1
 8002846:	3306      	adds	r3, #6
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	18c3      	adds	r3, r0, r3
 800284c:	3304      	adds	r3, #4
 800284e:	601a      	str	r2, [r3, #0]
}
 8002850:	46c0      	nop			@ (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b003      	add	sp, #12
 8002856:	bd90      	pop	{r4, r7, pc}
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1e5a      	subs	r2, r3, #1
 800286c:	2380      	movs	r3, #128	@ 0x80
 800286e:	045b      	lsls	r3, r3, #17
 8002870:	429a      	cmp	r2, r3
 8002872:	d301      	bcc.n	8002878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002874:	2301      	movs	r3, #1
 8002876:	e010      	b.n	800289a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <SysTick_Config+0x44>)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	3a01      	subs	r2, #1
 800287e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002880:	2301      	movs	r3, #1
 8002882:	425b      	negs	r3, r3
 8002884:	2103      	movs	r1, #3
 8002886:	0018      	movs	r0, r3
 8002888:	f7ff ff7c 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <SysTick_Config+0x44>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <SysTick_Config+0x44>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	210f      	movs	r1, #15
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	1c02      	adds	r2, r0, #0
 80028b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	0002      	movs	r2, r0
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff ff11 	bl	800270c <__NVIC_EnableIRQ>
}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	0002      	movs	r2, r0
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff1b 	bl	8002740 <__NVIC_DisableIRQ>
}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ff9f 	bl	8002860 <SysTick_Config>
 8002922:	0003      	movs	r3, r0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e077      	b.n	8002a2e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a3d      	ldr	r2, [pc, #244]	@ (8002a38 <HAL_DMA_Init+0x10c>)
 8002944:	4694      	mov	ip, r2
 8002946:	4463      	add	r3, ip
 8002948:	2114      	movs	r1, #20
 800294a:	0018      	movs	r0, r3
 800294c:	f7fd fbd8 	bl	8000100 <__udivsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	009a      	lsls	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2225      	movs	r2, #37	@ 0x25
 800295c:	2102      	movs	r1, #2
 800295e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4934      	ldr	r1, [pc, #208]	@ (8002a3c <HAL_DMA_Init+0x110>)
 800296c:	400a      	ands	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fb0f 	bl	8002fcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	01db      	lsls	r3, r3, #7
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d102      	bne.n	80029c0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	213f      	movs	r1, #63	@ 0x3f
 80029ca:	400a      	ands	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <HAL_DMA_Init+0xd8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d80d      	bhi.n	8002a04 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fb1a 	bl	8003024 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e008      	b.n	8002a16 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2225      	movs	r2, #37	@ 0x25
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	@ 0x24
 8002a28:	2100      	movs	r1, #0
 8002a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b002      	add	sp, #8
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	bffdfff8 	.word	0xbffdfff8
 8002a3c:	ffff800f 	.word	0xffff800f

08002a40 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e066      	b.n	8002b20 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	438a      	bics	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a30      	ldr	r2, [pc, #192]	@ (8002b28 <HAL_DMA_DeInit+0xe8>)
 8002a68:	4694      	mov	ip, r2
 8002a6a:	4463      	add	r3, ip
 8002a6c:	2114      	movs	r1, #20
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7fd fb46 	bl	8000100 <__udivsi3>
 8002a74:	0003      	movs	r3, r0
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a84:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_DMA_DeInit+0xec>)
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	221c      	movs	r2, #28
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2201      	movs	r2, #1
 8002a92:	409a      	lsls	r2, r3
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_DMA_DeInit+0xec>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fa95 	bl	8002fcc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <HAL_DMA_DeInit+0x9e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d80c      	bhi.n	8002ade <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 faac 	bl	8003024 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002adc:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2225      	movs	r2, #37	@ 0x25
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2224      	movs	r2, #36	@ 0x24
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	bffdfff8 	.word	0xbffdfff8
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2317      	movs	r3, #23
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2224      	movs	r2, #36	@ 0x24
 8002b4a:	5c9b      	ldrb	r3, [r3, r2]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_DMA_Start_IT+0x24>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e06f      	b.n	8002c34 <HAL_DMA_Start_IT+0x104>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2224      	movs	r2, #36	@ 0x24
 8002b58:	2101      	movs	r1, #1
 8002b5a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2225      	movs	r2, #37	@ 0x25
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d157      	bne.n	8002c18 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2225      	movs	r2, #37	@ 0x25
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	438a      	bics	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f9dd 	bl	8002f4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	210e      	movs	r1, #14
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e00f      	b.n	8002bcc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	438a      	bics	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	210a      	movs	r1, #10
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	025b      	lsls	r3, r3, #9
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d008      	beq.n	8002bec <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	0049      	lsls	r1, r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	0049      	lsls	r1, r1, #1
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e00a      	b.n	8002c2e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2280      	movs	r2, #128	@ 0x80
 8002c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2224      	movs	r2, #36	@ 0x24
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002c26:	2317      	movs	r3, #23
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002c2e:	2317      	movs	r3, #23
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	781b      	ldrb	r3, [r3, #0]
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e050      	b.n	8002cf0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2225      	movs	r2, #37	@ 0x25
 8002c52:	5c9b      	ldrb	r3, [r3, r2]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d008      	beq.n	8002c6c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	@ 0x24
 8002c64:	2100      	movs	r1, #0
 8002c66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e041      	b.n	8002cf0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	210e      	movs	r1, #14
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	491c      	ldr	r1, [pc, #112]	@ (8002cf8 <HAL_DMA_Abort+0xbc>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2101      	movs	r1, #1
 8002c98:	438a      	bics	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002c9c:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_DMA_Abort+0xc0>)
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	221c      	movs	r2, #28
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <HAL_DMA_Abort+0xc0>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00c      	beq.n	8002cde <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cce:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <HAL_DMA_Abort+0xbc>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002cdc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2225      	movs	r2, #37	@ 0x25
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2224      	movs	r2, #36	@ 0x24
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fffffeff 	.word	0xfffffeff
 8002cfc:	40020000 	.word	0x40020000

08002d00 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	210f      	movs	r1, #15
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2225      	movs	r2, #37	@ 0x25
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d006      	beq.n	8002d2a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e049      	b.n	8002dbe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	210e      	movs	r1, #14
 8002d36:	438a      	bics	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	438a      	bics	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	491d      	ldr	r1, [pc, #116]	@ (8002dcc <HAL_DMA_Abort_IT+0xcc>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_DMA_Abort_IT+0xd0>)
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	221c      	movs	r2, #28
 8002d64:	4013      	ands	r3, r2
 8002d66:	2201      	movs	r2, #1
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_DMA_Abort_IT+0xd0>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00c      	beq.n	8002d9c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d8c:	490f      	ldr	r1, [pc, #60]	@ (8002dcc <HAL_DMA_Abort_IT+0xcc>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2225      	movs	r2, #37	@ 0x25
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	@ 0x24
 8002da8:	2100      	movs	r1, #0
 8002daa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	0010      	movs	r0, r2
 8002dbc:	4798      	blx	r3
    }
  }
  return status;
 8002dbe:	230f      	movs	r3, #15
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	781b      	ldrb	r3, [r3, #0]
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	fffffeff 	.word	0xfffffeff
 8002dd0:	40020000 	.word	0x40020000

08002dd4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002ddc:	4b55      	ldr	r3, [pc, #340]	@ (8002f34 <HAL_DMA_IRQHandler+0x160>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	221c      	movs	r2, #28
 8002df0:	4013      	ands	r3, r2
 8002df2:	2204      	movs	r2, #4
 8002df4:	409a      	lsls	r2, r3
 8002df6:	0013      	movs	r3, r2
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d027      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x7a>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2204      	movs	r2, #4
 8002e02:	4013      	ands	r3, r2
 8002e04:	d023      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d107      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	438a      	bics	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002e22:	4b44      	ldr	r3, [pc, #272]	@ (8002f34 <HAL_DMA_IRQHandler+0x160>)
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	221c      	movs	r2, #28
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2204      	movs	r2, #4
 8002e30:	409a      	lsls	r2, r3
 8002e32:	4b40      	ldr	r3, [pc, #256]	@ (8002f34 <HAL_DMA_IRQHandler+0x160>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d100      	bne.n	8002e42 <HAL_DMA_IRQHandler+0x6e>
 8002e40:	e073      	b.n	8002f2a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	0010      	movs	r0, r2
 8002e4a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002e4c:	e06d      	b.n	8002f2a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	221c      	movs	r2, #28
 8002e54:	4013      	ands	r3, r2
 8002e56:	2202      	movs	r2, #2
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d02e      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xec>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2202      	movs	r2, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	d02a      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2220      	movs	r2, #32
 8002e72:	4013      	ands	r3, r2
 8002e74:	d10b      	bne.n	8002e8e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	210a      	movs	r1, #10
 8002e82:	438a      	bics	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2225      	movs	r2, #37	@ 0x25
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002e8e:	4b29      	ldr	r3, [pc, #164]	@ (8002f34 <HAL_DMA_IRQHandler+0x160>)
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	221c      	movs	r2, #28
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <HAL_DMA_IRQHandler+0x160>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	@ 0x24
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d03a      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	0010      	movs	r0, r2
 8002ebc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002ebe:	e034      	b.n	8002f2a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	221c      	movs	r2, #28
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2208      	movs	r2, #8
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d02b      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x158>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d027      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	210e      	movs	r1, #14
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <HAL_DMA_IRQHandler+0x160>)
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	221c      	movs	r2, #28
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2201      	movs	r2, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <HAL_DMA_IRQHandler+0x160>)
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2225      	movs	r2, #37	@ 0x25
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	@ 0x24
 8002f14:	2100      	movs	r1, #0
 8002f16:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	0010      	movs	r0, r2
 8002f28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	46c0      	nop			@ (mov r8, r8)
}
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40020000 	.word	0x40020000

08002f38 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f74:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <DMA_SetConfig+0x7c>)
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	221c      	movs	r2, #28
 8002f80:	4013      	ands	r3, r2
 8002f82:	2201      	movs	r2, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <DMA_SetConfig+0x7c>)
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d108      	bne.n	8002fae <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fac:	e007      	b.n	8002fbe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	60da      	str	r2, [r3, #12]
}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	40020000 	.word	0x40020000

08002fcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	4a10      	ldr	r2, [pc, #64]	@ (800301c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002fdc:	4694      	mov	ip, r2
 8002fde:	4463      	add	r3, ip
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	001a      	movs	r2, r3
 8002fee:	23ff      	movs	r3, #255	@ 0xff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2114      	movs	r1, #20
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7fd f882 	bl	8000100 <__udivsi3>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a07      	ldr	r2, [pc, #28]	@ (8003020 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003004:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	221f      	movs	r2, #31
 800300a:	4013      	ands	r3, r2
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003014:	46c0      	nop			@ (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b004      	add	sp, #16
 800301a:	bd80      	pop	{r7, pc}
 800301c:	10008200 	.word	0x10008200
 8003020:	40020880 	.word	0x40020880

08003024 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	223f      	movs	r2, #63	@ 0x3f
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800303a:	4694      	mov	ip, r2
 800303c:	4463      	add	r3, ip
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	001a      	movs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3b01      	subs	r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	4013      	ands	r3, r2
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	1000823f 	.word	0x1000823f
 8003068:	40020940 	.word	0x40020940

0800306c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307a:	e147      	b.n	800330c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4091      	lsls	r1, r2
 8003086:	000a      	movs	r2, r1
 8003088:	4013      	ands	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d100      	bne.n	8003094 <HAL_GPIO_Init+0x28>
 8003092:	e138      	b.n	8003306 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2203      	movs	r2, #3
 800309a:	4013      	ands	r3, r2
 800309c:	2b01      	cmp	r3, #1
 800309e:	d005      	beq.n	80030ac <HAL_GPIO_Init+0x40>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2203      	movs	r2, #3
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d130      	bne.n	800310e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	409a      	lsls	r2, r3
 80030ba:	0013      	movs	r3, r2
 80030bc:	43da      	mvns	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	409a      	lsls	r2, r3
 80030ce:	0013      	movs	r3, r2
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030e2:	2201      	movs	r2, #1
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	43da      	mvns	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	2201      	movs	r2, #1
 80030fa:	401a      	ands	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	4013      	ands	r3, r2
 8003116:	2b03      	cmp	r3, #3
 8003118:	d017      	beq.n	800314a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	409a      	lsls	r2, r3
 8003128:	0013      	movs	r3, r2
 800312a:	43da      	mvns	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	409a      	lsls	r2, r3
 800313c:	0013      	movs	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	4013      	ands	r3, r2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d123      	bne.n	800319e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	58d3      	ldr	r3, [r2, r3]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2207      	movs	r2, #7
 8003168:	4013      	ands	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	409a      	lsls	r2, r3
 8003170:	0013      	movs	r3, r2
 8003172:	43da      	mvns	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2107      	movs	r1, #7
 8003182:	400b      	ands	r3, r1
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	409a      	lsls	r2, r3
 8003188:	0013      	movs	r3, r2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	43da      	mvns	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2203      	movs	r2, #3
 80031bc:	401a      	ands	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	23c0      	movs	r3, #192	@ 0xc0
 80031d8:	029b      	lsls	r3, r3, #10
 80031da:	4013      	ands	r3, r2
 80031dc:	d100      	bne.n	80031e0 <HAL_GPIO_Init+0x174>
 80031de:	e092      	b.n	8003306 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031e0:	4a50      	ldr	r2, [pc, #320]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3318      	adds	r3, #24
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	589b      	ldr	r3, [r3, r2]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2203      	movs	r2, #3
 80031f2:	4013      	ands	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	220f      	movs	r2, #15
 80031f8:	409a      	lsls	r2, r3
 80031fa:	0013      	movs	r3, r2
 80031fc:	43da      	mvns	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	23a0      	movs	r3, #160	@ 0xa0
 8003208:	05db      	lsls	r3, r3, #23
 800320a:	429a      	cmp	r2, r3
 800320c:	d013      	beq.n	8003236 <HAL_GPIO_Init+0x1ca>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a45      	ldr	r2, [pc, #276]	@ (8003328 <HAL_GPIO_Init+0x2bc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00d      	beq.n	8003232 <HAL_GPIO_Init+0x1c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a44      	ldr	r2, [pc, #272]	@ (800332c <HAL_GPIO_Init+0x2c0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_Init+0x1c2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a43      	ldr	r2, [pc, #268]	@ (8003330 <HAL_GPIO_Init+0x2c4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_GPIO_Init+0x1be>
 8003226:	2303      	movs	r3, #3
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x1cc>
 800322a:	2305      	movs	r3, #5
 800322c:	e004      	b.n	8003238 <HAL_GPIO_Init+0x1cc>
 800322e:	2302      	movs	r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_Init+0x1cc>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_GPIO_Init+0x1cc>
 8003236:	2300      	movs	r3, #0
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	2103      	movs	r1, #3
 800323c:	400a      	ands	r2, r1
 800323e:	00d2      	lsls	r2, r2, #3
 8003240:	4093      	lsls	r3, r2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003248:	4936      	ldr	r1, [pc, #216]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3318      	adds	r3, #24
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003256:	4b33      	ldr	r3, [pc, #204]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43da      	mvns	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	035b      	lsls	r3, r3, #13
 800326e:	4013      	ands	r3, r2
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800327a:	4b2a      	ldr	r3, [pc, #168]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003280:	4b28      	ldr	r3, [pc, #160]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43da      	mvns	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	2380      	movs	r3, #128	@ 0x80
 8003296:	039b      	lsls	r3, r3, #14
 8003298:	4013      	ands	r3, r2
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 80032ac:	2384      	movs	r3, #132	@ 0x84
 80032ae:	58d3      	ldr	r3, [r2, r3]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43da      	mvns	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	2380      	movs	r3, #128	@ 0x80
 80032c2:	029b      	lsls	r3, r3, #10
 80032c4:	4013      	ands	r3, r2
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032d0:	4914      	ldr	r1, [pc, #80]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 80032d2:	2284      	movs	r2, #132	@ 0x84
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80032d8:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 80032da:	2380      	movs	r3, #128	@ 0x80
 80032dc:	58d3      	ldr	r3, [r2, r3]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	025b      	lsls	r3, r3, #9
 80032f2:	4013      	ands	r3, r2
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032fe:	4909      	ldr	r1, [pc, #36]	@ (8003324 <HAL_GPIO_Init+0x2b8>)
 8003300:	2280      	movs	r2, #128	@ 0x80
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3301      	adds	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	40da      	lsrs	r2, r3
 8003314:	1e13      	subs	r3, r2, #0
 8003316:	d000      	beq.n	800331a <HAL_GPIO_Init+0x2ae>
 8003318:	e6b0      	b.n	800307c <HAL_GPIO_Init+0x10>
  }
}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b006      	add	sp, #24
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021800 	.word	0x40021800
 8003328:	50000400 	.word	0x50000400
 800332c:	50000800 	.word	0x50000800
 8003330:	50000c00 	.word	0x50000c00

08003334 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003342:	e0b4      	b.n	80034ae <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003344:	2201      	movs	r2, #1
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	409a      	lsls	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d100      	bne.n	8003358 <HAL_GPIO_DeInit+0x24>
 8003356:	e0a7      	b.n	80034a8 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003358:	4a5a      	ldr	r2, [pc, #360]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	3318      	adds	r3, #24
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	589b      	ldr	r3, [r3, r2]
 8003364:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2203      	movs	r2, #3
 800336a:	4013      	ands	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	220f      	movs	r2, #15
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	23a0      	movs	r3, #160	@ 0xa0
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	429a      	cmp	r2, r3
 8003380:	d013      	beq.n	80033aa <HAL_GPIO_DeInit+0x76>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a50      	ldr	r2, [pc, #320]	@ (80034c8 <HAL_GPIO_DeInit+0x194>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00d      	beq.n	80033a6 <HAL_GPIO_DeInit+0x72>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4f      	ldr	r2, [pc, #316]	@ (80034cc <HAL_GPIO_DeInit+0x198>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <HAL_GPIO_DeInit+0x6e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4e      	ldr	r2, [pc, #312]	@ (80034d0 <HAL_GPIO_DeInit+0x19c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <HAL_GPIO_DeInit+0x6a>
 800339a:	2303      	movs	r3, #3
 800339c:	e006      	b.n	80033ac <HAL_GPIO_DeInit+0x78>
 800339e:	2305      	movs	r3, #5
 80033a0:	e004      	b.n	80033ac <HAL_GPIO_DeInit+0x78>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e002      	b.n	80033ac <HAL_GPIO_DeInit+0x78>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_GPIO_DeInit+0x78>
 80033aa:	2300      	movs	r3, #0
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	2103      	movs	r1, #3
 80033b0:	400a      	ands	r2, r1
 80033b2:	00d2      	lsls	r2, r2, #3
 80033b4:	4093      	lsls	r3, r2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d136      	bne.n	800342a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80033bc:	4a41      	ldr	r2, [pc, #260]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	58d3      	ldr	r3, [r2, r3]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	43d2      	mvns	r2, r2
 80033c6:	493f      	ldr	r1, [pc, #252]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	2280      	movs	r2, #128	@ 0x80
 80033cc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80033ce:	4a3d      	ldr	r2, [pc, #244]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033d0:	2384      	movs	r3, #132	@ 0x84
 80033d2:	58d3      	ldr	r3, [r2, r3]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	43d2      	mvns	r2, r2
 80033d8:	493a      	ldr	r1, [pc, #232]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033da:	4013      	ands	r3, r2
 80033dc:	2284      	movs	r2, #132	@ 0x84
 80033de:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80033e0:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80033ee:	4b35      	ldr	r3, [pc, #212]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43d9      	mvns	r1, r3
 80033f6:	4b33      	ldr	r3, [pc, #204]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2203      	movs	r2, #3
 8003400:	4013      	ands	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	220f      	movs	r2, #15
 8003406:	409a      	lsls	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800340c:	4a2d      	ldr	r2, [pc, #180]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	3318      	adds	r3, #24
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	589a      	ldr	r2, [r3, r2]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	43d9      	mvns	r1, r3
 800341c:	4829      	ldr	r0, [pc, #164]	@ (80034c4 <HAL_GPIO_DeInit+0x190>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	400a      	ands	r2, r1
 8003424:	3318      	adds	r3, #24
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2103      	movs	r1, #3
 8003434:	4099      	lsls	r1, r3
 8003436:	000b      	movs	r3, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	58d3      	ldr	r3, [r2, r3]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	2107      	movs	r1, #7
 800344e:	400a      	ands	r2, r1
 8003450:	0092      	lsls	r2, r2, #2
 8003452:	210f      	movs	r1, #15
 8003454:	4091      	lsls	r1, r2
 8003456:	000a      	movs	r2, r1
 8003458:	43d1      	mvns	r1, r2
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	08d2      	lsrs	r2, r2, #3
 800345e:	4019      	ands	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	0052      	lsls	r2, r2, #1
 8003470:	2103      	movs	r1, #3
 8003472:	4091      	lsls	r1, r2
 8003474:	000a      	movs	r2, r1
 8003476:	43d2      	mvns	r2, r2
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2101      	movs	r1, #1
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4091      	lsls	r1, r2
 8003488:	000a      	movs	r2, r1
 800348a:	43d2      	mvns	r2, r2
 800348c:	401a      	ands	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	0052      	lsls	r2, r2, #1
 800349a:	2103      	movs	r1, #3
 800349c:	4091      	lsls	r1, r2
 800349e:	000a      	movs	r2, r1
 80034a0:	43d2      	mvns	r2, r2
 80034a2:	401a      	ands	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3301      	adds	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	40da      	lsrs	r2, r3
 80034b4:	1e13      	subs	r3, r2, #0
 80034b6:	d000      	beq.n	80034ba <HAL_GPIO_DeInit+0x186>
 80034b8:	e744      	b.n	8003344 <HAL_GPIO_DeInit+0x10>
  }
}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b006      	add	sp, #24
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021800 	.word	0x40021800
 80034c8:	50000400 	.word	0x50000400
 80034cc:	50000800 	.word	0x50000800
 80034d0:	50000c00 	.word	0x50000c00

080034d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	0008      	movs	r0, r1
 80034de:	0011      	movs	r1, r2
 80034e0:	1cbb      	adds	r3, r7, #2
 80034e2:	1c02      	adds	r2, r0, #0
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	1c7b      	adds	r3, r7, #1
 80034e8:	1c0a      	adds	r2, r1, #0
 80034ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ec:	1c7b      	adds	r3, r7, #1
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d004      	beq.n	80034fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034f4:	1cbb      	adds	r3, r7, #2
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034fe:	1cbb      	adds	r3, r7, #2
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	000a      	movs	r2, r1
 8003518:	1cbb      	adds	r3, r7, #2
 800351a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003522:	1cbb      	adds	r3, r7, #2
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4013      	ands	r3, r2
 800352a:	041a      	lsls	r2, r3, #16
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43db      	mvns	r3, r3
 8003530:	1cb9      	adds	r1, r7, #2
 8003532:	8809      	ldrh	r1, [r1, #0]
 8003534:	400b      	ands	r3, r1
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e08f      	b.n	8003676 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2241      	movs	r2, #65	@ 0x41
 800355a:	5c9b      	ldrb	r3, [r3, r2]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d107      	bne.n	8003572 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2240      	movs	r2, #64	@ 0x40
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f7fe f92d 	bl	80017cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2241      	movs	r2, #65	@ 0x41
 8003576:	2124      	movs	r1, #36	@ 0x24
 8003578:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	438a      	bics	r2, r1
 8003588:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	493b      	ldr	r1, [pc, #236]	@ (8003680 <HAL_I2C_Init+0x13c>)
 8003594:	400a      	ands	r2, r1
 8003596:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4938      	ldr	r1, [pc, #224]	@ (8003684 <HAL_I2C_Init+0x140>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2180      	movs	r1, #128	@ 0x80
 80035ba:	0209      	lsls	r1, r1, #8
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	e007      	b.n	80035d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2184      	movs	r1, #132	@ 0x84
 80035cc:	0209      	lsls	r1, r1, #8
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d109      	bne.n	80035ee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2180      	movs	r1, #128	@ 0x80
 80035e6:	0109      	lsls	r1, r1, #4
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	e007      	b.n	80035fe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4923      	ldr	r1, [pc, #140]	@ (8003688 <HAL_I2C_Init+0x144>)
 80035fa:	400a      	ands	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4920      	ldr	r1, [pc, #128]	@ (800368c <HAL_I2C_Init+0x148>)
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	491a      	ldr	r1, [pc, #104]	@ (8003684 <HAL_I2C_Init+0x140>)
 800361a:	400a      	ands	r2, r1
 800361c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	431a      	orrs	r2, r3
 8003628:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2101      	movs	r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2241      	movs	r2, #65	@ 0x41
 8003662:	2120      	movs	r1, #32
 8003664:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2242      	movs	r2, #66	@ 0x42
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	f0ffffff 	.word	0xf0ffffff
 8003684:	ffff7fff 	.word	0xffff7fff
 8003688:	fffff7ff 	.word	0xfffff7ff
 800368c:	02008000 	.word	0x02008000

08003690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2241      	movs	r2, #65	@ 0x41
 800369e:	5c9b      	ldrb	r3, [r3, r2]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d138      	bne.n	8003718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2240      	movs	r2, #64	@ 0x40
 80036aa:	5c9b      	ldrb	r3, [r3, r2]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e032      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2240      	movs	r2, #64	@ 0x40
 80036b8:	2101      	movs	r1, #1
 80036ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2241      	movs	r2, #65	@ 0x41
 80036c0:	2124      	movs	r1, #36	@ 0x24
 80036c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2101      	movs	r1, #1
 80036d0:	438a      	bics	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4911      	ldr	r1, [pc, #68]	@ (8003724 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2241      	movs	r2, #65	@ 0x41
 8003708:	2120      	movs	r1, #32
 800370a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2240      	movs	r2, #64	@ 0x40
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	ffffefff 	.word	0xffffefff

08003728 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2241      	movs	r2, #65	@ 0x41
 8003736:	5c9b      	ldrb	r3, [r3, r2]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b20      	cmp	r3, #32
 800373c:	d139      	bne.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2240      	movs	r2, #64	@ 0x40
 8003742:	5c9b      	ldrb	r3, [r3, r2]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003748:	2302      	movs	r3, #2
 800374a:	e033      	b.n	80037b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2240      	movs	r2, #64	@ 0x40
 8003750:	2101      	movs	r1, #1
 8003752:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2241      	movs	r2, #65	@ 0x41
 8003758:	2124      	movs	r1, #36	@ 0x24
 800375a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	438a      	bics	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a11      	ldr	r2, [pc, #68]	@ (80037bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2241      	movs	r2, #65	@ 0x41
 80037a2:	2120      	movs	r1, #32
 80037a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2240      	movs	r2, #64	@ 0x40
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	fffff0ff 	.word	0xfffff0ff

080037c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	4b17      	ldr	r3, [pc, #92]	@ (8003830 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d11f      	bne.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80037e4:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	0013      	movs	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	189b      	adds	r3, r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4912      	ldr	r1, [pc, #72]	@ (800383c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7fc fc84 	bl	8000100 <__udivsi3>
 80037f8:	0003      	movs	r3, r0
 80037fa:	3301      	adds	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037fe:	e008      	b.n	8003812 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b01      	subs	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e001      	b.n	8003812 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e009      	b.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	401a      	ands	r2, r3
 800381c:	2380      	movs	r3, #128	@ 0x80
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	429a      	cmp	r2, r3
 8003822:	d0ed      	beq.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	40007000 	.word	0x40007000
 8003834:	fffff9ff 	.word	0xfffff9ff
 8003838:	20000004 	.word	0x20000004
 800383c:	000f4240 	.word	0x000f4240

08003840 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	23e0      	movs	r3, #224	@ 0xe0
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	4013      	ands	r3, r2
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e2f3      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2201      	movs	r2, #1
 8003870:	4013      	ands	r3, r2
 8003872:	d100      	bne.n	8003876 <HAL_RCC_OscConfig+0x1e>
 8003874:	e07c      	b.n	8003970 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003876:	4bc3      	ldr	r3, [pc, #780]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2238      	movs	r2, #56	@ 0x38
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003880:	4bc0      	ldr	r3, [pc, #768]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2203      	movs	r2, #3
 8003886:	4013      	ands	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d102      	bne.n	8003896 <HAL_RCC_OscConfig+0x3e>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d002      	beq.n	800389c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d10b      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	4bb9      	ldr	r3, [pc, #740]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	@ 0x80
 80038a2:	029b      	lsls	r3, r3, #10
 80038a4:	4013      	ands	r3, r2
 80038a6:	d062      	beq.n	800396e <HAL_RCC_OscConfig+0x116>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d15e      	bne.n	800396e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e2ce      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	2380      	movs	r3, #128	@ 0x80
 80038ba:	025b      	lsls	r3, r3, #9
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x78>
 80038c0:	4bb0      	ldr	r3, [pc, #704]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4baf      	ldr	r3, [pc, #700]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80038c6:	2180      	movs	r1, #128	@ 0x80
 80038c8:	0249      	lsls	r1, r1, #9
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e020      	b.n	8003912 <HAL_RCC_OscConfig+0xba>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	23a0      	movs	r3, #160	@ 0xa0
 80038d6:	02db      	lsls	r3, r3, #11
 80038d8:	429a      	cmp	r2, r3
 80038da:	d10e      	bne.n	80038fa <HAL_RCC_OscConfig+0xa2>
 80038dc:	4ba9      	ldr	r3, [pc, #676]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4ba8      	ldr	r3, [pc, #672]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80038e2:	2180      	movs	r1, #128	@ 0x80
 80038e4:	02c9      	lsls	r1, r1, #11
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	4ba6      	ldr	r3, [pc, #664]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4ba5      	ldr	r3, [pc, #660]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80038f0:	2180      	movs	r1, #128	@ 0x80
 80038f2:	0249      	lsls	r1, r1, #9
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e00b      	b.n	8003912 <HAL_RCC_OscConfig+0xba>
 80038fa:	4ba2      	ldr	r3, [pc, #648]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4ba1      	ldr	r3, [pc, #644]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003900:	49a1      	ldr	r1, [pc, #644]	@ (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003902:	400a      	ands	r2, r1
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	4b9f      	ldr	r3, [pc, #636]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b9e      	ldr	r3, [pc, #632]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 800390c:	499f      	ldr	r1, [pc, #636]	@ (8003b8c <HAL_RCC_OscConfig+0x334>)
 800390e:	400a      	ands	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d014      	beq.n	8003944 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fe fa4b 	bl	8001db4 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fe fa46 	bl	8001db4 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	@ 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e28d      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003936:	4b93      	ldr	r3, [pc, #588]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	4013      	ands	r3, r2
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xcc>
 8003942:	e015      	b.n	8003970 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fa36 	bl	8001db4 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394e:	f7fe fa31 	bl	8001db4 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b64      	cmp	r3, #100	@ 0x64
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e278      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003960:	4b88      	ldr	r3, [pc, #544]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	029b      	lsls	r3, r3, #10
 8003968:	4013      	ands	r3, r2
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0xf6>
 800396c:	e000      	b.n	8003970 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2202      	movs	r2, #2
 8003976:	4013      	ands	r3, r2
 8003978:	d100      	bne.n	800397c <HAL_RCC_OscConfig+0x124>
 800397a:	e099      	b.n	8003ab0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397c:	4b81      	ldr	r3, [pc, #516]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2238      	movs	r2, #56	@ 0x38
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2203      	movs	r2, #3
 800398c:	4013      	ands	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b10      	cmp	r3, #16
 8003994:	d102      	bne.n	800399c <HAL_RCC_OscConfig+0x144>
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d002      	beq.n	80039a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d135      	bne.n	8003a0e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a2:	4b78      	ldr	r3, [pc, #480]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4013      	ands	r3, r2
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x162>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e24b      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b72      	ldr	r3, [pc, #456]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a74      	ldr	r2, [pc, #464]	@ (8003b90 <HAL_RCC_OscConfig+0x338>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	021a      	lsls	r2, r3, #8
 80039ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6e      	ldr	r2, [pc, #440]	@ (8003b94 <HAL_RCC_OscConfig+0x33c>)
 80039dc:	4013      	ands	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	4b67      	ldr	r3, [pc, #412]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80039ea:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0adb      	lsrs	r3, r3, #11
 80039f0:	2207      	movs	r2, #7
 80039f2:	4013      	ands	r3, r2
 80039f4:	4a68      	ldr	r2, [pc, #416]	@ (8003b98 <HAL_RCC_OscConfig+0x340>)
 80039f6:	40da      	lsrs	r2, r3
 80039f8:	4b68      	ldr	r3, [pc, #416]	@ (8003b9c <HAL_RCC_OscConfig+0x344>)
 80039fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039fc:	4b68      	ldr	r3, [pc, #416]	@ (8003ba0 <HAL_RCC_OscConfig+0x348>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7fe f97b 	bl	8001cfc <HAL_InitTick>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d051      	beq.n	8003aae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e221      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d030      	beq.n	8003a78 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a16:	4b5b      	ldr	r3, [pc, #364]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b94 <HAL_RCC_OscConfig+0x33c>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	4b57      	ldr	r3, [pc, #348]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a2a:	4b56      	ldr	r3, [pc, #344]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b55      	ldr	r3, [pc, #340]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a30:	2180      	movs	r1, #128	@ 0x80
 8003a32:	0049      	lsls	r1, r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f9bc 	bl	8001db4 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe f9b7 	bl	8001db4 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1fe      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a54:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b48      	ldr	r3, [pc, #288]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <HAL_RCC_OscConfig+0x338>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	4b44      	ldr	r3, [pc, #272]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a78:	4b42      	ldr	r3, [pc, #264]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b41      	ldr	r3, [pc, #260]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003a7e:	4949      	ldr	r1, [pc, #292]	@ (8003ba4 <HAL_RCC_OscConfig+0x34c>)
 8003a80:	400a      	ands	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe f996 	bl	8001db4 <HAL_GetTick>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fe f991 	bl	8001db4 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1d8      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa0:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x236>
 8003aac:	e000      	b.n	8003ab0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d047      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003aba:	4b32      	ldr	r3, [pc, #200]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2238      	movs	r2, #56	@ 0x38
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b18      	cmp	r3, #24
 8003ac4:	d10a      	bne.n	8003adc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aca:	2202      	movs	r2, #2
 8003acc:	4013      	ands	r3, r2
 8003ace:	d03c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2f2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d138      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e1ba      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d019      	beq.n	8003b18 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003ae4:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003ae6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ae8:	4b26      	ldr	r3, [pc, #152]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003aea:	2101      	movs	r1, #1
 8003aec:	430a      	orrs	r2, r1
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe f960 	bl	8001db4 <HAL_GetTick>
 8003af4:	0003      	movs	r3, r0
 8003af6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fe f95b 	bl	8001db4 <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1a2      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b10:	2202      	movs	r2, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	d0f1      	beq.n	8003afa <HAL_RCC_OscConfig+0x2a2>
 8003b16:	e018      	b.n	8003b4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b18:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003b1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	438a      	bics	r2, r1
 8003b22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe f946 	bl	8001db4 <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fe f941 	bl	8001db4 <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e188      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b40:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	2202      	movs	r2, #2
 8003b46:	4013      	ands	r3, r2
 8003b48:	d1f1      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	4013      	ands	r3, r2
 8003b52:	d100      	bne.n	8003b56 <HAL_RCC_OscConfig+0x2fe>
 8003b54:	e0c6      	b.n	8003ce4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b56:	231f      	movs	r3, #31
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2238      	movs	r2, #56	@ 0x38
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d11e      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6e:	2202      	movs	r2, #2
 8003b70:	4013      	ands	r3, r2
 8003b72:	d100      	bne.n	8003b76 <HAL_RCC_OscConfig+0x31e>
 8003b74:	e0b6      	b.n	8003ce4 <HAL_RCC_OscConfig+0x48c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d000      	beq.n	8003b80 <HAL_RCC_OscConfig+0x328>
 8003b7e:	e0b1      	b.n	8003ce4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e166      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
 8003b84:	40021000 	.word	0x40021000
 8003b88:	fffeffff 	.word	0xfffeffff
 8003b8c:	fffbffff 	.word	0xfffbffff
 8003b90:	ffff80ff 	.word	0xffff80ff
 8003b94:	ffffc7ff 	.word	0xffffc7ff
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	20000004 	.word	0x20000004
 8003ba0:	20000008 	.word	0x20000008
 8003ba4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ba8:	4bac      	ldr	r3, [pc, #688]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	055b      	lsls	r3, r3, #21
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x360>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x362>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	4ba7      	ldr	r3, [pc, #668]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bc2:	4ba6      	ldr	r3, [pc, #664]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003bc4:	2180      	movs	r1, #128	@ 0x80
 8003bc6:	0549      	lsls	r1, r1, #21
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bcc:	4ba3      	ldr	r3, [pc, #652]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	055b      	lsls	r3, r3, #21
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003bda:	231f      	movs	r3, #31
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be2:	4b9f      	ldr	r3, [pc, #636]	@ (8003e60 <HAL_RCC_OscConfig+0x608>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4013      	ands	r3, r2
 8003bec:	d11a      	bne.n	8003c24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bee:	4b9c      	ldr	r3, [pc, #624]	@ (8003e60 <HAL_RCC_OscConfig+0x608>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b9b      	ldr	r3, [pc, #620]	@ (8003e60 <HAL_RCC_OscConfig+0x608>)
 8003bf4:	2180      	movs	r1, #128	@ 0x80
 8003bf6:	0049      	lsls	r1, r1, #1
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe f8da 	bl	8001db4 <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fe f8d5 	bl	8001db4 <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e11c      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c18:	4b91      	ldr	r3, [pc, #580]	@ (8003e60 <HAL_RCC_OscConfig+0x608>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4013      	ands	r3, r2
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3e2>
 8003c2c:	4b8b      	ldr	r3, [pc, #556]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c30:	4b8a      	ldr	r3, [pc, #552]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	430a      	orrs	r2, r1
 8003c36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c38:	e01c      	b.n	8003c74 <HAL_RCC_OscConfig+0x41c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x404>
 8003c42:	4b86      	ldr	r3, [pc, #536]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c46:	4b85      	ldr	r3, [pc, #532]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c48:	2104      	movs	r1, #4
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c4e:	4b83      	ldr	r3, [pc, #524]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c52:	4b82      	ldr	r3, [pc, #520]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c54:	2101      	movs	r1, #1
 8003c56:	430a      	orrs	r2, r1
 8003c58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0x41c>
 8003c5c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c60:	4b7e      	ldr	r3, [pc, #504]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	438a      	bics	r2, r1
 8003c66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c68:	4b7c      	ldr	r3, [pc, #496]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c6e:	2104      	movs	r1, #4
 8003c70:	438a      	bics	r2, r1
 8003c72:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d014      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f89a 	bl	8001db4 <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	e009      	b.n	8003c9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe f895 	bl	8001db4 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	4a74      	ldr	r2, [pc, #464]	@ (8003e64 <HAL_RCC_OscConfig+0x60c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0db      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9a:	4b70      	ldr	r3, [pc, #448]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x42e>
 8003ca4:	e013      	b.n	8003cce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fe f885 	bl	8001db4 <HAL_GetTick>
 8003caa:	0003      	movs	r3, r0
 8003cac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cae:	e009      	b.n	8003cc4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fe f880 	bl	8001db4 <HAL_GetTick>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	4a6a      	ldr	r2, [pc, #424]	@ (8003e64 <HAL_RCC_OscConfig+0x60c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0c6      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cc4:	4b65      	ldr	r3, [pc, #404]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc8:	2202      	movs	r2, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003cce:	231f      	movs	r3, #31
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003cd8:	4b60      	ldr	r3, [pc, #384]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003cda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cdc:	4b5f      	ldr	r3, [pc, #380]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003cde:	4962      	ldr	r1, [pc, #392]	@ (8003e68 <HAL_RCC_OscConfig+0x610>)
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d100      	bne.n	8003cee <HAL_RCC_OscConfig+0x496>
 8003cec:	e0b0      	b.n	8003e50 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cee:	4b5b      	ldr	r3, [pc, #364]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2238      	movs	r2, #56	@ 0x38
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d100      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4a4>
 8003cfa:	e078      	b.n	8003dee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d153      	bne.n	8003dac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b55      	ldr	r3, [pc, #340]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b54      	ldr	r3, [pc, #336]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d0a:	4958      	ldr	r1, [pc, #352]	@ (8003e6c <HAL_RCC_OscConfig+0x614>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fe f850 	bl	8001db4 <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe f84b 	bl	8001db4 <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e092      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	049b      	lsls	r3, r3, #18
 8003d34:	4013      	ands	r3, r2
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d38:	4b48      	ldr	r3, [pc, #288]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e70 <HAL_RCC_OscConfig+0x618>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	0019      	movs	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	4b3e      	ldr	r3, [pc, #248]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d62:	430a      	orrs	r2, r1
 8003d64:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d66:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d6c:	2180      	movs	r1, #128	@ 0x80
 8003d6e:	0449      	lsls	r1, r1, #17
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d74:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	4b38      	ldr	r3, [pc, #224]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003d7a:	2180      	movs	r1, #128	@ 0x80
 8003d7c:	0549      	lsls	r1, r1, #21
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fe f817 	bl	8001db4 <HAL_GetTick>
 8003d86:	0003      	movs	r3, r0
 8003d88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fe f812 	bl	8001db4 <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e059      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	2380      	movs	r3, #128	@ 0x80
 8003da4:	049b      	lsls	r3, r3, #18
 8003da6:	4013      	ands	r3, r2
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x534>
 8003daa:	e051      	b.n	8003e50 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003db2:	492e      	ldr	r1, [pc, #184]	@ (8003e6c <HAL_RCC_OscConfig+0x614>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd fffc 	bl	8001db4 <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd fff7 	bl	8001db4 <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e03e      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	4b21      	ldr	r3, [pc, #132]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	049b      	lsls	r3, r3, #18
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003de0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003de6:	4923      	ldr	r1, [pc, #140]	@ (8003e74 <HAL_RCC_OscConfig+0x61c>)
 8003de8:	400a      	ands	r2, r1
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e030      	b.n	8003e50 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e02b      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003dfa:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <HAL_RCC_OscConfig+0x604>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2203      	movs	r2, #3
 8003e04:	401a      	ands	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d11e      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2270      	movs	r2, #112	@ 0x70
 8003e12:	401a      	ands	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d117      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	23fe      	movs	r3, #254	@ 0xfe
 8003e20:	01db      	lsls	r3, r3, #7
 8003e22:	401a      	ands	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d10e      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	23f8      	movs	r3, #248	@ 0xf8
 8003e32:	039b      	lsls	r3, r3, #14
 8003e34:	401a      	ands	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	0f5b      	lsrs	r3, r3, #29
 8003e42:	075a      	lsls	r2, r3, #29
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b008      	add	sp, #32
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
 8003e64:	00001388 	.word	0x00001388
 8003e68:	efffffff 	.word	0xefffffff
 8003e6c:	feffffff 	.word	0xfeffffff
 8003e70:	1fc1808c 	.word	0x1fc1808c
 8003e74:	effefffc 	.word	0xeffefffc

08003e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0e9      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b76      	ldr	r3, [pc, #472]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2207      	movs	r2, #7
 8003e92:	4013      	ands	r3, r2
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d91e      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b73      	ldr	r3, [pc, #460]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2207      	movs	r2, #7
 8003ea0:	4393      	bics	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	4b70      	ldr	r3, [pc, #448]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eac:	f7fd ff82 	bl	8001db4 <HAL_GetTick>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eb4:	e009      	b.n	8003eca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb6:	f7fd ff7d 	bl	8001db4 <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	4a6a      	ldr	r2, [pc, #424]	@ (800406c <HAL_RCC_ClockConfig+0x1f4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0ca      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eca:	4b67      	ldr	r3, [pc, #412]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2207      	movs	r2, #7
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1ee      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2202      	movs	r2, #2
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d006      	beq.n	8003efa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003eec:	4b60      	ldr	r3, [pc, #384]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	4b5f      	ldr	r3, [pc, #380]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003ef2:	21e0      	movs	r1, #224	@ 0xe0
 8003ef4:	01c9      	lsls	r1, r1, #7
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efa:	4b5d      	ldr	r3, [pc, #372]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	4a5d      	ldr	r2, [pc, #372]	@ (8004074 <HAL_RCC_ClockConfig+0x1fc>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	0019      	movs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4b59      	ldr	r3, [pc, #356]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2201      	movs	r2, #1
 8003f14:	4013      	ands	r3, r2
 8003f16:	d057      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f20:	4b53      	ldr	r3, [pc, #332]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2380      	movs	r3, #128	@ 0x80
 8003f26:	029b      	lsls	r3, r3, #10
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d12b      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e097      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f38:	4b4d      	ldr	r3, [pc, #308]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	2380      	movs	r3, #128	@ 0x80
 8003f3e:	049b      	lsls	r3, r3, #18
 8003f40:	4013      	ands	r3, r2
 8003f42:	d11f      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e08b      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f50:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d113      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e07f      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f68:	4b41      	ldr	r3, [pc, #260]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d108      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e074      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f76:	4b3e      	ldr	r3, [pc, #248]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e06d      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f84:	4b3a      	ldr	r3, [pc, #232]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2207      	movs	r2, #7
 8003f8a:	4393      	bics	r3, r2
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fd ff0c 	bl	8001db4 <HAL_GetTick>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa0:	e009      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa2:	f7fd ff07 	bl	8001db4 <HAL_GetTick>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	4a2f      	ldr	r2, [pc, #188]	@ (800406c <HAL_RCC_ClockConfig+0x1f4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e054      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2238      	movs	r2, #56	@ 0x38
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1ec      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b27      	ldr	r3, [pc, #156]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2207      	movs	r2, #7
 8003fce:	4013      	ands	r3, r2
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d21e      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2207      	movs	r2, #7
 8003fdc:	4393      	bics	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	4b21      	ldr	r3, [pc, #132]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fee4 	bl	8001db4 <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ff0:	e009      	b.n	8004006 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff2:	f7fd fedf 	bl	8001db4 <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <HAL_RCC_ClockConfig+0x1f4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e02c      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004006:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2207      	movs	r2, #7
 800400c:	4013      	ands	r3, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d1ee      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2204      	movs	r2, #4
 800401a:	4013      	ands	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800401e:	4b14      	ldr	r3, [pc, #80]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4a15      	ldr	r2, [pc, #84]	@ (8004078 <HAL_RCC_ClockConfig+0x200>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004032:	f000 f829 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004036:	0001      	movs	r1, r0
 8004038:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <HAL_RCC_ClockConfig+0x1f8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	220f      	movs	r2, #15
 8004040:	401a      	ands	r2, r3
 8004042:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <HAL_RCC_ClockConfig+0x204>)
 8004044:	0092      	lsls	r2, r2, #2
 8004046:	58d3      	ldr	r3, [r2, r3]
 8004048:	221f      	movs	r2, #31
 800404a:	4013      	ands	r3, r2
 800404c:	000a      	movs	r2, r1
 800404e:	40da      	lsrs	r2, r3
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_RCC_ClockConfig+0x208>)
 8004052:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_ClockConfig+0x20c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0018      	movs	r0, r3
 800405a:	f7fd fe4f 	bl	8001cfc <HAL_InitTick>
 800405e:	0003      	movs	r3, r0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b004      	add	sp, #16
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40022000 	.word	0x40022000
 800406c:	00001388 	.word	0x00001388
 8004070:	40021000 	.word	0x40021000
 8004074:	fffff0ff 	.word	0xfffff0ff
 8004078:	ffff8fff 	.word	0xffff8fff
 800407c:	0800738c 	.word	0x0800738c
 8004080:	20000004 	.word	0x20000004
 8004084:	20000008 	.word	0x20000008

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800408e:	4b3c      	ldr	r3, [pc, #240]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2238      	movs	r2, #56	@ 0x38
 8004094:	4013      	ands	r3, r2
 8004096:	d10f      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004098:	4b39      	ldr	r3, [pc, #228]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	0adb      	lsrs	r3, r3, #11
 800409e:	2207      	movs	r2, #7
 80040a0:	4013      	ands	r3, r2
 80040a2:	2201      	movs	r2, #1
 80040a4:	409a      	lsls	r2, r3
 80040a6:	0013      	movs	r3, r2
 80040a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040aa:	6839      	ldr	r1, [r7, #0]
 80040ac:	4835      	ldr	r0, [pc, #212]	@ (8004184 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040ae:	f7fc f827 	bl	8000100 <__udivsi3>
 80040b2:	0003      	movs	r3, r0
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e05d      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040b8:	4b31      	ldr	r3, [pc, #196]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2238      	movs	r2, #56	@ 0x38
 80040be:	4013      	ands	r3, r2
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c4:	4b30      	ldr	r3, [pc, #192]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x100>)
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e054      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2238      	movs	r2, #56	@ 0x38
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d138      	bne.n	8004148 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80040d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2203      	movs	r2, #3
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e0:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	2207      	movs	r2, #7
 80040e8:	4013      	ands	r3, r2
 80040ea:	3301      	adds	r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d10d      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	4824      	ldr	r0, [pc, #144]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x100>)
 80040f8:	f7fc f802 	bl	8000100 <__udivsi3>
 80040fc:	0003      	movs	r3, r0
 80040fe:	0019      	movs	r1, r3
 8004100:	4b1f      	ldr	r3, [pc, #124]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	227f      	movs	r2, #127	@ 0x7f
 8004108:	4013      	ands	r3, r2
 800410a:	434b      	muls	r3, r1
 800410c:	617b      	str	r3, [r7, #20]
        break;
 800410e:	e00d      	b.n	800412c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	481c      	ldr	r0, [pc, #112]	@ (8004184 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004114:	f7fb fff4 	bl	8000100 <__udivsi3>
 8004118:	0003      	movs	r3, r0
 800411a:	0019      	movs	r1, r3
 800411c:	4b18      	ldr	r3, [pc, #96]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	227f      	movs	r2, #127	@ 0x7f
 8004124:	4013      	ands	r3, r2
 8004126:	434b      	muls	r3, r1
 8004128:	617b      	str	r3, [r7, #20]
        break;
 800412a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800412c:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	0f5b      	lsrs	r3, r3, #29
 8004132:	2207      	movs	r2, #7
 8004134:	4013      	ands	r3, r2
 8004136:	3301      	adds	r3, #1
 8004138:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	6978      	ldr	r0, [r7, #20]
 800413e:	f7fb ffdf 	bl	8000100 <__udivsi3>
 8004142:	0003      	movs	r3, r0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	e015      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004148:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2238      	movs	r2, #56	@ 0x38
 800414e:	4013      	ands	r3, r2
 8004150:	2b20      	cmp	r3, #32
 8004152:	d103      	bne.n	800415c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	e00b      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800415c:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xf8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2238      	movs	r2, #56	@ 0x38
 8004162:	4013      	ands	r3, r2
 8004164:	2b18      	cmp	r3, #24
 8004166:	d103      	bne.n	8004170 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004168:	23fa      	movs	r3, #250	@ 0xfa
 800416a:	01db      	lsls	r3, r3, #7
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	e001      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004174:	693b      	ldr	r3, [r7, #16]
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	b006      	add	sp, #24
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	40021000 	.word	0x40021000
 8004184:	00f42400 	.word	0x00f42400
 8004188:	007a1200 	.word	0x007a1200

0800418c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b02      	ldr	r3, [pc, #8]	@ (800419c <HAL_RCC_GetHCLKFreq+0x10>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	20000004 	.word	0x20000004

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a0:	b5b0      	push	{r4, r5, r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041a4:	f7ff fff2 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041a8:	0004      	movs	r4, r0
 80041aa:	f7ff fb49 	bl	8003840 <LL_RCC_GetAPB1Prescaler>
 80041ae:	0003      	movs	r3, r0
 80041b0:	0b1a      	lsrs	r2, r3, #12
 80041b2:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041b4:	0092      	lsls	r2, r2, #2
 80041b6:	58d3      	ldr	r3, [r2, r3]
 80041b8:	221f      	movs	r2, #31
 80041ba:	4013      	ands	r3, r2
 80041bc:	40dc      	lsrs	r4, r3
 80041be:	0023      	movs	r3, r4
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bdb0      	pop	{r4, r5, r7, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	080073cc 	.word	0x080073cc

080041cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80041d4:	2313      	movs	r3, #19
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041dc:	2312      	movs	r3, #18
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	4013      	ands	r3, r2
 80041ee:	d100      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80041f0:	e0a3      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2011      	movs	r0, #17
 80041f4:	183b      	adds	r3, r7, r0
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b7f      	ldr	r3, [pc, #508]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041fe:	2380      	movs	r3, #128	@ 0x80
 8004200:	055b      	lsls	r3, r3, #21
 8004202:	4013      	ands	r3, r2
 8004204:	d110      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b7c      	ldr	r3, [pc, #496]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800420a:	4b7b      	ldr	r3, [pc, #492]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800420c:	2180      	movs	r1, #128	@ 0x80
 800420e:	0549      	lsls	r1, r1, #21
 8004210:	430a      	orrs	r2, r1
 8004212:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004214:	4b78      	ldr	r3, [pc, #480]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004218:	2380      	movs	r3, #128	@ 0x80
 800421a:	055b      	lsls	r3, r3, #21
 800421c:	4013      	ands	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004222:	183b      	adds	r3, r7, r0
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004228:	4b74      	ldr	r3, [pc, #464]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b73      	ldr	r3, [pc, #460]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800422e:	2180      	movs	r1, #128	@ 0x80
 8004230:	0049      	lsls	r1, r1, #1
 8004232:	430a      	orrs	r2, r1
 8004234:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004236:	f7fd fdbd 	bl	8001db4 <HAL_GetTick>
 800423a:	0003      	movs	r3, r0
 800423c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423e:	e00b      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fd fdb8 	bl	8001db4 <HAL_GetTick>
 8004244:	0002      	movs	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d904      	bls.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800424e:	2313      	movs	r3, #19
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2203      	movs	r2, #3
 8004254:	701a      	strb	r2, [r3, #0]
        break;
 8004256:	e005      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004258:	4b68      	ldr	r3, [pc, #416]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d0ed      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004264:	2313      	movs	r3, #19
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d154      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800426e:	4b62      	ldr	r3, [pc, #392]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004270:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004272:	23c0      	movs	r3, #192	@ 0xc0
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4013      	ands	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d019      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	429a      	cmp	r2, r3
 8004288:	d014      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800428a:	4b5b      	ldr	r3, [pc, #364]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	4a5c      	ldr	r2, [pc, #368]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004290:	4013      	ands	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004294:	4b58      	ldr	r3, [pc, #352]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004296:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004298:	4b57      	ldr	r3, [pc, #348]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800429a:	2180      	movs	r1, #128	@ 0x80
 800429c:	0249      	lsls	r1, r1, #9
 800429e:	430a      	orrs	r2, r1
 80042a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042a2:	4b55      	ldr	r3, [pc, #340]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042a6:	4b54      	ldr	r3, [pc, #336]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042a8:	4956      	ldr	r1, [pc, #344]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ae:	4b52      	ldr	r3, [pc, #328]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2201      	movs	r2, #1
 80042b8:	4013      	ands	r3, r2
 80042ba:	d016      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd fd7a 	bl	8001db4 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c4:	e00c      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fd fd75 	bl	8001db4 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d904      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80042d6:	2313      	movs	r3, #19
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2203      	movs	r2, #3
 80042dc:	701a      	strb	r2, [r3, #0]
            break;
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e0:	4b45      	ldr	r3, [pc, #276]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	2202      	movs	r2, #2
 80042e6:	4013      	ands	r3, r2
 80042e8:	d0ed      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80042ea:	2313      	movs	r3, #19
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b40      	ldr	r3, [pc, #256]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	4a41      	ldr	r2, [pc, #260]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	4b3d      	ldr	r3, [pc, #244]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004304:	430a      	orrs	r2, r1
 8004306:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004308:	e00c      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800430a:	2312      	movs	r3, #18
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2213      	movs	r2, #19
 8004310:	18ba      	adds	r2, r7, r2
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e005      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	2312      	movs	r3, #18
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2213      	movs	r2, #19
 800431e:	18ba      	adds	r2, r7, r2
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004324:	2311      	movs	r3, #17
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432e:	4b32      	ldr	r3, [pc, #200]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004330:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004332:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004334:	4935      	ldr	r1, [pc, #212]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004336:	400a      	ands	r2, r1
 8004338:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2201      	movs	r2, #1
 8004340:	4013      	ands	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004344:	4b2c      	ldr	r3, [pc, #176]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004348:	2203      	movs	r2, #3
 800434a:	4393      	bics	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	4b29      	ldr	r3, [pc, #164]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004354:	430a      	orrs	r2, r1
 8004356:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2220      	movs	r2, #32
 800435e:	4013      	ands	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004362:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	4a2a      	ldr	r2, [pc, #168]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	4b21      	ldr	r3, [pc, #132]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004372:	430a      	orrs	r2, r1
 8004374:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	01db      	lsls	r3, r3, #7
 800437e:	4013      	ands	r3, r2
 8004380:	d015      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004382:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	0899      	lsrs	r1, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004390:	430a      	orrs	r2, r1
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	2380      	movs	r3, #128	@ 0x80
 800439a:	05db      	lsls	r3, r3, #23
 800439c:	429a      	cmp	r2, r3
 800439e:	d106      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043a0:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b14      	ldr	r3, [pc, #80]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043a6:	2180      	movs	r1, #128	@ 0x80
 80043a8:	0249      	lsls	r1, r1, #9
 80043aa:	430a      	orrs	r2, r1
 80043ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	@ 0x80
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4013      	ands	r3, r2
 80043b8:	d016      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043be:	4a15      	ldr	r2, [pc, #84]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043ca:	430a      	orrs	r2, r1
 80043cc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	2380      	movs	r3, #128	@ 0x80
 80043d4:	01db      	lsls	r3, r3, #7
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d106      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043da:	4b07      	ldr	r3, [pc, #28]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043e0:	2180      	movs	r1, #128	@ 0x80
 80043e2:	0249      	lsls	r1, r1, #9
 80043e4:	430a      	orrs	r2, r1
 80043e6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80043e8:	2312      	movs	r3, #18
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	781b      	ldrb	r3, [r3, #0]
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b006      	add	sp, #24
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
 8004400:	fffffcff 	.word	0xfffffcff
 8004404:	fffeffff 	.word	0xfffeffff
 8004408:	00001388 	.word	0x00001388
 800440c:	efffffff 	.word	0xefffffff
 8004410:	ffffcfff 	.word	0xffffcfff
 8004414:	ffff3fff 	.word	0xffff3fff

08004418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e04a      	b.n	80044c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	223d      	movs	r2, #61	@ 0x3d
 800442e:	5c9b      	ldrb	r3, [r3, r2]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d107      	bne.n	8004446 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	223c      	movs	r2, #60	@ 0x3c
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	0018      	movs	r0, r3
 8004442:	f7fd fa0f 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223d      	movs	r2, #61	@ 0x3d
 800444a:	2102      	movs	r1, #2
 800444c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3304      	adds	r3, #4
 8004456:	0019      	movs	r1, r3
 8004458:	0010      	movs	r0, r2
 800445a:	f000 fcff 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2248      	movs	r2, #72	@ 0x48
 8004462:	2101      	movs	r1, #1
 8004464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	223e      	movs	r2, #62	@ 0x3e
 800446a:	2101      	movs	r1, #1
 800446c:	5499      	strb	r1, [r3, r2]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	223f      	movs	r2, #63	@ 0x3f
 8004472:	2101      	movs	r1, #1
 8004474:	5499      	strb	r1, [r3, r2]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2240      	movs	r2, #64	@ 0x40
 800447a:	2101      	movs	r1, #1
 800447c:	5499      	strb	r1, [r3, r2]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2241      	movs	r2, #65	@ 0x41
 8004482:	2101      	movs	r1, #1
 8004484:	5499      	strb	r1, [r3, r2]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2242      	movs	r2, #66	@ 0x42
 800448a:	2101      	movs	r1, #1
 800448c:	5499      	strb	r1, [r3, r2]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2243      	movs	r2, #67	@ 0x43
 8004492:	2101      	movs	r1, #1
 8004494:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2244      	movs	r2, #68	@ 0x44
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2245      	movs	r2, #69	@ 0x45
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2246      	movs	r2, #70	@ 0x46
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2247      	movs	r2, #71	@ 0x47
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223d      	movs	r2, #61	@ 0x3d
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	223d      	movs	r2, #61	@ 0x3d
 80044d4:	5c9b      	ldrb	r3, [r3, r2]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d001      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e037      	b.n	8004550 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	223d      	movs	r2, #61	@ 0x3d
 80044e4:	2102      	movs	r1, #2
 80044e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	430a      	orrs	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <HAL_TIM_Base_Start_IT+0x90>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_TIM_Base_Start_IT+0x44>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a15      	ldr	r2, [pc, #84]	@ (800455c <HAL_TIM_Base_Start_IT+0x94>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d116      	bne.n	800453a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4a13      	ldr	r2, [pc, #76]	@ (8004560 <HAL_TIM_Base_Start_IT+0x98>)
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b06      	cmp	r3, #6
 800451c:	d016      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x84>
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	2380      	movs	r3, #128	@ 0x80
 8004522:	025b      	lsls	r3, r3, #9
 8004524:	429a      	cmp	r2, r3
 8004526:	d011      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2101      	movs	r1, #1
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	e008      	b.n	800454c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2101      	movs	r1, #1
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e000      	b.n	800454e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	00010007 	.word	0x00010007

08004564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e04a      	b.n	800460c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	223d      	movs	r2, #61	@ 0x3d
 800457a:	5c9b      	ldrb	r3, [r3, r2]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	223c      	movs	r2, #60	@ 0x3c
 8004586:	2100      	movs	r1, #0
 8004588:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f841 	bl	8004614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	223d      	movs	r2, #61	@ 0x3d
 8004596:	2102      	movs	r1, #2
 8004598:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	0019      	movs	r1, r3
 80045a4:	0010      	movs	r0, r2
 80045a6:	f000 fc59 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2248      	movs	r2, #72	@ 0x48
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	223e      	movs	r2, #62	@ 0x3e
 80045b6:	2101      	movs	r1, #1
 80045b8:	5499      	strb	r1, [r3, r2]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	223f      	movs	r2, #63	@ 0x3f
 80045be:	2101      	movs	r1, #1
 80045c0:	5499      	strb	r1, [r3, r2]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2240      	movs	r2, #64	@ 0x40
 80045c6:	2101      	movs	r1, #1
 80045c8:	5499      	strb	r1, [r3, r2]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2241      	movs	r2, #65	@ 0x41
 80045ce:	2101      	movs	r1, #1
 80045d0:	5499      	strb	r1, [r3, r2]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2242      	movs	r2, #66	@ 0x42
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2243      	movs	r2, #67	@ 0x43
 80045de:	2101      	movs	r1, #1
 80045e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2244      	movs	r2, #68	@ 0x44
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2245      	movs	r2, #69	@ 0x45
 80045ee:	2101      	movs	r1, #1
 80045f0:	5499      	strb	r1, [r3, r2]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2246      	movs	r2, #70	@ 0x46
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2247      	movs	r2, #71	@ 0x47
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	223d      	movs	r2, #61	@ 0x3d
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800461c:	46c0      	nop			@ (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d108      	bne.n	8004646 <HAL_TIM_PWM_Start+0x22>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	223e      	movs	r2, #62	@ 0x3e
 8004638:	5c9b      	ldrb	r3, [r3, r2]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	1e5a      	subs	r2, r3, #1
 8004640:	4193      	sbcs	r3, r2
 8004642:	b2db      	uxtb	r3, r3
 8004644:	e037      	b.n	80046b6 <HAL_TIM_PWM_Start+0x92>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d108      	bne.n	800465e <HAL_TIM_PWM_Start+0x3a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	223f      	movs	r2, #63	@ 0x3f
 8004650:	5c9b      	ldrb	r3, [r3, r2]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	4193      	sbcs	r3, r2
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e02b      	b.n	80046b6 <HAL_TIM_PWM_Start+0x92>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d108      	bne.n	8004676 <HAL_TIM_PWM_Start+0x52>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2240      	movs	r2, #64	@ 0x40
 8004668:	5c9b      	ldrb	r3, [r3, r2]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	4193      	sbcs	r3, r2
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e01f      	b.n	80046b6 <HAL_TIM_PWM_Start+0x92>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d108      	bne.n	800468e <HAL_TIM_PWM_Start+0x6a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2241      	movs	r2, #65	@ 0x41
 8004680:	5c9b      	ldrb	r3, [r3, r2]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	1e5a      	subs	r2, r3, #1
 8004688:	4193      	sbcs	r3, r2
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e013      	b.n	80046b6 <HAL_TIM_PWM_Start+0x92>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b10      	cmp	r3, #16
 8004692:	d108      	bne.n	80046a6 <HAL_TIM_PWM_Start+0x82>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2242      	movs	r2, #66	@ 0x42
 8004698:	5c9b      	ldrb	r3, [r3, r2]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	4193      	sbcs	r3, r2
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e007      	b.n	80046b6 <HAL_TIM_PWM_Start+0x92>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2243      	movs	r2, #67	@ 0x43
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	1e5a      	subs	r2, r3, #1
 80046b2:	4193      	sbcs	r3, r2
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07b      	b.n	80047b6 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Start+0xaa>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	223e      	movs	r2, #62	@ 0x3e
 80046c8:	2102      	movs	r1, #2
 80046ca:	5499      	strb	r1, [r3, r2]
 80046cc:	e023      	b.n	8004716 <HAL_TIM_PWM_Start+0xf2>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0xba>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	223f      	movs	r2, #63	@ 0x3f
 80046d8:	2102      	movs	r1, #2
 80046da:	5499      	strb	r1, [r3, r2]
 80046dc:	e01b      	b.n	8004716 <HAL_TIM_PWM_Start+0xf2>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0xca>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2240      	movs	r2, #64	@ 0x40
 80046e8:	2102      	movs	r1, #2
 80046ea:	5499      	strb	r1, [r3, r2]
 80046ec:	e013      	b.n	8004716 <HAL_TIM_PWM_Start+0xf2>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0xda>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2241      	movs	r2, #65	@ 0x41
 80046f8:	2102      	movs	r1, #2
 80046fa:	5499      	strb	r1, [r3, r2]
 80046fc:	e00b      	b.n	8004716 <HAL_TIM_PWM_Start+0xf2>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b10      	cmp	r3, #16
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start+0xea>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2242      	movs	r2, #66	@ 0x42
 8004708:	2102      	movs	r1, #2
 800470a:	5499      	strb	r1, [r3, r2]
 800470c:	e003      	b.n	8004716 <HAL_TIM_PWM_Start+0xf2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2243      	movs	r2, #67	@ 0x43
 8004712:	2102      	movs	r1, #2
 8004714:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	0018      	movs	r0, r3
 8004720:	f000 ffe4 	bl	80056ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a25      	ldr	r2, [pc, #148]	@ (80047c0 <HAL_TIM_PWM_Start+0x19c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIM_PWM_Start+0x11e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a24      	ldr	r2, [pc, #144]	@ (80047c4 <HAL_TIM_PWM_Start+0x1a0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIM_PWM_Start+0x11e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <HAL_TIM_PWM_Start+0x1a4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <HAL_TIM_PWM_Start+0x122>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_TIM_PWM_Start+0x124>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2180      	movs	r1, #128	@ 0x80
 8004758:	0209      	lsls	r1, r1, #8
 800475a:	430a      	orrs	r2, r1
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <HAL_TIM_PWM_Start+0x19c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_TIM_PWM_Start+0x14e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a17      	ldr	r2, [pc, #92]	@ (80047cc <HAL_TIM_PWM_Start+0x1a8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d116      	bne.n	80047a0 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <HAL_TIM_PWM_Start+0x1ac>)
 800477a:	4013      	ands	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b06      	cmp	r3, #6
 8004782:	d016      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x18e>
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	2380      	movs	r3, #128	@ 0x80
 8004788:	025b      	lsls	r3, r3, #9
 800478a:	429a      	cmp	r2, r3
 800478c:	d011      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2101      	movs	r1, #1
 800479a:	430a      	orrs	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	e008      	b.n	80047b2 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	e000      	b.n	80047b4 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b004      	add	sp, #16
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	40000400 	.word	0x40000400
 80047d0:	00010007 	.word	0x00010007

080047d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2202      	movs	r2, #2
 80047f0:	4013      	ands	r3, r2
 80047f2:	d021      	beq.n	8004838 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2202      	movs	r2, #2
 80047f8:	4013      	ands	r3, r2
 80047fa:	d01d      	beq.n	8004838 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2203      	movs	r2, #3
 8004802:	4252      	negs	r2, r2
 8004804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2203      	movs	r2, #3
 8004814:	4013      	ands	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 fb06 	bl	8004e2c <HAL_TIM_IC_CaptureCallback>
 8004820:	e007      	b.n	8004832 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f000 faf9 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 fb05 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2204      	movs	r2, #4
 800483c:	4013      	ands	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2204      	movs	r2, #4
 8004844:	4013      	ands	r3, r2
 8004846:	d01e      	beq.n	8004886 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2205      	movs	r2, #5
 800484e:	4252      	negs	r2, r2
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	23c0      	movs	r3, #192	@ 0xc0
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4013      	ands	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 fadf 	bl	8004e2c <HAL_TIM_IC_CaptureCallback>
 800486e:	e007      	b.n	8004880 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 fad2 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	0018      	movs	r0, r3
 800487c:	f000 fade 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2208      	movs	r2, #8
 800488a:	4013      	ands	r3, r2
 800488c:	d021      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2208      	movs	r2, #8
 8004892:	4013      	ands	r3, r2
 8004894:	d01d      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2209      	movs	r2, #9
 800489c:	4252      	negs	r2, r2
 800489e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2204      	movs	r2, #4
 80048a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2203      	movs	r2, #3
 80048ae:	4013      	ands	r3, r2
 80048b0:	d004      	beq.n	80048bc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fab9 	bl	8004e2c <HAL_TIM_IC_CaptureCallback>
 80048ba:	e007      	b.n	80048cc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 faac 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 fab8 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2210      	movs	r2, #16
 80048d6:	4013      	ands	r3, r2
 80048d8:	d022      	beq.n	8004920 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2210      	movs	r2, #16
 80048de:	4013      	ands	r3, r2
 80048e0:	d01e      	beq.n	8004920 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2211      	movs	r2, #17
 80048e8:	4252      	negs	r2, r2
 80048ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2208      	movs	r2, #8
 80048f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	23c0      	movs	r3, #192	@ 0xc0
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4013      	ands	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	0018      	movs	r0, r3
 8004904:	f000 fa92 	bl	8004e2c <HAL_TIM_IC_CaptureCallback>
 8004908:	e007      	b.n	800491a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0018      	movs	r0, r3
 800490e:	f000 fa85 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fa91 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2201      	movs	r2, #1
 8004924:	4013      	ands	r3, r2
 8004926:	d00c      	beq.n	8004942 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	4013      	ands	r3, r2
 800492e:	d008      	beq.n	8004942 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2202      	movs	r2, #2
 8004936:	4252      	negs	r2, r2
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f7fc faf9 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2280      	movs	r2, #128	@ 0x80
 8004946:	4013      	ands	r3, r2
 8004948:	d104      	bne.n	8004954 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	019b      	lsls	r3, r3, #6
 8004950:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004952:	d00b      	beq.n	800496c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2280      	movs	r2, #128	@ 0x80
 8004958:	4013      	ands	r3, r2
 800495a:	d007      	beq.n	800496c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1e      	ldr	r2, [pc, #120]	@ (80049dc <HAL_TIM_IRQHandler+0x208>)
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0018      	movs	r0, r3
 8004968:	f000 ffea 	bl	8005940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4013      	ands	r3, r2
 8004974:	d00b      	beq.n	800498e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2280      	movs	r2, #128	@ 0x80
 800497a:	4013      	ands	r3, r2
 800497c:	d007      	beq.n	800498e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a17      	ldr	r2, [pc, #92]	@ (80049e0 <HAL_TIM_IRQHandler+0x20c>)
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 ffe1 	bl	8005950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2240      	movs	r2, #64	@ 0x40
 8004992:	4013      	ands	r3, r2
 8004994:	d00c      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2240      	movs	r2, #64	@ 0x40
 800499a:	4013      	ands	r3, r2
 800499c:	d008      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2241      	movs	r2, #65	@ 0x41
 80049a4:	4252      	negs	r2, r2
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fa4e 	bl	8004e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2220      	movs	r2, #32
 80049b4:	4013      	ands	r3, r2
 80049b6:	d00c      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	4013      	ands	r3, r2
 80049be:	d008      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2221      	movs	r2, #33	@ 0x21
 80049c6:	4252      	negs	r2, r2
 80049c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 ffaf 	bl	8005930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	ffffdf7f 	.word	0xffffdf7f
 80049e0:	fffffeff 	.word	0xfffffeff

080049e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2317      	movs	r3, #23
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	223c      	movs	r2, #60	@ 0x3c
 80049fc:	5c9b      	ldrb	r3, [r3, r2]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0e5      	b.n	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	223c      	movs	r2, #60	@ 0x3c
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b14      	cmp	r3, #20
 8004a12:	d900      	bls.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004a14:	e0d1      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	009a      	lsls	r2, r3, #2
 8004a1a:	4b70      	ldr	r3, [pc, #448]	@ (8004bdc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004a1c:	18d3      	adds	r3, r2, r3
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0011      	movs	r1, r2
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 fa90 	bl	8004f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2108      	movs	r1, #8
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6999      	ldr	r1, [r3, #24]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	619a      	str	r2, [r3, #24]
      break;
 8004a62:	e0af      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 faef 	bl	8005050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2180      	movs	r1, #128	@ 0x80
 8004a7e:	0109      	lsls	r1, r1, #4
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4954      	ldr	r1, [pc, #336]	@ (8004be0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]
      break;
 8004aa8:	e08c      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	0011      	movs	r1, r2
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fb4a 	bl	800514c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2108      	movs	r1, #8
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69d9      	ldr	r1, [r3, #28]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	61da      	str	r2, [r3, #28]
      break;
 8004aea:	e06b      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	0011      	movs	r1, r2
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 fbab 	bl	8005250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2180      	movs	r1, #128	@ 0x80
 8004b06:	0109      	lsls	r1, r1, #4
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4932      	ldr	r1, [pc, #200]	@ (8004be0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69d9      	ldr	r1, [r3, #28]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	61da      	str	r2, [r3, #28]
      break;
 8004b30:	e048      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 fbec 	bl	8005318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2108      	movs	r1, #8
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b72:	e027      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fc25 	bl	80053cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2180      	movs	r1, #128	@ 0x80
 8004b8e:	0109      	lsls	r1, r1, #4
 8004b90:	430a      	orrs	r2, r1
 8004b92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4910      	ldr	r1, [pc, #64]	@ (8004be0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bb8:	e004      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004bba:	2317      	movs	r3, #23
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
      break;
 8004bc2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	223c      	movs	r2, #60	@ 0x3c
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]

  return status;
 8004bcc:	2317      	movs	r3, #23
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	781b      	ldrb	r3, [r3, #0]
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b006      	add	sp, #24
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	080073ec 	.word	0x080073ec
 8004be0:	fffffbff 	.word	0xfffffbff

08004be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	230f      	movs	r3, #15
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	223c      	movs	r2, #60	@ 0x3c
 8004bfa:	5c9b      	ldrb	r3, [r3, r2]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0x20>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0bc      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x19a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	223c      	movs	r2, #60	@ 0x3c
 8004c08:	2101      	movs	r1, #1
 8004c0a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	223d      	movs	r2, #61	@ 0x3d
 8004c10:	2102      	movs	r1, #2
 8004c12:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8004d88 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a59      	ldr	r2, [pc, #356]	@ (8004d8c <HAL_TIM_ConfigClockSource+0x1a8>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2280      	movs	r2, #128	@ 0x80
 8004c3a:	0192      	lsls	r2, r2, #6
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d040      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0xde>
 8004c40:	2280      	movs	r2, #128	@ 0x80
 8004c42:	0192      	lsls	r2, r2, #6
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d900      	bls.n	8004c4a <HAL_TIM_ConfigClockSource+0x66>
 8004c48:	e088      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c4a:	2280      	movs	r2, #128	@ 0x80
 8004c4c:	0152      	lsls	r2, r2, #5
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d100      	bne.n	8004c54 <HAL_TIM_ConfigClockSource+0x70>
 8004c52:	e088      	b.n	8004d66 <HAL_TIM_ConfigClockSource+0x182>
 8004c54:	2280      	movs	r2, #128	@ 0x80
 8004c56:	0152      	lsls	r2, r2, #5
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d900      	bls.n	8004c5e <HAL_TIM_ConfigClockSource+0x7a>
 8004c5c:	e07e      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c5e:	2b70      	cmp	r3, #112	@ 0x70
 8004c60:	d018      	beq.n	8004c94 <HAL_TIM_ConfigClockSource+0xb0>
 8004c62:	d900      	bls.n	8004c66 <HAL_TIM_ConfigClockSource+0x82>
 8004c64:	e07a      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c66:	2b60      	cmp	r3, #96	@ 0x60
 8004c68:	d04f      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x126>
 8004c6a:	d900      	bls.n	8004c6e <HAL_TIM_ConfigClockSource+0x8a>
 8004c6c:	e076      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c6e:	2b50      	cmp	r3, #80	@ 0x50
 8004c70:	d03b      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x106>
 8004c72:	d900      	bls.n	8004c76 <HAL_TIM_ConfigClockSource+0x92>
 8004c74:	e072      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d057      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x146>
 8004c7a:	d900      	bls.n	8004c7e <HAL_TIM_ConfigClockSource+0x9a>
 8004c7c:	e06e      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c7e:	2b30      	cmp	r3, #48	@ 0x30
 8004c80:	d063      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x166>
 8004c82:	d86b      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d060      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x166>
 8004c88:	d868      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d05d      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x166>
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d05b      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x166>
 8004c92:	e063      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ca4:	f000 fd02 	bl	80056ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2277      	movs	r2, #119	@ 0x77
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	609a      	str	r2, [r3, #8]
      break;
 8004cc0:	e052      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd2:	f000 fceb 	bl	80056ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2180      	movs	r1, #128	@ 0x80
 8004ce2:	01c9      	lsls	r1, r1, #7
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
      break;
 8004ce8:	e03e      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	f000 fc5c 	bl	80055b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2150      	movs	r1, #80	@ 0x50
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 fcb6 	bl	8005674 <TIM_ITRx_SetConfig>
      break;
 8004d08:	e02e      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d16:	001a      	movs	r2, r3
 8004d18:	f000 fc7a 	bl	8005610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2160      	movs	r1, #96	@ 0x60
 8004d22:	0018      	movs	r0, r3
 8004d24:	f000 fca6 	bl	8005674 <TIM_ITRx_SetConfig>
      break;
 8004d28:	e01e      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	001a      	movs	r2, r3
 8004d38:	f000 fc3c 	bl	80055b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2140      	movs	r1, #64	@ 0x40
 8004d42:	0018      	movs	r0, r3
 8004d44:	f000 fc96 	bl	8005674 <TIM_ITRx_SetConfig>
      break;
 8004d48:	e00e      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	0019      	movs	r1, r3
 8004d54:	0010      	movs	r0, r2
 8004d56:	f000 fc8d 	bl	8005674 <TIM_ITRx_SetConfig>
      break;
 8004d5a:	e005      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004d5c:	230f      	movs	r3, #15
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004d66:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	223d      	movs	r2, #61	@ 0x3d
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	223c      	movs	r2, #60	@ 0x3c
 8004d74:	2100      	movs	r1, #0
 8004d76:	5499      	strb	r1, [r3, r2]

  return status;
 8004d78:	230f      	movs	r3, #15
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	781b      	ldrb	r3, [r3, #0]
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b004      	add	sp, #16
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	ffceff88 	.word	0xffceff88
 8004d8c:	ffff00ff 	.word	0xffff00ff

08004d90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	223c      	movs	r2, #60	@ 0x3c
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e032      	b.n	8004e0e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	223c      	movs	r2, #60	@ 0x3c
 8004dac:	2101      	movs	r1, #1
 8004dae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	223d      	movs	r2, #61	@ 0x3d
 8004db4:	2102      	movs	r1, #2
 8004db6:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	0011      	movs	r1, r2
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f000 fb62 	bl	8005488 <TIM_SlaveTimer_SetConfig>
 8004dc4:	1e03      	subs	r3, r0, #0
 8004dc6:	d009      	beq.n	8004ddc <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	223d      	movs	r2, #61	@ 0x3d
 8004dcc:	2101      	movs	r1, #1
 8004dce:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	223c      	movs	r2, #60	@ 0x3c
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e018      	b.n	8004e0e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2140      	movs	r1, #64	@ 0x40
 8004de8:	438a      	bics	r2, r1
 8004dea:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4908      	ldr	r1, [pc, #32]	@ (8004e18 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004df8:	400a      	ands	r2, r1
 8004dfa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223d      	movs	r2, #61	@ 0x3d
 8004e00:	2101      	movs	r1, #1
 8004e02:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	223c      	movs	r2, #60	@ 0x3c
 8004e08:	2100      	movs	r1, #0
 8004e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	ffffbfff 	.word	0xffffbfff

08004e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e24:	46c0      	nop			@ (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e54:	46c0      	nop			@ (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a32      	ldr	r2, [pc, #200]	@ (8004f38 <TIM_Base_SetConfig+0xdc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0x20>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a31      	ldr	r2, [pc, #196]	@ (8004f3c <TIM_Base_SetConfig+0xe0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2270      	movs	r2, #112	@ 0x70
 8004e80:	4393      	bics	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a29      	ldr	r2, [pc, #164]	@ (8004f38 <TIM_Base_SetConfig+0xdc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <TIM_Base_SetConfig+0x5a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a28      	ldr	r2, [pc, #160]	@ (8004f3c <TIM_Base_SetConfig+0xe0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <TIM_Base_SetConfig+0x5a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	@ (8004f40 <TIM_Base_SetConfig+0xe4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d007      	beq.n	8004eb6 <TIM_Base_SetConfig+0x5a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a26      	ldr	r2, [pc, #152]	@ (8004f44 <TIM_Base_SetConfig+0xe8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_Base_SetConfig+0x5a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a25      	ldr	r2, [pc, #148]	@ (8004f48 <TIM_Base_SetConfig+0xec>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a24      	ldr	r2, [pc, #144]	@ (8004f4c <TIM_Base_SetConfig+0xf0>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2280      	movs	r2, #128	@ 0x80
 8004ecc:	4393      	bics	r3, r2
 8004ece:	001a      	movs	r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a11      	ldr	r2, [pc, #68]	@ (8004f38 <TIM_Base_SetConfig+0xdc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <TIM_Base_SetConfig+0xaa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a12      	ldr	r2, [pc, #72]	@ (8004f44 <TIM_Base_SetConfig+0xe8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_Base_SetConfig+0xaa>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a11      	ldr	r2, [pc, #68]	@ (8004f48 <TIM_Base_SetConfig+0xec>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d103      	bne.n	8004f0e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d106      	bne.n	8004f2e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2201      	movs	r2, #1
 8004f26:	4393      	bics	r3, r2
 8004f28:	001a      	movs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]
  }
}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b004      	add	sp, #16
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40002000 	.word	0x40002000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	fffffcff 	.word	0xfffffcff

08004f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	2201      	movs	r2, #1
 8004f66:	4393      	bics	r3, r2
 8004f68:	001a      	movs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005038 <TIM_OC1_SetConfig+0xe8>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2203      	movs	r2, #3
 8004f86:	4393      	bics	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2202      	movs	r2, #2
 8004f98:	4393      	bics	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a24      	ldr	r2, [pc, #144]	@ (800503c <TIM_OC1_SetConfig+0xec>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_OC1_SetConfig+0x6e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a23      	ldr	r2, [pc, #140]	@ (8005040 <TIM_OC1_SetConfig+0xf0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_OC1_SetConfig+0x6e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a22      	ldr	r2, [pc, #136]	@ (8005044 <TIM_OC1_SetConfig+0xf4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d10c      	bne.n	8004fd8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	4393      	bics	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a18      	ldr	r2, [pc, #96]	@ (800503c <TIM_OC1_SetConfig+0xec>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_OC1_SetConfig+0xa0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <TIM_OC1_SetConfig+0xf0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC1_SetConfig+0xa0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <TIM_OC1_SetConfig+0xf4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d111      	bne.n	8005014 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <TIM_OC1_SetConfig+0xf8>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4a14      	ldr	r2, [pc, #80]	@ (800504c <TIM_OC1_SetConfig+0xfc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	46bd      	mov	sp, r7
 8005032:	b006      	add	sp, #24
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	fffeff8f 	.word	0xfffeff8f
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40014400 	.word	0x40014400
 8005044:	40014800 	.word	0x40014800
 8005048:	fffffeff 	.word	0xfffffeff
 800504c:	fffffdff 	.word	0xfffffdff

08005050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	2210      	movs	r2, #16
 8005066:	4393      	bics	r3, r2
 8005068:	001a      	movs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a2c      	ldr	r2, [pc, #176]	@ (8005130 <TIM_OC2_SetConfig+0xe0>)
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a2b      	ldr	r2, [pc, #172]	@ (8005134 <TIM_OC2_SetConfig+0xe4>)
 8005086:	4013      	ands	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2220      	movs	r2, #32
 800509a:	4393      	bics	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a22      	ldr	r2, [pc, #136]	@ (8005138 <TIM_OC2_SetConfig+0xe8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10d      	bne.n	80050ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2280      	movs	r2, #128	@ 0x80
 80050b6:	4393      	bics	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2240      	movs	r2, #64	@ 0x40
 80050ca:	4393      	bics	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <TIM_OC2_SetConfig+0xe8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <TIM_OC2_SetConfig+0x96>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a18      	ldr	r2, [pc, #96]	@ (800513c <TIM_OC2_SetConfig+0xec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_OC2_SetConfig+0x96>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a17      	ldr	r2, [pc, #92]	@ (8005140 <TIM_OC2_SetConfig+0xf0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d113      	bne.n	800510e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4a16      	ldr	r2, [pc, #88]	@ (8005144 <TIM_OC2_SetConfig+0xf4>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <TIM_OC2_SetConfig+0xf8>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b006      	add	sp, #24
 800512e:	bd80      	pop	{r7, pc}
 8005130:	feff8fff 	.word	0xfeff8fff
 8005134:	fffffcff 	.word	0xfffffcff
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800
 8005144:	fffffbff 	.word	0xfffffbff
 8005148:	fffff7ff 	.word	0xfffff7ff

0800514c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4a31      	ldr	r2, [pc, #196]	@ (8005228 <TIM_OC3_SetConfig+0xdc>)
 8005162:	401a      	ands	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a2d      	ldr	r2, [pc, #180]	@ (800522c <TIM_OC3_SetConfig+0xe0>)
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2203      	movs	r2, #3
 8005180:	4393      	bics	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	4a27      	ldr	r2, [pc, #156]	@ (8005230 <TIM_OC3_SetConfig+0xe4>)
 8005192:	4013      	ands	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a23      	ldr	r2, [pc, #140]	@ (8005234 <TIM_OC3_SetConfig+0xe8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10d      	bne.n	80051c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4a22      	ldr	r2, [pc, #136]	@ (8005238 <TIM_OC3_SetConfig+0xec>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4a1e      	ldr	r2, [pc, #120]	@ (800523c <TIM_OC3_SetConfig+0xf0>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005234 <TIM_OC3_SetConfig+0xe8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_OC3_SetConfig+0x92>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005240 <TIM_OC3_SetConfig+0xf4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_OC3_SetConfig+0x92>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005244 <TIM_OC3_SetConfig+0xf8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d113      	bne.n	8005206 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4a19      	ldr	r2, [pc, #100]	@ (8005248 <TIM_OC3_SetConfig+0xfc>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4a18      	ldr	r2, [pc, #96]	@ (800524c <TIM_OC3_SetConfig+0x100>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	621a      	str	r2, [r3, #32]
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b006      	add	sp, #24
 8005226:	bd80      	pop	{r7, pc}
 8005228:	fffffeff 	.word	0xfffffeff
 800522c:	fffeff8f 	.word	0xfffeff8f
 8005230:	fffffdff 	.word	0xfffffdff
 8005234:	40012c00 	.word	0x40012c00
 8005238:	fffff7ff 	.word	0xfffff7ff
 800523c:	fffffbff 	.word	0xfffffbff
 8005240:	40014400 	.word	0x40014400
 8005244:	40014800 	.word	0x40014800
 8005248:	ffffefff 	.word	0xffffefff
 800524c:	ffffdfff 	.word	0xffffdfff

08005250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a24      	ldr	r2, [pc, #144]	@ (80052f8 <TIM_OC4_SetConfig+0xa8>)
 8005266:	401a      	ands	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a20      	ldr	r2, [pc, #128]	@ (80052fc <TIM_OC4_SetConfig+0xac>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <TIM_OC4_SetConfig+0xb0>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4a1b      	ldr	r2, [pc, #108]	@ (8005304 <TIM_OC4_SetConfig+0xb4>)
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a17      	ldr	r2, [pc, #92]	@ (8005308 <TIM_OC4_SetConfig+0xb8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_OC4_SetConfig+0x70>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a16      	ldr	r2, [pc, #88]	@ (800530c <TIM_OC4_SetConfig+0xbc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC4_SetConfig+0x70>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a15      	ldr	r2, [pc, #84]	@ (8005310 <TIM_OC4_SetConfig+0xc0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d109      	bne.n	80052d4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4a14      	ldr	r2, [pc, #80]	@ (8005314 <TIM_OC4_SetConfig+0xc4>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	019b      	lsls	r3, r3, #6
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b006      	add	sp, #24
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	ffffefff 	.word	0xffffefff
 80052fc:	feff8fff 	.word	0xfeff8fff
 8005300:	fffffcff 	.word	0xfffffcff
 8005304:	ffffdfff 	.word	0xffffdfff
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800
 8005314:	ffffbfff 	.word	0xffffbfff

08005318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	4a21      	ldr	r2, [pc, #132]	@ (80053b4 <TIM_OC5_SetConfig+0x9c>)
 800532e:	401a      	ands	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a1d      	ldr	r2, [pc, #116]	@ (80053b8 <TIM_OC5_SetConfig+0xa0>)
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <TIM_OC5_SetConfig+0xa4>)
 8005356:	4013      	ands	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a15      	ldr	r2, [pc, #84]	@ (80053c0 <TIM_OC5_SetConfig+0xa8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_OC5_SetConfig+0x66>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a14      	ldr	r2, [pc, #80]	@ (80053c4 <TIM_OC5_SetConfig+0xac>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC5_SetConfig+0x66>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a13      	ldr	r2, [pc, #76]	@ (80053c8 <TIM_OC5_SetConfig+0xb0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d109      	bne.n	8005392 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4a0c      	ldr	r2, [pc, #48]	@ (80053b4 <TIM_OC5_SetConfig+0x9c>)
 8005382:	4013      	ands	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	621a      	str	r2, [r3, #32]
}
 80053ac:	46c0      	nop			@ (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b006      	add	sp, #24
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	fffeffff 	.word	0xfffeffff
 80053b8:	fffeff8f 	.word	0xfffeff8f
 80053bc:	fffdffff 	.word	0xfffdffff
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	4a22      	ldr	r2, [pc, #136]	@ (800546c <TIM_OC6_SetConfig+0xa0>)
 80053e2:	401a      	ands	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <TIM_OC6_SetConfig+0xa4>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4a1a      	ldr	r2, [pc, #104]	@ (8005474 <TIM_OC6_SetConfig+0xa8>)
 800540c:	4013      	ands	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	051b      	lsls	r3, r3, #20
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a16      	ldr	r2, [pc, #88]	@ (8005478 <TIM_OC6_SetConfig+0xac>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_OC6_SetConfig+0x68>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a15      	ldr	r2, [pc, #84]	@ (800547c <TIM_OC6_SetConfig+0xb0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_OC6_SetConfig+0x68>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a14      	ldr	r2, [pc, #80]	@ (8005480 <TIM_OC6_SetConfig+0xb4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d109      	bne.n	8005448 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4a13      	ldr	r2, [pc, #76]	@ (8005484 <TIM_OC6_SetConfig+0xb8>)
 8005438:	4013      	ands	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b006      	add	sp, #24
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	ffefffff 	.word	0xffefffff
 8005470:	feff8fff 	.word	0xfeff8fff
 8005474:	ffdfffff 	.word	0xffdfffff
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800
 8005484:	fffbffff 	.word	0xfffbffff

08005488 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2317      	movs	r3, #23
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4a41      	ldr	r2, [pc, #260]	@ (80055ac <TIM_SlaveTimer_SetConfig+0x124>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4a3e      	ldr	r2, [pc, #248]	@ (80055b0 <TIM_SlaveTimer_SetConfig+0x128>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b70      	cmp	r3, #112	@ 0x70
 80054d4:	d015      	beq.n	8005502 <TIM_SlaveTimer_SetConfig+0x7a>
 80054d6:	d900      	bls.n	80054da <TIM_SlaveTimer_SetConfig+0x52>
 80054d8:	e05b      	b.n	8005592 <TIM_SlaveTimer_SetConfig+0x10a>
 80054da:	2b60      	cmp	r3, #96	@ 0x60
 80054dc:	d04f      	beq.n	800557e <TIM_SlaveTimer_SetConfig+0xf6>
 80054de:	d858      	bhi.n	8005592 <TIM_SlaveTimer_SetConfig+0x10a>
 80054e0:	2b50      	cmp	r3, #80	@ 0x50
 80054e2:	d042      	beq.n	800556a <TIM_SlaveTimer_SetConfig+0xe2>
 80054e4:	d855      	bhi.n	8005592 <TIM_SlaveTimer_SetConfig+0x10a>
 80054e6:	2b40      	cmp	r3, #64	@ 0x40
 80054e8:	d016      	beq.n	8005518 <TIM_SlaveTimer_SetConfig+0x90>
 80054ea:	d852      	bhi.n	8005592 <TIM_SlaveTimer_SetConfig+0x10a>
 80054ec:	2b30      	cmp	r3, #48	@ 0x30
 80054ee:	d055      	beq.n	800559c <TIM_SlaveTimer_SetConfig+0x114>
 80054f0:	d84f      	bhi.n	8005592 <TIM_SlaveTimer_SetConfig+0x10a>
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d052      	beq.n	800559c <TIM_SlaveTimer_SetConfig+0x114>
 80054f6:	d84c      	bhi.n	8005592 <TIM_SlaveTimer_SetConfig+0x10a>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d04f      	beq.n	800559c <TIM_SlaveTimer_SetConfig+0x114>
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d04d      	beq.n	800559c <TIM_SlaveTimer_SetConfig+0x114>
 8005500:	e047      	b.n	8005592 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005512:	f000 f8cb 	bl	80056ac <TIM_ETR_SetConfig>
      break;
 8005516:	e042      	b.n	800559e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b05      	cmp	r3, #5
 800551e:	d101      	bne.n	8005524 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e03f      	b.n	80055a4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2101      	movs	r1, #1
 8005538:	438a      	bics	r2, r1
 800553a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	22f0      	movs	r2, #240	@ 0xf0
 8005548:	4393      	bics	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	621a      	str	r2, [r3, #32]
      break;
 8005568:	e019      	b.n	800559e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005576:	001a      	movs	r2, r3
 8005578:	f000 f81c 	bl	80055b4 <TIM_TI1_ConfigInputStage>
      break;
 800557c:	e00f      	b.n	800559e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800558a:	001a      	movs	r2, r3
 800558c:	f000 f840 	bl	8005610 <TIM_TI2_ConfigInputStage>
      break;
 8005590:	e005      	b.n	800559e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005592:	2317      	movs	r3, #23
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
      break;
 800559a:	e000      	b.n	800559e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800559c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800559e:	2317      	movs	r3, #23
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	781b      	ldrb	r3, [r3, #0]
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b006      	add	sp, #24
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	ffcfff8f 	.word	0xffcfff8f
 80055b0:	fffefff8 	.word	0xfffefff8

080055b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	2201      	movs	r2, #1
 80055cc:	4393      	bics	r3, r2
 80055ce:	001a      	movs	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	22f0      	movs	r2, #240	@ 0xf0
 80055de:	4393      	bics	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	220a      	movs	r2, #10
 80055f0:	4393      	bics	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	46c0      	nop			@ (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b006      	add	sp, #24
 800560e:	bd80      	pop	{r7, pc}

08005610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	2210      	movs	r2, #16
 8005628:	4393      	bics	r3, r2
 800562a:	001a      	movs	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4a0d      	ldr	r2, [pc, #52]	@ (8005670 <TIM_TI2_ConfigInputStage+0x60>)
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	22a0      	movs	r2, #160	@ 0xa0
 800564c:	4393      	bics	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	46bd      	mov	sp, r7
 800566a:	b006      	add	sp, #24
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	ffff0fff 	.word	0xffff0fff

08005674 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a08      	ldr	r2, [pc, #32]	@ (80056a8 <TIM_ITRx_SetConfig+0x34>)
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	2207      	movs	r2, #7
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	609a      	str	r2, [r3, #8]
}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	ffcfff8f 	.word	0xffcfff8f

080056ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4a09      	ldr	r2, [pc, #36]	@ (80056e8 <TIM_ETR_SetConfig+0x3c>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	021a      	lsls	r2, r3, #8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	609a      	str	r2, [r3, #8]
}
 80056e0:	46c0      	nop			@ (mov r8, r8)
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b006      	add	sp, #24
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	ffff00ff 	.word	0xffff00ff

080056ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	221f      	movs	r2, #31
 80056fc:	4013      	ands	r3, r2
 80056fe:	2201      	movs	r2, #1
 8005700:	409a      	lsls	r2, r3
 8005702:	0013      	movs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	43d2      	mvns	r2, r2
 800570e:	401a      	ands	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	211f      	movs	r1, #31
 800571c:	400b      	ands	r3, r1
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4099      	lsls	r1, r3
 8005722:	000b      	movs	r3, r1
 8005724:	431a      	orrs	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b006      	add	sp, #24
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	223c      	movs	r2, #60	@ 0x3c
 8005742:	5c9b      	ldrb	r3, [r3, r2]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e04a      	b.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	223c      	movs	r2, #60	@ 0x3c
 8005750:	2101      	movs	r1, #1
 8005752:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	223d      	movs	r2, #61	@ 0x3d
 8005758:	2102      	movs	r1, #2
 800575a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1e      	ldr	r2, [pc, #120]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a1d      	ldr	r2, [pc, #116]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800577a:	4013      	ands	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2270      	movs	r2, #112	@ 0x70
 800578c:	4393      	bics	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a11      	ldr	r2, [pc, #68]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a10      	ldr	r2, [pc, #64]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10c      	bne.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2280      	movs	r2, #128	@ 0x80
 80057ba:	4393      	bics	r3, r2
 80057bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	223d      	movs	r2, #61	@ 0x3d
 80057d4:	2101      	movs	r1, #1
 80057d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	223c      	movs	r2, #60	@ 0x3c
 80057dc:	2100      	movs	r1, #0
 80057de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b004      	add	sp, #16
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	ff0fffff 	.word	0xff0fffff
 80057f4:	40000400 	.word	0x40000400

080057f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	223c      	movs	r2, #60	@ 0x3c
 800580a:	5c9b      	ldrb	r3, [r3, r2]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005810:	2302      	movs	r3, #2
 8005812:	e06f      	b.n	80058f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	223c      	movs	r2, #60	@ 0x3c
 8005818:	2101      	movs	r1, #1
 800581a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	22ff      	movs	r2, #255	@ 0xff
 8005820:	4393      	bics	r3, r2
 8005822:	001a      	movs	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a33      	ldr	r2, [pc, #204]	@ (80058fc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005830:	401a      	ands	r2, r3
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a30      	ldr	r2, [pc, #192]	@ (8005900 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800583e:	401a      	ands	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a2e      	ldr	r2, [pc, #184]	@ (8005904 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800584c:	401a      	ands	r2, r3
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a2b      	ldr	r2, [pc, #172]	@ (8005908 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800585a:	401a      	ands	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a29      	ldr	r2, [pc, #164]	@ (800590c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005868:	401a      	ands	r2, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a26      	ldr	r2, [pc, #152]	@ (8005910 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005876:	401a      	ands	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a24      	ldr	r2, [pc, #144]	@ (8005914 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005884:	401a      	ands	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a21      	ldr	r2, [pc, #132]	@ (8005918 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005894:	401a      	ands	r2, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	@ (800591c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d11c      	bne.n	80058e2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005920 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80058ac:	401a      	ands	r2, r3
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	051b      	lsls	r3, r3, #20
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005924 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80058bc:	401a      	ands	r2, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80058ca:	401a      	ands	r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a15      	ldr	r2, [pc, #84]	@ (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80058d8:	401a      	ands	r2, r3
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	223c      	movs	r2, #60	@ 0x3c
 80058ee:	2100      	movs	r1, #0
 80058f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b004      	add	sp, #16
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	fffffcff 	.word	0xfffffcff
 8005900:	fffffbff 	.word	0xfffffbff
 8005904:	fffff7ff 	.word	0xfffff7ff
 8005908:	ffffefff 	.word	0xffffefff
 800590c:	ffffdfff 	.word	0xffffdfff
 8005910:	ffffbfff 	.word	0xffffbfff
 8005914:	fff0ffff 	.word	0xfff0ffff
 8005918:	efffffff 	.word	0xefffffff
 800591c:	40012c00 	.word	0x40012c00
 8005920:	ff0fffff 	.word	0xff0fffff
 8005924:	feffffff 	.word	0xfeffffff
 8005928:	fdffffff 	.word	0xfdffffff
 800592c:	dfffffff 	.word	0xdfffffff

08005930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005938:	46c0      	nop			@ (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005948:	46c0      	nop			@ (mov r8, r8)
 800594a:	46bd      	mov	sp, r7
 800594c:	b002      	add	sp, #8
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005958:	46c0      	nop			@ (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	b002      	add	sp, #8
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e046      	b.n	8005a00 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2288      	movs	r2, #136	@ 0x88
 8005976:	589b      	ldr	r3, [r3, r2]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2284      	movs	r2, #132	@ 0x84
 8005980:	2100      	movs	r1, #0
 8005982:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	0018      	movs	r0, r3
 8005988:	f7fc f826 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2288      	movs	r2, #136	@ 0x88
 8005990:	2124      	movs	r1, #36	@ 0x24
 8005992:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2101      	movs	r1, #1
 80059a0:	438a      	bics	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 fe42 	bl	8006638 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 fcd4 	bl	8006364 <UART_SetConfig>
 80059bc:	0003      	movs	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e01c      	b.n	8005a00 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	490d      	ldr	r1, [pc, #52]	@ (8005a08 <HAL_UART_Init+0xa8>)
 80059d2:	400a      	ands	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	212a      	movs	r1, #42	@ 0x2a
 80059e2:	438a      	bics	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	430a      	orrs	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	0018      	movs	r0, r3
 80059fa:	f000 fed1 	bl	80067a0 <UART_CheckIdleState>
 80059fe:	0003      	movs	r3, r0
}
 8005a00:	0018      	movs	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b002      	add	sp, #8
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	ffffb7ff 	.word	0xffffb7ff

08005a0c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e032      	b.n	8005a84 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2288      	movs	r2, #136	@ 0x88
 8005a22:	2124      	movs	r1, #36	@ 0x24
 8005a24:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2101      	movs	r1, #1
 8005a32:	438a      	bics	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7fc f887 	bl	8001b64 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2290      	movs	r2, #144	@ 0x90
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2288      	movs	r2, #136	@ 0x88
 8005a62:	2100      	movs	r1, #0
 8005a64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	228c      	movs	r2, #140	@ 0x8c
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2284      	movs	r2, #132	@ 0x84
 8005a7e:	2100      	movs	r1, #0
 8005a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	1dbb      	adds	r3, r7, #6
 8005a98:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2288      	movs	r2, #136	@ 0x88
 8005a9e:	589b      	ldr	r3, [r3, r2]
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d000      	beq.n	8005aa6 <HAL_UART_Transmit_DMA+0x1a>
 8005aa4:	e079      	b.n	8005b9a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_UART_Transmit_DMA+0x28>
 8005aac:	1dbb      	adds	r3, r7, #6
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e071      	b.n	8005b9c <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	2380      	movs	r3, #128	@ 0x80
 8005abe:	015b      	lsls	r3, r3, #5
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d109      	bne.n	8005ad8 <HAL_UART_Transmit_DMA+0x4c>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d001      	beq.n	8005ad8 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e061      	b.n	8005b9c <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1dba      	adds	r2, r7, #6
 8005ae2:	2154      	movs	r1, #84	@ 0x54
 8005ae4:	8812      	ldrh	r2, [r2, #0]
 8005ae6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	1dba      	adds	r2, r7, #6
 8005aec:	2156      	movs	r1, #86	@ 0x56
 8005aee:	8812      	ldrh	r2, [r2, #0]
 8005af0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2290      	movs	r2, #144	@ 0x90
 8005af6:	2100      	movs	r1, #0
 8005af8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2288      	movs	r2, #136	@ 0x88
 8005afe:	2121      	movs	r1, #33	@ 0x21
 8005b00:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d028      	beq.n	8005b5c <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b0e:	4a25      	ldr	r2, [pc, #148]	@ (8005ba4 <HAL_UART_Transmit_DMA+0x118>)
 8005b10:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b16:	4a24      	ldr	r2, [pc, #144]	@ (8005ba8 <HAL_UART_Transmit_DMA+0x11c>)
 8005b18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b1e:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <HAL_UART_Transmit_DMA+0x120>)
 8005b20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b26:	2200      	movs	r2, #0
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b32:	0019      	movs	r1, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3328      	adds	r3, #40	@ 0x28
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	1dbb      	adds	r3, r7, #6
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	f7fc fff6 	bl	8002b30 <HAL_DMA_Start_IT>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d009      	beq.n	8005b5c <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2290      	movs	r2, #144	@ 0x90
 8005b4c:	2110      	movs	r1, #16
 8005b4e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2288      	movs	r2, #136	@ 0x88
 8005b54:	2120      	movs	r1, #32
 8005b56:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e01f      	b.n	8005b9c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2240      	movs	r2, #64	@ 0x40
 8005b62:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b64:	f3ef 8310 	mrs	r3, PRIMASK
 8005b68:	613b      	str	r3, [r7, #16]
  return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			@ (mov r8, r8)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2180      	movs	r1, #128	@ 0x80
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f383 8810 	msr	PRIMASK, r3
}
 8005b94:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e000      	b.n	8005b9c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
  }
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b008      	add	sp, #32
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08006c6d 	.word	0x08006c6d
 8005ba8:	08006d05 	.word	0x08006d05
 8005bac:	08006e97 	.word	0x08006e97

08005bb0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	@ 0x30
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2288      	movs	r2, #136	@ 0x88
 8005bbc:	589b      	ldr	r3, [r3, r2]
 8005bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	228c      	movs	r2, #140	@ 0x8c
 8005bc4:	589b      	ldr	r3, [r3, r2]
 8005bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2280      	movs	r2, #128	@ 0x80
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b80      	cmp	r3, #128	@ 0x80
 8005bd4:	d138      	bne.n	8005c48 <HAL_UART_DMAStop+0x98>
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	2b21      	cmp	r3, #33	@ 0x21
 8005bda:	d135      	bne.n	8005c48 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005be0:	617b      	str	r3, [r7, #20]
  return(result);
 8005be2:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be6:	2301      	movs	r3, #1
 8005be8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f383 8810 	msr	PRIMASK, r3
}
 8005bf0:	46c0      	nop			@ (mov r8, r8)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2180      	movs	r1, #128	@ 0x80
 8005bfe:	438a      	bics	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f383 8810 	msr	PRIMASK, r3
}
 8005c0c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d014      	beq.n	8005c40 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f7fd f80e 	bl	8002c3c <HAL_DMA_Abort>
 8005c20:	1e03      	subs	r3, r0, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7fd f985 	bl	8002f38 <HAL_DMA_GetError>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d105      	bne.n	8005c40 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2290      	movs	r2, #144	@ 0x90
 8005c38:	2110      	movs	r1, #16
 8005c3a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e047      	b.n	8005cd0 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 ff6c 	bl	8006b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2240      	movs	r2, #64	@ 0x40
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b40      	cmp	r3, #64	@ 0x40
 8005c54:	d13b      	bne.n	8005cce <HAL_UART_DMAStop+0x11e>
 8005c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c58:	2b22      	cmp	r3, #34	@ 0x22
 8005c5a:	d138      	bne.n	8005cce <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c62:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c64:	623b      	str	r3, [r7, #32]
 8005c66:	2301      	movs	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f383 8810 	msr	PRIMASK, r3
}
 8005c70:	46c0      	nop			@ (mov r8, r8)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2140      	movs	r1, #64	@ 0x40
 8005c7e:	438a      	bics	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f383 8810 	msr	PRIMASK, r3
}
 8005c8c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2280      	movs	r2, #128	@ 0x80
 8005c92:	589b      	ldr	r3, [r3, r2]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d016      	beq.n	8005cc6 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2280      	movs	r2, #128	@ 0x80
 8005c9c:	589b      	ldr	r3, [r3, r2]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7fc ffcc 	bl	8002c3c <HAL_DMA_Abort>
 8005ca4:	1e03      	subs	r3, r0, #0
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2280      	movs	r2, #128	@ 0x80
 8005cac:	589b      	ldr	r3, [r3, r2]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7fd f942 	bl	8002f38 <HAL_DMA_GetError>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d105      	bne.n	8005cc6 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2290      	movs	r2, #144	@ 0x90
 8005cbe:	2110      	movs	r1, #16
 8005cc0:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e004      	b.n	8005cd0 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 ff69 	bl	8006ba0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b00c      	add	sp, #48	@ 0x30
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cd8:	b5b0      	push	{r4, r5, r7, lr}
 8005cda:	b0aa      	sub	sp, #168	@ 0xa8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	22a4      	movs	r2, #164	@ 0xa4
 8005ce8:	18b9      	adds	r1, r7, r2
 8005cea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	20a0      	movs	r0, #160	@ 0xa0
 8005cf4:	1839      	adds	r1, r7, r0
 8005cf6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	249c      	movs	r4, #156	@ 0x9c
 8005d00:	1939      	adds	r1, r7, r4
 8005d02:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d04:	0011      	movs	r1, r2
 8005d06:	18bb      	adds	r3, r7, r2
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4aa2      	ldr	r2, [pc, #648]	@ (8005f94 <HAL_UART_IRQHandler+0x2bc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2298      	movs	r2, #152	@ 0x98
 8005d10:	18bd      	adds	r5, r7, r2
 8005d12:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005d14:	18bb      	adds	r3, r7, r2
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d11a      	bne.n	8005d52 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2220      	movs	r2, #32
 8005d22:	4013      	ands	r3, r2
 8005d24:	d015      	beq.n	8005d52 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d26:	183b      	adds	r3, r7, r0
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d105      	bne.n	8005d3c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d30:	193b      	adds	r3, r7, r4
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	2380      	movs	r3, #128	@ 0x80
 8005d36:	055b      	lsls	r3, r3, #21
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d00a      	beq.n	8005d52 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d100      	bne.n	8005d46 <HAL_UART_IRQHandler+0x6e>
 8005d44:	e2dc      	b.n	8006300 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	0010      	movs	r0, r2
 8005d4e:	4798      	blx	r3
      }
      return;
 8005d50:	e2d6      	b.n	8006300 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d52:	2398      	movs	r3, #152	@ 0x98
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d100      	bne.n	8005d5e <HAL_UART_IRQHandler+0x86>
 8005d5c:	e122      	b.n	8005fa4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d5e:	239c      	movs	r3, #156	@ 0x9c
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a8c      	ldr	r2, [pc, #560]	@ (8005f98 <HAL_UART_IRQHandler+0x2c0>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	d106      	bne.n	8005d78 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d6a:	23a0      	movs	r3, #160	@ 0xa0
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a8a      	ldr	r2, [pc, #552]	@ (8005f9c <HAL_UART_IRQHandler+0x2c4>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	d100      	bne.n	8005d78 <HAL_UART_IRQHandler+0xa0>
 8005d76:	e115      	b.n	8005fa4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d78:	23a4      	movs	r3, #164	@ 0xa4
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4013      	ands	r3, r2
 8005d82:	d012      	beq.n	8005daa <HAL_UART_IRQHandler+0xd2>
 8005d84:	23a0      	movs	r3, #160	@ 0xa0
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	2380      	movs	r3, #128	@ 0x80
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d00b      	beq.n	8005daa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2290      	movs	r2, #144	@ 0x90
 8005d9e:	589b      	ldr	r3, [r3, r2]
 8005da0:	2201      	movs	r2, #1
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2190      	movs	r1, #144	@ 0x90
 8005da8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005daa:	23a4      	movs	r3, #164	@ 0xa4
 8005dac:	18fb      	adds	r3, r7, r3
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2202      	movs	r2, #2
 8005db2:	4013      	ands	r3, r2
 8005db4:	d011      	beq.n	8005dda <HAL_UART_IRQHandler+0x102>
 8005db6:	239c      	movs	r3, #156	@ 0x9c
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2290      	movs	r2, #144	@ 0x90
 8005dce:	589b      	ldr	r3, [r3, r2]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2190      	movs	r1, #144	@ 0x90
 8005dd8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dda:	23a4      	movs	r3, #164	@ 0xa4
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2204      	movs	r2, #4
 8005de2:	4013      	ands	r3, r2
 8005de4:	d011      	beq.n	8005e0a <HAL_UART_IRQHandler+0x132>
 8005de6:	239c      	movs	r3, #156	@ 0x9c
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2201      	movs	r2, #1
 8005dee:	4013      	ands	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2204      	movs	r2, #4
 8005df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2290      	movs	r2, #144	@ 0x90
 8005dfe:	589b      	ldr	r3, [r3, r2]
 8005e00:	2202      	movs	r2, #2
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2190      	movs	r1, #144	@ 0x90
 8005e08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e0a:	23a4      	movs	r3, #164	@ 0xa4
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4013      	ands	r3, r2
 8005e14:	d017      	beq.n	8005e46 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e16:	23a0      	movs	r3, #160	@ 0xa0
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d105      	bne.n	8005e2e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e22:	239c      	movs	r3, #156	@ 0x9c
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5b      	ldr	r2, [pc, #364]	@ (8005f98 <HAL_UART_IRQHandler+0x2c0>)
 8005e2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e2c:	d00b      	beq.n	8005e46 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2208      	movs	r2, #8
 8005e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2290      	movs	r2, #144	@ 0x90
 8005e3a:	589b      	ldr	r3, [r3, r2]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2190      	movs	r1, #144	@ 0x90
 8005e44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e46:	23a4      	movs	r3, #164	@ 0xa4
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	2380      	movs	r3, #128	@ 0x80
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	4013      	ands	r3, r2
 8005e52:	d013      	beq.n	8005e7c <HAL_UART_IRQHandler+0x1a4>
 8005e54:	23a0      	movs	r3, #160	@ 0xa0
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	2380      	movs	r3, #128	@ 0x80
 8005e5c:	04db      	lsls	r3, r3, #19
 8005e5e:	4013      	ands	r3, r2
 8005e60:	d00c      	beq.n	8005e7c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2280      	movs	r2, #128	@ 0x80
 8005e68:	0112      	lsls	r2, r2, #4
 8005e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2290      	movs	r2, #144	@ 0x90
 8005e70:	589b      	ldr	r3, [r3, r2]
 8005e72:	2220      	movs	r2, #32
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2190      	movs	r1, #144	@ 0x90
 8005e7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2290      	movs	r2, #144	@ 0x90
 8005e80:	589b      	ldr	r3, [r3, r2]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d100      	bne.n	8005e88 <HAL_UART_IRQHandler+0x1b0>
 8005e86:	e23d      	b.n	8006304 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e88:	23a4      	movs	r3, #164	@ 0xa4
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	4013      	ands	r3, r2
 8005e92:	d015      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e94:	23a0      	movs	r3, #160	@ 0xa0
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d106      	bne.n	8005eae <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ea0:	239c      	movs	r3, #156	@ 0x9c
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	2380      	movs	r3, #128	@ 0x80
 8005ea8:	055b      	lsls	r3, r3, #21
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d008      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2290      	movs	r2, #144	@ 0x90
 8005ec4:	589b      	ldr	r3, [r3, r2]
 8005ec6:	2194      	movs	r1, #148	@ 0x94
 8005ec8:	187a      	adds	r2, r7, r1
 8005eca:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2240      	movs	r2, #64	@ 0x40
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b40      	cmp	r3, #64	@ 0x40
 8005ed8:	d004      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2228      	movs	r2, #40	@ 0x28
 8005ee0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ee2:	d04c      	beq.n	8005f7e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 fe5a 	bl	8006ba0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2240      	movs	r2, #64	@ 0x40
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b40      	cmp	r3, #64	@ 0x40
 8005ef8:	d13c      	bne.n	8005f74 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005efa:	f3ef 8310 	mrs	r3, PRIMASK
 8005efe:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005f00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f02:	2090      	movs	r0, #144	@ 0x90
 8005f04:	183a      	adds	r2, r7, r0
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f0e:	f383 8810 	msr	PRIMASK, r3
}
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2140      	movs	r1, #64	@ 0x40
 8005f20:	438a      	bics	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	183b      	adds	r3, r7, r0
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f2c:	f383 8810 	msr	PRIMASK, r3
}
 8005f30:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2280      	movs	r2, #128	@ 0x80
 8005f36:	589b      	ldr	r3, [r3, r2]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d016      	beq.n	8005f6a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2280      	movs	r2, #128	@ 0x80
 8005f40:	589b      	ldr	r3, [r3, r2]
 8005f42:	4a17      	ldr	r2, [pc, #92]	@ (8005fa0 <HAL_UART_IRQHandler+0x2c8>)
 8005f44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2280      	movs	r2, #128	@ 0x80
 8005f4a:	589b      	ldr	r3, [r3, r2]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f7fc fed7 	bl	8002d00 <HAL_DMA_Abort_IT>
 8005f52:	1e03      	subs	r3, r0, #0
 8005f54:	d01c      	beq.n	8005f90 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2280      	movs	r2, #128	@ 0x80
 8005f5a:	589b      	ldr	r3, [r3, r2]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	2180      	movs	r1, #128	@ 0x80
 8005f62:	5852      	ldr	r2, [r2, r1]
 8005f64:	0010      	movs	r0, r2
 8005f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	e012      	b.n	8005f90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f000 f9f1 	bl	8006354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f72:	e00d      	b.n	8005f90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 f9ec 	bl	8006354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	e008      	b.n	8005f90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f9e7 	bl	8006354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2290      	movs	r2, #144	@ 0x90
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005f8e:	e1b9      	b.n	8006304 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f90:	46c0      	nop			@ (mov r8, r8)
    return;
 8005f92:	e1b7      	b.n	8006304 <HAL_UART_IRQHandler+0x62c>
 8005f94:	0000080f 	.word	0x0000080f
 8005f98:	10000001 	.word	0x10000001
 8005f9c:	04000120 	.word	0x04000120
 8005fa0:	08006f1d 	.word	0x08006f1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d000      	beq.n	8005fae <HAL_UART_IRQHandler+0x2d6>
 8005fac:	e13e      	b.n	800622c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fae:	23a4      	movs	r3, #164	@ 0xa4
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d100      	bne.n	8005fbc <HAL_UART_IRQHandler+0x2e4>
 8005fba:	e137      	b.n	800622c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fbc:	23a0      	movs	r3, #160	@ 0xa0
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d100      	bne.n	8005fca <HAL_UART_IRQHandler+0x2f2>
 8005fc8:	e130      	b.n	800622c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2240      	movs	r2, #64	@ 0x40
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	d000      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x30a>
 8005fe0:	e0a4      	b.n	800612c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2280      	movs	r2, #128	@ 0x80
 8005fe6:	589b      	ldr	r3, [r3, r2]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	217e      	movs	r1, #126	@ 0x7e
 8005fee:	187b      	adds	r3, r7, r1
 8005ff0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d100      	bne.n	8005ffc <HAL_UART_IRQHandler+0x324>
 8005ffa:	e185      	b.n	8006308 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	225c      	movs	r2, #92	@ 0x5c
 8006000:	5a9b      	ldrh	r3, [r3, r2]
 8006002:	187a      	adds	r2, r7, r1
 8006004:	8812      	ldrh	r2, [r2, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d300      	bcc.n	800600c <HAL_UART_IRQHandler+0x334>
 800600a:	e17d      	b.n	8006308 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	187a      	adds	r2, r7, r1
 8006010:	215e      	movs	r1, #94	@ 0x5e
 8006012:	8812      	ldrh	r2, [r2, #0]
 8006014:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2280      	movs	r2, #128	@ 0x80
 800601a:	589b      	ldr	r3, [r3, r2]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2220      	movs	r2, #32
 8006022:	4013      	ands	r3, r2
 8006024:	d170      	bne.n	8006108 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006026:	f3ef 8310 	mrs	r3, PRIMASK
 800602a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800602e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006030:	2301      	movs	r3, #1
 8006032:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	f383 8810 	msr	PRIMASK, r3
}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	49b4      	ldr	r1, [pc, #720]	@ (8006318 <HAL_UART_IRQHandler+0x640>)
 8006048:	400a      	ands	r2, r1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800604e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006052:	f383 8810 	msr	PRIMASK, r3
}
 8006056:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006058:	f3ef 8310 	mrs	r3, PRIMASK
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800605e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	677b      	str	r3, [r7, #116]	@ 0x74
 8006062:	2301      	movs	r3, #1
 8006064:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006068:	f383 8810 	msr	PRIMASK, r3
}
 800606c:	46c0      	nop			@ (mov r8, r8)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2101      	movs	r1, #1
 800607a:	438a      	bics	r2, r1
 800607c:	609a      	str	r2, [r3, #8]
 800607e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006084:	f383 8810 	msr	PRIMASK, r3
}
 8006088:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608a:	f3ef 8310 	mrs	r3, PRIMASK
 800608e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006092:	673b      	str	r3, [r7, #112]	@ 0x70
 8006094:	2301      	movs	r3, #1
 8006096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	46c0      	nop			@ (mov r8, r8)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2140      	movs	r1, #64	@ 0x40
 80060ac:	438a      	bics	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060b2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060b6:	f383 8810 	msr	PRIMASK, r3
}
 80060ba:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	228c      	movs	r2, #140	@ 0x8c
 80060c0:	2120      	movs	r1, #32
 80060c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ca:	f3ef 8310 	mrs	r3, PRIMASK
 80060ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80060d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060d4:	2301      	movs	r3, #1
 80060d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060da:	f383 8810 	msr	PRIMASK, r3
}
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2110      	movs	r1, #16
 80060ec:	438a      	bics	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060f6:	f383 8810 	msr	PRIMASK, r3
}
 80060fa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2280      	movs	r2, #128	@ 0x80
 8006100:	589b      	ldr	r3, [r3, r2]
 8006102:	0018      	movs	r0, r3
 8006104:	f7fc fd9a 	bl	8002c3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	225c      	movs	r2, #92	@ 0x5c
 8006112:	5a9a      	ldrh	r2, [r3, r2]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	215e      	movs	r1, #94	@ 0x5e
 8006118:	5a5b      	ldrh	r3, [r3, r1]
 800611a:	b29b      	uxth	r3, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	0011      	movs	r1, r2
 8006124:	0018      	movs	r0, r3
 8006126:	f7fa febf 	bl	8000ea8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800612a:	e0ed      	b.n	8006308 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	225c      	movs	r2, #92	@ 0x5c
 8006130:	5a99      	ldrh	r1, [r3, r2]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	225e      	movs	r2, #94	@ 0x5e
 8006136:	5a9b      	ldrh	r3, [r3, r2]
 8006138:	b29a      	uxth	r2, r3
 800613a:	208e      	movs	r0, #142	@ 0x8e
 800613c:	183b      	adds	r3, r7, r0
 800613e:	1a8a      	subs	r2, r1, r2
 8006140:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	225e      	movs	r2, #94	@ 0x5e
 8006146:	5a9b      	ldrh	r3, [r3, r2]
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d100      	bne.n	8006150 <HAL_UART_IRQHandler+0x478>
 800614e:	e0dd      	b.n	800630c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006150:	183b      	adds	r3, r7, r0
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d100      	bne.n	800615a <HAL_UART_IRQHandler+0x482>
 8006158:	e0d8      	b.n	800630c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615a:	f3ef 8310 	mrs	r3, PRIMASK
 800615e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006160:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006162:	2488      	movs	r4, #136	@ 0x88
 8006164:	193a      	adds	r2, r7, r4
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	2301      	movs	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f383 8810 	msr	PRIMASK, r3
}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4967      	ldr	r1, [pc, #412]	@ (800631c <HAL_UART_IRQHandler+0x644>)
 8006180:	400a      	ands	r2, r1
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	193b      	adds	r3, r7, r4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	61bb      	str	r3, [r7, #24]
  return(result);
 8006198:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800619a:	2484      	movs	r4, #132	@ 0x84
 800619c:	193a      	adds	r2, r7, r4
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	2301      	movs	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f383 8810 	msr	PRIMASK, r3
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	495a      	ldr	r1, [pc, #360]	@ (8006320 <HAL_UART_IRQHandler+0x648>)
 80061b8:	400a      	ands	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	193b      	adds	r3, r7, r4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	f383 8810 	msr	PRIMASK, r3
}
 80061c8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	228c      	movs	r2, #140	@ 0x8c
 80061ce:	2120      	movs	r1, #32
 80061d0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061de:	f3ef 8310 	mrs	r3, PRIMASK
 80061e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e6:	2480      	movs	r4, #128	@ 0x80
 80061e8:	193a      	adds	r2, r7, r4
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	2301      	movs	r3, #1
 80061ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	f383 8810 	msr	PRIMASK, r3
}
 80061f6:	46c0      	nop			@ (mov r8, r8)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2110      	movs	r1, #16
 8006204:	438a      	bics	r2, r1
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	193b      	adds	r3, r7, r4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	f383 8810 	msr	PRIMASK, r3
}
 8006214:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800621c:	183b      	adds	r3, r7, r0
 800621e:	881a      	ldrh	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	0011      	movs	r1, r2
 8006224:	0018      	movs	r0, r3
 8006226:	f7fa fe3f 	bl	8000ea8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800622a:	e06f      	b.n	800630c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800622c:	23a4      	movs	r3, #164	@ 0xa4
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	2380      	movs	r3, #128	@ 0x80
 8006234:	035b      	lsls	r3, r3, #13
 8006236:	4013      	ands	r3, r2
 8006238:	d010      	beq.n	800625c <HAL_UART_IRQHandler+0x584>
 800623a:	239c      	movs	r3, #156	@ 0x9c
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	2380      	movs	r3, #128	@ 0x80
 8006242:	03db      	lsls	r3, r3, #15
 8006244:	4013      	ands	r3, r2
 8006246:	d009      	beq.n	800625c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2280      	movs	r2, #128	@ 0x80
 800624e:	0352      	lsls	r2, r2, #13
 8006250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	0018      	movs	r0, r3
 8006256:	f000 fea4 	bl	8006fa2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800625a:	e05a      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800625c:	23a4      	movs	r3, #164	@ 0xa4
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2280      	movs	r2, #128	@ 0x80
 8006264:	4013      	ands	r3, r2
 8006266:	d016      	beq.n	8006296 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006268:	23a0      	movs	r3, #160	@ 0xa0
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2280      	movs	r2, #128	@ 0x80
 8006270:	4013      	ands	r3, r2
 8006272:	d106      	bne.n	8006282 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006274:	239c      	movs	r3, #156	@ 0x9c
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	2380      	movs	r3, #128	@ 0x80
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	4013      	ands	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006286:	2b00      	cmp	r3, #0
 8006288:	d042      	beq.n	8006310 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	0010      	movs	r0, r2
 8006292:	4798      	blx	r3
    }
    return;
 8006294:	e03c      	b.n	8006310 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006296:	23a4      	movs	r3, #164	@ 0xa4
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2240      	movs	r2, #64	@ 0x40
 800629e:	4013      	ands	r3, r2
 80062a0:	d00a      	beq.n	80062b8 <HAL_UART_IRQHandler+0x5e0>
 80062a2:	23a0      	movs	r3, #160	@ 0xa0
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2240      	movs	r2, #64	@ 0x40
 80062aa:	4013      	ands	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	0018      	movs	r0, r3
 80062b2:	f000 fe4a 	bl	8006f4a <UART_EndTransmit_IT>
    return;
 80062b6:	e02c      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062b8:	23a4      	movs	r3, #164	@ 0xa4
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	2380      	movs	r3, #128	@ 0x80
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	4013      	ands	r3, r2
 80062c4:	d00b      	beq.n	80062de <HAL_UART_IRQHandler+0x606>
 80062c6:	23a0      	movs	r3, #160	@ 0xa0
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	2380      	movs	r3, #128	@ 0x80
 80062ce:	05db      	lsls	r3, r3, #23
 80062d0:	4013      	ands	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f000 fe73 	bl	8006fc2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062dc:	e019      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80062de:	23a4      	movs	r3, #164	@ 0xa4
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	2380      	movs	r3, #128	@ 0x80
 80062e6:	045b      	lsls	r3, r3, #17
 80062e8:	4013      	ands	r3, r2
 80062ea:	d012      	beq.n	8006312 <HAL_UART_IRQHandler+0x63a>
 80062ec:	23a0      	movs	r3, #160	@ 0xa0
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da0d      	bge.n	8006312 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	0018      	movs	r0, r3
 80062fa:	f000 fe5a 	bl	8006fb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062fe:	e008      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
      return;
 8006300:	46c0      	nop			@ (mov r8, r8)
 8006302:	e006      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
    return;
 8006304:	46c0      	nop			@ (mov r8, r8)
 8006306:	e004      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
      return;
 8006308:	46c0      	nop			@ (mov r8, r8)
 800630a:	e002      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
      return;
 800630c:	46c0      	nop			@ (mov r8, r8)
 800630e:	e000      	b.n	8006312 <HAL_UART_IRQHandler+0x63a>
    return;
 8006310:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006312:	46bd      	mov	sp, r7
 8006314:	b02a      	add	sp, #168	@ 0xa8
 8006316:	bdb0      	pop	{r4, r5, r7, pc}
 8006318:	fffffeff 	.word	0xfffffeff
 800631c:	fffffedf 	.word	0xfffffedf
 8006320:	effffffe 	.word	0xeffffffe

08006324 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800632c:	46c0      	nop			@ (mov r8, r8)
 800632e:	46bd      	mov	sp, r7
 8006330:	b002      	add	sp, #8
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800633c:	46c0      	nop			@ (mov r8, r8)
 800633e:	46bd      	mov	sp, r7
 8006340:	b002      	add	sp, #8
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800634c:	46c0      	nop			@ (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b002      	add	sp, #8
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800635c:	46c0      	nop			@ (mov r8, r8)
 800635e:	46bd      	mov	sp, r7
 8006360:	b002      	add	sp, #8
 8006362:	bd80      	pop	{r7, pc}

08006364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800636c:	231a      	movs	r3, #26
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4313      	orrs	r3, r2
 800638a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4aa1      	ldr	r2, [pc, #644]	@ (8006618 <UART_SetConfig+0x2b4>)
 8006394:	4013      	ands	r3, r2
 8006396:	0019      	movs	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a9c      	ldr	r2, [pc, #624]	@ (800661c <UART_SetConfig+0x2b8>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	4a93      	ldr	r2, [pc, #588]	@ (8006620 <UART_SetConfig+0x2bc>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	0019      	movs	r1, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	430a      	orrs	r2, r1
 80063de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	220f      	movs	r2, #15
 80063e8:	4393      	bics	r3, r2
 80063ea:	0019      	movs	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a89      	ldr	r2, [pc, #548]	@ (8006624 <UART_SetConfig+0x2c0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d127      	bne.n	8006452 <UART_SetConfig+0xee>
 8006402:	4b89      	ldr	r3, [pc, #548]	@ (8006628 <UART_SetConfig+0x2c4>)
 8006404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006406:	2203      	movs	r2, #3
 8006408:	4013      	ands	r3, r2
 800640a:	2b03      	cmp	r3, #3
 800640c:	d017      	beq.n	800643e <UART_SetConfig+0xda>
 800640e:	d81b      	bhi.n	8006448 <UART_SetConfig+0xe4>
 8006410:	2b02      	cmp	r3, #2
 8006412:	d00a      	beq.n	800642a <UART_SetConfig+0xc6>
 8006414:	d818      	bhi.n	8006448 <UART_SetConfig+0xe4>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <UART_SetConfig+0xbc>
 800641a:	2b01      	cmp	r3, #1
 800641c:	d00a      	beq.n	8006434 <UART_SetConfig+0xd0>
 800641e:	e013      	b.n	8006448 <UART_SetConfig+0xe4>
 8006420:	231b      	movs	r3, #27
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e021      	b.n	800646e <UART_SetConfig+0x10a>
 800642a:	231b      	movs	r3, #27
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	2202      	movs	r2, #2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e01c      	b.n	800646e <UART_SetConfig+0x10a>
 8006434:	231b      	movs	r3, #27
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	2204      	movs	r2, #4
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	e017      	b.n	800646e <UART_SetConfig+0x10a>
 800643e:	231b      	movs	r3, #27
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	2208      	movs	r2, #8
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e012      	b.n	800646e <UART_SetConfig+0x10a>
 8006448:	231b      	movs	r3, #27
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	2210      	movs	r2, #16
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e00d      	b.n	800646e <UART_SetConfig+0x10a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a75      	ldr	r2, [pc, #468]	@ (800662c <UART_SetConfig+0x2c8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d104      	bne.n	8006466 <UART_SetConfig+0x102>
 800645c:	231b      	movs	r3, #27
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e003      	b.n	800646e <UART_SetConfig+0x10a>
 8006466:	231b      	movs	r3, #27
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2210      	movs	r2, #16
 800646c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	429a      	cmp	r2, r3
 8006478:	d000      	beq.n	800647c <UART_SetConfig+0x118>
 800647a:	e065      	b.n	8006548 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800647c:	231b      	movs	r3, #27
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b08      	cmp	r3, #8
 8006484:	d015      	beq.n	80064b2 <UART_SetConfig+0x14e>
 8006486:	dc18      	bgt.n	80064ba <UART_SetConfig+0x156>
 8006488:	2b04      	cmp	r3, #4
 800648a:	d00d      	beq.n	80064a8 <UART_SetConfig+0x144>
 800648c:	dc15      	bgt.n	80064ba <UART_SetConfig+0x156>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <UART_SetConfig+0x134>
 8006492:	2b02      	cmp	r3, #2
 8006494:	d005      	beq.n	80064a2 <UART_SetConfig+0x13e>
 8006496:	e010      	b.n	80064ba <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006498:	f7fd fe82 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 800649c:	0003      	movs	r3, r0
 800649e:	617b      	str	r3, [r7, #20]
        break;
 80064a0:	e012      	b.n	80064c8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a2:	4b63      	ldr	r3, [pc, #396]	@ (8006630 <UART_SetConfig+0x2cc>)
 80064a4:	617b      	str	r3, [r7, #20]
        break;
 80064a6:	e00f      	b.n	80064c8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a8:	f7fd fdee 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 80064ac:	0003      	movs	r3, r0
 80064ae:	617b      	str	r3, [r7, #20]
        break;
 80064b0:	e00a      	b.n	80064c8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	617b      	str	r3, [r7, #20]
        break;
 80064b8:	e006      	b.n	80064c8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064be:	231a      	movs	r3, #26
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
        break;
 80064c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d100      	bne.n	80064d0 <UART_SetConfig+0x16c>
 80064ce:	e08d      	b.n	80065ec <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064d4:	4b57      	ldr	r3, [pc, #348]	@ (8006634 <UART_SetConfig+0x2d0>)
 80064d6:	0052      	lsls	r2, r2, #1
 80064d8:	5ad3      	ldrh	r3, [r2, r3]
 80064da:	0019      	movs	r1, r3
 80064dc:	6978      	ldr	r0, [r7, #20]
 80064de:	f7f9 fe0f 	bl	8000100 <__udivsi3>
 80064e2:	0003      	movs	r3, r0
 80064e4:	005a      	lsls	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	18d2      	adds	r2, r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	0019      	movs	r1, r3
 80064f4:	0010      	movs	r0, r2
 80064f6:	f7f9 fe03 	bl	8000100 <__udivsi3>
 80064fa:	0003      	movs	r3, r0
 80064fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b0f      	cmp	r3, #15
 8006502:	d91c      	bls.n	800653e <UART_SetConfig+0x1da>
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	2380      	movs	r3, #128	@ 0x80
 8006508:	025b      	lsls	r3, r3, #9
 800650a:	429a      	cmp	r2, r3
 800650c:	d217      	bcs.n	800653e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	b29a      	uxth	r2, r3
 8006512:	200e      	movs	r0, #14
 8006514:	183b      	adds	r3, r7, r0
 8006516:	210f      	movs	r1, #15
 8006518:	438a      	bics	r2, r1
 800651a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	2207      	movs	r2, #7
 8006524:	4013      	ands	r3, r2
 8006526:	b299      	uxth	r1, r3
 8006528:	183b      	adds	r3, r7, r0
 800652a:	183a      	adds	r2, r7, r0
 800652c:	8812      	ldrh	r2, [r2, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	183a      	adds	r2, r7, r0
 8006538:	8812      	ldrh	r2, [r2, #0]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	e056      	b.n	80065ec <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800653e:	231a      	movs	r3, #26
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e051      	b.n	80065ec <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006548:	231b      	movs	r3, #27
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b08      	cmp	r3, #8
 8006550:	d015      	beq.n	800657e <UART_SetConfig+0x21a>
 8006552:	dc18      	bgt.n	8006586 <UART_SetConfig+0x222>
 8006554:	2b04      	cmp	r3, #4
 8006556:	d00d      	beq.n	8006574 <UART_SetConfig+0x210>
 8006558:	dc15      	bgt.n	8006586 <UART_SetConfig+0x222>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <UART_SetConfig+0x200>
 800655e:	2b02      	cmp	r3, #2
 8006560:	d005      	beq.n	800656e <UART_SetConfig+0x20a>
 8006562:	e010      	b.n	8006586 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006564:	f7fd fe1c 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 8006568:	0003      	movs	r3, r0
 800656a:	617b      	str	r3, [r7, #20]
        break;
 800656c:	e012      	b.n	8006594 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656e:	4b30      	ldr	r3, [pc, #192]	@ (8006630 <UART_SetConfig+0x2cc>)
 8006570:	617b      	str	r3, [r7, #20]
        break;
 8006572:	e00f      	b.n	8006594 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006574:	f7fd fd88 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8006578:	0003      	movs	r3, r0
 800657a:	617b      	str	r3, [r7, #20]
        break;
 800657c:	e00a      	b.n	8006594 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657e:	2380      	movs	r3, #128	@ 0x80
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	617b      	str	r3, [r7, #20]
        break;
 8006584:	e006      	b.n	8006594 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800658a:	231a      	movs	r3, #26
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	2201      	movs	r2, #1
 8006590:	701a      	strb	r2, [r3, #0]
        break;
 8006592:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d028      	beq.n	80065ec <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800659e:	4b25      	ldr	r3, [pc, #148]	@ (8006634 <UART_SetConfig+0x2d0>)
 80065a0:	0052      	lsls	r2, r2, #1
 80065a2:	5ad3      	ldrh	r3, [r2, r3]
 80065a4:	0019      	movs	r1, r3
 80065a6:	6978      	ldr	r0, [r7, #20]
 80065a8:	f7f9 fdaa 	bl	8000100 <__udivsi3>
 80065ac:	0003      	movs	r3, r0
 80065ae:	001a      	movs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	18d2      	adds	r2, r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	0019      	movs	r1, r3
 80065be:	0010      	movs	r0, r2
 80065c0:	f7f9 fd9e 	bl	8000100 <__udivsi3>
 80065c4:	0003      	movs	r3, r0
 80065c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b0f      	cmp	r3, #15
 80065cc:	d90a      	bls.n	80065e4 <UART_SetConfig+0x280>
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	025b      	lsls	r3, r3, #9
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d205      	bcs.n	80065e4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e003      	b.n	80065ec <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80065e4:	231a      	movs	r3, #26
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	2201      	movs	r2, #1
 80065ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	226a      	movs	r2, #106	@ 0x6a
 80065f0:	2101      	movs	r1, #1
 80065f2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2268      	movs	r2, #104	@ 0x68
 80065f8:	2101      	movs	r1, #1
 80065fa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006608:	231a      	movs	r3, #26
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	781b      	ldrb	r3, [r3, #0]
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b008      	add	sp, #32
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	cfff69f3 	.word	0xcfff69f3
 800661c:	ffffcfff 	.word	0xffffcfff
 8006620:	11fff4ff 	.word	0x11fff4ff
 8006624:	40013800 	.word	0x40013800
 8006628:	40021000 	.word	0x40021000
 800662c:	40004400 	.word	0x40004400
 8006630:	00f42400 	.word	0x00f42400
 8006634:	08007440 	.word	0x08007440

08006638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	2208      	movs	r2, #8
 8006646:	4013      	ands	r3, r2
 8006648:	d00b      	beq.n	8006662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4a4a      	ldr	r2, [pc, #296]	@ (800677c <UART_AdvFeatureConfig+0x144>)
 8006652:	4013      	ands	r3, r2
 8006654:	0019      	movs	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006666:	2201      	movs	r2, #1
 8006668:	4013      	ands	r3, r2
 800666a:	d00b      	beq.n	8006684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a43      	ldr	r2, [pc, #268]	@ (8006780 <UART_AdvFeatureConfig+0x148>)
 8006674:	4013      	ands	r3, r2
 8006676:	0019      	movs	r1, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	2202      	movs	r2, #2
 800668a:	4013      	ands	r3, r2
 800668c:	d00b      	beq.n	80066a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4a3b      	ldr	r2, [pc, #236]	@ (8006784 <UART_AdvFeatureConfig+0x14c>)
 8006696:	4013      	ands	r3, r2
 8006698:	0019      	movs	r1, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	2204      	movs	r2, #4
 80066ac:	4013      	ands	r3, r2
 80066ae:	d00b      	beq.n	80066c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4a34      	ldr	r2, [pc, #208]	@ (8006788 <UART_AdvFeatureConfig+0x150>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	0019      	movs	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066cc:	2210      	movs	r2, #16
 80066ce:	4013      	ands	r3, r2
 80066d0:	d00b      	beq.n	80066ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4a2c      	ldr	r2, [pc, #176]	@ (800678c <UART_AdvFeatureConfig+0x154>)
 80066da:	4013      	ands	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ee:	2220      	movs	r2, #32
 80066f0:	4013      	ands	r3, r2
 80066f2:	d00b      	beq.n	800670c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	4a25      	ldr	r2, [pc, #148]	@ (8006790 <UART_AdvFeatureConfig+0x158>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	0019      	movs	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006710:	2240      	movs	r2, #64	@ 0x40
 8006712:	4013      	ands	r3, r2
 8006714:	d01d      	beq.n	8006752 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4a1d      	ldr	r2, [pc, #116]	@ (8006794 <UART_AdvFeatureConfig+0x15c>)
 800671e:	4013      	ands	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	035b      	lsls	r3, r3, #13
 8006736:	429a      	cmp	r2, r3
 8006738:	d10b      	bne.n	8006752 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	4a15      	ldr	r2, [pc, #84]	@ (8006798 <UART_AdvFeatureConfig+0x160>)
 8006742:	4013      	ands	r3, r2
 8006744:	0019      	movs	r1, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006756:	2280      	movs	r2, #128	@ 0x80
 8006758:	4013      	ands	r3, r2
 800675a:	d00b      	beq.n	8006774 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	4a0e      	ldr	r2, [pc, #56]	@ (800679c <UART_AdvFeatureConfig+0x164>)
 8006764:	4013      	ands	r3, r2
 8006766:	0019      	movs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }
}
 8006774:	46c0      	nop			@ (mov r8, r8)
 8006776:	46bd      	mov	sp, r7
 8006778:	b002      	add	sp, #8
 800677a:	bd80      	pop	{r7, pc}
 800677c:	ffff7fff 	.word	0xffff7fff
 8006780:	fffdffff 	.word	0xfffdffff
 8006784:	fffeffff 	.word	0xfffeffff
 8006788:	fffbffff 	.word	0xfffbffff
 800678c:	ffffefff 	.word	0xffffefff
 8006790:	ffffdfff 	.word	0xffffdfff
 8006794:	ffefffff 	.word	0xffefffff
 8006798:	ff9fffff 	.word	0xff9fffff
 800679c:	fff7ffff 	.word	0xfff7ffff

080067a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b092      	sub	sp, #72	@ 0x48
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2290      	movs	r2, #144	@ 0x90
 80067ac:	2100      	movs	r1, #0
 80067ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067b0:	f7fb fb00 	bl	8001db4 <HAL_GetTick>
 80067b4:	0003      	movs	r3, r0
 80067b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2208      	movs	r2, #8
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d12d      	bne.n	8006822 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c8:	2280      	movs	r2, #128	@ 0x80
 80067ca:	0391      	lsls	r1, r2, #14
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4a47      	ldr	r2, [pc, #284]	@ (80068ec <UART_CheckIdleState+0x14c>)
 80067d0:	9200      	str	r2, [sp, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f000 f88e 	bl	80068f4 <UART_WaitOnFlagUntilTimeout>
 80067d8:	1e03      	subs	r3, r0, #0
 80067da:	d022      	beq.n	8006822 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067dc:	f3ef 8310 	mrs	r3, PRIMASK
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e6:	2301      	movs	r3, #1
 80067e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	f383 8810 	msr	PRIMASK, r3
}
 80067f0:	46c0      	nop			@ (mov r8, r8)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2180      	movs	r1, #128	@ 0x80
 80067fe:	438a      	bics	r2, r1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006808:	f383 8810 	msr	PRIMASK, r3
}
 800680c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2288      	movs	r2, #136	@ 0x88
 8006812:	2120      	movs	r1, #32
 8006814:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2284      	movs	r2, #132	@ 0x84
 800681a:	2100      	movs	r1, #0
 800681c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e060      	b.n	80068e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2204      	movs	r2, #4
 800682a:	4013      	ands	r3, r2
 800682c:	2b04      	cmp	r3, #4
 800682e:	d146      	bne.n	80068be <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006832:	2280      	movs	r2, #128	@ 0x80
 8006834:	03d1      	lsls	r1, r2, #15
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4a2c      	ldr	r2, [pc, #176]	@ (80068ec <UART_CheckIdleState+0x14c>)
 800683a:	9200      	str	r2, [sp, #0]
 800683c:	2200      	movs	r2, #0
 800683e:	f000 f859 	bl	80068f4 <UART_WaitOnFlagUntilTimeout>
 8006842:	1e03      	subs	r3, r0, #0
 8006844:	d03b      	beq.n	80068be <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006846:	f3ef 8310 	mrs	r3, PRIMASK
 800684a:	60fb      	str	r3, [r7, #12]
  return(result);
 800684c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006850:	2301      	movs	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f383 8810 	msr	PRIMASK, r3
}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4922      	ldr	r1, [pc, #136]	@ (80068f0 <UART_CheckIdleState+0x150>)
 8006868:	400a      	ands	r2, r1
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f383 8810 	msr	PRIMASK, r3
}
 8006876:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006878:	f3ef 8310 	mrs	r3, PRIMASK
 800687c:	61bb      	str	r3, [r7, #24]
  return(result);
 800687e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30
 8006882:	2301      	movs	r3, #1
 8006884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f383 8810 	msr	PRIMASK, r3
}
 800688c:	46c0      	nop			@ (mov r8, r8)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2101      	movs	r1, #1
 800689a:	438a      	bics	r2, r1
 800689c:	609a      	str	r2, [r3, #8]
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	f383 8810 	msr	PRIMASK, r3
}
 80068a8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	228c      	movs	r2, #140	@ 0x8c
 80068ae:	2120      	movs	r1, #32
 80068b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2284      	movs	r2, #132	@ 0x84
 80068b6:	2100      	movs	r1, #0
 80068b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e012      	b.n	80068e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2288      	movs	r2, #136	@ 0x88
 80068c2:	2120      	movs	r1, #32
 80068c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	228c      	movs	r2, #140	@ 0x8c
 80068ca:	2120      	movs	r1, #32
 80068cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2284      	movs	r2, #132	@ 0x84
 80068de:	2100      	movs	r1, #0
 80068e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b010      	add	sp, #64	@ 0x40
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	01ffffff 	.word	0x01ffffff
 80068f0:	fffffedf 	.word	0xfffffedf

080068f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	1dfb      	adds	r3, r7, #7
 8006902:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006904:	e051      	b.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	3301      	adds	r3, #1
 800690a:	d04e      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690c:	f7fb fa52 	bl	8001db4 <HAL_GetTick>
 8006910:	0002      	movs	r2, r0
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <UART_WaitOnFlagUntilTimeout+0x2e>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e051      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2204      	movs	r2, #4
 800692e:	4013      	ands	r3, r2
 8006930:	d03b      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b80      	cmp	r3, #128	@ 0x80
 8006936:	d038      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d035      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	2208      	movs	r2, #8
 8006946:	4013      	ands	r3, r2
 8006948:	2b08      	cmp	r3, #8
 800694a:	d111      	bne.n	8006970 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2208      	movs	r2, #8
 8006952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	0018      	movs	r0, r3
 8006958:	f000 f922 	bl	8006ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2290      	movs	r2, #144	@ 0x90
 8006960:	2108      	movs	r1, #8
 8006962:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2284      	movs	r2, #132	@ 0x84
 8006968:	2100      	movs	r1, #0
 800696a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e02c      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69da      	ldr	r2, [r3, #28]
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	401a      	ands	r2, r3
 800697c:	2380      	movs	r3, #128	@ 0x80
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	429a      	cmp	r2, r3
 8006982:	d112      	bne.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2280      	movs	r2, #128	@ 0x80
 800698a:	0112      	lsls	r2, r2, #4
 800698c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	0018      	movs	r0, r3
 8006992:	f000 f905 	bl	8006ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2290      	movs	r2, #144	@ 0x90
 800699a:	2120      	movs	r1, #32
 800699c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2284      	movs	r2, #132	@ 0x84
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e00f      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	4013      	ands	r3, r2
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	425a      	negs	r2, r3
 80069ba:	4153      	adcs	r3, r2
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	001a      	movs	r2, r3
 80069c0:	1dfb      	adds	r3, r7, #7
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d09e      	beq.n	8006906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	0018      	movs	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b004      	add	sp, #16
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b090      	sub	sp, #64	@ 0x40
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	1dbb      	adds	r3, r7, #6
 80069e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1dba      	adds	r2, r7, #6
 80069ec:	215c      	movs	r1, #92	@ 0x5c
 80069ee:	8812      	ldrh	r2, [r2, #0]
 80069f0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2290      	movs	r2, #144	@ 0x90
 80069f6:	2100      	movs	r1, #0
 80069f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	228c      	movs	r2, #140	@ 0x8c
 80069fe:	2122      	movs	r1, #34	@ 0x22
 8006a00:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2280      	movs	r2, #128	@ 0x80
 8006a06:	589b      	ldr	r3, [r3, r2]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d02d      	beq.n	8006a68 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2280      	movs	r2, #128	@ 0x80
 8006a10:	589b      	ldr	r3, [r3, r2]
 8006a12:	4a40      	ldr	r2, [pc, #256]	@ (8006b14 <UART_Start_Receive_DMA+0x140>)
 8006a14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2280      	movs	r2, #128	@ 0x80
 8006a1a:	589b      	ldr	r3, [r3, r2]
 8006a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8006b18 <UART_Start_Receive_DMA+0x144>)
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2280      	movs	r2, #128	@ 0x80
 8006a24:	589b      	ldr	r3, [r3, r2]
 8006a26:	4a3d      	ldr	r2, [pc, #244]	@ (8006b1c <UART_Start_Receive_DMA+0x148>)
 8006a28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2280      	movs	r2, #128	@ 0x80
 8006a2e:	589b      	ldr	r3, [r3, r2]
 8006a30:	2200      	movs	r2, #0
 8006a32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2280      	movs	r2, #128	@ 0x80
 8006a38:	5898      	ldr	r0, [r3, r2]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3324      	adds	r3, #36	@ 0x24
 8006a40:	0019      	movs	r1, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a46:	001a      	movs	r2, r3
 8006a48:	1dbb      	adds	r3, r7, #6
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	f7fc f870 	bl	8002b30 <HAL_DMA_Start_IT>
 8006a50:	1e03      	subs	r3, r0, #0
 8006a52:	d009      	beq.n	8006a68 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2290      	movs	r2, #144	@ 0x90
 8006a58:	2110      	movs	r1, #16
 8006a5a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	228c      	movs	r2, #140	@ 0x8c
 8006a60:	2120      	movs	r1, #32
 8006a62:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e050      	b.n	8006b0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d019      	beq.n	8006aa4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a70:	f3ef 8310 	mrs	r3, PRIMASK
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	f383 8810 	msr	PRIMASK, r3
}
 8006a84:	46c0      	nop			@ (mov r8, r8)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2180      	movs	r1, #128	@ 0x80
 8006a92:	0049      	lsls	r1, r1, #1
 8006a94:	430a      	orrs	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	f383 8810 	msr	PRIMASK, r3
}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa8:	613b      	str	r3, [r7, #16]
  return(result);
 8006aaa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f383 8810 	msr	PRIMASK, r3
}
 8006ab8:	46c0      	nop			@ (mov r8, r8)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f383 8810 	msr	PRIMASK, r3
}
 8006ad4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8006ada:	61fb      	str	r3, [r7, #28]
  return(result);
 8006adc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	f383 8810 	msr	PRIMASK, r3
}
 8006aea:	46c0      	nop			@ (mov r8, r8)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2140      	movs	r1, #64	@ 0x40
 8006af8:	430a      	orrs	r2, r1
 8006afa:	609a      	str	r2, [r3, #8]
 8006afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	f383 8810 	msr	PRIMASK, r3
}
 8006b06:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b010      	add	sp, #64	@ 0x40
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			@ (mov r8, r8)
 8006b14:	08006d25 	.word	0x08006d25
 8006b18:	08006e55 	.word	0x08006e55
 8006b1c:	08006e97 	.word	0x08006e97

08006b20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	@ 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b28:	f3ef 8310 	mrs	r3, PRIMASK
 8006b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b32:	2301      	movs	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f383 8810 	msr	PRIMASK, r3
}
 8006b3c:	46c0      	nop			@ (mov r8, r8)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	21c0      	movs	r1, #192	@ 0xc0
 8006b4a:	438a      	bics	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f383 8810 	msr	PRIMASK, r3
}
 8006b58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5e:	617b      	str	r3, [r7, #20]
  return(result);
 8006b60:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b62:	623b      	str	r3, [r7, #32]
 8006b64:	2301      	movs	r3, #1
 8006b66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f383 8810 	msr	PRIMASK, r3
}
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4908      	ldr	r1, [pc, #32]	@ (8006b9c <UART_EndTxTransfer+0x7c>)
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f383 8810 	msr	PRIMASK, r3
}
 8006b8a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2288      	movs	r2, #136	@ 0x88
 8006b90:	2120      	movs	r1, #32
 8006b92:	5099      	str	r1, [r3, r2]
}
 8006b94:	46c0      	nop			@ (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b00a      	add	sp, #40	@ 0x28
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	ff7fffff 	.word	0xff7fffff

08006ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08e      	sub	sp, #56	@ 0x38
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bac:	617b      	str	r3, [r7, #20]
  return(result);
 8006bae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f383 8810 	msr	PRIMASK, r3
}
 8006bbc:	46c0      	nop			@ (mov r8, r8)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4926      	ldr	r1, [pc, #152]	@ (8006c64 <UART_EndRxTransfer+0xc4>)
 8006bca:	400a      	ands	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f383 8810 	msr	PRIMASK, r3
}
 8006bd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bda:	f3ef 8310 	mrs	r3, PRIMASK
 8006bde:	623b      	str	r3, [r7, #32]
  return(result);
 8006be0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be4:	2301      	movs	r3, #1
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	f383 8810 	msr	PRIMASK, r3
}
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	491b      	ldr	r1, [pc, #108]	@ (8006c68 <UART_EndRxTransfer+0xc8>)
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	f383 8810 	msr	PRIMASK, r3
}
 8006c0a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d118      	bne.n	8006c46 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c14:	f3ef 8310 	mrs	r3, PRIMASK
 8006c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c1e:	2301      	movs	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f383 8810 	msr	PRIMASK, r3
}
 8006c28:	46c0      	nop			@ (mov r8, r8)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2110      	movs	r1, #16
 8006c36:	438a      	bics	r2, r1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f383 8810 	msr	PRIMASK, r3
}
 8006c44:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	228c      	movs	r2, #140	@ 0x8c
 8006c4a:	2120      	movs	r1, #32
 8006c4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c5a:	46c0      	nop			@ (mov r8, r8)
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	b00e      	add	sp, #56	@ 0x38
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	fffffedf 	.word	0xfffffedf
 8006c68:	effffffe 	.word	0xeffffffe

08006c6c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08c      	sub	sp, #48	@ 0x30
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2220      	movs	r2, #32
 8006c82:	4013      	ands	r3, r2
 8006c84:	d135      	bne.n	8006cf2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	2256      	movs	r2, #86	@ 0x56
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c94:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c98:	2301      	movs	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2180      	movs	r1, #128	@ 0x80
 8006cb0:	438a      	bics	r2, r1
 8006cb2:	609a      	str	r2, [r3, #8]
 8006cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f383 8810 	msr	PRIMASK, r3
}
 8006cbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cc6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cca:	2301      	movs	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f383 8810 	msr	PRIMASK, r3
}
 8006cd4:	46c0      	nop			@ (mov r8, r8)
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2140      	movs	r1, #64	@ 0x40
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	f383 8810 	msr	PRIMASK, r3
}
 8006cf0:	e004      	b.n	8006cfc <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f7fa f89b 	bl	8000e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cfa:	46c0      	nop			@ (mov r8, r8)
 8006cfc:	46c0      	nop			@ (mov r8, r8)
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	b00c      	add	sp, #48	@ 0x30
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f7ff fb05 	bl	8006324 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b004      	add	sp, #16
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b094      	sub	sp, #80	@ 0x50
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d16f      	bne.n	8006e1e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d40:	225e      	movs	r2, #94	@ 0x5e
 8006d42:	2100      	movs	r1, #0
 8006d44:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d46:	f3ef 8310 	mrs	r3, PRIMASK
 8006d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d4c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d50:	2301      	movs	r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f383 8810 	msr	PRIMASK, r3
}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	493a      	ldr	r1, [pc, #232]	@ (8006e50 <UART_DMAReceiveCplt+0x12c>)
 8006d68:	400a      	ands	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d78:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d82:	2301      	movs	r3, #1
 8006d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	f383 8810 	msr	PRIMASK, r3
}
 8006d8c:	46c0      	nop			@ (mov r8, r8)
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	438a      	bics	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006daa:	f3ef 8310 	mrs	r3, PRIMASK
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006db2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006db4:	2301      	movs	r3, #1
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dba:	f383 8810 	msr	PRIMASK, r3
}
 8006dbe:	46c0      	nop			@ (mov r8, r8)
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2140      	movs	r1, #64	@ 0x40
 8006dcc:	438a      	bics	r2, r1
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	f383 8810 	msr	PRIMASK, r3
}
 8006dda:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dde:	228c      	movs	r2, #140	@ 0x8c
 8006de0:	2120      	movs	r1, #32
 8006de2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d118      	bne.n	8006e1e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dec:	f3ef 8310 	mrs	r3, PRIMASK
 8006df0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006df2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df6:	2301      	movs	r3, #1
 8006df8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f383 8810 	msr	PRIMASK, r3
}
 8006e00:	46c0      	nop			@ (mov r8, r8)
 8006e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	438a      	bics	r2, r1
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f383 8810 	msr	PRIMASK, r3
}
 8006e1c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e20:	2200      	movs	r2, #0
 8006e22:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d108      	bne.n	8006e3e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e2e:	225c      	movs	r2, #92	@ 0x5c
 8006e30:	5a9a      	ldrh	r2, [r3, r2]
 8006e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e34:	0011      	movs	r1, r2
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7fa f836 	bl	8000ea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e3c:	e003      	b.n	8006e46 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e40:	0018      	movs	r0, r3
 8006e42:	f7ff fa77 	bl	8006334 <HAL_UART_RxCpltCallback>
}
 8006e46:	46c0      	nop			@ (mov r8, r8)
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	b014      	add	sp, #80	@ 0x50
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	46c0      	nop			@ (mov r8, r8)
 8006e50:	fffffeff 	.word	0xfffffeff

08006e54 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d10a      	bne.n	8006e86 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	225c      	movs	r2, #92	@ 0x5c
 8006e74:	5a9b      	ldrh	r3, [r3, r2]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	0011      	movs	r1, r2
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f7fa f812 	bl	8000ea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e84:	e003      	b.n	8006e8e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7ff fa5b 	bl	8006344 <HAL_UART_RxHalfCpltCallback>
}
 8006e8e:	46c0      	nop			@ (mov r8, r8)
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b004      	add	sp, #16
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2288      	movs	r2, #136	@ 0x88
 8006ea8:	589b      	ldr	r3, [r3, r2]
 8006eaa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	228c      	movs	r2, #140	@ 0x8c
 8006eb0:	589b      	ldr	r3, [r3, r2]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2280      	movs	r2, #128	@ 0x80
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b80      	cmp	r3, #128	@ 0x80
 8006ec0:	d10a      	bne.n	8006ed8 <UART_DMAError+0x42>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b21      	cmp	r3, #33	@ 0x21
 8006ec6:	d107      	bne.n	8006ed8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2256      	movs	r2, #86	@ 0x56
 8006ecc:	2100      	movs	r1, #0
 8006ece:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7ff fe24 	bl	8006b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2240      	movs	r2, #64	@ 0x40
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b40      	cmp	r3, #64	@ 0x40
 8006ee4:	d10a      	bne.n	8006efc <UART_DMAError+0x66>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b22      	cmp	r3, #34	@ 0x22
 8006eea:	d107      	bne.n	8006efc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	225e      	movs	r2, #94	@ 0x5e
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f7ff fe52 	bl	8006ba0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2290      	movs	r2, #144	@ 0x90
 8006f00:	589b      	ldr	r3, [r3, r2]
 8006f02:	2210      	movs	r2, #16
 8006f04:	431a      	orrs	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2190      	movs	r1, #144	@ 0x90
 8006f0a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7ff fa20 	bl	8006354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f14:	46c0      	nop			@ (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b006      	add	sp, #24
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	225e      	movs	r2, #94	@ 0x5e
 8006f2e:	2100      	movs	r1, #0
 8006f30:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2256      	movs	r2, #86	@ 0x56
 8006f36:	2100      	movs	r1, #0
 8006f38:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f7ff fa09 	bl	8006354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	46bd      	mov	sp, r7
 8006f46:	b004      	add	sp, #16
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f52:	f3ef 8310 	mrs	r3, PRIMASK
 8006f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f58:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f383 8810 	msr	PRIMASK, r3
}
 8006f66:	46c0      	nop			@ (mov r8, r8)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2140      	movs	r1, #64	@ 0x40
 8006f74:	438a      	bics	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f383 8810 	msr	PRIMASK, r3
}
 8006f82:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2288      	movs	r2, #136	@ 0x88
 8006f88:	2120      	movs	r1, #32
 8006f8a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	0018      	movs	r0, r3
 8006f96:	f7f9 ff4b 	bl	8000e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f9a:	46c0      	nop			@ (mov r8, r8)
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	b006      	add	sp, #24
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006faa:	46c0      	nop			@ (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b002      	add	sp, #8
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006fba:	46c0      	nop			@ (mov r8, r8)
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b002      	add	sp, #8
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b002      	add	sp, #8
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2284      	movs	r2, #132	@ 0x84
 8006fe0:	5c9b      	ldrb	r3, [r3, r2]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_UARTEx_DisableFifoMode+0x16>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e027      	b.n	800703a <HAL_UARTEx_DisableFifoMode+0x66>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2284      	movs	r2, #132	@ 0x84
 8006fee:	2101      	movs	r1, #1
 8006ff0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2288      	movs	r2, #136	@ 0x88
 8006ff6:	2124      	movs	r1, #36	@ 0x24
 8006ff8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2101      	movs	r1, #1
 800700e:	438a      	bics	r2, r1
 8007010:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a0b      	ldr	r2, [pc, #44]	@ (8007044 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007016:	4013      	ands	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2288      	movs	r2, #136	@ 0x88
 800702c:	2120      	movs	r1, #32
 800702e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2284      	movs	r2, #132	@ 0x84
 8007034:	2100      	movs	r1, #0
 8007036:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b004      	add	sp, #16
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	dfffffff 	.word	0xdfffffff

08007048 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2284      	movs	r2, #132	@ 0x84
 8007056:	5c9b      	ldrb	r3, [r3, r2]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e02e      	b.n	80070be <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2284      	movs	r2, #132	@ 0x84
 8007064:	2101      	movs	r1, #1
 8007066:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2288      	movs	r2, #136	@ 0x88
 800706c:	2124      	movs	r1, #36	@ 0x24
 800706e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2101      	movs	r1, #1
 8007084:	438a      	bics	r2, r1
 8007086:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	08d9      	lsrs	r1, r3, #3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	0018      	movs	r0, r3
 80070a0:	f000 f8bc 	bl	800721c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2288      	movs	r2, #136	@ 0x88
 80070b0:	2120      	movs	r1, #32
 80070b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2284      	movs	r2, #132	@ 0x84
 80070b8:	2100      	movs	r1, #0
 80070ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b004      	add	sp, #16
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2284      	movs	r2, #132	@ 0x84
 80070d6:	5c9b      	ldrb	r3, [r3, r2]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070dc:	2302      	movs	r3, #2
 80070de:	e02f      	b.n	8007140 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2284      	movs	r2, #132	@ 0x84
 80070e4:	2101      	movs	r1, #1
 80070e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2288      	movs	r2, #136	@ 0x88
 80070ec:	2124      	movs	r1, #36	@ 0x24
 80070ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2101      	movs	r1, #1
 8007104:	438a      	bics	r2, r1
 8007106:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	4a0e      	ldr	r2, [pc, #56]	@ (8007148 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007110:	4013      	ands	r3, r2
 8007112:	0019      	movs	r1, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	0018      	movs	r0, r3
 8007122:	f000 f87b 	bl	800721c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2288      	movs	r2, #136	@ 0x88
 8007132:	2120      	movs	r1, #32
 8007134:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2284      	movs	r2, #132	@ 0x84
 800713a:	2100      	movs	r1, #0
 800713c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b004      	add	sp, #16
 8007146:	bd80      	pop	{r7, pc}
 8007148:	f1ffffff 	.word	0xf1ffffff

0800714c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800714c:	b5b0      	push	{r4, r5, r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	1dbb      	adds	r3, r7, #6
 8007158:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	228c      	movs	r2, #140	@ 0x8c
 800715e:	589b      	ldr	r3, [r3, r2]
 8007160:	2b20      	cmp	r3, #32
 8007162:	d156      	bne.n	8007212 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800716a:	1dbb      	adds	r3, r7, #6
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e04e      	b.n	8007214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	2380      	movs	r3, #128	@ 0x80
 800717c:	015b      	lsls	r3, r3, #5
 800717e:	429a      	cmp	r2, r3
 8007180:	d109      	bne.n	8007196 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2201      	movs	r2, #1
 800718e:	4013      	ands	r3, r2
 8007190:	d001      	beq.n	8007196 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e03e      	b.n	8007214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2201      	movs	r2, #1
 800719a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80071a2:	2527      	movs	r5, #39	@ 0x27
 80071a4:	197c      	adds	r4, r7, r5
 80071a6:	1dbb      	adds	r3, r7, #6
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0018      	movs	r0, r3
 80071b0:	f7ff fc10 	bl	80069d4 <UART_Start_Receive_DMA>
 80071b4:	0003      	movs	r3, r0
 80071b6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80071b8:	197b      	adds	r3, r7, r5
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d124      	bne.n	800720a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d11c      	bne.n	8007202 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2210      	movs	r2, #16
 80071ce:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d0:	f3ef 8310 	mrs	r3, PRIMASK
 80071d4:	617b      	str	r3, [r7, #20]
  return(result);
 80071d6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	2301      	movs	r3, #1
 80071dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	f383 8810 	msr	PRIMASK, r3
}
 80071e4:	46c0      	nop			@ (mov r8, r8)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2110      	movs	r1, #16
 80071f2:	430a      	orrs	r2, r1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f383 8810 	msr	PRIMASK, r3
}
 8007200:	e003      	b.n	800720a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007202:	2327      	movs	r3, #39	@ 0x27
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800720a:	2327      	movs	r3, #39	@ 0x27
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	e000      	b.n	8007214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	0018      	movs	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	b00a      	add	sp, #40	@ 0x28
 800721a:	bdb0      	pop	{r4, r5, r7, pc}

0800721c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800721c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	226a      	movs	r2, #106	@ 0x6a
 8007230:	2101      	movs	r1, #1
 8007232:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2268      	movs	r2, #104	@ 0x68
 8007238:	2101      	movs	r1, #1
 800723a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800723c:	e043      	b.n	80072c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800723e:	260f      	movs	r6, #15
 8007240:	19bb      	adds	r3, r7, r6
 8007242:	2208      	movs	r2, #8
 8007244:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007246:	200e      	movs	r0, #14
 8007248:	183b      	adds	r3, r7, r0
 800724a:	2208      	movs	r2, #8
 800724c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	0e5b      	lsrs	r3, r3, #25
 8007256:	b2da      	uxtb	r2, r3
 8007258:	240d      	movs	r4, #13
 800725a:	193b      	adds	r3, r7, r4
 800725c:	2107      	movs	r1, #7
 800725e:	400a      	ands	r2, r1
 8007260:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	0f5b      	lsrs	r3, r3, #29
 800726a:	b2da      	uxtb	r2, r3
 800726c:	250c      	movs	r5, #12
 800726e:	197b      	adds	r3, r7, r5
 8007270:	2107      	movs	r1, #7
 8007272:	400a      	ands	r2, r1
 8007274:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007276:	183b      	adds	r3, r7, r0
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	197a      	adds	r2, r7, r5
 800727c:	7812      	ldrb	r2, [r2, #0]
 800727e:	4914      	ldr	r1, [pc, #80]	@ (80072d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007280:	5c8a      	ldrb	r2, [r1, r2]
 8007282:	435a      	muls	r2, r3
 8007284:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007286:	197b      	adds	r3, r7, r5
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	4a12      	ldr	r2, [pc, #72]	@ (80072d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800728c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800728e:	0019      	movs	r1, r3
 8007290:	f7f8 ffc0 	bl	8000214 <__divsi3>
 8007294:	0003      	movs	r3, r0
 8007296:	b299      	uxth	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	226a      	movs	r2, #106	@ 0x6a
 800729c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800729e:	19bb      	adds	r3, r7, r6
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	193a      	adds	r2, r7, r4
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	490a      	ldr	r1, [pc, #40]	@ (80072d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80072a8:	5c8a      	ldrb	r2, [r1, r2]
 80072aa:	435a      	muls	r2, r3
 80072ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80072ae:	193b      	adds	r3, r7, r4
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	4a08      	ldr	r2, [pc, #32]	@ (80072d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80072b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072b6:	0019      	movs	r1, r3
 80072b8:	f7f8 ffac 	bl	8000214 <__divsi3>
 80072bc:	0003      	movs	r3, r0
 80072be:	b299      	uxth	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2268      	movs	r2, #104	@ 0x68
 80072c4:	5299      	strh	r1, [r3, r2]
}
 80072c6:	46c0      	nop			@ (mov r8, r8)
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b005      	add	sp, #20
 80072cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ce:	46c0      	nop			@ (mov r8, r8)
 80072d0:	08007458 	.word	0x08007458
 80072d4:	08007460 	.word	0x08007460

080072d8 <memset>:
 80072d8:	0003      	movs	r3, r0
 80072da:	1882      	adds	r2, r0, r2
 80072dc:	4293      	cmp	r3, r2
 80072de:	d100      	bne.n	80072e2 <memset+0xa>
 80072e0:	4770      	bx	lr
 80072e2:	7019      	strb	r1, [r3, #0]
 80072e4:	3301      	adds	r3, #1
 80072e6:	e7f9      	b.n	80072dc <memset+0x4>

080072e8 <__libc_init_array>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	2600      	movs	r6, #0
 80072ec:	4c0c      	ldr	r4, [pc, #48]	@ (8007320 <__libc_init_array+0x38>)
 80072ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007324 <__libc_init_array+0x3c>)
 80072f0:	1b64      	subs	r4, r4, r5
 80072f2:	10a4      	asrs	r4, r4, #2
 80072f4:	42a6      	cmp	r6, r4
 80072f6:	d109      	bne.n	800730c <__libc_init_array+0x24>
 80072f8:	2600      	movs	r6, #0
 80072fa:	f000 f819 	bl	8007330 <_init>
 80072fe:	4c0a      	ldr	r4, [pc, #40]	@ (8007328 <__libc_init_array+0x40>)
 8007300:	4d0a      	ldr	r5, [pc, #40]	@ (800732c <__libc_init_array+0x44>)
 8007302:	1b64      	subs	r4, r4, r5
 8007304:	10a4      	asrs	r4, r4, #2
 8007306:	42a6      	cmp	r6, r4
 8007308:	d105      	bne.n	8007316 <__libc_init_array+0x2e>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	00b3      	lsls	r3, r6, #2
 800730e:	58eb      	ldr	r3, [r5, r3]
 8007310:	4798      	blx	r3
 8007312:	3601      	adds	r6, #1
 8007314:	e7ee      	b.n	80072f4 <__libc_init_array+0xc>
 8007316:	00b3      	lsls	r3, r6, #2
 8007318:	58eb      	ldr	r3, [r5, r3]
 800731a:	4798      	blx	r3
 800731c:	3601      	adds	r6, #1
 800731e:	e7f2      	b.n	8007306 <__libc_init_array+0x1e>
 8007320:	08007468 	.word	0x08007468
 8007324:	08007468 	.word	0x08007468
 8007328:	0800746c 	.word	0x0800746c
 800732c:	08007468 	.word	0x08007468

08007330 <_init>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	46c0      	nop			@ (mov r8, r8)
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr

0800733c <_fini>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	46c0      	nop			@ (mov r8, r8)
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr
