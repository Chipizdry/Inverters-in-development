
PWM_SG_2535_Full_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006edc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006f94  08006f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007134  08007134  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007134  08007134  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007134  08007134  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007134  08007134  00008134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007138  08007138  00008138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800713c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000060  0800719c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800719c  0000971c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2a1  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035e8  00000000  00000000  00025329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cc2c  00000000  00000000  00028911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00035540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f42  00000000  00000000  00036520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017711  00000000  00000000  00037462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1a7  00000000  00000000  0004eb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094b2e  00000000  00000000  0006ad1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff848  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fb0  00000000  00000000  000ff88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0010283c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000060 	.word	0x20000060
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006f7c 	.word	0x08006f7c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000064 	.word	0x20000064
 80000fc:	08006f7c 	.word	0x08006f7c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fbc9 	bl	8000b8c <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 fb51 	bl	8000aac <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fbbb 	bl	8000b8c <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fbb1 	bl	8000b8c <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb5f 	bl	8000afc <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fb55 	bl	8000afc <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__aeabi_d2uiz>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	2200      	movs	r2, #0
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <__aeabi_d2uiz+0x38>)
 8000466:	0004      	movs	r4, r0
 8000468:	000d      	movs	r5, r1
 800046a:	f001 ffa9 	bl	80023c0 <__aeabi_dcmpge>
 800046e:	2800      	cmp	r0, #0
 8000470:	d104      	bne.n	800047c <__aeabi_d2uiz+0x1c>
 8000472:	0020      	movs	r0, r4
 8000474:	0029      	movs	r1, r5
 8000476:	f001 ff05 	bl	8002284 <__aeabi_d2iz>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <__aeabi_d2uiz+0x38>)
 800047e:	2200      	movs	r2, #0
 8000480:	0020      	movs	r0, r4
 8000482:	0029      	movs	r1, r5
 8000484:	f001 faf4 	bl	8001a70 <__aeabi_dsub>
 8000488:	f001 fefc 	bl	8002284 <__aeabi_d2iz>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	061b      	lsls	r3, r3, #24
 8000490:	469c      	mov	ip, r3
 8000492:	4460      	add	r0, ip
 8000494:	e7f1      	b.n	800047a <__aeabi_d2uiz+0x1a>
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	41e00000 	.word	0x41e00000

0800049c <__aeabi_fadd>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	024b      	lsls	r3, r1, #9
 80004a0:	0a5a      	lsrs	r2, r3, #9
 80004a2:	4694      	mov	ip, r2
 80004a4:	004a      	lsls	r2, r1, #1
 80004a6:	0fc9      	lsrs	r1, r1, #31
 80004a8:	46ce      	mov	lr, r9
 80004aa:	4647      	mov	r7, r8
 80004ac:	4689      	mov	r9, r1
 80004ae:	0045      	lsls	r5, r0, #1
 80004b0:	0246      	lsls	r6, r0, #9
 80004b2:	0e2d      	lsrs	r5, r5, #24
 80004b4:	0e12      	lsrs	r2, r2, #24
 80004b6:	b580      	push	{r7, lr}
 80004b8:	0999      	lsrs	r1, r3, #6
 80004ba:	0a77      	lsrs	r7, r6, #9
 80004bc:	0fc4      	lsrs	r4, r0, #31
 80004be:	09b6      	lsrs	r6, r6, #6
 80004c0:	1aab      	subs	r3, r5, r2
 80004c2:	454c      	cmp	r4, r9
 80004c4:	d020      	beq.n	8000508 <__aeabi_fadd+0x6c>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dd0c      	ble.n	80004e4 <__aeabi_fadd+0x48>
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d134      	bne.n	8000538 <__aeabi_fadd+0x9c>
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d02a      	beq.n	8000528 <__aeabi_fadd+0x8c>
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d100      	bne.n	80004da <__aeabi_fadd+0x3e>
 80004d8:	e08f      	b.n	80005fa <__aeabi_fadd+0x15e>
 80004da:	2bff      	cmp	r3, #255	@ 0xff
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x44>
 80004de:	e0cd      	b.n	800067c <__aeabi_fadd+0x1e0>
 80004e0:	0013      	movs	r3, r2
 80004e2:	e02f      	b.n	8000544 <__aeabi_fadd+0xa8>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d060      	beq.n	80005aa <__aeabi_fadd+0x10e>
 80004e8:	1b53      	subs	r3, r2, r5
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fadd+0x54>
 80004ee:	e0ee      	b.n	80006ce <__aeabi_fadd+0x232>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0x5a>
 80004f4:	e13e      	b.n	8000774 <__aeabi_fadd+0x2d8>
 80004f6:	1e5c      	subs	r4, r3, #1
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0x62>
 80004fc:	e16b      	b.n	80007d6 <__aeabi_fadd+0x33a>
 80004fe:	2bff      	cmp	r3, #255	@ 0xff
 8000500:	d100      	bne.n	8000504 <__aeabi_fadd+0x68>
 8000502:	e0b9      	b.n	8000678 <__aeabi_fadd+0x1dc>
 8000504:	0023      	movs	r3, r4
 8000506:	e0e7      	b.n	80006d8 <__aeabi_fadd+0x23c>
 8000508:	2b00      	cmp	r3, #0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fadd+0x72>
 800050c:	e0a4      	b.n	8000658 <__aeabi_fadd+0x1bc>
 800050e:	2a00      	cmp	r2, #0
 8000510:	d069      	beq.n	80005e6 <__aeabi_fadd+0x14a>
 8000512:	2dff      	cmp	r5, #255	@ 0xff
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x7c>
 8000516:	e0b1      	b.n	800067c <__aeabi_fadd+0x1e0>
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	04d2      	lsls	r2, r2, #19
 800051c:	4311      	orrs	r1, r2
 800051e:	2b1b      	cmp	r3, #27
 8000520:	dc00      	bgt.n	8000524 <__aeabi_fadd+0x88>
 8000522:	e0e9      	b.n	80006f8 <__aeabi_fadd+0x25c>
 8000524:	002b      	movs	r3, r5
 8000526:	3605      	adds	r6, #5
 8000528:	08f7      	lsrs	r7, r6, #3
 800052a:	2bff      	cmp	r3, #255	@ 0xff
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x94>
 800052e:	e0a5      	b.n	800067c <__aeabi_fadd+0x1e0>
 8000530:	027a      	lsls	r2, r7, #9
 8000532:	0a52      	lsrs	r2, r2, #9
 8000534:	b2d8      	uxtb	r0, r3
 8000536:	e030      	b.n	800059a <__aeabi_fadd+0xfe>
 8000538:	2dff      	cmp	r5, #255	@ 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0xa2>
 800053c:	e09e      	b.n	800067c <__aeabi_fadd+0x1e0>
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	04d2      	lsls	r2, r2, #19
 8000542:	4311      	orrs	r1, r2
 8000544:	2001      	movs	r0, #1
 8000546:	2b1b      	cmp	r3, #27
 8000548:	dc08      	bgt.n	800055c <__aeabi_fadd+0xc0>
 800054a:	0008      	movs	r0, r1
 800054c:	2220      	movs	r2, #32
 800054e:	40d8      	lsrs	r0, r3
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	4099      	lsls	r1, r3
 8000554:	000b      	movs	r3, r1
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	4193      	sbcs	r3, r2
 800055a:	4318      	orrs	r0, r3
 800055c:	1a36      	subs	r6, r6, r0
 800055e:	0173      	lsls	r3, r6, #5
 8000560:	d400      	bmi.n	8000564 <__aeabi_fadd+0xc8>
 8000562:	e071      	b.n	8000648 <__aeabi_fadd+0x1ac>
 8000564:	01b6      	lsls	r6, r6, #6
 8000566:	09b7      	lsrs	r7, r6, #6
 8000568:	0038      	movs	r0, r7
 800056a:	f001 ff33 	bl	80023d4 <__clzsi2>
 800056e:	003b      	movs	r3, r7
 8000570:	3805      	subs	r0, #5
 8000572:	4083      	lsls	r3, r0
 8000574:	4285      	cmp	r5, r0
 8000576:	dd4d      	ble.n	8000614 <__aeabi_fadd+0x178>
 8000578:	4eb4      	ldr	r6, [pc, #720]	@ (800084c <__aeabi_fadd+0x3b0>)
 800057a:	1a2d      	subs	r5, r5, r0
 800057c:	401e      	ands	r6, r3
 800057e:	075a      	lsls	r2, r3, #29
 8000580:	d068      	beq.n	8000654 <__aeabi_fadd+0x1b8>
 8000582:	220f      	movs	r2, #15
 8000584:	4013      	ands	r3, r2
 8000586:	2b04      	cmp	r3, #4
 8000588:	d064      	beq.n	8000654 <__aeabi_fadd+0x1b8>
 800058a:	3604      	adds	r6, #4
 800058c:	0173      	lsls	r3, r6, #5
 800058e:	d561      	bpl.n	8000654 <__aeabi_fadd+0x1b8>
 8000590:	1c68      	adds	r0, r5, #1
 8000592:	2dfe      	cmp	r5, #254	@ 0xfe
 8000594:	d154      	bne.n	8000640 <__aeabi_fadd+0x1a4>
 8000596:	20ff      	movs	r0, #255	@ 0xff
 8000598:	2200      	movs	r2, #0
 800059a:	05c0      	lsls	r0, r0, #23
 800059c:	4310      	orrs	r0, r2
 800059e:	07e4      	lsls	r4, r4, #31
 80005a0:	4320      	orrs	r0, r4
 80005a2:	bcc0      	pop	{r6, r7}
 80005a4:	46b9      	mov	r9, r7
 80005a6:	46b0      	mov	r8, r6
 80005a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005aa:	22fe      	movs	r2, #254	@ 0xfe
 80005ac:	4690      	mov	r8, r2
 80005ae:	1c68      	adds	r0, r5, #1
 80005b0:	0002      	movs	r2, r0
 80005b2:	4640      	mov	r0, r8
 80005b4:	4210      	tst	r0, r2
 80005b6:	d16b      	bne.n	8000690 <__aeabi_fadd+0x1f4>
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_fadd+0x122>
 80005bc:	e0dd      	b.n	800077a <__aeabi_fadd+0x2de>
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x128>
 80005c2:	e102      	b.n	80007ca <__aeabi_fadd+0x32e>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	d0b3      	beq.n	8000530 <__aeabi_fadd+0x94>
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	1a77      	subs	r7, r6, r1
 80005cc:	04d2      	lsls	r2, r2, #19
 80005ce:	4217      	tst	r7, r2
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fadd+0x138>
 80005d2:	e136      	b.n	8000842 <__aeabi_fadd+0x3a6>
 80005d4:	464c      	mov	r4, r9
 80005d6:	1b8e      	subs	r6, r1, r6
 80005d8:	d061      	beq.n	800069e <__aeabi_fadd+0x202>
 80005da:	2001      	movs	r0, #1
 80005dc:	4216      	tst	r6, r2
 80005de:	d130      	bne.n	8000642 <__aeabi_fadd+0x1a6>
 80005e0:	2300      	movs	r3, #0
 80005e2:	08f7      	lsrs	r7, r6, #3
 80005e4:	e7a4      	b.n	8000530 <__aeabi_fadd+0x94>
 80005e6:	2900      	cmp	r1, #0
 80005e8:	d09e      	beq.n	8000528 <__aeabi_fadd+0x8c>
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x156>
 80005f0:	e0ca      	b.n	8000788 <__aeabi_fadd+0x2ec>
 80005f2:	2bff      	cmp	r3, #255	@ 0xff
 80005f4:	d042      	beq.n	800067c <__aeabi_fadd+0x1e0>
 80005f6:	0013      	movs	r3, r2
 80005f8:	e791      	b.n	800051e <__aeabi_fadd+0x82>
 80005fa:	1a71      	subs	r1, r6, r1
 80005fc:	014b      	lsls	r3, r1, #5
 80005fe:	d400      	bmi.n	8000602 <__aeabi_fadd+0x166>
 8000600:	e0d1      	b.n	80007a6 <__aeabi_fadd+0x30a>
 8000602:	018f      	lsls	r7, r1, #6
 8000604:	09bf      	lsrs	r7, r7, #6
 8000606:	0038      	movs	r0, r7
 8000608:	f001 fee4 	bl	80023d4 <__clzsi2>
 800060c:	003b      	movs	r3, r7
 800060e:	3805      	subs	r0, #5
 8000610:	4083      	lsls	r3, r0
 8000612:	2501      	movs	r5, #1
 8000614:	2220      	movs	r2, #32
 8000616:	1b40      	subs	r0, r0, r5
 8000618:	3001      	adds	r0, #1
 800061a:	1a12      	subs	r2, r2, r0
 800061c:	001e      	movs	r6, r3
 800061e:	4093      	lsls	r3, r2
 8000620:	40c6      	lsrs	r6, r0
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	4193      	sbcs	r3, r2
 8000626:	431e      	orrs	r6, r3
 8000628:	d039      	beq.n	800069e <__aeabi_fadd+0x202>
 800062a:	0773      	lsls	r3, r6, #29
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0x194>
 800062e:	e11b      	b.n	8000868 <__aeabi_fadd+0x3cc>
 8000630:	230f      	movs	r3, #15
 8000632:	2500      	movs	r5, #0
 8000634:	4033      	ands	r3, r6
 8000636:	2b04      	cmp	r3, #4
 8000638:	d1a7      	bne.n	800058a <__aeabi_fadd+0xee>
 800063a:	2001      	movs	r0, #1
 800063c:	0172      	lsls	r2, r6, #5
 800063e:	d57c      	bpl.n	800073a <__aeabi_fadd+0x29e>
 8000640:	b2c0      	uxtb	r0, r0
 8000642:	01b2      	lsls	r2, r6, #6
 8000644:	0a52      	lsrs	r2, r2, #9
 8000646:	e7a8      	b.n	800059a <__aeabi_fadd+0xfe>
 8000648:	0773      	lsls	r3, r6, #29
 800064a:	d003      	beq.n	8000654 <__aeabi_fadd+0x1b8>
 800064c:	230f      	movs	r3, #15
 800064e:	4033      	ands	r3, r6
 8000650:	2b04      	cmp	r3, #4
 8000652:	d19a      	bne.n	800058a <__aeabi_fadd+0xee>
 8000654:	002b      	movs	r3, r5
 8000656:	e767      	b.n	8000528 <__aeabi_fadd+0x8c>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d023      	beq.n	80006a4 <__aeabi_fadd+0x208>
 800065c:	1b53      	subs	r3, r2, r5
 800065e:	2d00      	cmp	r5, #0
 8000660:	d17b      	bne.n	800075a <__aeabi_fadd+0x2be>
 8000662:	2e00      	cmp	r6, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x1cc>
 8000666:	e086      	b.n	8000776 <__aeabi_fadd+0x2da>
 8000668:	1e5d      	subs	r5, r3, #1
 800066a:	2b01      	cmp	r3, #1
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x1d4>
 800066e:	e08b      	b.n	8000788 <__aeabi_fadd+0x2ec>
 8000670:	2bff      	cmp	r3, #255	@ 0xff
 8000672:	d002      	beq.n	800067a <__aeabi_fadd+0x1de>
 8000674:	002b      	movs	r3, r5
 8000676:	e075      	b.n	8000764 <__aeabi_fadd+0x2c8>
 8000678:	464c      	mov	r4, r9
 800067a:	4667      	mov	r7, ip
 800067c:	2f00      	cmp	r7, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1e6>
 8000680:	e789      	b.n	8000596 <__aeabi_fadd+0xfa>
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	03d2      	lsls	r2, r2, #15
 8000686:	433a      	orrs	r2, r7
 8000688:	0252      	lsls	r2, r2, #9
 800068a:	20ff      	movs	r0, #255	@ 0xff
 800068c:	0a52      	lsrs	r2, r2, #9
 800068e:	e784      	b.n	800059a <__aeabi_fadd+0xfe>
 8000690:	1a77      	subs	r7, r6, r1
 8000692:	017b      	lsls	r3, r7, #5
 8000694:	d46b      	bmi.n	800076e <__aeabi_fadd+0x2d2>
 8000696:	2f00      	cmp	r7, #0
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x200>
 800069a:	e765      	b.n	8000568 <__aeabi_fadd+0xcc>
 800069c:	2400      	movs	r4, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	e77a      	b.n	800059a <__aeabi_fadd+0xfe>
 80006a4:	22fe      	movs	r2, #254	@ 0xfe
 80006a6:	1c6b      	adds	r3, r5, #1
 80006a8:	421a      	tst	r2, r3
 80006aa:	d149      	bne.n	8000740 <__aeabi_fadd+0x2a4>
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fadd+0x216>
 80006b0:	e09f      	b.n	80007f2 <__aeabi_fadd+0x356>
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x21c>
 80006b6:	e0ba      	b.n	800082e <__aeabi_fadd+0x392>
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0x222>
 80006bc:	e0cf      	b.n	800085e <__aeabi_fadd+0x3c2>
 80006be:	1872      	adds	r2, r6, r1
 80006c0:	0153      	lsls	r3, r2, #5
 80006c2:	d400      	bmi.n	80006c6 <__aeabi_fadd+0x22a>
 80006c4:	e0cd      	b.n	8000862 <__aeabi_fadd+0x3c6>
 80006c6:	0192      	lsls	r2, r2, #6
 80006c8:	2001      	movs	r0, #1
 80006ca:	0a52      	lsrs	r2, r2, #9
 80006cc:	e765      	b.n	800059a <__aeabi_fadd+0xfe>
 80006ce:	2aff      	cmp	r2, #255	@ 0xff
 80006d0:	d0d2      	beq.n	8000678 <__aeabi_fadd+0x1dc>
 80006d2:	2080      	movs	r0, #128	@ 0x80
 80006d4:	04c0      	lsls	r0, r0, #19
 80006d6:	4306      	orrs	r6, r0
 80006d8:	2001      	movs	r0, #1
 80006da:	2b1b      	cmp	r3, #27
 80006dc:	dc08      	bgt.n	80006f0 <__aeabi_fadd+0x254>
 80006de:	0030      	movs	r0, r6
 80006e0:	2420      	movs	r4, #32
 80006e2:	40d8      	lsrs	r0, r3
 80006e4:	1ae3      	subs	r3, r4, r3
 80006e6:	409e      	lsls	r6, r3
 80006e8:	0033      	movs	r3, r6
 80006ea:	1e5c      	subs	r4, r3, #1
 80006ec:	41a3      	sbcs	r3, r4
 80006ee:	4318      	orrs	r0, r3
 80006f0:	464c      	mov	r4, r9
 80006f2:	0015      	movs	r5, r2
 80006f4:	1a0e      	subs	r6, r1, r0
 80006f6:	e732      	b.n	800055e <__aeabi_fadd+0xc2>
 80006f8:	0008      	movs	r0, r1
 80006fa:	2220      	movs	r2, #32
 80006fc:	40d8      	lsrs	r0, r3
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	4099      	lsls	r1, r3
 8000702:	000b      	movs	r3, r1
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	4193      	sbcs	r3, r2
 8000708:	4303      	orrs	r3, r0
 800070a:	18f6      	adds	r6, r6, r3
 800070c:	0173      	lsls	r3, r6, #5
 800070e:	d59b      	bpl.n	8000648 <__aeabi_fadd+0x1ac>
 8000710:	3501      	adds	r5, #1
 8000712:	2dff      	cmp	r5, #255	@ 0xff
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x27c>
 8000716:	e73e      	b.n	8000596 <__aeabi_fadd+0xfa>
 8000718:	2301      	movs	r3, #1
 800071a:	494d      	ldr	r1, [pc, #308]	@ (8000850 <__aeabi_fadd+0x3b4>)
 800071c:	0872      	lsrs	r2, r6, #1
 800071e:	4033      	ands	r3, r6
 8000720:	400a      	ands	r2, r1
 8000722:	431a      	orrs	r2, r3
 8000724:	0016      	movs	r6, r2
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d004      	beq.n	8000734 <__aeabi_fadd+0x298>
 800072a:	230f      	movs	r3, #15
 800072c:	4013      	ands	r3, r2
 800072e:	2b04      	cmp	r3, #4
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x298>
 8000732:	e72a      	b.n	800058a <__aeabi_fadd+0xee>
 8000734:	0173      	lsls	r3, r6, #5
 8000736:	d500      	bpl.n	800073a <__aeabi_fadd+0x29e>
 8000738:	e72a      	b.n	8000590 <__aeabi_fadd+0xf4>
 800073a:	002b      	movs	r3, r5
 800073c:	08f7      	lsrs	r7, r6, #3
 800073e:	e6f7      	b.n	8000530 <__aeabi_fadd+0x94>
 8000740:	2bff      	cmp	r3, #255	@ 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x2aa>
 8000744:	e727      	b.n	8000596 <__aeabi_fadd+0xfa>
 8000746:	1871      	adds	r1, r6, r1
 8000748:	0849      	lsrs	r1, r1, #1
 800074a:	074a      	lsls	r2, r1, #29
 800074c:	d02f      	beq.n	80007ae <__aeabi_fadd+0x312>
 800074e:	220f      	movs	r2, #15
 8000750:	400a      	ands	r2, r1
 8000752:	2a04      	cmp	r2, #4
 8000754:	d02b      	beq.n	80007ae <__aeabi_fadd+0x312>
 8000756:	1d0e      	adds	r6, r1, #4
 8000758:	e6e6      	b.n	8000528 <__aeabi_fadd+0x8c>
 800075a:	2aff      	cmp	r2, #255	@ 0xff
 800075c:	d08d      	beq.n	800067a <__aeabi_fadd+0x1de>
 800075e:	2080      	movs	r0, #128	@ 0x80
 8000760:	04c0      	lsls	r0, r0, #19
 8000762:	4306      	orrs	r6, r0
 8000764:	2b1b      	cmp	r3, #27
 8000766:	dd24      	ble.n	80007b2 <__aeabi_fadd+0x316>
 8000768:	0013      	movs	r3, r2
 800076a:	1d4e      	adds	r6, r1, #5
 800076c:	e6dc      	b.n	8000528 <__aeabi_fadd+0x8c>
 800076e:	464c      	mov	r4, r9
 8000770:	1b8f      	subs	r7, r1, r6
 8000772:	e6f9      	b.n	8000568 <__aeabi_fadd+0xcc>
 8000774:	464c      	mov	r4, r9
 8000776:	000e      	movs	r6, r1
 8000778:	e6d6      	b.n	8000528 <__aeabi_fadd+0x8c>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d149      	bne.n	8000812 <__aeabi_fadd+0x376>
 800077e:	2900      	cmp	r1, #0
 8000780:	d068      	beq.n	8000854 <__aeabi_fadd+0x3b8>
 8000782:	4667      	mov	r7, ip
 8000784:	464c      	mov	r4, r9
 8000786:	e77c      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000788:	1870      	adds	r0, r6, r1
 800078a:	0143      	lsls	r3, r0, #5
 800078c:	d574      	bpl.n	8000878 <__aeabi_fadd+0x3dc>
 800078e:	4930      	ldr	r1, [pc, #192]	@ (8000850 <__aeabi_fadd+0x3b4>)
 8000790:	0840      	lsrs	r0, r0, #1
 8000792:	4001      	ands	r1, r0
 8000794:	0743      	lsls	r3, r0, #29
 8000796:	d009      	beq.n	80007ac <__aeabi_fadd+0x310>
 8000798:	230f      	movs	r3, #15
 800079a:	4003      	ands	r3, r0
 800079c:	2b04      	cmp	r3, #4
 800079e:	d005      	beq.n	80007ac <__aeabi_fadd+0x310>
 80007a0:	2302      	movs	r3, #2
 80007a2:	1d0e      	adds	r6, r1, #4
 80007a4:	e6c0      	b.n	8000528 <__aeabi_fadd+0x8c>
 80007a6:	2301      	movs	r3, #1
 80007a8:	08cf      	lsrs	r7, r1, #3
 80007aa:	e6c1      	b.n	8000530 <__aeabi_fadd+0x94>
 80007ac:	2302      	movs	r3, #2
 80007ae:	08cf      	lsrs	r7, r1, #3
 80007b0:	e6be      	b.n	8000530 <__aeabi_fadd+0x94>
 80007b2:	2520      	movs	r5, #32
 80007b4:	0030      	movs	r0, r6
 80007b6:	40d8      	lsrs	r0, r3
 80007b8:	1aeb      	subs	r3, r5, r3
 80007ba:	409e      	lsls	r6, r3
 80007bc:	0033      	movs	r3, r6
 80007be:	1e5d      	subs	r5, r3, #1
 80007c0:	41ab      	sbcs	r3, r5
 80007c2:	4303      	orrs	r3, r0
 80007c4:	0015      	movs	r5, r2
 80007c6:	185e      	adds	r6, r3, r1
 80007c8:	e7a0      	b.n	800070c <__aeabi_fadd+0x270>
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x334>
 80007ce:	e765      	b.n	800069c <__aeabi_fadd+0x200>
 80007d0:	464c      	mov	r4, r9
 80007d2:	4667      	mov	r7, ip
 80007d4:	e6ac      	b.n	8000530 <__aeabi_fadd+0x94>
 80007d6:	1b8f      	subs	r7, r1, r6
 80007d8:	017b      	lsls	r3, r7, #5
 80007da:	d52e      	bpl.n	800083a <__aeabi_fadd+0x39e>
 80007dc:	01bf      	lsls	r7, r7, #6
 80007de:	09bf      	lsrs	r7, r7, #6
 80007e0:	0038      	movs	r0, r7
 80007e2:	f001 fdf7 	bl	80023d4 <__clzsi2>
 80007e6:	003b      	movs	r3, r7
 80007e8:	3805      	subs	r0, #5
 80007ea:	4083      	lsls	r3, r0
 80007ec:	464c      	mov	r4, r9
 80007ee:	3501      	adds	r5, #1
 80007f0:	e710      	b.n	8000614 <__aeabi_fadd+0x178>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x35c>
 80007f6:	e740      	b.n	800067a <__aeabi_fadd+0x1de>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x362>
 80007fc:	e741      	b.n	8000682 <__aeabi_fadd+0x1e6>
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	429f      	cmp	r7, r3
 8000804:	d200      	bcs.n	8000808 <__aeabi_fadd+0x36c>
 8000806:	e73c      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000808:	459c      	cmp	ip, r3
 800080a:	d300      	bcc.n	800080e <__aeabi_fadd+0x372>
 800080c:	e739      	b.n	8000682 <__aeabi_fadd+0x1e6>
 800080e:	4667      	mov	r7, ip
 8000810:	e737      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000812:	2900      	cmp	r1, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x37c>
 8000816:	e734      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	03db      	lsls	r3, r3, #15
 800081c:	429f      	cmp	r7, r3
 800081e:	d200      	bcs.n	8000822 <__aeabi_fadd+0x386>
 8000820:	e72f      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000822:	459c      	cmp	ip, r3
 8000824:	d300      	bcc.n	8000828 <__aeabi_fadd+0x38c>
 8000826:	e72c      	b.n	8000682 <__aeabi_fadd+0x1e6>
 8000828:	464c      	mov	r4, r9
 800082a:	4667      	mov	r7, ip
 800082c:	e729      	b.n	8000682 <__aeabi_fadd+0x1e6>
 800082e:	2900      	cmp	r1, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x398>
 8000832:	e734      	b.n	800069e <__aeabi_fadd+0x202>
 8000834:	2300      	movs	r3, #0
 8000836:	08cf      	lsrs	r7, r1, #3
 8000838:	e67a      	b.n	8000530 <__aeabi_fadd+0x94>
 800083a:	464c      	mov	r4, r9
 800083c:	2301      	movs	r3, #1
 800083e:	08ff      	lsrs	r7, r7, #3
 8000840:	e676      	b.n	8000530 <__aeabi_fadd+0x94>
 8000842:	2f00      	cmp	r7, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x3ac>
 8000846:	e729      	b.n	800069c <__aeabi_fadd+0x200>
 8000848:	08ff      	lsrs	r7, r7, #3
 800084a:	e671      	b.n	8000530 <__aeabi_fadd+0x94>
 800084c:	fbffffff 	.word	0xfbffffff
 8000850:	7dffffff 	.word	0x7dffffff
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	2400      	movs	r4, #0
 8000858:	20ff      	movs	r0, #255	@ 0xff
 800085a:	03d2      	lsls	r2, r2, #15
 800085c:	e69d      	b.n	800059a <__aeabi_fadd+0xfe>
 800085e:	2300      	movs	r3, #0
 8000860:	e666      	b.n	8000530 <__aeabi_fadd+0x94>
 8000862:	2300      	movs	r3, #0
 8000864:	08d7      	lsrs	r7, r2, #3
 8000866:	e663      	b.n	8000530 <__aeabi_fadd+0x94>
 8000868:	2001      	movs	r0, #1
 800086a:	0172      	lsls	r2, r6, #5
 800086c:	d500      	bpl.n	8000870 <__aeabi_fadd+0x3d4>
 800086e:	e6e7      	b.n	8000640 <__aeabi_fadd+0x1a4>
 8000870:	0031      	movs	r1, r6
 8000872:	2300      	movs	r3, #0
 8000874:	08cf      	lsrs	r7, r1, #3
 8000876:	e65b      	b.n	8000530 <__aeabi_fadd+0x94>
 8000878:	2301      	movs	r3, #1
 800087a:	08c7      	lsrs	r7, r0, #3
 800087c:	e658      	b.n	8000530 <__aeabi_fadd+0x94>
 800087e:	46c0      	nop			@ (mov r8, r8)

08000880 <__aeabi_fdiv>:
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000882:	4646      	mov	r6, r8
 8000884:	464f      	mov	r7, r9
 8000886:	46d6      	mov	lr, sl
 8000888:	0245      	lsls	r5, r0, #9
 800088a:	b5c0      	push	{r6, r7, lr}
 800088c:	0fc3      	lsrs	r3, r0, #31
 800088e:	0047      	lsls	r7, r0, #1
 8000890:	4698      	mov	r8, r3
 8000892:	1c0e      	adds	r6, r1, #0
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	0e3f      	lsrs	r7, r7, #24
 8000898:	d05b      	beq.n	8000952 <__aeabi_fdiv+0xd2>
 800089a:	2fff      	cmp	r7, #255	@ 0xff
 800089c:	d021      	beq.n	80008e2 <__aeabi_fdiv+0x62>
 800089e:	2380      	movs	r3, #128	@ 0x80
 80008a0:	00ed      	lsls	r5, r5, #3
 80008a2:	04db      	lsls	r3, r3, #19
 80008a4:	431d      	orrs	r5, r3
 80008a6:	2300      	movs	r3, #0
 80008a8:	4699      	mov	r9, r3
 80008aa:	469a      	mov	sl, r3
 80008ac:	3f7f      	subs	r7, #127	@ 0x7f
 80008ae:	0274      	lsls	r4, r6, #9
 80008b0:	0073      	lsls	r3, r6, #1
 80008b2:	0a64      	lsrs	r4, r4, #9
 80008b4:	0e1b      	lsrs	r3, r3, #24
 80008b6:	0ff6      	lsrs	r6, r6, #31
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d020      	beq.n	80008fe <__aeabi_fdiv+0x7e>
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d043      	beq.n	8000948 <__aeabi_fdiv+0xc8>
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	2000      	movs	r0, #0
 80008c4:	00e4      	lsls	r4, r4, #3
 80008c6:	04d2      	lsls	r2, r2, #19
 80008c8:	4314      	orrs	r4, r2
 80008ca:	3b7f      	subs	r3, #127	@ 0x7f
 80008cc:	4642      	mov	r2, r8
 80008ce:	1aff      	subs	r7, r7, r3
 80008d0:	464b      	mov	r3, r9
 80008d2:	4072      	eors	r2, r6
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d900      	bls.n	80008da <__aeabi_fdiv+0x5a>
 80008d8:	e09d      	b.n	8000a16 <__aeabi_fdiv+0x196>
 80008da:	4971      	ldr	r1, [pc, #452]	@ (8000aa0 <__aeabi_fdiv+0x220>)
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	58cb      	ldr	r3, [r1, r3]
 80008e0:	469f      	mov	pc, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d15a      	bne.n	800099c <__aeabi_fdiv+0x11c>
 80008e6:	2308      	movs	r3, #8
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b06      	subs	r3, #6
 80008ec:	0274      	lsls	r4, r6, #9
 80008ee:	469a      	mov	sl, r3
 80008f0:	0073      	lsls	r3, r6, #1
 80008f2:	27ff      	movs	r7, #255	@ 0xff
 80008f4:	0a64      	lsrs	r4, r4, #9
 80008f6:	0e1b      	lsrs	r3, r3, #24
 80008f8:	0ff6      	lsrs	r6, r6, #31
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1de      	bne.n	80008bc <__aeabi_fdiv+0x3c>
 80008fe:	2c00      	cmp	r4, #0
 8000900:	d13b      	bne.n	800097a <__aeabi_fdiv+0xfa>
 8000902:	2301      	movs	r3, #1
 8000904:	4642      	mov	r2, r8
 8000906:	4649      	mov	r1, r9
 8000908:	4072      	eors	r2, r6
 800090a:	4319      	orrs	r1, r3
 800090c:	290e      	cmp	r1, #14
 800090e:	d818      	bhi.n	8000942 <__aeabi_fdiv+0xc2>
 8000910:	4864      	ldr	r0, [pc, #400]	@ (8000aa4 <__aeabi_fdiv+0x224>)
 8000912:	0089      	lsls	r1, r1, #2
 8000914:	5841      	ldr	r1, [r0, r1]
 8000916:	468f      	mov	pc, r1
 8000918:	4653      	mov	r3, sl
 800091a:	2b02      	cmp	r3, #2
 800091c:	d100      	bne.n	8000920 <__aeabi_fdiv+0xa0>
 800091e:	e0b8      	b.n	8000a92 <__aeabi_fdiv+0x212>
 8000920:	2b03      	cmp	r3, #3
 8000922:	d06e      	beq.n	8000a02 <__aeabi_fdiv+0x182>
 8000924:	4642      	mov	r2, r8
 8000926:	002c      	movs	r4, r5
 8000928:	2b01      	cmp	r3, #1
 800092a:	d140      	bne.n	80009ae <__aeabi_fdiv+0x12e>
 800092c:	2000      	movs	r0, #0
 800092e:	2400      	movs	r4, #0
 8000930:	05c0      	lsls	r0, r0, #23
 8000932:	4320      	orrs	r0, r4
 8000934:	07d2      	lsls	r2, r2, #31
 8000936:	4310      	orrs	r0, r2
 8000938:	bce0      	pop	{r5, r6, r7}
 800093a:	46ba      	mov	sl, r7
 800093c:	46b1      	mov	r9, r6
 800093e:	46a8      	mov	r8, r5
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	2400      	movs	r4, #0
 8000946:	e7f3      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d120      	bne.n	800098e <__aeabi_fdiv+0x10e>
 800094c:	2302      	movs	r3, #2
 800094e:	3fff      	subs	r7, #255	@ 0xff
 8000950:	e7d8      	b.n	8000904 <__aeabi_fdiv+0x84>
 8000952:	2d00      	cmp	r5, #0
 8000954:	d105      	bne.n	8000962 <__aeabi_fdiv+0xe2>
 8000956:	2304      	movs	r3, #4
 8000958:	4699      	mov	r9, r3
 800095a:	3b03      	subs	r3, #3
 800095c:	2700      	movs	r7, #0
 800095e:	469a      	mov	sl, r3
 8000960:	e7a5      	b.n	80008ae <__aeabi_fdiv+0x2e>
 8000962:	0028      	movs	r0, r5
 8000964:	f001 fd36 	bl	80023d4 <__clzsi2>
 8000968:	2776      	movs	r7, #118	@ 0x76
 800096a:	1f43      	subs	r3, r0, #5
 800096c:	409d      	lsls	r5, r3
 800096e:	2300      	movs	r3, #0
 8000970:	427f      	negs	r7, r7
 8000972:	4699      	mov	r9, r3
 8000974:	469a      	mov	sl, r3
 8000976:	1a3f      	subs	r7, r7, r0
 8000978:	e799      	b.n	80008ae <__aeabi_fdiv+0x2e>
 800097a:	0020      	movs	r0, r4
 800097c:	f001 fd2a 	bl	80023d4 <__clzsi2>
 8000980:	1f43      	subs	r3, r0, #5
 8000982:	409c      	lsls	r4, r3
 8000984:	2376      	movs	r3, #118	@ 0x76
 8000986:	425b      	negs	r3, r3
 8000988:	1a1b      	subs	r3, r3, r0
 800098a:	2000      	movs	r0, #0
 800098c:	e79e      	b.n	80008cc <__aeabi_fdiv+0x4c>
 800098e:	2303      	movs	r3, #3
 8000990:	464a      	mov	r2, r9
 8000992:	431a      	orrs	r2, r3
 8000994:	4691      	mov	r9, r2
 8000996:	2003      	movs	r0, #3
 8000998:	33fc      	adds	r3, #252	@ 0xfc
 800099a:	e797      	b.n	80008cc <__aeabi_fdiv+0x4c>
 800099c:	230c      	movs	r3, #12
 800099e:	4699      	mov	r9, r3
 80009a0:	3b09      	subs	r3, #9
 80009a2:	27ff      	movs	r7, #255	@ 0xff
 80009a4:	469a      	mov	sl, r3
 80009a6:	e782      	b.n	80008ae <__aeabi_fdiv+0x2e>
 80009a8:	2803      	cmp	r0, #3
 80009aa:	d02c      	beq.n	8000a06 <__aeabi_fdiv+0x186>
 80009ac:	0032      	movs	r2, r6
 80009ae:	0038      	movs	r0, r7
 80009b0:	307f      	adds	r0, #127	@ 0x7f
 80009b2:	2800      	cmp	r0, #0
 80009b4:	dd47      	ble.n	8000a46 <__aeabi_fdiv+0x1c6>
 80009b6:	0763      	lsls	r3, r4, #29
 80009b8:	d004      	beq.n	80009c4 <__aeabi_fdiv+0x144>
 80009ba:	230f      	movs	r3, #15
 80009bc:	4023      	ands	r3, r4
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fdiv+0x144>
 80009c2:	3404      	adds	r4, #4
 80009c4:	0123      	lsls	r3, r4, #4
 80009c6:	d503      	bpl.n	80009d0 <__aeabi_fdiv+0x150>
 80009c8:	0038      	movs	r0, r7
 80009ca:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <__aeabi_fdiv+0x228>)
 80009cc:	3080      	adds	r0, #128	@ 0x80
 80009ce:	401c      	ands	r4, r3
 80009d0:	28fe      	cmp	r0, #254	@ 0xfe
 80009d2:	dcb6      	bgt.n	8000942 <__aeabi_fdiv+0xc2>
 80009d4:	01a4      	lsls	r4, r4, #6
 80009d6:	0a64      	lsrs	r4, r4, #9
 80009d8:	b2c0      	uxtb	r0, r0
 80009da:	e7a9      	b.n	8000930 <__aeabi_fdiv+0xb0>
 80009dc:	2480      	movs	r4, #128	@ 0x80
 80009de:	2200      	movs	r2, #0
 80009e0:	20ff      	movs	r0, #255	@ 0xff
 80009e2:	03e4      	lsls	r4, r4, #15
 80009e4:	e7a4      	b.n	8000930 <__aeabi_fdiv+0xb0>
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	03db      	lsls	r3, r3, #15
 80009ea:	421d      	tst	r5, r3
 80009ec:	d001      	beq.n	80009f2 <__aeabi_fdiv+0x172>
 80009ee:	421c      	tst	r4, r3
 80009f0:	d00b      	beq.n	8000a0a <__aeabi_fdiv+0x18a>
 80009f2:	2480      	movs	r4, #128	@ 0x80
 80009f4:	03e4      	lsls	r4, r4, #15
 80009f6:	432c      	orrs	r4, r5
 80009f8:	0264      	lsls	r4, r4, #9
 80009fa:	4642      	mov	r2, r8
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	0a64      	lsrs	r4, r4, #9
 8000a00:	e796      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a02:	4646      	mov	r6, r8
 8000a04:	002c      	movs	r4, r5
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	03db      	lsls	r3, r3, #15
 8000a0a:	431c      	orrs	r4, r3
 8000a0c:	0264      	lsls	r4, r4, #9
 8000a0e:	0032      	movs	r2, r6
 8000a10:	20ff      	movs	r0, #255	@ 0xff
 8000a12:	0a64      	lsrs	r4, r4, #9
 8000a14:	e78c      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a16:	016d      	lsls	r5, r5, #5
 8000a18:	0160      	lsls	r0, r4, #5
 8000a1a:	4285      	cmp	r5, r0
 8000a1c:	d22d      	bcs.n	8000a7a <__aeabi_fdiv+0x1fa>
 8000a1e:	231b      	movs	r3, #27
 8000a20:	2400      	movs	r4, #0
 8000a22:	3f01      	subs	r7, #1
 8000a24:	2601      	movs	r6, #1
 8000a26:	0029      	movs	r1, r5
 8000a28:	0064      	lsls	r4, r4, #1
 8000a2a:	006d      	lsls	r5, r5, #1
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	db01      	blt.n	8000a34 <__aeabi_fdiv+0x1b4>
 8000a30:	4285      	cmp	r5, r0
 8000a32:	d301      	bcc.n	8000a38 <__aeabi_fdiv+0x1b8>
 8000a34:	1a2d      	subs	r5, r5, r0
 8000a36:	4334      	orrs	r4, r6
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f3      	bne.n	8000a26 <__aeabi_fdiv+0x1a6>
 8000a3e:	1e6b      	subs	r3, r5, #1
 8000a40:	419d      	sbcs	r5, r3
 8000a42:	432c      	orrs	r4, r5
 8000a44:	e7b3      	b.n	80009ae <__aeabi_fdiv+0x12e>
 8000a46:	2301      	movs	r3, #1
 8000a48:	1a1b      	subs	r3, r3, r0
 8000a4a:	2b1b      	cmp	r3, #27
 8000a4c:	dd00      	ble.n	8000a50 <__aeabi_fdiv+0x1d0>
 8000a4e:	e76d      	b.n	800092c <__aeabi_fdiv+0xac>
 8000a50:	0021      	movs	r1, r4
 8000a52:	379e      	adds	r7, #158	@ 0x9e
 8000a54:	40d9      	lsrs	r1, r3
 8000a56:	40bc      	lsls	r4, r7
 8000a58:	000b      	movs	r3, r1
 8000a5a:	1e61      	subs	r1, r4, #1
 8000a5c:	418c      	sbcs	r4, r1
 8000a5e:	4323      	orrs	r3, r4
 8000a60:	0759      	lsls	r1, r3, #29
 8000a62:	d004      	beq.n	8000a6e <__aeabi_fdiv+0x1ee>
 8000a64:	210f      	movs	r1, #15
 8000a66:	4019      	ands	r1, r3
 8000a68:	2904      	cmp	r1, #4
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fdiv+0x1ee>
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	0159      	lsls	r1, r3, #5
 8000a70:	d413      	bmi.n	8000a9a <__aeabi_fdiv+0x21a>
 8000a72:	019b      	lsls	r3, r3, #6
 8000a74:	2000      	movs	r0, #0
 8000a76:	0a5c      	lsrs	r4, r3, #9
 8000a78:	e75a      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a7a:	231a      	movs	r3, #26
 8000a7c:	2401      	movs	r4, #1
 8000a7e:	1a2d      	subs	r5, r5, r0
 8000a80:	e7d0      	b.n	8000a24 <__aeabi_fdiv+0x1a4>
 8000a82:	1e98      	subs	r0, r3, #2
 8000a84:	4243      	negs	r3, r0
 8000a86:	4158      	adcs	r0, r3
 8000a88:	4240      	negs	r0, r0
 8000a8a:	0032      	movs	r2, r6
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	b2c0      	uxtb	r0, r0
 8000a90:	e74e      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a92:	4642      	mov	r2, r8
 8000a94:	20ff      	movs	r0, #255	@ 0xff
 8000a96:	2400      	movs	r4, #0
 8000a98:	e74a      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	e747      	b.n	8000930 <__aeabi_fdiv+0xb0>
 8000aa0:	08006f94 	.word	0x08006f94
 8000aa4:	08006fd4 	.word	0x08006fd4
 8000aa8:	f7ffffff 	.word	0xf7ffffff

08000aac <__eqsf2>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	024e      	lsls	r6, r1, #9
 8000ab2:	004c      	lsls	r4, r1, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	0a6d      	lsrs	r5, r5, #9
 8000ab8:	0e12      	lsrs	r2, r2, #24
 8000aba:	0fc3      	lsrs	r3, r0, #31
 8000abc:	0a76      	lsrs	r6, r6, #9
 8000abe:	0e24      	lsrs	r4, r4, #24
 8000ac0:	0fc9      	lsrs	r1, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d010      	beq.n	8000ae8 <__eqsf2+0x3c>
 8000ac6:	2cff      	cmp	r4, #255	@ 0xff
 8000ac8:	d00c      	beq.n	8000ae4 <__eqsf2+0x38>
 8000aca:	2001      	movs	r0, #1
 8000acc:	42a2      	cmp	r2, r4
 8000ace:	d10a      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000ad0:	42b5      	cmp	r5, r6
 8000ad2:	d108      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d00f      	beq.n	8000af8 <__eqsf2+0x4c>
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d104      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000adc:	0028      	movs	r0, r5
 8000ade:	1e43      	subs	r3, r0, #1
 8000ae0:	4198      	sbcs	r0, r3
 8000ae2:	e000      	b.n	8000ae6 <__eqsf2+0x3a>
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	2001      	movs	r0, #1
 8000aea:	2cff      	cmp	r4, #255	@ 0xff
 8000aec:	d1fb      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000aee:	4335      	orrs	r5, r6
 8000af0:	d1f9      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000af2:	404b      	eors	r3, r1
 8000af4:	0018      	movs	r0, r3
 8000af6:	e7f6      	b.n	8000ae6 <__eqsf2+0x3a>
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7f4      	b.n	8000ae6 <__eqsf2+0x3a>

08000afc <__gesf2>:
 8000afc:	b530      	push	{r4, r5, lr}
 8000afe:	0042      	lsls	r2, r0, #1
 8000b00:	0244      	lsls	r4, r0, #9
 8000b02:	024d      	lsls	r5, r1, #9
 8000b04:	0fc3      	lsrs	r3, r0, #31
 8000b06:	0048      	lsls	r0, r1, #1
 8000b08:	0a64      	lsrs	r4, r4, #9
 8000b0a:	0e12      	lsrs	r2, r2, #24
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	0e00      	lsrs	r0, r0, #24
 8000b10:	0fc9      	lsrs	r1, r1, #31
 8000b12:	2aff      	cmp	r2, #255	@ 0xff
 8000b14:	d018      	beq.n	8000b48 <__gesf2+0x4c>
 8000b16:	28ff      	cmp	r0, #255	@ 0xff
 8000b18:	d00a      	beq.n	8000b30 <__gesf2+0x34>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d11e      	bne.n	8000b5c <__gesf2+0x60>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d10a      	bne.n	8000b38 <__gesf2+0x3c>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d029      	beq.n	8000b7a <__gesf2+0x7e>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d12d      	bne.n	8000b86 <__gesf2+0x8a>
 8000b2a:	0048      	lsls	r0, r1, #1
 8000b2c:	3801      	subs	r0, #1
 8000b2e:	bd30      	pop	{r4, r5, pc}
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d125      	bne.n	8000b80 <__gesf2+0x84>
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d101      	bne.n	8000b3c <__gesf2+0x40>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d0f6      	beq.n	8000b2a <__gesf2+0x2e>
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d019      	beq.n	8000b74 <__gesf2+0x78>
 8000b40:	2001      	movs	r0, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	4318      	orrs	r0, r3
 8000b46:	e7f2      	b.n	8000b2e <__gesf2+0x32>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d119      	bne.n	8000b80 <__gesf2+0x84>
 8000b4c:	28ff      	cmp	r0, #255	@ 0xff
 8000b4e:	d1f7      	bne.n	8000b40 <__gesf2+0x44>
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d115      	bne.n	8000b80 <__gesf2+0x84>
 8000b54:	2000      	movs	r0, #0
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d1f2      	bne.n	8000b40 <__gesf2+0x44>
 8000b5a:	e7e8      	b.n	8000b2e <__gesf2+0x32>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d0ef      	beq.n	8000b40 <__gesf2+0x44>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d1ed      	bne.n	8000b40 <__gesf2+0x44>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	dceb      	bgt.n	8000b40 <__gesf2+0x44>
 8000b68:	db04      	blt.n	8000b74 <__gesf2+0x78>
 8000b6a:	42ac      	cmp	r4, r5
 8000b6c:	d8e8      	bhi.n	8000b40 <__gesf2+0x44>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d2dc      	bcs.n	8000b2e <__gesf2+0x32>
 8000b74:	0058      	lsls	r0, r3, #1
 8000b76:	3801      	subs	r0, #1
 8000b78:	e7d9      	b.n	8000b2e <__gesf2+0x32>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d0d7      	beq.n	8000b2e <__gesf2+0x32>
 8000b7e:	e7df      	b.n	8000b40 <__gesf2+0x44>
 8000b80:	2002      	movs	r0, #2
 8000b82:	4240      	negs	r0, r0
 8000b84:	e7d3      	b.n	8000b2e <__gesf2+0x32>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d1da      	bne.n	8000b40 <__gesf2+0x44>
 8000b8a:	e7ee      	b.n	8000b6a <__gesf2+0x6e>

08000b8c <__lesf2>:
 8000b8c:	b530      	push	{r4, r5, lr}
 8000b8e:	0042      	lsls	r2, r0, #1
 8000b90:	0244      	lsls	r4, r0, #9
 8000b92:	024d      	lsls	r5, r1, #9
 8000b94:	0fc3      	lsrs	r3, r0, #31
 8000b96:	0048      	lsls	r0, r1, #1
 8000b98:	0a64      	lsrs	r4, r4, #9
 8000b9a:	0e12      	lsrs	r2, r2, #24
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	0e00      	lsrs	r0, r0, #24
 8000ba0:	0fc9      	lsrs	r1, r1, #31
 8000ba2:	2aff      	cmp	r2, #255	@ 0xff
 8000ba4:	d017      	beq.n	8000bd6 <__lesf2+0x4a>
 8000ba6:	28ff      	cmp	r0, #255	@ 0xff
 8000ba8:	d00a      	beq.n	8000bc0 <__lesf2+0x34>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d11b      	bne.n	8000be6 <__lesf2+0x5a>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d10a      	bne.n	8000bc8 <__lesf2+0x3c>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d01d      	beq.n	8000bf2 <__lesf2+0x66>
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d12d      	bne.n	8000c16 <__lesf2+0x8a>
 8000bba:	0048      	lsls	r0, r1, #1
 8000bbc:	3801      	subs	r0, #1
 8000bbe:	e011      	b.n	8000be4 <__lesf2+0x58>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d10e      	bne.n	8000be2 <__lesf2+0x56>
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d101      	bne.n	8000bcc <__lesf2+0x40>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d0f6      	beq.n	8000bba <__lesf2+0x2e>
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d10c      	bne.n	8000bea <__lesf2+0x5e>
 8000bd0:	0058      	lsls	r0, r3, #1
 8000bd2:	3801      	subs	r0, #1
 8000bd4:	e006      	b.n	8000be4 <__lesf2+0x58>
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d103      	bne.n	8000be2 <__lesf2+0x56>
 8000bda:	28ff      	cmp	r0, #255	@ 0xff
 8000bdc:	d105      	bne.n	8000bea <__lesf2+0x5e>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d015      	beq.n	8000c0e <__lesf2+0x82>
 8000be2:	2002      	movs	r0, #2
 8000be4:	bd30      	pop	{r4, r5, pc}
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d106      	bne.n	8000bf8 <__lesf2+0x6c>
 8000bea:	2001      	movs	r0, #1
 8000bec:	425b      	negs	r3, r3
 8000bee:	4318      	orrs	r0, r3
 8000bf0:	e7f8      	b.n	8000be4 <__lesf2+0x58>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d0f6      	beq.n	8000be4 <__lesf2+0x58>
 8000bf6:	e7f8      	b.n	8000bea <__lesf2+0x5e>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d1f6      	bne.n	8000bea <__lesf2+0x5e>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	dcf4      	bgt.n	8000bea <__lesf2+0x5e>
 8000c00:	dbe6      	blt.n	8000bd0 <__lesf2+0x44>
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	d8f1      	bhi.n	8000bea <__lesf2+0x5e>
 8000c06:	2000      	movs	r0, #0
 8000c08:	42ac      	cmp	r4, r5
 8000c0a:	d2eb      	bcs.n	8000be4 <__lesf2+0x58>
 8000c0c:	e7e0      	b.n	8000bd0 <__lesf2+0x44>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	428b      	cmp	r3, r1
 8000c12:	d1ea      	bne.n	8000bea <__lesf2+0x5e>
 8000c14:	e7e6      	b.n	8000be4 <__lesf2+0x58>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d1e7      	bne.n	8000bea <__lesf2+0x5e>
 8000c1a:	e7f2      	b.n	8000c02 <__lesf2+0x76>

08000c1c <__aeabi_fmul>:
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	464f      	mov	r7, r9
 8000c20:	4646      	mov	r6, r8
 8000c22:	46d6      	mov	lr, sl
 8000c24:	0044      	lsls	r4, r0, #1
 8000c26:	b5c0      	push	{r6, r7, lr}
 8000c28:	0246      	lsls	r6, r0, #9
 8000c2a:	1c0f      	adds	r7, r1, #0
 8000c2c:	0a76      	lsrs	r6, r6, #9
 8000c2e:	0e24      	lsrs	r4, r4, #24
 8000c30:	0fc5      	lsrs	r5, r0, #31
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fmul+0x1c>
 8000c36:	e0da      	b.n	8000dee <__aeabi_fmul+0x1d2>
 8000c38:	2cff      	cmp	r4, #255	@ 0xff
 8000c3a:	d074      	beq.n	8000d26 <__aeabi_fmul+0x10a>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	00f6      	lsls	r6, r6, #3
 8000c40:	04db      	lsls	r3, r3, #19
 8000c42:	431e      	orrs	r6, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	4699      	mov	r9, r3
 8000c48:	469a      	mov	sl, r3
 8000c4a:	3c7f      	subs	r4, #127	@ 0x7f
 8000c4c:	027b      	lsls	r3, r7, #9
 8000c4e:	0a5b      	lsrs	r3, r3, #9
 8000c50:	4698      	mov	r8, r3
 8000c52:	007b      	lsls	r3, r7, #1
 8000c54:	0e1b      	lsrs	r3, r3, #24
 8000c56:	0fff      	lsrs	r7, r7, #31
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d074      	beq.n	8000d46 <__aeabi_fmul+0x12a>
 8000c5c:	2bff      	cmp	r3, #255	@ 0xff
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fmul+0x46>
 8000c60:	e08e      	b.n	8000d80 <__aeabi_fmul+0x164>
 8000c62:	4642      	mov	r2, r8
 8000c64:	2180      	movs	r1, #128	@ 0x80
 8000c66:	00d2      	lsls	r2, r2, #3
 8000c68:	04c9      	lsls	r1, r1, #19
 8000c6a:	4311      	orrs	r1, r2
 8000c6c:	3b7f      	subs	r3, #127	@ 0x7f
 8000c6e:	002a      	movs	r2, r5
 8000c70:	18e4      	adds	r4, r4, r3
 8000c72:	464b      	mov	r3, r9
 8000c74:	407a      	eors	r2, r7
 8000c76:	4688      	mov	r8, r1
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	dc75      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000c7e:	464b      	mov	r3, r9
 8000c80:	2000      	movs	r0, #0
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	dd0f      	ble.n	8000ca6 <__aeabi_fmul+0x8a>
 8000c86:	4649      	mov	r1, r9
 8000c88:	2301      	movs	r3, #1
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	21a6      	movs	r1, #166	@ 0xa6
 8000c8e:	00c9      	lsls	r1, r1, #3
 8000c90:	420b      	tst	r3, r1
 8000c92:	d169      	bne.n	8000d68 <__aeabi_fmul+0x14c>
 8000c94:	2190      	movs	r1, #144	@ 0x90
 8000c96:	0089      	lsls	r1, r1, #2
 8000c98:	420b      	tst	r3, r1
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fmul+0x82>
 8000c9c:	e100      	b.n	8000ea0 <__aeabi_fmul+0x284>
 8000c9e:	2188      	movs	r1, #136	@ 0x88
 8000ca0:	4219      	tst	r1, r3
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_fmul+0x8a>
 8000ca4:	e0f5      	b.n	8000e92 <__aeabi_fmul+0x276>
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	0c09      	lsrs	r1, r1, #16
 8000cac:	4643      	mov	r3, r8
 8000cae:	0008      	movs	r0, r1
 8000cb0:	0c35      	lsrs	r5, r6, #16
 8000cb2:	0436      	lsls	r6, r6, #16
 8000cb4:	0c1b      	lsrs	r3, r3, #16
 8000cb6:	0c36      	lsrs	r6, r6, #16
 8000cb8:	4370      	muls	r0, r6
 8000cba:	4369      	muls	r1, r5
 8000cbc:	435e      	muls	r6, r3
 8000cbe:	435d      	muls	r5, r3
 8000cc0:	1876      	adds	r6, r6, r1
 8000cc2:	0c03      	lsrs	r3, r0, #16
 8000cc4:	199b      	adds	r3, r3, r6
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_fmul+0xb6>
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4465      	add	r5, ip
 8000cd2:	0400      	lsls	r0, r0, #16
 8000cd4:	0419      	lsls	r1, r3, #16
 8000cd6:	0c00      	lsrs	r0, r0, #16
 8000cd8:	1809      	adds	r1, r1, r0
 8000cda:	018e      	lsls	r6, r1, #6
 8000cdc:	1e70      	subs	r0, r6, #1
 8000cde:	4186      	sbcs	r6, r0
 8000ce0:	0c1b      	lsrs	r3, r3, #16
 8000ce2:	0e89      	lsrs	r1, r1, #26
 8000ce4:	195b      	adds	r3, r3, r5
 8000ce6:	430e      	orrs	r6, r1
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	431e      	orrs	r6, r3
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	d46c      	bmi.n	8000dca <__aeabi_fmul+0x1ae>
 8000cf0:	0023      	movs	r3, r4
 8000cf2:	337f      	adds	r3, #127	@ 0x7f
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fmul+0xde>
 8000cf8:	e0b1      	b.n	8000e5e <__aeabi_fmul+0x242>
 8000cfa:	0015      	movs	r5, r2
 8000cfc:	0771      	lsls	r1, r6, #29
 8000cfe:	d00b      	beq.n	8000d18 <__aeabi_fmul+0xfc>
 8000d00:	200f      	movs	r0, #15
 8000d02:	0021      	movs	r1, r4
 8000d04:	4030      	ands	r0, r6
 8000d06:	2804      	cmp	r0, #4
 8000d08:	d006      	beq.n	8000d18 <__aeabi_fmul+0xfc>
 8000d0a:	3604      	adds	r6, #4
 8000d0c:	0132      	lsls	r2, r6, #4
 8000d0e:	d503      	bpl.n	8000d18 <__aeabi_fmul+0xfc>
 8000d10:	4b6e      	ldr	r3, [pc, #440]	@ (8000ecc <__aeabi_fmul+0x2b0>)
 8000d12:	401e      	ands	r6, r3
 8000d14:	000b      	movs	r3, r1
 8000d16:	3380      	adds	r3, #128	@ 0x80
 8000d18:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d1a:	dd00      	ble.n	8000d1e <__aeabi_fmul+0x102>
 8000d1c:	e0bd      	b.n	8000e9a <__aeabi_fmul+0x27e>
 8000d1e:	01b2      	lsls	r2, r6, #6
 8000d20:	0a52      	lsrs	r2, r2, #9
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	e048      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d000      	beq.n	8000d2c <__aeabi_fmul+0x110>
 8000d2a:	e092      	b.n	8000e52 <__aeabi_fmul+0x236>
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	4699      	mov	r9, r3
 8000d30:	3b06      	subs	r3, #6
 8000d32:	469a      	mov	sl, r3
 8000d34:	027b      	lsls	r3, r7, #9
 8000d36:	0a5b      	lsrs	r3, r3, #9
 8000d38:	4698      	mov	r8, r3
 8000d3a:	007b      	lsls	r3, r7, #1
 8000d3c:	24ff      	movs	r4, #255	@ 0xff
 8000d3e:	0e1b      	lsrs	r3, r3, #24
 8000d40:	0fff      	lsrs	r7, r7, #31
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d18a      	bne.n	8000c5c <__aeabi_fmul+0x40>
 8000d46:	4642      	mov	r2, r8
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d164      	bne.n	8000e16 <__aeabi_fmul+0x1fa>
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	3201      	adds	r2, #1
 8000d50:	4311      	orrs	r1, r2
 8000d52:	4689      	mov	r9, r1
 8000d54:	290a      	cmp	r1, #10
 8000d56:	dc08      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000d58:	407d      	eors	r5, r7
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	b2ea      	uxtb	r2, r5
 8000d5e:	2902      	cmp	r1, #2
 8000d60:	dc91      	bgt.n	8000c86 <__aeabi_fmul+0x6a>
 8000d62:	0015      	movs	r5, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	e027      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000d68:	0015      	movs	r5, r2
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fmul+0x156>
 8000d70:	e093      	b.n	8000e9a <__aeabi_fmul+0x27e>
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d01a      	beq.n	8000dac <__aeabi_fmul+0x190>
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d12c      	bne.n	8000dd4 <__aeabi_fmul+0x1b8>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e01b      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000d80:	4643      	mov	r3, r8
 8000d82:	34ff      	adds	r4, #255	@ 0xff
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d055      	beq.n	8000e34 <__aeabi_fmul+0x218>
 8000d88:	2103      	movs	r1, #3
 8000d8a:	464b      	mov	r3, r9
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	0019      	movs	r1, r3
 8000d90:	2b0a      	cmp	r3, #10
 8000d92:	dc00      	bgt.n	8000d96 <__aeabi_fmul+0x17a>
 8000d94:	e092      	b.n	8000ebc <__aeabi_fmul+0x2a0>
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fmul+0x180>
 8000d9a:	e08c      	b.n	8000eb6 <__aeabi_fmul+0x29a>
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	03d2      	lsls	r2, r2, #15
 8000da0:	4216      	tst	r6, r2
 8000da2:	d003      	beq.n	8000dac <__aeabi_fmul+0x190>
 8000da4:	4643      	mov	r3, r8
 8000da6:	4213      	tst	r3, r2
 8000da8:	d100      	bne.n	8000dac <__aeabi_fmul+0x190>
 8000daa:	e07d      	b.n	8000ea8 <__aeabi_fmul+0x28c>
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	03d2      	lsls	r2, r2, #15
 8000db0:	4332      	orrs	r2, r6
 8000db2:	0252      	lsls	r2, r2, #9
 8000db4:	0a52      	lsrs	r2, r2, #9
 8000db6:	23ff      	movs	r3, #255	@ 0xff
 8000db8:	05d8      	lsls	r0, r3, #23
 8000dba:	07ed      	lsls	r5, r5, #31
 8000dbc:	4310      	orrs	r0, r2
 8000dbe:	4328      	orrs	r0, r5
 8000dc0:	bce0      	pop	{r5, r6, r7}
 8000dc2:	46ba      	mov	sl, r7
 8000dc4:	46b1      	mov	r9, r6
 8000dc6:	46a8      	mov	r8, r5
 8000dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dca:	2301      	movs	r3, #1
 8000dcc:	0015      	movs	r5, r2
 8000dce:	0871      	lsrs	r1, r6, #1
 8000dd0:	401e      	ands	r6, r3
 8000dd2:	430e      	orrs	r6, r1
 8000dd4:	0023      	movs	r3, r4
 8000dd6:	3380      	adds	r3, #128	@ 0x80
 8000dd8:	1c61      	adds	r1, r4, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	dd41      	ble.n	8000e62 <__aeabi_fmul+0x246>
 8000dde:	0772      	lsls	r2, r6, #29
 8000de0:	d094      	beq.n	8000d0c <__aeabi_fmul+0xf0>
 8000de2:	220f      	movs	r2, #15
 8000de4:	4032      	ands	r2, r6
 8000de6:	2a04      	cmp	r2, #4
 8000de8:	d000      	beq.n	8000dec <__aeabi_fmul+0x1d0>
 8000dea:	e78e      	b.n	8000d0a <__aeabi_fmul+0xee>
 8000dec:	e78e      	b.n	8000d0c <__aeabi_fmul+0xf0>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d105      	bne.n	8000dfe <__aeabi_fmul+0x1e2>
 8000df2:	2304      	movs	r3, #4
 8000df4:	4699      	mov	r9, r3
 8000df6:	3b03      	subs	r3, #3
 8000df8:	2400      	movs	r4, #0
 8000dfa:	469a      	mov	sl, r3
 8000dfc:	e726      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000dfe:	0030      	movs	r0, r6
 8000e00:	f001 fae8 	bl	80023d4 <__clzsi2>
 8000e04:	2476      	movs	r4, #118	@ 0x76
 8000e06:	1f43      	subs	r3, r0, #5
 8000e08:	409e      	lsls	r6, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4264      	negs	r4, r4
 8000e0e:	4699      	mov	r9, r3
 8000e10:	469a      	mov	sl, r3
 8000e12:	1a24      	subs	r4, r4, r0
 8000e14:	e71a      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000e16:	4640      	mov	r0, r8
 8000e18:	f001 fadc 	bl	80023d4 <__clzsi2>
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	1a24      	subs	r4, r4, r0
 8000e20:	3c76      	subs	r4, #118	@ 0x76
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	dca1      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000e26:	4643      	mov	r3, r8
 8000e28:	3805      	subs	r0, #5
 8000e2a:	4083      	lsls	r3, r0
 8000e2c:	407d      	eors	r5, r7
 8000e2e:	4698      	mov	r8, r3
 8000e30:	b2ea      	uxtb	r2, r5
 8000e32:	e724      	b.n	8000c7e <__aeabi_fmul+0x62>
 8000e34:	464a      	mov	r2, r9
 8000e36:	3302      	adds	r3, #2
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	002a      	movs	r2, r5
 8000e3c:	407a      	eors	r2, r7
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	dc92      	bgt.n	8000d6a <__aeabi_fmul+0x14e>
 8000e44:	4649      	mov	r1, r9
 8000e46:	0015      	movs	r5, r2
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d026      	beq.n	8000e9a <__aeabi_fmul+0x27e>
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	2002      	movs	r0, #2
 8000e50:	e719      	b.n	8000c86 <__aeabi_fmul+0x6a>
 8000e52:	230c      	movs	r3, #12
 8000e54:	4699      	mov	r9, r3
 8000e56:	3b09      	subs	r3, #9
 8000e58:	24ff      	movs	r4, #255	@ 0xff
 8000e5a:	469a      	mov	sl, r3
 8000e5c:	e6f6      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000e5e:	0015      	movs	r5, r2
 8000e60:	0021      	movs	r1, r4
 8000e62:	2201      	movs	r2, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b1b      	cmp	r3, #27
 8000e68:	dd00      	ble.n	8000e6c <__aeabi_fmul+0x250>
 8000e6a:	e786      	b.n	8000d7a <__aeabi_fmul+0x15e>
 8000e6c:	319e      	adds	r1, #158	@ 0x9e
 8000e6e:	0032      	movs	r2, r6
 8000e70:	408e      	lsls	r6, r1
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	1e73      	subs	r3, r6, #1
 8000e76:	419e      	sbcs	r6, r3
 8000e78:	4332      	orrs	r2, r6
 8000e7a:	0753      	lsls	r3, r2, #29
 8000e7c:	d004      	beq.n	8000e88 <__aeabi_fmul+0x26c>
 8000e7e:	230f      	movs	r3, #15
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d000      	beq.n	8000e88 <__aeabi_fmul+0x26c>
 8000e86:	3204      	adds	r2, #4
 8000e88:	0153      	lsls	r3, r2, #5
 8000e8a:	d510      	bpl.n	8000eae <__aeabi_fmul+0x292>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	e792      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000e92:	003d      	movs	r5, r7
 8000e94:	4646      	mov	r6, r8
 8000e96:	4682      	mov	sl, r0
 8000e98:	e767      	b.n	8000d6a <__aeabi_fmul+0x14e>
 8000e9a:	23ff      	movs	r3, #255	@ 0xff
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	e78b      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000ea0:	2280      	movs	r2, #128	@ 0x80
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	03d2      	lsls	r2, r2, #15
 8000ea6:	e786      	b.n	8000db6 <__aeabi_fmul+0x19a>
 8000ea8:	003d      	movs	r5, r7
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	e783      	b.n	8000db6 <__aeabi_fmul+0x19a>
 8000eae:	0192      	lsls	r2, r2, #6
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	0a52      	lsrs	r2, r2, #9
 8000eb4:	e780      	b.n	8000db8 <__aeabi_fmul+0x19c>
 8000eb6:	003d      	movs	r5, r7
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e777      	b.n	8000dac <__aeabi_fmul+0x190>
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	407a      	eors	r2, r7
 8000ec2:	408b      	lsls	r3, r1
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	e6e9      	b.n	8000c9e <__aeabi_fmul+0x82>
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__aeabi_fsub>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	4647      	mov	r7, r8
 8000ed4:	46ce      	mov	lr, r9
 8000ed6:	0243      	lsls	r3, r0, #9
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	0a5f      	lsrs	r7, r3, #9
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	0045      	lsls	r5, r0, #1
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	024b      	lsls	r3, r1, #9
 8000ee6:	0fc4      	lsrs	r4, r0, #31
 8000ee8:	0fce      	lsrs	r6, r1, #31
 8000eea:	0e2d      	lsrs	r5, r5, #24
 8000eec:	0a58      	lsrs	r0, r3, #9
 8000eee:	0e12      	lsrs	r2, r2, #24
 8000ef0:	0999      	lsrs	r1, r3, #6
 8000ef2:	2aff      	cmp	r2, #255	@ 0xff
 8000ef4:	d06b      	beq.n	8000fce <__aeabi_fsub+0xfe>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	405e      	eors	r6, r3
 8000efa:	1aab      	subs	r3, r5, r2
 8000efc:	42b4      	cmp	r4, r6
 8000efe:	d04b      	beq.n	8000f98 <__aeabi_fsub+0xc8>
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_fsub+0x36>
 8000f04:	e0ff      	b.n	8001106 <__aeabi_fsub+0x236>
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x3c>
 8000f0a:	e088      	b.n	800101e <__aeabi_fsub+0x14e>
 8000f0c:	2dff      	cmp	r5, #255	@ 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x42>
 8000f10:	e0ef      	b.n	80010f2 <__aeabi_fsub+0x222>
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	04d2      	lsls	r2, r2, #19
 8000f16:	4311      	orrs	r1, r2
 8000f18:	2001      	movs	r0, #1
 8000f1a:	2b1b      	cmp	r3, #27
 8000f1c:	dc08      	bgt.n	8000f30 <__aeabi_fsub+0x60>
 8000f1e:	0008      	movs	r0, r1
 8000f20:	2220      	movs	r2, #32
 8000f22:	40d8      	lsrs	r0, r3
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	4099      	lsls	r1, r3
 8000f28:	000b      	movs	r3, r1
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	4193      	sbcs	r3, r2
 8000f2e:	4318      	orrs	r0, r3
 8000f30:	4663      	mov	r3, ip
 8000f32:	1a1b      	subs	r3, r3, r0
 8000f34:	469c      	mov	ip, r3
 8000f36:	4663      	mov	r3, ip
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	d400      	bmi.n	8000f3e <__aeabi_fsub+0x6e>
 8000f3c:	e0cd      	b.n	80010da <__aeabi_fsub+0x20a>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	019f      	lsls	r7, r3, #6
 8000f42:	09bf      	lsrs	r7, r7, #6
 8000f44:	0038      	movs	r0, r7
 8000f46:	f001 fa45 	bl	80023d4 <__clzsi2>
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	3805      	subs	r0, #5
 8000f4e:	4083      	lsls	r3, r0
 8000f50:	4285      	cmp	r5, r0
 8000f52:	dc00      	bgt.n	8000f56 <__aeabi_fsub+0x86>
 8000f54:	e0a2      	b.n	800109c <__aeabi_fsub+0x1cc>
 8000f56:	4ab7      	ldr	r2, [pc, #732]	@ (8001234 <__aeabi_fsub+0x364>)
 8000f58:	1a2d      	subs	r5, r5, r0
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	4694      	mov	ip, r2
 8000f5e:	075a      	lsls	r2, r3, #29
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x94>
 8000f62:	e0c3      	b.n	80010ec <__aeabi_fsub+0x21c>
 8000f64:	220f      	movs	r2, #15
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x9e>
 8000f6c:	e0be      	b.n	80010ec <__aeabi_fsub+0x21c>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	4698      	mov	r8, r3
 8000f72:	44c4      	add	ip, r8
 8000f74:	4663      	mov	r3, ip
 8000f76:	015b      	lsls	r3, r3, #5
 8000f78:	d400      	bmi.n	8000f7c <__aeabi_fsub+0xac>
 8000f7a:	e0b7      	b.n	80010ec <__aeabi_fsub+0x21c>
 8000f7c:	1c68      	adds	r0, r5, #1
 8000f7e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f80:	d000      	beq.n	8000f84 <__aeabi_fsub+0xb4>
 8000f82:	e0a5      	b.n	80010d0 <__aeabi_fsub+0x200>
 8000f84:	20ff      	movs	r0, #255	@ 0xff
 8000f86:	2200      	movs	r2, #0
 8000f88:	05c0      	lsls	r0, r0, #23
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	07e4      	lsls	r4, r4, #31
 8000f8e:	4320      	orrs	r0, r4
 8000f90:	bcc0      	pop	{r6, r7}
 8000f92:	46b9      	mov	r9, r7
 8000f94:	46b0      	mov	r8, r6
 8000f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_fsub+0xce>
 8000f9c:	e1eb      	b.n	8001376 <__aeabi_fsub+0x4a6>
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	d046      	beq.n	8001030 <__aeabi_fsub+0x160>
 8000fa2:	2dff      	cmp	r5, #255	@ 0xff
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0xd8>
 8000fa6:	e0a4      	b.n	80010f2 <__aeabi_fsub+0x222>
 8000fa8:	2280      	movs	r2, #128	@ 0x80
 8000faa:	04d2      	lsls	r2, r2, #19
 8000fac:	4311      	orrs	r1, r2
 8000fae:	2b1b      	cmp	r3, #27
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_fsub+0xe4>
 8000fb2:	e0fb      	b.n	80011ac <__aeabi_fsub+0x2dc>
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	4698      	mov	r8, r3
 8000fb8:	002b      	movs	r3, r5
 8000fba:	44c4      	add	ip, r8
 8000fbc:	4662      	mov	r2, ip
 8000fbe:	08d7      	lsrs	r7, r2, #3
 8000fc0:	2bff      	cmp	r3, #255	@ 0xff
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0xf6>
 8000fc4:	e095      	b.n	80010f2 <__aeabi_fsub+0x222>
 8000fc6:	027a      	lsls	r2, r7, #9
 8000fc8:	0a52      	lsrs	r2, r2, #9
 8000fca:	b2d8      	uxtb	r0, r3
 8000fcc:	e7dc      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8000fce:	002b      	movs	r3, r5
 8000fd0:	3bff      	subs	r3, #255	@ 0xff
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	d118      	bne.n	800100a <__aeabi_fsub+0x13a>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	405e      	eors	r6, r3
 8000fdc:	42b4      	cmp	r4, r6
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_fsub+0x112>
 8000fe0:	e0ca      	b.n	8001178 <__aeabi_fsub+0x2a8>
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d02d      	beq.n	8001044 <__aeabi_fsub+0x174>
 8000fe8:	2d00      	cmp	r5, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x11e>
 8000fec:	e13c      	b.n	8001268 <__aeabi_fsub+0x398>
 8000fee:	23ff      	movs	r3, #255	@ 0xff
 8000ff0:	4664      	mov	r4, ip
 8000ff2:	2c00      	cmp	r4, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x128>
 8000ff6:	e15f      	b.n	80012b8 <__aeabi_fsub+0x3e8>
 8000ff8:	1e5d      	subs	r5, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x130>
 8000ffe:	e174      	b.n	80012ea <__aeabi_fsub+0x41a>
 8001000:	0034      	movs	r4, r6
 8001002:	2bff      	cmp	r3, #255	@ 0xff
 8001004:	d074      	beq.n	80010f0 <__aeabi_fsub+0x220>
 8001006:	002b      	movs	r3, r5
 8001008:	e103      	b.n	8001212 <__aeabi_fsub+0x342>
 800100a:	42b4      	cmp	r4, r6
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x140>
 800100e:	e09c      	b.n	800114a <__aeabi_fsub+0x27a>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d017      	beq.n	8001044 <__aeabi_fsub+0x174>
 8001014:	2d00      	cmp	r5, #0
 8001016:	d0ea      	beq.n	8000fee <__aeabi_fsub+0x11e>
 8001018:	0007      	movs	r7, r0
 800101a:	0034      	movs	r4, r6
 800101c:	e06c      	b.n	80010f8 <__aeabi_fsub+0x228>
 800101e:	2900      	cmp	r1, #0
 8001020:	d0cc      	beq.n	8000fbc <__aeabi_fsub+0xec>
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d02b      	beq.n	8001080 <__aeabi_fsub+0x1b0>
 8001028:	2bff      	cmp	r3, #255	@ 0xff
 800102a:	d062      	beq.n	80010f2 <__aeabi_fsub+0x222>
 800102c:	0013      	movs	r3, r2
 800102e:	e773      	b.n	8000f18 <__aeabi_fsub+0x48>
 8001030:	2900      	cmp	r1, #0
 8001032:	d0c3      	beq.n	8000fbc <__aeabi_fsub+0xec>
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	2b01      	cmp	r3, #1
 8001038:	d100      	bne.n	800103c <__aeabi_fsub+0x16c>
 800103a:	e11e      	b.n	800127a <__aeabi_fsub+0x3aa>
 800103c:	2bff      	cmp	r3, #255	@ 0xff
 800103e:	d058      	beq.n	80010f2 <__aeabi_fsub+0x222>
 8001040:	0013      	movs	r3, r2
 8001042:	e7b4      	b.n	8000fae <__aeabi_fsub+0xde>
 8001044:	22fe      	movs	r2, #254	@ 0xfe
 8001046:	1c6b      	adds	r3, r5, #1
 8001048:	421a      	tst	r2, r3
 800104a:	d10d      	bne.n	8001068 <__aeabi_fsub+0x198>
 800104c:	2d00      	cmp	r5, #0
 800104e:	d060      	beq.n	8001112 <__aeabi_fsub+0x242>
 8001050:	4663      	mov	r3, ip
 8001052:	2b00      	cmp	r3, #0
 8001054:	d000      	beq.n	8001058 <__aeabi_fsub+0x188>
 8001056:	e120      	b.n	800129a <__aeabi_fsub+0x3ca>
 8001058:	2900      	cmp	r1, #0
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0x18e>
 800105c:	e128      	b.n	80012b0 <__aeabi_fsub+0x3e0>
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	2400      	movs	r4, #0
 8001062:	20ff      	movs	r0, #255	@ 0xff
 8001064:	03d2      	lsls	r2, r2, #15
 8001066:	e78f      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001068:	4663      	mov	r3, ip
 800106a:	1a5f      	subs	r7, r3, r1
 800106c:	017b      	lsls	r3, r7, #5
 800106e:	d500      	bpl.n	8001072 <__aeabi_fsub+0x1a2>
 8001070:	e0fe      	b.n	8001270 <__aeabi_fsub+0x3a0>
 8001072:	2f00      	cmp	r7, #0
 8001074:	d000      	beq.n	8001078 <__aeabi_fsub+0x1a8>
 8001076:	e765      	b.n	8000f44 <__aeabi_fsub+0x74>
 8001078:	2400      	movs	r4, #0
 800107a:	2000      	movs	r0, #0
 800107c:	2200      	movs	r2, #0
 800107e:	e783      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001080:	4663      	mov	r3, ip
 8001082:	1a59      	subs	r1, r3, r1
 8001084:	014b      	lsls	r3, r1, #5
 8001086:	d400      	bmi.n	800108a <__aeabi_fsub+0x1ba>
 8001088:	e119      	b.n	80012be <__aeabi_fsub+0x3ee>
 800108a:	018f      	lsls	r7, r1, #6
 800108c:	09bf      	lsrs	r7, r7, #6
 800108e:	0038      	movs	r0, r7
 8001090:	f001 f9a0 	bl	80023d4 <__clzsi2>
 8001094:	003b      	movs	r3, r7
 8001096:	3805      	subs	r0, #5
 8001098:	4083      	lsls	r3, r0
 800109a:	2501      	movs	r5, #1
 800109c:	2220      	movs	r2, #32
 800109e:	1b40      	subs	r0, r0, r5
 80010a0:	3001      	adds	r0, #1
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	0019      	movs	r1, r3
 80010a6:	4093      	lsls	r3, r2
 80010a8:	40c1      	lsrs	r1, r0
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	4193      	sbcs	r3, r2
 80010ae:	4319      	orrs	r1, r3
 80010b0:	468c      	mov	ip, r1
 80010b2:	1e0b      	subs	r3, r1, #0
 80010b4:	d0e1      	beq.n	800107a <__aeabi_fsub+0x1aa>
 80010b6:	075b      	lsls	r3, r3, #29
 80010b8:	d100      	bne.n	80010bc <__aeabi_fsub+0x1ec>
 80010ba:	e152      	b.n	8001362 <__aeabi_fsub+0x492>
 80010bc:	230f      	movs	r3, #15
 80010be:	2500      	movs	r5, #0
 80010c0:	400b      	ands	r3, r1
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fsub+0x1f8>
 80010c6:	e752      	b.n	8000f6e <__aeabi_fsub+0x9e>
 80010c8:	2001      	movs	r0, #1
 80010ca:	014a      	lsls	r2, r1, #5
 80010cc:	d400      	bmi.n	80010d0 <__aeabi_fsub+0x200>
 80010ce:	e092      	b.n	80011f6 <__aeabi_fsub+0x326>
 80010d0:	b2c0      	uxtb	r0, r0
 80010d2:	4663      	mov	r3, ip
 80010d4:	019a      	lsls	r2, r3, #6
 80010d6:	0a52      	lsrs	r2, r2, #9
 80010d8:	e756      	b.n	8000f88 <__aeabi_fsub+0xb8>
 80010da:	4663      	mov	r3, ip
 80010dc:	075b      	lsls	r3, r3, #29
 80010de:	d005      	beq.n	80010ec <__aeabi_fsub+0x21c>
 80010e0:	230f      	movs	r3, #15
 80010e2:	4662      	mov	r2, ip
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fsub+0x21c>
 80010ea:	e740      	b.n	8000f6e <__aeabi_fsub+0x9e>
 80010ec:	002b      	movs	r3, r5
 80010ee:	e765      	b.n	8000fbc <__aeabi_fsub+0xec>
 80010f0:	0007      	movs	r7, r0
 80010f2:	2f00      	cmp	r7, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x228>
 80010f6:	e745      	b.n	8000f84 <__aeabi_fsub+0xb4>
 80010f8:	2280      	movs	r2, #128	@ 0x80
 80010fa:	03d2      	lsls	r2, r2, #15
 80010fc:	433a      	orrs	r2, r7
 80010fe:	0252      	lsls	r2, r2, #9
 8001100:	20ff      	movs	r0, #255	@ 0xff
 8001102:	0a52      	lsrs	r2, r2, #9
 8001104:	e740      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001106:	2b00      	cmp	r3, #0
 8001108:	d179      	bne.n	80011fe <__aeabi_fsub+0x32e>
 800110a:	22fe      	movs	r2, #254	@ 0xfe
 800110c:	1c6b      	adds	r3, r5, #1
 800110e:	421a      	tst	r2, r3
 8001110:	d1aa      	bne.n	8001068 <__aeabi_fsub+0x198>
 8001112:	4663      	mov	r3, ip
 8001114:	2b00      	cmp	r3, #0
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0x24a>
 8001118:	e0f5      	b.n	8001306 <__aeabi_fsub+0x436>
 800111a:	2900      	cmp	r1, #0
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x250>
 800111e:	e0d1      	b.n	80012c4 <__aeabi_fsub+0x3f4>
 8001120:	1a5f      	subs	r7, r3, r1
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	04db      	lsls	r3, r3, #19
 8001126:	421f      	tst	r7, r3
 8001128:	d100      	bne.n	800112c <__aeabi_fsub+0x25c>
 800112a:	e10e      	b.n	800134a <__aeabi_fsub+0x47a>
 800112c:	4662      	mov	r2, ip
 800112e:	2401      	movs	r4, #1
 8001130:	1a8a      	subs	r2, r1, r2
 8001132:	4694      	mov	ip, r2
 8001134:	2000      	movs	r0, #0
 8001136:	4034      	ands	r4, r6
 8001138:	2a00      	cmp	r2, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x26e>
 800113c:	e724      	b.n	8000f88 <__aeabi_fsub+0xb8>
 800113e:	2001      	movs	r0, #1
 8001140:	421a      	tst	r2, r3
 8001142:	d1c6      	bne.n	80010d2 <__aeabi_fsub+0x202>
 8001144:	2300      	movs	r3, #0
 8001146:	08d7      	lsrs	r7, r2, #3
 8001148:	e73d      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 800114a:	2b00      	cmp	r3, #0
 800114c:	d017      	beq.n	800117e <__aeabi_fsub+0x2ae>
 800114e:	2d00      	cmp	r5, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_fsub+0x284>
 8001152:	e0af      	b.n	80012b4 <__aeabi_fsub+0x3e4>
 8001154:	23ff      	movs	r3, #255	@ 0xff
 8001156:	4665      	mov	r5, ip
 8001158:	2d00      	cmp	r5, #0
 800115a:	d100      	bne.n	800115e <__aeabi_fsub+0x28e>
 800115c:	e0ad      	b.n	80012ba <__aeabi_fsub+0x3ea>
 800115e:	1e5e      	subs	r6, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0x296>
 8001164:	e089      	b.n	800127a <__aeabi_fsub+0x3aa>
 8001166:	2bff      	cmp	r3, #255	@ 0xff
 8001168:	d0c2      	beq.n	80010f0 <__aeabi_fsub+0x220>
 800116a:	2e1b      	cmp	r6, #27
 800116c:	dc00      	bgt.n	8001170 <__aeabi_fsub+0x2a0>
 800116e:	e0ab      	b.n	80012c8 <__aeabi_fsub+0x3f8>
 8001170:	1d4b      	adds	r3, r1, #5
 8001172:	469c      	mov	ip, r3
 8001174:	0013      	movs	r3, r2
 8001176:	e721      	b.n	8000fbc <__aeabi_fsub+0xec>
 8001178:	464b      	mov	r3, r9
 800117a:	2b00      	cmp	r3, #0
 800117c:	d170      	bne.n	8001260 <__aeabi_fsub+0x390>
 800117e:	22fe      	movs	r2, #254	@ 0xfe
 8001180:	1c6b      	adds	r3, r5, #1
 8001182:	421a      	tst	r2, r3
 8001184:	d15e      	bne.n	8001244 <__aeabi_fsub+0x374>
 8001186:	2d00      	cmp	r5, #0
 8001188:	d000      	beq.n	800118c <__aeabi_fsub+0x2bc>
 800118a:	e0c3      	b.n	8001314 <__aeabi_fsub+0x444>
 800118c:	4663      	mov	r3, ip
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_fsub+0x2c4>
 8001192:	e0d0      	b.n	8001336 <__aeabi_fsub+0x466>
 8001194:	2900      	cmp	r1, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x2ca>
 8001198:	e094      	b.n	80012c4 <__aeabi_fsub+0x3f4>
 800119a:	000a      	movs	r2, r1
 800119c:	4462      	add	r2, ip
 800119e:	0153      	lsls	r3, r2, #5
 80011a0:	d400      	bmi.n	80011a4 <__aeabi_fsub+0x2d4>
 80011a2:	e0d8      	b.n	8001356 <__aeabi_fsub+0x486>
 80011a4:	0192      	lsls	r2, r2, #6
 80011a6:	2001      	movs	r0, #1
 80011a8:	0a52      	lsrs	r2, r2, #9
 80011aa:	e6ed      	b.n	8000f88 <__aeabi_fsub+0xb8>
 80011ac:	0008      	movs	r0, r1
 80011ae:	2220      	movs	r2, #32
 80011b0:	40d8      	lsrs	r0, r3
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4099      	lsls	r1, r3
 80011b6:	000b      	movs	r3, r1
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	4193      	sbcs	r3, r2
 80011bc:	4303      	orrs	r3, r0
 80011be:	449c      	add	ip, r3
 80011c0:	4663      	mov	r3, ip
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	d589      	bpl.n	80010da <__aeabi_fsub+0x20a>
 80011c6:	3501      	adds	r5, #1
 80011c8:	2dff      	cmp	r5, #255	@ 0xff
 80011ca:	d100      	bne.n	80011ce <__aeabi_fsub+0x2fe>
 80011cc:	e6da      	b.n	8000f84 <__aeabi_fsub+0xb4>
 80011ce:	4662      	mov	r2, ip
 80011d0:	2301      	movs	r3, #1
 80011d2:	4919      	ldr	r1, [pc, #100]	@ (8001238 <__aeabi_fsub+0x368>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	0852      	lsrs	r2, r2, #1
 80011d8:	400a      	ands	r2, r1
 80011da:	431a      	orrs	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	4694      	mov	ip, r2
 80011e0:	075b      	lsls	r3, r3, #29
 80011e2:	d004      	beq.n	80011ee <__aeabi_fsub+0x31e>
 80011e4:	230f      	movs	r3, #15
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d000      	beq.n	80011ee <__aeabi_fsub+0x31e>
 80011ec:	e6bf      	b.n	8000f6e <__aeabi_fsub+0x9e>
 80011ee:	4663      	mov	r3, ip
 80011f0:	015b      	lsls	r3, r3, #5
 80011f2:	d500      	bpl.n	80011f6 <__aeabi_fsub+0x326>
 80011f4:	e6c2      	b.n	8000f7c <__aeabi_fsub+0xac>
 80011f6:	4663      	mov	r3, ip
 80011f8:	08df      	lsrs	r7, r3, #3
 80011fa:	002b      	movs	r3, r5
 80011fc:	e6e3      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80011fe:	1b53      	subs	r3, r2, r5
 8001200:	2d00      	cmp	r5, #0
 8001202:	d100      	bne.n	8001206 <__aeabi_fsub+0x336>
 8001204:	e6f4      	b.n	8000ff0 <__aeabi_fsub+0x120>
 8001206:	2080      	movs	r0, #128	@ 0x80
 8001208:	4664      	mov	r4, ip
 800120a:	04c0      	lsls	r0, r0, #19
 800120c:	4304      	orrs	r4, r0
 800120e:	46a4      	mov	ip, r4
 8001210:	0034      	movs	r4, r6
 8001212:	2001      	movs	r0, #1
 8001214:	2b1b      	cmp	r3, #27
 8001216:	dc09      	bgt.n	800122c <__aeabi_fsub+0x35c>
 8001218:	2520      	movs	r5, #32
 800121a:	4660      	mov	r0, ip
 800121c:	40d8      	lsrs	r0, r3
 800121e:	1aeb      	subs	r3, r5, r3
 8001220:	4665      	mov	r5, ip
 8001222:	409d      	lsls	r5, r3
 8001224:	002b      	movs	r3, r5
 8001226:	1e5d      	subs	r5, r3, #1
 8001228:	41ab      	sbcs	r3, r5
 800122a:	4318      	orrs	r0, r3
 800122c:	1a0b      	subs	r3, r1, r0
 800122e:	469c      	mov	ip, r3
 8001230:	0015      	movs	r5, r2
 8001232:	e680      	b.n	8000f36 <__aeabi_fsub+0x66>
 8001234:	fbffffff 	.word	0xfbffffff
 8001238:	7dffffff 	.word	0x7dffffff
 800123c:	22fe      	movs	r2, #254	@ 0xfe
 800123e:	1c6b      	adds	r3, r5, #1
 8001240:	4213      	tst	r3, r2
 8001242:	d0a3      	beq.n	800118c <__aeabi_fsub+0x2bc>
 8001244:	2bff      	cmp	r3, #255	@ 0xff
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0x37a>
 8001248:	e69c      	b.n	8000f84 <__aeabi_fsub+0xb4>
 800124a:	4461      	add	r1, ip
 800124c:	0849      	lsrs	r1, r1, #1
 800124e:	074a      	lsls	r2, r1, #29
 8001250:	d049      	beq.n	80012e6 <__aeabi_fsub+0x416>
 8001252:	220f      	movs	r2, #15
 8001254:	400a      	ands	r2, r1
 8001256:	2a04      	cmp	r2, #4
 8001258:	d045      	beq.n	80012e6 <__aeabi_fsub+0x416>
 800125a:	1d0a      	adds	r2, r1, #4
 800125c:	4694      	mov	ip, r2
 800125e:	e6ad      	b.n	8000fbc <__aeabi_fsub+0xec>
 8001260:	2d00      	cmp	r5, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x396>
 8001264:	e776      	b.n	8001154 <__aeabi_fsub+0x284>
 8001266:	e68d      	b.n	8000f84 <__aeabi_fsub+0xb4>
 8001268:	0034      	movs	r4, r6
 800126a:	20ff      	movs	r0, #255	@ 0xff
 800126c:	2200      	movs	r2, #0
 800126e:	e68b      	b.n	8000f88 <__aeabi_fsub+0xb8>
 8001270:	4663      	mov	r3, ip
 8001272:	2401      	movs	r4, #1
 8001274:	1acf      	subs	r7, r1, r3
 8001276:	4034      	ands	r4, r6
 8001278:	e664      	b.n	8000f44 <__aeabi_fsub+0x74>
 800127a:	4461      	add	r1, ip
 800127c:	014b      	lsls	r3, r1, #5
 800127e:	d56d      	bpl.n	800135c <__aeabi_fsub+0x48c>
 8001280:	0848      	lsrs	r0, r1, #1
 8001282:	4944      	ldr	r1, [pc, #272]	@ (8001394 <__aeabi_fsub+0x4c4>)
 8001284:	4001      	ands	r1, r0
 8001286:	0743      	lsls	r3, r0, #29
 8001288:	d02c      	beq.n	80012e4 <__aeabi_fsub+0x414>
 800128a:	230f      	movs	r3, #15
 800128c:	4003      	ands	r3, r0
 800128e:	2b04      	cmp	r3, #4
 8001290:	d028      	beq.n	80012e4 <__aeabi_fsub+0x414>
 8001292:	1d0b      	adds	r3, r1, #4
 8001294:	469c      	mov	ip, r3
 8001296:	2302      	movs	r3, #2
 8001298:	e690      	b.n	8000fbc <__aeabi_fsub+0xec>
 800129a:	2900      	cmp	r1, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x3d0>
 800129e:	e72b      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	03db      	lsls	r3, r3, #15
 80012a4:	429f      	cmp	r7, r3
 80012a6:	d200      	bcs.n	80012aa <__aeabi_fsub+0x3da>
 80012a8:	e726      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d300      	bcc.n	80012b0 <__aeabi_fsub+0x3e0>
 80012ae:	e723      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012b0:	2401      	movs	r4, #1
 80012b2:	4034      	ands	r4, r6
 80012b4:	0007      	movs	r7, r0
 80012b6:	e71f      	b.n	80010f8 <__aeabi_fsub+0x228>
 80012b8:	0034      	movs	r4, r6
 80012ba:	468c      	mov	ip, r1
 80012bc:	e67e      	b.n	8000fbc <__aeabi_fsub+0xec>
 80012be:	2301      	movs	r3, #1
 80012c0:	08cf      	lsrs	r7, r1, #3
 80012c2:	e680      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80012c4:	2300      	movs	r3, #0
 80012c6:	e67e      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80012c8:	2020      	movs	r0, #32
 80012ca:	4665      	mov	r5, ip
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	4085      	lsls	r5, r0
 80012d0:	4663      	mov	r3, ip
 80012d2:	0028      	movs	r0, r5
 80012d4:	40f3      	lsrs	r3, r6
 80012d6:	1e45      	subs	r5, r0, #1
 80012d8:	41a8      	sbcs	r0, r5
 80012da:	4303      	orrs	r3, r0
 80012dc:	469c      	mov	ip, r3
 80012de:	0015      	movs	r5, r2
 80012e0:	448c      	add	ip, r1
 80012e2:	e76d      	b.n	80011c0 <__aeabi_fsub+0x2f0>
 80012e4:	2302      	movs	r3, #2
 80012e6:	08cf      	lsrs	r7, r1, #3
 80012e8:	e66d      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 80012ea:	1b0f      	subs	r7, r1, r4
 80012ec:	017b      	lsls	r3, r7, #5
 80012ee:	d528      	bpl.n	8001342 <__aeabi_fsub+0x472>
 80012f0:	01bf      	lsls	r7, r7, #6
 80012f2:	09bf      	lsrs	r7, r7, #6
 80012f4:	0038      	movs	r0, r7
 80012f6:	f001 f86d 	bl	80023d4 <__clzsi2>
 80012fa:	003b      	movs	r3, r7
 80012fc:	3805      	subs	r0, #5
 80012fe:	4083      	lsls	r3, r0
 8001300:	0034      	movs	r4, r6
 8001302:	2501      	movs	r5, #1
 8001304:	e6ca      	b.n	800109c <__aeabi_fsub+0x1cc>
 8001306:	2900      	cmp	r1, #0
 8001308:	d100      	bne.n	800130c <__aeabi_fsub+0x43c>
 800130a:	e6b5      	b.n	8001078 <__aeabi_fsub+0x1a8>
 800130c:	2401      	movs	r4, #1
 800130e:	0007      	movs	r7, r0
 8001310:	4034      	ands	r4, r6
 8001312:	e658      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001314:	4663      	mov	r3, ip
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0x44c>
 800131a:	e6e9      	b.n	80010f0 <__aeabi_fsub+0x220>
 800131c:	2900      	cmp	r1, #0
 800131e:	d100      	bne.n	8001322 <__aeabi_fsub+0x452>
 8001320:	e6ea      	b.n	80010f8 <__aeabi_fsub+0x228>
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	03db      	lsls	r3, r3, #15
 8001326:	429f      	cmp	r7, r3
 8001328:	d200      	bcs.n	800132c <__aeabi_fsub+0x45c>
 800132a:	e6e5      	b.n	80010f8 <__aeabi_fsub+0x228>
 800132c:	4298      	cmp	r0, r3
 800132e:	d300      	bcc.n	8001332 <__aeabi_fsub+0x462>
 8001330:	e6e2      	b.n	80010f8 <__aeabi_fsub+0x228>
 8001332:	0007      	movs	r7, r0
 8001334:	e6e0      	b.n	80010f8 <__aeabi_fsub+0x228>
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_fsub+0x46c>
 800133a:	e69e      	b.n	800107a <__aeabi_fsub+0x1aa>
 800133c:	2300      	movs	r3, #0
 800133e:	08cf      	lsrs	r7, r1, #3
 8001340:	e641      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001342:	0034      	movs	r4, r6
 8001344:	2301      	movs	r3, #1
 8001346:	08ff      	lsrs	r7, r7, #3
 8001348:	e63d      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 800134a:	2f00      	cmp	r7, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_fsub+0x480>
 800134e:	e693      	b.n	8001078 <__aeabi_fsub+0x1a8>
 8001350:	2300      	movs	r3, #0
 8001352:	08ff      	lsrs	r7, r7, #3
 8001354:	e637      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001356:	2300      	movs	r3, #0
 8001358:	08d7      	lsrs	r7, r2, #3
 800135a:	e634      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 800135c:	2301      	movs	r3, #1
 800135e:	08cf      	lsrs	r7, r1, #3
 8001360:	e631      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001362:	2280      	movs	r2, #128	@ 0x80
 8001364:	000b      	movs	r3, r1
 8001366:	04d2      	lsls	r2, r2, #19
 8001368:	2001      	movs	r0, #1
 800136a:	4013      	ands	r3, r2
 800136c:	4211      	tst	r1, r2
 800136e:	d000      	beq.n	8001372 <__aeabi_fsub+0x4a2>
 8001370:	e6ae      	b.n	80010d0 <__aeabi_fsub+0x200>
 8001372:	08cf      	lsrs	r7, r1, #3
 8001374:	e627      	b.n	8000fc6 <__aeabi_fsub+0xf6>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d100      	bne.n	800137c <__aeabi_fsub+0x4ac>
 800137a:	e75f      	b.n	800123c <__aeabi_fsub+0x36c>
 800137c:	1b56      	subs	r6, r2, r5
 800137e:	2d00      	cmp	r5, #0
 8001380:	d101      	bne.n	8001386 <__aeabi_fsub+0x4b6>
 8001382:	0033      	movs	r3, r6
 8001384:	e6e7      	b.n	8001156 <__aeabi_fsub+0x286>
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	4660      	mov	r0, ip
 800138a:	04db      	lsls	r3, r3, #19
 800138c:	4318      	orrs	r0, r3
 800138e:	4684      	mov	ip, r0
 8001390:	e6eb      	b.n	800116a <__aeabi_fsub+0x29a>
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	7dffffff 	.word	0x7dffffff

08001398 <__aeabi_fcmpun>:
 8001398:	0243      	lsls	r3, r0, #9
 800139a:	024a      	lsls	r2, r1, #9
 800139c:	0040      	lsls	r0, r0, #1
 800139e:	0049      	lsls	r1, r1, #1
 80013a0:	0a5b      	lsrs	r3, r3, #9
 80013a2:	0a52      	lsrs	r2, r2, #9
 80013a4:	0e09      	lsrs	r1, r1, #24
 80013a6:	0e00      	lsrs	r0, r0, #24
 80013a8:	28ff      	cmp	r0, #255	@ 0xff
 80013aa:	d006      	beq.n	80013ba <__aeabi_fcmpun+0x22>
 80013ac:	2000      	movs	r0, #0
 80013ae:	29ff      	cmp	r1, #255	@ 0xff
 80013b0:	d102      	bne.n	80013b8 <__aeabi_fcmpun+0x20>
 80013b2:	1e53      	subs	r3, r2, #1
 80013b4:	419a      	sbcs	r2, r3
 80013b6:	0010      	movs	r0, r2
 80013b8:	4770      	bx	lr
 80013ba:	38fe      	subs	r0, #254	@ 0xfe
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1fb      	bne.n	80013b8 <__aeabi_fcmpun+0x20>
 80013c0:	e7f4      	b.n	80013ac <__aeabi_fcmpun+0x14>
 80013c2:	46c0      	nop			@ (mov r8, r8)

080013c4 <__aeabi_f2iz>:
 80013c4:	0241      	lsls	r1, r0, #9
 80013c6:	0042      	lsls	r2, r0, #1
 80013c8:	0fc3      	lsrs	r3, r0, #31
 80013ca:	0a49      	lsrs	r1, r1, #9
 80013cc:	2000      	movs	r0, #0
 80013ce:	0e12      	lsrs	r2, r2, #24
 80013d0:	2a7e      	cmp	r2, #126	@ 0x7e
 80013d2:	dd03      	ble.n	80013dc <__aeabi_f2iz+0x18>
 80013d4:	2a9d      	cmp	r2, #157	@ 0x9d
 80013d6:	dd02      	ble.n	80013de <__aeabi_f2iz+0x1a>
 80013d8:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <__aeabi_f2iz+0x3c>)
 80013da:	1898      	adds	r0, r3, r2
 80013dc:	4770      	bx	lr
 80013de:	2080      	movs	r0, #128	@ 0x80
 80013e0:	0400      	lsls	r0, r0, #16
 80013e2:	4301      	orrs	r1, r0
 80013e4:	2a95      	cmp	r2, #149	@ 0x95
 80013e6:	dc07      	bgt.n	80013f8 <__aeabi_f2iz+0x34>
 80013e8:	2096      	movs	r0, #150	@ 0x96
 80013ea:	1a82      	subs	r2, r0, r2
 80013ec:	40d1      	lsrs	r1, r2
 80013ee:	4248      	negs	r0, r1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f3      	bne.n	80013dc <__aeabi_f2iz+0x18>
 80013f4:	0008      	movs	r0, r1
 80013f6:	e7f1      	b.n	80013dc <__aeabi_f2iz+0x18>
 80013f8:	3a96      	subs	r2, #150	@ 0x96
 80013fa:	4091      	lsls	r1, r2
 80013fc:	e7f7      	b.n	80013ee <__aeabi_f2iz+0x2a>
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	7fffffff 	.word	0x7fffffff

08001404 <__aeabi_i2f>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	2800      	cmp	r0, #0
 8001408:	d012      	beq.n	8001430 <__aeabi_i2f+0x2c>
 800140a:	17c3      	asrs	r3, r0, #31
 800140c:	18c5      	adds	r5, r0, r3
 800140e:	405d      	eors	r5, r3
 8001410:	0fc4      	lsrs	r4, r0, #31
 8001412:	0028      	movs	r0, r5
 8001414:	f000 ffde 	bl	80023d4 <__clzsi2>
 8001418:	239e      	movs	r3, #158	@ 0x9e
 800141a:	1a1b      	subs	r3, r3, r0
 800141c:	2b96      	cmp	r3, #150	@ 0x96
 800141e:	dc0f      	bgt.n	8001440 <__aeabi_i2f+0x3c>
 8001420:	2808      	cmp	r0, #8
 8001422:	d038      	beq.n	8001496 <__aeabi_i2f+0x92>
 8001424:	3808      	subs	r0, #8
 8001426:	4085      	lsls	r5, r0
 8001428:	026d      	lsls	r5, r5, #9
 800142a:	0a6d      	lsrs	r5, r5, #9
 800142c:	b2d8      	uxtb	r0, r3
 800142e:	e002      	b.n	8001436 <__aeabi_i2f+0x32>
 8001430:	2400      	movs	r4, #0
 8001432:	2000      	movs	r0, #0
 8001434:	2500      	movs	r5, #0
 8001436:	05c0      	lsls	r0, r0, #23
 8001438:	4328      	orrs	r0, r5
 800143a:	07e4      	lsls	r4, r4, #31
 800143c:	4320      	orrs	r0, r4
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	2b99      	cmp	r3, #153	@ 0x99
 8001442:	dc14      	bgt.n	800146e <__aeabi_i2f+0x6a>
 8001444:	1f42      	subs	r2, r0, #5
 8001446:	4095      	lsls	r5, r2
 8001448:	002a      	movs	r2, r5
 800144a:	4915      	ldr	r1, [pc, #84]	@ (80014a0 <__aeabi_i2f+0x9c>)
 800144c:	4011      	ands	r1, r2
 800144e:	0755      	lsls	r5, r2, #29
 8001450:	d01c      	beq.n	800148c <__aeabi_i2f+0x88>
 8001452:	250f      	movs	r5, #15
 8001454:	402a      	ands	r2, r5
 8001456:	2a04      	cmp	r2, #4
 8001458:	d018      	beq.n	800148c <__aeabi_i2f+0x88>
 800145a:	3104      	adds	r1, #4
 800145c:	08ca      	lsrs	r2, r1, #3
 800145e:	0149      	lsls	r1, r1, #5
 8001460:	d515      	bpl.n	800148e <__aeabi_i2f+0x8a>
 8001462:	239f      	movs	r3, #159	@ 0x9f
 8001464:	0252      	lsls	r2, r2, #9
 8001466:	1a18      	subs	r0, r3, r0
 8001468:	0a55      	lsrs	r5, r2, #9
 800146a:	b2c0      	uxtb	r0, r0
 800146c:	e7e3      	b.n	8001436 <__aeabi_i2f+0x32>
 800146e:	2205      	movs	r2, #5
 8001470:	0029      	movs	r1, r5
 8001472:	1a12      	subs	r2, r2, r0
 8001474:	40d1      	lsrs	r1, r2
 8001476:	0002      	movs	r2, r0
 8001478:	321b      	adds	r2, #27
 800147a:	4095      	lsls	r5, r2
 800147c:	002a      	movs	r2, r5
 800147e:	1e55      	subs	r5, r2, #1
 8001480:	41aa      	sbcs	r2, r5
 8001482:	430a      	orrs	r2, r1
 8001484:	4906      	ldr	r1, [pc, #24]	@ (80014a0 <__aeabi_i2f+0x9c>)
 8001486:	4011      	ands	r1, r2
 8001488:	0755      	lsls	r5, r2, #29
 800148a:	d1e2      	bne.n	8001452 <__aeabi_i2f+0x4e>
 800148c:	08ca      	lsrs	r2, r1, #3
 800148e:	0252      	lsls	r2, r2, #9
 8001490:	0a55      	lsrs	r5, r2, #9
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	e7cf      	b.n	8001436 <__aeabi_i2f+0x32>
 8001496:	026d      	lsls	r5, r5, #9
 8001498:	0a6d      	lsrs	r5, r5, #9
 800149a:	308e      	adds	r0, #142	@ 0x8e
 800149c:	e7cb      	b.n	8001436 <__aeabi_i2f+0x32>
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	fbffffff 	.word	0xfbffffff

080014a4 <__aeabi_dmul>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	4657      	mov	r7, sl
 80014a8:	464e      	mov	r6, r9
 80014aa:	46de      	mov	lr, fp
 80014ac:	4645      	mov	r5, r8
 80014ae:	b5e0      	push	{r5, r6, r7, lr}
 80014b0:	001f      	movs	r7, r3
 80014b2:	030b      	lsls	r3, r1, #12
 80014b4:	0b1b      	lsrs	r3, r3, #12
 80014b6:	0016      	movs	r6, r2
 80014b8:	469a      	mov	sl, r3
 80014ba:	0fca      	lsrs	r2, r1, #31
 80014bc:	004b      	lsls	r3, r1, #1
 80014be:	0004      	movs	r4, r0
 80014c0:	4691      	mov	r9, r2
 80014c2:	b085      	sub	sp, #20
 80014c4:	0d5b      	lsrs	r3, r3, #21
 80014c6:	d100      	bne.n	80014ca <__aeabi_dmul+0x26>
 80014c8:	e1cf      	b.n	800186a <__aeabi_dmul+0x3c6>
 80014ca:	4acd      	ldr	r2, [pc, #820]	@ (8001800 <__aeabi_dmul+0x35c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d055      	beq.n	800157c <__aeabi_dmul+0xd8>
 80014d0:	4651      	mov	r1, sl
 80014d2:	0f42      	lsrs	r2, r0, #29
 80014d4:	00c9      	lsls	r1, r1, #3
 80014d6:	430a      	orrs	r2, r1
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	0409      	lsls	r1, r1, #16
 80014dc:	4311      	orrs	r1, r2
 80014de:	00c2      	lsls	r2, r0, #3
 80014e0:	4690      	mov	r8, r2
 80014e2:	4ac8      	ldr	r2, [pc, #800]	@ (8001804 <__aeabi_dmul+0x360>)
 80014e4:	468a      	mov	sl, r1
 80014e6:	4693      	mov	fp, r2
 80014e8:	449b      	add	fp, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	033c      	lsls	r4, r7, #12
 80014f2:	007b      	lsls	r3, r7, #1
 80014f4:	0ffa      	lsrs	r2, r7, #31
 80014f6:	9601      	str	r6, [sp, #4]
 80014f8:	0b24      	lsrs	r4, r4, #12
 80014fa:	0d5b      	lsrs	r3, r3, #21
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x5e>
 8001500:	e188      	b.n	8001814 <__aeabi_dmul+0x370>
 8001502:	4abf      	ldr	r2, [pc, #764]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x66>
 8001508:	e092      	b.n	8001630 <__aeabi_dmul+0x18c>
 800150a:	4abe      	ldr	r2, [pc, #760]	@ (8001804 <__aeabi_dmul+0x360>)
 800150c:	4694      	mov	ip, r2
 800150e:	4463      	add	r3, ip
 8001510:	449b      	add	fp, r3
 8001512:	2d0a      	cmp	r5, #10
 8001514:	dc42      	bgt.n	800159c <__aeabi_dmul+0xf8>
 8001516:	00e4      	lsls	r4, r4, #3
 8001518:	0f73      	lsrs	r3, r6, #29
 800151a:	4323      	orrs	r3, r4
 800151c:	2480      	movs	r4, #128	@ 0x80
 800151e:	4649      	mov	r1, r9
 8001520:	0424      	lsls	r4, r4, #16
 8001522:	431c      	orrs	r4, r3
 8001524:	00f3      	lsls	r3, r6, #3
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	9b00      	ldr	r3, [sp, #0]
 800152a:	2000      	movs	r0, #0
 800152c:	4059      	eors	r1, r3
 800152e:	b2cb      	uxtb	r3, r1
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	2d02      	cmp	r5, #2
 8001534:	dc00      	bgt.n	8001538 <__aeabi_dmul+0x94>
 8001536:	e094      	b.n	8001662 <__aeabi_dmul+0x1be>
 8001538:	2301      	movs	r3, #1
 800153a:	40ab      	lsls	r3, r5
 800153c:	001d      	movs	r5, r3
 800153e:	23a6      	movs	r3, #166	@ 0xa6
 8001540:	002a      	movs	r2, r5
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	401a      	ands	r2, r3
 8001546:	421d      	tst	r5, r3
 8001548:	d000      	beq.n	800154c <__aeabi_dmul+0xa8>
 800154a:	e229      	b.n	80019a0 <__aeabi_dmul+0x4fc>
 800154c:	2390      	movs	r3, #144	@ 0x90
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	421d      	tst	r5, r3
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0xb2>
 8001554:	e24d      	b.n	80019f2 <__aeabi_dmul+0x54e>
 8001556:	2300      	movs	r3, #0
 8001558:	2480      	movs	r4, #128	@ 0x80
 800155a:	4699      	mov	r9, r3
 800155c:	0324      	lsls	r4, r4, #12
 800155e:	4ba8      	ldr	r3, [pc, #672]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001560:	0010      	movs	r0, r2
 8001562:	464a      	mov	r2, r9
 8001564:	051b      	lsls	r3, r3, #20
 8001566:	4323      	orrs	r3, r4
 8001568:	07d2      	lsls	r2, r2, #31
 800156a:	4313      	orrs	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	b005      	add	sp, #20
 8001570:	bcf0      	pop	{r4, r5, r6, r7}
 8001572:	46bb      	mov	fp, r7
 8001574:	46b2      	mov	sl, r6
 8001576:	46a9      	mov	r9, r5
 8001578:	46a0      	mov	r8, r4
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157c:	4652      	mov	r2, sl
 800157e:	4302      	orrs	r2, r0
 8001580:	4690      	mov	r8, r2
 8001582:	d000      	beq.n	8001586 <__aeabi_dmul+0xe2>
 8001584:	e1ac      	b.n	80018e0 <__aeabi_dmul+0x43c>
 8001586:	469b      	mov	fp, r3
 8001588:	2302      	movs	r3, #2
 800158a:	4692      	mov	sl, r2
 800158c:	2508      	movs	r5, #8
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	e7ae      	b.n	80014f0 <__aeabi_dmul+0x4c>
 8001592:	9b00      	ldr	r3, [sp, #0]
 8001594:	46a2      	mov	sl, r4
 8001596:	4699      	mov	r9, r3
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	4698      	mov	r8, r3
 800159c:	9b02      	ldr	r3, [sp, #8]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0x100>
 80015a2:	e1ca      	b.n	800193a <__aeabi_dmul+0x496>
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x106>
 80015a8:	e192      	b.n	80018d0 <__aeabi_dmul+0x42c>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d110      	bne.n	80015d0 <__aeabi_dmul+0x12c>
 80015ae:	2300      	movs	r3, #0
 80015b0:	2400      	movs	r4, #0
 80015b2:	2200      	movs	r2, #0
 80015b4:	e7d4      	b.n	8001560 <__aeabi_dmul+0xbc>
 80015b6:	2201      	movs	r2, #1
 80015b8:	087b      	lsrs	r3, r7, #1
 80015ba:	403a      	ands	r2, r7
 80015bc:	4313      	orrs	r3, r2
 80015be:	4652      	mov	r2, sl
 80015c0:	07d2      	lsls	r2, r2, #31
 80015c2:	4313      	orrs	r3, r2
 80015c4:	4698      	mov	r8, r3
 80015c6:	4653      	mov	r3, sl
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	469a      	mov	sl, r3
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	4699      	mov	r9, r3
 80015d0:	465b      	mov	r3, fp
 80015d2:	1c58      	adds	r0, r3, #1
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	445b      	add	r3, fp
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dc00      	bgt.n	80015e0 <__aeabi_dmul+0x13c>
 80015de:	e1b1      	b.n	8001944 <__aeabi_dmul+0x4a0>
 80015e0:	4642      	mov	r2, r8
 80015e2:	0752      	lsls	r2, r2, #29
 80015e4:	d00b      	beq.n	80015fe <__aeabi_dmul+0x15a>
 80015e6:	220f      	movs	r2, #15
 80015e8:	4641      	mov	r1, r8
 80015ea:	400a      	ands	r2, r1
 80015ec:	2a04      	cmp	r2, #4
 80015ee:	d006      	beq.n	80015fe <__aeabi_dmul+0x15a>
 80015f0:	4642      	mov	r2, r8
 80015f2:	1d11      	adds	r1, r2, #4
 80015f4:	4541      	cmp	r1, r8
 80015f6:	4192      	sbcs	r2, r2
 80015f8:	4688      	mov	r8, r1
 80015fa:	4252      	negs	r2, r2
 80015fc:	4492      	add	sl, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	01d2      	lsls	r2, r2, #7
 8001602:	d506      	bpl.n	8001612 <__aeabi_dmul+0x16e>
 8001604:	4652      	mov	r2, sl
 8001606:	4b80      	ldr	r3, [pc, #512]	@ (8001808 <__aeabi_dmul+0x364>)
 8001608:	401a      	ands	r2, r3
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	4692      	mov	sl, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	18c3      	adds	r3, r0, r3
 8001612:	4a7e      	ldr	r2, [pc, #504]	@ (800180c <__aeabi_dmul+0x368>)
 8001614:	4293      	cmp	r3, r2
 8001616:	dd00      	ble.n	800161a <__aeabi_dmul+0x176>
 8001618:	e18f      	b.n	800193a <__aeabi_dmul+0x496>
 800161a:	4642      	mov	r2, r8
 800161c:	08d1      	lsrs	r1, r2, #3
 800161e:	4652      	mov	r2, sl
 8001620:	0752      	lsls	r2, r2, #29
 8001622:	430a      	orrs	r2, r1
 8001624:	4651      	mov	r1, sl
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	024c      	lsls	r4, r1, #9
 800162a:	0b24      	lsrs	r4, r4, #12
 800162c:	0d5b      	lsrs	r3, r3, #21
 800162e:	e797      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001630:	4b73      	ldr	r3, [pc, #460]	@ (8001800 <__aeabi_dmul+0x35c>)
 8001632:	4326      	orrs	r6, r4
 8001634:	469c      	mov	ip, r3
 8001636:	44e3      	add	fp, ip
 8001638:	2e00      	cmp	r6, #0
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x19a>
 800163c:	e16f      	b.n	800191e <__aeabi_dmul+0x47a>
 800163e:	2303      	movs	r3, #3
 8001640:	4649      	mov	r1, r9
 8001642:	431d      	orrs	r5, r3
 8001644:	9b00      	ldr	r3, [sp, #0]
 8001646:	4059      	eors	r1, r3
 8001648:	b2cb      	uxtb	r3, r1
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	2d0a      	cmp	r5, #10
 800164e:	dd00      	ble.n	8001652 <__aeabi_dmul+0x1ae>
 8001650:	e133      	b.n	80018ba <__aeabi_dmul+0x416>
 8001652:	2301      	movs	r3, #1
 8001654:	40ab      	lsls	r3, r5
 8001656:	001d      	movs	r5, r3
 8001658:	2303      	movs	r3, #3
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2288      	movs	r2, #136	@ 0x88
 800165e:	422a      	tst	r2, r5
 8001660:	d197      	bne.n	8001592 <__aeabi_dmul+0xee>
 8001662:	4642      	mov	r2, r8
 8001664:	4643      	mov	r3, r8
 8001666:	0412      	lsls	r2, r2, #16
 8001668:	0c12      	lsrs	r2, r2, #16
 800166a:	0016      	movs	r6, r2
 800166c:	9801      	ldr	r0, [sp, #4]
 800166e:	0c1d      	lsrs	r5, r3, #16
 8001670:	0c03      	lsrs	r3, r0, #16
 8001672:	0400      	lsls	r0, r0, #16
 8001674:	0c00      	lsrs	r0, r0, #16
 8001676:	4346      	muls	r6, r0
 8001678:	46b4      	mov	ip, r6
 800167a:	001e      	movs	r6, r3
 800167c:	436e      	muls	r6, r5
 800167e:	9600      	str	r6, [sp, #0]
 8001680:	0016      	movs	r6, r2
 8001682:	0007      	movs	r7, r0
 8001684:	435e      	muls	r6, r3
 8001686:	4661      	mov	r1, ip
 8001688:	46b0      	mov	r8, r6
 800168a:	436f      	muls	r7, r5
 800168c:	0c0e      	lsrs	r6, r1, #16
 800168e:	44b8      	add	r8, r7
 8001690:	4446      	add	r6, r8
 8001692:	42b7      	cmp	r7, r6
 8001694:	d905      	bls.n	80016a2 <__aeabi_dmul+0x1fe>
 8001696:	2180      	movs	r1, #128	@ 0x80
 8001698:	0249      	lsls	r1, r1, #9
 800169a:	4688      	mov	r8, r1
 800169c:	9f00      	ldr	r7, [sp, #0]
 800169e:	4447      	add	r7, r8
 80016a0:	9700      	str	r7, [sp, #0]
 80016a2:	4661      	mov	r1, ip
 80016a4:	0409      	lsls	r1, r1, #16
 80016a6:	0c09      	lsrs	r1, r1, #16
 80016a8:	0c37      	lsrs	r7, r6, #16
 80016aa:	0436      	lsls	r6, r6, #16
 80016ac:	468c      	mov	ip, r1
 80016ae:	0031      	movs	r1, r6
 80016b0:	4461      	add	r1, ip
 80016b2:	9101      	str	r1, [sp, #4]
 80016b4:	0011      	movs	r1, r2
 80016b6:	0c26      	lsrs	r6, r4, #16
 80016b8:	0424      	lsls	r4, r4, #16
 80016ba:	0c24      	lsrs	r4, r4, #16
 80016bc:	4361      	muls	r1, r4
 80016be:	468c      	mov	ip, r1
 80016c0:	0021      	movs	r1, r4
 80016c2:	4369      	muls	r1, r5
 80016c4:	4689      	mov	r9, r1
 80016c6:	4661      	mov	r1, ip
 80016c8:	0c09      	lsrs	r1, r1, #16
 80016ca:	4688      	mov	r8, r1
 80016cc:	4372      	muls	r2, r6
 80016ce:	444a      	add	r2, r9
 80016d0:	4442      	add	r2, r8
 80016d2:	4375      	muls	r5, r6
 80016d4:	4591      	cmp	r9, r2
 80016d6:	d903      	bls.n	80016e0 <__aeabi_dmul+0x23c>
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0249      	lsls	r1, r1, #9
 80016dc:	4688      	mov	r8, r1
 80016de:	4445      	add	r5, r8
 80016e0:	0c11      	lsrs	r1, r2, #16
 80016e2:	4688      	mov	r8, r1
 80016e4:	4661      	mov	r1, ip
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	0c09      	lsrs	r1, r1, #16
 80016ea:	468c      	mov	ip, r1
 80016ec:	0412      	lsls	r2, r2, #16
 80016ee:	4462      	add	r2, ip
 80016f0:	18b9      	adds	r1, r7, r2
 80016f2:	9102      	str	r1, [sp, #8]
 80016f4:	4651      	mov	r1, sl
 80016f6:	0c09      	lsrs	r1, r1, #16
 80016f8:	468c      	mov	ip, r1
 80016fa:	4651      	mov	r1, sl
 80016fc:	040f      	lsls	r7, r1, #16
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	0039      	movs	r1, r7
 8001702:	4341      	muls	r1, r0
 8001704:	4445      	add	r5, r8
 8001706:	4688      	mov	r8, r1
 8001708:	4661      	mov	r1, ip
 800170a:	4341      	muls	r1, r0
 800170c:	468a      	mov	sl, r1
 800170e:	4641      	mov	r1, r8
 8001710:	4660      	mov	r0, ip
 8001712:	0c09      	lsrs	r1, r1, #16
 8001714:	4689      	mov	r9, r1
 8001716:	4358      	muls	r0, r3
 8001718:	437b      	muls	r3, r7
 800171a:	4453      	add	r3, sl
 800171c:	444b      	add	r3, r9
 800171e:	459a      	cmp	sl, r3
 8001720:	d903      	bls.n	800172a <__aeabi_dmul+0x286>
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	0249      	lsls	r1, r1, #9
 8001726:	4689      	mov	r9, r1
 8001728:	4448      	add	r0, r9
 800172a:	0c19      	lsrs	r1, r3, #16
 800172c:	4689      	mov	r9, r1
 800172e:	4641      	mov	r1, r8
 8001730:	0409      	lsls	r1, r1, #16
 8001732:	0c09      	lsrs	r1, r1, #16
 8001734:	4688      	mov	r8, r1
 8001736:	0039      	movs	r1, r7
 8001738:	4361      	muls	r1, r4
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	4443      	add	r3, r8
 800173e:	4688      	mov	r8, r1
 8001740:	4661      	mov	r1, ip
 8001742:	434c      	muls	r4, r1
 8001744:	4371      	muls	r1, r6
 8001746:	468c      	mov	ip, r1
 8001748:	4641      	mov	r1, r8
 800174a:	4377      	muls	r7, r6
 800174c:	0c0e      	lsrs	r6, r1, #16
 800174e:	193f      	adds	r7, r7, r4
 8001750:	19f6      	adds	r6, r6, r7
 8001752:	4448      	add	r0, r9
 8001754:	42b4      	cmp	r4, r6
 8001756:	d903      	bls.n	8001760 <__aeabi_dmul+0x2bc>
 8001758:	2180      	movs	r1, #128	@ 0x80
 800175a:	0249      	lsls	r1, r1, #9
 800175c:	4689      	mov	r9, r1
 800175e:	44cc      	add	ip, r9
 8001760:	9902      	ldr	r1, [sp, #8]
 8001762:	9f00      	ldr	r7, [sp, #0]
 8001764:	4689      	mov	r9, r1
 8001766:	0431      	lsls	r1, r6, #16
 8001768:	444f      	add	r7, r9
 800176a:	4689      	mov	r9, r1
 800176c:	4641      	mov	r1, r8
 800176e:	4297      	cmp	r7, r2
 8001770:	4192      	sbcs	r2, r2
 8001772:	040c      	lsls	r4, r1, #16
 8001774:	0c24      	lsrs	r4, r4, #16
 8001776:	444c      	add	r4, r9
 8001778:	18ff      	adds	r7, r7, r3
 800177a:	4252      	negs	r2, r2
 800177c:	1964      	adds	r4, r4, r5
 800177e:	18a1      	adds	r1, r4, r2
 8001780:	429f      	cmp	r7, r3
 8001782:	419b      	sbcs	r3, r3
 8001784:	4688      	mov	r8, r1
 8001786:	4682      	mov	sl, r0
 8001788:	425b      	negs	r3, r3
 800178a:	4699      	mov	r9, r3
 800178c:	4590      	cmp	r8, r2
 800178e:	4192      	sbcs	r2, r2
 8001790:	42ac      	cmp	r4, r5
 8001792:	41a4      	sbcs	r4, r4
 8001794:	44c2      	add	sl, r8
 8001796:	44d1      	add	r9, sl
 8001798:	4252      	negs	r2, r2
 800179a:	4264      	negs	r4, r4
 800179c:	4314      	orrs	r4, r2
 800179e:	4599      	cmp	r9, r3
 80017a0:	419b      	sbcs	r3, r3
 80017a2:	4582      	cmp	sl, r0
 80017a4:	4192      	sbcs	r2, r2
 80017a6:	425b      	negs	r3, r3
 80017a8:	4252      	negs	r2, r2
 80017aa:	4313      	orrs	r3, r2
 80017ac:	464a      	mov	r2, r9
 80017ae:	0c36      	lsrs	r6, r6, #16
 80017b0:	19a4      	adds	r4, r4, r6
 80017b2:	18e3      	adds	r3, r4, r3
 80017b4:	4463      	add	r3, ip
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	0dd2      	lsrs	r2, r2, #23
 80017ba:	431a      	orrs	r2, r3
 80017bc:	9901      	ldr	r1, [sp, #4]
 80017be:	4692      	mov	sl, r2
 80017c0:	027a      	lsls	r2, r7, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	1e50      	subs	r0, r2, #1
 80017c6:	4182      	sbcs	r2, r0
 80017c8:	0dff      	lsrs	r7, r7, #23
 80017ca:	4317      	orrs	r7, r2
 80017cc:	464a      	mov	r2, r9
 80017ce:	0252      	lsls	r2, r2, #9
 80017d0:	4317      	orrs	r7, r2
 80017d2:	46b8      	mov	r8, r7
 80017d4:	01db      	lsls	r3, r3, #7
 80017d6:	d500      	bpl.n	80017da <__aeabi_dmul+0x336>
 80017d8:	e6ed      	b.n	80015b6 <__aeabi_dmul+0x112>
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <__aeabi_dmul+0x36c>)
 80017dc:	9a03      	ldr	r2, [sp, #12]
 80017de:	445b      	add	r3, fp
 80017e0:	4691      	mov	r9, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc00      	bgt.n	80017e8 <__aeabi_dmul+0x344>
 80017e6:	e0ac      	b.n	8001942 <__aeabi_dmul+0x49e>
 80017e8:	003a      	movs	r2, r7
 80017ea:	0752      	lsls	r2, r2, #29
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dmul+0x34c>
 80017ee:	e710      	b.n	8001612 <__aeabi_dmul+0x16e>
 80017f0:	220f      	movs	r2, #15
 80017f2:	4658      	mov	r0, fp
 80017f4:	403a      	ands	r2, r7
 80017f6:	2a04      	cmp	r2, #4
 80017f8:	d000      	beq.n	80017fc <__aeabi_dmul+0x358>
 80017fa:	e6f9      	b.n	80015f0 <__aeabi_dmul+0x14c>
 80017fc:	e709      	b.n	8001612 <__aeabi_dmul+0x16e>
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	fffffc01 	.word	0xfffffc01
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	000003ff 	.word	0x000003ff
 8001814:	0022      	movs	r2, r4
 8001816:	4332      	orrs	r2, r6
 8001818:	d06f      	beq.n	80018fa <__aeabi_dmul+0x456>
 800181a:	2c00      	cmp	r4, #0
 800181c:	d100      	bne.n	8001820 <__aeabi_dmul+0x37c>
 800181e:	e0c2      	b.n	80019a6 <__aeabi_dmul+0x502>
 8001820:	0020      	movs	r0, r4
 8001822:	f000 fdd7 	bl	80023d4 <__clzsi2>
 8001826:	0002      	movs	r2, r0
 8001828:	0003      	movs	r3, r0
 800182a:	3a0b      	subs	r2, #11
 800182c:	201d      	movs	r0, #29
 800182e:	1a82      	subs	r2, r0, r2
 8001830:	0030      	movs	r0, r6
 8001832:	0019      	movs	r1, r3
 8001834:	40d0      	lsrs	r0, r2
 8001836:	3908      	subs	r1, #8
 8001838:	408c      	lsls	r4, r1
 800183a:	0002      	movs	r2, r0
 800183c:	4322      	orrs	r2, r4
 800183e:	0034      	movs	r4, r6
 8001840:	408c      	lsls	r4, r1
 8001842:	4659      	mov	r1, fp
 8001844:	1acb      	subs	r3, r1, r3
 8001846:	4986      	ldr	r1, [pc, #536]	@ (8001a60 <__aeabi_dmul+0x5bc>)
 8001848:	468b      	mov	fp, r1
 800184a:	449b      	add	fp, r3
 800184c:	2d0a      	cmp	r5, #10
 800184e:	dd00      	ble.n	8001852 <__aeabi_dmul+0x3ae>
 8001850:	e6a4      	b.n	800159c <__aeabi_dmul+0xf8>
 8001852:	4649      	mov	r1, r9
 8001854:	9b00      	ldr	r3, [sp, #0]
 8001856:	9401      	str	r4, [sp, #4]
 8001858:	4059      	eors	r1, r3
 800185a:	b2cb      	uxtb	r3, r1
 800185c:	0014      	movs	r4, r2
 800185e:	2000      	movs	r0, #0
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	2d02      	cmp	r5, #2
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x3c4>
 8001866:	e667      	b.n	8001538 <__aeabi_dmul+0x94>
 8001868:	e6fb      	b.n	8001662 <__aeabi_dmul+0x1be>
 800186a:	4653      	mov	r3, sl
 800186c:	4303      	orrs	r3, r0
 800186e:	4698      	mov	r8, r3
 8001870:	d03c      	beq.n	80018ec <__aeabi_dmul+0x448>
 8001872:	4653      	mov	r3, sl
 8001874:	2b00      	cmp	r3, #0
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0x3d6>
 8001878:	e0a3      	b.n	80019c2 <__aeabi_dmul+0x51e>
 800187a:	4650      	mov	r0, sl
 800187c:	f000 fdaa 	bl	80023d4 <__clzsi2>
 8001880:	230b      	movs	r3, #11
 8001882:	425b      	negs	r3, r3
 8001884:	469c      	mov	ip, r3
 8001886:	0002      	movs	r2, r0
 8001888:	4484      	add	ip, r0
 800188a:	0011      	movs	r1, r2
 800188c:	4650      	mov	r0, sl
 800188e:	3908      	subs	r1, #8
 8001890:	4088      	lsls	r0, r1
 8001892:	231d      	movs	r3, #29
 8001894:	4680      	mov	r8, r0
 8001896:	4660      	mov	r0, ip
 8001898:	1a1b      	subs	r3, r3, r0
 800189a:	0020      	movs	r0, r4
 800189c:	40d8      	lsrs	r0, r3
 800189e:	0003      	movs	r3, r0
 80018a0:	4640      	mov	r0, r8
 80018a2:	4303      	orrs	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	0023      	movs	r3, r4
 80018a8:	408b      	lsls	r3, r1
 80018aa:	4698      	mov	r8, r3
 80018ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <__aeabi_dmul+0x5bc>)
 80018ae:	2500      	movs	r5, #0
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	469b      	mov	fp, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	e61a      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018ba:	2d0f      	cmp	r5, #15
 80018bc:	d000      	beq.n	80018c0 <__aeabi_dmul+0x41c>
 80018be:	e0c9      	b.n	8001a54 <__aeabi_dmul+0x5b0>
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	4652      	mov	r2, sl
 80018c4:	031b      	lsls	r3, r3, #12
 80018c6:	421a      	tst	r2, r3
 80018c8:	d002      	beq.n	80018d0 <__aeabi_dmul+0x42c>
 80018ca:	421c      	tst	r4, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dmul+0x42c>
 80018ce:	e092      	b.n	80019f6 <__aeabi_dmul+0x552>
 80018d0:	2480      	movs	r4, #128	@ 0x80
 80018d2:	4653      	mov	r3, sl
 80018d4:	0324      	lsls	r4, r4, #12
 80018d6:	431c      	orrs	r4, r3
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	4642      	mov	r2, r8
 80018dc:	0b24      	lsrs	r4, r4, #12
 80018de:	e63e      	b.n	800155e <__aeabi_dmul+0xba>
 80018e0:	469b      	mov	fp, r3
 80018e2:	2303      	movs	r3, #3
 80018e4:	4680      	mov	r8, r0
 80018e6:	250c      	movs	r5, #12
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	e601      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018ec:	2300      	movs	r3, #0
 80018ee:	469a      	mov	sl, r3
 80018f0:	469b      	mov	fp, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	2504      	movs	r5, #4
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	e5fa      	b.n	80014f0 <__aeabi_dmul+0x4c>
 80018fa:	2101      	movs	r1, #1
 80018fc:	430d      	orrs	r5, r1
 80018fe:	2d0a      	cmp	r5, #10
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x460>
 8001902:	e64b      	b.n	800159c <__aeabi_dmul+0xf8>
 8001904:	4649      	mov	r1, r9
 8001906:	9800      	ldr	r0, [sp, #0]
 8001908:	4041      	eors	r1, r0
 800190a:	b2c9      	uxtb	r1, r1
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	2d02      	cmp	r5, #2
 8001910:	dc00      	bgt.n	8001914 <__aeabi_dmul+0x470>
 8001912:	e096      	b.n	8001a42 <__aeabi_dmul+0x59e>
 8001914:	2300      	movs	r3, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2001      	movs	r0, #1
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	e60c      	b.n	8001538 <__aeabi_dmul+0x94>
 800191e:	4649      	mov	r1, r9
 8001920:	2302      	movs	r3, #2
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	432b      	orrs	r3, r5
 8001926:	4051      	eors	r1, r2
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	9203      	str	r2, [sp, #12]
 800192c:	2b0a      	cmp	r3, #10
 800192e:	dd00      	ble.n	8001932 <__aeabi_dmul+0x48e>
 8001930:	e634      	b.n	800159c <__aeabi_dmul+0xf8>
 8001932:	2d00      	cmp	r5, #0
 8001934:	d157      	bne.n	80019e6 <__aeabi_dmul+0x542>
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	4699      	mov	r9, r3
 800193a:	2400      	movs	r4, #0
 800193c:	2200      	movs	r2, #0
 800193e:	4b49      	ldr	r3, [pc, #292]	@ (8001a64 <__aeabi_dmul+0x5c0>)
 8001940:	e60e      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001942:	4658      	mov	r0, fp
 8001944:	2101      	movs	r1, #1
 8001946:	1ac9      	subs	r1, r1, r3
 8001948:	2938      	cmp	r1, #56	@ 0x38
 800194a:	dd00      	ble.n	800194e <__aeabi_dmul+0x4aa>
 800194c:	e62f      	b.n	80015ae <__aeabi_dmul+0x10a>
 800194e:	291f      	cmp	r1, #31
 8001950:	dd56      	ble.n	8001a00 <__aeabi_dmul+0x55c>
 8001952:	221f      	movs	r2, #31
 8001954:	4654      	mov	r4, sl
 8001956:	4252      	negs	r2, r2
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	40dc      	lsrs	r4, r3
 800195c:	2920      	cmp	r1, #32
 800195e:	d007      	beq.n	8001970 <__aeabi_dmul+0x4cc>
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <__aeabi_dmul+0x5c4>)
 8001962:	4642      	mov	r2, r8
 8001964:	469c      	mov	ip, r3
 8001966:	4653      	mov	r3, sl
 8001968:	4460      	add	r0, ip
 800196a:	4083      	lsls	r3, r0
 800196c:	431a      	orrs	r2, r3
 800196e:	4690      	mov	r8, r2
 8001970:	4642      	mov	r2, r8
 8001972:	2107      	movs	r1, #7
 8001974:	1e53      	subs	r3, r2, #1
 8001976:	419a      	sbcs	r2, r3
 8001978:	000b      	movs	r3, r1
 800197a:	4322      	orrs	r2, r4
 800197c:	4013      	ands	r3, r2
 800197e:	2400      	movs	r4, #0
 8001980:	4211      	tst	r1, r2
 8001982:	d009      	beq.n	8001998 <__aeabi_dmul+0x4f4>
 8001984:	230f      	movs	r3, #15
 8001986:	4013      	ands	r3, r2
 8001988:	2b04      	cmp	r3, #4
 800198a:	d05d      	beq.n	8001a48 <__aeabi_dmul+0x5a4>
 800198c:	1d11      	adds	r1, r2, #4
 800198e:	4291      	cmp	r1, r2
 8001990:	419b      	sbcs	r3, r3
 8001992:	000a      	movs	r2, r1
 8001994:	425b      	negs	r3, r3
 8001996:	075b      	lsls	r3, r3, #29
 8001998:	08d2      	lsrs	r2, r2, #3
 800199a:	431a      	orrs	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	e5df      	b.n	8001560 <__aeabi_dmul+0xbc>
 80019a0:	9b03      	ldr	r3, [sp, #12]
 80019a2:	4699      	mov	r9, r3
 80019a4:	e5fa      	b.n	800159c <__aeabi_dmul+0xf8>
 80019a6:	9801      	ldr	r0, [sp, #4]
 80019a8:	f000 fd14 	bl	80023d4 <__clzsi2>
 80019ac:	0002      	movs	r2, r0
 80019ae:	0003      	movs	r3, r0
 80019b0:	3215      	adds	r2, #21
 80019b2:	3320      	adds	r3, #32
 80019b4:	2a1c      	cmp	r2, #28
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dmul+0x516>
 80019b8:	e738      	b.n	800182c <__aeabi_dmul+0x388>
 80019ba:	9a01      	ldr	r2, [sp, #4]
 80019bc:	3808      	subs	r0, #8
 80019be:	4082      	lsls	r2, r0
 80019c0:	e73f      	b.n	8001842 <__aeabi_dmul+0x39e>
 80019c2:	f000 fd07 	bl	80023d4 <__clzsi2>
 80019c6:	2315      	movs	r3, #21
 80019c8:	469c      	mov	ip, r3
 80019ca:	4484      	add	ip, r0
 80019cc:	0002      	movs	r2, r0
 80019ce:	4663      	mov	r3, ip
 80019d0:	3220      	adds	r2, #32
 80019d2:	2b1c      	cmp	r3, #28
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x534>
 80019d6:	e758      	b.n	800188a <__aeabi_dmul+0x3e6>
 80019d8:	2300      	movs	r3, #0
 80019da:	4698      	mov	r8, r3
 80019dc:	0023      	movs	r3, r4
 80019de:	3808      	subs	r0, #8
 80019e0:	4083      	lsls	r3, r0
 80019e2:	469a      	mov	sl, r3
 80019e4:	e762      	b.n	80018ac <__aeabi_dmul+0x408>
 80019e6:	001d      	movs	r5, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	2400      	movs	r4, #0
 80019ec:	2002      	movs	r0, #2
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	e5a2      	b.n	8001538 <__aeabi_dmul+0x94>
 80019f2:	9002      	str	r0, [sp, #8]
 80019f4:	e632      	b.n	800165c <__aeabi_dmul+0x1b8>
 80019f6:	431c      	orrs	r4, r3
 80019f8:	9b00      	ldr	r3, [sp, #0]
 80019fa:	9a01      	ldr	r2, [sp, #4]
 80019fc:	4699      	mov	r9, r3
 80019fe:	e5ae      	b.n	800155e <__aeabi_dmul+0xba>
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <__aeabi_dmul+0x5c8>)
 8001a02:	4652      	mov	r2, sl
 8001a04:	18c3      	adds	r3, r0, r3
 8001a06:	4640      	mov	r0, r8
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	40c8      	lsrs	r0, r1
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4098      	lsls	r0, r3
 8001a12:	0003      	movs	r3, r0
 8001a14:	1e58      	subs	r0, r3, #1
 8001a16:	4183      	sbcs	r3, r0
 8001a18:	4654      	mov	r4, sl
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	40cc      	lsrs	r4, r1
 8001a1e:	0753      	lsls	r3, r2, #29
 8001a20:	d009      	beq.n	8001a36 <__aeabi_dmul+0x592>
 8001a22:	230f      	movs	r3, #15
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d005      	beq.n	8001a36 <__aeabi_dmul+0x592>
 8001a2a:	1d13      	adds	r3, r2, #4
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	4192      	sbcs	r2, r2
 8001a30:	4252      	negs	r2, r2
 8001a32:	18a4      	adds	r4, r4, r2
 8001a34:	001a      	movs	r2, r3
 8001a36:	0223      	lsls	r3, r4, #8
 8001a38:	d508      	bpl.n	8001a4c <__aeabi_dmul+0x5a8>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	e58e      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001a42:	4689      	mov	r9, r1
 8001a44:	2400      	movs	r4, #0
 8001a46:	e58b      	b.n	8001560 <__aeabi_dmul+0xbc>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e7a5      	b.n	8001998 <__aeabi_dmul+0x4f4>
 8001a4c:	0763      	lsls	r3, r4, #29
 8001a4e:	0264      	lsls	r4, r4, #9
 8001a50:	0b24      	lsrs	r4, r4, #12
 8001a52:	e7a1      	b.n	8001998 <__aeabi_dmul+0x4f4>
 8001a54:	9b00      	ldr	r3, [sp, #0]
 8001a56:	46a2      	mov	sl, r4
 8001a58:	4699      	mov	r9, r3
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	e737      	b.n	80018d0 <__aeabi_dmul+0x42c>
 8001a60:	fffffc0d 	.word	0xfffffc0d
 8001a64:	000007ff 	.word	0x000007ff
 8001a68:	0000043e 	.word	0x0000043e
 8001a6c:	0000041e 	.word	0x0000041e

08001a70 <__aeabi_dsub>:
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	4657      	mov	r7, sl
 8001a74:	464e      	mov	r6, r9
 8001a76:	4645      	mov	r5, r8
 8001a78:	46de      	mov	lr, fp
 8001a7a:	b5e0      	push	{r5, r6, r7, lr}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	9000      	str	r0, [sp, #0]
 8001a80:	9101      	str	r1, [sp, #4]
 8001a82:	030c      	lsls	r4, r1, #12
 8001a84:	004d      	lsls	r5, r1, #1
 8001a86:	0fce      	lsrs	r6, r1, #31
 8001a88:	0a61      	lsrs	r1, r4, #9
 8001a8a:	9c00      	ldr	r4, [sp, #0]
 8001a8c:	005f      	lsls	r7, r3, #1
 8001a8e:	0f64      	lsrs	r4, r4, #29
 8001a90:	430c      	orrs	r4, r1
 8001a92:	9900      	ldr	r1, [sp, #0]
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	00c8      	lsls	r0, r1, #3
 8001a9a:	0319      	lsls	r1, r3, #12
 8001a9c:	0d7b      	lsrs	r3, r7, #21
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001aa4:	0fdb      	lsrs	r3, r3, #31
 8001aa6:	469c      	mov	ip, r3
 8001aa8:	0a4b      	lsrs	r3, r1, #9
 8001aaa:	9900      	ldr	r1, [sp, #0]
 8001aac:	4680      	mov	r8, r0
 8001aae:	0f49      	lsrs	r1, r1, #29
 8001ab0:	4319      	orrs	r1, r3
 8001ab2:	9b00      	ldr	r3, [sp, #0]
 8001ab4:	468b      	mov	fp, r1
 8001ab6:	00da      	lsls	r2, r3, #3
 8001ab8:	4692      	mov	sl, r2
 8001aba:	0d6d      	lsrs	r5, r5, #21
 8001abc:	45b9      	cmp	r9, r7
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x52>
 8001ac0:	e0bf      	b.n	8001c42 <__aeabi_dsub+0x1d2>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	4661      	mov	r1, ip
 8001ac6:	4059      	eors	r1, r3
 8001ac8:	464b      	mov	r3, r9
 8001aca:	468c      	mov	ip, r1
 8001acc:	1aeb      	subs	r3, r5, r3
 8001ace:	428e      	cmp	r6, r1
 8001ad0:	d075      	beq.n	8001bbe <__aeabi_dsub+0x14e>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	dc00      	bgt.n	8001ad8 <__aeabi_dsub+0x68>
 8001ad6:	e2a3      	b.n	8002020 <__aeabi_dsub+0x5b0>
 8001ad8:	4649      	mov	r1, r9
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x70>
 8001ade:	e0ce      	b.n	8001c7e <__aeabi_dsub+0x20e>
 8001ae0:	42bd      	cmp	r5, r7
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x76>
 8001ae4:	e200      	b.n	8001ee8 <__aeabi_dsub+0x478>
 8001ae6:	2701      	movs	r7, #1
 8001ae8:	2b38      	cmp	r3, #56	@ 0x38
 8001aea:	dc19      	bgt.n	8001b20 <__aeabi_dsub+0xb0>
 8001aec:	2780      	movs	r7, #128	@ 0x80
 8001aee:	4659      	mov	r1, fp
 8001af0:	043f      	lsls	r7, r7, #16
 8001af2:	4339      	orrs	r1, r7
 8001af4:	468b      	mov	fp, r1
 8001af6:	2b1f      	cmp	r3, #31
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dsub+0x8c>
 8001afa:	e1fa      	b.n	8001ef2 <__aeabi_dsub+0x482>
 8001afc:	2720      	movs	r7, #32
 8001afe:	1af9      	subs	r1, r7, r3
 8001b00:	468c      	mov	ip, r1
 8001b02:	4659      	mov	r1, fp
 8001b04:	4667      	mov	r7, ip
 8001b06:	40b9      	lsls	r1, r7
 8001b08:	000f      	movs	r7, r1
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	40d9      	lsrs	r1, r3
 8001b0e:	430f      	orrs	r7, r1
 8001b10:	4661      	mov	r1, ip
 8001b12:	408a      	lsls	r2, r1
 8001b14:	1e51      	subs	r1, r2, #1
 8001b16:	418a      	sbcs	r2, r1
 8001b18:	4659      	mov	r1, fp
 8001b1a:	40d9      	lsrs	r1, r3
 8001b1c:	4317      	orrs	r7, r2
 8001b1e:	1a64      	subs	r4, r4, r1
 8001b20:	1bc7      	subs	r7, r0, r7
 8001b22:	42b8      	cmp	r0, r7
 8001b24:	4180      	sbcs	r0, r0
 8001b26:	4240      	negs	r0, r0
 8001b28:	1a24      	subs	r4, r4, r0
 8001b2a:	0223      	lsls	r3, r4, #8
 8001b2c:	d400      	bmi.n	8001b30 <__aeabi_dsub+0xc0>
 8001b2e:	e140      	b.n	8001db2 <__aeabi_dsub+0x342>
 8001b30:	0264      	lsls	r4, r4, #9
 8001b32:	0a64      	lsrs	r4, r4, #9
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0xca>
 8001b38:	e154      	b.n	8001de4 <__aeabi_dsub+0x374>
 8001b3a:	0020      	movs	r0, r4
 8001b3c:	f000 fc4a 	bl	80023d4 <__clzsi2>
 8001b40:	0003      	movs	r3, r0
 8001b42:	3b08      	subs	r3, #8
 8001b44:	2120      	movs	r1, #32
 8001b46:	0038      	movs	r0, r7
 8001b48:	1aca      	subs	r2, r1, r3
 8001b4a:	40d0      	lsrs	r0, r2
 8001b4c:	409c      	lsls	r4, r3
 8001b4e:	0002      	movs	r2, r0
 8001b50:	409f      	lsls	r7, r3
 8001b52:	4322      	orrs	r2, r4
 8001b54:	429d      	cmp	r5, r3
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dsub+0xea>
 8001b58:	e1a6      	b.n	8001ea8 <__aeabi_dsub+0x438>
 8001b5a:	1b58      	subs	r0, r3, r5
 8001b5c:	3001      	adds	r0, #1
 8001b5e:	1a09      	subs	r1, r1, r0
 8001b60:	003c      	movs	r4, r7
 8001b62:	408f      	lsls	r7, r1
 8001b64:	40c4      	lsrs	r4, r0
 8001b66:	1e7b      	subs	r3, r7, #1
 8001b68:	419f      	sbcs	r7, r3
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	408b      	lsls	r3, r1
 8001b6e:	4327      	orrs	r7, r4
 8001b70:	431f      	orrs	r7, r3
 8001b72:	40c2      	lsrs	r2, r0
 8001b74:	003b      	movs	r3, r7
 8001b76:	0014      	movs	r4, r2
 8001b78:	2500      	movs	r5, #0
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x110>
 8001b7e:	e1f7      	b.n	8001f70 <__aeabi_dsub+0x500>
 8001b80:	077b      	lsls	r3, r7, #29
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x116>
 8001b84:	e377      	b.n	8002276 <__aeabi_dsub+0x806>
 8001b86:	230f      	movs	r3, #15
 8001b88:	0038      	movs	r0, r7
 8001b8a:	403b      	ands	r3, r7
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d004      	beq.n	8001b9a <__aeabi_dsub+0x12a>
 8001b90:	1d38      	adds	r0, r7, #4
 8001b92:	42b8      	cmp	r0, r7
 8001b94:	41bf      	sbcs	r7, r7
 8001b96:	427f      	negs	r7, r7
 8001b98:	19e4      	adds	r4, r4, r7
 8001b9a:	0223      	lsls	r3, r4, #8
 8001b9c:	d400      	bmi.n	8001ba0 <__aeabi_dsub+0x130>
 8001b9e:	e368      	b.n	8002272 <__aeabi_dsub+0x802>
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001ba2:	3501      	adds	r5, #1
 8001ba4:	429d      	cmp	r5, r3
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x13a>
 8001ba8:	e0f4      	b.n	8001d94 <__aeabi_dsub+0x324>
 8001baa:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001bac:	056d      	lsls	r5, r5, #21
 8001bae:	401c      	ands	r4, r3
 8001bb0:	0d6d      	lsrs	r5, r5, #21
 8001bb2:	0767      	lsls	r7, r4, #29
 8001bb4:	08c0      	lsrs	r0, r0, #3
 8001bb6:	0264      	lsls	r4, r4, #9
 8001bb8:	4307      	orrs	r7, r0
 8001bba:	0b24      	lsrs	r4, r4, #12
 8001bbc:	e0ec      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dc00      	bgt.n	8001bc4 <__aeabi_dsub+0x154>
 8001bc2:	e329      	b.n	8002218 <__aeabi_dsub+0x7a8>
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	2900      	cmp	r1, #0
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_dsub+0x15c>
 8001bca:	e0d6      	b.n	8001d7a <__aeabi_dsub+0x30a>
 8001bcc:	4659      	mov	r1, fp
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x164>
 8001bd2:	e12e      	b.n	8001e32 <__aeabi_dsub+0x3c2>
 8001bd4:	1e59      	subs	r1, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x16c>
 8001bda:	e1e6      	b.n	8001faa <__aeabi_dsub+0x53a>
 8001bdc:	42bb      	cmp	r3, r7
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x172>
 8001be0:	e182      	b.n	8001ee8 <__aeabi_dsub+0x478>
 8001be2:	2701      	movs	r7, #1
 8001be4:	000b      	movs	r3, r1
 8001be6:	2938      	cmp	r1, #56	@ 0x38
 8001be8:	dc14      	bgt.n	8001c14 <__aeabi_dsub+0x1a4>
 8001bea:	2b1f      	cmp	r3, #31
 8001bec:	dd00      	ble.n	8001bf0 <__aeabi_dsub+0x180>
 8001bee:	e23c      	b.n	800206a <__aeabi_dsub+0x5fa>
 8001bf0:	2720      	movs	r7, #32
 8001bf2:	1af9      	subs	r1, r7, r3
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	4667      	mov	r7, ip
 8001bfa:	40b9      	lsls	r1, r7
 8001bfc:	000f      	movs	r7, r1
 8001bfe:	0011      	movs	r1, r2
 8001c00:	40d9      	lsrs	r1, r3
 8001c02:	430f      	orrs	r7, r1
 8001c04:	4661      	mov	r1, ip
 8001c06:	408a      	lsls	r2, r1
 8001c08:	1e51      	subs	r1, r2, #1
 8001c0a:	418a      	sbcs	r2, r1
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	40d9      	lsrs	r1, r3
 8001c10:	4317      	orrs	r7, r2
 8001c12:	1864      	adds	r4, r4, r1
 8001c14:	183f      	adds	r7, r7, r0
 8001c16:	4287      	cmp	r7, r0
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	4240      	negs	r0, r0
 8001c1c:	1824      	adds	r4, r4, r0
 8001c1e:	0223      	lsls	r3, r4, #8
 8001c20:	d400      	bmi.n	8001c24 <__aeabi_dsub+0x1b4>
 8001c22:	e0c6      	b.n	8001db2 <__aeabi_dsub+0x342>
 8001c24:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001c26:	3501      	adds	r5, #1
 8001c28:	429d      	cmp	r5, r3
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x1be>
 8001c2c:	e0b2      	b.n	8001d94 <__aeabi_dsub+0x324>
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4b69      	ldr	r3, [pc, #420]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001c32:	087a      	lsrs	r2, r7, #1
 8001c34:	401c      	ands	r4, r3
 8001c36:	4039      	ands	r1, r7
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	07e7      	lsls	r7, r4, #31
 8001c3c:	4317      	orrs	r7, r2
 8001c3e:	0864      	lsrs	r4, r4, #1
 8001c40:	e79e      	b.n	8001b80 <__aeabi_dsub+0x110>
 8001c42:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <__aeabi_dsub+0x36c>)
 8001c44:	4311      	orrs	r1, r2
 8001c46:	468a      	mov	sl, r1
 8001c48:	18eb      	adds	r3, r5, r3
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d028      	beq.n	8001ca0 <__aeabi_dsub+0x230>
 8001c4e:	4566      	cmp	r6, ip
 8001c50:	d02c      	beq.n	8001cac <__aeabi_dsub+0x23c>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d05b      	beq.n	8001d0e <__aeabi_dsub+0x29e>
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x1ec>
 8001c5a:	e12c      	b.n	8001eb6 <__aeabi_dsub+0x446>
 8001c5c:	465b      	mov	r3, fp
 8001c5e:	4666      	mov	r6, ip
 8001c60:	075f      	lsls	r7, r3, #29
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	4317      	orrs	r7, r2
 8001c66:	08dd      	lsrs	r5, r3, #3
 8001c68:	003b      	movs	r3, r7
 8001c6a:	432b      	orrs	r3, r5
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x200>
 8001c6e:	e0e2      	b.n	8001e36 <__aeabi_dsub+0x3c6>
 8001c70:	2480      	movs	r4, #128	@ 0x80
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	432c      	orrs	r4, r5
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	4d56      	ldr	r5, [pc, #344]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	e08c      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001c7e:	4659      	mov	r1, fp
 8001c80:	4311      	orrs	r1, r2
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x216>
 8001c84:	e0d5      	b.n	8001e32 <__aeabi_dsub+0x3c2>
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x21e>
 8001c8c:	e1b9      	b.n	8002002 <__aeabi_dsub+0x592>
 8001c8e:	42bb      	cmp	r3, r7
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x224>
 8001c92:	e1b1      	b.n	8001ff8 <__aeabi_dsub+0x588>
 8001c94:	2701      	movs	r7, #1
 8001c96:	000b      	movs	r3, r1
 8001c98:	2938      	cmp	r1, #56	@ 0x38
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dsub+0x22e>
 8001c9c:	e740      	b.n	8001b20 <__aeabi_dsub+0xb0>
 8001c9e:	e72a      	b.n	8001af6 <__aeabi_dsub+0x86>
 8001ca0:	4661      	mov	r1, ip
 8001ca2:	2701      	movs	r7, #1
 8001ca4:	4079      	eors	r1, r7
 8001ca6:	468c      	mov	ip, r1
 8001ca8:	4566      	cmp	r6, ip
 8001caa:	d1d2      	bne.n	8001c52 <__aeabi_dsub+0x1e2>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x242>
 8001cb0:	e0c5      	b.n	8001e3e <__aeabi_dsub+0x3ce>
 8001cb2:	2d00      	cmp	r5, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x248>
 8001cb6:	e155      	b.n	8001f64 <__aeabi_dsub+0x4f4>
 8001cb8:	464b      	mov	r3, r9
 8001cba:	0025      	movs	r5, r4
 8001cbc:	4305      	orrs	r5, r0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x252>
 8001cc0:	e212      	b.n	80020e8 <__aeabi_dsub+0x678>
 8001cc2:	1e59      	subs	r1, r3, #1
 8001cc4:	468c      	mov	ip, r1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x25c>
 8001cca:	e249      	b.n	8002160 <__aeabi_dsub+0x6f0>
 8001ccc:	4d41      	ldr	r5, [pc, #260]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001cce:	42ab      	cmp	r3, r5
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x264>
 8001cd2:	e28f      	b.n	80021f4 <__aeabi_dsub+0x784>
 8001cd4:	2701      	movs	r7, #1
 8001cd6:	2938      	cmp	r1, #56	@ 0x38
 8001cd8:	dc11      	bgt.n	8001cfe <__aeabi_dsub+0x28e>
 8001cda:	4663      	mov	r3, ip
 8001cdc:	2b1f      	cmp	r3, #31
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0x272>
 8001ce0:	e25b      	b.n	800219a <__aeabi_dsub+0x72a>
 8001ce2:	4661      	mov	r1, ip
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	0027      	movs	r7, r4
 8001ce8:	1a5b      	subs	r3, r3, r1
 8001cea:	0005      	movs	r5, r0
 8001cec:	4098      	lsls	r0, r3
 8001cee:	409f      	lsls	r7, r3
 8001cf0:	40cd      	lsrs	r5, r1
 8001cf2:	1e43      	subs	r3, r0, #1
 8001cf4:	4198      	sbcs	r0, r3
 8001cf6:	40cc      	lsrs	r4, r1
 8001cf8:	432f      	orrs	r7, r5
 8001cfa:	4307      	orrs	r7, r0
 8001cfc:	44a3      	add	fp, r4
 8001cfe:	18bf      	adds	r7, r7, r2
 8001d00:	4297      	cmp	r7, r2
 8001d02:	4192      	sbcs	r2, r2
 8001d04:	4252      	negs	r2, r2
 8001d06:	445a      	add	r2, fp
 8001d08:	0014      	movs	r4, r2
 8001d0a:	464d      	mov	r5, r9
 8001d0c:	e787      	b.n	8001c1e <__aeabi_dsub+0x1ae>
 8001d0e:	4f34      	ldr	r7, [pc, #208]	@ (8001de0 <__aeabi_dsub+0x370>)
 8001d10:	1c6b      	adds	r3, r5, #1
 8001d12:	423b      	tst	r3, r7
 8001d14:	d000      	beq.n	8001d18 <__aeabi_dsub+0x2a8>
 8001d16:	e0b6      	b.n	8001e86 <__aeabi_dsub+0x416>
 8001d18:	4659      	mov	r1, fp
 8001d1a:	0023      	movs	r3, r4
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	000f      	movs	r7, r1
 8001d20:	4303      	orrs	r3, r0
 8001d22:	2d00      	cmp	r5, #0
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dsub+0x2b8>
 8001d26:	e126      	b.n	8001f76 <__aeabi_dsub+0x506>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x2be>
 8001d2c:	e1c0      	b.n	80020b0 <__aeabi_dsub+0x640>
 8001d2e:	2900      	cmp	r1, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x2c4>
 8001d32:	e0a1      	b.n	8001e78 <__aeabi_dsub+0x408>
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	4698      	mov	r8, r3
 8001d38:	465b      	mov	r3, fp
 8001d3a:	4540      	cmp	r0, r8
 8001d3c:	41ad      	sbcs	r5, r5
 8001d3e:	1ae3      	subs	r3, r4, r3
 8001d40:	426d      	negs	r5, r5
 8001d42:	1b5b      	subs	r3, r3, r5
 8001d44:	2580      	movs	r5, #128	@ 0x80
 8001d46:	042d      	lsls	r5, r5, #16
 8001d48:	422b      	tst	r3, r5
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x2de>
 8001d4c:	e14b      	b.n	8001fe6 <__aeabi_dsub+0x576>
 8001d4e:	465b      	mov	r3, fp
 8001d50:	1a10      	subs	r0, r2, r0
 8001d52:	4282      	cmp	r2, r0
 8001d54:	4192      	sbcs	r2, r2
 8001d56:	1b1c      	subs	r4, r3, r4
 8001d58:	0007      	movs	r7, r0
 8001d5a:	2601      	movs	r6, #1
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	4252      	negs	r2, r2
 8001d60:	1aa4      	subs	r4, r4, r2
 8001d62:	4327      	orrs	r7, r4
 8001d64:	401e      	ands	r6, r3
 8001d66:	2f00      	cmp	r7, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x2fc>
 8001d6a:	e142      	b.n	8001ff2 <__aeabi_dsub+0x582>
 8001d6c:	422c      	tst	r4, r5
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x302>
 8001d70:	e26d      	b.n	800224e <__aeabi_dsub+0x7de>
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <__aeabi_dsub+0x368>)
 8001d74:	2501      	movs	r5, #1
 8001d76:	401c      	ands	r4, r3
 8001d78:	e71b      	b.n	8001bb2 <__aeabi_dsub+0x142>
 8001d7a:	42bd      	cmp	r5, r7
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x310>
 8001d7e:	e13b      	b.n	8001ff8 <__aeabi_dsub+0x588>
 8001d80:	2701      	movs	r7, #1
 8001d82:	2b38      	cmp	r3, #56	@ 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x318>
 8001d86:	e745      	b.n	8001c14 <__aeabi_dsub+0x1a4>
 8001d88:	2780      	movs	r7, #128	@ 0x80
 8001d8a:	4659      	mov	r1, fp
 8001d8c:	043f      	lsls	r7, r7, #16
 8001d8e:	4339      	orrs	r1, r7
 8001d90:	468b      	mov	fp, r1
 8001d92:	e72a      	b.n	8001bea <__aeabi_dsub+0x17a>
 8001d94:	2400      	movs	r4, #0
 8001d96:	2700      	movs	r7, #0
 8001d98:	052d      	lsls	r5, r5, #20
 8001d9a:	4325      	orrs	r5, r4
 8001d9c:	07f6      	lsls	r6, r6, #31
 8001d9e:	4335      	orrs	r5, r6
 8001da0:	0038      	movs	r0, r7
 8001da2:	0029      	movs	r1, r5
 8001da4:	b003      	add	sp, #12
 8001da6:	bcf0      	pop	{r4, r5, r6, r7}
 8001da8:	46bb      	mov	fp, r7
 8001daa:	46b2      	mov	sl, r6
 8001dac:	46a9      	mov	r9, r5
 8001dae:	46a0      	mov	r8, r4
 8001db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db2:	077b      	lsls	r3, r7, #29
 8001db4:	d004      	beq.n	8001dc0 <__aeabi_dsub+0x350>
 8001db6:	230f      	movs	r3, #15
 8001db8:	403b      	ands	r3, r7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dsub+0x350>
 8001dbe:	e6e7      	b.n	8001b90 <__aeabi_dsub+0x120>
 8001dc0:	002b      	movs	r3, r5
 8001dc2:	08f8      	lsrs	r0, r7, #3
 8001dc4:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <__aeabi_dsub+0x364>)
 8001dc6:	0767      	lsls	r7, r4, #29
 8001dc8:	4307      	orrs	r7, r0
 8001dca:	08e5      	lsrs	r5, r4, #3
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x362>
 8001dd0:	e74a      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001dd2:	e0a5      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	ff7fffff 	.word	0xff7fffff
 8001ddc:	fffff801 	.word	0xfffff801
 8001de0:	000007fe 	.word	0x000007fe
 8001de4:	0038      	movs	r0, r7
 8001de6:	f000 faf5 	bl	80023d4 <__clzsi2>
 8001dea:	0003      	movs	r3, r0
 8001dec:	3318      	adds	r3, #24
 8001dee:	2b1f      	cmp	r3, #31
 8001df0:	dc00      	bgt.n	8001df4 <__aeabi_dsub+0x384>
 8001df2:	e6a7      	b.n	8001b44 <__aeabi_dsub+0xd4>
 8001df4:	003a      	movs	r2, r7
 8001df6:	3808      	subs	r0, #8
 8001df8:	4082      	lsls	r2, r0
 8001dfa:	429d      	cmp	r5, r3
 8001dfc:	dd00      	ble.n	8001e00 <__aeabi_dsub+0x390>
 8001dfe:	e08a      	b.n	8001f16 <__aeabi_dsub+0x4a6>
 8001e00:	1b5b      	subs	r3, r3, r5
 8001e02:	1c58      	adds	r0, r3, #1
 8001e04:	281f      	cmp	r0, #31
 8001e06:	dc00      	bgt.n	8001e0a <__aeabi_dsub+0x39a>
 8001e08:	e1d8      	b.n	80021bc <__aeabi_dsub+0x74c>
 8001e0a:	0017      	movs	r7, r2
 8001e0c:	3b1f      	subs	r3, #31
 8001e0e:	40df      	lsrs	r7, r3
 8001e10:	2820      	cmp	r0, #32
 8001e12:	d005      	beq.n	8001e20 <__aeabi_dsub+0x3b0>
 8001e14:	2340      	movs	r3, #64	@ 0x40
 8001e16:	1a1b      	subs	r3, r3, r0
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	1e53      	subs	r3, r2, #1
 8001e1c:	419a      	sbcs	r2, r3
 8001e1e:	4317      	orrs	r7, r2
 8001e20:	2500      	movs	r5, #0
 8001e22:	2f00      	cmp	r7, #0
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x3b8>
 8001e26:	e0e5      	b.n	8001ff4 <__aeabi_dsub+0x584>
 8001e28:	077b      	lsls	r3, r7, #29
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x3be>
 8001e2c:	e6ab      	b.n	8001b86 <__aeabi_dsub+0x116>
 8001e2e:	002c      	movs	r4, r5
 8001e30:	e7c6      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001e32:	08c0      	lsrs	r0, r0, #3
 8001e34:	e7c6      	b.n	8001dc4 <__aeabi_dsub+0x354>
 8001e36:	2700      	movs	r7, #0
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4dd1      	ldr	r5, [pc, #836]	@ (8002180 <__aeabi_dsub+0x710>)
 8001e3c:	e7ac      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001e3e:	4fd1      	ldr	r7, [pc, #836]	@ (8002184 <__aeabi_dsub+0x714>)
 8001e40:	1c6b      	adds	r3, r5, #1
 8001e42:	423b      	tst	r3, r7
 8001e44:	d171      	bne.n	8001f2a <__aeabi_dsub+0x4ba>
 8001e46:	0023      	movs	r3, r4
 8001e48:	4303      	orrs	r3, r0
 8001e4a:	2d00      	cmp	r5, #0
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_dsub+0x3e0>
 8001e4e:	e14e      	b.n	80020ee <__aeabi_dsub+0x67e>
 8001e50:	4657      	mov	r7, sl
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x3e8>
 8001e56:	e1b5      	b.n	80021c4 <__aeabi_dsub+0x754>
 8001e58:	2f00      	cmp	r7, #0
 8001e5a:	d00d      	beq.n	8001e78 <__aeabi_dsub+0x408>
 8001e5c:	1883      	adds	r3, r0, r2
 8001e5e:	4283      	cmp	r3, r0
 8001e60:	4180      	sbcs	r0, r0
 8001e62:	445c      	add	r4, fp
 8001e64:	4240      	negs	r0, r0
 8001e66:	1824      	adds	r4, r4, r0
 8001e68:	0222      	lsls	r2, r4, #8
 8001e6a:	d500      	bpl.n	8001e6e <__aeabi_dsub+0x3fe>
 8001e6c:	e1c8      	b.n	8002200 <__aeabi_dsub+0x790>
 8001e6e:	001f      	movs	r7, r3
 8001e70:	4698      	mov	r8, r3
 8001e72:	4327      	orrs	r7, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x408>
 8001e76:	e0bc      	b.n	8001ff2 <__aeabi_dsub+0x582>
 8001e78:	4643      	mov	r3, r8
 8001e7a:	0767      	lsls	r7, r4, #29
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	431f      	orrs	r7, r3
 8001e80:	08e5      	lsrs	r5, r4, #3
 8001e82:	2300      	movs	r3, #0
 8001e84:	e04c      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001e86:	1a83      	subs	r3, r0, r2
 8001e88:	4698      	mov	r8, r3
 8001e8a:	465b      	mov	r3, fp
 8001e8c:	4540      	cmp	r0, r8
 8001e8e:	41bf      	sbcs	r7, r7
 8001e90:	1ae3      	subs	r3, r4, r3
 8001e92:	427f      	negs	r7, r7
 8001e94:	1bdb      	subs	r3, r3, r7
 8001e96:	021f      	lsls	r7, r3, #8
 8001e98:	d47c      	bmi.n	8001f94 <__aeabi_dsub+0x524>
 8001e9a:	4647      	mov	r7, r8
 8001e9c:	431f      	orrs	r7, r3
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_dsub+0x432>
 8001ea0:	e0a6      	b.n	8001ff0 <__aeabi_dsub+0x580>
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	4647      	mov	r7, r8
 8001ea6:	e645      	b.n	8001b34 <__aeabi_dsub+0xc4>
 8001ea8:	4cb7      	ldr	r4, [pc, #732]	@ (8002188 <__aeabi_dsub+0x718>)
 8001eaa:	1aed      	subs	r5, r5, r3
 8001eac:	4014      	ands	r4, r2
 8001eae:	077b      	lsls	r3, r7, #29
 8001eb0:	d000      	beq.n	8001eb4 <__aeabi_dsub+0x444>
 8001eb2:	e780      	b.n	8001db6 <__aeabi_dsub+0x346>
 8001eb4:	e784      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	0025      	movs	r5, r4
 8001eba:	4305      	orrs	r5, r0
 8001ebc:	d066      	beq.n	8001f8c <__aeabi_dsub+0x51c>
 8001ebe:	1e5f      	subs	r7, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x456>
 8001ec4:	e0fc      	b.n	80020c0 <__aeabi_dsub+0x650>
 8001ec6:	4dae      	ldr	r5, [pc, #696]	@ (8002180 <__aeabi_dsub+0x710>)
 8001ec8:	42ab      	cmp	r3, r5
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x45e>
 8001ecc:	e15e      	b.n	800218c <__aeabi_dsub+0x71c>
 8001ece:	4666      	mov	r6, ip
 8001ed0:	2f38      	cmp	r7, #56	@ 0x38
 8001ed2:	dc00      	bgt.n	8001ed6 <__aeabi_dsub+0x466>
 8001ed4:	e0b4      	b.n	8002040 <__aeabi_dsub+0x5d0>
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	1a17      	subs	r7, r2, r0
 8001eda:	42ba      	cmp	r2, r7
 8001edc:	4192      	sbcs	r2, r2
 8001ede:	465b      	mov	r3, fp
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	464d      	mov	r5, r9
 8001ee4:	1a9c      	subs	r4, r3, r2
 8001ee6:	e620      	b.n	8001b2a <__aeabi_dsub+0xba>
 8001ee8:	0767      	lsls	r7, r4, #29
 8001eea:	08c0      	lsrs	r0, r0, #3
 8001eec:	4307      	orrs	r7, r0
 8001eee:	08e5      	lsrs	r5, r4, #3
 8001ef0:	e6ba      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001ef2:	001f      	movs	r7, r3
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	3f20      	subs	r7, #32
 8001ef8:	40f9      	lsrs	r1, r7
 8001efa:	000f      	movs	r7, r1
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x49c>
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	1acb      	subs	r3, r1, r3
 8001f04:	4659      	mov	r1, fp
 8001f06:	4099      	lsls	r1, r3
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	4692      	mov	sl, r2
 8001f0c:	4653      	mov	r3, sl
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	4193      	sbcs	r3, r2
 8001f12:	431f      	orrs	r7, r3
 8001f14:	e604      	b.n	8001b20 <__aeabi_dsub+0xb0>
 8001f16:	1aeb      	subs	r3, r5, r3
 8001f18:	4d9b      	ldr	r5, [pc, #620]	@ (8002188 <__aeabi_dsub+0x718>)
 8001f1a:	4015      	ands	r5, r2
 8001f1c:	076f      	lsls	r7, r5, #29
 8001f1e:	08ed      	lsrs	r5, r5, #3
 8001f20:	032c      	lsls	r4, r5, #12
 8001f22:	055d      	lsls	r5, r3, #21
 8001f24:	0b24      	lsrs	r4, r4, #12
 8001f26:	0d6d      	lsrs	r5, r5, #21
 8001f28:	e736      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f2a:	4d95      	ldr	r5, [pc, #596]	@ (8002180 <__aeabi_dsub+0x710>)
 8001f2c:	42ab      	cmp	r3, r5
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x4c2>
 8001f30:	e0d6      	b.n	80020e0 <__aeabi_dsub+0x670>
 8001f32:	1882      	adds	r2, r0, r2
 8001f34:	0021      	movs	r1, r4
 8001f36:	4282      	cmp	r2, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	4459      	add	r1, fp
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	1808      	adds	r0, r1, r0
 8001f40:	07c7      	lsls	r7, r0, #31
 8001f42:	0852      	lsrs	r2, r2, #1
 8001f44:	4317      	orrs	r7, r2
 8001f46:	0844      	lsrs	r4, r0, #1
 8001f48:	0752      	lsls	r2, r2, #29
 8001f4a:	d400      	bmi.n	8001f4e <__aeabi_dsub+0x4de>
 8001f4c:	e185      	b.n	800225a <__aeabi_dsub+0x7ea>
 8001f4e:	220f      	movs	r2, #15
 8001f50:	001d      	movs	r5, r3
 8001f52:	403a      	ands	r2, r7
 8001f54:	2a04      	cmp	r2, #4
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x4ea>
 8001f58:	e61a      	b.n	8001b90 <__aeabi_dsub+0x120>
 8001f5a:	08ff      	lsrs	r7, r7, #3
 8001f5c:	0764      	lsls	r4, r4, #29
 8001f5e:	4327      	orrs	r7, r4
 8001f60:	0905      	lsrs	r5, r0, #4
 8001f62:	e7dd      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8001f64:	465b      	mov	r3, fp
 8001f66:	08d2      	lsrs	r2, r2, #3
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	4317      	orrs	r7, r2
 8001f6c:	08dd      	lsrs	r5, r3, #3
 8001f6e:	e67b      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8001f70:	2700      	movs	r7, #0
 8001f72:	2400      	movs	r4, #0
 8001f74:	e710      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dsub+0x50c>
 8001f7a:	e0d6      	b.n	800212a <__aeabi_dsub+0x6ba>
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x512>
 8001f80:	e12f      	b.n	80021e2 <__aeabi_dsub+0x772>
 8001f82:	2480      	movs	r4, #128	@ 0x80
 8001f84:	2600      	movs	r6, #0
 8001f86:	4d7e      	ldr	r5, [pc, #504]	@ (8002180 <__aeabi_dsub+0x710>)
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	e705      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001f8c:	4666      	mov	r6, ip
 8001f8e:	465c      	mov	r4, fp
 8001f90:	08d0      	lsrs	r0, r2, #3
 8001f92:	e717      	b.n	8001dc4 <__aeabi_dsub+0x354>
 8001f94:	465b      	mov	r3, fp
 8001f96:	1a17      	subs	r7, r2, r0
 8001f98:	42ba      	cmp	r2, r7
 8001f9a:	4192      	sbcs	r2, r2
 8001f9c:	1b1c      	subs	r4, r3, r4
 8001f9e:	2601      	movs	r6, #1
 8001fa0:	4663      	mov	r3, ip
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	1aa4      	subs	r4, r4, r2
 8001fa6:	401e      	ands	r6, r3
 8001fa8:	e5c4      	b.n	8001b34 <__aeabi_dsub+0xc4>
 8001faa:	1883      	adds	r3, r0, r2
 8001fac:	4283      	cmp	r3, r0
 8001fae:	4180      	sbcs	r0, r0
 8001fb0:	445c      	add	r4, fp
 8001fb2:	4240      	negs	r0, r0
 8001fb4:	1825      	adds	r5, r4, r0
 8001fb6:	022a      	lsls	r2, r5, #8
 8001fb8:	d400      	bmi.n	8001fbc <__aeabi_dsub+0x54c>
 8001fba:	e0da      	b.n	8002172 <__aeabi_dsub+0x702>
 8001fbc:	4a72      	ldr	r2, [pc, #456]	@ (8002188 <__aeabi_dsub+0x718>)
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	4015      	ands	r5, r2
 8001fc2:	07ea      	lsls	r2, r5, #31
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	0869      	lsrs	r1, r5, #1
 8001fc8:	075b      	lsls	r3, r3, #29
 8001fca:	d400      	bmi.n	8001fce <__aeabi_dsub+0x55e>
 8001fcc:	e14a      	b.n	8002264 <__aeabi_dsub+0x7f4>
 8001fce:	230f      	movs	r3, #15
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x568>
 8001fd6:	e0fc      	b.n	80021d2 <__aeabi_dsub+0x762>
 8001fd8:	1d17      	adds	r7, r2, #4
 8001fda:	4297      	cmp	r7, r2
 8001fdc:	41a4      	sbcs	r4, r4
 8001fde:	4264      	negs	r4, r4
 8001fe0:	2502      	movs	r5, #2
 8001fe2:	1864      	adds	r4, r4, r1
 8001fe4:	e6ec      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8001fe6:	4647      	mov	r7, r8
 8001fe8:	001c      	movs	r4, r3
 8001fea:	431f      	orrs	r7, r3
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_dsub+0x580>
 8001fee:	e743      	b.n	8001e78 <__aeabi_dsub+0x408>
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	e6cf      	b.n	8001d98 <__aeabi_dsub+0x328>
 8001ff8:	08c0      	lsrs	r0, r0, #3
 8001ffa:	0767      	lsls	r7, r4, #29
 8001ffc:	4307      	orrs	r7, r0
 8001ffe:	08e5      	lsrs	r5, r4, #3
 8002000:	e632      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002002:	1a87      	subs	r7, r0, r2
 8002004:	465b      	mov	r3, fp
 8002006:	42b8      	cmp	r0, r7
 8002008:	4180      	sbcs	r0, r0
 800200a:	1ae4      	subs	r4, r4, r3
 800200c:	4240      	negs	r0, r0
 800200e:	1a24      	subs	r4, r4, r0
 8002010:	0223      	lsls	r3, r4, #8
 8002012:	d428      	bmi.n	8002066 <__aeabi_dsub+0x5f6>
 8002014:	0763      	lsls	r3, r4, #29
 8002016:	08ff      	lsrs	r7, r7, #3
 8002018:	431f      	orrs	r7, r3
 800201a:	08e5      	lsrs	r5, r4, #3
 800201c:	2301      	movs	r3, #1
 800201e:	e77f      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d100      	bne.n	8002026 <__aeabi_dsub+0x5b6>
 8002024:	e673      	b.n	8001d0e <__aeabi_dsub+0x29e>
 8002026:	464b      	mov	r3, r9
 8002028:	1b5f      	subs	r7, r3, r5
 800202a:	003b      	movs	r3, r7
 800202c:	2d00      	cmp	r5, #0
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x5c2>
 8002030:	e742      	b.n	8001eb8 <__aeabi_dsub+0x448>
 8002032:	2f38      	cmp	r7, #56	@ 0x38
 8002034:	dd00      	ble.n	8002038 <__aeabi_dsub+0x5c8>
 8002036:	e0ec      	b.n	8002212 <__aeabi_dsub+0x7a2>
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	000e      	movs	r6, r1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431c      	orrs	r4, r3
 8002040:	2f1f      	cmp	r7, #31
 8002042:	dc25      	bgt.n	8002090 <__aeabi_dsub+0x620>
 8002044:	2520      	movs	r5, #32
 8002046:	0023      	movs	r3, r4
 8002048:	1bed      	subs	r5, r5, r7
 800204a:	0001      	movs	r1, r0
 800204c:	40a8      	lsls	r0, r5
 800204e:	40ab      	lsls	r3, r5
 8002050:	40f9      	lsrs	r1, r7
 8002052:	1e45      	subs	r5, r0, #1
 8002054:	41a8      	sbcs	r0, r5
 8002056:	430b      	orrs	r3, r1
 8002058:	40fc      	lsrs	r4, r7
 800205a:	4318      	orrs	r0, r3
 800205c:	465b      	mov	r3, fp
 800205e:	1b1b      	subs	r3, r3, r4
 8002060:	469b      	mov	fp, r3
 8002062:	e739      	b.n	8001ed8 <__aeabi_dsub+0x468>
 8002064:	4666      	mov	r6, ip
 8002066:	2501      	movs	r5, #1
 8002068:	e562      	b.n	8001b30 <__aeabi_dsub+0xc0>
 800206a:	001f      	movs	r7, r3
 800206c:	4659      	mov	r1, fp
 800206e:	3f20      	subs	r7, #32
 8002070:	40f9      	lsrs	r1, r7
 8002072:	468c      	mov	ip, r1
 8002074:	2b20      	cmp	r3, #32
 8002076:	d005      	beq.n	8002084 <__aeabi_dsub+0x614>
 8002078:	2740      	movs	r7, #64	@ 0x40
 800207a:	4659      	mov	r1, fp
 800207c:	1afb      	subs	r3, r7, r3
 800207e:	4099      	lsls	r1, r3
 8002080:	430a      	orrs	r2, r1
 8002082:	4692      	mov	sl, r2
 8002084:	4657      	mov	r7, sl
 8002086:	1e7b      	subs	r3, r7, #1
 8002088:	419f      	sbcs	r7, r3
 800208a:	4663      	mov	r3, ip
 800208c:	431f      	orrs	r7, r3
 800208e:	e5c1      	b.n	8001c14 <__aeabi_dsub+0x1a4>
 8002090:	003b      	movs	r3, r7
 8002092:	0025      	movs	r5, r4
 8002094:	3b20      	subs	r3, #32
 8002096:	40dd      	lsrs	r5, r3
 8002098:	2f20      	cmp	r7, #32
 800209a:	d004      	beq.n	80020a6 <__aeabi_dsub+0x636>
 800209c:	2340      	movs	r3, #64	@ 0x40
 800209e:	1bdb      	subs	r3, r3, r7
 80020a0:	409c      	lsls	r4, r3
 80020a2:	4320      	orrs	r0, r4
 80020a4:	4680      	mov	r8, r0
 80020a6:	4640      	mov	r0, r8
 80020a8:	1e43      	subs	r3, r0, #1
 80020aa:	4198      	sbcs	r0, r3
 80020ac:	4328      	orrs	r0, r5
 80020ae:	e713      	b.n	8001ed8 <__aeabi_dsub+0x468>
 80020b0:	2900      	cmp	r1, #0
 80020b2:	d09d      	beq.n	8001ff0 <__aeabi_dsub+0x580>
 80020b4:	2601      	movs	r6, #1
 80020b6:	4663      	mov	r3, ip
 80020b8:	465c      	mov	r4, fp
 80020ba:	4690      	mov	r8, r2
 80020bc:	401e      	ands	r6, r3
 80020be:	e6db      	b.n	8001e78 <__aeabi_dsub+0x408>
 80020c0:	1a17      	subs	r7, r2, r0
 80020c2:	465b      	mov	r3, fp
 80020c4:	42ba      	cmp	r2, r7
 80020c6:	4192      	sbcs	r2, r2
 80020c8:	1b1c      	subs	r4, r3, r4
 80020ca:	4252      	negs	r2, r2
 80020cc:	1aa4      	subs	r4, r4, r2
 80020ce:	0223      	lsls	r3, r4, #8
 80020d0:	d4c8      	bmi.n	8002064 <__aeabi_dsub+0x5f4>
 80020d2:	0763      	lsls	r3, r4, #29
 80020d4:	08ff      	lsrs	r7, r7, #3
 80020d6:	431f      	orrs	r7, r3
 80020d8:	4666      	mov	r6, ip
 80020da:	2301      	movs	r3, #1
 80020dc:	08e5      	lsrs	r5, r4, #3
 80020de:	e71f      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 80020e0:	001d      	movs	r5, r3
 80020e2:	2400      	movs	r4, #0
 80020e4:	2700      	movs	r7, #0
 80020e6:	e657      	b.n	8001d98 <__aeabi_dsub+0x328>
 80020e8:	465c      	mov	r4, fp
 80020ea:	08d0      	lsrs	r0, r2, #3
 80020ec:	e66a      	b.n	8001dc4 <__aeabi_dsub+0x354>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x684>
 80020f2:	e737      	b.n	8001f64 <__aeabi_dsub+0x4f4>
 80020f4:	4653      	mov	r3, sl
 80020f6:	08c0      	lsrs	r0, r0, #3
 80020f8:	0767      	lsls	r7, r4, #29
 80020fa:	4307      	orrs	r7, r0
 80020fc:	08e5      	lsrs	r5, r4, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x694>
 8002102:	e5b1      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	031b      	lsls	r3, r3, #12
 8002108:	421d      	tst	r5, r3
 800210a:	d008      	beq.n	800211e <__aeabi_dsub+0x6ae>
 800210c:	4659      	mov	r1, fp
 800210e:	08c8      	lsrs	r0, r1, #3
 8002110:	4218      	tst	r0, r3
 8002112:	d104      	bne.n	800211e <__aeabi_dsub+0x6ae>
 8002114:	08d2      	lsrs	r2, r2, #3
 8002116:	0749      	lsls	r1, r1, #29
 8002118:	430a      	orrs	r2, r1
 800211a:	0017      	movs	r7, r2
 800211c:	0005      	movs	r5, r0
 800211e:	0f7b      	lsrs	r3, r7, #29
 8002120:	00ff      	lsls	r7, r7, #3
 8002122:	08ff      	lsrs	r7, r7, #3
 8002124:	075b      	lsls	r3, r3, #29
 8002126:	431f      	orrs	r7, r3
 8002128:	e59e      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 800212a:	08c0      	lsrs	r0, r0, #3
 800212c:	0763      	lsls	r3, r4, #29
 800212e:	4318      	orrs	r0, r3
 8002130:	08e5      	lsrs	r5, r4, #3
 8002132:	2900      	cmp	r1, #0
 8002134:	d053      	beq.n	80021de <__aeabi_dsub+0x76e>
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	031b      	lsls	r3, r3, #12
 800213a:	421d      	tst	r5, r3
 800213c:	d00a      	beq.n	8002154 <__aeabi_dsub+0x6e4>
 800213e:	4659      	mov	r1, fp
 8002140:	08cc      	lsrs	r4, r1, #3
 8002142:	421c      	tst	r4, r3
 8002144:	d106      	bne.n	8002154 <__aeabi_dsub+0x6e4>
 8002146:	2601      	movs	r6, #1
 8002148:	4663      	mov	r3, ip
 800214a:	0025      	movs	r5, r4
 800214c:	08d0      	lsrs	r0, r2, #3
 800214e:	0749      	lsls	r1, r1, #29
 8002150:	4308      	orrs	r0, r1
 8002152:	401e      	ands	r6, r3
 8002154:	0f47      	lsrs	r7, r0, #29
 8002156:	00c0      	lsls	r0, r0, #3
 8002158:	08c0      	lsrs	r0, r0, #3
 800215a:	077f      	lsls	r7, r7, #29
 800215c:	4307      	orrs	r7, r0
 800215e:	e583      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002160:	1883      	adds	r3, r0, r2
 8002162:	4293      	cmp	r3, r2
 8002164:	4192      	sbcs	r2, r2
 8002166:	445c      	add	r4, fp
 8002168:	4252      	negs	r2, r2
 800216a:	18a5      	adds	r5, r4, r2
 800216c:	022a      	lsls	r2, r5, #8
 800216e:	d500      	bpl.n	8002172 <__aeabi_dsub+0x702>
 8002170:	e724      	b.n	8001fbc <__aeabi_dsub+0x54c>
 8002172:	076f      	lsls	r7, r5, #29
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	431f      	orrs	r7, r3
 8002178:	08ed      	lsrs	r5, r5, #3
 800217a:	2301      	movs	r3, #1
 800217c:	e6d0      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	000007ff 	.word	0x000007ff
 8002184:	000007fe 	.word	0x000007fe
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	465b      	mov	r3, fp
 800218e:	08d2      	lsrs	r2, r2, #3
 8002190:	075f      	lsls	r7, r3, #29
 8002192:	4666      	mov	r6, ip
 8002194:	4317      	orrs	r7, r2
 8002196:	08dd      	lsrs	r5, r3, #3
 8002198:	e566      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 800219a:	0025      	movs	r5, r4
 800219c:	3b20      	subs	r3, #32
 800219e:	40dd      	lsrs	r5, r3
 80021a0:	4663      	mov	r3, ip
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d005      	beq.n	80021b2 <__aeabi_dsub+0x742>
 80021a6:	2340      	movs	r3, #64	@ 0x40
 80021a8:	4661      	mov	r1, ip
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	409c      	lsls	r4, r3
 80021ae:	4320      	orrs	r0, r4
 80021b0:	4680      	mov	r8, r0
 80021b2:	4647      	mov	r7, r8
 80021b4:	1e7b      	subs	r3, r7, #1
 80021b6:	419f      	sbcs	r7, r3
 80021b8:	432f      	orrs	r7, r5
 80021ba:	e5a0      	b.n	8001cfe <__aeabi_dsub+0x28e>
 80021bc:	2120      	movs	r1, #32
 80021be:	2700      	movs	r7, #0
 80021c0:	1a09      	subs	r1, r1, r0
 80021c2:	e4d2      	b.n	8001b6a <__aeabi_dsub+0xfa>
 80021c4:	2f00      	cmp	r7, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dsub+0x75a>
 80021c8:	e713      	b.n	8001ff2 <__aeabi_dsub+0x582>
 80021ca:	465c      	mov	r4, fp
 80021cc:	0017      	movs	r7, r2
 80021ce:	2500      	movs	r5, #0
 80021d0:	e5f6      	b.n	8001dc0 <__aeabi_dsub+0x350>
 80021d2:	08d7      	lsrs	r7, r2, #3
 80021d4:	0749      	lsls	r1, r1, #29
 80021d6:	2302      	movs	r3, #2
 80021d8:	430f      	orrs	r7, r1
 80021da:	092d      	lsrs	r5, r5, #4
 80021dc:	e6a0      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 80021de:	0007      	movs	r7, r0
 80021e0:	e542      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 80021e2:	465b      	mov	r3, fp
 80021e4:	2601      	movs	r6, #1
 80021e6:	075f      	lsls	r7, r3, #29
 80021e8:	08dd      	lsrs	r5, r3, #3
 80021ea:	4663      	mov	r3, ip
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	4317      	orrs	r7, r2
 80021f0:	401e      	ands	r6, r3
 80021f2:	e539      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 80021f4:	465b      	mov	r3, fp
 80021f6:	08d2      	lsrs	r2, r2, #3
 80021f8:	075f      	lsls	r7, r3, #29
 80021fa:	4317      	orrs	r7, r2
 80021fc:	08dd      	lsrs	r5, r3, #3
 80021fe:	e533      	b.n	8001c68 <__aeabi_dsub+0x1f8>
 8002200:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <__aeabi_dsub+0x80c>)
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	4022      	ands	r2, r4
 8002206:	0757      	lsls	r7, r2, #29
 8002208:	0252      	lsls	r2, r2, #9
 800220a:	2501      	movs	r5, #1
 800220c:	431f      	orrs	r7, r3
 800220e:	0b14      	lsrs	r4, r2, #12
 8002210:	e5c2      	b.n	8001d98 <__aeabi_dsub+0x328>
 8002212:	000e      	movs	r6, r1
 8002214:	2001      	movs	r0, #1
 8002216:	e65f      	b.n	8001ed8 <__aeabi_dsub+0x468>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <__aeabi_dsub+0x7c8>
 800221c:	464b      	mov	r3, r9
 800221e:	1b5b      	subs	r3, r3, r5
 8002220:	469c      	mov	ip, r3
 8002222:	2d00      	cmp	r5, #0
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x7b8>
 8002226:	e548      	b.n	8001cba <__aeabi_dsub+0x24a>
 8002228:	2701      	movs	r7, #1
 800222a:	2b38      	cmp	r3, #56	@ 0x38
 800222c:	dd00      	ble.n	8002230 <__aeabi_dsub+0x7c0>
 800222e:	e566      	b.n	8001cfe <__aeabi_dsub+0x28e>
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431c      	orrs	r4, r3
 8002236:	e550      	b.n	8001cda <__aeabi_dsub+0x26a>
 8002238:	1c6b      	adds	r3, r5, #1
 800223a:	4d11      	ldr	r5, [pc, #68]	@ (8002280 <__aeabi_dsub+0x810>)
 800223c:	422b      	tst	r3, r5
 800223e:	d000      	beq.n	8002242 <__aeabi_dsub+0x7d2>
 8002240:	e673      	b.n	8001f2a <__aeabi_dsub+0x4ba>
 8002242:	4659      	mov	r1, fp
 8002244:	0023      	movs	r3, r4
 8002246:	4311      	orrs	r1, r2
 8002248:	468a      	mov	sl, r1
 800224a:	4303      	orrs	r3, r0
 800224c:	e600      	b.n	8001e50 <__aeabi_dsub+0x3e0>
 800224e:	0767      	lsls	r7, r4, #29
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	2300      	movs	r3, #0
 8002254:	4307      	orrs	r7, r0
 8002256:	08e5      	lsrs	r5, r4, #3
 8002258:	e662      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 800225a:	0764      	lsls	r4, r4, #29
 800225c:	08ff      	lsrs	r7, r7, #3
 800225e:	4327      	orrs	r7, r4
 8002260:	0905      	lsrs	r5, r0, #4
 8002262:	e65d      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002264:	08d2      	lsrs	r2, r2, #3
 8002266:	0749      	lsls	r1, r1, #29
 8002268:	4311      	orrs	r1, r2
 800226a:	000f      	movs	r7, r1
 800226c:	2302      	movs	r3, #2
 800226e:	092d      	lsrs	r5, r5, #4
 8002270:	e656      	b.n	8001f20 <__aeabi_dsub+0x4b0>
 8002272:	0007      	movs	r7, r0
 8002274:	e5a4      	b.n	8001dc0 <__aeabi_dsub+0x350>
 8002276:	0038      	movs	r0, r7
 8002278:	e48f      	b.n	8001b9a <__aeabi_dsub+0x12a>
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	ff7fffff 	.word	0xff7fffff
 8002280:	000007fe 	.word	0x000007fe

08002284 <__aeabi_d2iz>:
 8002284:	000b      	movs	r3, r1
 8002286:	0002      	movs	r2, r0
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	4d16      	ldr	r5, [pc, #88]	@ (80022e4 <__aeabi_d2iz+0x60>)
 800228c:	030c      	lsls	r4, r1, #12
 800228e:	b082      	sub	sp, #8
 8002290:	0049      	lsls	r1, r1, #1
 8002292:	2000      	movs	r0, #0
 8002294:	9200      	str	r2, [sp, #0]
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	0b24      	lsrs	r4, r4, #12
 800229a:	0d49      	lsrs	r1, r1, #21
 800229c:	0fde      	lsrs	r6, r3, #31
 800229e:	42a9      	cmp	r1, r5
 80022a0:	dd04      	ble.n	80022ac <__aeabi_d2iz+0x28>
 80022a2:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <__aeabi_d2iz+0x64>)
 80022a4:	4281      	cmp	r1, r0
 80022a6:	dd03      	ble.n	80022b0 <__aeabi_d2iz+0x2c>
 80022a8:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <__aeabi_d2iz+0x68>)
 80022aa:	18f0      	adds	r0, r6, r3
 80022ac:	b002      	add	sp, #8
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	2080      	movs	r0, #128	@ 0x80
 80022b2:	0340      	lsls	r0, r0, #13
 80022b4:	4320      	orrs	r0, r4
 80022b6:	4c0e      	ldr	r4, [pc, #56]	@ (80022f0 <__aeabi_d2iz+0x6c>)
 80022b8:	1a64      	subs	r4, r4, r1
 80022ba:	2c1f      	cmp	r4, #31
 80022bc:	dd08      	ble.n	80022d0 <__aeabi_d2iz+0x4c>
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <__aeabi_d2iz+0x70>)
 80022c0:	1a5b      	subs	r3, r3, r1
 80022c2:	40d8      	lsrs	r0, r3
 80022c4:	0003      	movs	r3, r0
 80022c6:	4258      	negs	r0, r3
 80022c8:	2e00      	cmp	r6, #0
 80022ca:	d1ef      	bne.n	80022ac <__aeabi_d2iz+0x28>
 80022cc:	0018      	movs	r0, r3
 80022ce:	e7ed      	b.n	80022ac <__aeabi_d2iz+0x28>
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <__aeabi_d2iz+0x74>)
 80022d2:	9a00      	ldr	r2, [sp, #0]
 80022d4:	469c      	mov	ip, r3
 80022d6:	0003      	movs	r3, r0
 80022d8:	4461      	add	r1, ip
 80022da:	408b      	lsls	r3, r1
 80022dc:	40e2      	lsrs	r2, r4
 80022de:	4313      	orrs	r3, r2
 80022e0:	e7f1      	b.n	80022c6 <__aeabi_d2iz+0x42>
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	000003fe 	.word	0x000003fe
 80022e8:	0000041d 	.word	0x0000041d
 80022ec:	7fffffff 	.word	0x7fffffff
 80022f0:	00000433 	.word	0x00000433
 80022f4:	00000413 	.word	0x00000413
 80022f8:	fffffbed 	.word	0xfffffbed

080022fc <__aeabi_i2d>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	2800      	cmp	r0, #0
 8002300:	d016      	beq.n	8002330 <__aeabi_i2d+0x34>
 8002302:	17c3      	asrs	r3, r0, #31
 8002304:	18c5      	adds	r5, r0, r3
 8002306:	405d      	eors	r5, r3
 8002308:	0fc4      	lsrs	r4, r0, #31
 800230a:	0028      	movs	r0, r5
 800230c:	f000 f862 	bl	80023d4 <__clzsi2>
 8002310:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <__aeabi_i2d+0x58>)
 8002312:	1a1b      	subs	r3, r3, r0
 8002314:	055b      	lsls	r3, r3, #21
 8002316:	0d5b      	lsrs	r3, r3, #21
 8002318:	280a      	cmp	r0, #10
 800231a:	dc14      	bgt.n	8002346 <__aeabi_i2d+0x4a>
 800231c:	0002      	movs	r2, r0
 800231e:	002e      	movs	r6, r5
 8002320:	3215      	adds	r2, #21
 8002322:	4096      	lsls	r6, r2
 8002324:	220b      	movs	r2, #11
 8002326:	1a12      	subs	r2, r2, r0
 8002328:	40d5      	lsrs	r5, r2
 800232a:	032d      	lsls	r5, r5, #12
 800232c:	0b2d      	lsrs	r5, r5, #12
 800232e:	e003      	b.n	8002338 <__aeabi_i2d+0x3c>
 8002330:	2400      	movs	r4, #0
 8002332:	2300      	movs	r3, #0
 8002334:	2500      	movs	r5, #0
 8002336:	2600      	movs	r6, #0
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	432b      	orrs	r3, r5
 800233c:	07e4      	lsls	r4, r4, #31
 800233e:	4323      	orrs	r3, r4
 8002340:	0030      	movs	r0, r6
 8002342:	0019      	movs	r1, r3
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	380b      	subs	r0, #11
 8002348:	4085      	lsls	r5, r0
 800234a:	032d      	lsls	r5, r5, #12
 800234c:	2600      	movs	r6, #0
 800234e:	0b2d      	lsrs	r5, r5, #12
 8002350:	e7f2      	b.n	8002338 <__aeabi_i2d+0x3c>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	0000041e 	.word	0x0000041e

08002358 <__aeabi_cdrcmple>:
 8002358:	4684      	mov	ip, r0
 800235a:	0010      	movs	r0, r2
 800235c:	4662      	mov	r2, ip
 800235e:	468c      	mov	ip, r1
 8002360:	0019      	movs	r1, r3
 8002362:	4663      	mov	r3, ip
 8002364:	e000      	b.n	8002368 <__aeabi_cdcmpeq>
 8002366:	46c0      	nop			@ (mov r8, r8)

08002368 <__aeabi_cdcmpeq>:
 8002368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800236a:	f000 f905 	bl	8002578 <__ledf2>
 800236e:	2800      	cmp	r0, #0
 8002370:	d401      	bmi.n	8002376 <__aeabi_cdcmpeq+0xe>
 8002372:	2100      	movs	r1, #0
 8002374:	42c8      	cmn	r0, r1
 8002376:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002378 <__aeabi_dcmpeq>:
 8002378:	b510      	push	{r4, lr}
 800237a:	f000 f849 	bl	8002410 <__eqdf2>
 800237e:	4240      	negs	r0, r0
 8002380:	3001      	adds	r0, #1
 8002382:	bd10      	pop	{r4, pc}

08002384 <__aeabi_dcmplt>:
 8002384:	b510      	push	{r4, lr}
 8002386:	f000 f8f7 	bl	8002578 <__ledf2>
 800238a:	2800      	cmp	r0, #0
 800238c:	db01      	blt.n	8002392 <__aeabi_dcmplt+0xe>
 800238e:	2000      	movs	r0, #0
 8002390:	bd10      	pop	{r4, pc}
 8002392:	2001      	movs	r0, #1
 8002394:	bd10      	pop	{r4, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)

08002398 <__aeabi_dcmple>:
 8002398:	b510      	push	{r4, lr}
 800239a:	f000 f8ed 	bl	8002578 <__ledf2>
 800239e:	2800      	cmp	r0, #0
 80023a0:	dd01      	ble.n	80023a6 <__aeabi_dcmple+0xe>
 80023a2:	2000      	movs	r0, #0
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	2001      	movs	r0, #1
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)

080023ac <__aeabi_dcmpgt>:
 80023ac:	b510      	push	{r4, lr}
 80023ae:	f000 f873 	bl	8002498 <__gedf2>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	dc01      	bgt.n	80023ba <__aeabi_dcmpgt+0xe>
 80023b6:	2000      	movs	r0, #0
 80023b8:	bd10      	pop	{r4, pc}
 80023ba:	2001      	movs	r0, #1
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)

080023c0 <__aeabi_dcmpge>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	f000 f869 	bl	8002498 <__gedf2>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	da01      	bge.n	80023ce <__aeabi_dcmpge+0xe>
 80023ca:	2000      	movs	r0, #0
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	2001      	movs	r0, #1
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)

080023d4 <__clzsi2>:
 80023d4:	211c      	movs	r1, #28
 80023d6:	2301      	movs	r3, #1
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	4298      	cmp	r0, r3
 80023dc:	d301      	bcc.n	80023e2 <__clzsi2+0xe>
 80023de:	0c00      	lsrs	r0, r0, #16
 80023e0:	3910      	subs	r1, #16
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	4298      	cmp	r0, r3
 80023e6:	d301      	bcc.n	80023ec <__clzsi2+0x18>
 80023e8:	0a00      	lsrs	r0, r0, #8
 80023ea:	3908      	subs	r1, #8
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d301      	bcc.n	80023f6 <__clzsi2+0x22>
 80023f2:	0900      	lsrs	r0, r0, #4
 80023f4:	3904      	subs	r1, #4
 80023f6:	a202      	add	r2, pc, #8	@ (adr r2, 8002400 <__clzsi2+0x2c>)
 80023f8:	5c10      	ldrb	r0, [r2, r0]
 80023fa:	1840      	adds	r0, r0, r1
 80023fc:	4770      	bx	lr
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	02020304 	.word	0x02020304
 8002404:	01010101 	.word	0x01010101
	...

08002410 <__eqdf2>:
 8002410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002412:	4657      	mov	r7, sl
 8002414:	46de      	mov	lr, fp
 8002416:	464e      	mov	r6, r9
 8002418:	4645      	mov	r5, r8
 800241a:	b5e0      	push	{r5, r6, r7, lr}
 800241c:	000d      	movs	r5, r1
 800241e:	0004      	movs	r4, r0
 8002420:	0fe8      	lsrs	r0, r5, #31
 8002422:	4683      	mov	fp, r0
 8002424:	0309      	lsls	r1, r1, #12
 8002426:	0fd8      	lsrs	r0, r3, #31
 8002428:	0b09      	lsrs	r1, r1, #12
 800242a:	4682      	mov	sl, r0
 800242c:	4819      	ldr	r0, [pc, #100]	@ (8002494 <__eqdf2+0x84>)
 800242e:	468c      	mov	ip, r1
 8002430:	031f      	lsls	r7, r3, #12
 8002432:	0069      	lsls	r1, r5, #1
 8002434:	005e      	lsls	r6, r3, #1
 8002436:	0d49      	lsrs	r1, r1, #21
 8002438:	0b3f      	lsrs	r7, r7, #12
 800243a:	0d76      	lsrs	r6, r6, #21
 800243c:	4281      	cmp	r1, r0
 800243e:	d018      	beq.n	8002472 <__eqdf2+0x62>
 8002440:	4286      	cmp	r6, r0
 8002442:	d00f      	beq.n	8002464 <__eqdf2+0x54>
 8002444:	2001      	movs	r0, #1
 8002446:	42b1      	cmp	r1, r6
 8002448:	d10d      	bne.n	8002466 <__eqdf2+0x56>
 800244a:	45bc      	cmp	ip, r7
 800244c:	d10b      	bne.n	8002466 <__eqdf2+0x56>
 800244e:	4294      	cmp	r4, r2
 8002450:	d109      	bne.n	8002466 <__eqdf2+0x56>
 8002452:	45d3      	cmp	fp, sl
 8002454:	d01c      	beq.n	8002490 <__eqdf2+0x80>
 8002456:	2900      	cmp	r1, #0
 8002458:	d105      	bne.n	8002466 <__eqdf2+0x56>
 800245a:	4660      	mov	r0, ip
 800245c:	4320      	orrs	r0, r4
 800245e:	1e43      	subs	r3, r0, #1
 8002460:	4198      	sbcs	r0, r3
 8002462:	e000      	b.n	8002466 <__eqdf2+0x56>
 8002464:	2001      	movs	r0, #1
 8002466:	bcf0      	pop	{r4, r5, r6, r7}
 8002468:	46bb      	mov	fp, r7
 800246a:	46b2      	mov	sl, r6
 800246c:	46a9      	mov	r9, r5
 800246e:	46a0      	mov	r8, r4
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002472:	2001      	movs	r0, #1
 8002474:	428e      	cmp	r6, r1
 8002476:	d1f6      	bne.n	8002466 <__eqdf2+0x56>
 8002478:	4661      	mov	r1, ip
 800247a:	4339      	orrs	r1, r7
 800247c:	000f      	movs	r7, r1
 800247e:	4317      	orrs	r7, r2
 8002480:	4327      	orrs	r7, r4
 8002482:	d1f0      	bne.n	8002466 <__eqdf2+0x56>
 8002484:	465b      	mov	r3, fp
 8002486:	4652      	mov	r2, sl
 8002488:	1a98      	subs	r0, r3, r2
 800248a:	1e43      	subs	r3, r0, #1
 800248c:	4198      	sbcs	r0, r3
 800248e:	e7ea      	b.n	8002466 <__eqdf2+0x56>
 8002490:	2000      	movs	r0, #0
 8002492:	e7e8      	b.n	8002466 <__eqdf2+0x56>
 8002494:	000007ff 	.word	0x000007ff

08002498 <__gedf2>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	464e      	mov	r6, r9
 800249e:	4645      	mov	r5, r8
 80024a0:	46de      	mov	lr, fp
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	000d      	movs	r5, r1
 80024a6:	030e      	lsls	r6, r1, #12
 80024a8:	0049      	lsls	r1, r1, #1
 80024aa:	0d49      	lsrs	r1, r1, #21
 80024ac:	468a      	mov	sl, r1
 80024ae:	0fdf      	lsrs	r7, r3, #31
 80024b0:	0fe9      	lsrs	r1, r5, #31
 80024b2:	46bc      	mov	ip, r7
 80024b4:	b083      	sub	sp, #12
 80024b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002574 <__gedf2+0xdc>)
 80024b8:	0004      	movs	r4, r0
 80024ba:	4680      	mov	r8, r0
 80024bc:	9101      	str	r1, [sp, #4]
 80024be:	0058      	lsls	r0, r3, #1
 80024c0:	0319      	lsls	r1, r3, #12
 80024c2:	4691      	mov	r9, r2
 80024c4:	0b36      	lsrs	r6, r6, #12
 80024c6:	0b09      	lsrs	r1, r1, #12
 80024c8:	0d40      	lsrs	r0, r0, #21
 80024ca:	45ba      	cmp	sl, r7
 80024cc:	d01d      	beq.n	800250a <__gedf2+0x72>
 80024ce:	42b8      	cmp	r0, r7
 80024d0:	d00d      	beq.n	80024ee <__gedf2+0x56>
 80024d2:	4657      	mov	r7, sl
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	d12a      	bne.n	800252e <__gedf2+0x96>
 80024d8:	4334      	orrs	r4, r6
 80024da:	2800      	cmp	r0, #0
 80024dc:	d124      	bne.n	8002528 <__gedf2+0x90>
 80024de:	430a      	orrs	r2, r1
 80024e0:	d036      	beq.n	8002550 <__gedf2+0xb8>
 80024e2:	2c00      	cmp	r4, #0
 80024e4:	d141      	bne.n	800256a <__gedf2+0xd2>
 80024e6:	4663      	mov	r3, ip
 80024e8:	0058      	lsls	r0, r3, #1
 80024ea:	3801      	subs	r0, #1
 80024ec:	e015      	b.n	800251a <__gedf2+0x82>
 80024ee:	4311      	orrs	r1, r2
 80024f0:	d138      	bne.n	8002564 <__gedf2+0xcc>
 80024f2:	4653      	mov	r3, sl
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <__gedf2+0x64>
 80024f8:	4326      	orrs	r6, r4
 80024fa:	d0f4      	beq.n	80024e6 <__gedf2+0x4e>
 80024fc:	9b01      	ldr	r3, [sp, #4]
 80024fe:	4563      	cmp	r3, ip
 8002500:	d107      	bne.n	8002512 <__gedf2+0x7a>
 8002502:	9b01      	ldr	r3, [sp, #4]
 8002504:	0058      	lsls	r0, r3, #1
 8002506:	3801      	subs	r0, #1
 8002508:	e007      	b.n	800251a <__gedf2+0x82>
 800250a:	4326      	orrs	r6, r4
 800250c:	d12a      	bne.n	8002564 <__gedf2+0xcc>
 800250e:	4550      	cmp	r0, sl
 8002510:	d021      	beq.n	8002556 <__gedf2+0xbe>
 8002512:	2001      	movs	r0, #1
 8002514:	9b01      	ldr	r3, [sp, #4]
 8002516:	425f      	negs	r7, r3
 8002518:	4338      	orrs	r0, r7
 800251a:	b003      	add	sp, #12
 800251c:	bcf0      	pop	{r4, r5, r6, r7}
 800251e:	46bb      	mov	fp, r7
 8002520:	46b2      	mov	sl, r6
 8002522:	46a9      	mov	r9, r5
 8002524:	46a0      	mov	r8, r4
 8002526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002528:	2c00      	cmp	r4, #0
 800252a:	d0dc      	beq.n	80024e6 <__gedf2+0x4e>
 800252c:	e7e6      	b.n	80024fc <__gedf2+0x64>
 800252e:	2800      	cmp	r0, #0
 8002530:	d0ef      	beq.n	8002512 <__gedf2+0x7a>
 8002532:	9b01      	ldr	r3, [sp, #4]
 8002534:	4563      	cmp	r3, ip
 8002536:	d1ec      	bne.n	8002512 <__gedf2+0x7a>
 8002538:	4582      	cmp	sl, r0
 800253a:	dcea      	bgt.n	8002512 <__gedf2+0x7a>
 800253c:	dbe1      	blt.n	8002502 <__gedf2+0x6a>
 800253e:	428e      	cmp	r6, r1
 8002540:	d8e7      	bhi.n	8002512 <__gedf2+0x7a>
 8002542:	d1de      	bne.n	8002502 <__gedf2+0x6a>
 8002544:	45c8      	cmp	r8, r9
 8002546:	d8e4      	bhi.n	8002512 <__gedf2+0x7a>
 8002548:	2000      	movs	r0, #0
 800254a:	45c8      	cmp	r8, r9
 800254c:	d2e5      	bcs.n	800251a <__gedf2+0x82>
 800254e:	e7d8      	b.n	8002502 <__gedf2+0x6a>
 8002550:	2c00      	cmp	r4, #0
 8002552:	d0e2      	beq.n	800251a <__gedf2+0x82>
 8002554:	e7dd      	b.n	8002512 <__gedf2+0x7a>
 8002556:	4311      	orrs	r1, r2
 8002558:	d104      	bne.n	8002564 <__gedf2+0xcc>
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	4563      	cmp	r3, ip
 800255e:	d1d8      	bne.n	8002512 <__gedf2+0x7a>
 8002560:	2000      	movs	r0, #0
 8002562:	e7da      	b.n	800251a <__gedf2+0x82>
 8002564:	2002      	movs	r0, #2
 8002566:	4240      	negs	r0, r0
 8002568:	e7d7      	b.n	800251a <__gedf2+0x82>
 800256a:	9b01      	ldr	r3, [sp, #4]
 800256c:	4563      	cmp	r3, ip
 800256e:	d0e6      	beq.n	800253e <__gedf2+0xa6>
 8002570:	e7cf      	b.n	8002512 <__gedf2+0x7a>
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	000007ff 	.word	0x000007ff

08002578 <__ledf2>:
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	4657      	mov	r7, sl
 800257c:	464e      	mov	r6, r9
 800257e:	4645      	mov	r5, r8
 8002580:	46de      	mov	lr, fp
 8002582:	b5e0      	push	{r5, r6, r7, lr}
 8002584:	000d      	movs	r5, r1
 8002586:	030e      	lsls	r6, r1, #12
 8002588:	0049      	lsls	r1, r1, #1
 800258a:	0d49      	lsrs	r1, r1, #21
 800258c:	468a      	mov	sl, r1
 800258e:	0fdf      	lsrs	r7, r3, #31
 8002590:	0fe9      	lsrs	r1, r5, #31
 8002592:	46bc      	mov	ip, r7
 8002594:	b083      	sub	sp, #12
 8002596:	4f2e      	ldr	r7, [pc, #184]	@ (8002650 <__ledf2+0xd8>)
 8002598:	0004      	movs	r4, r0
 800259a:	4680      	mov	r8, r0
 800259c:	9101      	str	r1, [sp, #4]
 800259e:	0058      	lsls	r0, r3, #1
 80025a0:	0319      	lsls	r1, r3, #12
 80025a2:	4691      	mov	r9, r2
 80025a4:	0b36      	lsrs	r6, r6, #12
 80025a6:	0b09      	lsrs	r1, r1, #12
 80025a8:	0d40      	lsrs	r0, r0, #21
 80025aa:	45ba      	cmp	sl, r7
 80025ac:	d01e      	beq.n	80025ec <__ledf2+0x74>
 80025ae:	42b8      	cmp	r0, r7
 80025b0:	d00d      	beq.n	80025ce <__ledf2+0x56>
 80025b2:	4657      	mov	r7, sl
 80025b4:	2f00      	cmp	r7, #0
 80025b6:	d127      	bne.n	8002608 <__ledf2+0x90>
 80025b8:	4334      	orrs	r4, r6
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d133      	bne.n	8002626 <__ledf2+0xae>
 80025be:	430a      	orrs	r2, r1
 80025c0:	d034      	beq.n	800262c <__ledf2+0xb4>
 80025c2:	2c00      	cmp	r4, #0
 80025c4:	d140      	bne.n	8002648 <__ledf2+0xd0>
 80025c6:	4663      	mov	r3, ip
 80025c8:	0058      	lsls	r0, r3, #1
 80025ca:	3801      	subs	r0, #1
 80025cc:	e015      	b.n	80025fa <__ledf2+0x82>
 80025ce:	4311      	orrs	r1, r2
 80025d0:	d112      	bne.n	80025f8 <__ledf2+0x80>
 80025d2:	4653      	mov	r3, sl
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <__ledf2+0x64>
 80025d8:	4326      	orrs	r6, r4
 80025da:	d0f4      	beq.n	80025c6 <__ledf2+0x4e>
 80025dc:	9b01      	ldr	r3, [sp, #4]
 80025de:	4563      	cmp	r3, ip
 80025e0:	d01d      	beq.n	800261e <__ledf2+0xa6>
 80025e2:	2001      	movs	r0, #1
 80025e4:	9b01      	ldr	r3, [sp, #4]
 80025e6:	425f      	negs	r7, r3
 80025e8:	4338      	orrs	r0, r7
 80025ea:	e006      	b.n	80025fa <__ledf2+0x82>
 80025ec:	4326      	orrs	r6, r4
 80025ee:	d103      	bne.n	80025f8 <__ledf2+0x80>
 80025f0:	4550      	cmp	r0, sl
 80025f2:	d1f6      	bne.n	80025e2 <__ledf2+0x6a>
 80025f4:	4311      	orrs	r1, r2
 80025f6:	d01c      	beq.n	8002632 <__ledf2+0xba>
 80025f8:	2002      	movs	r0, #2
 80025fa:	b003      	add	sp, #12
 80025fc:	bcf0      	pop	{r4, r5, r6, r7}
 80025fe:	46bb      	mov	fp, r7
 8002600:	46b2      	mov	sl, r6
 8002602:	46a9      	mov	r9, r5
 8002604:	46a0      	mov	r8, r4
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002608:	2800      	cmp	r0, #0
 800260a:	d0ea      	beq.n	80025e2 <__ledf2+0x6a>
 800260c:	9b01      	ldr	r3, [sp, #4]
 800260e:	4563      	cmp	r3, ip
 8002610:	d1e7      	bne.n	80025e2 <__ledf2+0x6a>
 8002612:	4582      	cmp	sl, r0
 8002614:	dce5      	bgt.n	80025e2 <__ledf2+0x6a>
 8002616:	db02      	blt.n	800261e <__ledf2+0xa6>
 8002618:	428e      	cmp	r6, r1
 800261a:	d8e2      	bhi.n	80025e2 <__ledf2+0x6a>
 800261c:	d00e      	beq.n	800263c <__ledf2+0xc4>
 800261e:	9b01      	ldr	r3, [sp, #4]
 8002620:	0058      	lsls	r0, r3, #1
 8002622:	3801      	subs	r0, #1
 8002624:	e7e9      	b.n	80025fa <__ledf2+0x82>
 8002626:	2c00      	cmp	r4, #0
 8002628:	d0cd      	beq.n	80025c6 <__ledf2+0x4e>
 800262a:	e7d7      	b.n	80025dc <__ledf2+0x64>
 800262c:	2c00      	cmp	r4, #0
 800262e:	d0e4      	beq.n	80025fa <__ledf2+0x82>
 8002630:	e7d7      	b.n	80025e2 <__ledf2+0x6a>
 8002632:	9b01      	ldr	r3, [sp, #4]
 8002634:	2000      	movs	r0, #0
 8002636:	4563      	cmp	r3, ip
 8002638:	d0df      	beq.n	80025fa <__ledf2+0x82>
 800263a:	e7d2      	b.n	80025e2 <__ledf2+0x6a>
 800263c:	45c8      	cmp	r8, r9
 800263e:	d8d0      	bhi.n	80025e2 <__ledf2+0x6a>
 8002640:	2000      	movs	r0, #0
 8002642:	45c8      	cmp	r8, r9
 8002644:	d2d9      	bcs.n	80025fa <__ledf2+0x82>
 8002646:	e7ea      	b.n	800261e <__ledf2+0xa6>
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	4563      	cmp	r3, ip
 800264c:	d0e4      	beq.n	8002618 <__ledf2+0xa0>
 800264e:	e7c8      	b.n	80025e2 <__ledf2+0x6a>
 8002650:	000007ff 	.word	0x000007ff

08002654 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	0004      	movs	r4, r0
 8002658:	000e      	movs	r6, r1
 800265a:	0015      	movs	r5, r2


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 800265c:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <Registers_handler+0xd4>)
 800265e:	7801      	ldrb	r1, [r0, #0]
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	4291      	cmp	r1, r2
 8002664:	d019      	beq.n	800269a <Registers_handler+0x46>
 8002666:	0003      	movs	r3, r0
 8002668:	0001      	movs	r1, r0
 800266a:	3140      	adds	r1, #64	@ 0x40
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	428b      	cmp	r3, r1
 8002674:	d1fb      	bne.n	800266e <Registers_handler+0x1a>
	     RX_2;
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	2200      	movs	r2, #0
 800267a:	01c9      	lsls	r1, r1, #7
 800267c:	482b      	ldr	r0, [pc, #172]	@ (800272c <Registers_handler+0xd8>)
 800267e:	f002 fa19 	bl	8004ab4 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8002682:	482b      	ldr	r0, [pc, #172]	@ (8002730 <Registers_handler+0xdc>)
 8002684:	2240      	movs	r2, #64	@ 0x40
 8002686:	0021      	movs	r1, r4
 8002688:	f004 faac 	bl	8006be4 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800268c:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <Registers_handler+0xe0>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	2104      	movs	r1, #4
 8002694:	438b      	bics	r3, r1
 8002696:	6013      	str	r3, [r2, #0]
				  			   break;
				  			     }



                          }
 8002698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Size < 4) {
 800269a:	2b03      	cmp	r3, #3
 800269c:	d913      	bls.n	80026c6 <Registers_handler+0x72>
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 800269e:	18c2      	adds	r2, r0, r3
 80026a0:	1e91      	subs	r1, r2, #2
 80026a2:	7809      	ldrb	r1, [r1, #0]
 80026a4:	0209      	lsls	r1, r1, #8
 80026a6:	3a01      	subs	r2, #1
 80026a8:	7817      	ldrb	r7, [r2, #0]
 80026aa:	430f      	orrs	r7, r1
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 80026ac:	3b02      	subs	r3, #2
 80026ae:	b2d9      	uxtb	r1, r3
 80026b0:	f000 fc82 	bl	8002fb8 <calcCRC16ModBus>
	    if (receivedCRC != calculatedCRC) {
 80026b4:	4287      	cmp	r7, r0
 80026b6:	d10c      	bne.n	80026d2 <Registers_handler+0x7e>
                       uint8_t opCode = rxFrame[1];
 80026b8:	7861      	ldrb	r1, [r4, #1]
				  			  switch (opCode) {
 80026ba:	2910      	cmp	r1, #16
 80026bc:	d82f      	bhi.n	800271e <Registers_handler+0xca>
 80026be:	008b      	lsls	r3, r1, #2
 80026c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <Registers_handler+0xe4>)
 80026c2:	58d3      	ldr	r3, [r2, r3]
 80026c4:	469f      	mov	pc, r3
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 80026c6:	481a      	ldr	r0, [pc, #104]	@ (8002730 <Registers_handler+0xdc>)
 80026c8:	2202      	movs	r2, #2
 80026ca:	2103      	movs	r1, #3
 80026cc:	f000 fcba 	bl	8003044 <sendError>
	        return;
 80026d0:	e7e2      	b.n	8002698 <Registers_handler+0x44>
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 80026d2:	4817      	ldr	r0, [pc, #92]	@ (8002730 <Registers_handler+0xdc>)
 80026d4:	2203      	movs	r2, #3
 80026d6:	2103      	movs	r1, #3
 80026d8:	f000 fcb4 	bl	8003044 <sendError>
	        return;
 80026dc:	e7dc      	b.n	8002698 <Registers_handler+0x44>
				  				 handleReadCoils (&huart1,coils);
 80026de:	4b17      	ldr	r3, [pc, #92]	@ (800273c <Registers_handler+0xe8>)
 80026e0:	7819      	ldrb	r1, [r3, #0]
 80026e2:	4813      	ldr	r0, [pc, #76]	@ (8002730 <Registers_handler+0xdc>)
 80026e4:	f000 fd6a 	bl	80031bc <handleReadCoils>
				  			   break;
 80026e8:	e7d6      	b.n	8002698 <Registers_handler+0x44>
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <Registers_handler+0xec>)
 80026ec:	7819      	ldrb	r1, [r3, #0]
 80026ee:	4810      	ldr	r0, [pc, #64]	@ (8002730 <Registers_handler+0xdc>)
 80026f0:	f000 fda8 	bl	8003244 <handleReadDiscreteInputs>
							   break;
 80026f4:	e7d0      	b.n	8002698 <Registers_handler+0x44>
				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80026f6:	480e      	ldr	r0, [pc, #56]	@ (8002730 <Registers_handler+0xdc>)
 80026f8:	0031      	movs	r1, r6
 80026fa:	f000 fcd5 	bl	80030a8 <handleReadHoldingRegs>
				  			   break;
 80026fe:	e7cb      	b.n	8002698 <Registers_handler+0x44>
				  				handleReadInputRegs (&huart1,data_reg);
 8002700:	480b      	ldr	r0, [pc, #44]	@ (8002730 <Registers_handler+0xdc>)
 8002702:	0031      	movs	r1, r6
 8002704:	f000 fd14 	bl	8003130 <handleReadInputRegs>
				  			   break;
 8002708:	e7c6      	b.n	8002698 <Registers_handler+0x44>
				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800270a:	4809      	ldr	r0, [pc, #36]	@ (8002730 <Registers_handler+0xdc>)
 800270c:	0029      	movs	r1, r5
 800270e:	f000 fddf 	bl	80032d0 <handleWriteMulyipleHandlingRegister>
                               break;
 8002712:	e7c1      	b.n	8002698 <Registers_handler+0x44>
                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8002714:	4806      	ldr	r0, [pc, #24]	@ (8002730 <Registers_handler+0xdc>)
 8002716:	0029      	movs	r1, r5
 8002718:	f000 fdda 	bl	80032d0 <handleWriteMulyipleHandlingRegister>
                               break;
 800271c:	e7bc      	b.n	8002698 <Registers_handler+0x44>
				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 800271e:	4804      	ldr	r0, [pc, #16]	@ (8002730 <Registers_handler+0xdc>)
 8002720:	2201      	movs	r2, #1
 8002722:	f000 fc8f 	bl	8003044 <sendError>
				  			   break;
 8002726:	e7b7      	b.n	8002698 <Registers_handler+0x44>
 8002728:	20000000 	.word	0x20000000
 800272c:	50000800 	.word	0x50000800
 8002730:	20000134 	.word	0x20000134
 8002734:	200000d8 	.word	0x200000d8
 8002738:	08007010 	.word	0x08007010
 800273c:	20000445 	.word	0x20000445
 8002740:	20000444 	.word	0x20000444

08002744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002744:	b500      	push	{lr}
 8002746:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002748:	4a0d      	ldr	r2, [pc, #52]	@ (8002780 <MX_DMA_Init+0x3c>)
 800274a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800274c:	2301      	movs	r3, #1
 800274e:	4319      	orrs	r1, r3
 8002750:	6391      	str	r1, [r2, #56]	@ 0x38
 8002752:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002754:	4013      	ands	r3, r2
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2009      	movs	r0, #9
 8002760:	f001 fda4 	bl	80042ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002764:	2009      	movs	r0, #9
 8002766:	f001 fdd3 	bl	8004310 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	200a      	movs	r0, #10
 8002770:	f001 fd9c 	bl	80042ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002774:	200a      	movs	r0, #10
 8002776:	f001 fdcb 	bl	8004310 <HAL_NVIC_EnableIRQ>

}
 800277a:	b003      	add	sp, #12
 800277c:	bd00      	pop	{pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	40021000 	.word	0x40021000

08002784 <MX_USART1_UART_Init>:
{
 8002784:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002786:	4817      	ldr	r0, [pc, #92]	@ (80027e4 <MX_USART1_UART_Init+0x60>)
 8002788:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <MX_USART1_UART_Init+0x64>)
 800278a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800278c:	2396      	movs	r3, #150	@ 0x96
 800278e:	019b      	lsls	r3, r3, #6
 8002790:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	2300      	movs	r3, #0
 8002794:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002796:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002798:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800279a:	220c      	movs	r2, #12
 800279c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a2:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027a4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027a8:	f004 f8f2 	bl	8006990 <HAL_UART_Init>
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d111      	bne.n	80027d4 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b0:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <MX_USART1_UART_Init+0x60>)
 80027b2:	2100      	movs	r1, #0
 80027b4:	f004 f9c8 	bl	8006b48 <HAL_UARTEx_SetTxFifoThreshold>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d10d      	bne.n	80027d8 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027bc:	4809      	ldr	r0, [pc, #36]	@ (80027e4 <MX_USART1_UART_Init+0x60>)
 80027be:	2100      	movs	r1, #0
 80027c0:	f004 f9e8 	bl	8006b94 <HAL_UARTEx_SetRxFifoThreshold>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d109      	bne.n	80027dc <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027c8:	4806      	ldr	r0, [pc, #24]	@ (80027e4 <MX_USART1_UART_Init+0x60>)
 80027ca:	f004 f99d 	bl	8006b08 <HAL_UARTEx_DisableFifoMode>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d106      	bne.n	80027e0 <MX_USART1_UART_Init+0x5c>
}
 80027d2:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <MX_USART1_UART_Init+0x52>
 80027d8:	b672      	cpsid	i
 80027da:	e7fe      	b.n	80027da <MX_USART1_UART_Init+0x56>
 80027dc:	b672      	cpsid	i
 80027de:	e7fe      	b.n	80027de <MX_USART1_UART_Init+0x5a>
 80027e0:	b672      	cpsid	i
 80027e2:	e7fe      	b.n	80027e2 <MX_USART1_UART_Init+0x5e>
 80027e4:	20000134 	.word	0x20000134
 80027e8:	40013800 	.word	0x40013800

080027ec <SystemClock_Config>:
{
 80027ec:	b500      	push	{lr}
 80027ee:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f0:	2234      	movs	r2, #52	@ 0x34
 80027f2:	2100      	movs	r1, #0
 80027f4:	a805      	add	r0, sp, #20
 80027f6:	f004 fb8f 	bl	8006f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fa:	2210      	movs	r2, #16
 80027fc:	2100      	movs	r1, #0
 80027fe:	a801      	add	r0, sp, #4
 8002800:	f004 fb8a 	bl	8006f18 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002804:	2080      	movs	r0, #128	@ 0x80
 8002806:	0080      	lsls	r0, r0, #2
 8002808:	f002 f95a 	bl	8004ac0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800280c:	2302      	movs	r3, #2
 800280e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	0052      	lsls	r2, r2, #1
 8002814:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002816:	2200      	movs	r2, #0
 8002818:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800281a:	2140      	movs	r1, #64	@ 0x40
 800281c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002820:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002822:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002824:	3306      	adds	r3, #6
 8002826:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	059b      	lsls	r3, r3, #22
 8002832:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002834:	a805      	add	r0, sp, #20
 8002836:	f002 f975 	bl	8004b24 <HAL_RCC_OscConfig>
 800283a:	2800      	cmp	r0, #0
 800283c:	d10e      	bne.n	800285c <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800283e:	2307      	movs	r3, #7
 8002840:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002842:	3b05      	subs	r3, #5
 8002844:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800284a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800284c:	2102      	movs	r1, #2
 800284e:	a801      	add	r0, sp, #4
 8002850:	f002 fc4e 	bl	80050f0 <HAL_RCC_ClockConfig>
 8002854:	2800      	cmp	r0, #0
 8002856:	d103      	bne.n	8002860 <SystemClock_Config+0x74>
}
 8002858:	b013      	add	sp, #76	@ 0x4c
 800285a:	bd00      	pop	{pc}
 800285c:	b672      	cpsid	i
  while (1)
 800285e:	e7fe      	b.n	800285e <SystemClock_Config+0x72>
 8002860:	b672      	cpsid	i
 8002862:	e7fe      	b.n	8002862 <SystemClock_Config+0x76>

08002864 <HAL_UART_TxCpltCallback>:
{
 8002864:	b510      	push	{r4, lr}
	    RX_2;
 8002866:	2180      	movs	r1, #128	@ 0x80
 8002868:	2200      	movs	r2, #0
 800286a:	01c9      	lsls	r1, r1, #7
 800286c:	480c      	ldr	r0, [pc, #48]	@ (80028a0 <HAL_UART_TxCpltCallback+0x3c>)
 800286e:	f002 f921 	bl	8004ab4 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8002872:	f000 ffbd 	bl	80037f0 <HAL_GetTick>
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_UART_TxCpltCallback+0x40>)
 8002878:	6018      	str	r0, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 800287a:	490b      	ldr	r1, [pc, #44]	@ (80028a8 <HAL_UART_TxCpltCallback+0x44>)
 800287c:	4c0b      	ldr	r4, [pc, #44]	@ (80028ac <HAL_UART_TxCpltCallback+0x48>)
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	0020      	movs	r0, r4
 8002882:	f004 f9af 	bl	8006be4 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002886:	6822      	ldr	r2, [r4, #0]
 8002888:	6813      	ldr	r3, [r2, #0]
 800288a:	2110      	movs	r1, #16
 800288c:	430b      	orrs	r3, r1
 800288e:	6013      	str	r3, [r2, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002890:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <HAL_UART_TxCpltCallback+0x4c>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	390c      	subs	r1, #12
 8002898:	438b      	bics	r3, r1
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bd10      	pop	{r4, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	50000800 	.word	0x50000800
 80028a4:	200005c8 	.word	0x200005c8
 80028a8:	20000588 	.word	0x20000588
 80028ac:	20000134 	.word	0x20000134
 80028b0:	200000d8 	.word	0x200000d8

080028b4 <HAL_UARTEx_RxEventCallback>:
{
 80028b4:	b510      	push	{r4, lr}
 80028b6:	000c      	movs	r4, r1
	if (huart->Instance == USART1)
 80028b8:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <HAL_UARTEx_RxEventCallback+0x38>)
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	4290      	cmp	r0, r2
 80028be:	d000      	beq.n	80028c2 <HAL_UARTEx_RxEventCallback+0xe>
}
 80028c0:	bd10      	pop	{r4, pc}
		lastActivityTime = HAL_GetTick();
 80028c2:	f000 ff95 	bl	80037f0 <HAL_GetTick>
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80028c8:	6018      	str	r0, [r3, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80028ca:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <HAL_UARTEx_RxEventCallback+0x40>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	2110      	movs	r1, #16
 80028d2:	438b      	bics	r3, r1
 80028d4:	6013      	str	r3, [r2, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80028d6:	4808      	ldr	r0, [pc, #32]	@ (80028f8 <HAL_UARTEx_RxEventCallback+0x44>)
 80028d8:	f001 fe92 	bl	8004600 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80028dc:	4a07      	ldr	r2, [pc, #28]	@ (80028fc <HAL_UARTEx_RxEventCallback+0x48>)
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <HAL_UARTEx_RxEventCallback+0x4c>)
 80028e0:	4808      	ldr	r0, [pc, #32]	@ (8002904 <HAL_UARTEx_RxEventCallback+0x50>)
 80028e2:	0023      	movs	r3, r4
 80028e4:	f7ff feb6 	bl	8002654 <Registers_handler>
}
 80028e8:	e7ea      	b.n	80028c0 <HAL_UARTEx_RxEventCallback+0xc>
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	40013800 	.word	0x40013800
 80028f0:	200005c8 	.word	0x200005c8
 80028f4:	20000134 	.word	0x20000134
 80028f8:	200000d8 	.word	0x200000d8
 80028fc:	20000448 	.word	0x20000448
 8002900:	20000468 	.word	0x20000468
 8002904:	20000588 	.word	0x20000588

08002908 <HAL_TIM_PeriodElapsedCallback>:
{
 8002908:	b510      	push	{r4, lr}
    if (htim->Instance == TIM14)
 800290a:	4b08      	ldr	r3, [pc, #32]	@ (800292c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800290c:	6802      	ldr	r2, [r0, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d000      	beq.n	8002914 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8002912:	bd10      	pop	{r4, pc}
    	LED_2_ON;
 8002914:	20a0      	movs	r0, #160	@ 0xa0
 8002916:	2201      	movs	r2, #1
 8002918:	2180      	movs	r1, #128	@ 0x80
 800291a:	05c0      	lsls	r0, r0, #23
 800291c:	f002 f8ca 	bl	8004ab4 <HAL_GPIO_WritePin>
    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, ADC_NUM_CHANNELS);
 8002920:	4903      	ldr	r1, [pc, #12]	@ (8002930 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002922:	4804      	ldr	r0, [pc, #16]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002924:	2207      	movs	r2, #7
 8002926:	f001 fb41 	bl	8003fac <HAL_ADC_Start_DMA>
}
 800292a:	e7f2      	b.n	8002912 <HAL_TIM_PeriodElapsedCallback+0xa>
 800292c:	40002000 	.word	0x40002000
 8002930:	200005d0 	.word	0x200005d0
 8002934:	20000308 	.word	0x20000308

08002938 <Reset_USART1>:
 void Reset_USART1(void) {
 8002938:	b570      	push	{r4, r5, r6, lr}
     LED_1_ON;
 800293a:	2180      	movs	r1, #128	@ 0x80
 800293c:	2201      	movs	r2, #1
 800293e:	0209      	lsls	r1, r1, #8
 8002940:	4821      	ldr	r0, [pc, #132]	@ (80029c8 <Reset_USART1+0x90>)
 8002942:	f002 f8b7 	bl	8004ab4 <HAL_GPIO_WritePin>
     if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8002946:	4821      	ldr	r0, [pc, #132]	@ (80029cc <Reset_USART1+0x94>)
 8002948:	f003 fb74 	bl	8006034 <HAL_UART_DMAStop>
     if (hdma_usart1_rx.Instance != NULL) {
 800294c:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <Reset_USART1+0x98>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <Reset_USART1+0x22>
         HAL_DMA_Abort(&hdma_usart1_rx);
 8002954:	481e      	ldr	r0, [pc, #120]	@ (80029d0 <Reset_USART1+0x98>)
 8002956:	f001 fe53 	bl	8004600 <HAL_DMA_Abort>
     if (hdma_usart1_tx.Instance != NULL) {
 800295a:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <Reset_USART1+0x9c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <Reset_USART1+0x30>
         HAL_DMA_Abort(&hdma_usart1_tx);
 8002962:	481c      	ldr	r0, [pc, #112]	@ (80029d4 <Reset_USART1+0x9c>)
 8002964:	f001 fe4c 	bl	8004600 <HAL_DMA_Abort>
     __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 8002968:	4c18      	ldr	r4, [pc, #96]	@ (80029cc <Reset_USART1+0x94>)
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6813      	ldr	r3, [r2, #0]
 800296e:	2180      	movs	r1, #128	@ 0x80
 8002970:	438b      	bics	r3, r1
 8002972:	6013      	str	r3, [r2, #0]
     __HAL_UART_CLEAR_OREFLAG(&huart1);
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	2208      	movs	r2, #8
 8002978:	621a      	str	r2, [r3, #32]
     __HAL_UART_CLEAR_FEFLAG(&huart1);
 800297a:	3a06      	subs	r2, #6
 800297c:	621a      	str	r2, [r3, #32]
     __HAL_RCC_USART1_FORCE_RESET();
 800297e:	4d16      	ldr	r5, [pc, #88]	@ (80029d8 <Reset_USART1+0xa0>)
 8002980:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	01db      	lsls	r3, r3, #7
 8002986:	4313      	orrs	r3, r2
 8002988:	632b      	str	r3, [r5, #48]	@ 0x30
     HAL_Delay(1); // Задержка для завершения сброса
 800298a:	2001      	movs	r0, #1
 800298c:	f000 ff36 	bl	80037fc <HAL_Delay>
     __HAL_RCC_USART1_RELEASE_RESET();
 8002990:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002992:	4a12      	ldr	r2, [pc, #72]	@ (80029dc <Reset_USART1+0xa4>)
 8002994:	4013      	ands	r3, r2
 8002996:	632b      	str	r3, [r5, #48]	@ 0x30
     if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 8002998:	0020      	movs	r0, r4
 800299a:	f003 facb 	bl	8005f34 <HAL_UART_DeInit>
     MX_USART1_UART_Init();
 800299e:	f7ff fef1 	bl	8002784 <MX_USART1_UART_Init>
     MX_DMA_Init();
 80029a2:	f7ff fecf 	bl	8002744 <MX_DMA_Init>
     if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80029a6:	490e      	ldr	r1, [pc, #56]	@ (80029e0 <Reset_USART1+0xa8>)
 80029a8:	2240      	movs	r2, #64	@ 0x40
 80029aa:	0020      	movs	r0, r4
 80029ac:	f004 f91a 	bl	8006be4 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80029b0:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <Reset_USART1+0x98>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	2104      	movs	r1, #4
 80029b8:	438b      	bics	r3, r1
 80029ba:	6013      	str	r3, [r2, #0]
     lastActivityTime = HAL_GetTick();
 80029bc:	f000 ff18 	bl	80037f0 <HAL_GetTick>
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <Reset_USART1+0xac>)
 80029c2:	6018      	str	r0, [r3, #0]
 }
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	50000800 	.word	0x50000800
 80029cc:	20000134 	.word	0x20000134
 80029d0:	200000d8 	.word	0x200000d8
 80029d4:	2000007c 	.word	0x2000007c
 80029d8:	40021000 	.word	0x40021000
 80029dc:	ffffbfff 	.word	0xffffbfff
 80029e0:	20000588 	.word	0x20000588
 80029e4:	200005c8 	.word	0x200005c8

080029e8 <Check_USART1_Timeout>:
 {
 80029e8:	b510      	push	{r4, lr}
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 80029ea:	f000 ff01 	bl	80037f0 <HAL_GetTick>
 80029ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <Check_USART1_Timeout+0x38>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1ac0      	subs	r0, r0, r3
 80029f4:	23e1      	movs	r3, #225	@ 0xe1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4298      	cmp	r0, r3
 80029fa:	d200      	bcs.n	80029fe <Check_USART1_Timeout+0x16>
 }
 80029fc:	bd10      	pop	{r4, pc}
         Reset_USART1();
 80029fe:	f7ff ff9b 	bl	8002938 <Reset_USART1>
         RX_2;
 8002a02:	2180      	movs	r1, #128	@ 0x80
 8002a04:	4c07      	ldr	r4, [pc, #28]	@ (8002a24 <Check_USART1_Timeout+0x3c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	01c9      	lsls	r1, r1, #7
 8002a0a:	0020      	movs	r0, r4
 8002a0c:	f002 f852 	bl	8004ab4 <HAL_GPIO_WritePin>
         LED_1_OFF;
 8002a10:	2180      	movs	r1, #128	@ 0x80
 8002a12:	2200      	movs	r2, #0
 8002a14:	0209      	lsls	r1, r1, #8
 8002a16:	0020      	movs	r0, r4
 8002a18:	f002 f84c 	bl	8004ab4 <HAL_GPIO_WritePin>
 }
 8002a1c:	e7ee      	b.n	80029fc <Check_USART1_Timeout+0x14>
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	200005c8 	.word	0x200005c8
 8002a24:	50000800 	.word	0x50000800

08002a28 <calculate_ntc_temperature>:
 {
 8002a28:	b570      	push	{r4, r5, r6, lr}
     float Vadc = (adc_raw / ADC_Max) * Vref;
 8002a2a:	f7fe fceb 	bl	8001404 <__aeabi_i2f>
 8002a2e:	491a      	ldr	r1, [pc, #104]	@ (8002a98 <calculate_ntc_temperature+0x70>)
 8002a30:	f7fd ff26 	bl	8000880 <__aeabi_fdiv>
 8002a34:	4919      	ldr	r1, [pc, #100]	@ (8002a9c <calculate_ntc_temperature+0x74>)
 8002a36:	f7fe f8f1 	bl	8000c1c <__aeabi_fmul>
 8002a3a:	1c04      	adds	r4, r0, #0
     float R_ntc = (Vadc * R_fixed) / (Vref - Vadc);
 8002a3c:	4918      	ldr	r1, [pc, #96]	@ (8002aa0 <calculate_ntc_temperature+0x78>)
 8002a3e:	f7fe f8ed 	bl	8000c1c <__aeabi_fmul>
 8002a42:	1c05      	adds	r5, r0, #0
 8002a44:	1c21      	adds	r1, r4, #0
 8002a46:	4815      	ldr	r0, [pc, #84]	@ (8002a9c <calculate_ntc_temperature+0x74>)
 8002a48:	f7fe fa42 	bl	8000ed0 <__aeabi_fsub>
 8002a4c:	1c01      	adds	r1, r0, #0
 8002a4e:	1c28      	adds	r0, r5, #0
 8002a50:	f7fd ff16 	bl	8000880 <__aeabi_fdiv>
     float logR = logf(R_ntc);
 8002a54:	f004 f8fe 	bl	8006c54 <logf>
 8002a58:	1c04      	adds	r4, r0, #0
     float inv_T = STEINHART_A + STEINHART_B * logR + STEINHART_C * logR * logR * logR;
 8002a5a:	4912      	ldr	r1, [pc, #72]	@ (8002aa4 <calculate_ntc_temperature+0x7c>)
 8002a5c:	f7fe f8de 	bl	8000c1c <__aeabi_fmul>
 8002a60:	1c21      	adds	r1, r4, #0
 8002a62:	f7fe f8db 	bl	8000c1c <__aeabi_fmul>
 8002a66:	1c21      	adds	r1, r4, #0
 8002a68:	f7fe f8d8 	bl	8000c1c <__aeabi_fmul>
 8002a6c:	1c05      	adds	r5, r0, #0
 8002a6e:	490e      	ldr	r1, [pc, #56]	@ (8002aa8 <calculate_ntc_temperature+0x80>)
 8002a70:	1c20      	adds	r0, r4, #0
 8002a72:	f7fe f8d3 	bl	8000c1c <__aeabi_fmul>
 8002a76:	490d      	ldr	r1, [pc, #52]	@ (8002aac <calculate_ntc_temperature+0x84>)
 8002a78:	f7fd fd10 	bl	800049c <__aeabi_fadd>
 8002a7c:	1c01      	adds	r1, r0, #0
 8002a7e:	1c28      	adds	r0, r5, #0
 8002a80:	f7fd fd0c 	bl	800049c <__aeabi_fadd>
 8002a84:	1c01      	adds	r1, r0, #0
     float T_kelvin = 1.0f / inv_T;
 8002a86:	20fe      	movs	r0, #254	@ 0xfe
 8002a88:	0580      	lsls	r0, r0, #22
 8002a8a:	f7fd fef9 	bl	8000880 <__aeabi_fdiv>
     float T_celsius = T_kelvin - 273.15f;
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <calculate_ntc_temperature+0x88>)
 8002a90:	f7fe fa1e 	bl	8000ed0 <__aeabi_fsub>
 }
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	457ff000 	.word	0x457ff000
 8002a9c:	40533333 	.word	0x40533333
 8002aa0:	46160000 	.word	0x46160000
 8002aa4:	33bc4759 	.word	0x33bc4759
 8002aa8:	39757f73 	.word	0x39757f73
 8002aac:	3a93ffeb 	.word	0x3a93ffeb
 8002ab0:	43889333 	.word	0x43889333

08002ab4 <main>:
{
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab6:	46ce      	mov	lr, r9
 8002ab8:	4647      	mov	r7, r8
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b09f      	sub	sp, #124	@ 0x7c
  HAL_Init();
 8002abe:	f000 fe77 	bl	80037b0 <HAL_Init>
  SystemClock_Config();
 8002ac2:	f7ff fe93 	bl	80027ec <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac6:	2214      	movs	r2, #20
 8002ac8:	2100      	movs	r1, #0
 8002aca:	a811      	add	r0, sp, #68	@ 0x44
 8002acc:	f004 fa24 	bl	8006f18 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	4be8      	ldr	r3, [pc, #928]	@ (8002e74 <main+0x3c0>)
 8002ad2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	6359      	str	r1, [r3, #52]	@ 0x34
 8002ada:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002adc:	400a      	ands	r2, r1
 8002ade:	9200      	str	r2, [sp, #0]
 8002ae0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	6359      	str	r1, [r3, #52]	@ 0x34
 8002aea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aec:	400a      	ands	r2, r1
 8002aee:	9201      	str	r2, [sp, #4]
 8002af0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af4:	2501      	movs	r5, #1
 8002af6:	432a      	orrs	r2, r5
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	402b      	ands	r3, r5
 8002afe:	9302      	str	r3, [sp, #8]
 8002b00:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, DIRECT_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8002b02:	24c0      	movs	r4, #192	@ 0xc0
 8002b04:	0224      	lsls	r4, r4, #8
 8002b06:	4bdc      	ldr	r3, [pc, #880]	@ (8002e78 <main+0x3c4>)
 8002b08:	4698      	mov	r8, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	0021      	movs	r1, r4
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f001 ffd0 	bl	8004ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002b14:	2680      	movs	r6, #128	@ 0x80
 8002b16:	0176      	lsls	r6, r6, #5
 8002b18:	27a0      	movs	r7, #160	@ 0xa0
 8002b1a:	05ff      	lsls	r7, r7, #23
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	0031      	movs	r1, r6
 8002b20:	0038      	movs	r0, r7
 8002b22:	f001 ffc7 	bl	8004ab4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DIRECT_Pin|LED_1_Pin;
 8002b26:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	9512      	str	r5, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2400      	movs	r4, #0
 8002b2c:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	9414      	str	r4, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b30:	a911      	add	r1, sp, #68	@ 0x44
 8002b32:	4640      	mov	r0, r8
 8002b34:	f001 fe4c 	bl	80047d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b38:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	9512      	str	r5, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	9414      	str	r4, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	a911      	add	r1, sp, #68	@ 0x44
 8002b42:	0038      	movs	r0, r7
 8002b44:	f001 fe44 	bl	80047d0 <HAL_GPIO_Init>
  MX_DMA_Init();
 8002b48:	f7ff fdfc 	bl	8002744 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002b4c:	f7ff fe1a 	bl	8002784 <MX_USART1_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b50:	220c      	movs	r2, #12
 8002b52:	2100      	movs	r1, #0
 8002b54:	a811      	add	r0, sp, #68	@ 0x44
 8002b56:	f004 f9df 	bl	8006f18 <memset>
  hadc1.Instance = ADC1;
 8002b5a:	48c8      	ldr	r0, [pc, #800]	@ (8002e7c <main+0x3c8>)
 8002b5c:	4bc8      	ldr	r3, [pc, #800]	@ (8002e80 <main+0x3cc>)
 8002b5e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	05db      	lsls	r3, r3, #23
 8002b64:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b66:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b68:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	039b      	lsls	r3, r3, #14
 8002b6e:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b70:	2308      	movs	r3, #8
 8002b72:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b74:	7604      	strb	r4, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002b76:	7644      	strb	r4, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b78:	7684      	strb	r4, [r0, #26]
  hadc1.Init.NbrOfConversion = 7;
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b7e:	3319      	adds	r3, #25
 8002b80:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b82:	6244      	str	r4, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b84:	6284      	str	r4, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b86:	330c      	adds	r3, #12
 8002b88:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b8a:	6306      	str	r6, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8002b8c:	3b26      	subs	r3, #38	@ 0x26
 8002b8e:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002b90:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002b92:	3336      	adds	r3, #54	@ 0x36
 8002b94:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002b96:	64c4      	str	r4, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b98:	f000 fe42 	bl	8003820 <HAL_ADC_Init>
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d000      	beq.n	8002ba2 <main+0xee>
 8002ba0:	e15b      	b.n	8002e5a <main+0x3a6>
  sConfig.Channel = ADC_CHANNEL_0;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002baa:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bac:	48b3      	ldr	r0, [pc, #716]	@ (8002e7c <main+0x3c8>)
 8002bae:	a911      	add	r1, sp, #68	@ 0x44
 8002bb0:	f001 f852 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d000      	beq.n	8002bba <main+0x106>
 8002bb8:	e151      	b.n	8002e5e <main+0x3aa>
  sConfig.Channel = ADC_CHANNEL_1;
 8002bba:	4bb2      	ldr	r3, [pc, #712]	@ (8002e84 <main+0x3d0>)
 8002bbc:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc2:	48ae      	ldr	r0, [pc, #696]	@ (8002e7c <main+0x3c8>)
 8002bc4:	a911      	add	r1, sp, #68	@ 0x44
 8002bc6:	f001 f847 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d000      	beq.n	8002bd0 <main+0x11c>
 8002bce:	e148      	b.n	8002e62 <main+0x3ae>
  sConfig.Channel = ADC_CHANNEL_2;
 8002bd0:	4bad      	ldr	r3, [pc, #692]	@ (8002e88 <main+0x3d4>)
 8002bd2:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd8:	48a8      	ldr	r0, [pc, #672]	@ (8002e7c <main+0x3c8>)
 8002bda:	a911      	add	r1, sp, #68	@ 0x44
 8002bdc:	f001 f83c 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d000      	beq.n	8002be6 <main+0x132>
 8002be4:	e13f      	b.n	8002e66 <main+0x3b2>
  sConfig.Channel = ADC_CHANNEL_3;
 8002be6:	4ba9      	ldr	r3, [pc, #676]	@ (8002e8c <main+0x3d8>)
 8002be8:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002bea:	230c      	movs	r3, #12
 8002bec:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bee:	48a3      	ldr	r0, [pc, #652]	@ (8002e7c <main+0x3c8>)
 8002bf0:	a911      	add	r1, sp, #68	@ 0x44
 8002bf2:	f001 f831 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d000      	beq.n	8002bfc <main+0x148>
 8002bfa:	e136      	b.n	8002e6a <main+0x3b6>
  sConfig.Channel = ADC_CHANNEL_4;
 8002bfc:	4ba4      	ldr	r3, [pc, #656]	@ (8002e90 <main+0x3dc>)
 8002bfe:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002c00:	2310      	movs	r3, #16
 8002c02:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c04:	489d      	ldr	r0, [pc, #628]	@ (8002e7c <main+0x3c8>)
 8002c06:	a911      	add	r1, sp, #68	@ 0x44
 8002c08:	f001 f826 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d000      	beq.n	8002c12 <main+0x15e>
 8002c10:	e12d      	b.n	8002e6e <main+0x3ba>
  sConfig.Channel = ADC_CHANNEL_5;
 8002c12:	4ba0      	ldr	r3, [pc, #640]	@ (8002e94 <main+0x3e0>)
 8002c14:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002c16:	2314      	movs	r3, #20
 8002c18:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c1a:	4898      	ldr	r0, [pc, #608]	@ (8002e7c <main+0x3c8>)
 8002c1c:	a911      	add	r1, sp, #68	@ 0x44
 8002c1e:	f001 f81b 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d000      	beq.n	8002c28 <main+0x174>
 8002c26:	e15b      	b.n	8002ee0 <main+0x42c>
  sConfig.Channel = ADC_CHANNEL_6;
 8002c28:	4b9b      	ldr	r3, [pc, #620]	@ (8002e98 <main+0x3e4>)
 8002c2a:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002c2c:	2318      	movs	r3, #24
 8002c2e:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c30:	4892      	ldr	r0, [pc, #584]	@ (8002e7c <main+0x3c8>)
 8002c32:	a911      	add	r1, sp, #68	@ 0x44
 8002c34:	f001 f810 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d000      	beq.n	8002c3e <main+0x18a>
 8002c3c:	e152      	b.n	8002ee4 <main+0x430>
  htim14.Instance = TIM14;
 8002c3e:	4897      	ldr	r0, [pc, #604]	@ (8002e9c <main+0x3e8>)
 8002c40:	4b97      	ldr	r3, [pc, #604]	@ (8002ea0 <main+0x3ec>)
 8002c42:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 4;
 8002c44:	2304      	movs	r3, #4
 8002c46:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 45000;
 8002c4c:	4a95      	ldr	r2, [pc, #596]	@ (8002ea4 <main+0x3f0>)
 8002c4e:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c50:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c52:	3380      	adds	r3, #128	@ 0x80
 8002c54:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002c56:	f002 fe77 	bl	8005948 <HAL_TIM_Base_Init>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d000      	beq.n	8002c60 <main+0x1ac>
 8002c5e:	e143      	b.n	8002ee8 <main+0x434>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c60:	2210      	movs	r2, #16
 8002c62:	2100      	movs	r1, #0
 8002c64:	a806      	add	r0, sp, #24
 8002c66:	f004 f957 	bl	8006f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	a803      	add	r0, sp, #12
 8002c70:	f004 f952 	bl	8006f18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c74:	221c      	movs	r2, #28
 8002c76:	2100      	movs	r1, #0
 8002c78:	a80a      	add	r0, sp, #40	@ 0x28
 8002c7a:	f004 f94d 	bl	8006f18 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c7e:	2234      	movs	r2, #52	@ 0x34
 8002c80:	2100      	movs	r1, #0
 8002c82:	a811      	add	r0, sp, #68	@ 0x44
 8002c84:	f004 f948 	bl	8006f18 <memset>
  htim1.Instance = TIM1;
 8002c88:	4887      	ldr	r0, [pc, #540]	@ (8002ea8 <main+0x3f4>)
 8002c8a:	4b88      	ldr	r3, [pc, #544]	@ (8002eac <main+0x3f8>)
 8002c8c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c92:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8002c94:	4a86      	ldr	r2, [pc, #536]	@ (8002eb0 <main+0x3fc>)
 8002c96:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c98:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c9a:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c9e:	f002 fe53 	bl	8005948 <HAL_TIM_Base_Init>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d000      	beq.n	8002ca8 <main+0x1f4>
 8002ca6:	e121      	b.n	8002eec <main+0x438>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	015b      	lsls	r3, r3, #5
 8002cac:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cae:	487e      	ldr	r0, [pc, #504]	@ (8002ea8 <main+0x3f4>)
 8002cb0:	a906      	add	r1, sp, #24
 8002cb2:	f002 ff93 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d000      	beq.n	8002cbc <main+0x208>
 8002cba:	e119      	b.n	8002ef0 <main+0x43c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cbc:	487a      	ldr	r0, [pc, #488]	@ (8002ea8 <main+0x3f4>)
 8002cbe:	f002 fe73 	bl	80059a8 <HAL_TIM_PWM_Init>
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d000      	beq.n	8002cc8 <main+0x214>
 8002cc6:	e115      	b.n	8002ef4 <main+0x440>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ccc:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cce:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cd0:	4875      	ldr	r0, [pc, #468]	@ (8002ea8 <main+0x3f4>)
 8002cd2:	a903      	add	r1, sp, #12
 8002cd4:	f003 f840 	bl	8005d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d000      	beq.n	8002cde <main+0x22a>
 8002cdc:	e10c      	b.n	8002ef8 <main+0x444>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cde:	2360      	movs	r3, #96	@ 0x60
 8002ce0:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.Pulse = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce6:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ce8:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cea:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cec:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cee:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf0:	486d      	ldr	r0, [pc, #436]	@ (8002ea8 <main+0x3f4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	a90a      	add	r1, sp, #40	@ 0x28
 8002cf6:	f002 fec3 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d000      	beq.n	8002d00 <main+0x24c>
 8002cfe:	e0fd      	b.n	8002efc <main+0x448>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d00:	4869      	ldr	r0, [pc, #420]	@ (8002ea8 <main+0x3f4>)
 8002d02:	220c      	movs	r2, #12
 8002d04:	a90a      	add	r1, sp, #40	@ 0x28
 8002d06:	f002 febb 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d000      	beq.n	8002d10 <main+0x25c>
 8002d0e:	e0f7      	b.n	8002f00 <main+0x44c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	9311      	str	r3, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d14:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d16:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d18:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d1a:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d1c:	2280      	movs	r2, #128	@ 0x80
 8002d1e:	0192      	lsls	r2, r2, #6
 8002d20:	9216      	str	r2, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d22:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d24:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d26:	9319      	str	r3, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	0492      	lsls	r2, r2, #18
 8002d2c:	921a      	str	r2, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d2e:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d30:	931c      	str	r3, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d32:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d34:	485c      	ldr	r0, [pc, #368]	@ (8002ea8 <main+0x3f4>)
 8002d36:	a911      	add	r1, sp, #68	@ 0x44
 8002d38:	f003 f846 	bl	8005dc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d000      	beq.n	8002d42 <main+0x28e>
 8002d40:	e0e0      	b.n	8002f04 <main+0x450>
  HAL_TIM_MspPostInit(&htim1);
 8002d42:	4859      	ldr	r0, [pc, #356]	@ (8002ea8 <main+0x3f4>)
 8002d44:	f000 fbc0 	bl	80034c8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d48:	2210      	movs	r2, #16
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	a80a      	add	r0, sp, #40	@ 0x28
 8002d4e:	f004 f8e3 	bl	8006f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d52:	220c      	movs	r2, #12
 8002d54:	2100      	movs	r1, #0
 8002d56:	a806      	add	r0, sp, #24
 8002d58:	f004 f8de 	bl	8006f18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d5c:	221c      	movs	r2, #28
 8002d5e:	2100      	movs	r1, #0
 8002d60:	a811      	add	r0, sp, #68	@ 0x44
 8002d62:	f004 f8d9 	bl	8006f18 <memset>
  htim3.Instance = TIM3;
 8002d66:	4853      	ldr	r0, [pc, #332]	@ (8002eb4 <main+0x400>)
 8002d68:	4b53      	ldr	r3, [pc, #332]	@ (8002eb8 <main+0x404>)
 8002d6a:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8002d72:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb0 <main+0x3fc>)
 8002d74:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d78:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d7a:	f002 fde5 	bl	8005948 <HAL_TIM_Base_Init>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d000      	beq.n	8002d84 <main+0x2d0>
 8002d82:	e0c1      	b.n	8002f08 <main+0x454>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	015b      	lsls	r3, r3, #5
 8002d88:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d8a:	484a      	ldr	r0, [pc, #296]	@ (8002eb4 <main+0x400>)
 8002d8c:	a90a      	add	r1, sp, #40	@ 0x28
 8002d8e:	f002 ff25 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d000      	beq.n	8002d98 <main+0x2e4>
 8002d96:	e0b9      	b.n	8002f0c <main+0x458>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d98:	4846      	ldr	r0, [pc, #280]	@ (8002eb4 <main+0x400>)
 8002d9a:	f002 fe05 	bl	80059a8 <HAL_TIM_PWM_Init>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d000      	beq.n	8002da4 <main+0x2f0>
 8002da2:	e0b5      	b.n	8002f10 <main+0x45c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da8:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002daa:	4842      	ldr	r0, [pc, #264]	@ (8002eb4 <main+0x400>)
 8002dac:	a906      	add	r1, sp, #24
 8002dae:	f002 ffd3 	bl	8005d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d000      	beq.n	8002db8 <main+0x304>
 8002db6:	e0ad      	b.n	8002f14 <main+0x460>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db8:	2360      	movs	r3, #96	@ 0x60
 8002dba:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.Pulse = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc2:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dc4:	483b      	ldr	r0, [pc, #236]	@ (8002eb4 <main+0x400>)
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	a911      	add	r1, sp, #68	@ 0x44
 8002dca:	f002 fe59 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d000      	beq.n	8002dd4 <main+0x320>
 8002dd2:	e0a1      	b.n	8002f18 <main+0x464>
  HAL_TIM_MspPostInit(&htim3);
 8002dd4:	4837      	ldr	r0, [pc, #220]	@ (8002eb4 <main+0x400>)
 8002dd6:	f000 fb77 	bl	80034c8 <HAL_TIM_MspPostInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8002dda:	4938      	ldr	r1, [pc, #224]	@ (8002ebc <main+0x408>)
 8002ddc:	4838      	ldr	r0, [pc, #224]	@ (8002ec0 <main+0x40c>)
 8002dde:	2240      	movs	r2, #64	@ 0x40
 8002de0:	f003 ff00 	bl	8006be4 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002de4:	4b37      	ldr	r3, [pc, #220]	@ (8002ec4 <main+0x410>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6813      	ldr	r3, [r2, #0]
 8002dea:	2104      	movs	r1, #4
 8002dec:	438b      	bics	r3, r1
 8002dee:	6013      	str	r3, [r2, #0]
   HAL_ADCEx_Calibration_Start(&hadc1);
 8002df0:	4822      	ldr	r0, [pc, #136]	@ (8002e7c <main+0x3c8>)
 8002df2:	f001 f981 	bl	80040f8 <HAL_ADCEx_Calibration_Start>
   HAL_TIM_Base_Start_IT(&htim14);
 8002df6:	4829      	ldr	r0, [pc, #164]	@ (8002e9c <main+0x3e8>)
 8002df8:	f002 fc4c 	bl	8005694 <HAL_TIM_Base_Start_IT>
	data_reg[0] = ma_filters[0].result*0.53;
 8002dfc:	4e32      	ldr	r6, [pc, #200]	@ (8002ec8 <main+0x414>)
 8002dfe:	4f33      	ldr	r7, [pc, #204]	@ (8002ecc <main+0x418>)
	memcpy(&data_reg[2], (int16_t[]){(int16_t)(calculate_ntc_temperature(adc_values[2]) * 10.0f + 0.5f)}, 2);
 8002e00:	4b33      	ldr	r3, [pc, #204]	@ (8002ed0 <main+0x41c>)
 8002e02:	4699      	mov	r9, r3
 8002e04:	23fc      	movs	r3, #252	@ 0xfc
 8002e06:	059b      	lsls	r3, r3, #22
 8002e08:	4698      	mov	r8, r3
	  Check_USART1_Timeout();
 8002e0a:	f7ff fded 	bl	80029e8 <Check_USART1_Timeout>
	data_reg[0] = ma_filters[0].result*0.53;
 8002e0e:	4c31      	ldr	r4, [pc, #196]	@ (8002ed4 <main+0x420>)
 8002e10:	4d31      	ldr	r5, [pc, #196]	@ (8002ed8 <main+0x424>)
 8002e12:	236a      	movs	r3, #106	@ 0x6a
 8002e14:	5ae8      	ldrh	r0, [r5, r3]
 8002e16:	f7ff fa71 	bl	80022fc <__aeabi_i2d>
 8002e1a:	0032      	movs	r2, r6
 8002e1c:	003b      	movs	r3, r7
 8002e1e:	f7fe fb41 	bl	80014a4 <__aeabi_dmul>
 8002e22:	f7fd fb1d 	bl	8000460 <__aeabi_d2uiz>
 8002e26:	8020      	strh	r0, [r4, #0]
	data_reg[1] = ma_filters[1].result;
 8002e28:	23d6      	movs	r3, #214	@ 0xd6
 8002e2a:	5aeb      	ldrh	r3, [r5, r3]
 8002e2c:	8063      	strh	r3, [r4, #2]
	memcpy(&data_reg[2], (int16_t[]){(int16_t)(calculate_ntc_temperature(adc_values[2]) * 10.0f + 0.5f)}, 2);
 8002e2e:	4d2b      	ldr	r5, [pc, #172]	@ (8002edc <main+0x428>)
 8002e30:	88a8      	ldrh	r0, [r5, #4]
 8002e32:	f7ff fdf9 	bl	8002a28 <calculate_ntc_temperature>
 8002e36:	4649      	mov	r1, r9
 8002e38:	f7fd fef0 	bl	8000c1c <__aeabi_fmul>
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	f7fd fb2d 	bl	800049c <__aeabi_fadd>
 8002e42:	f7fe fabf 	bl	80013c4 <__aeabi_f2iz>
 8002e46:	80a0      	strh	r0, [r4, #4]
	data_reg[3]=adc_values[3];
 8002e48:	88eb      	ldrh	r3, [r5, #6]
 8002e4a:	80e3      	strh	r3, [r4, #6]
	data_reg[4]=adc_values[4];
 8002e4c:	892b      	ldrh	r3, [r5, #8]
 8002e4e:	8123      	strh	r3, [r4, #8]
    data_reg[5]=adc_values[5];
 8002e50:	896b      	ldrh	r3, [r5, #10]
 8002e52:	8163      	strh	r3, [r4, #10]
    data_reg[6]=adc_values[6];
 8002e54:	89ab      	ldrh	r3, [r5, #12]
 8002e56:	81a3      	strh	r3, [r4, #12]
  while (1)
 8002e58:	e7d7      	b.n	8002e0a <main+0x356>
 8002e5a:	b672      	cpsid	i
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <main+0x3a8>
 8002e5e:	b672      	cpsid	i
 8002e60:	e7fe      	b.n	8002e60 <main+0x3ac>
 8002e62:	b672      	cpsid	i
 8002e64:	e7fe      	b.n	8002e64 <main+0x3b0>
 8002e66:	b672      	cpsid	i
 8002e68:	e7fe      	b.n	8002e68 <main+0x3b4>
 8002e6a:	b672      	cpsid	i
 8002e6c:	e7fe      	b.n	8002e6c <main+0x3b8>
 8002e6e:	b672      	cpsid	i
 8002e70:	e7fe      	b.n	8002e70 <main+0x3bc>
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	40021000 	.word	0x40021000
 8002e78:	50000800 	.word	0x50000800
 8002e7c:	20000308 	.word	0x20000308
 8002e80:	40012400 	.word	0x40012400
 8002e84:	04000002 	.word	0x04000002
 8002e88:	08000004 	.word	0x08000004
 8002e8c:	0c000008 	.word	0x0c000008
 8002e90:	10000010 	.word	0x10000010
 8002e94:	14000020 	.word	0x14000020
 8002e98:	18000040 	.word	0x18000040
 8002e9c:	200001c8 	.word	0x200001c8
 8002ea0:	40002000 	.word	0x40002000
 8002ea4:	0000afc8 	.word	0x0000afc8
 8002ea8:	20000260 	.word	0x20000260
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	0000ffff 	.word	0x0000ffff
 8002eb4:	20000214 	.word	0x20000214
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	20000588 	.word	0x20000588
 8002ec0:	20000134 	.word	0x20000134
 8002ec4:	200000d8 	.word	0x200000d8
 8002ec8:	8f5c28f6 	.word	0x8f5c28f6
 8002ecc:	3fe0f5c2 	.word	0x3fe0f5c2
 8002ed0:	41200000 	.word	0x41200000
 8002ed4:	20000468 	.word	0x20000468
 8002ed8:	2000036c 	.word	0x2000036c
 8002edc:	200005d0 	.word	0x200005d0
 8002ee0:	b672      	cpsid	i
 8002ee2:	e7fe      	b.n	8002ee2 <main+0x42e>
 8002ee4:	b672      	cpsid	i
 8002ee6:	e7fe      	b.n	8002ee6 <main+0x432>
 8002ee8:	b672      	cpsid	i
 8002eea:	e7fe      	b.n	8002eea <main+0x436>
 8002eec:	b672      	cpsid	i
 8002eee:	e7fe      	b.n	8002eee <main+0x43a>
 8002ef0:	b672      	cpsid	i
 8002ef2:	e7fe      	b.n	8002ef2 <main+0x43e>
 8002ef4:	b672      	cpsid	i
 8002ef6:	e7fe      	b.n	8002ef6 <main+0x442>
 8002ef8:	b672      	cpsid	i
 8002efa:	e7fe      	b.n	8002efa <main+0x446>
 8002efc:	b672      	cpsid	i
 8002efe:	e7fe      	b.n	8002efe <main+0x44a>
 8002f00:	b672      	cpsid	i
 8002f02:	e7fe      	b.n	8002f02 <main+0x44e>
 8002f04:	b672      	cpsid	i
 8002f06:	e7fe      	b.n	8002f06 <main+0x452>
 8002f08:	b672      	cpsid	i
 8002f0a:	e7fe      	b.n	8002f0a <main+0x456>
 8002f0c:	b672      	cpsid	i
 8002f0e:	e7fe      	b.n	8002f0e <main+0x45a>
 8002f10:	b672      	cpsid	i
 8002f12:	e7fe      	b.n	8002f12 <main+0x45e>
 8002f14:	b672      	cpsid	i
 8002f16:	e7fe      	b.n	8002f16 <main+0x462>
 8002f18:	b672      	cpsid	i
 8002f1a:	e7fe      	b.n	8002f1a <main+0x466>

08002f1c <MA_Update>:
 {
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	0004      	movs	r4, r0
     filter->sum -= filter->buffer[filter->index];
 8002f20:	6e46      	ldr	r6, [r0, #100]	@ 0x64
 8002f22:	2268      	movs	r2, #104	@ 0x68
 8002f24:	5c83      	ldrb	r3, [r0, r2]
 8002f26:	0058      	lsls	r0, r3, #1
 8002f28:	5a25      	ldrh	r5, [r4, r0]
     filter->buffer[filter->index] = new_value;
 8002f2a:	5221      	strh	r1, [r4, r0]
     filter->sum += new_value;
 8002f2c:	1989      	adds	r1, r1, r6
 8002f2e:	1b48      	subs	r0, r1, r5
 8002f30:	6660      	str	r0, [r4, #100]	@ 0x64
     filter->index++;
 8002f32:	3301      	adds	r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	54a3      	strb	r3, [r4, r2]
     if (filter->index >= MA_WINDOW_SIZE)
 8002f38:	2b31      	cmp	r3, #49	@ 0x31
 8002f3a:	d90c      	bls.n	8002f56 <MA_Update+0x3a>
         filter->index = 0;
 8002f3c:	2368      	movs	r3, #104	@ 0x68
 8002f3e:	2200      	movs	r2, #0
 8002f40:	54e2      	strb	r2, [r4, r3]
         filter->filled = 1;
 8002f42:	3301      	adds	r3, #1
 8002f44:	3201      	adds	r2, #1
 8002f46:	54e2      	strb	r2, [r4, r3]
     uint8_t size = filter->filled ? MA_WINDOW_SIZE : filter->index;
 8002f48:	3b37      	subs	r3, #55	@ 0x37
     filter->result = filter->sum / (size ? size : 1);
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	f7fd f8d8 	bl	8000100 <__udivsi3>
 8002f50:	236a      	movs	r3, #106	@ 0x6a
 8002f52:	52e0      	strh	r0, [r4, r3]
 }
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
     uint8_t size = filter->filled ? MA_WINDOW_SIZE : filter->index;
 8002f56:	2269      	movs	r2, #105	@ 0x69
 8002f58:	5ca2      	ldrb	r2, [r4, r2]
 8002f5a:	2a00      	cmp	r2, #0
 8002f5c:	d103      	bne.n	8002f66 <MA_Update+0x4a>
     filter->result = filter->sum / (size ? size : 1);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f3      	beq.n	8002f4c <MA_Update+0x30>
 8002f64:	e7f1      	b.n	8002f4a <MA_Update+0x2e>
     uint8_t size = filter->filled ? MA_WINDOW_SIZE : filter->index;
 8002f66:	2332      	movs	r3, #50	@ 0x32
 8002f68:	e7ef      	b.n	8002f4a <MA_Update+0x2e>
	...

08002f6c <HAL_ADC_ConvCpltCallback>:
{
 8002f6c:	b570      	push	{r4, r5, r6, lr}
    if (hadc->Instance == ADC1)
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <HAL_ADC_ConvCpltCallback+0x38>)
 8002f70:	6802      	ldr	r2, [r0, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d000      	beq.n	8002f78 <HAL_ADC_ConvCpltCallback+0xc>
}
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
    	MA_Update(&ma_filters[0], adc_values[0]);
 8002f78:	4d0b      	ldr	r5, [pc, #44]	@ (8002fa8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002f7a:	8829      	ldrh	r1, [r5, #0]
 8002f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8002fac <HAL_ADC_ConvCpltCallback+0x40>)
 8002f7e:	0020      	movs	r0, r4
 8002f80:	f7ff ffcc 	bl	8002f1c <MA_Update>
    	MA_Update(&ma_filters[1], adc_values[1]);
 8002f84:	8869      	ldrh	r1, [r5, #2]
 8002f86:	0020      	movs	r0, r4
 8002f88:	306c      	adds	r0, #108	@ 0x6c
 8002f8a:	f7ff ffc7 	bl	8002f1c <MA_Update>
    	LED_2_OFF;
 8002f8e:	20a0      	movs	r0, #160	@ 0xa0
 8002f90:	2200      	movs	r2, #0
 8002f92:	2180      	movs	r1, #128	@ 0x80
 8002f94:	05c0      	lsls	r0, r0, #23
 8002f96:	f001 fd8d 	bl	8004ab4 <HAL_GPIO_WritePin>
        adc_ready = 1;
 8002f9a:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_ADC_ConvCpltCallback+0x44>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
}
 8002fa0:	e7e9      	b.n	8002f76 <HAL_ADC_ConvCpltCallback+0xa>
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	40012400 	.word	0x40012400
 8002fa8:	200005d0 	.word	0x200005d0
 8002fac:	2000036c 	.word	0x2000036c
 8002fb0:	200005cc 	.word	0x200005cc

08002fb4 <Error_Handler>:
 8002fb4:	b672      	cpsid	i
  while (1)
 8002fb6:	e7fe      	b.n	8002fb6 <Error_Handler+0x2>

08002fb8 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	0007      	movs	r7, r0
 8002fbc:	1e08      	subs	r0, r1, #0
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
	for (unsigned char i = 0; i < u8length; i++) {
 8002fbe:	d016      	beq.n	8002fee <calcCRC16ModBus+0x36>
 8002fc0:	2600      	movs	r6, #0
	temp = 0xFFFF;
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002ffc <calcCRC16ModBus+0x44>)
		temp = temp ^ buffer[i];
		for (unsigned char j = 1; j <= 8; j++) {
			flag = temp & 0x0001;
 8002fc4:	2501      	movs	r5, #1
			temp >>= 1;
			if (flag)
 8002fc6:	4c0e      	ldr	r4, [pc, #56]	@ (8003000 <calcCRC16ModBus+0x48>)
 8002fc8:	e003      	b.n	8002fd2 <calcCRC16ModBus+0x1a>
	for (unsigned char i = 0; i < u8length; i++) {
 8002fca:	3601      	adds	r6, #1
 8002fcc:	b2f3      	uxtb	r3, r6
 8002fce:	4298      	cmp	r0, r3
 8002fd0:	d90e      	bls.n	8002ff0 <calcCRC16ModBus+0x38>
		temp = temp ^ buffer[i];
 8002fd2:	5dbb      	ldrb	r3, [r7, r6]
 8002fd4:	405a      	eors	r2, r3
 8002fd6:	2108      	movs	r1, #8
			flag = temp & 0x0001;
 8002fd8:	002b      	movs	r3, r5
 8002fda:	4013      	ands	r3, r2
			if (flag)
 8002fdc:	425b      	negs	r3, r3
 8002fde:	4023      	ands	r3, r4
			temp >>= 1;
 8002fe0:	0852      	lsrs	r2, r2, #1
			if (flag)
 8002fe2:	405a      	eors	r2, r3
		for (unsigned char j = 1; j <= 8; j++) {
 8002fe4:	3901      	subs	r1, #1
 8002fe6:	b2c9      	uxtb	r1, r1
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d1f5      	bne.n	8002fd8 <calcCRC16ModBus+0x20>
 8002fec:	e7ed      	b.n	8002fca <calcCRC16ModBus+0x12>
	temp = 0xFFFF;
 8002fee:	4a03      	ldr	r2, [pc, #12]	@ (8002ffc <calcCRC16ModBus+0x44>)
				temp ^= 0xA001;
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8002ff0:	0a13      	lsrs	r3, r2, #8
	temp = (temp << 8) | temp2;
 8002ff2:	0210      	lsls	r0, r2, #8
 8002ff4:	4318      	orrs	r0, r3
	temp &= 0xFFFF;
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8002ff6:	b280      	uxth	r0, r0

}
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	0000ffff 	.word	0x0000ffff
 8003000:	0000a001 	.word	0x0000a001

08003004 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	0006      	movs	r6, r0
 8003008:	000d      	movs	r5, r1
 800300a:	0014      	movs	r4, r2

    uint16_t crc = calcCRC16ModBus(frame, len);
 800300c:	0011      	movs	r1, r2
 800300e:	0028      	movs	r0, r5
 8003010:	f7ff ffd2 	bl	8002fb8 <calcCRC16ModBus>
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8003014:	192b      	adds	r3, r5, r4
 8003016:	7058      	strb	r0, [r3, #1]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 8003018:	0a00      	lsrs	r0, r0, #8
 800301a:	5528      	strb	r0, [r5, r4]

    TX_2;
 800301c:	2180      	movs	r1, #128	@ 0x80
 800301e:	2201      	movs	r2, #1
 8003020:	01c9      	lsls	r1, r1, #7
 8003022:	4807      	ldr	r0, [pc, #28]	@ (8003040 <sendModBusRequest+0x3c>)
 8003024:	f001 fd46 	bl	8004ab4 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 8003028:	1ca2      	adds	r2, r4, #2
 800302a:	0029      	movs	r1, r5
 800302c:	0030      	movs	r0, r6
 800302e:	f002 ffa3 	bl	8005f78 <HAL_UART_Transmit_DMA>
 8003032:	2800      	cmp	r0, #0
 8003034:	d101      	bne.n	800303a <sendModBusRequest+0x36>
	 else{
		// RX_2;

	  }
return 1;
}
 8003036:	2001      	movs	r0, #1
 8003038:	bd70      	pop	{r4, r5, r6, pc}
	        Error_Handler();
 800303a:	f7ff ffbb 	bl	8002fb4 <Error_Handler>
 800303e:	e7fa      	b.n	8003036 <sendModBusRequest+0x32>
 8003040:	50000800 	.word	0x50000800

08003044 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8003044:	b510      	push	{r4, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	0004      	movs	r4, r0
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 800304a:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <sendError+0x34>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4668      	mov	r0, sp
 8003050:	7003      	strb	r3, [r0, #0]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	425b      	negs	r3, r3
 8003056:	430b      	orrs	r3, r1
 8003058:	7043      	strb	r3, [r0, #1]
    errorFrame[2] = errorCode;      // Код ошибки
 800305a:	7082      	strb	r2, [r0, #2]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 800305c:	2103      	movs	r1, #3
 800305e:	f7ff ffab 	bl	8002fb8 <calcCRC16ModBus>
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8003062:	466b      	mov	r3, sp
 8003064:	70d8      	strb	r0, [r3, #3]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 8003066:	0a00      	lsrs	r0, r0, #8
 8003068:	7118      	strb	r0, [r3, #4]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 800306a:	2205      	movs	r2, #5
 800306c:	4669      	mov	r1, sp
 800306e:	0020      	movs	r0, r4
 8003070:	f7ff ffc8 	bl	8003004 <sendModBusRequest>

}
 8003074:	b002      	add	sp, #8
 8003076:	bd10      	pop	{r4, pc}
 8003078:	20000000 	.word	0x20000000

0800307c <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	000c      	movs	r4, r1

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8003080:	4b07      	ldr	r3, [pc, #28]	@ (80030a0 <sendModbusException+0x24>)
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <sendModbusException+0x28>)
 8003084:	7815      	ldrb	r5, [r2, #0]
 8003086:	0019      	movs	r1, r3
 8003088:	701d      	strb	r5, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 800308a:	7852      	ldrb	r2, [r2, #1]
 800308c:	2380      	movs	r3, #128	@ 0x80
 800308e:	425b      	negs	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	704b      	strb	r3, [r1, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8003094:	708c      	strb	r4, [r1, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8003096:	2203      	movs	r2, #3
 8003098:	f7ff ffb4 	bl	8003004 <sendModBusRequest>
}
 800309c:	bd70      	pop	{r4, r5, r6, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	20000488 	.word	0x20000488
 80030a4:	20000588 	.word	0x20000588

080030a8 <handleReadHoldingRegs>:
modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80030aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003120 <handleReadHoldingRegs+0x78>)
 80030ac:	7894      	ldrb	r4, [r2, #2]
 80030ae:	0224      	lsls	r4, r4, #8
 80030b0:	78d3      	ldrb	r3, [r2, #3]
 80030b2:	4323      	orrs	r3, r4
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80030b4:	7914      	ldrb	r4, [r2, #4]
 80030b6:	0224      	lsls	r4, r4, #8
 80030b8:	7956      	ldrb	r6, [r2, #5]
 80030ba:	4326      	orrs	r6, r4
 80030bc:	b234      	sxth	r4, r6
	uint16_t endAddr = startingReg+numOfregs;
 80030be:	199f      	adds	r7, r3, r6
 80030c0:	b2bf      	uxth	r7, r7
	if((numOfregs<0)|(numOfregs >125)){
 80030c2:	2e7d      	cmp	r6, #125	@ 0x7d
 80030c4:	d820      	bhi.n	8003108 <handleReadHoldingRegs+0x60>
	if(endAddr > NUM_OF_HOLDING_REGS){
 80030c6:	2f3c      	cmp	r7, #60	@ 0x3c
 80030c8:	d823      	bhi.n	8003112 <handleReadHoldingRegs+0x6a>
	txFrame[0] = SLAVE_ID;
 80030ca:	4a16      	ldr	r2, [pc, #88]	@ (8003124 <handleReadHoldingRegs+0x7c>)
 80030cc:	4d16      	ldr	r5, [pc, #88]	@ (8003128 <handleReadHoldingRegs+0x80>)
 80030ce:	782d      	ldrb	r5, [r5, #0]
 80030d0:	7015      	strb	r5, [r2, #0]
	txFrame[1] = rxFrame[1];
 80030d2:	4d13      	ldr	r5, [pc, #76]	@ (8003120 <handleReadHoldingRegs+0x78>)
 80030d4:	786d      	ldrb	r5, [r5, #1]
 80030d6:	7055      	strb	r5, [r2, #1]
	txFrame[2] = numOfregs *2;
 80030d8:	0064      	lsls	r4, r4, #1
 80030da:	7094      	strb	r4, [r2, #2]
	for(int i = 0; i<numOfregs;i++){
 80030dc:	2e00      	cmp	r6, #0
 80030de:	d01d      	beq.n	800311c <handleReadHoldingRegs+0x74>
 80030e0:	4a12      	ldr	r2, [pc, #72]	@ (800312c <handleReadHoldingRegs+0x84>)
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80030e2:	005d      	lsls	r5, r3, #1
 80030e4:	5b4c      	ldrh	r4, [r1, r5]
 80030e6:	0a24      	lsrs	r4, r4, #8
 80030e8:	7014      	strb	r4, [r2, #0]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80030ea:	5b4c      	ldrh	r4, [r1, r5]
 80030ec:	7054      	strb	r4, [r2, #1]
		startingReg++;
 80030ee:	3301      	adds	r3, #1
 80030f0:	b29b      	uxth	r3, r3
	for(int i = 0; i<numOfregs;i++){
 80030f2:	3202      	adds	r2, #2
 80030f4:	429f      	cmp	r7, r3
 80030f6:	d1f4      	bne.n	80030e2 <handleReadHoldingRegs+0x3a>
 80030f8:	0072      	lsls	r2, r6, #1
 80030fa:	3203      	adds	r2, #3
	sendModBusRequest(huart,txFrame,byteCursor);
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	4909      	ldr	r1, [pc, #36]	@ (8003124 <handleReadHoldingRegs+0x7c>)
 8003100:	f7ff ff80 	bl	8003004 <sendModBusRequest>
	return 1;
 8003104:	2001      	movs	r0, #1
}
 8003106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8003108:	2103      	movs	r1, #3
 800310a:	f7ff ffb7 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 800310e:	2000      	movs	r0, #0
 8003110:	e7f9      	b.n	8003106 <handleReadHoldingRegs+0x5e>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8003112:	2102      	movs	r1, #2
 8003114:	f7ff ffb2 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 8003118:	2000      	movs	r0, #0
 800311a:	e7f4      	b.n	8003106 <handleReadHoldingRegs+0x5e>
	int byteCursor=3;
 800311c:	2203      	movs	r2, #3
 800311e:	e7ed      	b.n	80030fc <handleReadHoldingRegs+0x54>
 8003120:	20000588 	.word	0x20000588
 8003124:	20000488 	.word	0x20000488
 8003128:	20000000 	.word	0x20000000
 800312c:	2000048b 	.word	0x2000048b

08003130 <handleReadInputRegs>:
modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8003132:	4a1e      	ldr	r2, [pc, #120]	@ (80031ac <handleReadInputRegs+0x7c>)
 8003134:	7894      	ldrb	r4, [r2, #2]
 8003136:	0224      	lsls	r4, r4, #8
 8003138:	78d3      	ldrb	r3, [r2, #3]
 800313a:	4323      	orrs	r3, r4
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800313c:	7914      	ldrb	r4, [r2, #4]
 800313e:	0224      	lsls	r4, r4, #8
 8003140:	7956      	ldrb	r6, [r2, #5]
 8003142:	4326      	orrs	r6, r4
 8003144:	b234      	sxth	r4, r6
	uint16_t endAddr = startingReg+numOfregs-1;
 8003146:	199f      	adds	r7, r3, r6
 8003148:	b2bf      	uxth	r7, r7
 800314a:	1e7a      	subs	r2, r7, #1
 800314c:	b292      	uxth	r2, r2
	if((numOfregs<0)|(numOfregs >125)){
 800314e:	2e7d      	cmp	r6, #125	@ 0x7d
 8003150:	d820      	bhi.n	8003194 <handleReadInputRegs+0x64>
	if(endAddr > NUM_OF_HOLDING_REGS){
 8003152:	2a3c      	cmp	r2, #60	@ 0x3c
 8003154:	d823      	bhi.n	800319e <handleReadInputRegs+0x6e>
	txFrame[0] = SLAVE_ID;
 8003156:	4a16      	ldr	r2, [pc, #88]	@ (80031b0 <handleReadInputRegs+0x80>)
 8003158:	4d16      	ldr	r5, [pc, #88]	@ (80031b4 <handleReadInputRegs+0x84>)
 800315a:	782d      	ldrb	r5, [r5, #0]
 800315c:	7015      	strb	r5, [r2, #0]
	txFrame[1] = rxFrame[1];
 800315e:	4d13      	ldr	r5, [pc, #76]	@ (80031ac <handleReadInputRegs+0x7c>)
 8003160:	786d      	ldrb	r5, [r5, #1]
 8003162:	7055      	strb	r5, [r2, #1]
	txFrame[2] = numOfregs *2;
 8003164:	0064      	lsls	r4, r4, #1
 8003166:	7094      	strb	r4, [r2, #2]
	for(int i = 0; i<numOfregs;i++){
 8003168:	2e00      	cmp	r6, #0
 800316a:	d01d      	beq.n	80031a8 <handleReadInputRegs+0x78>
 800316c:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <handleReadInputRegs+0x88>)
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 800316e:	005d      	lsls	r5, r3, #1
 8003170:	5b4c      	ldrh	r4, [r1, r5]
 8003172:	0a24      	lsrs	r4, r4, #8
 8003174:	7014      	strb	r4, [r2, #0]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8003176:	5b4c      	ldrh	r4, [r1, r5]
 8003178:	7054      	strb	r4, [r2, #1]
		startingReg++;
 800317a:	3301      	adds	r3, #1
 800317c:	b29b      	uxth	r3, r3
	for(int i = 0; i<numOfregs;i++){
 800317e:	3202      	adds	r2, #2
 8003180:	429f      	cmp	r7, r3
 8003182:	d1f4      	bne.n	800316e <handleReadInputRegs+0x3e>
 8003184:	0072      	lsls	r2, r6, #1
 8003186:	3203      	adds	r2, #3
	sendModBusRequest(huart,txFrame,byteCursor);
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	4909      	ldr	r1, [pc, #36]	@ (80031b0 <handleReadInputRegs+0x80>)
 800318c:	f7ff ff3a 	bl	8003004 <sendModBusRequest>
	return 1;
 8003190:	2001      	movs	r0, #1
}
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8003194:	2103      	movs	r1, #3
 8003196:	f7ff ff71 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 800319a:	2000      	movs	r0, #0
 800319c:	e7f9      	b.n	8003192 <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 800319e:	2102      	movs	r1, #2
 80031a0:	f7ff ff6c 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 80031a4:	2000      	movs	r0, #0
 80031a6:	e7f4      	b.n	8003192 <handleReadInputRegs+0x62>
	int byteCursor=3;
 80031a8:	2203      	movs	r2, #3
 80031aa:	e7ed      	b.n	8003188 <handleReadInputRegs+0x58>
 80031ac:	20000588 	.word	0x20000588
 80031b0:	20000488 	.word	0x20000488
 80031b4:	20000000 	.word	0x20000000
 80031b8:	2000048b 	.word	0x2000048b

080031bc <handleReadCoils>:
modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	0005      	movs	r5, r0
	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 80031c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003238 <handleReadCoils+0x7c>)
 80031c2:	7891      	ldrb	r1, [r2, #2]
 80031c4:	0209      	lsls	r1, r1, #8
 80031c6:	78d3      	ldrb	r3, [r2, #3]
 80031c8:	430b      	orrs	r3, r1
	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 80031ca:	7911      	ldrb	r1, [r2, #4]
 80031cc:	0209      	lsls	r1, r1, #8
 80031ce:	7954      	ldrb	r4, [r2, #5]
 80031d0:	430c      	orrs	r4, r1
 80031d2:	b226      	sxth	r6, r4
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 80031d4:	1e62      	subs	r2, r4, #1
 80031d6:	21fa      	movs	r1, #250	@ 0xfa
 80031d8:	00c9      	lsls	r1, r1, #3
 80031da:	b292      	uxth	r2, r2
 80031dc:	428a      	cmp	r2, r1
 80031de:	d220      	bcs.n	8003222 <handleReadCoils+0x66>
	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 80031e0:	191b      	adds	r3, r3, r4
 80031e2:	3b01      	subs	r3, #1
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80031e8:	d820      	bhi.n	800322c <handleReadCoils+0x70>
	memset (txFrame, '\0', 256);
 80031ea:	4f14      	ldr	r7, [pc, #80]	@ (800323c <handleReadCoils+0x80>)
 80031ec:	22fd      	movs	r2, #253	@ 0xfd
 80031ee:	2100      	movs	r1, #0
 80031f0:	0038      	movs	r0, r7
 80031f2:	f003 fe91 	bl	8006f18 <memset>
	txFrame[0] = SLAVE_ID;  							// Slave ID
 80031f6:	1ef9      	subs	r1, r7, #3
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <handleReadCoils+0x84>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 80031fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <handleReadCoils+0x7c>)
 8003200:	785b      	ldrb	r3, [r3, #1]
 8003202:	704b      	strb	r3, [r1, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8003204:	2207      	movs	r2, #7
 8003206:	4032      	ands	r2, r6
 8003208:	1e53      	subs	r3, r2, #1
 800320a:	419a      	sbcs	r2, r3
 800320c:	08e4      	lsrs	r4, r4, #3
 800320e:	1912      	adds	r2, r2, r4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	708a      	strb	r2, [r1, #2]
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8003214:	3203      	adds	r2, #3
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	0028      	movs	r0, r5
 800321a:	f7ff fef3 	bl	8003004 <sendModBusRequest>
	return 1;
 800321e:	2001      	movs	r0, #1
}
 8003220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8003222:	2103      	movs	r1, #3
 8003224:	f7ff ff2a 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 8003228:	2000      	movs	r0, #0
 800322a:	e7f9      	b.n	8003220 <handleReadCoils+0x64>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800322c:	2102      	movs	r1, #2
 800322e:	f7ff ff25 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 8003232:	2000      	movs	r0, #0
 8003234:	e7f4      	b.n	8003220 <handleReadCoils+0x64>
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	20000588 	.word	0x20000588
 800323c:	2000048b 	.word	0x2000048b
 8003240:	20000000 	.word	0x20000000

08003244 <handleReadDiscreteInputs>:
modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	0005      	movs	r5, r0
	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8003248:	4a1e      	ldr	r2, [pc, #120]	@ (80032c4 <handleReadDiscreteInputs+0x80>)
 800324a:	7891      	ldrb	r1, [r2, #2]
 800324c:	0209      	lsls	r1, r1, #8
 800324e:	78d3      	ldrb	r3, [r2, #3]
 8003250:	430b      	orrs	r3, r1
	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8003252:	7911      	ldrb	r1, [r2, #4]
 8003254:	0209      	lsls	r1, r1, #8
 8003256:	7954      	ldrb	r4, [r2, #5]
 8003258:	430c      	orrs	r4, r1
 800325a:	b226      	sxth	r6, r4
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 800325c:	1e62      	subs	r2, r4, #1
 800325e:	21fa      	movs	r1, #250	@ 0xfa
 8003260:	00c9      	lsls	r1, r1, #3
 8003262:	b292      	uxth	r2, r2
 8003264:	428a      	cmp	r2, r1
 8003266:	d222      	bcs.n	80032ae <handleReadDiscreteInputs+0x6a>
	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8003268:	191b      	adds	r3, r3, r4
 800326a:	3b01      	subs	r3, #1
	if (endingAddr>199)  										 // end coil can not be more than 199
 800326c:	b29b      	uxth	r3, r3
 800326e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003270:	d822      	bhi.n	80032b8 <handleReadDiscreteInputs+0x74>
	memset (txFrame, '\0', 256);
 8003272:	4f15      	ldr	r7, [pc, #84]	@ (80032c8 <handleReadDiscreteInputs+0x84>)
 8003274:	22fc      	movs	r2, #252	@ 0xfc
 8003276:	2100      	movs	r1, #0
 8003278:	0038      	movs	r0, r7
 800327a:	f003 fe4d 	bl	8006f18 <memset>
	txFrame[0] = SLAVE_ID;  							// slave ID
 800327e:	1f39      	subs	r1, r7, #4
 8003280:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <handleReadDiscreteInputs+0x88>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <handleReadDiscreteInputs+0x80>)
 8003288:	785b      	ldrb	r3, [r3, #1]
 800328a:	704b      	strb	r3, [r1, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 800328c:	2207      	movs	r2, #7
 800328e:	4032      	ands	r2, r6
 8003290:	1e53      	subs	r3, r2, #1
 8003292:	419a      	sbcs	r2, r3
 8003294:	08e4      	lsrs	r4, r4, #3
 8003296:	1912      	adds	r2, r2, r4
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	708a      	strb	r2, [r1, #2]
     txFrame[3]=1;
 800329c:	2301      	movs	r3, #1
 800329e:	70cb      	strb	r3, [r1, #3]
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80032a0:	3203      	adds	r2, #3
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	0028      	movs	r0, r5
 80032a6:	f7ff fead 	bl	8003004 <sendModBusRequest>
	return 1;
 80032aa:	2001      	movs	r0, #1
}
 80032ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 80032ae:	2103      	movs	r1, #3
 80032b0:	f7ff fee4 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 80032b4:	2000      	movs	r0, #0
 80032b6:	e7f9      	b.n	80032ac <handleReadDiscreteInputs+0x68>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80032b8:	2102      	movs	r1, #2
 80032ba:	f7ff fedf 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 80032be:	2000      	movs	r0, #0
 80032c0:	e7f4      	b.n	80032ac <handleReadDiscreteInputs+0x68>
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	20000588 	.word	0x20000588
 80032c8:	2000048c 	.word	0x2000048c
 80032cc:	20000000 	.word	0x20000000

080032d0 <handleWriteMulyipleHandlingRegister>:
modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 80032d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003350 <handleWriteMulyipleHandlingRegister+0x80>)
 80032d4:	7894      	ldrb	r4, [r2, #2]
 80032d6:	0224      	lsls	r4, r4, #8
 80032d8:	78d3      	ldrb	r3, [r2, #3]
 80032da:	4323      	orrs	r3, r4
	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 80032dc:	7914      	ldrb	r4, [r2, #4]
 80032de:	0224      	lsls	r4, r4, #8
 80032e0:	7957      	ldrb	r7, [r2, #5]
 80032e2:	4327      	orrs	r7, r4
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 80032e4:	1e7a      	subs	r2, r7, #1
 80032e6:	b292      	uxth	r2, r2
 80032e8:	2a7a      	cmp	r2, #122	@ 0x7a
 80032ea:	d826      	bhi.n	800333a <handleWriteMulyipleHandlingRegister+0x6a>
	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 80032ec:	19df      	adds	r7, r3, r7
 80032ee:	b2bf      	uxth	r7, r7
 80032f0:	1e7a      	subs	r2, r7, #1
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 80032f2:	b292      	uxth	r2, r2
 80032f4:	2a3c      	cmp	r2, #60	@ 0x3c
 80032f6:	d825      	bhi.n	8003344 <handleWriteMulyipleHandlingRegister+0x74>
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80032f8:	4a16      	ldr	r2, [pc, #88]	@ (8003354 <handleWriteMulyipleHandlingRegister+0x84>)
		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80032fa:	001c      	movs	r4, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	b29b      	uxth	r3, r3
 8003300:	0064      	lsls	r4, r4, #1
 8003302:	7816      	ldrb	r6, [r2, #0]
 8003304:	0236      	lsls	r6, r6, #8
 8003306:	7855      	ldrb	r5, [r2, #1]
 8003308:	4335      	orrs	r5, r6
 800330a:	5265      	strh	r5, [r4, r1]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 800330c:	3202      	adds	r2, #2
 800330e:	429f      	cmp	r7, r3
 8003310:	d1f3      	bne.n	80032fa <handleWriteMulyipleHandlingRegister+0x2a>
	txFrame[0] = SLAVE_ID;     // Slave ID
 8003312:	4911      	ldr	r1, [pc, #68]	@ (8003358 <handleWriteMulyipleHandlingRegister+0x88>)
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <handleWriteMulyipleHandlingRegister+0x8c>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	700b      	strb	r3, [r1, #0]
	txFrame[1] = rxFrame[1];   // Function code
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <handleWriteMulyipleHandlingRegister+0x80>)
 800331c:	785a      	ldrb	r2, [r3, #1]
 800331e:	704a      	strb	r2, [r1, #1]
	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8003320:	789a      	ldrb	r2, [r3, #2]
 8003322:	708a      	strb	r2, [r1, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8003324:	78da      	ldrb	r2, [r3, #3]
 8003326:	70ca      	strb	r2, [r1, #3]
	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8003328:	791a      	ldrb	r2, [r3, #4]
 800332a:	710a      	strb	r2, [r1, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 800332c:	795b      	ldrb	r3, [r3, #5]
 800332e:	714b      	strb	r3, [r1, #5]
	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8003330:	2206      	movs	r2, #6
 8003332:	f7ff fe67 	bl	8003004 <sendModBusRequest>
	return 1;   // success
 8003336:	2001      	movs	r0, #1
}
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 800333a:	2103      	movs	r1, #3
 800333c:	f7ff fe9e 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 8003340:	2000      	movs	r0, #0
 8003342:	e7f9      	b.n	8003338 <handleWriteMulyipleHandlingRegister+0x68>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8003344:	2102      	movs	r1, #2
 8003346:	f7ff fe99 	bl	800307c <sendModbusException>
		return MODBUS_ERROR;
 800334a:	2000      	movs	r0, #0
 800334c:	e7f4      	b.n	8003338 <handleWriteMulyipleHandlingRegister+0x68>
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	20000588 	.word	0x20000588
 8003354:	2000058f 	.word	0x2000058f
 8003358:	20000488 	.word	0x20000488
 800335c:	20000000 	.word	0x20000000

08003360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003360:	b500      	push	{lr}
 8003362:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003364:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <HAL_MspInit+0x3c>)
 8003366:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003368:	2201      	movs	r2, #1
 800336a:	4311      	orrs	r1, r2
 800336c:	6419      	str	r1, [r3, #64]	@ 0x40
 800336e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003370:	400a      	ands	r2, r1
 8003372:	9200      	str	r2, [sp, #0]
 8003374:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	0549      	lsls	r1, r1, #21
 800337c:	430a      	orrs	r2, r1
 800337e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003382:	400b      	ands	r3, r1
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	2100      	movs	r1, #0
 800338c:	2004      	movs	r0, #4
 800338e:	f000 ff8d 	bl	80042ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003392:	2004      	movs	r0, #4
 8003394:	f000 ffbc 	bl	8004310 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003398:	b003      	add	sp, #12
 800339a:	bd00      	pop	{pc}
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033a0:	b510      	push	{r4, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a6:	2214      	movs	r2, #20
 80033a8:	2100      	movs	r1, #0
 80033aa:	a803      	add	r0, sp, #12
 80033ac:	f003 fdb4 	bl	8006f18 <memset>
  if(hadc->Instance==ADC1)
 80033b0:	4b22      	ldr	r3, [pc, #136]	@ (800343c <HAL_ADC_MspInit+0x9c>)
 80033b2:	6822      	ldr	r2, [r4, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80033b8:	b008      	add	sp, #32
 80033ba:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80033bc:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <HAL_ADC_MspInit+0xa0>)
 80033be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c0:	2180      	movs	r1, #128	@ 0x80
 80033c2:	0349      	lsls	r1, r1, #13
 80033c4:	430a      	orrs	r2, r1
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80033c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ca:	400a      	ands	r2, r1
 80033cc:	9201      	str	r2, [sp, #4]
 80033ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033d2:	2201      	movs	r2, #1
 80033d4:	4311      	orrs	r1, r2
 80033d6:	6359      	str	r1, [r3, #52]	@ 0x34
 80033d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033da:	401a      	ands	r2, r3
 80033dc:	9202      	str	r2, [sp, #8]
 80033de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80033e0:	237f      	movs	r3, #127	@ 0x7f
 80033e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e4:	3b7c      	subs	r3, #124	@ 0x7c
 80033e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	20a0      	movs	r0, #160	@ 0xa0
 80033ea:	a903      	add	r1, sp, #12
 80033ec:	05c0      	lsls	r0, r0, #23
 80033ee:	f001 f9ef 	bl	80047d0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel3;
 80033f2:	4814      	ldr	r0, [pc, #80]	@ (8003444 <HAL_ADC_MspInit+0xa4>)
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_ADC_MspInit+0xa8>)
 80033f6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033f8:	2305      	movs	r3, #5
 80033fa:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033fc:	2300      	movs	r3, #0
 80033fe:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003400:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003402:	2280      	movs	r2, #128	@ 0x80
 8003404:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003406:	3280      	adds	r2, #128	@ 0x80
 8003408:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	00d2      	lsls	r2, r2, #3
 800340e:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003410:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003412:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003414:	f000 fff2 	bl	80043fc <HAL_DMA_Init>
 8003418:	2800      	cmp	r0, #0
 800341a:	d10b      	bne.n	8003434 <HAL_ADC_MspInit+0x94>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <HAL_ADC_MspInit+0xa4>)
 800341e:	6523      	str	r3, [r4, #80]	@ 0x50
 8003420:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2100      	movs	r1, #0
 8003426:	200c      	movs	r0, #12
 8003428:	f000 ff40 	bl	80042ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800342c:	200c      	movs	r0, #12
 800342e:	f000 ff6f 	bl	8004310 <HAL_NVIC_EnableIRQ>
}
 8003432:	e7c1      	b.n	80033b8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8003434:	f7ff fdbe 	bl	8002fb4 <Error_Handler>
 8003438:	e7f0      	b.n	800341c <HAL_ADC_MspInit+0x7c>
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	40012400 	.word	0x40012400
 8003440:	40021000 	.word	0x40021000
 8003444:	200002ac 	.word	0x200002ac
 8003448:	40020030 	.word	0x40020030

0800344c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800344c:	b500      	push	{lr}
 800344e:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8003450:	6803      	ldr	r3, [r0, #0]
 8003452:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <HAL_TIM_Base_MspInit+0x6c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <HAL_TIM_Base_MspInit+0x70>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00f      	beq.n	800347e <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 800345e:	4a18      	ldr	r2, [pc, #96]	@ (80034c0 <HAL_TIM_Base_MspInit+0x74>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d016      	beq.n	8003492 <HAL_TIM_Base_MspInit+0x46>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003464:	b005      	add	sp, #20
 8003466:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003468:	4b16      	ldr	r3, [pc, #88]	@ (80034c4 <HAL_TIM_Base_MspInit+0x78>)
 800346a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800346c:	2180      	movs	r1, #128	@ 0x80
 800346e:	0109      	lsls	r1, r1, #4
 8003470:	430a      	orrs	r2, r1
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	400b      	ands	r3, r1
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	9b01      	ldr	r3, [sp, #4]
 800347c:	e7f2      	b.n	8003464 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800347e:	4a11      	ldr	r2, [pc, #68]	@ (80034c4 <HAL_TIM_Base_MspInit+0x78>)
 8003480:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003482:	2302      	movs	r3, #2
 8003484:	4319      	orrs	r1, r3
 8003486:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8003488:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800348a:	4013      	ands	r3, r2
 800348c:	9302      	str	r3, [sp, #8]
 800348e:	9b02      	ldr	r3, [sp, #8]
 8003490:	e7e8      	b.n	8003464 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003492:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <HAL_TIM_Base_MspInit+0x78>)
 8003494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003496:	2180      	movs	r1, #128	@ 0x80
 8003498:	0209      	lsls	r1, r1, #8
 800349a:	430a      	orrs	r2, r1
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	400b      	ands	r3, r1
 80034a2:	9303      	str	r3, [sp, #12]
 80034a4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	2013      	movs	r0, #19
 80034ac:	f000 fefe 	bl	80042ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80034b0:	2013      	movs	r0, #19
 80034b2:	f000 ff2d 	bl	8004310 <HAL_NVIC_EnableIRQ>
}
 80034b6:	e7d5      	b.n	8003464 <HAL_TIM_Base_MspInit+0x18>
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40002000 	.word	0x40002000
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034c8:	b510      	push	{r4, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ce:	2214      	movs	r2, #20
 80034d0:	2100      	movs	r1, #0
 80034d2:	a803      	add	r0, sp, #12
 80034d4:	f003 fd20 	bl	8006f18 <memset>
  if(htim->Instance==TIM1)
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_TIM_MspPostInit+0x74>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_TIM_MspPostInit+0x22>

    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80034e0:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_TIM_MspPostInit+0x78>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d016      	beq.n	8003514 <HAL_TIM_MspPostInit+0x4c>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034e6:	b008      	add	sp, #32
 80034e8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ea:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <HAL_TIM_MspPostInit+0x7c>)
 80034ec:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80034ee:	2301      	movs	r3, #1
 80034f0:	4319      	orrs	r1, r3
 80034f2:	6351      	str	r1, [r2, #52]	@ 0x34
 80034f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034f6:	4013      	ands	r3, r2
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80034fc:	2390      	movs	r3, #144	@ 0x90
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003506:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003508:	20a0      	movs	r0, #160	@ 0xa0
 800350a:	a903      	add	r1, sp, #12
 800350c:	05c0      	lsls	r0, r0, #23
 800350e:	f001 f95f 	bl	80047d0 <HAL_GPIO_Init>
 8003512:	e7e8      	b.n	80034e6 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003514:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <HAL_TIM_MspPostInit+0x7c>)
 8003516:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003518:	2301      	movs	r3, #1
 800351a:	4319      	orrs	r1, r3
 800351c:	6351      	str	r1, [r2, #52]	@ 0x34
 800351e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003520:	401a      	ands	r2, r3
 8003522:	9202      	str	r2, [sp, #8]
 8003524:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003526:	2280      	movs	r2, #128	@ 0x80
 8003528:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	3a7e      	subs	r2, #126	@ 0x7e
 800352c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800352e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003530:	20a0      	movs	r0, #160	@ 0xa0
 8003532:	a903      	add	r1, sp, #12
 8003534:	05c0      	lsls	r0, r0, #23
 8003536:	f001 f94b 	bl	80047d0 <HAL_GPIO_Init>
}
 800353a:	e7d4      	b.n	80034e6 <HAL_TIM_MspPostInit+0x1e>
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003548:	b530      	push	{r4, r5, lr}
 800354a:	b08f      	sub	sp, #60	@ 0x3c
 800354c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354e:	2214      	movs	r2, #20
 8003550:	2100      	movs	r1, #0
 8003552:	a809      	add	r0, sp, #36	@ 0x24
 8003554:	f003 fce0 	bl	8006f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003558:	2218      	movs	r2, #24
 800355a:	2100      	movs	r1, #0
 800355c:	a803      	add	r0, sp, #12
 800355e:	f003 fcdb 	bl	8006f18 <memset>
  if(huart->Instance==USART1)
 8003562:	4b35      	ldr	r3, [pc, #212]	@ (8003638 <HAL_UART_MspInit+0xf0>)
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <HAL_UART_MspInit+0x26>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800356a:	b00f      	add	sp, #60	@ 0x3c
 800356c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800356e:	2301      	movs	r3, #1
 8003570:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003572:	a803      	add	r0, sp, #12
 8003574:	f001 fea4 	bl	80052c0 <HAL_RCCEx_PeriphCLKConfig>
 8003578:	2800      	cmp	r0, #0
 800357a:	d153      	bne.n	8003624 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART1_CLK_ENABLE();
 800357c:	4b2f      	ldr	r3, [pc, #188]	@ (800363c <HAL_UART_MspInit+0xf4>)
 800357e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003580:	2180      	movs	r1, #128	@ 0x80
 8003582:	01c9      	lsls	r1, r1, #7
 8003584:	430a      	orrs	r2, r1
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
 8003588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800358a:	400a      	ands	r2, r1
 800358c:	9201      	str	r2, [sp, #4]
 800358e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003590:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003592:	2202      	movs	r2, #2
 8003594:	4311      	orrs	r1, r2
 8003596:	6359      	str	r1, [r3, #52]	@ 0x34
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	4013      	ands	r3, r2
 800359c:	9302      	str	r3, [sp, #8]
 800359e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80035a0:	23c0      	movs	r3, #192	@ 0xc0
 80035a2:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2500      	movs	r5, #0
 80035a8:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80035ac:	950d      	str	r5, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ae:	a909      	add	r1, sp, #36	@ 0x24
 80035b0:	4823      	ldr	r0, [pc, #140]	@ (8003640 <HAL_UART_MspInit+0xf8>)
 80035b2:	f001 f90d 	bl	80047d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80035b6:	4823      	ldr	r0, [pc, #140]	@ (8003644 <HAL_UART_MspInit+0xfc>)
 80035b8:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <HAL_UART_MspInit+0x100>)
 80035ba:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80035bc:	2332      	movs	r3, #50	@ 0x32
 80035be:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c0:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c2:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035c4:	334e      	adds	r3, #78	@ 0x4e
 80035c6:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c8:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ca:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80035cc:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035ce:	23c0      	movs	r3, #192	@ 0xc0
 80035d0:	019b      	lsls	r3, r3, #6
 80035d2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035d4:	f000 ff12 	bl	80043fc <HAL_DMA_Init>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d126      	bne.n	800362a <HAL_UART_MspInit+0xe2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <HAL_UART_MspInit+0xfc>)
 80035e0:	50a3      	str	r3, [r4, r2]
 80035e2:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80035e4:	4819      	ldr	r0, [pc, #100]	@ (800364c <HAL_UART_MspInit+0x104>)
 80035e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_UART_MspInit+0x108>)
 80035e8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80035ea:	2333      	movs	r3, #51	@ 0x33
 80035ec:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035ee:	3b23      	subs	r3, #35	@ 0x23
 80035f0:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f6:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f8:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035fa:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80035fc:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80035fe:	2380      	movs	r3, #128	@ 0x80
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003604:	f000 fefa 	bl	80043fc <HAL_DMA_Init>
 8003608:	2800      	cmp	r0, #0
 800360a:	d111      	bne.n	8003630 <HAL_UART_MspInit+0xe8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800360c:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <HAL_UART_MspInit+0x104>)
 800360e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8003610:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003612:	2200      	movs	r2, #0
 8003614:	2100      	movs	r1, #0
 8003616:	201b      	movs	r0, #27
 8003618:	f000 fe48 	bl	80042ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800361c:	201b      	movs	r0, #27
 800361e:	f000 fe77 	bl	8004310 <HAL_NVIC_EnableIRQ>
}
 8003622:	e7a2      	b.n	800356a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8003624:	f7ff fcc6 	bl	8002fb4 <Error_Handler>
 8003628:	e7a8      	b.n	800357c <HAL_UART_MspInit+0x34>
      Error_Handler();
 800362a:	f7ff fcc3 	bl	8002fb4 <Error_Handler>
 800362e:	e7d5      	b.n	80035dc <HAL_UART_MspInit+0x94>
      Error_Handler();
 8003630:	f7ff fcc0 	bl	8002fb4 <Error_Handler>
 8003634:	e7ea      	b.n	800360c <HAL_UART_MspInit+0xc4>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	40013800 	.word	0x40013800
 800363c:	40021000 	.word	0x40021000
 8003640:	50000400 	.word	0x50000400
 8003644:	200000d8 	.word	0x200000d8
 8003648:	40020008 	.word	0x40020008
 800364c:	2000007c 	.word	0x2000007c
 8003650:	4002001c 	.word	0x4002001c

08003654 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003654:	b510      	push	{r4, lr}
 8003656:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 8003658:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <HAL_UART_MspDeInit+0x38>)
 800365a:	6802      	ldr	r2, [r0, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d000      	beq.n	8003662 <HAL_UART_MspDeInit+0xe>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8003660:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8003662:	4a0b      	ldr	r2, [pc, #44]	@ (8003690 <HAL_UART_MspDeInit+0x3c>)
 8003664:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003666:	490b      	ldr	r1, [pc, #44]	@ (8003694 <HAL_UART_MspDeInit+0x40>)
 8003668:	400b      	ands	r3, r1
 800366a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 800366c:	21c0      	movs	r1, #192	@ 0xc0
 800366e:	480a      	ldr	r0, [pc, #40]	@ (8003698 <HAL_UART_MspDeInit+0x44>)
 8003670:	f001 f99a 	bl	80049a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	58e0      	ldr	r0, [r4, r3]
 8003678:	f000 ff24 	bl	80044c4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800367c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800367e:	f000 ff21 	bl	80044c4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003682:	201b      	movs	r0, #27
 8003684:	f000 fe50 	bl	8004328 <HAL_NVIC_DisableIRQ>
}
 8003688:	e7ea      	b.n	8003660 <HAL_UART_MspDeInit+0xc>
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	40013800 	.word	0x40013800
 8003690:	40021000 	.word	0x40021000
 8003694:	ffffbfff 	.word	0xffffbfff
 8003698:	50000400 	.word	0x50000400

0800369c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800369c:	e7fe      	b.n	800369c <NMI_Handler>

0800369e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800369e:	e7fe      	b.n	800369e <HardFault_Handler>

080036a0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036a0:	4770      	bx	lr

080036a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036a2:	4770      	bx	lr

080036a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036a6:	f000 f897 	bl	80037d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036aa:	bd10      	pop	{r4, pc}

080036ac <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80036ac:	4770      	bx	lr
	...

080036b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80036b2:	4802      	ldr	r0, [pc, #8]	@ (80036bc <DMA1_Channel1_IRQHandler+0xc>)
 80036b4:	f001 f824 	bl	8004700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036b8:	bd10      	pop	{r4, pc}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	200000d8 	.word	0x200000d8

080036c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80036c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80036c2:	4803      	ldr	r0, [pc, #12]	@ (80036d0 <DMA1_Channel2_3_IRQHandler+0x10>)
 80036c4:	f001 f81c 	bl	8004700 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036c8:	4802      	ldr	r0, [pc, #8]	@ (80036d4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80036ca:	f001 f819 	bl	8004700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80036ce:	bd10      	pop	{r4, pc}
 80036d0:	2000007c 	.word	0x2000007c
 80036d4:	200002ac 	.word	0x200002ac

080036d8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80036d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80036da:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <ADC1_IRQHandler+0xc>)
 80036dc:	f000 fa10 	bl	8003b00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	20000308 	.word	0x20000308

080036e8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80036e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80036ea:	4802      	ldr	r0, [pc, #8]	@ (80036f4 <TIM14_IRQHandler+0xc>)
 80036ec:	f002 f80a 	bl	8005704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	200001c8 	.word	0x200001c8

080036f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80036f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036fa:	4802      	ldr	r0, [pc, #8]	@ (8003704 <USART1_IRQHandler+0xc>)
 80036fc:	f002 fd54 	bl	80061a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003700:	bd10      	pop	{r4, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	20000134 	.word	0x20000134

08003708 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003708:	4770      	bx	lr
	...

0800370c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800370c:	480d      	ldr	r0, [pc, #52]	@ (8003744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800370e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003710:	f7ff fffa 	bl	8003708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003714:	480c      	ldr	r0, [pc, #48]	@ (8003748 <LoopForever+0x6>)
  ldr r1, =_edata
 8003716:	490d      	ldr	r1, [pc, #52]	@ (800374c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <LoopForever+0xe>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800371c:	e002      	b.n	8003724 <LoopCopyDataInit>

0800371e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800371e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003722:	3304      	adds	r3, #4

08003724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003728:	d3f9      	bcc.n	800371e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800372a:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800372c:	4c0a      	ldr	r4, [pc, #40]	@ (8003758 <LoopForever+0x16>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003730:	e001      	b.n	8003736 <LoopFillZerobss>

08003732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003734:	3204      	adds	r2, #4

08003736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003738:	d3fb      	bcc.n	8003732 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800373a:	f003 fbfb 	bl	8006f34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800373e:	f7ff f9b9 	bl	8002ab4 <main>

08003742 <LoopForever>:

LoopForever:
  b LoopForever
 8003742:	e7fe      	b.n	8003742 <LoopForever>
  ldr   r0, =_estack
 8003744:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800374c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003750:	0800713c 	.word	0x0800713c
  ldr r2, =_sbss
 8003754:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003758:	2000071c 	.word	0x2000071c

0800375c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800375c:	e7fe      	b.n	800375c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08003760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003764:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <HAL_InitTick+0x44>)
 8003766:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003768:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 800376a:	2900      	cmp	r1, #0
 800376c:	d100      	bne.n	8003770 <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 800376e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003770:	4d0d      	ldr	r5, [pc, #52]	@ (80037a8 <HAL_InitTick+0x48>)
 8003772:	20fa      	movs	r0, #250	@ 0xfa
 8003774:	0080      	lsls	r0, r0, #2
 8003776:	f7fc fcc3 	bl	8000100 <__udivsi3>
 800377a:	0001      	movs	r1, r0
 800377c:	6828      	ldr	r0, [r5, #0]
 800377e:	f7fc fcbf 	bl	8000100 <__udivsi3>
 8003782:	f000 fde1 	bl	8004348 <HAL_SYSTICK_Config>
 8003786:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8003788:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ef      	bne.n	800376e <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800378e:	2c03      	cmp	r4, #3
 8003790:	d8ed      	bhi.n	800376e <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003792:	2200      	movs	r2, #0
 8003794:	0021      	movs	r1, r4
 8003796:	4240      	negs	r0, r0
 8003798:	f000 fd88 	bl	80042ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800379c:	4b03      	ldr	r3, [pc, #12]	@ (80037ac <HAL_InitTick+0x4c>)
 800379e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80037a0:	2000      	movs	r0, #0
 80037a2:	e7e4      	b.n	800376e <HAL_InitTick+0xe>
 80037a4:	20000008 	.word	0x20000008
 80037a8:	20000004 	.word	0x20000004
 80037ac:	2000000c 	.word	0x2000000c

080037b0 <HAL_Init>:
{
 80037b0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b2:	4a08      	ldr	r2, [pc, #32]	@ (80037d4 <HAL_Init+0x24>)
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	2380      	movs	r3, #128	@ 0x80
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037be:	2003      	movs	r0, #3
 80037c0:	f7ff ffce 	bl	8003760 <HAL_InitTick>
 80037c4:	1e04      	subs	r4, r0, #0
 80037c6:	d002      	beq.n	80037ce <HAL_Init+0x1e>
    status = HAL_ERROR;
 80037c8:	2401      	movs	r4, #1
}
 80037ca:	0020      	movs	r0, r4
 80037cc:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80037ce:	f7ff fdc7 	bl	8003360 <HAL_MspInit>
 80037d2:	e7fa      	b.n	80037ca <HAL_Init+0x1a>
 80037d4:	40022000 	.word	0x40022000

080037d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80037d8:	4a03      	ldr	r2, [pc, #12]	@ (80037e8 <HAL_IncTick+0x10>)
 80037da:	6811      	ldr	r1, [r2, #0]
 80037dc:	4b03      	ldr	r3, [pc, #12]	@ (80037ec <HAL_IncTick+0x14>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	185b      	adds	r3, r3, r1
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	4770      	bx	lr
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	200005e0 	.word	0x200005e0
 80037ec:	20000008 	.word	0x20000008

080037f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037f0:	4b01      	ldr	r3, [pc, #4]	@ (80037f8 <HAL_GetTick+0x8>)
 80037f2:	6818      	ldr	r0, [r3, #0]
}
 80037f4:	4770      	bx	lr
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	200005e0 	.word	0x200005e0

080037fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff fff6 	bl	80037f0 <HAL_GetTick>
 8003804:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003806:	1c63      	adds	r3, r4, #1
 8003808:	d002      	beq.n	8003810 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800380a:	4b04      	ldr	r3, [pc, #16]	@ (800381c <HAL_Delay+0x20>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003810:	f7ff ffee 	bl	80037f0 <HAL_GetTick>
 8003814:	1b40      	subs	r0, r0, r5
 8003816:	42a0      	cmp	r0, r4
 8003818:	d3fa      	bcc.n	8003810 <HAL_Delay+0x14>
  {
  }
}
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	20000008 	.word	0x20000008

08003820 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003822:	b083      	sub	sp, #12
 8003824:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003826:	2300      	movs	r3, #0
 8003828:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800382a:	2800      	cmp	r0, #0
 800382c:	d100      	bne.n	8003830 <HAL_ADC_Init+0x10>
 800382e:	e0ff      	b.n	8003a30 <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003830:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003832:	2b00      	cmp	r3, #0
 8003834:	d100      	bne.n	8003838 <HAL_ADC_Init+0x18>
 8003836:	e0b6      	b.n	80039a6 <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003838:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	00d2      	lsls	r2, r2, #3
 800383e:	d417      	bmi.n	8003870 <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 8003840:	6899      	ldr	r1, [r3, #8]
 8003842:	4a7c      	ldr	r2, [pc, #496]	@ (8003a34 <HAL_ADC_Init+0x214>)
 8003844:	4011      	ands	r1, r2
 8003846:	2280      	movs	r2, #128	@ 0x80
 8003848:	0552      	lsls	r2, r2, #21
 800384a:	430a      	orrs	r2, r1
 800384c:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800384e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a38 <HAL_ADC_Init+0x218>)
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	497a      	ldr	r1, [pc, #488]	@ (8003a3c <HAL_ADC_Init+0x21c>)
 8003854:	f7fc fc54 	bl	8000100 <__udivsi3>
 8003858:	3001      	adds	r0, #1
 800385a:	0040      	lsls	r0, r0, #1
 800385c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800386a:	9b01      	ldr	r3, [sp, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f9      	bne.n	8003864 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003870:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003872:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003874:	2000      	movs	r0, #0
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	d408      	bmi.n	800388c <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800387c:	2210      	movs	r2, #16
 800387e:	4313      	orrs	r3, r2
 8003880:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003882:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003884:	3a0f      	subs	r2, #15
 8003886:	4313      	orrs	r3, r2
 8003888:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800388a:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800388c:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800388e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003890:	2310      	movs	r3, #16
 8003892:	4013      	ands	r3, r2
 8003894:	2204      	movs	r2, #4
 8003896:	402a      	ands	r2, r5
 8003898:	4313      	orrs	r3, r2
 800389a:	d000      	beq.n	800389e <HAL_ADC_Init+0x7e>
 800389c:	e0c1      	b.n	8003a22 <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800389e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038a0:	4a67      	ldr	r2, [pc, #412]	@ (8003a40 <HAL_ADC_Init+0x220>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	3206      	adds	r2, #6
 80038a6:	32ff      	adds	r2, #255	@ 0xff
 80038a8:	4313      	orrs	r3, r2
 80038aa:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038ac:	688b      	ldr	r3, [r1, #8]
 80038ae:	07db      	lsls	r3, r3, #31
 80038b0:	d44f      	bmi.n	8003952 <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80038b2:	7ea5      	ldrb	r5, [r4, #26]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80038b4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80038b6:	1e73      	subs	r3, r6, #1
 80038b8:	419e      	sbcs	r6, r3
 80038ba:	0336      	lsls	r6, r6, #12
 80038bc:	68a2      	ldr	r2, [r4, #8]
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80038c2:	7e23      	ldrb	r3, [r4, #24]
 80038c4:	039b      	lsls	r3, r3, #14
 80038c6:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80038c8:	7e63      	ldrb	r3, [r4, #25]
 80038ca:	03db      	lsls	r3, r3, #15
 80038cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80038ce:	036b      	lsls	r3, r5, #13
 80038d0:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db6d      	blt.n	80039b4 <HAL_ADC_Init+0x194>
 80038d8:	2780      	movs	r7, #128	@ 0x80
 80038da:	03bf      	lsls	r7, r7, #14
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038dc:	232c      	movs	r3, #44	@ 0x2c
 80038de:	5ce3      	ldrb	r3, [r4, r3]
 80038e0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038e2:	4313      	orrs	r3, r2
 80038e4:	4333      	orrs	r3, r6
 80038e6:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038e8:	2220      	movs	r2, #32
 80038ea:	5ca2      	ldrb	r2, [r4, r2]
 80038ec:	2a01      	cmp	r2, #1
 80038ee:	d064      	beq.n	80039ba <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d005      	beq.n	8003902 <HAL_ADC_Init+0xe2>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80038f6:	25e0      	movs	r5, #224	@ 0xe0
 80038f8:	006d      	lsls	r5, r5, #1
 80038fa:	402a      	ands	r2, r5
 80038fc:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80038fe:	432a      	orrs	r2, r5
 8003900:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003902:	68ca      	ldr	r2, [r1, #12]
 8003904:	4d4f      	ldr	r5, [pc, #316]	@ (8003a44 <HAL_ADC_Init+0x224>)
 8003906:	402a      	ands	r2, r5
 8003908:	4313      	orrs	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	0f9b      	lsrs	r3, r3, #30
 8003910:	079b      	lsls	r3, r3, #30
 8003912:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003914:	431a      	orrs	r2, r3
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003916:	213c      	movs	r1, #60	@ 0x3c
 8003918:	5c61      	ldrb	r1, [r4, r1]
 800391a:	2901      	cmp	r1, #1
 800391c:	d05c      	beq.n	80039d8 <HAL_ADC_Init+0x1b8>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800391e:	6821      	ldr	r1, [r4, #0]
 8003920:	690b      	ldr	r3, [r1, #16]
 8003922:	4d49      	ldr	r5, [pc, #292]	@ (8003a48 <HAL_ADC_Init+0x228>)
 8003924:	402b      	ands	r3, r5
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	0053      	lsls	r3, r2, #1
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	2180      	movs	r1, #128	@ 0x80
 8003932:	05c9      	lsls	r1, r1, #23
 8003934:	428b      	cmp	r3, r1
 8003936:	d00c      	beq.n	8003952 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	061b      	lsls	r3, r3, #24
 800393c:	429a      	cmp	r2, r3
 800393e:	d008      	beq.n	8003952 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003940:	4942      	ldr	r1, [pc, #264]	@ (8003a4c <HAL_ADC_Init+0x22c>)
 8003942:	680b      	ldr	r3, [r1, #0]
 8003944:	4d42      	ldr	r5, [pc, #264]	@ (8003a50 <HAL_ADC_Init+0x230>)
 8003946:	402b      	ands	r3, r5
 8003948:	25f0      	movs	r5, #240	@ 0xf0
 800394a:	03ad      	lsls	r5, r5, #14
 800394c:	402a      	ands	r2, r5
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003952:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8003954:	6953      	ldr	r3, [r2, #20]
 8003956:	2107      	movs	r1, #7
 8003958:	438b      	bics	r3, r1
 800395a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800395c:	430b      	orrs	r3, r1
 800395e:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003960:	6821      	ldr	r1, [r4, #0]
 8003962:	694a      	ldr	r2, [r1, #20]
 8003964:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	2570      	movs	r5, #112	@ 0x70
 800396a:	43aa      	bics	r2, r5
 800396c:	4313      	orrs	r3, r2
 800396e:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d13a      	bne.n	80039ec <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800397a:	3b10      	subs	r3, #16
 800397c:	430b      	orrs	r3, r1
 800397e:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003980:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	2307      	movs	r3, #7
 8003986:	4013      	ands	r3, r2
 8003988:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800398a:	429a      	cmp	r2, r3
 800398c:	d040      	beq.n	8003a10 <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800398e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003990:	2212      	movs	r2, #18
 8003992:	4393      	bics	r3, r2
 8003994:	3a02      	subs	r2, #2
 8003996:	4313      	orrs	r3, r2
 8003998:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800399c:	3a0f      	subs	r2, #15
 800399e:	4313      	orrs	r3, r2
 80039a0:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80039a2:	2001      	movs	r0, #1
 80039a4:	e042      	b.n	8003a2c <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 80039a6:	f7ff fcfb 	bl	80033a0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80039aa:	2300      	movs	r3, #0
 80039ac:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80039ae:	2254      	movs	r2, #84	@ 0x54
 80039b0:	54a3      	strb	r3, [r4, r2]
 80039b2:	e741      	b.n	8003838 <HAL_ADC_Init+0x18>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	085f      	lsrs	r7, r3, #1
 80039b8:	e790      	b.n	80038dc <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80039ba:	2d00      	cmp	r5, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_ADC_Init+0x1a6>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	0252      	lsls	r2, r2, #9
 80039c2:	4313      	orrs	r3, r2
 80039c4:	e794      	b.n	80038f0 <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80039c8:	2520      	movs	r5, #32
 80039ca:	432a      	orrs	r2, r5
 80039cc:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ce:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80039d0:	3d1f      	subs	r5, #31
 80039d2:	432a      	orrs	r2, r5
 80039d4:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80039d6:	e78b      	b.n	80038f0 <HAL_ADC_Init+0xd0>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80039d8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80039da:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80039dc:	4329      	orrs	r1, r5
 80039de:	430a      	orrs	r2, r1
 80039e0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80039e2:	430a      	orrs	r2, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	2201      	movs	r2, #1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	e798      	b.n	800391e <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039ec:	2280      	movs	r2, #128	@ 0x80
 80039ee:	0392      	lsls	r2, r2, #14
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d1c5      	bne.n	8003980 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 80039f4:	6821      	ldr	r1, [r4, #0]
 80039f6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80039f8:	69e3      	ldr	r3, [r4, #28]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	221c      	movs	r2, #28
 8003a00:	401a      	ands	r2, r3
 8003a02:	2310      	movs	r3, #16
 8003a04:	425b      	negs	r3, r3
 8003a06:	4093      	lsls	r3, r2
 8003a08:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a0e:	e7b7      	b.n	8003980 <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 8003a10:	2300      	movs	r3, #0
 8003a12:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003a14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a16:	2203      	movs	r2, #3
 8003a18:	4393      	bics	r3, r2
 8003a1a:	3a02      	subs	r2, #2
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a20:	e004      	b.n	8003a2c <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a24:	2210      	movs	r2, #16
 8003a26:	4313      	orrs	r3, r2
 8003a28:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003a2a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003a2c:	b003      	add	sp, #12
 8003a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
 8003a32:	e7fb      	b.n	8003a2c <HAL_ADC_Init+0x20c>
 8003a34:	6fffffe8 	.word	0x6fffffe8
 8003a38:	20000004 	.word	0x20000004
 8003a3c:	00030d40 	.word	0x00030d40
 8003a40:	fffffefd 	.word	0xfffffefd
 8003a44:	ffde0201 	.word	0xffde0201
 8003a48:	1ffffc02 	.word	0x1ffffc02
 8003a4c:	40012708 	.word	0x40012708
 8003a50:	ffc3ffff 	.word	0xffc3ffff

08003a54 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a54:	4770      	bx	lr

08003a56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a56:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a58:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003a5a:	f7ff fffb 	bl	8003a54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8003a60:	4770      	bx	lr

08003a62 <HAL_ADC_ErrorCallback>:
}
 8003a62:	4770      	bx	lr

08003a64 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a64:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a68:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003a6a:	2240      	movs	r2, #64	@ 0x40
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a70:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003a72:	3a3c      	subs	r2, #60	@ 0x3c
 8003a74:	4313      	orrs	r3, r2
 8003a76:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a78:	f7ff fff3 	bl	8003a62 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a7c:	bd10      	pop	{r4, pc}
	...

08003a80 <ADC_DMAConvCplt>:
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a84:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a86:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003a88:	2150      	movs	r1, #80	@ 0x50
 8003a8a:	4211      	tst	r1, r2
 8003a8c:	d12a      	bne.n	8003ae4 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a8e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4313      	orrs	r3, r2
 8003a96:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a98:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003a9a:	68d9      	ldr	r1, [r3, #12]
 8003a9c:	22c0      	movs	r2, #192	@ 0xc0
 8003a9e:	0112      	lsls	r2, r2, #4
 8003aa0:	4211      	tst	r1, r2
 8003aa2:	d113      	bne.n	8003acc <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003aa4:	7e82      	ldrb	r2, [r0, #26]
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d110      	bne.n	8003acc <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	0712      	lsls	r2, r2, #28
 8003aae:	d50d      	bpl.n	8003acc <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	0752      	lsls	r2, r2, #29
 8003ab4:	d40d      	bmi.n	8003ad2 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	210c      	movs	r1, #12
 8003aba:	438a      	bics	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003abe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8003afc <ADC_DMAConvCplt+0x7c>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	3204      	adds	r2, #4
 8003ac6:	32ff      	adds	r2, #255	@ 0xff
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003acc:	f7ff fa4e 	bl	8002f6c <HAL_ADC_ConvCpltCallback>
}
 8003ad0:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ada:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003adc:	3a1f      	subs	r2, #31
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8003ae2:	e7f3      	b.n	8003acc <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ae4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003ae6:	06d2      	lsls	r2, r2, #27
 8003ae8:	d404      	bmi.n	8003af4 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003aea:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003aec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003aee:	0018      	movs	r0, r3
 8003af0:	4790      	blx	r2
}
 8003af2:	e7ed      	b.n	8003ad0 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8003af4:	f7ff ffb5 	bl	8003a62 <HAL_ADC_ErrorCallback>
 8003af8:	e7ea      	b.n	8003ad0 <ADC_DMAConvCplt+0x50>
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	fffffefe 	.word	0xfffffefe

08003b00 <HAL_ADC_IRQHandler>:
{
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b04:	6803      	ldr	r3, [r0, #0]
 8003b06:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b08:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b0a:	07ab      	lsls	r3, r5, #30
 8003b0c:	d50f      	bpl.n	8003b2e <HAL_ADC_IRQHandler+0x2e>
 8003b0e:	07b3      	lsls	r3, r6, #30
 8003b10:	d50d      	bpl.n	8003b2e <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b12:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003b14:	06db      	lsls	r3, r3, #27
 8003b16:	d404      	bmi.n	8003b22 <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003b18:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003b1a:	2380      	movs	r3, #128	@ 0x80
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003b22:	0020      	movs	r0, r4
 8003b24:	f000 fbc0 	bl	80042a8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b2e:	076b      	lsls	r3, r5, #29
 8003b30:	d501      	bpl.n	8003b36 <HAL_ADC_IRQHandler+0x36>
 8003b32:	0773      	lsls	r3, r6, #29
 8003b34:	d403      	bmi.n	8003b3e <HAL_ADC_IRQHandler+0x3e>
 8003b36:	072b      	lsls	r3, r5, #28
 8003b38:	d529      	bpl.n	8003b8e <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b3a:	0733      	lsls	r3, r6, #28
 8003b3c:	d527      	bpl.n	8003b8e <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b40:	06db      	lsls	r3, r3, #27
 8003b42:	d404      	bmi.n	8003b4e <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b44:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b4e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b50:	68d9      	ldr	r1, [r3, #12]
 8003b52:	22c0      	movs	r2, #192	@ 0xc0
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	4211      	tst	r1, r2
 8003b58:	d113      	bne.n	8003b82 <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b5a:	7ea2      	ldrb	r2, [r4, #26]
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d110      	bne.n	8003b82 <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	0712      	lsls	r2, r2, #28
 8003b64:	d50d      	bpl.n	8003b82 <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	0752      	lsls	r2, r2, #29
 8003b6a:	d43b      	bmi.n	8003be4 <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	210c      	movs	r1, #12
 8003b70:	438a      	bics	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b76:	4a37      	ldr	r2, [pc, #220]	@ (8003c54 <HAL_ADC_IRQHandler+0x154>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	3204      	adds	r2, #4
 8003b7c:	32ff      	adds	r2, #255	@ 0xff
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003b82:	0020      	movs	r0, r4
 8003b84:	f7ff f9f2 	bl	8002f6c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b8e:	062b      	lsls	r3, r5, #24
 8003b90:	d501      	bpl.n	8003b96 <HAL_ADC_IRQHandler+0x96>
 8003b92:	0633      	lsls	r3, r6, #24
 8003b94:	d42f      	bmi.n	8003bf6 <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b96:	05eb      	lsls	r3, r5, #23
 8003b98:	d501      	bpl.n	8003b9e <HAL_ADC_IRQHandler+0x9e>
 8003b9a:	05f3      	lsls	r3, r6, #23
 8003b9c:	d437      	bmi.n	8003c0e <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b9e:	05ab      	lsls	r3, r5, #22
 8003ba0:	d501      	bpl.n	8003ba6 <HAL_ADC_IRQHandler+0xa6>
 8003ba2:	05b3      	lsls	r3, r6, #22
 8003ba4:	d440      	bmi.n	8003c28 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ba6:	06eb      	lsls	r3, r5, #27
 8003ba8:	d517      	bpl.n	8003bda <HAL_ADC_IRQHandler+0xda>
 8003baa:	06f3      	lsls	r3, r6, #27
 8003bac:	d515      	bpl.n	8003bda <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003bae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003bb4:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	079b      	lsls	r3, r3, #30
 8003bba:	d00b      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bbc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bc6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003bc8:	2202      	movs	r2, #2
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8003bce:	0020      	movs	r0, r4
 8003bd0:	f7ff ff47 	bl	8003a62 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003bda:	04ad      	lsls	r5, r5, #18
 8003bdc:	d501      	bpl.n	8003be2 <HAL_ADC_IRQHandler+0xe2>
 8003bde:	04b6      	lsls	r6, r6, #18
 8003be0:	d42f      	bmi.n	8003c42 <HAL_ADC_IRQHandler+0x142>
}
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003be6:	2220      	movs	r2, #32
 8003be8:	4313      	orrs	r3, r2
 8003bea:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003bee:	3a1f      	subs	r2, #31
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003bf4:	e7c5      	b.n	8003b82 <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bf6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003bf8:	2380      	movs	r3, #128	@ 0x80
 8003bfa:	025b      	lsls	r3, r3, #9
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c00:	0020      	movs	r0, r4
 8003c02:	f7ff ff2d 	bl	8003a60 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	2280      	movs	r2, #128	@ 0x80
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e7c3      	b.n	8003b96 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c0e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003c10:	2380      	movs	r3, #128	@ 0x80
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	4313      	orrs	r3, r2
 8003c16:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c18:	0020      	movs	r0, r4
 8003c1a:	f000 fb43 	bl	80042a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	0052      	lsls	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e7ba      	b.n	8003b9e <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c28:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	02db      	lsls	r3, r3, #11
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c32:	0020      	movs	r0, r4
 8003c34:	f000 fb37 	bl	80042a6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	2280      	movs	r2, #128	@ 0x80
 8003c3c:	0092      	lsls	r2, r2, #2
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e7b1      	b.n	8003ba6 <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003c42:	0020      	movs	r0, r4
 8003c44:	f000 fb31 	bl	80042aa <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	2280      	movs	r2, #128	@ 0x80
 8003c4c:	0192      	lsls	r2, r2, #6
 8003c4e:	601a      	str	r2, [r3, #0]
}
 8003c50:	e7c7      	b.n	8003be2 <HAL_ADC_IRQHandler+0xe2>
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	fffffefe 	.word	0xfffffefe

08003c58 <HAL_ADC_ConfigChannel>:
{
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c62:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8003c64:	3354      	adds	r3, #84	@ 0x54
 8003c66:	5cc3      	ldrb	r3, [r0, r3]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d100      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x16>
 8003c6c:	e11e      	b.n	8003eac <HAL_ADC_ConfigChannel+0x254>
 8003c6e:	2354      	movs	r3, #84	@ 0x54
 8003c70:	2201      	movs	r2, #1
 8003c72:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c74:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c76:	6883      	ldr	r3, [r0, #8]
 8003c78:	3203      	adds	r2, #3
 8003c7a:	0017      	movs	r7, r2
 8003c7c:	401f      	ands	r7, r3
 8003c7e:	421a      	tst	r2, r3
 8003c80:	d009      	beq.n	8003c96 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c84:	321c      	adds	r2, #28
 8003c86:	4313      	orrs	r3, r2
 8003c88:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003c8a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003c8c:	2354      	movs	r3, #84	@ 0x54
 8003c8e:	2200      	movs	r2, #0
 8003c90:	54e2      	strb	r2, [r4, r3]
}
 8003c92:	b003      	add	sp, #12
 8003c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8003c96:	684a      	ldr	r2, [r1, #4]
 8003c98:	2a02      	cmp	r2, #2
 8003c9a:	d100      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x46>
 8003c9c:	e0c4      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	439d      	bics	r5, r3
 8003ca2:	2680      	movs	r6, #128	@ 0x80
 8003ca4:	0636      	lsls	r6, r6, #24
 8003ca6:	42b5      	cmp	r5, r6
 8003ca8:	d021      	beq.n	8003cee <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003caa:	231f      	movs	r3, #31
 8003cac:	401a      	ands	r2, r3
 8003cae:	3b10      	subs	r3, #16
 8003cb0:	4093      	lsls	r3, r2
 8003cb2:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8003cb4:	439e      	bics	r6, r3
 8003cb6:	680b      	ldr	r3, [r1, #0]
 8003cb8:	035d      	lsls	r5, r3, #13
 8003cba:	d148      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0xf6>
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	0edf      	lsrs	r7, r3, #27
 8003cc0:	003b      	movs	r3, r7
 8003cc2:	4093      	lsls	r3, r2
 8003cc4:	4333      	orrs	r3, r6
 8003cc6:	6623      	str	r3, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003cc8:	684a      	ldr	r2, [r1, #4]
 8003cca:	0893      	lsrs	r3, r2, #2
 8003ccc:	3301      	adds	r3, #1
 8003cce:	69e5      	ldr	r5, [r4, #28]
 8003cd0:	42ab      	cmp	r3, r5
 8003cd2:	d812      	bhi.n	8003cfa <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 8003cd4:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 8003cd6:	251f      	movs	r5, #31
 8003cd8:	4015      	ands	r5, r2
 8003cda:	680b      	ldr	r3, [r1, #0]
 8003cdc:	0e9b      	lsrs	r3, r3, #26
 8003cde:	220f      	movs	r2, #15
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	40ab      	lsls	r3, r5
 8003ce4:	40aa      	lsls	r2, r5
 8003ce6:	4396      	bics	r6, r2
 8003ce8:	4333      	orrs	r3, r6
 8003cea:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8003cec:	e005      	b.n	8003cfa <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cee:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003cf0:	680b      	ldr	r3, [r1, #0]
 8003cf2:	035b      	lsls	r3, r3, #13
 8003cf4:	0b5b      	lsrs	r3, r3, #13
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cfa:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8003cfc:	6968      	ldr	r0, [r5, #20]
 8003cfe:	680a      	ldr	r2, [r1, #0]
 8003d00:	0212      	lsls	r2, r2, #8
 8003d02:	688b      	ldr	r3, [r1, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	4e6a      	ldr	r6, [pc, #424]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x258>)
 8003d08:	4033      	ands	r3, r6
 8003d0a:	4390      	bics	r0, r2
 8003d0c:	4303      	orrs	r3, r0
 8003d0e:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d10:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d12:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	dab9      	bge.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d18:	4a66      	ldr	r2, [pc, #408]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	25e0      	movs	r5, #224	@ 0xe0
 8003d1e:	046d      	lsls	r5, r5, #17
 8003d20:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d22:	4965      	ldr	r1, [pc, #404]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x260>)
 8003d24:	428b      	cmp	r3, r1
 8003d26:	d050      	beq.n	8003dca <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d28:	4864      	ldr	r0, [pc, #400]	@ (8003ebc <HAL_ADC_ConfigChannel+0x264>)
 8003d2a:	4283      	cmp	r3, r0
 8003d2c:	d06e      	beq.n	8003e0c <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d2e:	4964      	ldr	r1, [pc, #400]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d30:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d32:	428b      	cmp	r3, r1
 8003d34:	d1aa      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
 8003d36:	0252      	lsls	r2, r2, #9
 8003d38:	d4a8      	bmi.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d3a:	495e      	ldr	r1, [pc, #376]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003d3c:	680b      	ldr	r3, [r1, #0]
 8003d3e:	4a61      	ldr	r2, [pc, #388]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x26c>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	432b      	orrs	r3, r5
 8003d44:	2280      	movs	r2, #128	@ 0x80
 8003d46:	03d2      	lsls	r2, r2, #15
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
}
 8003d4c:	e79e      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d4e:	07dd      	lsls	r5, r3, #31
 8003d50:	d4b6      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d52:	2701      	movs	r7, #1
 8003d54:	079d      	lsls	r5, r3, #30
 8003d56:	d4b3      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d58:	3701      	adds	r7, #1
 8003d5a:	075d      	lsls	r5, r3, #29
 8003d5c:	d4b0      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d5e:	3701      	adds	r7, #1
 8003d60:	071d      	lsls	r5, r3, #28
 8003d62:	d4ad      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d64:	3701      	adds	r7, #1
 8003d66:	06dd      	lsls	r5, r3, #27
 8003d68:	d4aa      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d6a:	3701      	adds	r7, #1
 8003d6c:	069d      	lsls	r5, r3, #26
 8003d6e:	d4a7      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d70:	3701      	adds	r7, #1
 8003d72:	065d      	lsls	r5, r3, #25
 8003d74:	d4a4      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d76:	3701      	adds	r7, #1
 8003d78:	061d      	lsls	r5, r3, #24
 8003d7a:	d4a1      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d7c:	3701      	adds	r7, #1
 8003d7e:	05dd      	lsls	r5, r3, #23
 8003d80:	d49e      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d82:	3701      	adds	r7, #1
 8003d84:	059d      	lsls	r5, r3, #22
 8003d86:	d49b      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d88:	3701      	adds	r7, #1
 8003d8a:	055d      	lsls	r5, r3, #21
 8003d8c:	d498      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d8e:	3701      	adds	r7, #1
 8003d90:	051d      	lsls	r5, r3, #20
 8003d92:	d495      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d94:	3701      	adds	r7, #1
 8003d96:	04dd      	lsls	r5, r3, #19
 8003d98:	d492      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003d9a:	3701      	adds	r7, #1
 8003d9c:	049d      	lsls	r5, r3, #18
 8003d9e:	d48f      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003da0:	3701      	adds	r7, #1
 8003da2:	045d      	lsls	r5, r3, #17
 8003da4:	d48c      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003da6:	3701      	adds	r7, #1
 8003da8:	041d      	lsls	r5, r3, #16
 8003daa:	d489      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003dac:	3701      	adds	r7, #1
 8003dae:	03dd      	lsls	r5, r3, #15
 8003db0:	d486      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003db2:	3701      	adds	r7, #1
 8003db4:	039d      	lsls	r5, r3, #14
 8003db6:	d483      	bmi.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003db8:	2580      	movs	r5, #128	@ 0x80
 8003dba:	02ed      	lsls	r5, r5, #11
 8003dbc:	001f      	movs	r7, r3
 8003dbe:	402f      	ands	r7, r5
 8003dc0:	422b      	tst	r3, r5
 8003dc2:	d100      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x16e>
 8003dc4:	e77c      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
 8003dc6:	2712      	movs	r7, #18
 8003dc8:	e77a      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dca:	0212      	lsls	r2, r2, #8
 8003dcc:	d500      	bpl.n	8003dd0 <HAL_ADC_ConfigChannel+0x178>
 8003dce:	e75d      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dd0:	4938      	ldr	r1, [pc, #224]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003dd2:	680b      	ldr	r3, [r1, #0]
 8003dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x26c>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	432b      	orrs	r3, r5
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	0412      	lsls	r2, r2, #16
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003de2:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x270>)
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	4939      	ldr	r1, [pc, #228]	@ (8003ecc <HAL_ADC_ConfigChannel+0x274>)
 8003de8:	f7fc f98a 	bl	8000100 <__udivsi3>
 8003dec:	3001      	adds	r0, #1
 8003dee:	0043      	lsls	r3, r0, #1
 8003df0:	181b      	adds	r3, r3, r0
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8003df6:	9b01      	ldr	r3, [sp, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d055      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8003dfc:	9b01      	ldr	r3, [sp, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e02:	9b01      	ldr	r3, [sp, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f9      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e08:	2000      	movs	r0, #0
 8003e0a:	e73f      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
 8003e0c:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e0e:	01d2      	lsls	r2, r2, #7
 8003e10:	d500      	bpl.n	8003e14 <HAL_ADC_ConfigChannel+0x1bc>
 8003e12:	e73b      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
 8003e14:	4927      	ldr	r1, [pc, #156]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003e16:	680b      	ldr	r3, [r1, #0]
 8003e18:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x26c>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	432b      	orrs	r3, r5
 8003e1e:	2280      	movs	r2, #128	@ 0x80
 8003e20:	0452      	lsls	r2, r2, #17
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
}
 8003e26:	e731      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e28:	2304      	movs	r3, #4
 8003e2a:	439d      	bics	r5, r3
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	429d      	cmp	r5, r3
 8003e32:	d01c      	beq.n	8003e6e <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e34:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e36:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	db00      	blt.n	8003e3e <HAL_ADC_ConfigChannel+0x1e6>
 8003e3c:	e726      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003e40:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e42:	491d      	ldr	r1, [pc, #116]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x260>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d019      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e48:	491c      	ldr	r1, [pc, #112]	@ (8003ebc <HAL_ADC_ConfigChannel+0x264>)
 8003e4a:	428b      	cmp	r3, r1
 8003e4c:	d021      	beq.n	8003e92 <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e4e:	491c      	ldr	r1, [pc, #112]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e50:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e52:	428b      	cmp	r3, r1
 8003e54:	d000      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x200>
 8003e56:	e719      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e58:	4816      	ldr	r0, [pc, #88]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003e5a:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e5c:	23c0      	movs	r3, #192	@ 0xc0
 8003e5e:	045b      	lsls	r3, r3, #17
 8003e60:	4013      	ands	r3, r2
 8003e62:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x26c>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	4313      	orrs	r3, r2
 8003e68:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6a:	2000      	movs	r0, #0
}
 8003e6c:	e70e      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e6e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003e70:	680b      	ldr	r3, [r1, #0]
 8003e72:	035b      	lsls	r3, r3, #13
 8003e74:	0b5b      	lsrs	r3, r3, #13
 8003e76:	439a      	bics	r2, r3
 8003e78:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8003e7a:	e7db      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e7c:	480d      	ldr	r0, [pc, #52]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003e7e:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e80:	23a0      	movs	r3, #160	@ 0xa0
 8003e82:	045b      	lsls	r3, r3, #17
 8003e84:	4013      	ands	r3, r2
 8003e86:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x26c>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8e:	2000      	movs	r0, #0
}
 8003e90:	e6fc      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e92:	4808      	ldr	r0, [pc, #32]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8003e94:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e96:	23c0      	movs	r3, #192	@ 0xc0
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	4a09      	ldr	r2, [pc, #36]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x26c>)
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea4:	2000      	movs	r0, #0
}
 8003ea6:	e6f1      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e6ef      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8003eac:	2002      	movs	r0, #2
 8003eae:	e6f0      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x3a>
 8003eb0:	07ffff00 	.word	0x07ffff00
 8003eb4:	40012708 	.word	0x40012708
 8003eb8:	b0001000 	.word	0xb0001000
 8003ebc:	b8004000 	.word	0xb8004000
 8003ec0:	b4002000 	.word	0xb4002000
 8003ec4:	fe3fffff 	.word	0xfe3fffff
 8003ec8:	20000004 	.word	0x20000004
 8003ecc:	00030d40 	.word	0x00030d40

08003ed0 <ADC_Enable>:
{
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eda:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003edc:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003ede:	2000      	movs	r0, #0
 8003ee0:	07d2      	lsls	r2, r2, #31
 8003ee2:	d434      	bmi.n	8003f4e <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f98 <ADC_Enable+0xc8>)
 8003ee8:	4211      	tst	r1, r2
 8003eea:	d127      	bne.n	8003f3c <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	492b      	ldr	r1, [pc, #172]	@ (8003f9c <ADC_Enable+0xcc>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ef8:	4b29      	ldr	r3, [pc, #164]	@ (8003fa0 <ADC_Enable+0xd0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	d50f      	bpl.n	8003f20 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f00:	4b28      	ldr	r3, [pc, #160]	@ (8003fa4 <ADC_Enable+0xd4>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4928      	ldr	r1, [pc, #160]	@ (8003fa8 <ADC_Enable+0xd8>)
 8003f06:	f7fc f8fb 	bl	8000100 <__udivsi3>
 8003f0a:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003f0c:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8003f0e:	9b01      	ldr	r3, [sp, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <ADC_Enable+0x50>
        wait_loop_index--;
 8003f14:	9b01      	ldr	r3, [sp, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f9      	bne.n	8003f14 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f20:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 8003f22:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d012      	beq.n	8003f4e <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 8003f28:	f7ff fc62 	bl	80037f0 <HAL_GetTick>
 8003f2c:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	07d2      	lsls	r2, r2, #31
 8003f34:	d42d      	bmi.n	8003f92 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f36:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8003f38:	4f18      	ldr	r7, [pc, #96]	@ (8003f9c <ADC_Enable+0xcc>)
 8003f3a:	e00e      	b.n	8003f5a <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f3e:	2210      	movs	r2, #16
 8003f40:	4313      	orrs	r3, r2
 8003f42:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003f46:	3a0f      	subs	r2, #15
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003f4c:	3001      	adds	r0, #1
}
 8003f4e:	b003      	add	sp, #12
 8003f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4215      	tst	r5, r2
 8003f58:	d119      	bne.n	8003f8e <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	4215      	tst	r5, r2
 8003f5e:	d103      	bne.n	8003f68 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	403a      	ands	r2, r7
 8003f64:	432a      	orrs	r2, r5
 8003f66:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f68:	f7ff fc42 	bl	80037f0 <HAL_GetTick>
 8003f6c:	1b80      	subs	r0, r0, r6
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d9ef      	bls.n	8003f52 <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	421d      	tst	r5, r3
 8003f78:	d1eb      	bne.n	8003f52 <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f82:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003f84:	3a0f      	subs	r2, #15
 8003f86:	4313      	orrs	r3, r2
 8003f88:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	e7df      	b.n	8003f4e <ADC_Enable+0x7e>
  return HAL_OK;
 8003f8e:	2000      	movs	r0, #0
 8003f90:	e7dd      	b.n	8003f4e <ADC_Enable+0x7e>
 8003f92:	2000      	movs	r0, #0
 8003f94:	e7db      	b.n	8003f4e <ADC_Enable+0x7e>
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	80000017 	.word	0x80000017
 8003f9c:	7fffffe8 	.word	0x7fffffe8
 8003fa0:	40012708 	.word	0x40012708
 8003fa4:	20000004 	.word	0x20000004
 8003fa8:	00030d40 	.word	0x00030d40

08003fac <HAL_ADC_Start_DMA>:
{
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	0004      	movs	r4, r0
 8003fb0:	000d      	movs	r5, r1
 8003fb2:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fb4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fb6:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 8003fb8:	2002      	movs	r0, #2
 8003fba:	075b      	lsls	r3, r3, #29
 8003fbc:	d41c      	bmi.n	8003ff8 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8003fbe:	2354      	movs	r3, #84	@ 0x54
 8003fc0:	5ce3      	ldrb	r3, [r4, r3]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d044      	beq.n	8004050 <HAL_ADC_Start_DMA+0xa4>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	2154      	movs	r1, #84	@ 0x54
 8003fca:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003fcc:	68d1      	ldr	r1, [r2, #12]
 8003fce:	420b      	tst	r3, r1
 8003fd0:	d10d      	bne.n	8003fee <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fd2:	6893      	ldr	r3, [r2, #8]
 8003fd4:	07db      	lsls	r3, r3, #31
 8003fd6:	d505      	bpl.n	8003fe4 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 8003fd8:	6893      	ldr	r3, [r2, #8]
 8003fda:	491e      	ldr	r1, [pc, #120]	@ (8004054 <HAL_ADC_Start_DMA+0xa8>)
 8003fdc:	400b      	ands	r3, r1
 8003fde:	2102      	movs	r1, #2
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003fe4:	6822      	ldr	r2, [r4, #0]
 8003fe6:	68d3      	ldr	r3, [r2, #12]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8003fee:	0020      	movs	r0, r4
 8003ff0:	f7ff ff6e 	bl	8003ed0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d000      	beq.n	8003ffa <HAL_ADC_Start_DMA+0x4e>
}
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003ffa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ffc:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <HAL_ADC_Start_DMA+0xac>)
 8003ffe:	401a      	ands	r2, r3
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4313      	orrs	r3, r2
 8004006:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8004008:	2300      	movs	r3, #0
 800400a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800400c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800400e:	4913      	ldr	r1, [pc, #76]	@ (800405c <HAL_ADC_Start_DMA+0xb0>)
 8004010:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004012:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004014:	4912      	ldr	r1, [pc, #72]	@ (8004060 <HAL_ADC_Start_DMA+0xb4>)
 8004016:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004018:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800401a:	4912      	ldr	r1, [pc, #72]	@ (8004064 <HAL_ADC_Start_DMA+0xb8>)
 800401c:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	211c      	movs	r1, #28
 8004022:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004024:	2254      	movs	r2, #84	@ 0x54
 8004026:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6853      	ldr	r3, [r2, #4]
 800402c:	390c      	subs	r1, #12
 800402e:	430b      	orrs	r3, r1
 8004030:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004032:	6821      	ldr	r1, [r4, #0]
 8004034:	3140      	adds	r1, #64	@ 0x40
 8004036:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004038:	0033      	movs	r3, r6
 800403a:	002a      	movs	r2, r5
 800403c:	f000 fa92 	bl	8004564 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004040:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004042:	6893      	ldr	r3, [r2, #8]
 8004044:	4903      	ldr	r1, [pc, #12]	@ (8004054 <HAL_ADC_Start_DMA+0xa8>)
 8004046:	400b      	ands	r3, r1
 8004048:	2104      	movs	r1, #4
 800404a:	430b      	orrs	r3, r1
 800404c:	6093      	str	r3, [r2, #8]
}
 800404e:	e7d3      	b.n	8003ff8 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8004050:	2002      	movs	r0, #2
 8004052:	e7d1      	b.n	8003ff8 <HAL_ADC_Start_DMA+0x4c>
 8004054:	7fffffe8 	.word	0x7fffffe8
 8004058:	fffff0fe 	.word	0xfffff0fe
 800405c:	08003a81 	.word	0x08003a81
 8004060:	08003a57 	.word	0x08003a57
 8004064:	08003a65 	.word	0x08003a65

08004068 <ADC_Disable>:
{
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800406c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800406e:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004070:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004072:	2000      	movs	r0, #0
 8004074:	07d2      	lsls	r2, r2, #31
 8004076:	d50f      	bpl.n	8004098 <ADC_Disable+0x30>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004078:	0789      	lsls	r1, r1, #30
 800407a:	d40d      	bmi.n	8004098 <ADC_Disable+0x30>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	2205      	movs	r2, #5
 8004080:	400a      	ands	r2, r1
 8004082:	2a01      	cmp	r2, #1
 8004084:	d009      	beq.n	800409a <ADC_Disable+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004086:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004088:	2210      	movs	r2, #16
 800408a:	4313      	orrs	r3, r2
 800408c:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004090:	3a0f      	subs	r2, #15
 8004092:	4313      	orrs	r3, r2
 8004094:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8004096:	2001      	movs	r0, #1
}
 8004098:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	4915      	ldr	r1, [pc, #84]	@ (80040f4 <ADC_Disable+0x8c>)
 800409e:	400a      	ands	r2, r1
 80040a0:	2102      	movs	r1, #2
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	2203      	movs	r2, #3
 80040aa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80040ac:	f7ff fba0 	bl	80037f0 <HAL_GetTick>
 80040b0:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040b6:	2501      	movs	r5, #1
  return HAL_OK;
 80040b8:	2000      	movs	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ba:	07db      	lsls	r3, r3, #31
 80040bc:	d404      	bmi.n	80040c8 <ADC_Disable+0x60>
 80040be:	e7eb      	b.n	8004098 <ADC_Disable+0x30>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	421d      	tst	r5, r3
 80040c6:	d012      	beq.n	80040ee <ADC_Disable+0x86>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040c8:	f7ff fb92 	bl	80037f0 <HAL_GetTick>
 80040cc:	1b80      	subs	r0, r0, r6
 80040ce:	2802      	cmp	r0, #2
 80040d0:	d9f6      	bls.n	80040c0 <ADC_Disable+0x58>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	421d      	tst	r5, r3
 80040d8:	d0f2      	beq.n	80040c0 <ADC_Disable+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040dc:	2210      	movs	r2, #16
 80040de:	4313      	orrs	r3, r2
 80040e0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80040e4:	3a0f      	subs	r2, #15
 80040e6:	4313      	orrs	r3, r2
 80040e8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80040ea:	2001      	movs	r0, #1
 80040ec:	e7d4      	b.n	8004098 <ADC_Disable+0x30>
  return HAL_OK;
 80040ee:	2000      	movs	r0, #0
 80040f0:	e7d2      	b.n	8004098 <ADC_Disable+0x30>
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	7fffffe8 	.word	0x7fffffe8

080040f8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80040f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fa:	46de      	mov	lr, fp
 80040fc:	4657      	mov	r7, sl
 80040fe:	464e      	mov	r6, r9
 8004100:	4645      	mov	r5, r8
 8004102:	b5e0      	push	{r5, r6, r7, lr}
 8004104:	b083      	sub	sp, #12
 8004106:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004108:	2300      	movs	r3, #0
 800410a:	9301      	str	r3, [sp, #4]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800410c:	3354      	adds	r3, #84	@ 0x54
 800410e:	5cc3      	ldrb	r3, [r0, r3]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d100      	bne.n	8004116 <HAL_ADCEx_Calibration_Start+0x1e>
 8004114:	e0b7      	b.n	8004286 <HAL_ADCEx_Calibration_Start+0x18e>
 8004116:	2501      	movs	r5, #1
 8004118:	2354      	movs	r3, #84	@ 0x54
 800411a:	54c5      	strb	r5, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800411c:	f7ff ffa4 	bl	8004068 <ADC_Disable>
 8004120:	4683      	mov	fp, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004122:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004124:	6899      	ldr	r1, [r3, #8]
 8004126:	002a      	movs	r2, r5
 8004128:	400a      	ands	r2, r1
 800412a:	420d      	tst	r5, r1
 800412c:	d00e      	beq.n	800414c <HAL_ADCEx_Calibration_Start+0x54>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004130:	2210      	movs	r2, #16
 8004132:	4313      	orrs	r3, r2
 8004134:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004136:	2354      	movs	r3, #84	@ 0x54
 8004138:	2200      	movs	r2, #0
 800413a:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 800413c:	4658      	mov	r0, fp
 800413e:	b003      	add	sp, #12
 8004140:	bcf0      	pop	{r4, r5, r6, r7}
 8004142:	46bb      	mov	fp, r7
 8004144:	46b2      	mov	sl, r6
 8004146:	46a9      	mov	r9, r5
 8004148:	46a0      	mov	r8, r4
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800414c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800414e:	484f      	ldr	r0, [pc, #316]	@ (800428c <HAL_ADCEx_Calibration_Start+0x194>)
 8004150:	4001      	ands	r1, r0
 8004152:	3006      	adds	r0, #6
 8004154:	30ff      	adds	r0, #255	@ 0xff
 8004156:	4301      	orrs	r1, r0
 8004158:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800415a:	68d9      	ldr	r1, [r3, #12]
 800415c:	4689      	mov	r9, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800415e:	68d9      	ldr	r1, [r3, #12]
 8004160:	484b      	ldr	r0, [pc, #300]	@ (8004290 <HAL_ADCEx_Calibration_Start+0x198>)
 8004162:	4001      	ands	r1, r0
 8004164:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004166:	0015      	movs	r5, r2
  MODIFY_REG(ADCx->CR,
 8004168:	4b4a      	ldr	r3, [pc, #296]	@ (8004294 <HAL_ADCEx_Calibration_Start+0x19c>)
 800416a:	469c      	mov	ip, r3
 800416c:	2080      	movs	r0, #128	@ 0x80
 800416e:	0600      	lsls	r0, r0, #24
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004170:	4b49      	ldr	r3, [pc, #292]	@ (8004298 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8004172:	469a      	mov	sl, r3
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004174:	23b4      	movs	r3, #180	@ 0xb4
 8004176:	4698      	mov	r8, r3
 8004178:	277f      	movs	r7, #127	@ 0x7f
      LL_ADC_StartCalibration(hadc->Instance);
 800417a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800417c:	688b      	ldr	r3, [r1, #8]
 800417e:	4666      	mov	r6, ip
 8004180:	4033      	ands	r3, r6
 8004182:	4303      	orrs	r3, r0
 8004184:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004186:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004188:	688b      	ldr	r3, [r1, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	db5a      	blt.n	8004244 <HAL_ADCEx_Calibration_Start+0x14c>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800418e:	4643      	mov	r3, r8
 8004190:	58cb      	ldr	r3, [r1, r3]
 8004192:	403b      	ands	r3, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004194:	18ed      	adds	r5, r5, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004196:	3201      	adds	r2, #1
 8004198:	2a08      	cmp	r2, #8
 800419a:	d1ee      	bne.n	800417a <HAL_ADCEx_Calibration_Start+0x82>
    calibration_factor_accumulated /= calibration_index;
 800419c:	08ea      	lsrs	r2, r5, #3
  MODIFY_REG(ADCx->CR,
 800419e:	688b      	ldr	r3, [r1, #8]
 80041a0:	483c      	ldr	r0, [pc, #240]	@ (8004294 <HAL_ADCEx_Calibration_Start+0x19c>)
 80041a2:	4003      	ands	r3, r0
 80041a4:	2001      	movs	r0, #1
 80041a6:	4303      	orrs	r3, r0
 80041a8:	608b      	str	r3, [r1, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80041aa:	6821      	ldr	r1, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80041ac:	6908      	ldr	r0, [r1, #16]
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	05db      	lsls	r3, r3, #23
 80041b2:	4298      	cmp	r0, r3
 80041b4:	d219      	bcs.n	80041ea <HAL_ADCEx_Calibration_Start+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80041b6:	4b39      	ldr	r3, [pc, #228]	@ (800429c <HAL_ADCEx_Calibration_Start+0x1a4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	20f0      	movs	r0, #240	@ 0xf0
 80041bc:	0380      	lsls	r0, r0, #14
 80041be:	4003      	ands	r3, r0
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80041c0:	20e0      	movs	r0, #224	@ 0xe0
 80041c2:	0340      	lsls	r0, r0, #13
 80041c4:	4283      	cmp	r3, r0
 80041c6:	d310      	bcc.n	80041ea <HAL_ADCEx_Calibration_Start+0xf2>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80041c8:	0c9b      	lsrs	r3, r3, #18
 80041ca:	3b03      	subs	r3, #3
 80041cc:	2001      	movs	r0, #1
 80041ce:	4098      	lsls	r0, r3
 80041d0:	9000      	str	r0, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 80041d2:	9b00      	ldr	r3, [sp, #0]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80041d8:	9b00      	ldr	r3, [sp, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_ADCEx_Calibration_Start+0xf2>
          delay_cpu_cycles--;
 80041de:	9b00      	ldr	r3, [sp, #0]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80041e4:	9b00      	ldr	r3, [sp, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f9      	bne.n	80041de <HAL_ADCEx_Calibration_Start+0xe6>
  MODIFY_REG(ADCx->CALFACT,
 80041ea:	23b4      	movs	r3, #180	@ 0xb4
 80041ec:	58cd      	ldr	r5, [r1, r3]
 80041ee:	207f      	movs	r0, #127	@ 0x7f
 80041f0:	4385      	bics	r5, r0
 80041f2:	4315      	orrs	r5, r2
 80041f4:	50cd      	str	r5, [r1, r3]
    LL_ADC_Disable(hadc->Instance);
 80041f6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80041f8:	6893      	ldr	r3, [r2, #8]
 80041fa:	4926      	ldr	r1, [pc, #152]	@ (8004294 <HAL_ADCEx_Calibration_Start+0x19c>)
 80041fc:	400b      	ands	r3, r1
 80041fe:	2102      	movs	r1, #2
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004204:	f7ff faf4 	bl	80037f0 <HAL_GetTick>
 8004208:	0005      	movs	r5, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800420a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	07d2      	lsls	r2, r2, #31
 8004210:	d50b      	bpl.n	800422a <HAL_ADCEx_Calibration_Start+0x132>
 8004212:	2301      	movs	r3, #1
 8004214:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004216:	f7ff faeb 	bl	80037f0 <HAL_GetTick>
 800421a:	1b40      	subs	r0, r0, r5
 800421c:	2802      	cmp	r0, #2
 800421e:	d823      	bhi.n	8004268 <HAL_ADCEx_Calibration_Start+0x170>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	4641      	mov	r1, r8
 8004226:	4211      	tst	r1, r2
 8004228:	d1f5      	bne.n	8004216 <HAL_ADCEx_Calibration_Start+0x11e>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800422a:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800422c:	491c      	ldr	r1, [pc, #112]	@ (80042a0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800422e:	464f      	mov	r7, r9
 8004230:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004232:	4317      	orrs	r7, r2
 8004234:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004236:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004238:	2203      	movs	r2, #3
 800423a:	4393      	bics	r3, r2
 800423c:	3a02      	subs	r2, #2
 800423e:	4313      	orrs	r3, r2
 8004240:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004242:	e778      	b.n	8004136 <HAL_ADCEx_Calibration_Start+0x3e>
        wait_loop_index++;
 8004244:	9b01      	ldr	r3, [sp, #4]
 8004246:	3301      	adds	r3, #1
 8004248:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800424a:	9b01      	ldr	r3, [sp, #4]
 800424c:	4553      	cmp	r3, sl
 800424e:	d99b      	bls.n	8004188 <HAL_ADCEx_Calibration_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State,
 8004250:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004252:	2212      	movs	r2, #18
 8004254:	4393      	bics	r3, r2
 8004256:	3a02      	subs	r2, #2
 8004258:	4313      	orrs	r3, r2
 800425a:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800425c:	2354      	movs	r3, #84	@ 0x54
 800425e:	2200      	movs	r2, #0
 8004260:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8004262:	3b53      	subs	r3, #83	@ 0x53
 8004264:	469b      	mov	fp, r3
 8004266:	e769      	b.n	800413c <HAL_ADCEx_Calibration_Start+0x44>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	07db      	lsls	r3, r3, #31
 800426e:	d5d7      	bpl.n	8004220 <HAL_ADCEx_Calibration_Start+0x128>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004270:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004272:	2210      	movs	r2, #16
 8004274:	4313      	orrs	r3, r2
 8004276:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004278:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800427a:	3a0f      	subs	r2, #15
 800427c:	4313      	orrs	r3, r2
 800427e:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	469b      	mov	fp, r3
 8004284:	e75a      	b.n	800413c <HAL_ADCEx_Calibration_Start+0x44>
  __HAL_LOCK(hadc);
 8004286:	2302      	movs	r3, #2
 8004288:	469b      	mov	fp, r3
 800428a:	e757      	b.n	800413c <HAL_ADCEx_Calibration_Start+0x44>
 800428c:	fffffefd 	.word	0xfffffefd
 8004290:	ffff7ffc 	.word	0xffff7ffc
 8004294:	7fffffe8 	.word	0x7fffffe8
 8004298:	0002f1ff 	.word	0x0002f1ff
 800429c:	40012708 	.word	0x40012708
 80042a0:	00008003 	.word	0x00008003

080042a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042a4:	4770      	bx	lr

080042a6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042a8:	4770      	bx	lr

080042aa <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80042aa:	4770      	bx	lr

080042ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ac:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80042ae:	2800      	cmp	r0, #0
 80042b0:	db14      	blt.n	80042dc <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042b2:	0884      	lsrs	r4, r0, #2
 80042b4:	00a4      	lsls	r4, r4, #2
 80042b6:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <HAL_NVIC_SetPriority+0x5c>)
 80042b8:	469c      	mov	ip, r3
 80042ba:	4464      	add	r4, ip
 80042bc:	26c0      	movs	r6, #192	@ 0xc0
 80042be:	00b6      	lsls	r6, r6, #2
 80042c0:	59a5      	ldr	r5, [r4, r6]
 80042c2:	2203      	movs	r2, #3
 80042c4:	4002      	ands	r2, r0
 80042c6:	00d2      	lsls	r2, r2, #3
 80042c8:	23ff      	movs	r3, #255	@ 0xff
 80042ca:	0018      	movs	r0, r3
 80042cc:	4090      	lsls	r0, r2
 80042ce:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042d0:	0189      	lsls	r1, r1, #6
 80042d2:	400b      	ands	r3, r1
 80042d4:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042d6:	432b      	orrs	r3, r5
 80042d8:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80042da:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042dc:	230f      	movs	r3, #15
 80042de:	4003      	ands	r3, r0
 80042e0:	3b08      	subs	r3, #8
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4a09      	ldr	r2, [pc, #36]	@ (800430c <HAL_NVIC_SetPriority+0x60>)
 80042e8:	4694      	mov	ip, r2
 80042ea:	4463      	add	r3, ip
 80042ec:	69dc      	ldr	r4, [r3, #28]
 80042ee:	2203      	movs	r2, #3
 80042f0:	4010      	ands	r0, r2
 80042f2:	00c0      	lsls	r0, r0, #3
 80042f4:	32fc      	adds	r2, #252	@ 0xfc
 80042f6:	0015      	movs	r5, r2
 80042f8:	4085      	lsls	r5, r0
 80042fa:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042fc:	0189      	lsls	r1, r1, #6
 80042fe:	400a      	ands	r2, r1
 8004300:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004302:	4322      	orrs	r2, r4
 8004304:	61da      	str	r2, [r3, #28]
 8004306:	e7e8      	b.n	80042da <HAL_NVIC_SetPriority+0x2e>
 8004308:	e000e100 	.word	0xe000e100
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004310:	2800      	cmp	r0, #0
 8004312:	db05      	blt.n	8004320 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004314:	221f      	movs	r2, #31
 8004316:	4002      	ands	r2, r0
 8004318:	2301      	movs	r3, #1
 800431a:	4093      	lsls	r3, r2
 800431c:	4a01      	ldr	r2, [pc, #4]	@ (8004324 <HAL_NVIC_EnableIRQ+0x14>)
 800431e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004320:	4770      	bx	lr
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	e000e100 	.word	0xe000e100

08004328 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004328:	2800      	cmp	r0, #0
 800432a:	db0a      	blt.n	8004342 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800432c:	221f      	movs	r2, #31
 800432e:	4002      	ands	r2, r0
 8004330:	2301      	movs	r3, #1
 8004332:	4093      	lsls	r3, r2
 8004334:	4903      	ldr	r1, [pc, #12]	@ (8004344 <HAL_NVIC_DisableIRQ+0x1c>)
 8004336:	2280      	movs	r2, #128	@ 0x80
 8004338:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800433a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800433e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100

08004348 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004348:	3801      	subs	r0, #1
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	045b      	lsls	r3, r3, #17
 800434e:	4298      	cmp	r0, r3
 8004350:	d20f      	bcs.n	8004372 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004352:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <HAL_SYSTICK_Config+0x30>)
 8004354:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004356:	4809      	ldr	r0, [pc, #36]	@ (800437c <HAL_SYSTICK_Config+0x34>)
 8004358:	6a03      	ldr	r3, [r0, #32]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	21c0      	movs	r1, #192	@ 0xc0
 8004360:	0609      	lsls	r1, r1, #24
 8004362:	430b      	orrs	r3, r1
 8004364:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004366:	2300      	movs	r3, #0
 8004368:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800436a:	3307      	adds	r3, #7
 800436c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800436e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8004370:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004372:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8004374:	e7fc      	b.n	8004370 <HAL_SYSTICK_Config+0x28>
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	e000e010 	.word	0xe000e010
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004382:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004384:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8004386:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004388:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800438a:	2c00      	cmp	r4, #0
 800438c:	d002      	beq.n	8004394 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800438e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004390:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8004392:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004394:	4e0b      	ldr	r6, [pc, #44]	@ (80043c4 <DMA_SetConfig+0x44>)
 8004396:	6877      	ldr	r7, [r6, #4]
 8004398:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800439a:	241c      	movs	r4, #28
 800439c:	4025      	ands	r5, r4
 800439e:	3c1b      	subs	r4, #27
 80043a0:	40ac      	lsls	r4, r5
 80043a2:	433c      	orrs	r4, r7
 80043a4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043a6:	6804      	ldr	r4, [r0, #0]
 80043a8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043aa:	6883      	ldr	r3, [r0, #8]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d004      	beq.n	80043ba <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80043b0:	6803      	ldr	r3, [r0, #0]
 80043b2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80043b4:	6803      	ldr	r3, [r0, #0]
 80043b6:	60da      	str	r2, [r3, #12]
  }
}
 80043b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80043ba:	6803      	ldr	r3, [r0, #0]
 80043bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80043be:	6803      	ldr	r3, [r0, #0]
 80043c0:	60d9      	str	r1, [r3, #12]
 80043c2:	e7f9      	b.n	80043b8 <DMA_SetConfig+0x38>
 80043c4:	40020000 	.word	0x40020000

080043c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043c8:	b510      	push	{r4, lr}
 80043ca:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043cc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	4a08      	ldr	r2, [pc, #32]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80043d2:	4694      	mov	ip, r2
 80043d4:	4463      	add	r3, ip
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043da:	7800      	ldrb	r0, [r0, #0]
 80043dc:	3808      	subs	r0, #8
 80043de:	2114      	movs	r1, #20
 80043e0:	f7fb fe8e 	bl	8000100 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80043e6:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043e8:	231f      	movs	r3, #31
 80043ea:	4018      	ands	r0, r3
 80043ec:	3b1e      	subs	r3, #30
 80043ee:	4083      	lsls	r3, r0
 80043f0:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80043f2:	bd10      	pop	{r4, pc}
 80043f4:	10008200 	.word	0x10008200
 80043f8:	40020880 	.word	0x40020880

080043fc <HAL_DMA_Init>:
{
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8004400:	d055      	beq.n	80044ae <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004402:	6805      	ldr	r5, [r0, #0]
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <HAL_DMA_Init+0xb8>)
 8004406:	18e8      	adds	r0, r5, r3
 8004408:	2114      	movs	r1, #20
 800440a:	f7fb fe79 	bl	8000100 <__udivsi3>
 800440e:	0080      	lsls	r0, r0, #2
 8004410:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004412:	2325      	movs	r3, #37	@ 0x25
 8004414:	2202      	movs	r2, #2
 8004416:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	4a27      	ldr	r2, [pc, #156]	@ (80044b8 <HAL_DMA_Init+0xbc>)
 800441c:	4013      	ands	r3, r2
 800441e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004420:	6822      	ldr	r2, [r4, #0]
 8004422:	6811      	ldr	r1, [r2, #0]
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	68e0      	ldr	r0, [r4, #12]
 8004428:	4303      	orrs	r3, r0
 800442a:	6920      	ldr	r0, [r4, #16]
 800442c:	4303      	orrs	r3, r0
 800442e:	6960      	ldr	r0, [r4, #20]
 8004430:	4303      	orrs	r3, r0
 8004432:	69a0      	ldr	r0, [r4, #24]
 8004434:	4303      	orrs	r3, r0
 8004436:	69e0      	ldr	r0, [r4, #28]
 8004438:	4303      	orrs	r3, r0
 800443a:	6a20      	ldr	r0, [r4, #32]
 800443c:	4303      	orrs	r3, r0
 800443e:	430b      	orrs	r3, r1
 8004440:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004442:	0020      	movs	r0, r4
 8004444:	f7ff ffc0 	bl	80043c8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	01db      	lsls	r3, r3, #7
 800444c:	68a2      	ldr	r2, [r4, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d018      	beq.n	8004484 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004452:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004454:	6863      	ldr	r3, [r4, #4]
 8004456:	213f      	movs	r1, #63	@ 0x3f
 8004458:	400b      	ands	r3, r1
 800445a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800445c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800445e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004460:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	1e5a      	subs	r2, r3, #1
 8004466:	2a03      	cmp	r2, #3
 8004468:	d90f      	bls.n	800448a <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800446e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004470:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004472:	2300      	movs	r3, #0
 8004474:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004476:	2225      	movs	r2, #37	@ 0x25
 8004478:	2101      	movs	r1, #1
 800447a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800447c:	3a01      	subs	r2, #1
 800447e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004480:	2000      	movs	r0, #0
}
 8004482:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004484:	2300      	movs	r3, #0
 8004486:	6063      	str	r3, [r4, #4]
 8004488:	e7e3      	b.n	8004452 <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800448a:	223f      	movs	r2, #63	@ 0x3f
 800448c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800448e:	4a0b      	ldr	r2, [pc, #44]	@ (80044bc <HAL_DMA_Init+0xc0>)
 8004490:	189a      	adds	r2, r3, r2
 8004492:	0092      	lsls	r2, r2, #2
 8004494:	6522      	str	r2, [r4, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004496:	490a      	ldr	r1, [pc, #40]	@ (80044c0 <HAL_DMA_Init+0xc4>)
 8004498:	6561      	str	r1, [r4, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800449a:	3b01      	subs	r3, #1
 800449c:	2101      	movs	r1, #1
 800449e:	4099      	lsls	r1, r3
 80044a0:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80044a8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e7e1      	b.n	8004472 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80044ae:	2001      	movs	r0, #1
 80044b0:	e7e7      	b.n	8004482 <HAL_DMA_Init+0x86>
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	bffdfff8 	.word	0xbffdfff8
 80044b8:	ffff800f 	.word	0xffff800f
 80044bc:	1000823f 	.word	0x1000823f
 80044c0:	40020940 	.word	0x40020940

080044c4 <HAL_DMA_DeInit>:
{
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 80044c8:	d042      	beq.n	8004550 <HAL_DMA_DeInit+0x8c>
  __HAL_DMA_DISABLE(hdma);
 80044ca:	6802      	ldr	r2, [r0, #0]
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	2501      	movs	r5, #1
 80044d0:	43ab      	bics	r3, r5
 80044d2:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044d4:	6807      	ldr	r7, [r0, #0]
 80044d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004554 <HAL_DMA_DeInit+0x90>)
 80044d8:	18f8      	adds	r0, r7, r3
 80044da:	2114      	movs	r1, #20
 80044dc:	f7fb fe10 	bl	8000100 <__udivsi3>
 80044e0:	0080      	lsls	r0, r0, #2
 80044e2:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 80044e4:	2600      	movs	r6, #0
 80044e6:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80044e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <HAL_DMA_DeInit+0x94>)
 80044ea:	6851      	ldr	r1, [r2, #4]
 80044ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044ee:	201c      	movs	r0, #28
 80044f0:	4003      	ands	r3, r0
 80044f2:	409d      	lsls	r5, r3
 80044f4:	430d      	orrs	r5, r1
 80044f6:	6055      	str	r5, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044f8:	0020      	movs	r0, r4
 80044fa:	f7ff ff65 	bl	80043c8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80044fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004500:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004502:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004504:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004506:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	2a03      	cmp	r2, #3
 800450e:	d90e      	bls.n	800452e <HAL_DMA_DeInit+0x6a>
  hdma->DMAmuxRequestGen = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8004514:	6563      	str	r3, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004516:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->XferCpltCallback = NULL;
 8004518:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800451a:	6323      	str	r3, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800451c:	6363      	str	r3, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800451e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004520:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004522:	2225      	movs	r2, #37	@ 0x25
 8004524:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004526:	3a01      	subs	r2, #1
 8004528:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800452a:	2000      	movs	r0, #0
}
 800452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800452e:	223f      	movs	r2, #63	@ 0x3f
 8004530:	4013      	ands	r3, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004532:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <HAL_DMA_DeInit+0x98>)
 8004534:	189a      	adds	r2, r3, r2
 8004536:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004538:	4909      	ldr	r1, [pc, #36]	@ (8004560 <HAL_DMA_DeInit+0x9c>)
 800453a:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800453c:	3b01      	subs	r3, #1
 800453e:	2101      	movs	r1, #1
 8004540:	4099      	lsls	r1, r3
 8004542:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004548:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800454a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	e7df      	b.n	8004510 <HAL_DMA_DeInit+0x4c>
    return HAL_ERROR;
 8004550:	2001      	movs	r0, #1
 8004552:	e7eb      	b.n	800452c <HAL_DMA_DeInit+0x68>
 8004554:	bffdfff8 	.word	0xbffdfff8
 8004558:	40020000 	.word	0x40020000
 800455c:	1000823f 	.word	0x1000823f
 8004560:	40020940 	.word	0x40020940

08004564 <HAL_DMA_Start_IT>:
{
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004568:	2024      	movs	r0, #36	@ 0x24
 800456a:	5c20      	ldrb	r0, [r4, r0]
 800456c:	2801      	cmp	r0, #1
 800456e:	d045      	beq.n	80045fc <HAL_DMA_Start_IT+0x98>
 8004570:	2024      	movs	r0, #36	@ 0x24
 8004572:	2501      	movs	r5, #1
 8004574:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8004576:	3001      	adds	r0, #1
 8004578:	5c20      	ldrb	r0, [r4, r0]
 800457a:	2801      	cmp	r0, #1
 800457c:	d006      	beq.n	800458c <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800457e:	2380      	movs	r3, #128	@ 0x80
 8004580:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004582:	3b5c      	subs	r3, #92	@ 0x5c
 8004584:	2200      	movs	r2, #0
 8004586:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8004588:	2001      	movs	r0, #1
}
 800458a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800458c:	3024      	adds	r0, #36	@ 0x24
 800458e:	3501      	adds	r5, #1
 8004590:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004592:	2000      	movs	r0, #0
 8004594:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004596:	6825      	ldr	r5, [r4, #0]
 8004598:	6828      	ldr	r0, [r5, #0]
 800459a:	2601      	movs	r6, #1
 800459c:	43b0      	bics	r0, r6
 800459e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045a0:	0020      	movs	r0, r4
 80045a2:	f7ff feed 	bl	8004380 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80045a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	210e      	movs	r1, #14
 80045b2:	430b      	orrs	r3, r1
 80045b4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045b6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80045b8:	6813      	ldr	r3, [r2, #0]
 80045ba:	03db      	lsls	r3, r3, #15
 80045bc:	d504      	bpl.n	80045c8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045be:	6811      	ldr	r1, [r2, #0]
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80045c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	2280      	movs	r2, #128	@ 0x80
 80045d2:	0052      	lsls	r2, r2, #1
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	430b      	orrs	r3, r1
 80045e0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e2:	2000      	movs	r0, #0
 80045e4:	e7d1      	b.n	800458a <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	6813      	ldr	r3, [r2, #0]
 80045ea:	2104      	movs	r1, #4
 80045ec:	438b      	bics	r3, r1
 80045ee:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	3106      	adds	r1, #6
 80045f6:	430b      	orrs	r3, r1
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e7dc      	b.n	80045b6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80045fc:	2002      	movs	r0, #2
 80045fe:	e7c4      	b.n	800458a <HAL_DMA_Start_IT+0x26>

08004600 <HAL_DMA_Abort>:
{
 8004600:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8004602:	2800      	cmp	r0, #0
 8004604:	d036      	beq.n	8004674 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004606:	2325      	movs	r3, #37	@ 0x25
 8004608:	5cc3      	ldrb	r3, [r0, r3]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d006      	beq.n	800461c <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800460e:	2304      	movs	r3, #4
 8004610:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004612:	3320      	adds	r3, #32
 8004614:	2200      	movs	r2, #0
 8004616:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8004618:	2001      	movs	r0, #1
}
 800461a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800461c:	6802      	ldr	r2, [r0, #0]
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	210e      	movs	r1, #14
 8004622:	438b      	bics	r3, r1
 8004624:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004626:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004628:	6813      	ldr	r3, [r2, #0]
 800462a:	4913      	ldr	r1, [pc, #76]	@ (8004678 <HAL_DMA_Abort+0x78>)
 800462c:	400b      	ands	r3, r1
 800462e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004630:	6801      	ldr	r1, [r0, #0]
 8004632:	680a      	ldr	r2, [r1, #0]
 8004634:	2301      	movs	r3, #1
 8004636:	439a      	bics	r2, r3
 8004638:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800463a:	4910      	ldr	r1, [pc, #64]	@ (800467c <HAL_DMA_Abort+0x7c>)
 800463c:	684c      	ldr	r4, [r1, #4]
 800463e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004640:	251c      	movs	r5, #28
 8004642:	402a      	ands	r2, r5
 8004644:	4093      	lsls	r3, r2
 8004646:	4323      	orrs	r3, r4
 8004648:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800464a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800464c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800464e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004650:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4907      	ldr	r1, [pc, #28]	@ (8004678 <HAL_DMA_Abort+0x78>)
 800465a:	400a      	ands	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800465e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004660:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004662:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004664:	2325      	movs	r3, #37	@ 0x25
 8004666:	2201      	movs	r2, #1
 8004668:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800466a:	3b01      	subs	r3, #1
 800466c:	2200      	movs	r2, #0
 800466e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
 8004672:	e7d2      	b.n	800461a <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
 8004676:	e7d0      	b.n	800461a <HAL_DMA_Abort+0x1a>
 8004678:	fffffeff 	.word	0xfffffeff
 800467c:	40020000 	.word	0x40020000

08004680 <HAL_DMA_Abort_IT>:
{
 8004680:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004682:	2325      	movs	r3, #37	@ 0x25
 8004684:	5cc3      	ldrb	r3, [r0, r3]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d003      	beq.n	8004692 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800468a:	2304      	movs	r3, #4
 800468c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800468e:	2001      	movs	r0, #1
}
 8004690:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004692:	6802      	ldr	r2, [r0, #0]
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	210e      	movs	r1, #14
 8004698:	438b      	bics	r3, r1
 800469a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800469c:	6801      	ldr	r1, [r0, #0]
 800469e:	680a      	ldr	r2, [r1, #0]
 80046a0:	2301      	movs	r3, #1
 80046a2:	439a      	bics	r2, r3
 80046a4:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046a6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80046a8:	680a      	ldr	r2, [r1, #0]
 80046aa:	4c13      	ldr	r4, [pc, #76]	@ (80046f8 <HAL_DMA_Abort_IT+0x78>)
 80046ac:	4022      	ands	r2, r4
 80046ae:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80046b0:	4912      	ldr	r1, [pc, #72]	@ (80046fc <HAL_DMA_Abort_IT+0x7c>)
 80046b2:	684c      	ldr	r4, [r1, #4]
 80046b4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80046b6:	251c      	movs	r5, #28
 80046b8:	402a      	ands	r2, r5
 80046ba:	4093      	lsls	r3, r2
 80046bc:	4323      	orrs	r3, r4
 80046be:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046c0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80046c2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80046c4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80046c6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d006      	beq.n	80046da <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	490a      	ldr	r1, [pc, #40]	@ (80046f8 <HAL_DMA_Abort_IT+0x78>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80046d6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80046d8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80046da:	2325      	movs	r3, #37	@ 0x25
 80046dc:	2201      	movs	r2, #1
 80046de:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80046e0:	3b01      	subs	r3, #1
 80046e2:	2200      	movs	r2, #0
 80046e4:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80046e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 80046ec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2000      	movs	r0, #0
 80046f0:	e7ce      	b.n	8004690 <HAL_DMA_Abort_IT+0x10>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e7cc      	b.n	8004690 <HAL_DMA_Abort_IT+0x10>
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	fffffeff 	.word	0xfffffeff
 80046fc:	40020000 	.word	0x40020000

08004700 <HAL_DMA_IRQHandler>:
{
 8004700:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8004702:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_DMA_IRQHandler+0xc8>)
 8004704:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004706:	6804      	ldr	r4, [r0, #0]
 8004708:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800470a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800470c:	221c      	movs	r2, #28
 800470e:	4013      	ands	r3, r2
 8004710:	3a18      	subs	r2, #24
 8004712:	409a      	lsls	r2, r3
 8004714:	4211      	tst	r1, r2
 8004716:	d016      	beq.n	8004746 <HAL_DMA_IRQHandler+0x46>
 8004718:	076a      	lsls	r2, r5, #29
 800471a:	d514      	bpl.n	8004746 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	d403      	bmi.n	800472a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	2204      	movs	r2, #4
 8004726:	4393      	bics	r3, r2
 8004728:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800472a:	4927      	ldr	r1, [pc, #156]	@ (80047c8 <HAL_DMA_IRQHandler+0xc8>)
 800472c:	684c      	ldr	r4, [r1, #4]
 800472e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004730:	231c      	movs	r3, #28
 8004732:	401a      	ands	r2, r3
 8004734:	3b18      	subs	r3, #24
 8004736:	4093      	lsls	r3, r2
 8004738:	4323      	orrs	r3, r4
 800473a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800473c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800473e:	2b00      	cmp	r3, #0
 8004740:	d000      	beq.n	8004744 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8004742:	4798      	blx	r3
}
 8004744:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004746:	2202      	movs	r2, #2
 8004748:	409a      	lsls	r2, r3
 800474a:	4211      	tst	r1, r2
 800474c:	d01c      	beq.n	8004788 <HAL_DMA_IRQHandler+0x88>
 800474e:	07aa      	lsls	r2, r5, #30
 8004750:	d51a      	bpl.n	8004788 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	069b      	lsls	r3, r3, #26
 8004756:	d406      	bmi.n	8004766 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	220a      	movs	r2, #10
 800475c:	4393      	bics	r3, r2
 800475e:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004760:	2325      	movs	r3, #37	@ 0x25
 8004762:	3a09      	subs	r2, #9
 8004764:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004766:	4918      	ldr	r1, [pc, #96]	@ (80047c8 <HAL_DMA_IRQHandler+0xc8>)
 8004768:	684c      	ldr	r4, [r1, #4]
 800476a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800476c:	231c      	movs	r3, #28
 800476e:	401a      	ands	r2, r3
 8004770:	3b1a      	subs	r3, #26
 8004772:	4093      	lsls	r3, r2
 8004774:	4323      	orrs	r3, r4
 8004776:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8004778:	2324      	movs	r3, #36	@ 0x24
 800477a:	2200      	movs	r2, #0
 800477c:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800477e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0df      	beq.n	8004744 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8004784:	4798      	blx	r3
 8004786:	e7dd      	b.n	8004744 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004788:	2208      	movs	r2, #8
 800478a:	409a      	lsls	r2, r3
 800478c:	4211      	tst	r1, r2
 800478e:	d0d9      	beq.n	8004744 <HAL_DMA_IRQHandler+0x44>
 8004790:	072d      	lsls	r5, r5, #28
 8004792:	d5d7      	bpl.n	8004744 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	220e      	movs	r2, #14
 8004798:	4393      	bics	r3, r2
 800479a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800479c:	490a      	ldr	r1, [pc, #40]	@ (80047c8 <HAL_DMA_IRQHandler+0xc8>)
 800479e:	684c      	ldr	r4, [r1, #4]
 80047a0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80047a2:	231c      	movs	r3, #28
 80047a4:	401a      	ands	r2, r3
 80047a6:	3b1b      	subs	r3, #27
 80047a8:	001d      	movs	r5, r3
 80047aa:	4095      	lsls	r5, r2
 80047ac:	002a      	movs	r2, r5
 80047ae:	4322      	orrs	r2, r4
 80047b0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80047b4:	2225      	movs	r2, #37	@ 0x25
 80047b6:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80047b8:	3323      	adds	r3, #35	@ 0x23
 80047ba:	2200      	movs	r2, #0
 80047bc:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80047be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0bf      	beq.n	8004744 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80047c4:	4798      	blx	r3
  return;
 80047c6:	e7bd      	b.n	8004744 <HAL_DMA_IRQHandler+0x44>
 80047c8:	40020000 	.word	0x40020000

080047cc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80047cc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
}
 80047ce:	4770      	bx	lr

080047d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d2:	46de      	mov	lr, fp
 80047d4:	4657      	mov	r7, sl
 80047d6:	464e      	mov	r6, r9
 80047d8:	4645      	mov	r5, r8
 80047da:	b5e0      	push	{r5, r6, r7, lr}
 80047dc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047de:	680f      	ldr	r7, [r1, #0]
 80047e0:	2f00      	cmp	r7, #0
 80047e2:	d100      	bne.n	80047e6 <HAL_GPIO_Init+0x16>
 80047e4:	e0d1      	b.n	800498a <HAL_GPIO_Init+0x1ba>
 80047e6:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80047e8:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047ea:	2401      	movs	r4, #1
 80047ec:	46a0      	mov	r8, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047ee:	3402      	adds	r4, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047f0:	4d69      	ldr	r5, [pc, #420]	@ (8004998 <HAL_GPIO_Init+0x1c8>)
 80047f2:	46ab      	mov	fp, r5
 80047f4:	e052      	b.n	800489c <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR;
 80047f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047f8:	0025      	movs	r5, r4
 80047fa:	4095      	lsls	r5, r2
 80047fc:	43af      	bics	r7, r5
 80047fe:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004800:	68cf      	ldr	r7, [r1, #12]
 8004802:	4097      	lsls	r7, r2
 8004804:	464d      	mov	r5, r9
 8004806:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8004808:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800480a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480c:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800480e:	684e      	ldr	r6, [r1, #4]
 8004810:	0936      	lsrs	r6, r6, #4
 8004812:	4645      	mov	r5, r8
 8004814:	402e      	ands	r6, r5
 8004816:	409e      	lsls	r6, r3
 8004818:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800481a:	6046      	str	r6, [r0, #4]
 800481c:	e04a      	b.n	80048b4 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800481e:	2600      	movs	r6, #0
 8004820:	4655      	mov	r5, sl
 8004822:	40ae      	lsls	r6, r5
 8004824:	464d      	mov	r5, r9
 8004826:	432e      	orrs	r6, r5
        EXTI->EXTICR[position >> 2u] = temp;
 8004828:	663e      	str	r6, [r7, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800482a:	465d      	mov	r5, fp
 800482c:	682d      	ldr	r5, [r5, #0]
 800482e:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
 8004830:	4665      	mov	r5, ip
 8004832:	43ed      	mvns	r5, r5
 8004834:	9501      	str	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004836:	684d      	ldr	r5, [r1, #4]
 8004838:	2680      	movs	r6, #128	@ 0x80
 800483a:	0376      	lsls	r6, r6, #13
 800483c:	4235      	tst	r5, r6
 800483e:	d000      	beq.n	8004842 <HAL_GPIO_Init+0x72>
 8004840:	e094      	b.n	800496c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8004842:	4656      	mov	r6, sl
 8004844:	9d01      	ldr	r5, [sp, #4]
 8004846:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004848:	465d      	mov	r5, fp
 800484a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800484c:	686d      	ldr	r5, [r5, #4]
 800484e:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004850:	684d      	ldr	r5, [r1, #4]
 8004852:	2680      	movs	r6, #128	@ 0x80
 8004854:	03b6      	lsls	r6, r6, #14
 8004856:	4235      	tst	r5, r6
 8004858:	d000      	beq.n	800485c <HAL_GPIO_Init+0x8c>
 800485a:	e08b      	b.n	8004974 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 800485c:	4656      	mov	r6, sl
 800485e:	9d01      	ldr	r5, [sp, #4]
 8004860:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004862:	465d      	mov	r5, fp
 8004864:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004866:	2684      	movs	r6, #132	@ 0x84
 8004868:	59ae      	ldr	r6, [r5, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800486a:	684d      	ldr	r5, [r1, #4]
 800486c:	03ad      	lsls	r5, r5, #14
 800486e:	d500      	bpl.n	8004872 <HAL_GPIO_Init+0xa2>
 8004870:	e084      	b.n	800497c <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8004872:	9d01      	ldr	r5, [sp, #4]
 8004874:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004876:	2584      	movs	r5, #132	@ 0x84
 8004878:	465f      	mov	r7, fp
 800487a:	517e      	str	r6, [r7, r5]

        temp = EXTI->IMR1;
 800487c:	2680      	movs	r6, #128	@ 0x80
 800487e:	59be      	ldr	r6, [r7, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004880:	684d      	ldr	r5, [r1, #4]
 8004882:	03ed      	lsls	r5, r5, #15
 8004884:	d47d      	bmi.n	8004982 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8004886:	9d01      	ldr	r5, [sp, #4]
 8004888:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800488a:	2780      	movs	r7, #128	@ 0x80
 800488c:	465d      	mov	r5, fp
 800488e:	51ee      	str	r6, [r5, r7]
      }
    }

    position++;
 8004890:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004892:	680f      	ldr	r7, [r1, #0]
 8004894:	3202      	adds	r2, #2
 8004896:	003e      	movs	r6, r7
 8004898:	40de      	lsrs	r6, r3
 800489a:	d076      	beq.n	800498a <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800489c:	4646      	mov	r6, r8
 800489e:	409e      	lsls	r6, r3
 80048a0:	003d      	movs	r5, r7
 80048a2:	4035      	ands	r5, r6
 80048a4:	46ac      	mov	ip, r5
    if (iocurrent != 0x00u)
 80048a6:	4237      	tst	r7, r6
 80048a8:	d0f2      	beq.n	8004890 <HAL_GPIO_Init+0xc0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048aa:	684f      	ldr	r7, [r1, #4]
 80048ac:	4027      	ands	r7, r4
 80048ae:	3f01      	subs	r7, #1
 80048b0:	2f01      	cmp	r7, #1
 80048b2:	d9a0      	bls.n	80047f6 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b4:	684e      	ldr	r6, [r1, #4]
 80048b6:	4026      	ands	r6, r4
 80048b8:	2e03      	cmp	r6, #3
 80048ba:	d022      	beq.n	8004902 <HAL_GPIO_Init+0x132>
        temp = GPIOx->PUPDR;
 80048bc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048be:	0026      	movs	r6, r4
 80048c0:	4096      	lsls	r6, r2
 80048c2:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048c4:	688e      	ldr	r6, [r1, #8]
 80048c6:	4096      	lsls	r6, r2
 80048c8:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80048ca:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048cc:	684e      	ldr	r6, [r1, #4]
 80048ce:	4026      	ands	r6, r4
 80048d0:	2e02      	cmp	r6, #2
 80048d2:	d116      	bne.n	8004902 <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
 80048d4:	08de      	lsrs	r6, r3, #3
 80048d6:	00b6      	lsls	r6, r6, #2
 80048d8:	1985      	adds	r5, r0, r6
 80048da:	9501      	str	r5, [sp, #4]
 80048dc:	6a2d      	ldr	r5, [r5, #32]
 80048de:	46aa      	mov	sl, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048e0:	2707      	movs	r7, #7
 80048e2:	401f      	ands	r7, r3
 80048e4:	00bf      	lsls	r7, r7, #2
 80048e6:	250f      	movs	r5, #15
 80048e8:	40bd      	lsls	r5, r7
 80048ea:	46a9      	mov	r9, r5
 80048ec:	4655      	mov	r5, sl
 80048ee:	464e      	mov	r6, r9
 80048f0:	43b5      	bics	r5, r6
 80048f2:	46aa      	mov	sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048f4:	690d      	ldr	r5, [r1, #16]
 80048f6:	40bd      	lsls	r5, r7
 80048f8:	002f      	movs	r7, r5
 80048fa:	4655      	mov	r5, sl
 80048fc:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80048fe:	9d01      	ldr	r5, [sp, #4]
 8004900:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 8004902:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004904:	0026      	movs	r6, r4
 8004906:	4096      	lsls	r6, r2
 8004908:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800490a:	684e      	ldr	r6, [r1, #4]
 800490c:	4026      	ands	r6, r4
 800490e:	4096      	lsls	r6, r2
 8004910:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8004912:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004914:	684e      	ldr	r6, [r1, #4]
 8004916:	25c0      	movs	r5, #192	@ 0xc0
 8004918:	02ad      	lsls	r5, r5, #10
 800491a:	422e      	tst	r6, r5
 800491c:	d0b8      	beq.n	8004890 <HAL_GPIO_Init+0xc0>
        temp = EXTI->EXTICR[position >> 2u];
 800491e:	089f      	lsrs	r7, r3, #2
 8004920:	00bf      	lsls	r7, r7, #2
 8004922:	4d1d      	ldr	r5, [pc, #116]	@ (8004998 <HAL_GPIO_Init+0x1c8>)
 8004924:	46a9      	mov	r9, r5
 8004926:	444f      	add	r7, r9
 8004928:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 800492a:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800492c:	0025      	movs	r5, r4
 800492e:	401d      	ands	r5, r3
 8004930:	00ed      	lsls	r5, r5, #3
 8004932:	46aa      	mov	sl, r5
 8004934:	250f      	movs	r5, #15
 8004936:	4656      	mov	r6, sl
 8004938:	40b5      	lsls	r5, r6
 800493a:	9e01      	ldr	r6, [sp, #4]
 800493c:	43ae      	bics	r6, r5
 800493e:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004940:	25a0      	movs	r5, #160	@ 0xa0
 8004942:	05ed      	lsls	r5, r5, #23
 8004944:	42a8      	cmp	r0, r5
 8004946:	d100      	bne.n	800494a <HAL_GPIO_Init+0x17a>
 8004948:	e769      	b.n	800481e <HAL_GPIO_Init+0x4e>
 800494a:	4e14      	ldr	r6, [pc, #80]	@ (800499c <HAL_GPIO_Init+0x1cc>)
 800494c:	42b0      	cmp	r0, r6
 800494e:	d009      	beq.n	8004964 <HAL_GPIO_Init+0x194>
 8004950:	4e13      	ldr	r6, [pc, #76]	@ (80049a0 <HAL_GPIO_Init+0x1d0>)
 8004952:	42b0      	cmp	r0, r6
 8004954:	d008      	beq.n	8004968 <HAL_GPIO_Init+0x198>
 8004956:	4d13      	ldr	r5, [pc, #76]	@ (80049a4 <HAL_GPIO_Init+0x1d4>)
 8004958:	1946      	adds	r6, r0, r5
 800495a:	1e75      	subs	r5, r6, #1
 800495c:	41ae      	sbcs	r6, r5
 800495e:	0076      	lsls	r6, r6, #1
 8004960:	3603      	adds	r6, #3
 8004962:	e75d      	b.n	8004820 <HAL_GPIO_Init+0x50>
 8004964:	2601      	movs	r6, #1
 8004966:	e75b      	b.n	8004820 <HAL_GPIO_Init+0x50>
 8004968:	2602      	movs	r6, #2
 800496a:	e759      	b.n	8004820 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 800496c:	4665      	mov	r5, ip
 800496e:	4656      	mov	r6, sl
 8004970:	432e      	orrs	r6, r5
 8004972:	e769      	b.n	8004848 <HAL_GPIO_Init+0x78>
          temp |= iocurrent;
 8004974:	4665      	mov	r5, ip
 8004976:	4656      	mov	r6, sl
 8004978:	432e      	orrs	r6, r5
 800497a:	e772      	b.n	8004862 <HAL_GPIO_Init+0x92>
          temp |= iocurrent;
 800497c:	4665      	mov	r5, ip
 800497e:	432e      	orrs	r6, r5
 8004980:	e779      	b.n	8004876 <HAL_GPIO_Init+0xa6>
          temp |= iocurrent;
 8004982:	4665      	mov	r5, ip
 8004984:	4335      	orrs	r5, r6
 8004986:	002e      	movs	r6, r5
 8004988:	e77f      	b.n	800488a <HAL_GPIO_Init+0xba>
  }
}
 800498a:	b003      	add	sp, #12
 800498c:	bcf0      	pop	{r4, r5, r6, r7}
 800498e:	46bb      	mov	fp, r7
 8004990:	46b2      	mov	sl, r6
 8004992:	46a9      	mov	r9, r5
 8004994:	46a0      	mov	r8, r4
 8004996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004998:	40021800 	.word	0x40021800
 800499c:	50000400 	.word	0x50000400
 80049a0:	50000800 	.word	0x50000800
 80049a4:	affff400 	.word	0xaffff400

080049a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049aa:	46de      	mov	lr, fp
 80049ac:	4657      	mov	r7, sl
 80049ae:	464e      	mov	r6, r9
 80049b0:	4645      	mov	r5, r8
 80049b2:	b5e0      	push	{r5, r6, r7, lr}
 80049b4:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049b6:	2900      	cmp	r1, #0
 80049b8:	d06d      	beq.n	8004a96 <HAL_GPIO_DeInit+0xee>
  uint32_t position = 0x00u;
 80049ba:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049bc:	2201      	movs	r2, #1
 80049be:	4693      	mov	fp, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80049c0:	3202      	adds	r2, #2
 80049c2:	4692      	mov	sl, r2
 80049c4:	320c      	adds	r2, #12
 80049c6:	4691      	mov	r9, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80049c8:	4a36      	ldr	r2, [pc, #216]	@ (8004aa4 <HAL_GPIO_DeInit+0xfc>)
 80049ca:	1882      	adds	r2, r0, r2
 80049cc:	1e54      	subs	r4, r2, #1
 80049ce:	41a2      	sbcs	r2, r4
 80049d0:	4252      	negs	r2, r2
 80049d2:	9201      	str	r2, [sp, #4]
 80049d4:	9100      	str	r1, [sp, #0]
 80049d6:	e022      	b.n	8004a1e <HAL_GPIO_DeInit+0x76>
 80049d8:	2500      	movs	r5, #0
 80049da:	4641      	mov	r1, r8
 80049dc:	408d      	lsls	r5, r1
 80049de:	42b5      	cmp	r5, r6
 80049e0:	d045      	beq.n	8004a6e <HAL_GPIO_DeInit+0xc6>
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80049e2:	6804      	ldr	r4, [r0, #0]
 80049e4:	005d      	lsls	r5, r3, #1
 80049e6:	4656      	mov	r6, sl
 80049e8:	40ae      	lsls	r6, r5
 80049ea:	4334      	orrs	r4, r6
 80049ec:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80049ee:	08dc      	lsrs	r4, r3, #3
 80049f0:	00a4      	lsls	r4, r4, #2
 80049f2:	1904      	adds	r4, r0, r4
 80049f4:	6a27      	ldr	r7, [r4, #32]
 80049f6:	2507      	movs	r5, #7
 80049f8:	401d      	ands	r5, r3
 80049fa:	00ad      	lsls	r5, r5, #2
 80049fc:	4649      	mov	r1, r9
 80049fe:	40a9      	lsls	r1, r5
 8004a00:	438f      	bics	r7, r1
 8004a02:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a04:	6884      	ldr	r4, [r0, #8]
 8004a06:	43b4      	bics	r4, r6
 8004a08:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a0a:	6844      	ldr	r4, [r0, #4]
 8004a0c:	4394      	bics	r4, r2
 8004a0e:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a10:	68c2      	ldr	r2, [r0, #12]
 8004a12:	43b2      	bics	r2, r6
 8004a14:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004a16:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004a18:	9a00      	ldr	r2, [sp, #0]
 8004a1a:	40da      	lsrs	r2, r3
 8004a1c:	d03b      	beq.n	8004a96 <HAL_GPIO_DeInit+0xee>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a1e:	465a      	mov	r2, fp
 8004a20:	409a      	lsls	r2, r3
 8004a22:	9900      	ldr	r1, [sp, #0]
 8004a24:	000f      	movs	r7, r1
 8004a26:	4017      	ands	r7, r2
    if (iocurrent != 0x00u)
 8004a28:	4211      	tst	r1, r2
 8004a2a:	d0f4      	beq.n	8004a16 <HAL_GPIO_DeInit+0x6e>
      tmp = EXTI->EXTICR[position >> 2u];
 8004a2c:	089c      	lsrs	r4, r3, #2
 8004a2e:	00a4      	lsls	r4, r4, #2
 8004a30:	491d      	ldr	r1, [pc, #116]	@ (8004aa8 <HAL_GPIO_DeInit+0x100>)
 8004a32:	468c      	mov	ip, r1
 8004a34:	4464      	add	r4, ip
 8004a36:	6e26      	ldr	r6, [r4, #96]	@ 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004a38:	4655      	mov	r5, sl
 8004a3a:	401d      	ands	r5, r3
 8004a3c:	00e9      	lsls	r1, r5, #3
 8004a3e:	4688      	mov	r8, r1
 8004a40:	464d      	mov	r5, r9
 8004a42:	408d      	lsls	r5, r1
 8004a44:	46ac      	mov	ip, r5
 8004a46:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004a48:	21a0      	movs	r1, #160	@ 0xa0
 8004a4a:	05c9      	lsls	r1, r1, #23
 8004a4c:	4288      	cmp	r0, r1
 8004a4e:	d0c3      	beq.n	80049d8 <HAL_GPIO_DeInit+0x30>
 8004a50:	4d16      	ldr	r5, [pc, #88]	@ (8004aac <HAL_GPIO_DeInit+0x104>)
 8004a52:	42a8      	cmp	r0, r5
 8004a54:	d007      	beq.n	8004a66 <HAL_GPIO_DeInit+0xbe>
 8004a56:	4d16      	ldr	r5, [pc, #88]	@ (8004ab0 <HAL_GPIO_DeInit+0x108>)
 8004a58:	42a8      	cmp	r0, r5
 8004a5a:	d006      	beq.n	8004a6a <HAL_GPIO_DeInit+0xc2>
 8004a5c:	2502      	movs	r5, #2
 8004a5e:	9901      	ldr	r1, [sp, #4]
 8004a60:	400d      	ands	r5, r1
 8004a62:	3503      	adds	r5, #3
 8004a64:	e7b9      	b.n	80049da <HAL_GPIO_DeInit+0x32>
 8004a66:	2501      	movs	r5, #1
 8004a68:	e7b7      	b.n	80049da <HAL_GPIO_DeInit+0x32>
 8004a6a:	2502      	movs	r5, #2
 8004a6c:	e7b5      	b.n	80049da <HAL_GPIO_DeInit+0x32>
        EXTI->IMR1 &= ~(iocurrent);
 8004a6e:	4d0e      	ldr	r5, [pc, #56]	@ (8004aa8 <HAL_GPIO_DeInit+0x100>)
 8004a70:	2180      	movs	r1, #128	@ 0x80
 8004a72:	586e      	ldr	r6, [r5, r1]
 8004a74:	43be      	bics	r6, r7
 8004a76:	506e      	str	r6, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 8004a78:	3104      	adds	r1, #4
 8004a7a:	586e      	ldr	r6, [r5, r1]
 8004a7c:	43be      	bics	r6, r7
 8004a7e:	506e      	str	r6, [r5, r1]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a80:	686e      	ldr	r6, [r5, #4]
 8004a82:	43be      	bics	r6, r7
 8004a84:	606e      	str	r6, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004a86:	682e      	ldr	r6, [r5, #0]
 8004a88:	43be      	bics	r6, r7
 8004a8a:	602e      	str	r6, [r5, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004a8c:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8004a8e:	4661      	mov	r1, ip
 8004a90:	438d      	bics	r5, r1
 8004a92:	6625      	str	r5, [r4, #96]	@ 0x60
 8004a94:	e7a5      	b.n	80049e2 <HAL_GPIO_DeInit+0x3a>
  }
}
 8004a96:	b003      	add	sp, #12
 8004a98:	bcf0      	pop	{r4, r5, r6, r7}
 8004a9a:	46bb      	mov	fp, r7
 8004a9c:	46b2      	mov	sl, r6
 8004a9e:	46a9      	mov	r9, r5
 8004aa0:	46a0      	mov	r8, r4
 8004aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa4:	affff400 	.word	0xaffff400
 8004aa8:	40021800 	.word	0x40021800
 8004aac:	50000400 	.word	0x50000400
 8004ab0:	50000800 	.word	0x50000800

08004ab4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ab8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aba:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004abc:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8004abe:	e7fc      	b.n	8004aba <HAL_GPIO_WritePin+0x6>

08004ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ac4:	4913      	ldr	r1, [pc, #76]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	4813      	ldr	r0, [pc, #76]	@ (8004b18 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8004aca:	4003      	ands	r3, r0
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004ad4:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d000      	beq.n	8004adc <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8004ada:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004adc:	4b0f      	ldr	r3, [pc, #60]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	0058      	lsls	r0, r3, #1
 8004ae2:	18c0      	adds	r0, r0, r3
 8004ae4:	0040      	lsls	r0, r0, #1
 8004ae6:	490e      	ldr	r1, [pc, #56]	@ (8004b20 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8004ae8:	f7fb fb0a 	bl	8000100 <__udivsi3>
 8004aec:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aee:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	055b      	lsls	r3, r3, #21
 8004af4:	d50a      	bpl.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0x4c>
 8004af6:	4907      	ldr	r1, [pc, #28]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004af8:	2280      	movs	r2, #128	@ 0x80
 8004afa:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8004afc:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004afe:	694b      	ldr	r3, [r1, #20]
 8004b00:	4213      	tst	r3, r2
 8004b02:	d005      	beq.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d1f9      	bne.n	8004afc <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8004b08:	2003      	movs	r0, #3
 8004b0a:	e7e6      	b.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e7e4      	b.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x1a>
 8004b10:	2000      	movs	r0, #0
 8004b12:	e7e2      	b.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x1a>
 8004b14:	40007000 	.word	0x40007000
 8004b18:	fffff9ff 	.word	0xfffff9ff
 8004b1c:	20000004 	.word	0x20000004
 8004b20:	000f4240 	.word	0x000f4240

08004b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b26:	46ce      	mov	lr, r9
 8004b28:	4647      	mov	r7, r8
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b30:	d100      	bne.n	8004b34 <HAL_RCC_OscConfig+0x10>
 8004b32:	e23e      	b.n	8004fb2 <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	07db      	lsls	r3, r3, #31
 8004b38:	d538      	bpl.n	8004bac <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3a:	4ac7      	ldr	r2, [pc, #796]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b3c:	6891      	ldr	r1, [r2, #8]
 8004b3e:	2338      	movs	r3, #56	@ 0x38
 8004b40:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b42:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d026      	beq.n	8004b96 <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d027      	beq.n	8004b9c <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	6863      	ldr	r3, [r4, #4]
 8004b4e:	2280      	movs	r2, #128	@ 0x80
 8004b50:	0252      	lsls	r2, r2, #9
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d07a      	beq.n	8004c4c <HAL_RCC_OscConfig+0x128>
 8004b56:	22a0      	movs	r2, #160	@ 0xa0
 8004b58:	02d2      	lsls	r2, r2, #11
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d07d      	beq.n	8004c5a <HAL_RCC_OscConfig+0x136>
 8004b5e:	4bbe      	ldr	r3, [pc, #760]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	49be      	ldr	r1, [pc, #760]	@ (8004e5c <HAL_RCC_OscConfig+0x338>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	49bd      	ldr	r1, [pc, #756]	@ (8004e60 <HAL_RCC_OscConfig+0x33c>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b70:	6863      	ldr	r3, [r4, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d07d      	beq.n	8004c72 <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe fe3b 	bl	80037f0 <HAL_GetTick>
 8004b7a:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7c:	4fb6      	ldr	r7, [pc, #728]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b7e:	2680      	movs	r6, #128	@ 0x80
 8004b80:	02b6      	lsls	r6, r6, #10
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	4233      	tst	r3, r6
 8004b86:	d111      	bne.n	8004bac <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fe fe32 	bl	80037f0 <HAL_GetTick>
 8004b8c:	1b40      	subs	r0, r0, r5
 8004b8e:	2864      	cmp	r0, #100	@ 0x64
 8004b90:	d9f7      	bls.n	8004b82 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8004b92:	2003      	movs	r0, #3
 8004b94:	e20e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b96:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b98:	0792      	lsls	r2, r2, #30
 8004b9a:	d1d7      	bne.n	8004b4c <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	4bae      	ldr	r3, [pc, #696]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	039b      	lsls	r3, r3, #14
 8004ba2:	d503      	bpl.n	8004bac <HAL_RCC_OscConfig+0x88>
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d100      	bne.n	8004bac <HAL_RCC_OscConfig+0x88>
 8004baa:	e208      	b.n	8004fbe <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	079b      	lsls	r3, r3, #30
 8004bb0:	d52a      	bpl.n	8004c08 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb2:	4aa9      	ldr	r2, [pc, #676]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bb4:	6891      	ldr	r1, [r2, #8]
 8004bb6:	2338      	movs	r3, #56	@ 0x38
 8004bb8:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bba:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d068      	beq.n	8004c92 <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d16b      	bne.n	8004c9c <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc4:	4ba4      	ldr	r3, [pc, #656]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	055b      	lsls	r3, r3, #21
 8004bca:	d500      	bpl.n	8004bce <HAL_RCC_OscConfig+0xaa>
 8004bcc:	e21a      	b.n	8005004 <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bce:	49a2      	ldr	r1, [pc, #648]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004bd0:	684a      	ldr	r2, [r1, #4]
 8004bd2:	6963      	ldr	r3, [r4, #20]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	48a3      	ldr	r0, [pc, #652]	@ (8004e64 <HAL_RCC_OscConfig+0x340>)
 8004bd8:	4002      	ands	r2, r0
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bde:	4a9e      	ldr	r2, [pc, #632]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004be0:	6813      	ldr	r3, [r2, #0]
 8004be2:	49a1      	ldr	r1, [pc, #644]	@ (8004e68 <HAL_RCC_OscConfig+0x344>)
 8004be4:	400b      	ands	r3, r1
 8004be6:	6921      	ldr	r1, [r4, #16]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004bec:	6813      	ldr	r3, [r2, #0]
 8004bee:	499f      	ldr	r1, [pc, #636]	@ (8004e6c <HAL_RCC_OscConfig+0x348>)
 8004bf0:	049b      	lsls	r3, r3, #18
 8004bf2:	0f5b      	lsrs	r3, r3, #29
 8004bf4:	4a9e      	ldr	r2, [pc, #632]	@ (8004e70 <HAL_RCC_OscConfig+0x34c>)
 8004bf6:	40da      	lsrs	r2, r3
 8004bf8:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bfa:	4b9e      	ldr	r3, [pc, #632]	@ (8004e74 <HAL_RCC_OscConfig+0x350>)
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	f7fe fdaf 	bl	8003760 <HAL_InitTick>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d000      	beq.n	8004c08 <HAL_RCC_OscConfig+0xe4>
 8004c06:	e1dc      	b.n	8004fc2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	071b      	lsls	r3, r3, #28
 8004c0c:	d400      	bmi.n	8004c10 <HAL_RCC_OscConfig+0xec>
 8004c0e:	e08b      	b.n	8004d28 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c10:	4b91      	ldr	r3, [pc, #580]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	2338      	movs	r3, #56	@ 0x38
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b18      	cmp	r3, #24
 8004c1a:	d07d      	beq.n	8004d18 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c1c:	69a3      	ldr	r3, [r4, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d100      	bne.n	8004c24 <HAL_RCC_OscConfig+0x100>
 8004c22:	e0c4      	b.n	8004dae <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c24:	4a8c      	ldr	r2, [pc, #560]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c26:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004c28:	2101      	movs	r1, #1
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fddf 	bl	80037f0 <HAL_GetTick>
 8004c32:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c34:	4f88      	ldr	r7, [pc, #544]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c36:	2602      	movs	r6, #2
 8004c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c3a:	421e      	tst	r6, r3
 8004c3c:	d174      	bne.n	8004d28 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7fe fdd7 	bl	80037f0 <HAL_GetTick>
 8004c42:	1b40      	subs	r0, r0, r5
 8004c44:	2802      	cmp	r0, #2
 8004c46:	d9f7      	bls.n	8004c38 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 8004c48:	2003      	movs	r0, #3
 8004c4a:	e1b3      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4c:	4a82      	ldr	r2, [pc, #520]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c4e:	6811      	ldr	r1, [r2, #0]
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	025b      	lsls	r3, r3, #9
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e78a      	b.n	8004b70 <HAL_RCC_OscConfig+0x4c>
 8004c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c5c:	6819      	ldr	r1, [r3, #0]
 8004c5e:	2280      	movs	r2, #128	@ 0x80
 8004c60:	02d2      	lsls	r2, r2, #11
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	2280      	movs	r2, #128	@ 0x80
 8004c6a:	0252      	lsls	r2, r2, #9
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	e77e      	b.n	8004b70 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004c72:	f7fe fdbd 	bl	80037f0 <HAL_GetTick>
 8004c76:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c78:	4f77      	ldr	r7, [pc, #476]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004c7a:	2680      	movs	r6, #128	@ 0x80
 8004c7c:	02b6      	lsls	r6, r6, #10
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	4233      	tst	r3, r6
 8004c82:	d093      	beq.n	8004bac <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c84:	f7fe fdb4 	bl	80037f0 <HAL_GetTick>
 8004c88:	1b40      	subs	r0, r0, r5
 8004c8a:	2864      	cmp	r0, #100	@ 0x64
 8004c8c:	d9f7      	bls.n	8004c7e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8004c8e:	2003      	movs	r0, #3
 8004c90:	e190      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c92:	3b0d      	subs	r3, #13
 8004c94:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d100      	bne.n	8004c9c <HAL_RCC_OscConfig+0x178>
 8004c9a:	e1a3      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c9c:	68e3      	ldr	r3, [r4, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d024      	beq.n	8004cec <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ca2:	4a6d      	ldr	r2, [pc, #436]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	4970      	ldr	r1, [pc, #448]	@ (8004e68 <HAL_RCC_OscConfig+0x344>)
 8004ca8:	400b      	ands	r3, r1
 8004caa:	6921      	ldr	r1, [r4, #16]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004cb0:	6811      	ldr	r1, [r2, #0]
 8004cb2:	2380      	movs	r3, #128	@ 0x80
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cba:	f7fe fd99 	bl	80037f0 <HAL_GetTick>
 8004cbe:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cc0:	4f65      	ldr	r7, [pc, #404]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cc2:	2680      	movs	r6, #128	@ 0x80
 8004cc4:	00f6      	lsls	r6, r6, #3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	4233      	tst	r3, r6
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fe fd90 	bl	80037f0 <HAL_GetTick>
 8004cd0:	1b40      	subs	r0, r0, r5
 8004cd2:	2802      	cmp	r0, #2
 8004cd4:	d9f7      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 8004cd6:	2003      	movs	r0, #3
 8004cd8:	e16c      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	495f      	ldr	r1, [pc, #380]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cdc:	684a      	ldr	r2, [r1, #4]
 8004cde:	6963      	ldr	r3, [r4, #20]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	4860      	ldr	r0, [pc, #384]	@ (8004e64 <HAL_RCC_OscConfig+0x340>)
 8004ce4:	4002      	ands	r2, r0
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
 8004cea:	e78d      	b.n	8004c08 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8004cec:	4a5a      	ldr	r2, [pc, #360]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cee:	6813      	ldr	r3, [r2, #0]
 8004cf0:	4961      	ldr	r1, [pc, #388]	@ (8004e78 <HAL_RCC_OscConfig+0x354>)
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cf6:	f7fe fd7b 	bl	80037f0 <HAL_GetTick>
 8004cfa:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cfc:	4f56      	ldr	r7, [pc, #344]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004cfe:	2680      	movs	r6, #128	@ 0x80
 8004d00:	00f6      	lsls	r6, r6, #3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	4233      	tst	r3, r6
 8004d06:	d100      	bne.n	8004d0a <HAL_RCC_OscConfig+0x1e6>
 8004d08:	e77e      	b.n	8004c08 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0a:	f7fe fd71 	bl	80037f0 <HAL_GetTick>
 8004d0e:	1b40      	subs	r0, r0, r5
 8004d10:	2802      	cmp	r0, #2
 8004d12:	d9f6      	bls.n	8004d02 <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 8004d14:	2003      	movs	r0, #3
 8004d16:	e14d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d18:	4b4f      	ldr	r3, [pc, #316]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1c:	079b      	lsls	r3, r3, #30
 8004d1e:	d503      	bpl.n	8004d28 <HAL_RCC_OscConfig+0x204>
 8004d20:	69a3      	ldr	r3, [r4, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d100      	bne.n	8004d28 <HAL_RCC_OscConfig+0x204>
 8004d26:	e14e      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	075b      	lsls	r3, r3, #29
 8004d2c:	d400      	bmi.n	8004d30 <HAL_RCC_OscConfig+0x20c>
 8004d2e:	e0ac      	b.n	8004e8a <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d30:	4b49      	ldr	r3, [pc, #292]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	2338      	movs	r3, #56	@ 0x38
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d04c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d3c:	4b46      	ldr	r3, [pc, #280]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004d40:	2200      	movs	r2, #0
 8004d42:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	d40b      	bmi.n	8004d60 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d48:	4b43      	ldr	r3, [pc, #268]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4c:	2180      	movs	r1, #128	@ 0x80
 8004d4e:	0549      	lsls	r1, r1, #21
 8004d50:	430a      	orrs	r2, r1
 8004d52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d56:	400b      	ands	r3, r1
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d60:	4b46      	ldr	r3, [pc, #280]	@ (8004e7c <HAL_RCC_OscConfig+0x358>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	05db      	lsls	r3, r3, #23
 8004d66:	d53f      	bpl.n	8004de8 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d68:	68a3      	ldr	r3, [r4, #8]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d052      	beq.n	8004e14 <HAL_RCC_OscConfig+0x2f0>
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d056      	beq.n	8004e20 <HAL_RCC_OscConfig+0x2fc>
 8004d72:	4b39      	ldr	r3, [pc, #228]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d76:	2101      	movs	r1, #1
 8004d78:	438a      	bics	r2, r1
 8004d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d7e:	3103      	adds	r1, #3
 8004d80:	438a      	bics	r2, r1
 8004d82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d84:	68a3      	ldr	r3, [r4, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d054      	beq.n	8004e34 <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fe fd31 	bl	80037f0 <HAL_GetTick>
 8004d8e:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d90:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004d92:	4698      	mov	r8, r3
 8004d94:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	4d3a      	ldr	r5, [pc, #232]	@ (8004e80 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d98:	4643      	mov	r3, r8
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9c:	421f      	tst	r7, r3
 8004d9e:	d171      	bne.n	8004e84 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fe fd26 	bl	80037f0 <HAL_GetTick>
 8004da4:	1b80      	subs	r0, r0, r6
 8004da6:	42a8      	cmp	r0, r5
 8004da8:	d9f6      	bls.n	8004d98 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8004daa:	2003      	movs	r0, #3
 8004dac:	e102      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 8004dae:	4a2a      	ldr	r2, [pc, #168]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004db0:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004db2:	2101      	movs	r1, #1
 8004db4:	438b      	bics	r3, r1
 8004db6:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004db8:	f7fe fd1a 	bl	80037f0 <HAL_GetTick>
 8004dbc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dbe:	4f26      	ldr	r7, [pc, #152]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004dc0:	2602      	movs	r6, #2
 8004dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dc4:	421e      	tst	r6, r3
 8004dc6:	d0af      	beq.n	8004d28 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fe fd12 	bl	80037f0 <HAL_GetTick>
 8004dcc:	1b40      	subs	r0, r0, r5
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d9f7      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 8004dd2:	2003      	movs	r0, #3
 8004dd4:	e0ee      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004dd6:	4b20      	ldr	r3, [pc, #128]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dda:	079b      	lsls	r3, r3, #30
 8004ddc:	d555      	bpl.n	8004e8a <HAL_RCC_OscConfig+0x366>
 8004dde:	68a3      	ldr	r3, [r4, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d152      	bne.n	8004e8a <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 8004de4:	2001      	movs	r0, #1
 8004de6:	e0e5      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de8:	4a24      	ldr	r2, [pc, #144]	@ (8004e7c <HAL_RCC_OscConfig+0x358>)
 8004dea:	6811      	ldr	r1, [r2, #0]
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004df4:	f7fe fcfc 	bl	80037f0 <HAL_GetTick>
 8004df8:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfa:	4d20      	ldr	r5, [pc, #128]	@ (8004e7c <HAL_RCC_OscConfig+0x358>)
 8004dfc:	2780      	movs	r7, #128	@ 0x80
 8004dfe:	007f      	lsls	r7, r7, #1
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	423b      	tst	r3, r7
 8004e04:	d1b0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fe fcf3 	bl	80037f0 <HAL_GetTick>
 8004e0a:	1b80      	subs	r0, r0, r6
 8004e0c:	2802      	cmp	r0, #2
 8004e0e:	d9f7      	bls.n	8004e00 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8004e10:	2003      	movs	r0, #3
 8004e12:	e0cf      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e14:	4a10      	ldr	r2, [pc, #64]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004e16:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004e18:	2101      	movs	r1, #1
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004e1e:	e7b1      	b.n	8004d84 <HAL_RCC_OscConfig+0x260>
 8004e20:	4b0d      	ldr	r3, [pc, #52]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004e22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e24:	2104      	movs	r1, #4
 8004e26:	430a      	orrs	r2, r1
 8004e28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e2c:	3903      	subs	r1, #3
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e32:	e7a7      	b.n	8004d84 <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fe fcdc 	bl	80037f0 <HAL_GetTick>
 8004e38:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e3a:	4b07      	ldr	r3, [pc, #28]	@ (8004e58 <HAL_RCC_OscConfig+0x334>)
 8004e3c:	4698      	mov	r8, r3
 8004e3e:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	4d0f      	ldr	r5, [pc, #60]	@ (8004e80 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e42:	4643      	mov	r3, r8
 8004e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e46:	421f      	tst	r7, r3
 8004e48:	d01c      	beq.n	8004e84 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4a:	f7fe fcd1 	bl	80037f0 <HAL_GetTick>
 8004e4e:	1b80      	subs	r0, r0, r6
 8004e50:	42a8      	cmp	r0, r5
 8004e52:	d9f6      	bls.n	8004e42 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004e54:	2003      	movs	r0, #3
 8004e56:	e0ad      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	fffeffff 	.word	0xfffeffff
 8004e60:	fffbffff 	.word	0xfffbffff
 8004e64:	ffff80ff 	.word	0xffff80ff
 8004e68:	ffffc7ff 	.word	0xffffc7ff
 8004e6c:	20000004 	.word	0x20000004
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	2000000c 	.word	0x2000000c
 8004e78:	fffffeff 	.word	0xfffffeff
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e84:	464b      	mov	r3, r9
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d021      	beq.n	8004ece <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e8a:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004e8c:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d100      	bne.n	8004e94 <HAL_RCC_OscConfig+0x370>
 8004e92:	e08f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e94:	4a62      	ldr	r2, [pc, #392]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004e96:	6891      	ldr	r1, [r2, #8]
 8004e98:	2238      	movs	r2, #56	@ 0x38
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	2a10      	cmp	r2, #16
 8004e9e:	d064      	beq.n	8004f6a <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d01a      	beq.n	8004eda <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4a5e      	ldr	r2, [pc, #376]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	495e      	ldr	r1, [pc, #376]	@ (8005024 <HAL_RCC_OscConfig+0x500>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004eae:	f7fe fc9f 	bl	80037f0 <HAL_GetTick>
 8004eb2:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb4:	4e5a      	ldr	r6, [pc, #360]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004eb6:	2580      	movs	r5, #128	@ 0x80
 8004eb8:	04ad      	lsls	r5, r5, #18
 8004eba:	6833      	ldr	r3, [r6, #0]
 8004ebc:	422b      	tst	r3, r5
 8004ebe:	d04d      	beq.n	8004f5c <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fe fc96 	bl	80037f0 <HAL_GetTick>
 8004ec4:	1b00      	subs	r0, r0, r4
 8004ec6:	2802      	cmp	r0, #2
 8004ec8:	d9f7      	bls.n	8004eba <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 8004eca:	2003      	movs	r0, #3
 8004ecc:	e072      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ece:	4a54      	ldr	r2, [pc, #336]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004ed0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8004ed2:	4955      	ldr	r1, [pc, #340]	@ (8005028 <HAL_RCC_OscConfig+0x504>)
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004ed8:	e7d7      	b.n	8004e8a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4a51      	ldr	r2, [pc, #324]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	4951      	ldr	r1, [pc, #324]	@ (8005024 <HAL_RCC_OscConfig+0x500>)
 8004ee0:	400b      	ands	r3, r1
 8004ee2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fc84 	bl	80037f0 <HAL_GetTick>
 8004ee8:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eea:	4f4d      	ldr	r7, [pc, #308]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004eec:	2680      	movs	r6, #128	@ 0x80
 8004eee:	04b6      	lsls	r6, r6, #18
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4233      	tst	r3, r6
 8004ef4:	d006      	beq.n	8004f04 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fe fc7b 	bl	80037f0 <HAL_GetTick>
 8004efa:	1b40      	subs	r0, r0, r5
 8004efc:	2802      	cmp	r0, #2
 8004efe:	d9f7      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8004f00:	2003      	movs	r0, #3
 8004f02:	e057      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f04:	4a46      	ldr	r2, [pc, #280]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004f06:	68d1      	ldr	r1, [r2, #12]
 8004f08:	6a23      	ldr	r3, [r4, #32]
 8004f0a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004f0c:	4303      	orrs	r3, r0
 8004f0e:	4847      	ldr	r0, [pc, #284]	@ (800502c <HAL_RCC_OscConfig+0x508>)
 8004f10:	4001      	ands	r1, r0
 8004f12:	430b      	orrs	r3, r1
 8004f14:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f16:	430b      	orrs	r3, r1
 8004f18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004f1e:	0209      	lsls	r1, r1, #8
 8004f20:	430b      	orrs	r3, r1
 8004f22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004f24:	6811      	ldr	r1, [r2, #0]
 8004f26:	2380      	movs	r3, #128	@ 0x80
 8004f28:	045b      	lsls	r3, r3, #17
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f2e:	68d1      	ldr	r1, [r2, #12]
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	055b      	lsls	r3, r3, #21
 8004f34:	430b      	orrs	r3, r1
 8004f36:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004f38:	f7fe fc5a 	bl	80037f0 <HAL_GetTick>
 8004f3c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	4e38      	ldr	r6, [pc, #224]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004f40:	2580      	movs	r5, #128	@ 0x80
 8004f42:	04ad      	lsls	r5, r5, #18
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	422b      	tst	r3, r5
 8004f48:	d106      	bne.n	8004f58 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4a:	f7fe fc51 	bl	80037f0 <HAL_GetTick>
 8004f4e:	1b00      	subs	r0, r0, r4
 8004f50:	2802      	cmp	r0, #2
 8004f52:	d9f7      	bls.n	8004f44 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8004f54:	2003      	movs	r0, #3
 8004f56:	e02d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8004f58:	2000      	movs	r0, #0
 8004f5a:	e02b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004f5c:	4a30      	ldr	r2, [pc, #192]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004f5e:	68d3      	ldr	r3, [r2, #12]
 8004f60:	4933      	ldr	r1, [pc, #204]	@ (8005030 <HAL_RCC_OscConfig+0x50c>)
 8004f62:	400b      	ands	r3, r1
 8004f64:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004f66:	2000      	movs	r0, #0
 8004f68:	e024      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d02d      	beq.n	8004fca <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 8004f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004f70:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	2303      	movs	r3, #3
 8004f74:	4013      	ands	r3, r2
 8004f76:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8004f78:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7a:	428b      	cmp	r3, r1
 8004f7c:	d11a      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f7e:	2370      	movs	r3, #112	@ 0x70
 8004f80:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004f84:	428b      	cmp	r3, r1
 8004f86:	d115      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f88:	21fe      	movs	r1, #254	@ 0xfe
 8004f8a:	01c9      	lsls	r1, r1, #7
 8004f8c:	4011      	ands	r1, r2
 8004f8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004f90:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f92:	4299      	cmp	r1, r3
 8004f94:	d10e      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f96:	23f8      	movs	r3, #248	@ 0xf8
 8004f98:	039b      	lsls	r3, r3, #14
 8004f9a:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f9e:	428b      	cmp	r3, r1
 8004fa0:	d108      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fa2:	0f53      	lsrs	r3, r2, #29
 8004fa4:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fa6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	4193      	sbcs	r3, r2
 8004fae:	b2d8      	uxtb	r0, r3
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
    return HAL_ERROR;
 8004fb2:	2001      	movs	r0, #1
}
 8004fb4:	b003      	add	sp, #12
 8004fb6:	bcc0      	pop	{r6, r7}
 8004fb8:	46b9      	mov	r9, r7
 8004fba:	46b0      	mov	r8, r6
 8004fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	e7f8      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	e7f6      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	e7f4      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8004fca:	2001      	movs	r0, #1
 8004fcc:	e7f2      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8004fce:	2001      	movs	r0, #1
 8004fd0:	e7f0      	b.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4913      	ldr	r1, [pc, #76]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004fd4:	684a      	ldr	r2, [r1, #4]
 8004fd6:	6963      	ldr	r3, [r4, #20]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	4816      	ldr	r0, [pc, #88]	@ (8005034 <HAL_RCC_OscConfig+0x510>)
 8004fdc:	4002      	ands	r2, r0
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fe2:	e60a      	b.n	8004bfa <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	055b      	lsls	r3, r3, #21
 8004fea:	d5f2      	bpl.n	8004fd2 <HAL_RCC_OscConfig+0x4ae>
 8004fec:	68e3      	ldr	r3, [r4, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ed      	beq.n	8004fce <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff2:	490b      	ldr	r1, [pc, #44]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 8004ff4:	684a      	ldr	r2, [r1, #4]
 8004ff6:	6963      	ldr	r3, [r4, #20]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	480e      	ldr	r0, [pc, #56]	@ (8005034 <HAL_RCC_OscConfig+0x510>)
 8004ffc:	4002      	ands	r2, r0
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005002:	e5fa      	b.n	8004bfa <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005004:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8005006:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0d3      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500c:	4904      	ldr	r1, [pc, #16]	@ (8005020 <HAL_RCC_OscConfig+0x4fc>)
 800500e:	684a      	ldr	r2, [r1, #4]
 8005010:	6963      	ldr	r3, [r4, #20]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	4807      	ldr	r0, [pc, #28]	@ (8005034 <HAL_RCC_OscConfig+0x510>)
 8005016:	4002      	ands	r2, r0
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800501c:	e5df      	b.n	8004bde <HAL_RCC_OscConfig+0xba>
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	40021000 	.word	0x40021000
 8005024:	feffffff 	.word	0xfeffffff
 8005028:	efffffff 	.word	0xefffffff
 800502c:	1fc1808c 	.word	0x1fc1808c
 8005030:	effefffc 	.word	0xeffefffc
 8005034:	ffff80ff 	.word	0xffff80ff

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2238      	movs	r2, #56	@ 0x38
 8005040:	421a      	tst	r2, r3
 8005042:	d106      	bne.n	8005052 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005044:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	049b      	lsls	r3, r3, #18
 800504a:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800504c:	4825      	ldr	r0, [pc, #148]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0xac>)
 800504e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8005050:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005052:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	2338      	movs	r3, #56	@ 0x38
 8005058:	4013      	ands	r3, r2
 800505a:	2b08      	cmp	r3, #8
 800505c:	d03a      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0x9c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800505e:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	2338      	movs	r3, #56	@ 0x38
 8005064:	4013      	ands	r3, r2
 8005066:	2b10      	cmp	r3, #16
 8005068:	d014      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800506a:	4b1d      	ldr	r3, [pc, #116]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	2338      	movs	r3, #56	@ 0x38
 8005070:	4013      	ands	r3, r2
 8005072:	2b20      	cmp	r3, #32
 8005074:	d030      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2038      	movs	r0, #56	@ 0x38
 800507c:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 800507e:	3818      	subs	r0, #24
 8005080:	1e43      	subs	r3, r0, #1
 8005082:	4198      	sbcs	r0, r3
 8005084:	4240      	negs	r0, r0
 8005086:	4b18      	ldr	r3, [pc, #96]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005088:	4018      	ands	r0, r3
 800508a:	23fa      	movs	r3, #250	@ 0xfa
 800508c:	01db      	lsls	r3, r3, #7
 800508e:	469c      	mov	ip, r3
 8005090:	4460      	add	r0, ip
 8005092:	e7dd      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005094:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005096:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005098:	68d1      	ldr	r1, [r2, #12]
 800509a:	0649      	lsls	r1, r1, #25
 800509c:	0f49      	lsrs	r1, r1, #29
 800509e:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80050a0:	43db      	mvns	r3, r3
    switch (pllsource)
 80050a2:	079b      	lsls	r3, r3, #30
 80050a4:	d00e      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050a8:	68dc      	ldr	r4, [r3, #12]
 80050aa:	0464      	lsls	r4, r4, #17
 80050ac:	0e64      	lsrs	r4, r4, #25
 80050ae:	480d      	ldr	r0, [pc, #52]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0xac>)
 80050b0:	f7fb f826 	bl	8000100 <__udivsi3>
 80050b4:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80050b6:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80050b8:	68d9      	ldr	r1, [r3, #12]
 80050ba:	0f49      	lsrs	r1, r1, #29
 80050bc:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80050be:	f7fb f81f 	bl	8000100 <__udivsi3>
 80050c2:	e7c5      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c4:	68d4      	ldr	r4, [r2, #12]
 80050c6:	0464      	lsls	r4, r4, #17
 80050c8:	0e64      	lsrs	r4, r4, #25
 80050ca:	4808      	ldr	r0, [pc, #32]	@ (80050ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80050cc:	f7fb f818 	bl	8000100 <__udivsi3>
 80050d0:	4360      	muls	r0, r4
        break;
 80050d2:	e7f0      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = HSE_VALUE;
 80050d4:	4805      	ldr	r0, [pc, #20]	@ (80050ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80050d6:	e7bb      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80050d8:	2080      	movs	r0, #128	@ 0x80
 80050da:	0200      	lsls	r0, r0, #8
 80050dc:	e7b8      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x18>
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	40021000 	.word	0x40021000
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	ffff8300 	.word	0xffff8300
 80050ec:	007a1200 	.word	0x007a1200

080050f0 <HAL_RCC_ClockConfig>:
{
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	46ce      	mov	lr, r9
 80050f4:	4647      	mov	r7, r8
 80050f6:	b580      	push	{r7, lr}
 80050f8:	0004      	movs	r4, r0
 80050fa:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d100      	bne.n	8005102 <HAL_RCC_ClockConfig+0x12>
 8005100:	e0b6      	b.n	8005270 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005102:	4b5d      	ldr	r3, [pc, #372]	@ (8005278 <HAL_RCC_ClockConfig+0x188>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2307      	movs	r3, #7
 8005108:	4013      	ands	r3, r2
 800510a:	428b      	cmp	r3, r1
 800510c:	d321      	bcc.n	8005152 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	079a      	lsls	r2, r3, #30
 8005112:	d50e      	bpl.n	8005132 <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	075b      	lsls	r3, r3, #29
 8005116:	d505      	bpl.n	8005124 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005118:	4a58      	ldr	r2, [pc, #352]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 800511a:	6891      	ldr	r1, [r2, #8]
 800511c:	23e0      	movs	r3, #224	@ 0xe0
 800511e:	01db      	lsls	r3, r3, #7
 8005120:	430b      	orrs	r3, r1
 8005122:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005124:	4a55      	ldr	r2, [pc, #340]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 8005126:	6893      	ldr	r3, [r2, #8]
 8005128:	4955      	ldr	r1, [pc, #340]	@ (8005280 <HAL_RCC_ClockConfig+0x190>)
 800512a:	400b      	ands	r3, r1
 800512c:	68a1      	ldr	r1, [r4, #8]
 800512e:	430b      	orrs	r3, r1
 8005130:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	07db      	lsls	r3, r3, #31
 8005136:	d55b      	bpl.n	80051f0 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005138:	6863      	ldr	r3, [r4, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d023      	beq.n	8005186 <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513e:	2b02      	cmp	r3, #2
 8005140:	d042      	beq.n	80051c8 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005142:	2b00      	cmp	r3, #0
 8005144:	d146      	bne.n	80051d4 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005146:	4a4d      	ldr	r2, [pc, #308]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	0552      	lsls	r2, r2, #21
 800514c:	d420      	bmi.n	8005190 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 800514e:	2001      	movs	r0, #1
 8005150:	e070      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4a49      	ldr	r2, [pc, #292]	@ (8005278 <HAL_RCC_ClockConfig+0x188>)
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	2107      	movs	r1, #7
 8005158:	438b      	bics	r3, r1
 800515a:	432b      	orrs	r3, r5
 800515c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800515e:	f7fe fb47 	bl	80037f0 <HAL_GetTick>
 8005162:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005164:	4b44      	ldr	r3, [pc, #272]	@ (8005278 <HAL_RCC_ClockConfig+0x188>)
 8005166:	4698      	mov	r8, r3
 8005168:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516a:	4b46      	ldr	r3, [pc, #280]	@ (8005284 <HAL_RCC_ClockConfig+0x194>)
 800516c:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800516e:	4643      	mov	r3, r8
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	403b      	ands	r3, r7
 8005174:	42ab      	cmp	r3, r5
 8005176:	d0ca      	beq.n	800510e <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fe fb3a 	bl	80037f0 <HAL_GetTick>
 800517c:	1b80      	subs	r0, r0, r6
 800517e:	4548      	cmp	r0, r9
 8005180:	d9f5      	bls.n	800516e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8005182:	2003      	movs	r0, #3
 8005184:	e056      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005186:	4a3d      	ldr	r2, [pc, #244]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	0392      	lsls	r2, r2, #14
 800518c:	d400      	bmi.n	8005190 <HAL_RCC_ClockConfig+0xa0>
 800518e:	e071      	b.n	8005274 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005190:	493a      	ldr	r1, [pc, #232]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 8005192:	688a      	ldr	r2, [r1, #8]
 8005194:	2007      	movs	r0, #7
 8005196:	4382      	bics	r2, r0
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800519c:	f7fe fb28 	bl	80037f0 <HAL_GetTick>
 80051a0:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	4b36      	ldr	r3, [pc, #216]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 80051a4:	4698      	mov	r8, r3
 80051a6:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a8:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <HAL_RCC_ClockConfig+0x194>)
 80051aa:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ac:	4643      	mov	r3, r8
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	403a      	ands	r2, r7
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d01a      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ba:	f7fe fb19 	bl	80037f0 <HAL_GetTick>
 80051be:	1b80      	subs	r0, r0, r6
 80051c0:	4548      	cmp	r0, r9
 80051c2:	d9f3      	bls.n	80051ac <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80051c4:	2003      	movs	r0, #3
 80051c6:	e035      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c8:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	0192      	lsls	r2, r2, #6
 80051ce:	d4df      	bmi.n	8005190 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80051d0:	2001      	movs	r0, #1
 80051d2:	e02f      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d8:	4a28      	ldr	r2, [pc, #160]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 80051da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051dc:	0792      	lsls	r2, r2, #30
 80051de:	d4d7      	bmi.n	8005190 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80051e0:	2001      	movs	r0, #1
 80051e2:	e027      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e4:	4a25      	ldr	r2, [pc, #148]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 80051e6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80051e8:	0792      	lsls	r2, r2, #30
 80051ea:	d4d1      	bmi.n	8005190 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80051ec:	2001      	movs	r0, #1
 80051ee:	e021      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051f0:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <HAL_RCC_ClockConfig+0x188>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2307      	movs	r3, #7
 80051f6:	4013      	ands	r3, r2
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	d81f      	bhi.n	800523c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	075b      	lsls	r3, r3, #29
 8005200:	d506      	bpl.n	8005210 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005202:	4a1e      	ldr	r2, [pc, #120]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 8005204:	6893      	ldr	r3, [r2, #8]
 8005206:	4920      	ldr	r1, [pc, #128]	@ (8005288 <HAL_RCC_ClockConfig+0x198>)
 8005208:	400b      	ands	r3, r1
 800520a:	68e1      	ldr	r1, [r4, #12]
 800520c:	430b      	orrs	r3, r1
 800520e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005210:	f7ff ff12 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005214:	4b19      	ldr	r3, [pc, #100]	@ (800527c <HAL_RCC_ClockConfig+0x18c>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	491c      	ldr	r1, [pc, #112]	@ (800528c <HAL_RCC_ClockConfig+0x19c>)
 800521a:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <HAL_RCC_ClockConfig+0x1a0>)
 800521c:	051b      	lsls	r3, r3, #20
 800521e:	0f1b      	lsrs	r3, r3, #28
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	589b      	ldr	r3, [r3, r2]
 8005224:	221f      	movs	r2, #31
 8005226:	4013      	ands	r3, r2
 8005228:	40d8      	lsrs	r0, r3
 800522a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800522c:	4b19      	ldr	r3, [pc, #100]	@ (8005294 <HAL_RCC_ClockConfig+0x1a4>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	f7fe fa96 	bl	8003760 <HAL_InitTick>
}
 8005234:	bcc0      	pop	{r6, r7}
 8005236:	46b9      	mov	r9, r7
 8005238:	46b0      	mov	r8, r6
 800523a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523c:	4a0e      	ldr	r2, [pc, #56]	@ (8005278 <HAL_RCC_ClockConfig+0x188>)
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	2107      	movs	r1, #7
 8005242:	438b      	bics	r3, r1
 8005244:	432b      	orrs	r3, r5
 8005246:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005248:	f7fe fad2 	bl	80037f0 <HAL_GetTick>
 800524c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800524e:	4b0a      	ldr	r3, [pc, #40]	@ (8005278 <HAL_RCC_ClockConfig+0x188>)
 8005250:	4698      	mov	r8, r3
 8005252:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <HAL_RCC_ClockConfig+0x194>)
 8005256:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005258:	4643      	mov	r3, r8
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	403b      	ands	r3, r7
 800525e:	42ab      	cmp	r3, r5
 8005260:	d0cc      	beq.n	80051fc <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005262:	f7fe fac5 	bl	80037f0 <HAL_GetTick>
 8005266:	1b80      	subs	r0, r0, r6
 8005268:	4548      	cmp	r0, r9
 800526a:	d9f5      	bls.n	8005258 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 800526c:	2003      	movs	r0, #3
 800526e:	e7e1      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8005270:	2001      	movs	r0, #1
 8005272:	e7df      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8005274:	2001      	movs	r0, #1
 8005276:	e7dd      	b.n	8005234 <HAL_RCC_ClockConfig+0x144>
 8005278:	40022000 	.word	0x40022000
 800527c:	40021000 	.word	0x40021000
 8005280:	fffff0ff 	.word	0xfffff0ff
 8005284:	00001388 	.word	0x00001388
 8005288:	ffff8fff 	.word	0xffff8fff
 800528c:	20000004 	.word	0x20000004
 8005290:	08007074 	.word	0x08007074
 8005294:	2000000c 	.word	0x2000000c

08005298 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800529a:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800529c:	4a06      	ldr	r2, [pc, #24]	@ (80052b8 <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800529e:	4907      	ldr	r1, [pc, #28]	@ (80052bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052a0:	045b      	lsls	r3, r3, #17
 80052a2:	0f5b      	lsrs	r3, r3, #29
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	585b      	ldr	r3, [r3, r1]
 80052a8:	211f      	movs	r1, #31
 80052aa:	400b      	ands	r3, r1
 80052ac:	6810      	ldr	r0, [r2, #0]
 80052ae:	40d8      	lsrs	r0, r3
}
 80052b0:	4770      	bx	lr
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	40021000 	.word	0x40021000
 80052b8:	20000004 	.word	0x20000004
 80052bc:	08007054 	.word	0x08007054

080052c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c2:	46d6      	mov	lr, sl
 80052c4:	464f      	mov	r7, r9
 80052c6:	4646      	mov	r6, r8
 80052c8:	b5c0      	push	{r6, r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052ce:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052d0:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052d2:	039b      	lsls	r3, r3, #14
 80052d4:	d52a      	bpl.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d6:	4b57      	ldr	r3, [pc, #348]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80052d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80052da:	2200      	movs	r2, #0
 80052dc:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	d40b      	bmi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	4b54      	ldr	r3, [pc, #336]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80052e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	0549      	lsls	r1, r1, #21
 80052ea:	430a      	orrs	r2, r1
 80052ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f0:	400b      	ands	r3, r1
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80052f6:	2301      	movs	r3, #1
 80052f8:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052fa:	4a4f      	ldr	r2, [pc, #316]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80052fc:	6811      	ldr	r1, [r2, #0]
 80052fe:	2380      	movs	r3, #128	@ 0x80
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	430b      	orrs	r3, r1
 8005304:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005306:	f7fe fa73 	bl	80037f0 <HAL_GetTick>
 800530a:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800530c:	4f4a      	ldr	r7, [pc, #296]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800530e:	2680      	movs	r6, #128	@ 0x80
 8005310:	0076      	lsls	r6, r6, #1
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	4233      	tst	r3, r6
 8005316:	d000      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8005318:	e07a      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531a:	f7fe fa69 	bl	80037f0 <HAL_GetTick>
 800531e:	1b40      	subs	r0, r0, r5
 8005320:	2802      	cmp	r0, #2
 8005322:	d9f6      	bls.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8005324:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005326:	4653      	mov	r3, sl
 8005328:	2b01      	cmp	r3, #1
 800532a:	d05d      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	07db      	lsls	r3, r3, #31
 8005330:	d506      	bpl.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005332:	4a40      	ldr	r2, [pc, #256]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005334:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005336:	2103      	movs	r1, #3
 8005338:	438b      	bics	r3, r1
 800533a:	6861      	ldr	r1, [r4, #4]
 800533c:	430b      	orrs	r3, r1
 800533e:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	069b      	lsls	r3, r3, #26
 8005344:	d506      	bpl.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005346:	4a3b      	ldr	r2, [pc, #236]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005348:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800534a:	493c      	ldr	r1, [pc, #240]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800534c:	400b      	ands	r3, r1
 800534e:	68a1      	ldr	r1, [r4, #8]
 8005350:	430b      	orrs	r3, r1
 8005352:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	045b      	lsls	r3, r3, #17
 8005358:	d50b      	bpl.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800535a:	4a36      	ldr	r2, [pc, #216]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800535c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	6921      	ldr	r1, [r4, #16]
 8005364:	430b      	orrs	r3, r1
 8005366:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	05db      	lsls	r3, r3, #23
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d040      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x134>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	051b      	lsls	r3, r3, #20
 8005376:	d50b      	bpl.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005378:	4a2e      	ldr	r2, [pc, #184]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800537a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800537c:	4930      	ldr	r1, [pc, #192]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800537e:	400b      	ands	r3, r1
 8005380:	68e1      	ldr	r1, [r4, #12]
 8005382:	430b      	orrs	r3, r1
 8005384:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	01db      	lsls	r3, r3, #7
 800538a:	68e2      	ldr	r2, [r4, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d038      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x142>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8005390:	b002      	add	sp, #8
 8005392:	bce0      	pop	{r5, r6, r7}
 8005394:	46ba      	mov	sl, r7
 8005396:	46b1      	mov	r9, r6
 8005398:	46a8      	mov	r8, r5
 800539a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800539c:	6963      	ldr	r3, [r4, #20]
 800539e:	428b      	cmp	r3, r1
 80053a0:	d03e      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053a2:	4b24      	ldr	r3, [pc, #144]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053a6:	4927      	ldr	r1, [pc, #156]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053a8:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80053aa:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80053ac:	2080      	movs	r0, #128	@ 0x80
 80053ae:	0240      	lsls	r0, r0, #9
 80053b0:	4328      	orrs	r0, r5
 80053b2:	65d8      	str	r0, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053b4:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80053b6:	4d24      	ldr	r5, [pc, #144]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80053b8:	4028      	ands	r0, r5
 80053ba:	65d8      	str	r0, [r3, #92]	@ 0x5c
        RCC->BDCR = tmpregister;
 80053bc:	65d9      	str	r1, [r3, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053be:	07d2      	lsls	r2, r2, #31
 80053c0:	d52e      	bpl.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tickstart = HAL_GetTick();
 80053c2:	f7fe fa15 	bl	80037f0 <HAL_GetTick>
 80053c6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053ca:	4698      	mov	r8, r3
 80053cc:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	4b1f      	ldr	r3, [pc, #124]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80053d0:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d2:	4643      	mov	r3, r8
 80053d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d6:	421e      	tst	r6, r3
 80053d8:	d122      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x160>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fe fa09 	bl	80037f0 <HAL_GetTick>
 80053de:	1b40      	subs	r0, r0, r5
 80053e0:	4548      	cmp	r0, r9
 80053e2:	d9f6      	bls.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
            ret = HAL_TIMEOUT;
 80053e4:	2003      	movs	r0, #3
 80053e6:	e79e      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e8:	4a12      	ldr	r2, [pc, #72]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053ea:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80053ec:	4918      	ldr	r1, [pc, #96]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80053ee:	400b      	ands	r3, r1
 80053f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80053f2:	e79b      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80053f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80053f6:	68d1      	ldr	r1, [r2, #12]
 80053f8:	2380      	movs	r3, #128	@ 0x80
 80053fa:	025b      	lsls	r3, r3, #9
 80053fc:	430b      	orrs	r3, r1
 80053fe:	60d3      	str	r3, [r2, #12]
 8005400:	e7b7      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005402:	4a0c      	ldr	r2, [pc, #48]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005404:	68d1      	ldr	r1, [r2, #12]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	025b      	lsls	r3, r3, #9
 800540a:	430b      	orrs	r3, r1
 800540c:	60d3      	str	r3, [r2, #12]
  return status;
 800540e:	e7bf      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005410:	4b08      	ldr	r3, [pc, #32]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005412:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005414:	23c0      	movs	r3, #192	@ 0xc0
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	0011      	movs	r1, r2
 800541a:	4019      	ands	r1, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800541c:	421a      	tst	r2, r3
 800541e:	d1bd      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005420:	4a04      	ldr	r2, [pc, #16]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005422:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005424:	4907      	ldr	r1, [pc, #28]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005426:	400b      	ands	r3, r1
 8005428:	6961      	ldr	r1, [r4, #20]
 800542a:	430b      	orrs	r3, r1
 800542c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800542e:	2000      	movs	r0, #0
 8005430:	e779      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	40021000 	.word	0x40021000
 8005438:	40007000 	.word	0x40007000
 800543c:	ffffcfff 	.word	0xffffcfff
 8005440:	ffff3fff 	.word	0xffff3fff
 8005444:	fffffcff 	.word	0xfffffcff
 8005448:	fffeffff 	.word	0xfffeffff
 800544c:	00001388 	.word	0x00001388
 8005450:	efffffff 	.word	0xefffffff

08005454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005458:	6a02      	ldr	r2, [r0, #32]
 800545a:	2401      	movs	r4, #1
 800545c:	43a2      	bics	r2, r4
 800545e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005462:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005464:	4d18      	ldr	r5, [pc, #96]	@ (80054c8 <TIM_OC1_SetConfig+0x74>)
 8005466:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005468:	680d      	ldr	r5, [r1, #0]
 800546a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800546c:	2502      	movs	r5, #2
 800546e:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005470:	688d      	ldr	r5, [r1, #8]
 8005472:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005474:	4d15      	ldr	r5, [pc, #84]	@ (80054cc <TIM_OC1_SetConfig+0x78>)
 8005476:	42a8      	cmp	r0, r5
 8005478:	d00c      	beq.n	8005494 <TIM_OC1_SetConfig+0x40>
 800547a:	4d15      	ldr	r5, [pc, #84]	@ (80054d0 <TIM_OC1_SetConfig+0x7c>)
 800547c:	42a8      	cmp	r0, r5
 800547e:	d01b      	beq.n	80054b8 <TIM_OC1_SetConfig+0x64>
 8005480:	4d14      	ldr	r5, [pc, #80]	@ (80054d4 <TIM_OC1_SetConfig+0x80>)
 8005482:	42a8      	cmp	r0, r5
 8005484:	d112      	bne.n	80054ac <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005486:	2508      	movs	r5, #8
 8005488:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800548a:	68cd      	ldr	r5, [r1, #12]
 800548c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800548e:	2504      	movs	r5, #4
 8005490:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005492:	e005      	b.n	80054a0 <TIM_OC1_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8005494:	2508      	movs	r5, #8
 8005496:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8005498:	68cd      	ldr	r5, [r1, #12]
 800549a:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800549c:	2504      	movs	r5, #4
 800549e:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054a0:	4d0d      	ldr	r5, [pc, #52]	@ (80054d8 <TIM_OC1_SetConfig+0x84>)
 80054a2:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a4:	694c      	ldr	r4, [r1, #20]
 80054a6:	698e      	ldr	r6, [r1, #24]
 80054a8:	4334      	orrs	r4, r6
 80054aa:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ae:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b0:	684a      	ldr	r2, [r1, #4]
 80054b2:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b4:	6203      	str	r3, [r0, #32]
}
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b8:	2508      	movs	r5, #8
 80054ba:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80054bc:	68cd      	ldr	r5, [r1, #12]
 80054be:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c0:	2504      	movs	r5, #4
 80054c2:	43ab      	bics	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	e7ec      	b.n	80054a0 <TIM_OC1_SetConfig+0x4c>
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	fffeff8c 	.word	0xfffeff8c
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	fffffcff 	.word	0xfffffcff

080054dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e0:	6a03      	ldr	r3, [r0, #32]
 80054e2:	4c16      	ldr	r4, [pc, #88]	@ (800553c <TIM_OC3_SetConfig+0x60>)
 80054e4:	4023      	ands	r3, r4
 80054e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ea:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054ec:	4d14      	ldr	r5, [pc, #80]	@ (8005540 <TIM_OC3_SetConfig+0x64>)
 80054ee:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	680d      	ldr	r5, [r1, #0]
 80054f2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054f4:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <TIM_OC3_SetConfig+0x68>)
 80054f6:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054f8:	688b      	ldr	r3, [r1, #8]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054fe:	4a12      	ldr	r2, [pc, #72]	@ (8005548 <TIM_OC3_SetConfig+0x6c>)
 8005500:	4290      	cmp	r0, r2
 8005502:	d006      	beq.n	8005512 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005504:	4a11      	ldr	r2, [pc, #68]	@ (800554c <TIM_OC3_SetConfig+0x70>)
 8005506:	4290      	cmp	r0, r2
 8005508:	d00a      	beq.n	8005520 <TIM_OC3_SetConfig+0x44>
 800550a:	4a11      	ldr	r2, [pc, #68]	@ (8005550 <TIM_OC3_SetConfig+0x74>)
 800550c:	4290      	cmp	r0, r2
 800550e:	d10e      	bne.n	800552e <TIM_OC3_SetConfig+0x52>
 8005510:	e006      	b.n	8005520 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8005512:	4a10      	ldr	r2, [pc, #64]	@ (8005554 <TIM_OC3_SetConfig+0x78>)
 8005514:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005516:	68cb      	ldr	r3, [r1, #12]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800551c:	4a0e      	ldr	r2, [pc, #56]	@ (8005558 <TIM_OC3_SetConfig+0x7c>)
 800551e:	4013      	ands	r3, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005520:	4a0e      	ldr	r2, [pc, #56]	@ (800555c <TIM_OC3_SetConfig+0x80>)
 8005522:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005524:	694c      	ldr	r4, [r1, #20]
 8005526:	698e      	ldr	r6, [r1, #24]
 8005528:	4334      	orrs	r4, r6
 800552a:	0124      	lsls	r4, r4, #4
 800552c:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005530:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005532:	684a      	ldr	r2, [r1, #4]
 8005534:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005536:	6203      	str	r3, [r0, #32]
}
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	fffffeff 	.word	0xfffffeff
 8005540:	fffeff8c 	.word	0xfffeff8c
 8005544:	fffffdff 	.word	0xfffffdff
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40014400 	.word	0x40014400
 8005550:	40014800 	.word	0x40014800
 8005554:	fffff7ff 	.word	0xfffff7ff
 8005558:	fffffbff 	.word	0xfffffbff
 800555c:	ffffcfff 	.word	0xffffcfff

08005560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005564:	6a03      	ldr	r3, [r0, #32]
 8005566:	4a11      	ldr	r2, [pc, #68]	@ (80055ac <TIM_OC4_SetConfig+0x4c>)
 8005568:	4013      	ands	r3, r2
 800556a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005570:	4a0f      	ldr	r2, [pc, #60]	@ (80055b0 <TIM_OC4_SetConfig+0x50>)
 8005572:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	680a      	ldr	r2, [r1, #0]
 8005576:	0212      	lsls	r2, r2, #8
 8005578:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800557a:	4b0e      	ldr	r3, [pc, #56]	@ (80055b4 <TIM_OC4_SetConfig+0x54>)
 800557c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800557e:	688b      	ldr	r3, [r1, #8]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005584:	4c0c      	ldr	r4, [pc, #48]	@ (80055b8 <TIM_OC4_SetConfig+0x58>)
 8005586:	42a0      	cmp	r0, r4
 8005588:	d005      	beq.n	8005596 <TIM_OC4_SetConfig+0x36>
 800558a:	4c0c      	ldr	r4, [pc, #48]	@ (80055bc <TIM_OC4_SetConfig+0x5c>)
 800558c:	42a0      	cmp	r0, r4
 800558e:	d002      	beq.n	8005596 <TIM_OC4_SetConfig+0x36>
 8005590:	4c0b      	ldr	r4, [pc, #44]	@ (80055c0 <TIM_OC4_SetConfig+0x60>)
 8005592:	42a0      	cmp	r0, r4
 8005594:	d104      	bne.n	80055a0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005596:	4c0b      	ldr	r4, [pc, #44]	@ (80055c4 <TIM_OC4_SetConfig+0x64>)
 8005598:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800559a:	694d      	ldr	r5, [r1, #20]
 800559c:	01ad      	lsls	r5, r5, #6
 800559e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a4:	684a      	ldr	r2, [r1, #4]
 80055a6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	6203      	str	r3, [r0, #32]
}
 80055aa:	bd30      	pop	{r4, r5, pc}
 80055ac:	ffffefff 	.word	0xffffefff
 80055b0:	feff8cff 	.word	0xfeff8cff
 80055b4:	ffffdfff 	.word	0xffffdfff
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800
 80055c4:	ffffbfff 	.word	0xffffbfff

080055c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	6a05      	ldr	r5, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055cc:	6a03      	ldr	r3, [r0, #32]
 80055ce:	4a11      	ldr	r2, [pc, #68]	@ (8005614 <TIM_OC5_SetConfig+0x4c>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055d6:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005618 <TIM_OC5_SetConfig+0x50>)
 80055da:	401a      	ands	r2, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055dc:	680b      	ldr	r3, [r1, #0]
 80055de:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055e0:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <TIM_OC5_SetConfig+0x54>)
 80055e2:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055e4:	688b      	ldr	r3, [r1, #8]
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005620 <TIM_OC5_SetConfig+0x58>)
 80055ec:	42a8      	cmp	r0, r5
 80055ee:	d005      	beq.n	80055fc <TIM_OC5_SetConfig+0x34>
 80055f0:	4d0c      	ldr	r5, [pc, #48]	@ (8005624 <TIM_OC5_SetConfig+0x5c>)
 80055f2:	42a8      	cmp	r0, r5
 80055f4:	d002      	beq.n	80055fc <TIM_OC5_SetConfig+0x34>
 80055f6:	4d0c      	ldr	r5, [pc, #48]	@ (8005628 <TIM_OC5_SetConfig+0x60>)
 80055f8:	42a8      	cmp	r0, r5
 80055fa:	d104      	bne.n	8005606 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055fc:	4d05      	ldr	r5, [pc, #20]	@ (8005614 <TIM_OC5_SetConfig+0x4c>)
 80055fe:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005600:	694c      	ldr	r4, [r1, #20]
 8005602:	0224      	lsls	r4, r4, #8
 8005604:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005608:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800560a:	684a      	ldr	r2, [r1, #4]
 800560c:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	6203      	str	r3, [r0, #32]
}
 8005610:	bd30      	pop	{r4, r5, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	fffeffff 	.word	0xfffeffff
 8005618:	fffeff8f 	.word	0xfffeff8f
 800561c:	fffdffff 	.word	0xfffdffff
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800

0800562c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005630:	6a03      	ldr	r3, [r0, #32]
 8005632:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <TIM_OC6_SetConfig+0x4c>)
 8005634:	4013      	ands	r3, r2
 8005636:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800563a:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800563c:	4a0f      	ldr	r2, [pc, #60]	@ (800567c <TIM_OC6_SetConfig+0x50>)
 800563e:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005640:	680a      	ldr	r2, [r1, #0]
 8005642:	0212      	lsls	r2, r2, #8
 8005644:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005646:	4b0e      	ldr	r3, [pc, #56]	@ (8005680 <TIM_OC6_SetConfig+0x54>)
 8005648:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800564a:	688b      	ldr	r3, [r1, #8]
 800564c:	051b      	lsls	r3, r3, #20
 800564e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005650:	4c0c      	ldr	r4, [pc, #48]	@ (8005684 <TIM_OC6_SetConfig+0x58>)
 8005652:	42a0      	cmp	r0, r4
 8005654:	d005      	beq.n	8005662 <TIM_OC6_SetConfig+0x36>
 8005656:	4c0c      	ldr	r4, [pc, #48]	@ (8005688 <TIM_OC6_SetConfig+0x5c>)
 8005658:	42a0      	cmp	r0, r4
 800565a:	d002      	beq.n	8005662 <TIM_OC6_SetConfig+0x36>
 800565c:	4c0b      	ldr	r4, [pc, #44]	@ (800568c <TIM_OC6_SetConfig+0x60>)
 800565e:	42a0      	cmp	r0, r4
 8005660:	d104      	bne.n	800566c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005662:	4c0b      	ldr	r4, [pc, #44]	@ (8005690 <TIM_OC6_SetConfig+0x64>)
 8005664:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005666:	694d      	ldr	r5, [r1, #20]
 8005668:	02ad      	lsls	r5, r5, #10
 800566a:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800566e:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005670:	684a      	ldr	r2, [r1, #4]
 8005672:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005674:	6203      	str	r3, [r0, #32]
}
 8005676:	bd30      	pop	{r4, r5, pc}
 8005678:	ffefffff 	.word	0xffefffff
 800567c:	feff8fff 	.word	0xfeff8fff
 8005680:	ffdfffff 	.word	0xffdfffff
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40014400 	.word	0x40014400
 800568c:	40014800 	.word	0x40014800
 8005690:	fffbffff 	.word	0xfffbffff

08005694 <HAL_TIM_Base_Start_IT>:
{
 8005694:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8005696:	223d      	movs	r2, #61	@ 0x3d
 8005698:	5c82      	ldrb	r2, [r0, r2]
    return HAL_ERROR;
 800569a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800569c:	2a01      	cmp	r2, #1
 800569e:	d112      	bne.n	80056c6 <HAL_TIM_Base_Start_IT+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	323c      	adds	r2, #60	@ 0x3c
 80056a2:	2102      	movs	r1, #2
 80056a4:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	68ca      	ldr	r2, [r1, #12]
 80056aa:	4302      	orrs	r2, r0
 80056ac:	60ca      	str	r2, [r1, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0e      	ldr	r2, [pc, #56]	@ (80056ec <HAL_TIM_Base_Start_IT+0x58>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d008      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x34>
 80056b6:	4a0e      	ldr	r2, [pc, #56]	@ (80056f0 <HAL_TIM_Base_Start_IT+0x5c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d005      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	2101      	movs	r1, #1
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056c4:	2000      	movs	r0, #0
}
 80056c6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	490a      	ldr	r1, [pc, #40]	@ (80056f4 <HAL_TIM_Base_Start_IT+0x60>)
 80056cc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	2a06      	cmp	r2, #6
 80056d0:	d008      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x50>
 80056d2:	3907      	subs	r1, #7
 80056d4:	428a      	cmp	r2, r1
 80056d6:	d007      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	2101      	movs	r1, #1
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056e0:	2000      	movs	r0, #0
 80056e2:	e7f0      	b.n	80056c6 <HAL_TIM_Base_Start_IT+0x32>
 80056e4:	2000      	movs	r0, #0
 80056e6:	e7ee      	b.n	80056c6 <HAL_TIM_Base_Start_IT+0x32>
 80056e8:	2000      	movs	r0, #0
 80056ea:	e7ec      	b.n	80056c6 <HAL_TIM_Base_Start_IT+0x32>
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40000400 	.word	0x40000400
 80056f4:	00010007 	.word	0x00010007

080056f8 <HAL_TIM_PWM_MspInit>:
}
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_OC_DelayElapsedCallback>:
}
 80056fa:	4770      	bx	lr

080056fc <HAL_TIM_IC_CaptureCallback>:
}
 80056fc:	4770      	bx	lr

080056fe <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_TriggerCallback>:
}
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIM_IRQHandler>:
{
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8005708:	6803      	ldr	r3, [r0, #0]
 800570a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800570c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800570e:	07aa      	lsls	r2, r5, #30
 8005710:	d50e      	bpl.n	8005730 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005712:	07b2      	lsls	r2, r6, #30
 8005714:	d50c      	bpl.n	8005730 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005716:	2203      	movs	r2, #3
 8005718:	4252      	negs	r2, r2
 800571a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800571c:	2301      	movs	r3, #1
 800571e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005720:	6803      	ldr	r3, [r0, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	079b      	lsls	r3, r3, #30
 8005726:	d053      	beq.n	80057d0 <HAL_TIM_IRQHandler+0xcc>
          HAL_TIM_IC_CaptureCallback(htim);
 8005728:	f7ff ffe8 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572c:	2300      	movs	r3, #0
 800572e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005730:	076b      	lsls	r3, r5, #29
 8005732:	d512      	bpl.n	800575a <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005734:	0773      	lsls	r3, r6, #29
 8005736:	d510      	bpl.n	800575a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	2205      	movs	r2, #5
 800573c:	4252      	negs	r2, r2
 800573e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005740:	2302      	movs	r3, #2
 8005742:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	23c0      	movs	r3, #192	@ 0xc0
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	421a      	tst	r2, r3
 800574e:	d045      	beq.n	80057dc <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8005750:	0020      	movs	r0, r4
 8005752:	f7ff ffd3 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	2300      	movs	r3, #0
 8005758:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800575a:	072b      	lsls	r3, r5, #28
 800575c:	d510      	bpl.n	8005780 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800575e:	0733      	lsls	r3, r6, #28
 8005760:	d50e      	bpl.n	8005780 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	2209      	movs	r2, #9
 8005766:	4252      	negs	r2, r2
 8005768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576a:	2304      	movs	r3, #4
 800576c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	079b      	lsls	r3, r3, #30
 8005774:	d039      	beq.n	80057ea <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005776:	0020      	movs	r0, r4
 8005778:	f7ff ffc0 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577c:	2300      	movs	r3, #0
 800577e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005780:	06eb      	lsls	r3, r5, #27
 8005782:	d512      	bpl.n	80057aa <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005784:	06f3      	lsls	r3, r6, #27
 8005786:	d510      	bpl.n	80057aa <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	2211      	movs	r2, #17
 800578c:	4252      	negs	r2, r2
 800578e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005790:	2308      	movs	r3, #8
 8005792:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	23c0      	movs	r3, #192	@ 0xc0
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	421a      	tst	r2, r3
 800579e:	d02b      	beq.n	80057f8 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80057a0:	0020      	movs	r0, r4
 80057a2:	f7ff ffab 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	2300      	movs	r3, #0
 80057a8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057aa:	07eb      	lsls	r3, r5, #31
 80057ac:	d501      	bpl.n	80057b2 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057ae:	07f3      	lsls	r3, r6, #31
 80057b0:	d429      	bmi.n	8005806 <HAL_TIM_IRQHandler+0x102>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057b2:	2382      	movs	r3, #130	@ 0x82
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	421d      	tst	r5, r3
 80057b8:	d03c      	beq.n	8005834 <HAL_TIM_IRQHandler+0x130>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ba:	0633      	lsls	r3, r6, #24
 80057bc:	d42b      	bmi.n	8005816 <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057be:	066b      	lsls	r3, r5, #25
 80057c0:	d501      	bpl.n	80057c6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057c2:	0673      	lsls	r3, r6, #25
 80057c4:	d43b      	bmi.n	800583e <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057c6:	06ad      	lsls	r5, r5, #26
 80057c8:	d501      	bpl.n	80057ce <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057ca:	06b6      	lsls	r6, r6, #26
 80057cc:	d43f      	bmi.n	800584e <HAL_TIM_IRQHandler+0x14a>
}
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d0:	f7ff ff93 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d4:	0020      	movs	r0, r4
 80057d6:	f7ff ff92 	bl	80056fe <HAL_TIM_PWM_PulseFinishedCallback>
 80057da:	e7a7      	b.n	800572c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057dc:	0020      	movs	r0, r4
 80057de:	f7ff ff8c 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e2:	0020      	movs	r0, r4
 80057e4:	f7ff ff8b 	bl	80056fe <HAL_TIM_PWM_PulseFinishedCallback>
 80057e8:	e7b5      	b.n	8005756 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	0020      	movs	r0, r4
 80057ec:	f7ff ff85 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	0020      	movs	r0, r4
 80057f2:	f7ff ff84 	bl	80056fe <HAL_TIM_PWM_PulseFinishedCallback>
 80057f6:	e7c1      	b.n	800577c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f8:	0020      	movs	r0, r4
 80057fa:	f7ff ff7e 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fe:	0020      	movs	r0, r4
 8005800:	f7ff ff7d 	bl	80056fe <HAL_TIM_PWM_PulseFinishedCallback>
 8005804:	e7cf      	b.n	80057a6 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	2202      	movs	r2, #2
 800580a:	4252      	negs	r2, r2
 800580c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800580e:	0020      	movs	r0, r4
 8005810:	f7fd f87a 	bl	8002908 <HAL_TIM_PeriodElapsedCallback>
 8005814:	e7cd      	b.n	80057b2 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	4a11      	ldr	r2, [pc, #68]	@ (8005860 <HAL_TIM_IRQHandler+0x15c>)
 800581a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800581c:	0020      	movs	r0, r4
 800581e:	f000 fb36 	bl	8005e8e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005822:	05eb      	lsls	r3, r5, #23
 8005824:	d5cb      	bpl.n	80057be <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	4a0e      	ldr	r2, [pc, #56]	@ (8005864 <HAL_TIM_IRQHandler+0x160>)
 800582a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800582c:	0020      	movs	r0, r4
 800582e:	f000 fb2f 	bl	8005e90 <HAL_TIMEx_Break2Callback>
 8005832:	e7c4      	b.n	80057be <HAL_TIM_IRQHandler+0xba>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005834:	05eb      	lsls	r3, r5, #23
 8005836:	d5c2      	bpl.n	80057be <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005838:	0633      	lsls	r3, r6, #24
 800583a:	d5c0      	bpl.n	80057be <HAL_TIM_IRQHandler+0xba>
 800583c:	e7f3      	b.n	8005826 <HAL_TIM_IRQHandler+0x122>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	2241      	movs	r2, #65	@ 0x41
 8005842:	4252      	negs	r2, r2
 8005844:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005846:	0020      	movs	r0, r4
 8005848:	f7ff ff5a 	bl	8005700 <HAL_TIM_TriggerCallback>
 800584c:	e7bb      	b.n	80057c6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	2221      	movs	r2, #33	@ 0x21
 8005852:	4252      	negs	r2, r2
 8005854:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005856:	0020      	movs	r0, r4
 8005858:	f000 fb18 	bl	8005e8c <HAL_TIMEx_CommutCallback>
}
 800585c:	e7b7      	b.n	80057ce <HAL_TIM_IRQHandler+0xca>
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	ffffdf7f 	.word	0xffffdf7f
 8005864:	fffffeff 	.word	0xfffffeff

08005868 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005868:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586a:	4a31      	ldr	r2, [pc, #196]	@ (8005930 <TIM_Base_SetConfig+0xc8>)
 800586c:	4290      	cmp	r0, r2
 800586e:	d015      	beq.n	800589c <TIM_Base_SetConfig+0x34>
 8005870:	4a30      	ldr	r2, [pc, #192]	@ (8005934 <TIM_Base_SetConfig+0xcc>)
 8005872:	4290      	cmp	r0, r2
 8005874:	d012      	beq.n	800589c <TIM_Base_SetConfig+0x34>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005876:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <TIM_Base_SetConfig+0xd0>)
 8005878:	4290      	cmp	r0, r2
 800587a:	d03d      	beq.n	80058f8 <TIM_Base_SetConfig+0x90>
 800587c:	4a2f      	ldr	r2, [pc, #188]	@ (800593c <TIM_Base_SetConfig+0xd4>)
 800587e:	4290      	cmp	r0, r2
 8005880:	d048      	beq.n	8005914 <TIM_Base_SetConfig+0xac>
 8005882:	4a2f      	ldr	r2, [pc, #188]	@ (8005940 <TIM_Base_SetConfig+0xd8>)
 8005884:	4290      	cmp	r0, r2
 8005886:	d029      	beq.n	80058dc <TIM_Base_SetConfig+0x74>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	2280      	movs	r2, #128	@ 0x80
 800588a:	4393      	bics	r3, r2
 800588c:	694a      	ldr	r2, [r1, #20]
 800588e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005890:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005892:	688b      	ldr	r3, [r1, #8]
 8005894:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005896:	680b      	ldr	r3, [r1, #0]
 8005898:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800589a:	e015      	b.n	80058c8 <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589c:	2270      	movs	r2, #112	@ 0x70
 800589e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80058a0:	684a      	ldr	r2, [r1, #4]
 80058a2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a4:	4a27      	ldr	r2, [pc, #156]	@ (8005944 <TIM_Base_SetConfig+0xdc>)
 80058a6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a8:	68ca      	ldr	r2, [r1, #12]
 80058aa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ac:	2280      	movs	r2, #128	@ 0x80
 80058ae:	4393      	bics	r3, r2
 80058b0:	694a      	ldr	r2, [r1, #20]
 80058b2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80058b4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b6:	688b      	ldr	r3, [r1, #8]
 80058b8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058ba:	680b      	ldr	r3, [r1, #0]
 80058bc:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058be:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <TIM_Base_SetConfig+0xc8>)
 80058c0:	4298      	cmp	r0, r3
 80058c2:	d101      	bne.n	80058c8 <TIM_Base_SetConfig+0x60>
    TIMx->RCR = Structure->RepetitionCounter;
 80058c4:	690b      	ldr	r3, [r1, #16]
 80058c6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80058c8:	2301      	movs	r3, #1
 80058ca:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058cc:	6902      	ldr	r2, [r0, #16]
 80058ce:	4213      	tst	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0x72>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058d2:	6903      	ldr	r3, [r0, #16]
 80058d4:	2201      	movs	r2, #1
 80058d6:	4393      	bics	r3, r2
 80058d8:	6103      	str	r3, [r0, #16]
}
 80058da:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 80058dc:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <TIM_Base_SetConfig+0xdc>)
 80058de:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e0:	68ca      	ldr	r2, [r1, #12]
 80058e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	2280      	movs	r2, #128	@ 0x80
 80058e6:	4393      	bics	r3, r2
 80058e8:	694a      	ldr	r2, [r1, #20]
 80058ea:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80058ec:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ee:	688b      	ldr	r3, [r1, #8]
 80058f0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058f2:	680b      	ldr	r3, [r1, #0]
 80058f4:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f6:	e7e5      	b.n	80058c4 <TIM_Base_SetConfig+0x5c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f8:	4a12      	ldr	r2, [pc, #72]	@ (8005944 <TIM_Base_SetConfig+0xdc>)
 80058fa:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fc:	68ca      	ldr	r2, [r1, #12]
 80058fe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005900:	2280      	movs	r2, #128	@ 0x80
 8005902:	4393      	bics	r3, r2
 8005904:	694a      	ldr	r2, [r1, #20]
 8005906:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005908:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800590a:	688b      	ldr	r3, [r1, #8]
 800590c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800590e:	680b      	ldr	r3, [r1, #0]
 8005910:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005912:	e7d9      	b.n	80058c8 <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005914:	4a0b      	ldr	r2, [pc, #44]	@ (8005944 <TIM_Base_SetConfig+0xdc>)
 8005916:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005918:	68ca      	ldr	r2, [r1, #12]
 800591a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	2280      	movs	r2, #128	@ 0x80
 800591e:	4393      	bics	r3, r2
 8005920:	694a      	ldr	r2, [r1, #20]
 8005922:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005924:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005926:	688b      	ldr	r3, [r1, #8]
 8005928:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800592a:	680b      	ldr	r3, [r1, #0]
 800592c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800592e:	e7c9      	b.n	80058c4 <TIM_Base_SetConfig+0x5c>
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40000400 	.word	0x40000400
 8005938:	40002000 	.word	0x40002000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	fffffcff 	.word	0xfffffcff

08005948 <HAL_TIM_Base_Init>:
{
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800594c:	d02a      	beq.n	80059a4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800594e:	233d      	movs	r3, #61	@ 0x3d
 8005950:	5cc3      	ldrb	r3, [r0, r3]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8005956:	253d      	movs	r5, #61	@ 0x3d
 8005958:	2302      	movs	r3, #2
 800595a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595c:	0021      	movs	r1, r4
 800595e:	c901      	ldmia	r1!, {r0}
 8005960:	f7ff ff82 	bl	8005868 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005964:	2301      	movs	r3, #1
 8005966:	2248      	movs	r2, #72	@ 0x48
 8005968:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596a:	3a0a      	subs	r2, #10
 800596c:	54a3      	strb	r3, [r4, r2]
 800596e:	3201      	adds	r2, #1
 8005970:	54a3      	strb	r3, [r4, r2]
 8005972:	3201      	adds	r2, #1
 8005974:	54a3      	strb	r3, [r4, r2]
 8005976:	3201      	adds	r2, #1
 8005978:	54a3      	strb	r3, [r4, r2]
 800597a:	3201      	adds	r2, #1
 800597c:	54a3      	strb	r3, [r4, r2]
 800597e:	3201      	adds	r2, #1
 8005980:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005982:	3201      	adds	r2, #1
 8005984:	54a3      	strb	r3, [r4, r2]
 8005986:	3201      	adds	r2, #1
 8005988:	54a3      	strb	r3, [r4, r2]
 800598a:	3201      	adds	r2, #1
 800598c:	54a3      	strb	r3, [r4, r2]
 800598e:	3201      	adds	r2, #1
 8005990:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005992:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005994:	2000      	movs	r0, #0
}
 8005996:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005998:	333c      	adds	r3, #60	@ 0x3c
 800599a:	2200      	movs	r2, #0
 800599c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800599e:	f7fd fd55 	bl	800344c <HAL_TIM_Base_MspInit>
 80059a2:	e7d8      	b.n	8005956 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80059a4:	2001      	movs	r0, #1
 80059a6:	e7f6      	b.n	8005996 <HAL_TIM_Base_Init+0x4e>

080059a8 <HAL_TIM_PWM_Init>:
{
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80059ac:	d02a      	beq.n	8005a04 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80059ae:	233d      	movs	r3, #61	@ 0x3d
 80059b0:	5cc3      	ldrb	r3, [r0, r3]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	253d      	movs	r5, #61	@ 0x3d
 80059b8:	2302      	movs	r3, #2
 80059ba:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	0021      	movs	r1, r4
 80059be:	c901      	ldmia	r1!, {r0}
 80059c0:	f7ff ff52 	bl	8005868 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c4:	2301      	movs	r3, #1
 80059c6:	2248      	movs	r2, #72	@ 0x48
 80059c8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ca:	3a0a      	subs	r2, #10
 80059cc:	54a3      	strb	r3, [r4, r2]
 80059ce:	3201      	adds	r2, #1
 80059d0:	54a3      	strb	r3, [r4, r2]
 80059d2:	3201      	adds	r2, #1
 80059d4:	54a3      	strb	r3, [r4, r2]
 80059d6:	3201      	adds	r2, #1
 80059d8:	54a3      	strb	r3, [r4, r2]
 80059da:	3201      	adds	r2, #1
 80059dc:	54a3      	strb	r3, [r4, r2]
 80059de:	3201      	adds	r2, #1
 80059e0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	3201      	adds	r2, #1
 80059e4:	54a3      	strb	r3, [r4, r2]
 80059e6:	3201      	adds	r2, #1
 80059e8:	54a3      	strb	r3, [r4, r2]
 80059ea:	3201      	adds	r2, #1
 80059ec:	54a3      	strb	r3, [r4, r2]
 80059ee:	3201      	adds	r2, #1
 80059f0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80059f2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80059f4:	2000      	movs	r0, #0
}
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80059f8:	333c      	adds	r3, #60	@ 0x3c
 80059fa:	2200      	movs	r2, #0
 80059fc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80059fe:	f7ff fe7b 	bl	80056f8 <HAL_TIM_PWM_MspInit>
 8005a02:	e7d8      	b.n	80059b6 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8005a04:	2001      	movs	r0, #1
 8005a06:	e7f6      	b.n	80059f6 <HAL_TIM_PWM_Init+0x4e>

08005a08 <TIM_OC2_SetConfig>:
{
 8005a08:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8005a0a:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a0c:	6a03      	ldr	r3, [r0, #32]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	4393      	bics	r3, r2
 8005a12:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005a14:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005a16:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a18:	4d14      	ldr	r5, [pc, #80]	@ (8005a6c <TIM_OC2_SetConfig+0x64>)
 8005a1a:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	680d      	ldr	r5, [r1, #0]
 8005a1e:	022d      	lsls	r5, r5, #8
 8005a20:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8005a22:	2220      	movs	r2, #32
 8005a24:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a26:	688a      	ldr	r2, [r1, #8]
 8005a28:	0112      	lsls	r2, r2, #4
 8005a2a:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a2c:	4c10      	ldr	r4, [pc, #64]	@ (8005a70 <TIM_OC2_SetConfig+0x68>)
 8005a2e:	42a0      	cmp	r0, r4
 8005a30:	d006      	beq.n	8005a40 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	4c10      	ldr	r4, [pc, #64]	@ (8005a74 <TIM_OC2_SetConfig+0x6c>)
 8005a34:	42a0      	cmp	r0, r4
 8005a36:	d00b      	beq.n	8005a50 <TIM_OC2_SetConfig+0x48>
 8005a38:	4c0f      	ldr	r4, [pc, #60]	@ (8005a78 <TIM_OC2_SetConfig+0x70>)
 8005a3a:	42a0      	cmp	r0, r4
 8005a3c:	d10f      	bne.n	8005a5e <TIM_OC2_SetConfig+0x56>
 8005a3e:	e007      	b.n	8005a50 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a40:	2480      	movs	r4, #128	@ 0x80
 8005a42:	43a2      	bics	r2, r4
 8005a44:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a46:	68ca      	ldr	r2, [r1, #12]
 8005a48:	0112      	lsls	r2, r2, #4
 8005a4a:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a4c:	3c40      	subs	r4, #64	@ 0x40
 8005a4e:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a50:	4c0a      	ldr	r4, [pc, #40]	@ (8005a7c <TIM_OC2_SetConfig+0x74>)
 8005a52:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a54:	694b      	ldr	r3, [r1, #20]
 8005a56:	698e      	ldr	r6, [r1, #24]
 8005a58:	4333      	orrs	r3, r6
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8005a5e:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005a60:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005a62:	684b      	ldr	r3, [r1, #4]
 8005a64:	6383      	str	r3, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005a66:	6202      	str	r2, [r0, #32]
}
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	46c0      	nop			@ (mov r8, r8)
 8005a6c:	feff8cff 	.word	0xfeff8cff
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40014400 	.word	0x40014400
 8005a78:	40014800 	.word	0x40014800
 8005a7c:	fffff3ff 	.word	0xfffff3ff

08005a80 <HAL_TIM_PWM_ConfigChannel>:
{
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	0004      	movs	r4, r0
 8005a84:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8005a86:	233c      	movs	r3, #60	@ 0x3c
 8005a88:	5cc3      	ldrb	r3, [r0, r3]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d100      	bne.n	8005a90 <HAL_TIM_PWM_ConfigChannel+0x10>
 8005a8e:	e092      	b.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x136>
 8005a90:	233c      	movs	r3, #60	@ 0x3c
 8005a92:	2101      	movs	r1, #1
 8005a94:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8005a96:	2a14      	cmp	r2, #20
 8005a98:	d900      	bls.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x1c>
 8005a9a:	e087      	b.n	8005bac <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005a9c:	0092      	lsls	r2, r2, #2
 8005a9e:	4b47      	ldr	r3, [pc, #284]	@ (8005bbc <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8005aa0:	589b      	ldr	r3, [r3, r2]
 8005aa2:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa4:	6800      	ldr	r0, [r0, #0]
 8005aa6:	0029      	movs	r1, r5
 8005aa8:	f7ff fcd4 	bl	8005454 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	6993      	ldr	r3, [r2, #24]
 8005ab0:	2108      	movs	r1, #8
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	6993      	ldr	r3, [r2, #24]
 8005aba:	3904      	subs	r1, #4
 8005abc:	438b      	bics	r3, r1
 8005abe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ac0:	6822      	ldr	r2, [r4, #0]
 8005ac2:	6993      	ldr	r3, [r2, #24]
 8005ac4:	6929      	ldr	r1, [r5, #16]
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2000      	movs	r0, #0
      break;
 8005acc:	e06f      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ace:	6800      	ldr	r0, [r0, #0]
 8005ad0:	0029      	movs	r1, r5
 8005ad2:	f7ff ff99 	bl	8005a08 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	6991      	ldr	r1, [r2, #24]
 8005ada:	2380      	movs	r3, #128	@ 0x80
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	6993      	ldr	r3, [r2, #24]
 8005ae6:	4936      	ldr	r1, [pc, #216]	@ (8005bc0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8005ae8:	400b      	ands	r3, r1
 8005aea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	6991      	ldr	r1, [r2, #24]
 8005af0:	692b      	ldr	r3, [r5, #16]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2000      	movs	r0, #0
      break;
 8005afa:	e058      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	0029      	movs	r1, r5
 8005b00:	f7ff fcec 	bl	80054dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b04:	6822      	ldr	r2, [r4, #0]
 8005b06:	69d3      	ldr	r3, [r2, #28]
 8005b08:	2108      	movs	r1, #8
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	69d3      	ldr	r3, [r2, #28]
 8005b12:	3904      	subs	r1, #4
 8005b14:	438b      	bics	r3, r1
 8005b16:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	69d3      	ldr	r3, [r2, #28]
 8005b1c:	6929      	ldr	r1, [r5, #16]
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2000      	movs	r0, #0
      break;
 8005b24:	e043      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b26:	6800      	ldr	r0, [r0, #0]
 8005b28:	0029      	movs	r1, r5
 8005b2a:	f7ff fd19 	bl	8005560 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	69d1      	ldr	r1, [r2, #28]
 8005b32:	2380      	movs	r3, #128	@ 0x80
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	430b      	orrs	r3, r1
 8005b38:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	69d3      	ldr	r3, [r2, #28]
 8005b3e:	4920      	ldr	r1, [pc, #128]	@ (8005bc0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8005b40:	400b      	ands	r3, r1
 8005b42:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	69d1      	ldr	r1, [r2, #28]
 8005b48:	692b      	ldr	r3, [r5, #16]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005b50:	2000      	movs	r0, #0
      break;
 8005b52:	e02c      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b54:	6800      	ldr	r0, [r0, #0]
 8005b56:	0029      	movs	r1, r5
 8005b58:	f7ff fd36 	bl	80055c8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005b60:	2108      	movs	r1, #8
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005b6a:	3904      	subs	r1, #4
 8005b6c:	438b      	bics	r3, r1
 8005b6e:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005b74:	6929      	ldr	r1, [r5, #16]
 8005b76:	430b      	orrs	r3, r1
 8005b78:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2000      	movs	r0, #0
      break;
 8005b7c:	e017      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b7e:	6800      	ldr	r0, [r0, #0]
 8005b80:	0029      	movs	r1, r5
 8005b82:	f7ff fd53 	bl	800562c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005b96:	490a      	ldr	r1, [pc, #40]	@ (8005bc0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8005b98:	400b      	ands	r3, r1
 8005b9a:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8005ba0:	692b      	ldr	r3, [r5, #16]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005ba8:	2000      	movs	r0, #0
      break;
 8005baa:	e000      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8005bac:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005bae:	233c      	movs	r3, #60	@ 0x3c
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	54e2      	strb	r2, [r4, r3]
}
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005bb6:	2002      	movs	r0, #2
 8005bb8:	e7fc      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	080070b4 	.word	0x080070b4
 8005bc0:	fffffbff 	.word	0xfffffbff

08005bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bc6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc8:	4d03      	ldr	r5, [pc, #12]	@ (8005bd8 <TIM_ETR_SetConfig+0x14>)
 8005bca:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd4:	6083      	str	r3, [r0, #8]
}
 8005bd6:	bd30      	pop	{r4, r5, pc}
 8005bd8:	ffff00ff 	.word	0xffff00ff

08005bdc <HAL_TIM_ConfigClockSource>:
{
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005be0:	233c      	movs	r3, #60	@ 0x3c
 8005be2:	5cc3      	ldrb	r3, [r0, r3]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d100      	bne.n	8005bea <HAL_TIM_ConfigClockSource+0xe>
 8005be8:	e0ad      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x16a>
 8005bea:	233c      	movs	r3, #60	@ 0x3c
 8005bec:	2201      	movs	r2, #1
 8005bee:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	3201      	adds	r2, #1
 8005bf4:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8005bf6:	6802      	ldr	r2, [r0, #0]
 8005bf8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfa:	4854      	ldr	r0, [pc, #336]	@ (8005d4c <HAL_TIM_ConfigClockSource+0x170>)
 8005bfc:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005bfe:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005c00:	680b      	ldr	r3, [r1, #0]
 8005c02:	2b60      	cmp	r3, #96	@ 0x60
 8005c04:	d064      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0xf4>
 8005c06:	d838      	bhi.n	8005c7a <HAL_TIM_ConfigClockSource+0x9e>
 8005c08:	2b40      	cmp	r3, #64	@ 0x40
 8005c0a:	d100      	bne.n	8005c0e <HAL_TIM_ConfigClockSource+0x32>
 8005c0c:	e07c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x12c>
 8005c0e:	d816      	bhi.n	8005c3e <HAL_TIM_ConfigClockSource+0x62>
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d006      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x46>
 8005c14:	d80f      	bhi.n	8005c36 <HAL_TIM_ConfigClockSource+0x5a>
 8005c16:	2210      	movs	r2, #16
 8005c18:	0019      	movs	r1, r3
 8005c1a:	4391      	bics	r1, r2
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	2900      	cmp	r1, #0
 8005c20:	d141      	bne.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c22:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005c24:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c26:	484a      	ldr	r0, [pc, #296]	@ (8005d50 <HAL_TIM_ConfigClockSource+0x174>)
 8005c28:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	2207      	movs	r2, #7
 8005c2e:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8005c30:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2000      	movs	r0, #0
}
 8005c34:	e037      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 8005c36:	2001      	movs	r0, #1
 8005c38:	2b30      	cmp	r3, #48	@ 0x30
 8005c3a:	d0f2      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x46>
 8005c3c:	e033      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
 8005c3e:	2001      	movs	r0, #1
 8005c40:	2b50      	cmp	r3, #80	@ 0x50
 8005c42:	d130      	bne.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c44:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c46:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c48:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c4a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4c:	6a1d      	ldr	r5, [r3, #32]
 8005c4e:	2601      	movs	r6, #1
 8005c50:	43b5      	bics	r5, r6
 8005c52:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c54:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c56:	36ef      	adds	r6, #239	@ 0xef
 8005c58:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c5a:	0112      	lsls	r2, r2, #4
 8005c5c:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c5e:	250a      	movs	r5, #10
 8005c60:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8005c62:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c66:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c68:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005c6a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6c:	4938      	ldr	r1, [pc, #224]	@ (8005d50 <HAL_TIM_ConfigClockSource+0x174>)
 8005c6e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c70:	2157      	movs	r1, #87	@ 0x57
 8005c72:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005c74:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2000      	movs	r0, #0
}
 8005c78:	e015      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 8005c7a:	2280      	movs	r2, #128	@ 0x80
 8005c7c:	0152      	lsls	r2, r2, #5
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d05d      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x162>
 8005c82:	2280      	movs	r2, #128	@ 0x80
 8005c84:	0192      	lsls	r2, r2, #6
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d014      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0xd8>
 8005c8a:	2b70      	cmp	r3, #112	@ 0x70
 8005c8c:	d159      	bne.n	8005d42 <HAL_TIM_ConfigClockSource+0x166>
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	68cb      	ldr	r3, [r1, #12]
 8005c90:	684a      	ldr	r2, [r1, #4]
 8005c92:	6889      	ldr	r1, [r1, #8]
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	f7ff ff95 	bl	8005bc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	2177      	movs	r1, #119	@ 0x77
 8005ca0:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8005ca2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ca6:	233d      	movs	r3, #61	@ 0x3d
 8005ca8:	2201      	movs	r2, #1
 8005caa:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8005cac:	3b01      	subs	r3, #1
 8005cae:	2200      	movs	r2, #0
 8005cb0:	54e2      	strb	r2, [r4, r3]
}
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8005cb4:	68cb      	ldr	r3, [r1, #12]
 8005cb6:	684a      	ldr	r2, [r1, #4]
 8005cb8:	6889      	ldr	r1, [r1, #8]
 8005cba:	6820      	ldr	r0, [r4, #0]
 8005cbc:	f7ff ff82 	bl	8005bc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	6891      	ldr	r1, [r2, #8]
 8005cc4:	2380      	movs	r3, #128	@ 0x80
 8005cc6:	01db      	lsls	r3, r3, #7
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ccc:	2000      	movs	r0, #0
      break;
 8005cce:	e7ea      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cd0:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cd2:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd4:	68c9      	ldr	r1, [r1, #12]
  tmpccer = TIMx->CCER;
 8005cd6:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd8:	6a1d      	ldr	r5, [r3, #32]
 8005cda:	2610      	movs	r6, #16
 8005cdc:	43b5      	bics	r5, r6
 8005cde:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce0:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce2:	4e1c      	ldr	r6, [pc, #112]	@ (8005d54 <HAL_TIM_ConfigClockSource+0x178>)
 8005ce4:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ce6:	0309      	lsls	r1, r1, #12
 8005ce8:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cea:	25a0      	movs	r5, #160	@ 0xa0
 8005cec:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cee:	0112      	lsls	r2, r2, #4
 8005cf0:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cf6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005cf8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cfa:	4915      	ldr	r1, [pc, #84]	@ (8005d50 <HAL_TIM_ConfigClockSource+0x174>)
 8005cfc:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfe:	2167      	movs	r1, #103	@ 0x67
 8005d00:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005d02:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d04:	2000      	movs	r0, #0
}
 8005d06:	e7ce      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d08:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8005d0e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d10:	6a1d      	ldr	r5, [r3, #32]
 8005d12:	2601      	movs	r6, #1
 8005d14:	43b5      	bics	r5, r6
 8005d16:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d18:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d1a:	36ef      	adds	r6, #239	@ 0xef
 8005d1c:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1e:	0112      	lsls	r2, r2, #4
 8005d20:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d22:	250a      	movs	r5, #10
 8005d24:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8005d26:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d2c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005d2e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d30:	4907      	ldr	r1, [pc, #28]	@ (8005d50 <HAL_TIM_ConfigClockSource+0x174>)
 8005d32:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d34:	2147      	movs	r1, #71	@ 0x47
 8005d36:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005d38:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3a:	2000      	movs	r0, #0
}
 8005d3c:	e7b3      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
  HAL_StatusTypeDef status = HAL_OK;
 8005d3e:	2000      	movs	r0, #0
 8005d40:	e7b1      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 8005d42:	2001      	movs	r0, #1
 8005d44:	e7af      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0xca>
  __HAL_LOCK(htim);
 8005d46:	2002      	movs	r0, #2
 8005d48:	e7b3      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0xd6>
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	ffce0088 	.word	0xffce0088
 8005d50:	ffcfff8f 	.word	0xffcfff8f
 8005d54:	ffff0fff 	.word	0xffff0fff

08005d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d58:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5a:	233c      	movs	r3, #60	@ 0x3c
 8005d5c:	5cc3      	ldrb	r3, [r0, r3]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d029      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005d62:	233c      	movs	r3, #60	@ 0x3c
 8005d64:	2201      	movs	r2, #1
 8005d66:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	3301      	adds	r3, #1
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d6e:	6802      	ldr	r2, [r0, #0]
 8005d70:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d72:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d74:	4d11      	ldr	r5, [pc, #68]	@ (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005d76:	42aa      	cmp	r2, r5
 8005d78:	d018      	beq.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7a:	2570      	movs	r5, #112	@ 0x70
 8005d7c:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d7e:	680d      	ldr	r5, [r1, #0]
 8005d80:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d82:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d84:	6803      	ldr	r3, [r0, #0]
 8005d86:	4a0d      	ldr	r2, [pc, #52]	@ (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d002      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8005d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d104      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d92:	2280      	movs	r2, #128	@ 0x80
 8005d94:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d96:	688a      	ldr	r2, [r1, #8]
 8005d98:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d9a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	233d      	movs	r3, #61	@ 0x3d
 8005d9e:	2201      	movs	r2, #1
 8005da0:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005da2:	3b01      	subs	r3, #1
 8005da4:	2200      	movs	r2, #0
 8005da6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005da8:	2000      	movs	r0, #0
}
 8005daa:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dac:	4d05      	ldr	r5, [pc, #20]	@ (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005dae:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db0:	684d      	ldr	r5, [r1, #4]
 8005db2:	432b      	orrs	r3, r5
 8005db4:	e7e1      	b.n	8005d7a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8005db6:	2002      	movs	r0, #2
 8005db8:	e7f7      	b.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	ff0fffff 	.word	0xff0fffff

08005dc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dc8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dca:	233c      	movs	r3, #60	@ 0x3c
 8005dcc:	5cc3      	ldrb	r3, [r0, r3]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d040      	beq.n	8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8005dd2:	233c      	movs	r3, #60	@ 0x3c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dd8:	68cb      	ldr	r3, [r1, #12]
 8005dda:	4a1f      	ldr	r2, [pc, #124]	@ (8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	688a      	ldr	r2, [r1, #8]
 8005de0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005de2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e5c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	684a      	ldr	r2, [r1, #4]
 8005de8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dea:	4a1d      	ldr	r2, [pc, #116]	@ (8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	680a      	ldr	r2, [r1, #0]
 8005df0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005df2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	690a      	ldr	r2, [r1, #16]
 8005df8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e68 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	694a      	ldr	r2, [r1, #20]
 8005e00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e02:	4a1a      	ldr	r2, [pc, #104]	@ (8005e6c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005e08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e0a:	4a19      	ldr	r2, [pc, #100]	@ (8005e70 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	698a      	ldr	r2, [r1, #24]
 8005e10:	0412      	lsls	r2, r2, #16
 8005e12:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e14:	4a17      	ldr	r2, [pc, #92]	@ (8005e74 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	69ca      	ldr	r2, [r1, #28]
 8005e1a:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e1c:	6804      	ldr	r4, [r0, #0]
 8005e1e:	4a16      	ldr	r2, [pc, #88]	@ (8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005e20:	4294      	cmp	r4, r2
 8005e22:	d005      	beq.n	8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e24:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e26:	233c      	movs	r3, #60	@ 0x3c
 8005e28:	2200      	movs	r2, #0
 8005e2a:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005e2c:	2000      	movs	r0, #0
}
 8005e2e:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e30:	4a12      	ldr	r2, [pc, #72]	@ (8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005e36:	0512      	lsls	r2, r2, #20
 8005e38:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005e3c:	401a      	ands	r2, r3
 8005e3e:	6a0b      	ldr	r3, [r1, #32]
 8005e40:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e42:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8005e44:	401a      	ands	r2, r3
 8005e46:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8005e48:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8005e4c:	401a      	ands	r2, r3
 8005e4e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8005e50:	4313      	orrs	r3, r2
 8005e52:	e7e7      	b.n	8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 8005e54:	2002      	movs	r0, #2
 8005e56:	e7ea      	b.n	8005e2e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8005e58:	fffffcff 	.word	0xfffffcff
 8005e5c:	fffffbff 	.word	0xfffffbff
 8005e60:	fffff7ff 	.word	0xfffff7ff
 8005e64:	ffffefff 	.word	0xffffefff
 8005e68:	ffffdfff 	.word	0xffffdfff
 8005e6c:	ffffbfff 	.word	0xffffbfff
 8005e70:	fff0ffff 	.word	0xfff0ffff
 8005e74:	efffffff 	.word	0xefffffff
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	ff0fffff 	.word	0xff0fffff
 8005e80:	feffffff 	.word	0xfeffffff
 8005e84:	fdffffff 	.word	0xfdffffff
 8005e88:	dfffffff 	.word	0xdfffffff

08005e8c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e90:	4770      	bx	lr
	...

08005e94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e94:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e96:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005ea0:	6801      	ldr	r1, [r0, #0]
 8005ea2:	680b      	ldr	r3, [r1, #0]
 8005ea4:	25c0      	movs	r5, #192	@ 0xc0
 8005ea6:	43ab      	bics	r3, r5
 8005ea8:	600b      	str	r3, [r1, #0]
 8005eaa:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005eb6:	6802      	ldr	r2, [r0, #0]
 8005eb8:	6893      	ldr	r3, [r2, #8]
 8005eba:	4c04      	ldr	r4, [pc, #16]	@ (8005ecc <UART_EndTxTransfer+0x38>)
 8005ebc:	4023      	ands	r3, r4
 8005ebe:	6093      	str	r3, [r2, #8]
 8005ec0:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	2388      	movs	r3, #136	@ 0x88
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	50c2      	str	r2, [r0, r3]
}
 8005eca:	bd30      	pop	{r4, r5, pc}
 8005ecc:	ff7fffff 	.word	0xff7fffff

08005ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005edc:	6801      	ldr	r1, [r0, #0]
 8005ede:	680b      	ldr	r3, [r1, #0]
 8005ee0:	4d12      	ldr	r5, [pc, #72]	@ (8005f2c <UART_EndRxTransfer+0x5c>)
 8005ee2:	402b      	ands	r3, r5
 8005ee4:	600b      	str	r3, [r1, #0]
 8005ee6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ef2:	6802      	ldr	r2, [r0, #0]
 8005ef4:	6893      	ldr	r3, [r2, #8]
 8005ef6:	4c0e      	ldr	r4, [pc, #56]	@ (8005f30 <UART_EndRxTransfer+0x60>)
 8005ef8:	4023      	ands	r3, r4
 8005efa:	6093      	str	r3, [r2, #8]
 8005efc:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f00:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d006      	beq.n	8005f14 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f06:	238c      	movs	r3, #140	@ 0x8c
 8005f08:	2220      	movs	r2, #32
 8005f0a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f10:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8005f12:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f14:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f18:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	6802      	ldr	r2, [r0, #0]
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	2410      	movs	r4, #16
 8005f22:	43a3      	bics	r3, r4
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	f381 8810 	msr	PRIMASK, r1
}
 8005f2a:	e7ec      	b.n	8005f06 <UART_EndRxTransfer+0x36>
 8005f2c:	fffffedf 	.word	0xfffffedf
 8005f30:	effffffe 	.word	0xeffffffe

08005f34 <HAL_UART_DeInit>:
{
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005f38:	d01b      	beq.n	8005f72 <HAL_UART_DeInit+0x3e>
  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	2688      	movs	r6, #136	@ 0x88
 8005f3c:	2324      	movs	r3, #36	@ 0x24
 8005f3e:	5183      	str	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8005f40:	6802      	ldr	r2, [r0, #0]
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	2101      	movs	r1, #1
 8005f46:	438b      	bics	r3, r1
 8005f48:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8005f4a:	6803      	ldr	r3, [r0, #0]
 8005f4c:	2500      	movs	r5, #0
 8005f4e:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005f50:	6803      	ldr	r3, [r0, #0]
 8005f52:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005f54:	6803      	ldr	r3, [r0, #0]
 8005f56:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8005f58:	f7fd fb7c 	bl	8003654 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	2390      	movs	r3, #144	@ 0x90
 8005f5e:	50e5      	str	r5, [r4, r3]
  huart->gState = HAL_UART_STATE_RESET;
 8005f60:	51a5      	str	r5, [r4, r6]
  huart->RxState = HAL_UART_STATE_RESET;
 8005f62:	3b04      	subs	r3, #4
 8005f64:	50e5      	str	r5, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f66:	66e5      	str	r5, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f68:	6725      	str	r5, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8005f6a:	3b08      	subs	r3, #8
 8005f6c:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8005f6e:	2000      	movs	r0, #0
}
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005f72:	2001      	movs	r0, #1
 8005f74:	e7fc      	b.n	8005f70 <HAL_UART_DeInit+0x3c>
	...

08005f78 <HAL_UART_Transmit_DMA>:
{
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	0004      	movs	r4, r0
 8005f7c:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005f7e:	2288      	movs	r2, #136	@ 0x88
 8005f80:	5882      	ldr	r2, [r0, r2]
 8005f82:	2a20      	cmp	r2, #32
 8005f84:	d149      	bne.n	800601a <HAL_UART_Transmit_DMA+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8005f86:	2900      	cmp	r1, #0
 8005f88:	d049      	beq.n	800601e <HAL_UART_Transmit_DMA+0xa6>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d049      	beq.n	8006022 <HAL_UART_Transmit_DMA+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8e:	2280      	movs	r2, #128	@ 0x80
 8005f90:	0152      	lsls	r2, r2, #5
 8005f92:	6880      	ldr	r0, [r0, #8]
 8005f94:	4290      	cmp	r0, r2
 8005f96:	d028      	beq.n	8005fea <HAL_UART_Transmit_DMA+0x72>
    huart->pTxBuffPtr  = pData;
 8005f98:	6521      	str	r1, [r4, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005f9a:	2254      	movs	r2, #84	@ 0x54
 8005f9c:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8005f9e:	3202      	adds	r2, #2
 8005fa0:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa2:	323a      	adds	r2, #58	@ 0x3a
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa8:	3a08      	subs	r2, #8
 8005faa:	3121      	adds	r1, #33	@ 0x21
 8005fac:	50a1      	str	r1, [r4, r2]
    if (huart->hdmatx != NULL)
 8005fae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d021      	beq.n	8005ff8 <HAL_UART_Transmit_DMA+0x80>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fb4:	491c      	ldr	r1, [pc, #112]	@ (8006028 <HAL_UART_Transmit_DMA+0xb0>)
 8005fb6:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fb8:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005fba:	491c      	ldr	r1, [pc, #112]	@ (800602c <HAL_UART_Transmit_DMA+0xb4>)
 8005fbc:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005fbe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005fc0:	491b      	ldr	r1, [pc, #108]	@ (8006030 <HAL_UART_Transmit_DMA+0xb8>)
 8005fc2:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005fc4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	3228      	adds	r2, #40	@ 0x28
 8005fce:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005fd0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005fd2:	f7fe fac7 	bl	8004564 <HAL_DMA_Start_IT>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fda:	2390      	movs	r3, #144	@ 0x90
 8005fdc:	2210      	movs	r2, #16
 8005fde:	50e2      	str	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8005fe0:	3b08      	subs	r3, #8
 8005fe2:	3210      	adds	r2, #16
 8005fe4:	50e2      	str	r2, [r4, r3]
        return HAL_ERROR;
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	e018      	b.n	800601c <HAL_UART_Transmit_DMA+0xa4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fea:	6922      	ldr	r2, [r4, #16]
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	d1d3      	bne.n	8005f98 <HAL_UART_Transmit_DMA+0x20>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ff0:	07ca      	lsls	r2, r1, #31
 8005ff2:	d5d1      	bpl.n	8005f98 <HAL_UART_Transmit_DMA+0x20>
        return  HAL_ERROR;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	e011      	b.n	800601c <HAL_UART_Transmit_DMA+0xa4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	2240      	movs	r2, #64	@ 0x40
 8005ffc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006002:	2301      	movs	r3, #1
 8006004:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	6893      	ldr	r3, [r2, #8]
 800600c:	2080      	movs	r0, #128	@ 0x80
 800600e:	4303      	orrs	r3, r0
 8006010:	6093      	str	r3, [r2, #8]
 8006012:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8006016:	2000      	movs	r0, #0
 8006018:	e000      	b.n	800601c <HAL_UART_Transmit_DMA+0xa4>
    return HAL_BUSY;
 800601a:	2002      	movs	r0, #2
}
 800601c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800601e:	2001      	movs	r0, #1
 8006020:	e7fc      	b.n	800601c <HAL_UART_Transmit_DMA+0xa4>
 8006022:	2001      	movs	r0, #1
 8006024:	e7fa      	b.n	800601c <HAL_UART_Transmit_DMA+0xa4>
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	080060e7 	.word	0x080060e7
 800602c:	08006133 	.word	0x08006133
 8006030:	08006143 	.word	0x08006143

08006034 <HAL_UART_DMAStop>:
{
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	0004      	movs	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006038:	2388      	movs	r3, #136	@ 0x88
 800603a:	58c2      	ldr	r2, [r0, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800603c:	3304      	adds	r3, #4
 800603e:	58c5      	ldr	r5, [r0, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006040:	6803      	ldr	r3, [r0, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	d501      	bpl.n	800604c <HAL_UART_DMAStop+0x18>
 8006048:	2a21      	cmp	r2, #33	@ 0x21
 800604a:	d007      	beq.n	800605c <HAL_UART_DMAStop+0x28>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8006050:	2000      	movs	r0, #0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006052:	065b      	lsls	r3, r3, #25
 8006054:	d501      	bpl.n	800605a <HAL_UART_DMAStop+0x26>
 8006056:	2d22      	cmp	r5, #34	@ 0x22
 8006058:	d021      	beq.n	800609e <HAL_UART_DMAStop+0x6a>
}
 800605a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800605c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006060:	2301      	movs	r3, #1
 8006062:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006066:	6802      	ldr	r2, [r0, #0]
 8006068:	6893      	ldr	r3, [r2, #8]
 800606a:	2080      	movs	r0, #128	@ 0x80
 800606c:	4383      	bics	r3, r0
 800606e:	6093      	str	r3, [r2, #8]
 8006070:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmatx != NULL)
 8006074:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8006076:	2800      	cmp	r0, #0
 8006078:	d003      	beq.n	8006082 <HAL_UART_DMAStop+0x4e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800607a:	f7fe fac1 	bl	8004600 <HAL_DMA_Abort>
 800607e:	2800      	cmp	r0, #0
 8006080:	d103      	bne.n	800608a <HAL_UART_DMAStop+0x56>
    UART_EndTxTransfer(huart);
 8006082:	0020      	movs	r0, r4
 8006084:	f7ff ff06 	bl	8005e94 <UART_EndTxTransfer>
 8006088:	e7e0      	b.n	800604c <HAL_UART_DMAStop+0x18>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800608a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800608c:	f7fe fb9e 	bl	80047cc <HAL_DMA_GetError>
 8006090:	2820      	cmp	r0, #32
 8006092:	d1f6      	bne.n	8006082 <HAL_UART_DMAStop+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006094:	2390      	movs	r3, #144	@ 0x90
 8006096:	2210      	movs	r2, #16
 8006098:	50e2      	str	r2, [r4, r3]
          return HAL_TIMEOUT;
 800609a:	381d      	subs	r0, #29
 800609c:	e7dd      	b.n	800605a <HAL_UART_DMAStop+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a2:	2301      	movs	r3, #1
 80060a4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a8:	6822      	ldr	r2, [r4, #0]
 80060aa:	6893      	ldr	r3, [r2, #8]
 80060ac:	3040      	adds	r0, #64	@ 0x40
 80060ae:	4383      	bics	r3, r0
 80060b0:	6093      	str	r3, [r2, #8]
 80060b2:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmarx != NULL)
 80060b6:	2380      	movs	r3, #128	@ 0x80
 80060b8:	58e0      	ldr	r0, [r4, r3]
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_UART_DMAStop+0x92>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80060be:	f7fe fa9f 	bl	8004600 <HAL_DMA_Abort>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d104      	bne.n	80060d0 <HAL_UART_DMAStop+0x9c>
    UART_EndRxTransfer(huart);
 80060c6:	0020      	movs	r0, r4
 80060c8:	f7ff ff02 	bl	8005ed0 <UART_EndRxTransfer>
  return HAL_OK;
 80060cc:	2000      	movs	r0, #0
 80060ce:	e7c4      	b.n	800605a <HAL_UART_DMAStop+0x26>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80060d0:	2380      	movs	r3, #128	@ 0x80
 80060d2:	58e0      	ldr	r0, [r4, r3]
 80060d4:	f7fe fb7a 	bl	80047cc <HAL_DMA_GetError>
 80060d8:	2820      	cmp	r0, #32
 80060da:	d1f4      	bne.n	80060c6 <HAL_UART_DMAStop+0x92>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060dc:	2390      	movs	r3, #144	@ 0x90
 80060de:	2210      	movs	r2, #16
 80060e0:	50e2      	str	r2, [r4, r3]
          return HAL_TIMEOUT;
 80060e2:	381d      	subs	r0, #29
 80060e4:	e7b9      	b.n	800605a <HAL_UART_DMAStop+0x26>

080060e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060e6:	b510      	push	{r4, lr}
 80060e8:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ea:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	069b      	lsls	r3, r3, #26
 80060f2:	d41a      	bmi.n	800612a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 80060f4:	2356      	movs	r3, #86	@ 0x56
 80060f6:	2200      	movs	r2, #0
 80060f8:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fa:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	3201      	adds	r2, #1
 8006100:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006104:	6801      	ldr	r1, [r0, #0]
 8006106:	688b      	ldr	r3, [r1, #8]
 8006108:	2480      	movs	r4, #128	@ 0x80
 800610a:	43a3      	bics	r3, r4
 800610c:	608b      	str	r3, [r1, #8]
 800610e:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006112:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006116:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800611a:	6802      	ldr	r2, [r0, #0]
 800611c:	6813      	ldr	r3, [r2, #0]
 800611e:	2040      	movs	r0, #64	@ 0x40
 8006120:	4303      	orrs	r3, r0
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006128:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 800612a:	f7fc fb9b 	bl	8002864 <HAL_UART_TxCpltCallback>
}
 800612e:	e7fb      	b.n	8006128 <UART_DMATransmitCplt+0x42>

08006130 <HAL_UART_TxHalfCpltCallback>:
}
 8006130:	4770      	bx	lr

08006132 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006132:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006134:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006136:	f7ff fffb 	bl	8006130 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613a:	bd10      	pop	{r4, pc}

0800613c <HAL_UART_RxCpltCallback>:
}
 800613c:	4770      	bx	lr

0800613e <HAL_UART_RxHalfCpltCallback>:
}
 800613e:	4770      	bx	lr

08006140 <HAL_UART_ErrorCallback>:
}
 8006140:	4770      	bx	lr

08006142 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006142:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006144:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006146:	2388      	movs	r3, #136	@ 0x88
 8006148:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800614a:	3304      	adds	r3, #4
 800614c:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	061b      	lsls	r3, r3, #24
 8006154:	d501      	bpl.n	800615a <UART_DMAError+0x18>
 8006156:	2a21      	cmp	r2, #33	@ 0x21
 8006158:	d00e      	beq.n	8006178 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	065b      	lsls	r3, r3, #25
 8006160:	d501      	bpl.n	8006166 <UART_DMAError+0x24>
 8006162:	2d22      	cmp	r5, #34	@ 0x22
 8006164:	d00f      	beq.n	8006186 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006166:	2290      	movs	r2, #144	@ 0x90
 8006168:	58a3      	ldr	r3, [r4, r2]
 800616a:	2110      	movs	r1, #16
 800616c:	430b      	orrs	r3, r1
 800616e:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006170:	0020      	movs	r0, r4
 8006172:	f7ff ffe5 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006176:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8006178:	2356      	movs	r3, #86	@ 0x56
 800617a:	2200      	movs	r2, #0
 800617c:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 800617e:	0020      	movs	r0, r4
 8006180:	f7ff fe88 	bl	8005e94 <UART_EndTxTransfer>
 8006184:	e7e9      	b.n	800615a <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8006186:	235e      	movs	r3, #94	@ 0x5e
 8006188:	2200      	movs	r2, #0
 800618a:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 800618c:	0020      	movs	r0, r4
 800618e:	f7ff fe9f 	bl	8005ed0 <UART_EndRxTransfer>
 8006192:	e7e8      	b.n	8006166 <UART_DMAError+0x24>

08006194 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006194:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006196:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	225e      	movs	r2, #94	@ 0x5e
 800619c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800619e:	3a08      	subs	r2, #8
 80061a0:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061a2:	f7ff ffcd 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061a6:	bd10      	pop	{r4, pc}

080061a8 <HAL_UART_IRQHandler>:
{
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061ac:	6802      	ldr	r2, [r0, #0]
 80061ae:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b0:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b2:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061b4:	4dbb      	ldr	r5, [pc, #748]	@ (80064a4 <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 80061b6:	422b      	tst	r3, r5
 80061b8:	d10e      	bne.n	80061d8 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ba:	069d      	lsls	r5, r3, #26
 80061bc:	d512      	bpl.n	80061e4 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061be:	2520      	movs	r5, #32
 80061c0:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061c2:	2680      	movs	r6, #128	@ 0x80
 80061c4:	0576      	lsls	r6, r6, #21
 80061c6:	4006      	ands	r6, r0
 80061c8:	4335      	orrs	r5, r6
 80061ca:	d00b      	beq.n	80061e4 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 80061cc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02a      	beq.n	8006228 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 80061d2:	0020      	movs	r0, r4
 80061d4:	4798      	blx	r3
 80061d6:	e027      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061d8:	4eb3      	ldr	r6, [pc, #716]	@ (80064a8 <HAL_UART_IRQHandler+0x300>)
 80061da:	4006      	ands	r6, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061dc:	4db3      	ldr	r5, [pc, #716]	@ (80064ac <HAL_UART_IRQHandler+0x304>)
 80061de:	400d      	ands	r5, r1
 80061e0:	4335      	orrs	r5, r6
 80061e2:	d122      	bne.n	800622a <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e4:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80061e6:	2d01      	cmp	r5, #1
 80061e8:	d100      	bne.n	80061ec <HAL_UART_IRQHandler+0x44>
 80061ea:	e0ad      	b.n	8006348 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061ec:	02dd      	lsls	r5, r3, #11
 80061ee:	d502      	bpl.n	80061f6 <HAL_UART_IRQHandler+0x4e>
 80061f0:	0245      	lsls	r5, r0, #9
 80061f2:	d500      	bpl.n	80061f6 <HAL_UART_IRQHandler+0x4e>
 80061f4:	e147      	b.n	8006486 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061f6:	061a      	lsls	r2, r3, #24
 80061f8:	d507      	bpl.n	800620a <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061fa:	2280      	movs	r2, #128	@ 0x80
 80061fc:	400a      	ands	r2, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061fe:	2580      	movs	r5, #128	@ 0x80
 8006200:	042d      	lsls	r5, r5, #16
 8006202:	4028      	ands	r0, r5
 8006204:	4302      	orrs	r2, r0
 8006206:	d000      	beq.n	800620a <HAL_UART_IRQHandler+0x62>
 8006208:	e144      	b.n	8006494 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800620a:	065a      	lsls	r2, r3, #25
 800620c:	d502      	bpl.n	8006214 <HAL_UART_IRQHandler+0x6c>
 800620e:	064a      	lsls	r2, r1, #25
 8006210:	d500      	bpl.n	8006214 <HAL_UART_IRQHandler+0x6c>
 8006212:	e155      	b.n	80064c0 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006214:	021a      	lsls	r2, r3, #8
 8006216:	d502      	bpl.n	800621e <HAL_UART_IRQHandler+0x76>
 8006218:	004a      	lsls	r2, r1, #1
 800621a:	d500      	bpl.n	800621e <HAL_UART_IRQHandler+0x76>
 800621c:	e165      	b.n	80064ea <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800621e:	01db      	lsls	r3, r3, #7
 8006220:	d502      	bpl.n	8006228 <HAL_UART_IRQHandler+0x80>
 8006222:	2900      	cmp	r1, #0
 8006224:	da00      	bge.n	8006228 <HAL_UART_IRQHandler+0x80>
 8006226:	e164      	b.n	80064f2 <HAL_UART_IRQHandler+0x34a>
}
 8006228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800622a:	07dd      	lsls	r5, r3, #31
 800622c:	d507      	bpl.n	800623e <HAL_UART_IRQHandler+0x96>
 800622e:	05cd      	lsls	r5, r1, #23
 8006230:	d505      	bpl.n	800623e <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006232:	2701      	movs	r7, #1
 8006234:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006236:	2590      	movs	r5, #144	@ 0x90
 8006238:	5962      	ldr	r2, [r4, r5]
 800623a:	433a      	orrs	r2, r7
 800623c:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800623e:	079a      	lsls	r2, r3, #30
 8006240:	d56e      	bpl.n	8006320 <HAL_UART_IRQHandler+0x178>
 8006242:	07c2      	lsls	r2, r0, #31
 8006244:	d511      	bpl.n	800626a <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	2502      	movs	r5, #2
 800624a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800624c:	2790      	movs	r7, #144	@ 0x90
 800624e:	59e2      	ldr	r2, [r4, r7]
 8006250:	3502      	adds	r5, #2
 8006252:	432a      	orrs	r2, r5
 8006254:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006256:	421d      	tst	r5, r3
 8006258:	d007      	beq.n	800626a <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	2504      	movs	r5, #4
 800625e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006260:	358c      	adds	r5, #140	@ 0x8c
 8006262:	5962      	ldr	r2, [r4, r5]
 8006264:	2702      	movs	r7, #2
 8006266:	433a      	orrs	r2, r7
 8006268:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800626a:	071a      	lsls	r2, r3, #28
 800626c:	d50a      	bpl.n	8006284 <HAL_UART_IRQHandler+0xdc>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800626e:	2220      	movs	r2, #32
 8006270:	400a      	ands	r2, r1
 8006272:	4332      	orrs	r2, r6
 8006274:	d006      	beq.n	8006284 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006276:	6822      	ldr	r2, [r4, #0]
 8006278:	2608      	movs	r6, #8
 800627a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800627c:	2590      	movs	r5, #144	@ 0x90
 800627e:	5962      	ldr	r2, [r4, r5]
 8006280:	4332      	orrs	r2, r6
 8006282:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006284:	051a      	lsls	r2, r3, #20
 8006286:	d50a      	bpl.n	800629e <HAL_UART_IRQHandler+0xf6>
 8006288:	014a      	lsls	r2, r1, #5
 800628a:	d508      	bpl.n	800629e <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	2580      	movs	r5, #128	@ 0x80
 8006290:	012d      	lsls	r5, r5, #4
 8006292:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006294:	2590      	movs	r5, #144	@ 0x90
 8006296:	5962      	ldr	r2, [r4, r5]
 8006298:	2620      	movs	r6, #32
 800629a:	4332      	orrs	r2, r6
 800629c:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629e:	2290      	movs	r2, #144	@ 0x90
 80062a0:	58a2      	ldr	r2, [r4, r2]
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	d0c0      	beq.n	8006228 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062a6:	069b      	lsls	r3, r3, #26
 80062a8:	d50b      	bpl.n	80062c2 <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062aa:	2320      	movs	r3, #32
 80062ac:	400b      	ands	r3, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062ae:	2280      	movs	r2, #128	@ 0x80
 80062b0:	0552      	lsls	r2, r2, #21
 80062b2:	4002      	ands	r2, r0
 80062b4:	4313      	orrs	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 80062b8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 80062be:	0020      	movs	r0, r4
 80062c0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80062c2:	2390      	movs	r3, #144	@ 0x90
 80062c4:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	2340      	movs	r3, #64	@ 0x40
 80062cc:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ce:	2228      	movs	r2, #40	@ 0x28
 80062d0:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d031      	beq.n	800633a <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 80062d6:	0020      	movs	r0, r4
 80062d8:	f7ff fdfa 	bl	8005ed0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	065b      	lsls	r3, r3, #25
 80062e2:	d526      	bpl.n	8006332 <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e8:	2301      	movs	r3, #1
 80062ea:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	6893      	ldr	r3, [r2, #8]
 80062f2:	2040      	movs	r0, #64	@ 0x40
 80062f4:	4383      	bics	r3, r0
 80062f6:	6093      	str	r3, [r2, #8]
 80062f8:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80062fc:	2380      	movs	r3, #128	@ 0x80
 80062fe:	58e3      	ldr	r3, [r4, r3]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d012      	beq.n	800632a <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006304:	4a6a      	ldr	r2, [pc, #424]	@ (80064b0 <HAL_UART_IRQHandler+0x308>)
 8006306:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006308:	2380      	movs	r3, #128	@ 0x80
 800630a:	58e0      	ldr	r0, [r4, r3]
 800630c:	f7fe f9b8 	bl	8004680 <HAL_DMA_Abort_IT>
 8006310:	2800      	cmp	r0, #0
 8006312:	d100      	bne.n	8006316 <HAL_UART_IRQHandler+0x16e>
 8006314:	e788      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006316:	2380      	movs	r3, #128	@ 0x80
 8006318:	58e0      	ldr	r0, [r4, r3]
 800631a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800631c:	4798      	blx	r3
 800631e:	e783      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006320:	075a      	lsls	r2, r3, #29
 8006322:	d5a2      	bpl.n	800626a <HAL_UART_IRQHandler+0xc2>
 8006324:	07c2      	lsls	r2, r0, #31
 8006326:	d5a0      	bpl.n	800626a <HAL_UART_IRQHandler+0xc2>
 8006328:	e797      	b.n	800625a <HAL_UART_IRQHandler+0xb2>
            HAL_UART_ErrorCallback(huart);
 800632a:	0020      	movs	r0, r4
 800632c:	f7ff ff08 	bl	8006140 <HAL_UART_ErrorCallback>
 8006330:	e77a      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 8006332:	0020      	movs	r0, r4
 8006334:	f7ff ff04 	bl	8006140 <HAL_UART_ErrorCallback>
 8006338:	e776      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 800633a:	0020      	movs	r0, r4
 800633c:	f7ff ff00 	bl	8006140 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006340:	2390      	movs	r3, #144	@ 0x90
 8006342:	2200      	movs	r2, #0
 8006344:	50e2      	str	r2, [r4, r3]
 8006346:	e76f      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006348:	06dd      	lsls	r5, r3, #27
 800634a:	d400      	bmi.n	800634e <HAL_UART_IRQHandler+0x1a6>
 800634c:	e74e      	b.n	80061ec <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800634e:	06cd      	lsls	r5, r1, #27
 8006350:	d400      	bmi.n	8006354 <HAL_UART_IRQHandler+0x1ac>
 8006352:	e74b      	b.n	80061ec <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006354:	2310      	movs	r3, #16
 8006356:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	065b      	lsls	r3, r3, #25
 800635e:	d555      	bpl.n	800640c <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006360:	2380      	movs	r3, #128	@ 0x80
 8006362:	58e2      	ldr	r2, [r4, r3]
 8006364:	6813      	ldr	r3, [r2, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800636a:	2b00      	cmp	r3, #0
 800636c:	d100      	bne.n	8006370 <HAL_UART_IRQHandler+0x1c8>
 800636e:	e75b      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006370:	215c      	movs	r1, #92	@ 0x5c
 8006372:	5a61      	ldrh	r1, [r4, r1]
 8006374:	4299      	cmp	r1, r3
 8006376:	d800      	bhi.n	800637a <HAL_UART_IRQHandler+0x1d2>
 8006378:	e756      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 800637a:	215e      	movs	r1, #94	@ 0x5e
 800637c:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	069b      	lsls	r3, r3, #26
 8006384:	d50b      	bpl.n	800639e <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006386:	2302      	movs	r3, #2
 8006388:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800638a:	335c      	adds	r3, #92	@ 0x5c
 800638c:	5ae3      	ldrh	r3, [r4, r3]
 800638e:	225c      	movs	r2, #92	@ 0x5c
 8006390:	5aa1      	ldrh	r1, [r4, r2]
 8006392:	1ac9      	subs	r1, r1, r3
 8006394:	b289      	uxth	r1, r1
 8006396:	0020      	movs	r0, r4
 8006398:	f7fc fa8c 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
 800639c:	e744      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a2:	2301      	movs	r3, #1
 80063a4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a8:	6821      	ldr	r1, [r4, #0]
 80063aa:	680a      	ldr	r2, [r1, #0]
 80063ac:	4d41      	ldr	r5, [pc, #260]	@ (80064b4 <HAL_UART_IRQHandler+0x30c>)
 80063ae:	402a      	ands	r2, r5
 80063b0:	600a      	str	r2, [r1, #0]
 80063b2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ba:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	6821      	ldr	r1, [r4, #0]
 80063c0:	688a      	ldr	r2, [r1, #8]
 80063c2:	439a      	bics	r2, r3
 80063c4:	608a      	str	r2, [r1, #8]
 80063c6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ce:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d2:	6821      	ldr	r1, [r4, #0]
 80063d4:	688a      	ldr	r2, [r1, #8]
 80063d6:	3542      	adds	r5, #66	@ 0x42
 80063d8:	35ff      	adds	r5, #255	@ 0xff
 80063da:	43aa      	bics	r2, r5
 80063dc:	608a      	str	r2, [r1, #8]
 80063de:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80063e2:	228c      	movs	r2, #140	@ 0x8c
 80063e4:	2120      	movs	r1, #32
 80063e6:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e8:	2200      	movs	r2, #0
 80063ea:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	2010      	movs	r0, #16
 80063fa:	4383      	bics	r3, r0
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006402:	2380      	movs	r3, #128	@ 0x80
 8006404:	58e0      	ldr	r0, [r4, r3]
 8006406:	f7fe f8fb 	bl	8004600 <HAL_DMA_Abort>
 800640a:	e7bc      	b.n	8006386 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800640c:	215e      	movs	r1, #94	@ 0x5e
 800640e:	5a62      	ldrh	r2, [r4, r1]
 8006410:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8006412:	5a63      	ldrh	r3, [r4, r1]
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d100      	bne.n	800641c <HAL_UART_IRQHandler+0x274>
 800641a:	e705      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800641c:	235c      	movs	r3, #92	@ 0x5c
 800641e:	5ae1      	ldrh	r1, [r4, r3]
 8006420:	1a89      	subs	r1, r1, r2
 8006422:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006424:	2900      	cmp	r1, #0
 8006426:	d100      	bne.n	800642a <HAL_UART_IRQHandler+0x282>
 8006428:	e6fe      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642e:	3b5b      	subs	r3, #91	@ 0x5b
 8006430:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	6802      	ldr	r2, [r0, #0]
 8006438:	4e1f      	ldr	r6, [pc, #124]	@ (80064b8 <HAL_UART_IRQHandler+0x310>)
 800643a:	4032      	ands	r2, r6
 800643c:	6002      	str	r2, [r0, #0]
 800643e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006442:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006446:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800644a:	6820      	ldr	r0, [r4, #0]
 800644c:	6882      	ldr	r2, [r0, #8]
 800644e:	4e1b      	ldr	r6, [pc, #108]	@ (80064bc <HAL_UART_IRQHandler+0x314>)
 8006450:	4032      	ands	r2, r6
 8006452:	6082      	str	r2, [r0, #8]
 8006454:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8006458:	228c      	movs	r2, #140	@ 0x8c
 800645a:	2020      	movs	r0, #32
 800645c:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645e:	2200      	movs	r2, #0
 8006460:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8006462:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006464:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006468:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	6813      	ldr	r3, [r2, #0]
 8006470:	2510      	movs	r5, #16
 8006472:	43ab      	bics	r3, r5
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800647a:	2302      	movs	r3, #2
 800647c:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800647e:	0020      	movs	r0, r4
 8006480:	f7fc fa18 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
 8006484:	e6d0      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	035b      	lsls	r3, r3, #13
 800648a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800648c:	0020      	movs	r0, r4
 800648e:	f000 fb37 	bl	8006b00 <HAL_UARTEx_WakeupCallback>
    return;
 8006492:	e6c9      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 8006494:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8006496:	2b00      	cmp	r3, #0
 8006498:	d100      	bne.n	800649c <HAL_UART_IRQHandler+0x2f4>
 800649a:	e6c5      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 800649c:	0020      	movs	r0, r4
 800649e:	4798      	blx	r3
 80064a0:	e6c2      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	0000080f 	.word	0x0000080f
 80064a8:	10000001 	.word	0x10000001
 80064ac:	04000120 	.word	0x04000120
 80064b0:	08006195 	.word	0x08006195
 80064b4:	fffffeff 	.word	0xfffffeff
 80064b8:	fffffedf 	.word	0xfffffedf
 80064bc:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c4:	2301      	movs	r3, #1
 80064c6:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	6813      	ldr	r3, [r2, #0]
 80064ce:	2040      	movs	r0, #64	@ 0x40
 80064d0:	4383      	bics	r3, r0
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d8:	2388      	movs	r3, #136	@ 0x88
 80064da:	2220      	movs	r2, #32
 80064dc:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064e2:	0020      	movs	r0, r4
 80064e4:	f7fc f9be 	bl	8002864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e8:	e69e      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80064ea:	0020      	movs	r0, r4
 80064ec:	f000 fb0a 	bl	8006b04 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80064f0:	e69a      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80064f2:	0020      	movs	r0, r4
 80064f4:	f000 fb05 	bl	8006b02 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80064f8:	e696      	b.n	8006228 <HAL_UART_IRQHandler+0x80>
 80064fa:	46c0      	nop			@ (mov r8, r8)

080064fc <UART_DMARxHalfCplt>:
{
 80064fc:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064fe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006500:	2301      	movs	r3, #1
 8006502:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006504:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d002      	beq.n	8006510 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800650a:	f7ff fe18 	bl	800613e <HAL_UART_RxHalfCpltCallback>
}
 800650e:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006510:	335b      	adds	r3, #91	@ 0x5b
 8006512:	5ac1      	ldrh	r1, [r0, r3]
 8006514:	0849      	lsrs	r1, r1, #1
 8006516:	f7fc f9cd 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
 800651a:	e7f8      	b.n	800650e <UART_DMARxHalfCplt+0x12>

0800651c <UART_DMAReceiveCplt>:
{
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006520:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	069b      	lsls	r3, r3, #26
 8006528:	d429      	bmi.n	800657e <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800652a:	235e      	movs	r3, #94	@ 0x5e
 800652c:	2200      	movs	r2, #0
 800652e:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006530:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006534:	3b5d      	subs	r3, #93	@ 0x5d
 8006536:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800653a:	6801      	ldr	r1, [r0, #0]
 800653c:	680a      	ldr	r2, [r1, #0]
 800653e:	4d1c      	ldr	r5, [pc, #112]	@ (80065b0 <UART_DMAReceiveCplt+0x94>)
 8006540:	402a      	ands	r2, r5
 8006542:	600a      	str	r2, [r1, #0]
 8006544:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006548:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800654c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	6801      	ldr	r1, [r0, #0]
 8006552:	688a      	ldr	r2, [r1, #8]
 8006554:	439a      	bics	r2, r3
 8006556:	608a      	str	r2, [r1, #8]
 8006558:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006560:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006564:	6802      	ldr	r2, [r0, #0]
 8006566:	6893      	ldr	r3, [r2, #8]
 8006568:	2440      	movs	r4, #64	@ 0x40
 800656a:	43a3      	bics	r3, r4
 800656c:	6093      	str	r3, [r2, #8]
 800656e:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8006572:	238c      	movs	r3, #140	@ 0x8c
 8006574:	2220      	movs	r2, #32
 8006576:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006578:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d007      	beq.n	800658e <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800657e:	2300      	movs	r3, #0
 8006580:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006582:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d00e      	beq.n	80065a6 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8006588:	f7ff fdd8 	bl	800613c <HAL_UART_RxCpltCallback>
}
 800658c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800658e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006596:	6802      	ldr	r2, [r0, #0]
 8006598:	6813      	ldr	r3, [r2, #0]
 800659a:	3c30      	subs	r4, #48	@ 0x30
 800659c:	43a3      	bics	r3, r4
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	f381 8810 	msr	PRIMASK, r1
}
 80065a4:	e7eb      	b.n	800657e <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065a6:	335b      	adds	r3, #91	@ 0x5b
 80065a8:	5ac1      	ldrh	r1, [r0, r3]
 80065aa:	f7fc f983 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
 80065ae:	e7ed      	b.n	800658c <UART_DMAReceiveCplt+0x70>
 80065b0:	fffffeff 	.word	0xfffffeff

080065b4 <UART_SetConfig>:
{
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065bc:	6883      	ldr	r3, [r0, #8]
 80065be:	6900      	ldr	r0, [r0, #16]
 80065c0:	4303      	orrs	r3, r0
 80065c2:	6960      	ldr	r0, [r4, #20]
 80065c4:	4303      	orrs	r3, r0
 80065c6:	69e0      	ldr	r0, [r4, #28]
 80065c8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065ca:	4853      	ldr	r0, [pc, #332]	@ (8006718 <UART_SetConfig+0x164>)
 80065cc:	4002      	ands	r2, r0
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	6853      	ldr	r3, [r2, #4]
 80065d6:	4951      	ldr	r1, [pc, #324]	@ (800671c <UART_SetConfig+0x168>)
 80065d8:	400b      	ands	r3, r1
 80065da:	68e1      	ldr	r1, [r4, #12]
 80065dc:	430b      	orrs	r3, r1
 80065de:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80065e6:	6a20      	ldr	r0, [r4, #32]
 80065e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ea:	484d      	ldr	r0, [pc, #308]	@ (8006720 <UART_SetConfig+0x16c>)
 80065ec:	4002      	ands	r2, r0
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80065f6:	210f      	movs	r1, #15
 80065f8:	438b      	bics	r3, r1
 80065fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80065fc:	430b      	orrs	r3, r1
 80065fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	4a48      	ldr	r2, [pc, #288]	@ (8006724 <UART_SetConfig+0x170>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d016      	beq.n	8006636 <UART_SetConfig+0x82>
 8006608:	4a47      	ldr	r2, [pc, #284]	@ (8006728 <UART_SetConfig+0x174>)
 800660a:	4694      	mov	ip, r2
 800660c:	4463      	add	r3, ip
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	4193      	sbcs	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006614:	2280      	movs	r2, #128	@ 0x80
 8006616:	0212      	lsls	r2, r2, #8
 8006618:	69e1      	ldr	r1, [r4, #28]
 800661a:	4291      	cmp	r1, r2
 800661c:	d051      	beq.n	80066c2 <UART_SetConfig+0x10e>
    switch (clocksource)
 800661e:	2001      	movs	r0, #1
 8006620:	2b02      	cmp	r3, #2
 8006622:	d91e      	bls.n	8006662 <UART_SetConfig+0xae>
  huart->NbTxDataToProcess = 1;
 8006624:	2301      	movs	r3, #1
 8006626:	226a      	movs	r2, #106	@ 0x6a
 8006628:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800662a:	3a02      	subs	r2, #2
 800662c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8006632:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8006634:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006636:	4b3d      	ldr	r3, [pc, #244]	@ (800672c <UART_SetConfig+0x178>)
 8006638:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800663a:	2303      	movs	r3, #3
 800663c:	4013      	ands	r3, r2
 800663e:	2b02      	cmp	r3, #2
 8006640:	d038      	beq.n	80066b4 <UART_SetConfig+0x100>
 8006642:	d830      	bhi.n	80066a6 <UART_SetConfig+0xf2>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <UART_SetConfig+0xa6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006648:	2380      	movs	r3, #128	@ 0x80
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	69e2      	ldr	r2, [r4, #28]
 800664e:	429a      	cmp	r2, r3
 8006650:	d05e      	beq.n	8006710 <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006652:	f7fe fcf1 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8006656:	0006      	movs	r6, r0
        break;
 8006658:	e006      	b.n	8006668 <UART_SetConfig+0xb4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800665a:	2300      	movs	r3, #0
 800665c:	e7da      	b.n	8006614 <UART_SetConfig+0x60>
        pclk = (uint32_t) HSI_VALUE;
 800665e:	4b34      	ldr	r3, [pc, #208]	@ (8006730 <UART_SetConfig+0x17c>)
 8006660:	e037      	b.n	80066d2 <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006662:	f7fe fe19 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 8006666:	0006      	movs	r6, r0
    if (pclk != 0U)
 8006668:	2000      	movs	r0, #0
 800666a:	2e00      	cmp	r6, #0
 800666c:	d0da      	beq.n	8006624 <UART_SetConfig+0x70>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666e:	6865      	ldr	r5, [r4, #4]
 8006670:	4b30      	ldr	r3, [pc, #192]	@ (8006734 <UART_SetConfig+0x180>)
 8006672:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006674:	0052      	lsls	r2, r2, #1
 8006676:	5ad1      	ldrh	r1, [r2, r3]
 8006678:	0030      	movs	r0, r6
 800667a:	f7f9 fd41 	bl	8000100 <__udivsi3>
 800667e:	086b      	lsrs	r3, r5, #1
 8006680:	18c0      	adds	r0, r0, r3
 8006682:	0029      	movs	r1, r5
 8006684:	f7f9 fd3c 	bl	8000100 <__udivsi3>
 8006688:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668a:	0001      	movs	r1, r0
 800668c:	3910      	subs	r1, #16
 800668e:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <UART_SetConfig+0x184>)
        ret = HAL_ERROR;
 8006690:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006692:	4291      	cmp	r1, r2
 8006694:	d8c6      	bhi.n	8006624 <UART_SetConfig+0x70>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006696:	6822      	ldr	r2, [r4, #0]
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	60d3      	str	r3, [r2, #12]
 800669e:	2000      	movs	r0, #0
 80066a0:	e7c0      	b.n	8006624 <UART_SetConfig+0x70>
    switch (clocksource)
 80066a2:	2001      	movs	r0, #1
 80066a4:	e7be      	b.n	8006624 <UART_SetConfig+0x70>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a6:	69e3      	ldr	r3, [r4, #28]
 80066a8:	2280      	movs	r2, #128	@ 0x80
 80066aa:	0212      	lsls	r2, r2, #8
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d010      	beq.n	80066d2 <UART_SetConfig+0x11e>
 80066b0:	0016      	movs	r6, r2
 80066b2:	e7dc      	b.n	800666e <UART_SetConfig+0xba>
 80066b4:	2380      	movs	r3, #128	@ 0x80
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	69e2      	ldr	r2, [r4, #28]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d0cf      	beq.n	800665e <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 80066be:	4e1c      	ldr	r6, [pc, #112]	@ (8006730 <UART_SetConfig+0x17c>)
 80066c0:	e7d5      	b.n	800666e <UART_SetConfig+0xba>
    switch (clocksource)
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1ed      	bne.n	80066a2 <UART_SetConfig+0xee>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c6:	f7fe fde7 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 80066ca:	0003      	movs	r3, r0
    if (pclk != 0U)
 80066cc:	2000      	movs	r0, #0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0a8      	beq.n	8006624 <UART_SetConfig+0x70>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d2:	6865      	ldr	r5, [r4, #4]
 80066d4:	4a17      	ldr	r2, [pc, #92]	@ (8006734 <UART_SetConfig+0x180>)
 80066d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80066d8:	0049      	lsls	r1, r1, #1
 80066da:	5a89      	ldrh	r1, [r1, r2]
 80066dc:	0018      	movs	r0, r3
 80066de:	f7f9 fd0f 	bl	8000100 <__udivsi3>
 80066e2:	0040      	lsls	r0, r0, #1
 80066e4:	086b      	lsrs	r3, r5, #1
 80066e6:	18c0      	adds	r0, r0, r3
 80066e8:	0029      	movs	r1, r5
 80066ea:	f7f9 fd09 	bl	8000100 <__udivsi3>
 80066ee:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f0:	0001      	movs	r1, r0
 80066f2:	3910      	subs	r1, #16
 80066f4:	4a10      	ldr	r2, [pc, #64]	@ (8006738 <UART_SetConfig+0x184>)
        ret = HAL_ERROR;
 80066f6:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f8:	4291      	cmp	r1, r2
 80066fa:	d900      	bls.n	80066fe <UART_SetConfig+0x14a>
 80066fc:	e792      	b.n	8006624 <UART_SetConfig+0x70>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066fe:	4a0f      	ldr	r2, [pc, #60]	@ (800673c <UART_SetConfig+0x188>)
 8006700:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8006702:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006704:	071b      	lsls	r3, r3, #28
 8006706:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
 800670c:	2000      	movs	r0, #0
 800670e:	e789      	b.n	8006624 <UART_SetConfig+0x70>
        pclk = HAL_RCC_GetSysClockFreq();
 8006710:	f7fe fc92 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8006714:	0003      	movs	r3, r0
        break;
 8006716:	e7d9      	b.n	80066cc <UART_SetConfig+0x118>
 8006718:	cfff69f3 	.word	0xcfff69f3
 800671c:	ffffcfff 	.word	0xffffcfff
 8006720:	11fff4ff 	.word	0x11fff4ff
 8006724:	40013800 	.word	0x40013800
 8006728:	bfffbc00 	.word	0xbfffbc00
 800672c:	40021000 	.word	0x40021000
 8006730:	00f42400 	.word	0x00f42400
 8006734:	08007108 	.word	0x08007108
 8006738:	0000ffef 	.word	0x0000ffef
 800673c:	0000fff0 	.word	0x0000fff0

08006740 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006740:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006742:	071b      	lsls	r3, r3, #28
 8006744:	d506      	bpl.n	8006754 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006746:	6802      	ldr	r2, [r0, #0]
 8006748:	6853      	ldr	r3, [r2, #4]
 800674a:	492c      	ldr	r1, [pc, #176]	@ (80067fc <UART_AdvFeatureConfig+0xbc>)
 800674c:	400b      	ands	r3, r1
 800674e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006750:	430b      	orrs	r3, r1
 8006752:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006754:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	d506      	bpl.n	8006768 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800675a:	6802      	ldr	r2, [r0, #0]
 800675c:	6853      	ldr	r3, [r2, #4]
 800675e:	4928      	ldr	r1, [pc, #160]	@ (8006800 <UART_AdvFeatureConfig+0xc0>)
 8006760:	400b      	ands	r3, r1
 8006762:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006764:	430b      	orrs	r3, r1
 8006766:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006768:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800676a:	079b      	lsls	r3, r3, #30
 800676c:	d506      	bpl.n	800677c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800676e:	6802      	ldr	r2, [r0, #0]
 8006770:	6853      	ldr	r3, [r2, #4]
 8006772:	4924      	ldr	r1, [pc, #144]	@ (8006804 <UART_AdvFeatureConfig+0xc4>)
 8006774:	400b      	ands	r3, r1
 8006776:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006778:	430b      	orrs	r3, r1
 800677a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800677c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800677e:	075b      	lsls	r3, r3, #29
 8006780:	d506      	bpl.n	8006790 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006782:	6802      	ldr	r2, [r0, #0]
 8006784:	6853      	ldr	r3, [r2, #4]
 8006786:	4920      	ldr	r1, [pc, #128]	@ (8006808 <UART_AdvFeatureConfig+0xc8>)
 8006788:	400b      	ands	r3, r1
 800678a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800678c:	430b      	orrs	r3, r1
 800678e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006790:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006792:	06db      	lsls	r3, r3, #27
 8006794:	d506      	bpl.n	80067a4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006796:	6802      	ldr	r2, [r0, #0]
 8006798:	6893      	ldr	r3, [r2, #8]
 800679a:	491c      	ldr	r1, [pc, #112]	@ (800680c <UART_AdvFeatureConfig+0xcc>)
 800679c:	400b      	ands	r3, r1
 800679e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80067a0:	430b      	orrs	r3, r1
 80067a2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067a4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80067a6:	069b      	lsls	r3, r3, #26
 80067a8:	d506      	bpl.n	80067b8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067aa:	6802      	ldr	r2, [r0, #0]
 80067ac:	6893      	ldr	r3, [r2, #8]
 80067ae:	4918      	ldr	r1, [pc, #96]	@ (8006810 <UART_AdvFeatureConfig+0xd0>)
 80067b0:	400b      	ands	r3, r1
 80067b2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80067b4:	430b      	orrs	r3, r1
 80067b6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80067ba:	065b      	lsls	r3, r3, #25
 80067bc:	d50b      	bpl.n	80067d6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067be:	6802      	ldr	r2, [r0, #0]
 80067c0:	6853      	ldr	r3, [r2, #4]
 80067c2:	4914      	ldr	r1, [pc, #80]	@ (8006814 <UART_AdvFeatureConfig+0xd4>)
 80067c4:	400b      	ands	r3, r1
 80067c6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067cc:	2380      	movs	r3, #128	@ 0x80
 80067ce:	035b      	lsls	r3, r3, #13
 80067d0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067d6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80067d8:	061b      	lsls	r3, r3, #24
 80067da:	d506      	bpl.n	80067ea <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067dc:	6802      	ldr	r2, [r0, #0]
 80067de:	6853      	ldr	r3, [r2, #4]
 80067e0:	490d      	ldr	r1, [pc, #52]	@ (8006818 <UART_AdvFeatureConfig+0xd8>)
 80067e2:	400b      	ands	r3, r1
 80067e4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80067e6:	430b      	orrs	r3, r1
 80067e8:	6053      	str	r3, [r2, #4]
}
 80067ea:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067ec:	6802      	ldr	r2, [r0, #0]
 80067ee:	6853      	ldr	r3, [r2, #4]
 80067f0:	490a      	ldr	r1, [pc, #40]	@ (800681c <UART_AdvFeatureConfig+0xdc>)
 80067f2:	400b      	ands	r3, r1
 80067f4:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6053      	str	r3, [r2, #4]
 80067fa:	e7ec      	b.n	80067d6 <UART_AdvFeatureConfig+0x96>
 80067fc:	ffff7fff 	.word	0xffff7fff
 8006800:	fffdffff 	.word	0xfffdffff
 8006804:	fffeffff 	.word	0xfffeffff
 8006808:	fffbffff 	.word	0xfffbffff
 800680c:	ffffefff 	.word	0xffffefff
 8006810:	ffffdfff 	.word	0xffffdfff
 8006814:	ffefffff 	.word	0xffefffff
 8006818:	fff7ffff 	.word	0xfff7ffff
 800681c:	ff9fffff 	.word	0xff9fffff

08006820 <UART_WaitOnFlagUntilTimeout>:
{
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	46ce      	mov	lr, r9
 8006824:	4647      	mov	r7, r8
 8006826:	b580      	push	{r7, lr}
 8006828:	4680      	mov	r8, r0
 800682a:	000d      	movs	r5, r1
 800682c:	0016      	movs	r6, r2
 800682e:	4699      	mov	r9, r3
 8006830:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006832:	4643      	mov	r3, r8
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69dc      	ldr	r4, [r3, #28]
 8006838:	402c      	ands	r4, r5
 800683a:	1b64      	subs	r4, r4, r5
 800683c:	4262      	negs	r2, r4
 800683e:	4154      	adcs	r4, r2
 8006840:	42b4      	cmp	r4, r6
 8006842:	d136      	bne.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006844:	1c7a      	adds	r2, r7, #1
 8006846:	d0f6      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006848:	f7fc ffd2 	bl	80037f0 <HAL_GetTick>
 800684c:	464b      	mov	r3, r9
 800684e:	1ac0      	subs	r0, r0, r3
 8006850:	42b8      	cmp	r0, r7
 8006852:	d833      	bhi.n	80068bc <UART_WaitOnFlagUntilTimeout+0x9c>
 8006854:	2f00      	cmp	r7, #0
 8006856:	d033      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0xa0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006858:	4643      	mov	r3, r8
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	6813      	ldr	r3, [r2, #0]
 800685e:	075b      	lsls	r3, r3, #29
 8006860:	d5e7      	bpl.n	8006832 <UART_WaitOnFlagUntilTimeout+0x12>
 8006862:	002b      	movs	r3, r5
 8006864:	3b40      	subs	r3, #64	@ 0x40
 8006866:	2140      	movs	r1, #64	@ 0x40
 8006868:	438b      	bics	r3, r1
 800686a:	d0e2      	beq.n	8006832 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800686c:	69d3      	ldr	r3, [r2, #28]
 800686e:	071b      	lsls	r3, r3, #28
 8006870:	d411      	bmi.n	8006896 <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006872:	69d3      	ldr	r3, [r2, #28]
 8006874:	051b      	lsls	r3, r3, #20
 8006876:	d5dc      	bpl.n	8006832 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006878:	2380      	movs	r3, #128	@ 0x80
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 800687e:	4640      	mov	r0, r8
 8006880:	f7ff fb26 	bl	8005ed0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006884:	2390      	movs	r3, #144	@ 0x90
 8006886:	2220      	movs	r2, #32
 8006888:	4641      	mov	r1, r8
 800688a:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 800688c:	3b0c      	subs	r3, #12
 800688e:	2200      	movs	r2, #0
 8006890:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8006892:	2003      	movs	r0, #3
 8006894:	e00e      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006896:	2408      	movs	r4, #8
 8006898:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 800689a:	4640      	mov	r0, r8
 800689c:	f7ff fb18 	bl	8005ed0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068a0:	2390      	movs	r3, #144	@ 0x90
 80068a2:	4642      	mov	r2, r8
 80068a4:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 80068a6:	3b0c      	subs	r3, #12
 80068a8:	2200      	movs	r2, #0
 80068aa:	4641      	mov	r1, r8
 80068ac:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 80068ae:	2001      	movs	r0, #1
 80068b0:	e000      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x94>
  return HAL_OK;
 80068b2:	2000      	movs	r0, #0
}
 80068b4:	bcc0      	pop	{r6, r7}
 80068b6:	46b9      	mov	r9, r7
 80068b8:	46b0      	mov	r8, r6
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80068bc:	2003      	movs	r0, #3
 80068be:	e7f9      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x94>
 80068c0:	2003      	movs	r0, #3
 80068c2:	e7f7      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x94>

080068c4 <UART_CheckIdleState>:
{
 80068c4:	b530      	push	{r4, r5, lr}
 80068c6:	b083      	sub	sp, #12
 80068c8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	2390      	movs	r3, #144	@ 0x90
 80068cc:	2200      	movs	r2, #0
 80068ce:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80068d0:	f7fc ff8e 	bl	80037f0 <HAL_GetTick>
 80068d4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	071b      	lsls	r3, r3, #28
 80068dc:	d411      	bmi.n	8006902 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	075b      	lsls	r3, r3, #29
 80068e4:	d429      	bmi.n	800693a <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 80068e6:	2320      	movs	r3, #32
 80068e8:	2288      	movs	r2, #136	@ 0x88
 80068ea:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80068ec:	3204      	adds	r2, #4
 80068ee:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	2300      	movs	r3, #0
 80068f2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f4:	6723      	str	r3, [r4, #112]	@ 0x70
  return HAL_OK;
 80068f6:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 80068f8:	2384      	movs	r3, #132	@ 0x84
 80068fa:	2200      	movs	r2, #0
 80068fc:	54e2      	strb	r2, [r4, r3]
}
 80068fe:	b003      	add	sp, #12
 8006900:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006902:	2180      	movs	r1, #128	@ 0x80
 8006904:	4b20      	ldr	r3, [pc, #128]	@ (8006988 <UART_CheckIdleState+0xc4>)
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	0003      	movs	r3, r0
 800690a:	2200      	movs	r2, #0
 800690c:	0389      	lsls	r1, r1, #14
 800690e:	0020      	movs	r0, r4
 8006910:	f7ff ff86 	bl	8006820 <UART_WaitOnFlagUntilTimeout>
 8006914:	2800      	cmp	r0, #0
 8006916:	d0e2      	beq.n	80068de <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006918:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691c:	2301      	movs	r3, #1
 800691e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	6813      	ldr	r3, [r2, #0]
 8006926:	2080      	movs	r0, #128	@ 0x80
 8006928:	4383      	bics	r3, r0
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8006930:	2388      	movs	r3, #136	@ 0x88
 8006932:	2220      	movs	r2, #32
 8006934:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8006936:	387d      	subs	r0, #125	@ 0x7d
 8006938:	e7de      	b.n	80068f8 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800693a:	2180      	movs	r1, #128	@ 0x80
 800693c:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <UART_CheckIdleState+0xc4>)
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	002b      	movs	r3, r5
 8006942:	2200      	movs	r2, #0
 8006944:	03c9      	lsls	r1, r1, #15
 8006946:	0020      	movs	r0, r4
 8006948:	f7ff ff6a 	bl	8006820 <UART_WaitOnFlagUntilTimeout>
 800694c:	2800      	cmp	r0, #0
 800694e:	d0ca      	beq.n	80068e6 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006950:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006954:	2201      	movs	r2, #1
 8006956:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800695a:	6821      	ldr	r1, [r4, #0]
 800695c:	680b      	ldr	r3, [r1, #0]
 800695e:	4d0b      	ldr	r5, [pc, #44]	@ (800698c <UART_CheckIdleState+0xc8>)
 8006960:	402b      	ands	r3, r5
 8006962:	600b      	str	r3, [r1, #0]
 8006964:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006968:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006970:	6821      	ldr	r1, [r4, #0]
 8006972:	688b      	ldr	r3, [r1, #8]
 8006974:	4393      	bics	r3, r2
 8006976:	608b      	str	r3, [r1, #8]
 8006978:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800697c:	238c      	movs	r3, #140	@ 0x8c
 800697e:	321f      	adds	r2, #31
 8006980:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8006982:	2003      	movs	r0, #3
 8006984:	e7b8      	b.n	80068f8 <UART_CheckIdleState+0x34>
 8006986:	46c0      	nop			@ (mov r8, r8)
 8006988:	01ffffff 	.word	0x01ffffff
 800698c:	fffffedf 	.word	0xfffffedf

08006990 <HAL_UART_Init>:
{
 8006990:	b510      	push	{r4, lr}
 8006992:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006994:	d030      	beq.n	80069f8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006996:	2388      	movs	r3, #136	@ 0x88
 8006998:	58c3      	ldr	r3, [r0, r3]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d022      	beq.n	80069e4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800699e:	2388      	movs	r3, #136	@ 0x88
 80069a0:	2224      	movs	r2, #36	@ 0x24
 80069a2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80069a4:	6822      	ldr	r2, [r4, #0]
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	2101      	movs	r1, #1
 80069aa:	438b      	bics	r3, r1
 80069ac:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11d      	bne.n	80069f0 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069b4:	0020      	movs	r0, r4
 80069b6:	f7ff fdfd 	bl	80065b4 <UART_SetConfig>
 80069ba:	2801      	cmp	r0, #1
 80069bc:	d011      	beq.n	80069e2 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069be:	6822      	ldr	r2, [r4, #0]
 80069c0:	6853      	ldr	r3, [r2, #4]
 80069c2:	490e      	ldr	r1, [pc, #56]	@ (80069fc <HAL_UART_Init+0x6c>)
 80069c4:	400b      	ands	r3, r1
 80069c6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	6893      	ldr	r3, [r2, #8]
 80069cc:	212a      	movs	r1, #42	@ 0x2a
 80069ce:	438b      	bics	r3, r1
 80069d0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	3929      	subs	r1, #41	@ 0x29
 80069d8:	430b      	orrs	r3, r1
 80069da:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80069dc:	0020      	movs	r0, r4
 80069de:	f7ff ff71 	bl	80068c4 <UART_CheckIdleState>
}
 80069e2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80069e4:	3384      	adds	r3, #132	@ 0x84
 80069e6:	2200      	movs	r2, #0
 80069e8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80069ea:	f7fc fdad 	bl	8003548 <HAL_UART_MspInit>
 80069ee:	e7d6      	b.n	800699e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80069f0:	0020      	movs	r0, r4
 80069f2:	f7ff fea5 	bl	8006740 <UART_AdvFeatureConfig>
 80069f6:	e7dd      	b.n	80069b4 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 80069f8:	2001      	movs	r0, #1
 80069fa:	e7f2      	b.n	80069e2 <HAL_UART_Init+0x52>
 80069fc:	ffffb7ff 	.word	0xffffb7ff

08006a00 <UART_Start_Receive_DMA>:
{
 8006a00:	b510      	push	{r4, lr}
 8006a02:	0004      	movs	r4, r0
 8006a04:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8006a06:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006a08:	225c      	movs	r2, #92	@ 0x5c
 8006a0a:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	3234      	adds	r2, #52	@ 0x34
 8006a0e:	2100      	movs	r1, #0
 8006a10:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a12:	3a04      	subs	r2, #4
 8006a14:	3122      	adds	r1, #34	@ 0x22
 8006a16:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8006a18:	3a0c      	subs	r2, #12
 8006a1a:	5882      	ldr	r2, [r0, r2]
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d013      	beq.n	8006a48 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a20:	4921      	ldr	r1, [pc, #132]	@ (8006aa8 <UART_Start_Receive_DMA+0xa8>)
 8006a22:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a24:	2080      	movs	r0, #128	@ 0x80
 8006a26:	5822      	ldr	r2, [r4, r0]
 8006a28:	4920      	ldr	r1, [pc, #128]	@ (8006aac <UART_Start_Receive_DMA+0xac>)
 8006a2a:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a2c:	5822      	ldr	r2, [r4, r0]
 8006a2e:	4920      	ldr	r1, [pc, #128]	@ (8006ab0 <UART_Start_Receive_DMA+0xb0>)
 8006a30:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8006a32:	5822      	ldr	r2, [r4, r0]
 8006a34:	2100      	movs	r1, #0
 8006a36:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a38:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006a3a:	6821      	ldr	r1, [r4, #0]
 8006a3c:	3124      	adds	r1, #36	@ 0x24
 8006a3e:	5820      	ldr	r0, [r4, r0]
 8006a40:	f7fd fd90 	bl	8004564 <HAL_DMA_Start_IT>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d126      	bne.n	8006a96 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a4e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a52:	2301      	movs	r3, #1
 8006a54:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	6810      	ldr	r0, [r2, #0]
 8006a5c:	33ff      	adds	r3, #255	@ 0xff
 8006a5e:	4303      	orrs	r3, r0
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a66:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a70:	6821      	ldr	r1, [r4, #0]
 8006a72:	688a      	ldr	r2, [r1, #8]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	608a      	str	r2, [r1, #8]
 8006a78:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a7c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a80:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a84:	6822      	ldr	r2, [r4, #0]
 8006a86:	6893      	ldr	r3, [r2, #8]
 8006a88:	2040      	movs	r0, #64	@ 0x40
 8006a8a:	4303      	orrs	r3, r0
 8006a8c:	6093      	str	r3, [r2, #8]
 8006a8e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8006a92:	2000      	movs	r0, #0
}
 8006a94:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a96:	2390      	movs	r3, #144	@ 0x90
 8006a98:	2210      	movs	r2, #16
 8006a9a:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	3210      	adds	r2, #16
 8006aa0:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	e7f6      	b.n	8006a94 <UART_Start_Receive_DMA+0x94>
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	0800651d 	.word	0x0800651d
 8006aac:	080064fd 	.word	0x080064fd
 8006ab0:	08006143 	.word	0x08006143

08006ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ab8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8006abe:	336a      	adds	r3, #106	@ 0x6a
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	2368      	movs	r3, #104	@ 0x68
 8006ac8:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006acc:	6803      	ldr	r3, [r0, #0]
 8006ace:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ad4:	4f08      	ldr	r7, [pc, #32]	@ (8006af8 <UARTEx_SetNbDataToProcess+0x44>)
 8006ad6:	5cf8      	ldrb	r0, [r7, r3]
 8006ad8:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ada:	4e08      	ldr	r6, [pc, #32]	@ (8006afc <UARTEx_SetNbDataToProcess+0x48>)
 8006adc:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ade:	f7f9 fb99 	bl	8000214 <__divsi3>
 8006ae2:	236a      	movs	r3, #106	@ 0x6a
 8006ae4:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ae6:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ae8:	0f5b      	lsrs	r3, r3, #29
 8006aea:	5cf8      	ldrb	r0, [r7, r3]
 8006aec:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006aee:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006af0:	f7f9 fb90 	bl	8000214 <__divsi3>
 8006af4:	b280      	uxth	r0, r0
 8006af6:	e7e6      	b.n	8006ac6 <UARTEx_SetNbDataToProcess+0x12>
 8006af8:	08007128 	.word	0x08007128
 8006afc:	08007120 	.word	0x08007120

08006b00 <HAL_UARTEx_WakeupCallback>:
}
 8006b00:	4770      	bx	lr

08006b02 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006b02:	4770      	bx	lr

08006b04 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_UARTEx_DisableFifoMode>:
{
 8006b08:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006b0a:	2384      	movs	r3, #132	@ 0x84
 8006b0c:	5cc3      	ldrb	r3, [r0, r3]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d015      	beq.n	8006b3e <HAL_UARTEx_DisableFifoMode+0x36>
 8006b12:	2484      	movs	r4, #132	@ 0x84
 8006b14:	2601      	movs	r6, #1
 8006b16:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b18:	2588      	movs	r5, #136	@ 0x88
 8006b1a:	2324      	movs	r3, #36	@ 0x24
 8006b1c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1e:	6802      	ldr	r2, [r0, #0]
 8006b20:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006b22:	6811      	ldr	r1, [r2, #0]
 8006b24:	43b1      	bics	r1, r6
 8006b26:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b28:	4a06      	ldr	r2, [pc, #24]	@ (8006b44 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8006b2a:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b30:	6801      	ldr	r1, [r0, #0]
 8006b32:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b34:	2320      	movs	r3, #32
 8006b36:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8006b38:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8006b3a:	2000      	movs	r0, #0
}
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8006b3e:	2002      	movs	r0, #2
 8006b40:	e7fc      	b.n	8006b3c <HAL_UARTEx_DisableFifoMode+0x34>
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	dfffffff 	.word	0xdfffffff

08006b48 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	0004      	movs	r4, r0
 8006b4c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8006b4e:	2384      	movs	r3, #132	@ 0x84
 8006b50:	5cc3      	ldrb	r3, [r0, r3]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d01b      	beq.n	8006b8e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006b56:	2584      	movs	r5, #132	@ 0x84
 8006b58:	2001      	movs	r0, #1
 8006b5a:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b5c:	2688      	movs	r6, #136	@ 0x88
 8006b5e:	2324      	movs	r3, #36	@ 0x24
 8006b60:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006b66:	6819      	ldr	r1, [r3, #0]
 8006b68:	4381      	bics	r1, r0
 8006b6a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	6883      	ldr	r3, [r0, #8]
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	08d9      	lsrs	r1, r3, #3
 8006b74:	4311      	orrs	r1, r2
 8006b76:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006b78:	0020      	movs	r0, r4
 8006b7a:	f7ff ff9b 	bl	8006ab4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b82:	2320      	movs	r3, #32
 8006b84:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8006b86:	2300      	movs	r3, #0
 8006b88:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006b8a:	2000      	movs	r0, #0
}
 8006b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8006b8e:	2002      	movs	r0, #2
 8006b90:	e7fc      	b.n	8006b8c <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08006b94 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	0004      	movs	r4, r0
 8006b98:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8006b9a:	2284      	movs	r2, #132	@ 0x84
 8006b9c:	5c82      	ldrb	r2, [r0, r2]
 8006b9e:	2a01      	cmp	r2, #1
 8006ba0:	d01b      	beq.n	8006bda <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006ba2:	2584      	movs	r5, #132	@ 0x84
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ba8:	2688      	movs	r6, #136	@ 0x88
 8006baa:	2224      	movs	r2, #36	@ 0x24
 8006bac:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006bb2:	6811      	ldr	r1, [r2, #0]
 8006bb4:	4381      	bics	r1, r0
 8006bb6:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bb8:	6822      	ldr	r2, [r4, #0]
 8006bba:	6891      	ldr	r1, [r2, #8]
 8006bbc:	4808      	ldr	r0, [pc, #32]	@ (8006be0 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8006bbe:	4001      	ands	r1, r0
 8006bc0:	4319      	orrs	r1, r3
 8006bc2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006bc4:	0020      	movs	r0, r4
 8006bc6:	f7ff ff75 	bl	8006ab4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006bce:	2320      	movs	r3, #32
 8006bd0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006bd6:	2000      	movs	r0, #0
}
 8006bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8006bda:	2002      	movs	r0, #2
 8006bdc:	e7fc      	b.n	8006bd8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	f1ffffff 	.word	0xf1ffffff

08006be4 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8006be4:	b510      	push	{r4, lr}
 8006be6:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006be8:	238c      	movs	r3, #140	@ 0x8c
 8006bea:	58c3      	ldr	r3, [r0, r3]
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d12b      	bne.n	8006c48 <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8006bf0:	2900      	cmp	r1, #0
 8006bf2:	d02b      	beq.n	8006c4c <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d02b      	beq.n	8006c50 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf8:	2380      	movs	r3, #128	@ 0x80
 8006bfa:	015b      	lsls	r3, r3, #5
 8006bfc:	6880      	ldr	r0, [r0, #8]
 8006bfe:	4298      	cmp	r0, r3
 8006c00:	d105      	bne.n	8006c0e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
        return  HAL_ERROR;
 8006c08:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c0a:	07cb      	lsls	r3, r1, #31
 8006c0c:	d41d      	bmi.n	8006c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	66e3      	str	r3, [r4, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c12:	2300      	movs	r3, #0
 8006c14:	6723      	str	r3, [r4, #112]	@ 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006c16:	0020      	movs	r0, r4
 8006c18:	f7ff fef2 	bl	8006a00 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d114      	bne.n	8006c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c20:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d001      	beq.n	8006c2a <HAL_UARTEx_ReceiveToIdle_DMA+0x46>
        status = HAL_ERROR;
 8006c26:	2001      	movs	r0, #1
 8006c28:	e00f      	b.n	8006c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	2110      	movs	r1, #16
 8006c2e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c30:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c34:	2301      	movs	r3, #1
 8006c36:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3a:	6822      	ldr	r2, [r4, #0]
 8006c3c:	6813      	ldr	r3, [r2, #0]
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	f38c 8810 	msr	PRIMASK, ip
}
 8006c46:	e000      	b.n	8006c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    return HAL_BUSY;
 8006c48:	2002      	movs	r0, #2
}
 8006c4a:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7fc      	b.n	8006c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006c50:	2001      	movs	r0, #1
 8006c52:	e7fa      	b.n	8006c4a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>

08006c54 <logf>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	1c05      	adds	r5, r0, #0
 8006c58:	f000 f82c 	bl	8006cb4 <__ieee754_logf>
 8006c5c:	1c29      	adds	r1, r5, #0
 8006c5e:	1c04      	adds	r4, r0, #0
 8006c60:	1c28      	adds	r0, r5, #0
 8006c62:	f7fa fb99 	bl	8001398 <__aeabi_fcmpun>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d110      	bne.n	8006c8c <logf+0x38>
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	1c28      	adds	r0, r5, #0
 8006c6e:	f7f9 fbe3 	bl	8000438 <__aeabi_fcmpgt>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d10a      	bne.n	8006c8c <logf+0x38>
 8006c76:	2100      	movs	r1, #0
 8006c78:	1c28      	adds	r0, r5, #0
 8006c7a:	f7f9 fbc3 	bl	8000404 <__aeabi_fcmpeq>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d006      	beq.n	8006c90 <logf+0x3c>
 8006c82:	f000 f951 	bl	8006f28 <__errno>
 8006c86:	2322      	movs	r3, #34	@ 0x22
 8006c88:	4c06      	ldr	r4, [pc, #24]	@ (8006ca4 <logf+0x50>)
 8006c8a:	6003      	str	r3, [r0, #0]
 8006c8c:	1c20      	adds	r0, r4, #0
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	f000 f94a 	bl	8006f28 <__errno>
 8006c94:	2321      	movs	r3, #33	@ 0x21
 8006c96:	6003      	str	r3, [r0, #0]
 8006c98:	4803      	ldr	r0, [pc, #12]	@ (8006ca8 <logf+0x54>)
 8006c9a:	f000 f807 	bl	8006cac <nanf>
 8006c9e:	1c04      	adds	r4, r0, #0
 8006ca0:	e7f4      	b.n	8006c8c <logf+0x38>
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	ff800000 	.word	0xff800000
 8006ca8:	08007130 	.word	0x08007130

08006cac <nanf>:
 8006cac:	4800      	ldr	r0, [pc, #0]	@ (8006cb0 <nanf+0x4>)
 8006cae:	4770      	bx	lr
 8006cb0:	7fc00000 	.word	0x7fc00000

08006cb4 <__ieee754_logf>:
 8006cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb6:	0043      	lsls	r3, r0, #1
 8006cb8:	b085      	sub	sp, #20
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <__ieee754_logf+0x18>
 8006cbe:	20cc      	movs	r0, #204	@ 0xcc
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	0600      	lsls	r0, r0, #24
 8006cc4:	f7f9 fddc 	bl	8000880 <__aeabi_fdiv>
 8006cc8:	b005      	add	sp, #20
 8006cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ccc:	1e03      	subs	r3, r0, #0
 8006cce:	da04      	bge.n	8006cda <__ieee754_logf+0x26>
 8006cd0:	1c01      	adds	r1, r0, #0
 8006cd2:	f7fa f8fd 	bl	8000ed0 <__aeabi_fsub>
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	e7f4      	b.n	8006cc4 <__ieee754_logf+0x10>
 8006cda:	21ff      	movs	r1, #255	@ 0xff
 8006cdc:	05c9      	lsls	r1, r1, #23
 8006cde:	4288      	cmp	r0, r1
 8006ce0:	db03      	blt.n	8006cea <__ieee754_logf+0x36>
 8006ce2:	1c01      	adds	r1, r0, #0
 8006ce4:	f7f9 fbda 	bl	800049c <__aeabi_fadd>
 8006ce8:	e7ee      	b.n	8006cc8 <__ieee754_logf+0x14>
 8006cea:	2280      	movs	r2, #128	@ 0x80
 8006cec:	2100      	movs	r1, #0
 8006cee:	0412      	lsls	r2, r2, #16
 8006cf0:	4290      	cmp	r0, r2
 8006cf2:	da06      	bge.n	8006d02 <__ieee754_logf+0x4e>
 8006cf4:	2198      	movs	r1, #152	@ 0x98
 8006cf6:	05c9      	lsls	r1, r1, #23
 8006cf8:	f7f9 ff90 	bl	8000c1c <__aeabi_fmul>
 8006cfc:	2119      	movs	r1, #25
 8006cfe:	0003      	movs	r3, r0
 8006d00:	4249      	negs	r1, r1
 8006d02:	15da      	asrs	r2, r3, #23
 8006d04:	3a7f      	subs	r2, #127	@ 0x7f
 8006d06:	1852      	adds	r2, r2, r1
 8006d08:	2180      	movs	r1, #128	@ 0x80
 8006d0a:	025b      	lsls	r3, r3, #9
 8006d0c:	0a5e      	lsrs	r6, r3, #9
 8006d0e:	4b74      	ldr	r3, [pc, #464]	@ (8006ee0 <__ieee754_logf+0x22c>)
 8006d10:	20fe      	movs	r0, #254	@ 0xfe
 8006d12:	0409      	lsls	r1, r1, #16
 8006d14:	18f3      	adds	r3, r6, r3
 8006d16:	400b      	ands	r3, r1
 8006d18:	21fe      	movs	r1, #254	@ 0xfe
 8006d1a:	0580      	lsls	r0, r0, #22
 8006d1c:	4058      	eors	r0, r3
 8006d1e:	15dd      	asrs	r5, r3, #23
 8006d20:	4330      	orrs	r0, r6
 8006d22:	0589      	lsls	r1, r1, #22
 8006d24:	18ad      	adds	r5, r5, r2
 8006d26:	f7fa f8d3 	bl	8000ed0 <__aeabi_fsub>
 8006d2a:	0032      	movs	r2, r6
 8006d2c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ee4 <__ieee754_logf+0x230>)
 8006d2e:	320f      	adds	r2, #15
 8006d30:	1c04      	adds	r4, r0, #0
 8006d32:	421a      	tst	r2, r3
 8006d34:	d145      	bne.n	8006dc2 <__ieee754_logf+0x10e>
 8006d36:	2100      	movs	r1, #0
 8006d38:	f7f9 fb64 	bl	8000404 <__aeabi_fcmpeq>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d011      	beq.n	8006d64 <__ieee754_logf+0xb0>
 8006d40:	2000      	movs	r0, #0
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	d0c0      	beq.n	8006cc8 <__ieee754_logf+0x14>
 8006d46:	0028      	movs	r0, r5
 8006d48:	f7fa fb5c 	bl	8001404 <__aeabi_i2f>
 8006d4c:	4966      	ldr	r1, [pc, #408]	@ (8006ee8 <__ieee754_logf+0x234>)
 8006d4e:	1c04      	adds	r4, r0, #0
 8006d50:	f7f9 ff64 	bl	8000c1c <__aeabi_fmul>
 8006d54:	4965      	ldr	r1, [pc, #404]	@ (8006eec <__ieee754_logf+0x238>)
 8006d56:	1c05      	adds	r5, r0, #0
 8006d58:	1c20      	adds	r0, r4, #0
 8006d5a:	f7f9 ff5f 	bl	8000c1c <__aeabi_fmul>
 8006d5e:	1c01      	adds	r1, r0, #0
 8006d60:	1c28      	adds	r0, r5, #0
 8006d62:	e7bf      	b.n	8006ce4 <__ieee754_logf+0x30>
 8006d64:	4962      	ldr	r1, [pc, #392]	@ (8006ef0 <__ieee754_logf+0x23c>)
 8006d66:	1c20      	adds	r0, r4, #0
 8006d68:	f7f9 ff58 	bl	8000c1c <__aeabi_fmul>
 8006d6c:	1c01      	adds	r1, r0, #0
 8006d6e:	20fc      	movs	r0, #252	@ 0xfc
 8006d70:	0580      	lsls	r0, r0, #22
 8006d72:	f7fa f8ad 	bl	8000ed0 <__aeabi_fsub>
 8006d76:	1c21      	adds	r1, r4, #0
 8006d78:	1c06      	adds	r6, r0, #0
 8006d7a:	1c20      	adds	r0, r4, #0
 8006d7c:	f7f9 ff4e 	bl	8000c1c <__aeabi_fmul>
 8006d80:	1c01      	adds	r1, r0, #0
 8006d82:	1c30      	adds	r0, r6, #0
 8006d84:	f7f9 ff4a 	bl	8000c1c <__aeabi_fmul>
 8006d88:	1c06      	adds	r6, r0, #0
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	d101      	bne.n	8006d92 <__ieee754_logf+0xde>
 8006d8e:	1c31      	adds	r1, r6, #0
 8006d90:	e079      	b.n	8006e86 <__ieee754_logf+0x1d2>
 8006d92:	0028      	movs	r0, r5
 8006d94:	f7fa fb36 	bl	8001404 <__aeabi_i2f>
 8006d98:	4953      	ldr	r1, [pc, #332]	@ (8006ee8 <__ieee754_logf+0x234>)
 8006d9a:	1c05      	adds	r5, r0, #0
 8006d9c:	f7f9 ff3e 	bl	8000c1c <__aeabi_fmul>
 8006da0:	4952      	ldr	r1, [pc, #328]	@ (8006eec <__ieee754_logf+0x238>)
 8006da2:	1c07      	adds	r7, r0, #0
 8006da4:	1c28      	adds	r0, r5, #0
 8006da6:	f7f9 ff39 	bl	8000c1c <__aeabi_fmul>
 8006daa:	1c01      	adds	r1, r0, #0
 8006dac:	1c30      	adds	r0, r6, #0
 8006dae:	f7fa f88f 	bl	8000ed0 <__aeabi_fsub>
 8006db2:	1c21      	adds	r1, r4, #0
 8006db4:	f7fa f88c 	bl	8000ed0 <__aeabi_fsub>
 8006db8:	1c01      	adds	r1, r0, #0
 8006dba:	1c38      	adds	r0, r7, #0
 8006dbc:	f7fa f888 	bl	8000ed0 <__aeabi_fsub>
 8006dc0:	e782      	b.n	8006cc8 <__ieee754_logf+0x14>
 8006dc2:	2180      	movs	r1, #128	@ 0x80
 8006dc4:	05c9      	lsls	r1, r1, #23
 8006dc6:	f7f9 fb69 	bl	800049c <__aeabi_fadd>
 8006dca:	1c01      	adds	r1, r0, #0
 8006dcc:	1c20      	adds	r0, r4, #0
 8006dce:	f7f9 fd57 	bl	8000880 <__aeabi_fdiv>
 8006dd2:	9000      	str	r0, [sp, #0]
 8006dd4:	0028      	movs	r0, r5
 8006dd6:	f7fa fb15 	bl	8001404 <__aeabi_i2f>
 8006dda:	9900      	ldr	r1, [sp, #0]
 8006ddc:	9001      	str	r0, [sp, #4]
 8006dde:	1c08      	adds	r0, r1, #0
 8006de0:	f7f9 ff1c 	bl	8000c1c <__aeabi_fmul>
 8006de4:	4b43      	ldr	r3, [pc, #268]	@ (8006ef4 <__ieee754_logf+0x240>)
 8006de6:	1c01      	adds	r1, r0, #0
 8006de8:	18f3      	adds	r3, r6, r3
 8006dea:	9303      	str	r3, [sp, #12]
 8006dec:	9002      	str	r0, [sp, #8]
 8006dee:	f7f9 ff15 	bl	8000c1c <__aeabi_fmul>
 8006df2:	4941      	ldr	r1, [pc, #260]	@ (8006ef8 <__ieee754_logf+0x244>)
 8006df4:	1c07      	adds	r7, r0, #0
 8006df6:	f7f9 ff11 	bl	8000c1c <__aeabi_fmul>
 8006dfa:	4940      	ldr	r1, [pc, #256]	@ (8006efc <__ieee754_logf+0x248>)
 8006dfc:	f7f9 fb4e 	bl	800049c <__aeabi_fadd>
 8006e00:	1c39      	adds	r1, r7, #0
 8006e02:	f7f9 ff0b 	bl	8000c1c <__aeabi_fmul>
 8006e06:	493e      	ldr	r1, [pc, #248]	@ (8006f00 <__ieee754_logf+0x24c>)
 8006e08:	f7f9 fb48 	bl	800049c <__aeabi_fadd>
 8006e0c:	1c39      	adds	r1, r7, #0
 8006e0e:	f7f9 ff05 	bl	8000c1c <__aeabi_fmul>
 8006e12:	493c      	ldr	r1, [pc, #240]	@ (8006f04 <__ieee754_logf+0x250>)
 8006e14:	f7f9 fb42 	bl	800049c <__aeabi_fadd>
 8006e18:	9902      	ldr	r1, [sp, #8]
 8006e1a:	f7f9 feff 	bl	8000c1c <__aeabi_fmul>
 8006e1e:	493a      	ldr	r1, [pc, #232]	@ (8006f08 <__ieee754_logf+0x254>)
 8006e20:	9002      	str	r0, [sp, #8]
 8006e22:	1c38      	adds	r0, r7, #0
 8006e24:	f7f9 fefa 	bl	8000c1c <__aeabi_fmul>
 8006e28:	4938      	ldr	r1, [pc, #224]	@ (8006f0c <__ieee754_logf+0x258>)
 8006e2a:	f7f9 fb37 	bl	800049c <__aeabi_fadd>
 8006e2e:	1c39      	adds	r1, r7, #0
 8006e30:	f7f9 fef4 	bl	8000c1c <__aeabi_fmul>
 8006e34:	4936      	ldr	r1, [pc, #216]	@ (8006f10 <__ieee754_logf+0x25c>)
 8006e36:	f7f9 fb31 	bl	800049c <__aeabi_fadd>
 8006e3a:	1c39      	adds	r1, r7, #0
 8006e3c:	f7f9 feee 	bl	8000c1c <__aeabi_fmul>
 8006e40:	1c01      	adds	r1, r0, #0
 8006e42:	9802      	ldr	r0, [sp, #8]
 8006e44:	f7f9 fb2a 	bl	800049c <__aeabi_fadd>
 8006e48:	4b32      	ldr	r3, [pc, #200]	@ (8006f14 <__ieee754_logf+0x260>)
 8006e4a:	9a03      	ldr	r2, [sp, #12]
 8006e4c:	1b9b      	subs	r3, r3, r6
 8006e4e:	1c07      	adds	r7, r0, #0
 8006e50:	4313      	orrs	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd2f      	ble.n	8006eb6 <__ieee754_logf+0x202>
 8006e56:	21fc      	movs	r1, #252	@ 0xfc
 8006e58:	1c20      	adds	r0, r4, #0
 8006e5a:	0589      	lsls	r1, r1, #22
 8006e5c:	f7f9 fede 	bl	8000c1c <__aeabi_fmul>
 8006e60:	1c21      	adds	r1, r4, #0
 8006e62:	f7f9 fedb 	bl	8000c1c <__aeabi_fmul>
 8006e66:	1c01      	adds	r1, r0, #0
 8006e68:	1c06      	adds	r6, r0, #0
 8006e6a:	1c38      	adds	r0, r7, #0
 8006e6c:	f7f9 fb16 	bl	800049c <__aeabi_fadd>
 8006e70:	9900      	ldr	r1, [sp, #0]
 8006e72:	f7f9 fed3 	bl	8000c1c <__aeabi_fmul>
 8006e76:	1c07      	adds	r7, r0, #0
 8006e78:	2d00      	cmp	r5, #0
 8006e7a:	d106      	bne.n	8006e8a <__ieee754_logf+0x1d6>
 8006e7c:	1c01      	adds	r1, r0, #0
 8006e7e:	1c30      	adds	r0, r6, #0
 8006e80:	f7fa f826 	bl	8000ed0 <__aeabi_fsub>
 8006e84:	1c01      	adds	r1, r0, #0
 8006e86:	1c20      	adds	r0, r4, #0
 8006e88:	e798      	b.n	8006dbc <__ieee754_logf+0x108>
 8006e8a:	4917      	ldr	r1, [pc, #92]	@ (8006ee8 <__ieee754_logf+0x234>)
 8006e8c:	9801      	ldr	r0, [sp, #4]
 8006e8e:	f7f9 fec5 	bl	8000c1c <__aeabi_fmul>
 8006e92:	4916      	ldr	r1, [pc, #88]	@ (8006eec <__ieee754_logf+0x238>)
 8006e94:	1c05      	adds	r5, r0, #0
 8006e96:	9801      	ldr	r0, [sp, #4]
 8006e98:	f7f9 fec0 	bl	8000c1c <__aeabi_fmul>
 8006e9c:	1c39      	adds	r1, r7, #0
 8006e9e:	f7f9 fafd 	bl	800049c <__aeabi_fadd>
 8006ea2:	1c01      	adds	r1, r0, #0
 8006ea4:	1c30      	adds	r0, r6, #0
 8006ea6:	f7fa f813 	bl	8000ed0 <__aeabi_fsub>
 8006eaa:	1c21      	adds	r1, r4, #0
 8006eac:	f7fa f810 	bl	8000ed0 <__aeabi_fsub>
 8006eb0:	1c01      	adds	r1, r0, #0
 8006eb2:	1c28      	adds	r0, r5, #0
 8006eb4:	e782      	b.n	8006dbc <__ieee754_logf+0x108>
 8006eb6:	1c01      	adds	r1, r0, #0
 8006eb8:	1c20      	adds	r0, r4, #0
 8006eba:	f7fa f809 	bl	8000ed0 <__aeabi_fsub>
 8006ebe:	9900      	ldr	r1, [sp, #0]
 8006ec0:	f7f9 feac 	bl	8000c1c <__aeabi_fmul>
 8006ec4:	1c06      	adds	r6, r0, #0
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	d100      	bne.n	8006ecc <__ieee754_logf+0x218>
 8006eca:	e760      	b.n	8006d8e <__ieee754_logf+0xda>
 8006ecc:	4906      	ldr	r1, [pc, #24]	@ (8006ee8 <__ieee754_logf+0x234>)
 8006ece:	9801      	ldr	r0, [sp, #4]
 8006ed0:	f7f9 fea4 	bl	8000c1c <__aeabi_fmul>
 8006ed4:	4905      	ldr	r1, [pc, #20]	@ (8006eec <__ieee754_logf+0x238>)
 8006ed6:	1c05      	adds	r5, r0, #0
 8006ed8:	9801      	ldr	r0, [sp, #4]
 8006eda:	f7f9 fe9f 	bl	8000c1c <__aeabi_fmul>
 8006ede:	e7e0      	b.n	8006ea2 <__ieee754_logf+0x1ee>
 8006ee0:	004afb20 	.word	0x004afb20
 8006ee4:	007ffff0 	.word	0x007ffff0
 8006ee8:	3f317180 	.word	0x3f317180
 8006eec:	3717f7d1 	.word	0x3717f7d1
 8006ef0:	3eaaaaab 	.word	0x3eaaaaab
 8006ef4:	ffcf5c30 	.word	0xffcf5c30
 8006ef8:	3e178897 	.word	0x3e178897
 8006efc:	3e3a3325 	.word	0x3e3a3325
 8006f00:	3e924925 	.word	0x3e924925
 8006f04:	3f2aaaab 	.word	0x3f2aaaab
 8006f08:	3e1cd04f 	.word	0x3e1cd04f
 8006f0c:	3e638e29 	.word	0x3e638e29
 8006f10:	3ecccccd 	.word	0x3ecccccd
 8006f14:	0035c288 	.word	0x0035c288

08006f18 <memset>:
 8006f18:	0003      	movs	r3, r0
 8006f1a:	1882      	adds	r2, r0, r2
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d100      	bne.n	8006f22 <memset+0xa>
 8006f20:	4770      	bx	lr
 8006f22:	7019      	strb	r1, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	e7f9      	b.n	8006f1c <memset+0x4>

08006f28 <__errno>:
 8006f28:	4b01      	ldr	r3, [pc, #4]	@ (8006f30 <__errno+0x8>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	4770      	bx	lr
 8006f2e:	46c0      	nop			@ (mov r8, r8)
 8006f30:	20000010 	.word	0x20000010

08006f34 <__libc_init_array>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	2600      	movs	r6, #0
 8006f38:	4c0c      	ldr	r4, [pc, #48]	@ (8006f6c <__libc_init_array+0x38>)
 8006f3a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f70 <__libc_init_array+0x3c>)
 8006f3c:	1b64      	subs	r4, r4, r5
 8006f3e:	10a4      	asrs	r4, r4, #2
 8006f40:	42a6      	cmp	r6, r4
 8006f42:	d109      	bne.n	8006f58 <__libc_init_array+0x24>
 8006f44:	2600      	movs	r6, #0
 8006f46:	f000 f819 	bl	8006f7c <_init>
 8006f4a:	4c0a      	ldr	r4, [pc, #40]	@ (8006f74 <__libc_init_array+0x40>)
 8006f4c:	4d0a      	ldr	r5, [pc, #40]	@ (8006f78 <__libc_init_array+0x44>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	42a6      	cmp	r6, r4
 8006f54:	d105      	bne.n	8006f62 <__libc_init_array+0x2e>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	00b3      	lsls	r3, r6, #2
 8006f5a:	58eb      	ldr	r3, [r5, r3]
 8006f5c:	4798      	blx	r3
 8006f5e:	3601      	adds	r6, #1
 8006f60:	e7ee      	b.n	8006f40 <__libc_init_array+0xc>
 8006f62:	00b3      	lsls	r3, r6, #2
 8006f64:	58eb      	ldr	r3, [r5, r3]
 8006f66:	4798      	blx	r3
 8006f68:	3601      	adds	r6, #1
 8006f6a:	e7f2      	b.n	8006f52 <__libc_init_array+0x1e>
 8006f6c:	08007134 	.word	0x08007134
 8006f70:	08007134 	.word	0x08007134
 8006f74:	08007138 	.word	0x08007138
 8006f78:	08007134 	.word	0x08007134

08006f7c <_init>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	46c0      	nop			@ (mov r8, r8)
 8006f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f82:	bc08      	pop	{r3}
 8006f84:	469e      	mov	lr, r3
 8006f86:	4770      	bx	lr

08006f88 <_fini>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	46c0      	nop			@ (mov r8, r8)
 8006f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8e:	bc08      	pop	{r3}
 8006f90:	469e      	mov	lr, r3
 8006f92:	4770      	bx	lr
