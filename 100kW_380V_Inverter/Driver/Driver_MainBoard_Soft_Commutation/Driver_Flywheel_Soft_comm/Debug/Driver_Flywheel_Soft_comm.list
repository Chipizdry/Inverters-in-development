
Driver_Flywheel_Soft_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000919c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009324  08009324  0000a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800935c  0800935c  0000b014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800935c  0800935c  0000b014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800935c  0800935c  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800935c  0800935c  0000a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009360  08009360  0000a360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08009364  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b014  2**0
                  CONTENTS
 10 .bss          000005a4  20000014  20000014  0000b014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b8  200005b8  0000b014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018962  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030bc  00000000  00000000  000239a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  00026a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001084  00000000  00000000  00027f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002017a  00000000  00000000  00028fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3b8  00000000  00000000  00049146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c40d6  00000000  00000000  000654fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001295d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058cc  00000000  00000000  00129618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0012eee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800930c 	.word	0x0800930c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800930c 	.word	0x0800930c

080001c8 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	781a      	ldrb	r2, [r3, #0]
 80001da:	4b54      	ldr	r3, [pc, #336]	@ (800032c <Registers_handler+0x164>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d020      	beq.n	8000224 <Registers_handler+0x5c>
 80001e2:	2300      	movs	r3, #0
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	e007      	b.n	80001f8 <Registers_handler+0x30>
 80001e8:	8afb      	ldrh	r3, [r7, #22]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	4413      	add	r3, r2
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
 80001f2:	8afb      	ldrh	r3, [r7, #22]
 80001f4:	3301      	adds	r3, #1
 80001f6:	82fb      	strh	r3, [r7, #22]
 80001f8:	8afb      	ldrh	r3, [r7, #22]
 80001fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80001fc:	d9f4      	bls.n	80001e8 <Registers_handler+0x20>
	     RX_2;
 80001fe:	2200      	movs	r2, #0
 8000200:	2104      	movs	r1, #4
 8000202:	484b      	ldr	r0, [pc, #300]	@ (8000330 <Registers_handler+0x168>)
 8000204:	f003 ff40 	bl	8004088 <HAL_GPIO_WritePin>
	    // LED_1_OFF;
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000208:	2240      	movs	r2, #64	@ 0x40
 800020a:	68f9      	ldr	r1, [r7, #12]
 800020c:	4849      	ldr	r0, [pc, #292]	@ (8000334 <Registers_handler+0x16c>)
 800020e:	f008 fffc 	bl	800920a <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000212:	4b49      	ldr	r3, [pc, #292]	@ (8000338 <Registers_handler+0x170>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	4b47      	ldr	r3, [pc, #284]	@ (8000338 <Registers_handler+0x170>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f022 0204 	bic.w	r2, r2, #4
 8000220:	601a      	str	r2, [r3, #0]
		return;}
 8000222:	e080      	b.n	8000326 <Registers_handler+0x15e>


	if (Size < 4) {
 8000224:	887b      	ldrh	r3, [r7, #2]
 8000226:	2b03      	cmp	r3, #3
 8000228:	d805      	bhi.n	8000236 <Registers_handler+0x6e>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 800022a:	2202      	movs	r2, #2
 800022c:	2103      	movs	r1, #3
 800022e:	4841      	ldr	r0, [pc, #260]	@ (8000334 <Registers_handler+0x16c>)
 8000230:	f001 fbd0 	bl	80019d4 <sendError>

	        return;
 8000234:	e077      	b.n	8000326 <Registers_handler+0x15e>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 8000236:	887b      	ldrh	r3, [r7, #2]
 8000238:	3b01      	subs	r3, #1
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	b21a      	sxth	r2, r3
 8000242:	887b      	ldrh	r3, [r7, #2]
 8000244:	3b02      	subs	r3, #2
 8000246:	68f9      	ldr	r1, [r7, #12]
 8000248:	440b      	add	r3, r1
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b21b      	sxth	r3, r3
 800024e:	021b      	lsls	r3, r3, #8
 8000250:	b21b      	sxth	r3, r3
 8000252:	4313      	orrs	r3, r2
 8000254:	b21b      	sxth	r3, r3
 8000256:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 8000258:	887b      	ldrh	r3, [r7, #2]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	3b02      	subs	r3, #2
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4619      	mov	r1, r3
 8000262:	68f8      	ldr	r0, [r7, #12]
 8000264:	f001 fb36 	bl	80018d4 <calcCRC16ModBus>
 8000268:	4603      	mov	r3, r0
 800026a:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 800026c:	8aba      	ldrh	r2, [r7, #20]
 800026e:	8a7b      	ldrh	r3, [r7, #18]
 8000270:	429a      	cmp	r2, r3
 8000272:	d005      	beq.n	8000280 <Registers_handler+0xb8>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 8000274:	2203      	movs	r2, #3
 8000276:	2103      	movs	r1, #3
 8000278:	482e      	ldr	r0, [pc, #184]	@ (8000334 <Registers_handler+0x16c>)
 800027a:	f001 fbab 	bl	80019d4 <sendError>

	        return;
 800027e:	e052      	b.n	8000326 <Registers_handler+0x15e>
	    }


                       uint8_t opCode = rxFrame[1];
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	785b      	ldrb	r3, [r3, #1]
 8000284:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 8000286:	7c7b      	ldrb	r3, [r7, #17]
 8000288:	3b01      	subs	r3, #1
 800028a:	2b0f      	cmp	r3, #15
 800028c:	d844      	bhi.n	8000318 <Registers_handler+0x150>
 800028e:	a201      	add	r2, pc, #4	@ (adr r2, 8000294 <Registers_handler+0xcc>)
 8000290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000294:	080002d5 	.word	0x080002d5
 8000298:	080002e3 	.word	0x080002e3
 800029c:	080002f1 	.word	0x080002f1
 80002a0:	080002fb 	.word	0x080002fb
 80002a4:	08000319 	.word	0x08000319
 80002a8:	08000305 	.word	0x08000305
 80002ac:	08000319 	.word	0x08000319
 80002b0:	08000319 	.word	0x08000319
 80002b4:	08000319 	.word	0x08000319
 80002b8:	08000319 	.word	0x08000319
 80002bc:	08000319 	.word	0x08000319
 80002c0:	08000319 	.word	0x08000319
 80002c4:	08000319 	.word	0x08000319
 80002c8:	08000319 	.word	0x08000319
 80002cc:	08000319 	.word	0x08000319
 80002d0:	0800030f 	.word	0x0800030f
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <Registers_handler+0x174>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4619      	mov	r1, r3
 80002da:	4816      	ldr	r0, [pc, #88]	@ (8000334 <Registers_handler+0x16c>)
 80002dc:	f001 fc9c 	bl	8001c18 <handleReadCoils>
				  			   break;
 80002e0:	e021      	b.n	8000326 <Registers_handler+0x15e>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <Registers_handler+0x178>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4619      	mov	r1, r3
 80002e8:	4812      	ldr	r0, [pc, #72]	@ (8000334 <Registers_handler+0x16c>)
 80002ea:	f001 fcff 	bl	8001cec <handleReadDiscreteInputs>
							   break;
 80002ee:	e01a      	b.n	8000326 <Registers_handler+0x15e>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80002f0:	68b9      	ldr	r1, [r7, #8]
 80002f2:	4810      	ldr	r0, [pc, #64]	@ (8000334 <Registers_handler+0x16c>)
 80002f4:	f001 fb9e 	bl	8001a34 <handleReadHoldingRegs>
				  			   break;
 80002f8:	e015      	b.n	8000326 <Registers_handler+0x15e>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 80002fa:	68b9      	ldr	r1, [r7, #8]
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <Registers_handler+0x16c>)
 80002fe:	f001 fc11 	bl	8001b24 <handleReadInputRegs>

				  			   break;
 8000302:	e010      	b.n	8000326 <Registers_handler+0x15e>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000304:	6879      	ldr	r1, [r7, #4]
 8000306:	480b      	ldr	r0, [pc, #44]	@ (8000334 <Registers_handler+0x16c>)
 8000308:	f001 fd5e 	bl	8001dc8 <handleWriteMulyipleHandlingRegister>

                               break;
 800030c:	e00b      	b.n	8000326 <Registers_handler+0x15e>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800030e:	6879      	ldr	r1, [r7, #4]
 8000310:	4808      	ldr	r0, [pc, #32]	@ (8000334 <Registers_handler+0x16c>)
 8000312:	f001 fd59 	bl	8001dc8 <handleWriteMulyipleHandlingRegister>

                               break;
 8000316:	e006      	b.n	8000326 <Registers_handler+0x15e>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 8000318:	7c7b      	ldrb	r3, [r7, #17]
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	4805      	ldr	r0, [pc, #20]	@ (8000334 <Registers_handler+0x16c>)
 8000320:	f001 fb58 	bl	80019d4 <sendError>
				  			   break;
 8000324:	bf00      	nop
				  			     }



                          }
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000000 	.word	0x20000000
 8000330:	48000c00 	.word	0x48000c00
 8000334:	200004a4 	.word	0x200004a4
 8000338:	2000052c 	.word	0x2000052c
 800033c:	200001b5 	.word	0x200001b5
 8000340:	200001b4 	.word	0x200001b4

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f002 f9d6 	bl	80026f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 fa22 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f000 ff0c 	bl	800116c <MX_GPIO_Init>
  MX_DMA_Init();
 8000354:	f000 fee4 	bl	8001120 <MX_DMA_Init>
  MX_TIM1_Init();
 8000358:	f000 fbc4 	bl	8000ae4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800035c:	f000 fd2c 	bl	8000db8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000360:	f000 fdae 	bl	8000ec0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000364:	f000 fc84 	bl	8000c70 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000368:	f000 feaa 	bl	80010c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800036c:	f000 fb3c 	bl	80009e8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000370:	f000 fa76 	bl	8000860 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000374:	f000 fb78 	bl	8000a68 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000378:	f000 fe50 	bl	800101c <MX_TIM15_Init>
  MX_TIM6_Init();
 800037c:	f000 fd6a 	bl	8000e54 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
   LED_1_ON;
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000386:	48a7      	ldr	r0, [pc, #668]	@ (8000624 <main+0x2e0>)
 8000388:	f003 fe7e 	bl	8004088 <HAL_GPIO_WritePin>
   RX_2;
 800038c:	2200      	movs	r2, #0
 800038e:	2104      	movs	r1, #4
 8000390:	48a5      	ldr	r0, [pc, #660]	@ (8000628 <main+0x2e4>)
 8000392:	f003 fe79 	bl	8004088 <HAL_GPIO_WritePin>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
   HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
   */

   TIM1->ARR=9000;
 8000396:	4ba5      	ldr	r3, [pc, #660]	@ (800062c <main+0x2e8>)
 8000398:	f242 3228 	movw	r2, #9000	@ 0x2328
 800039c:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM8->ARR=9000;
 800039e:	4ba4      	ldr	r3, [pc, #656]	@ (8000630 <main+0x2ec>)
 80003a0:	f242 3228 	movw	r2, #9000	@ 0x2328
 80003a4:	62da      	str	r2, [r3, #44]	@ 0x2c

   DRV_1_ON;
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ac:	48a1      	ldr	r0, [pc, #644]	@ (8000634 <main+0x2f0>)
 80003ae:	f003 fe6b 	bl	8004088 <HAL_GPIO_WritePin>
   DRV_2_ON;
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003b8:	489e      	ldr	r0, [pc, #632]	@ (8000634 <main+0x2f0>)
 80003ba:	f003 fe65 	bl	8004088 <HAL_GPIO_WritePin>
   DRV_3_ON;
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003c4:	489b      	ldr	r0, [pc, #620]	@ (8000634 <main+0x2f0>)
 80003c6:	f003 fe5f 	bl	8004088 <HAL_GPIO_WritePin>
   DRV_4_ON;
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003d0:	4898      	ldr	r0, [pc, #608]	@ (8000634 <main+0x2f0>)
 80003d2:	f003 fe59 	bl	8004088 <HAL_GPIO_WritePin>

   DR_1_OFF;
 80003d6:	2200      	movs	r2, #0
 80003d8:	2108      	movs	r1, #8
 80003da:	4896      	ldr	r0, [pc, #600]	@ (8000634 <main+0x2f0>)
 80003dc:	f003 fe54 	bl	8004088 <HAL_GPIO_WritePin>
   DR_2_OFF;
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	@ 0x80
 80003e4:	4893      	ldr	r0, [pc, #588]	@ (8000634 <main+0x2f0>)
 80003e6:	f003 fe4f 	bl	8004088 <HAL_GPIO_WritePin>
   DR_3_OFF;
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003f0:	4890      	ldr	r0, [pc, #576]	@ (8000634 <main+0x2f0>)
 80003f2:	f003 fe49 	bl	8004088 <HAL_GPIO_WritePin>
   DR_4_OFF;
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003fc:	488d      	ldr	r0, [pc, #564]	@ (8000634 <main+0x2f0>)
 80003fe:	f003 fe43 	bl	8004088 <HAL_GPIO_WritePin>
   DR_5_OFF;
 8000402:	2200      	movs	r2, #0
 8000404:	2104      	movs	r1, #4
 8000406:	4887      	ldr	r0, [pc, #540]	@ (8000624 <main+0x2e0>)
 8000408:	f003 fe3e 	bl	8004088 <HAL_GPIO_WritePin>
   DR_6_OFF;
 800040c:	2200      	movs	r2, #0
 800040e:	2102      	movs	r1, #2
 8000410:	4888      	ldr	r0, [pc, #544]	@ (8000634 <main+0x2f0>)
 8000412:	f003 fe39 	bl	8004088 <HAL_GPIO_WritePin>
   DR_7_OFF;
 8000416:	2200      	movs	r2, #0
 8000418:	2104      	movs	r1, #4
 800041a:	4886      	ldr	r0, [pc, #536]	@ (8000634 <main+0x2f0>)
 800041c:	f003 fe34 	bl	8004088 <HAL_GPIO_WritePin>
   DR_8_OFF;
 8000420:	2200      	movs	r2, #0
 8000422:	2120      	movs	r1, #32
 8000424:	4883      	ldr	r0, [pc, #524]	@ (8000634 <main+0x2f0>)
 8000426:	f003 fe2f 	bl	8004088 <HAL_GPIO_WritePin>

   HAL_TIM_Base_Start_IT(&htim2);
 800042a:	4883      	ldr	r0, [pc, #524]	@ (8000638 <main+0x2f4>)
 800042c:	f005 fc48 	bl	8005cc0 <HAL_TIM_Base_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000430:	2100      	movs	r1, #0
 8000432:	4881      	ldr	r0, [pc, #516]	@ (8000638 <main+0x2f4>)
 8000434:	f005 ff36 	bl	80062a4 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000438:	2104      	movs	r1, #4
 800043a:	487f      	ldr	r0, [pc, #508]	@ (8000638 <main+0x2f4>)
 800043c:	f005 ff32 	bl	80062a4 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000440:	2108      	movs	r1, #8
 8000442:	487d      	ldr	r0, [pc, #500]	@ (8000638 <main+0x2f4>)
 8000444:	f005 ff2e 	bl	80062a4 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000448:	210c      	movs	r1, #12
 800044a:	487b      	ldr	r0, [pc, #492]	@ (8000638 <main+0x2f4>)
 800044c:	f005 ff2a 	bl	80062a4 <HAL_TIM_IC_Start_IT>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000450:	2240      	movs	r2, #64	@ 0x40
 8000452:	497a      	ldr	r1, [pc, #488]	@ (800063c <main+0x2f8>)
 8000454:	487a      	ldr	r0, [pc, #488]	@ (8000640 <main+0x2fc>)
 8000456:	f008 fed8 	bl	800920a <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800045a:	4b7a      	ldr	r3, [pc, #488]	@ (8000644 <main+0x300>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b78      	ldr	r3, [pc, #480]	@ (8000644 <main+0x300>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f022 0204 	bic.w	r2, r2, #4
 8000468:	601a      	str	r2, [r3, #0]
     HAL_TIM_Base_Start_IT(&htim15);
 800046a:	4877      	ldr	r0, [pc, #476]	@ (8000648 <main+0x304>)
 800046c:	f005 fc28 	bl	8005cc0 <HAL_TIM_Base_Start_IT>
     HAL_TIM_Base_Start_IT(&htim3);
 8000470:	4876      	ldr	r0, [pc, #472]	@ (800064c <main+0x308>)
 8000472:	f005 fc25 	bl	8005cc0 <HAL_TIM_Base_Start_IT>
     LED_1_OFF;
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800047c:	4869      	ldr	r0, [pc, #420]	@ (8000624 <main+0x2e0>)
 800047e:	f003 fe03 	bl	8004088 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(auto_mode==0){
 8000482:	4b73      	ldr	r3, [pc, #460]	@ (8000650 <main+0x30c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	f083 0301 	eor.w	r3, r3, #1
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b00      	cmp	r3, #0
 800048e:	d014      	beq.n	80004ba <main+0x176>
	    TIM1->CCR1=rcv_data_reg[0];
 8000490:	4b70      	ldr	r3, [pc, #448]	@ (8000654 <main+0x310>)
 8000492:	881a      	ldrh	r2, [r3, #0]
 8000494:	4b65      	ldr	r3, [pc, #404]	@ (800062c <main+0x2e8>)
 8000496:	635a      	str	r2, [r3, #52]	@ 0x34
	  	TIM1->CCR2=rcv_data_reg[1];
 8000498:	4b6e      	ldr	r3, [pc, #440]	@ (8000654 <main+0x310>)
 800049a:	885a      	ldrh	r2, [r3, #2]
 800049c:	4b63      	ldr	r3, [pc, #396]	@ (800062c <main+0x2e8>)
 800049e:	639a      	str	r2, [r3, #56]	@ 0x38
	  	TIM1->CCR3=rcv_data_reg[2];
 80004a0:	4b6c      	ldr	r3, [pc, #432]	@ (8000654 <main+0x310>)
 80004a2:	889a      	ldrh	r2, [r3, #4]
 80004a4:	4b61      	ldr	r3, [pc, #388]	@ (800062c <main+0x2e8>)
 80004a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	TIM8->CCR1=rcv_data_reg[3];
 80004a8:	4b6a      	ldr	r3, [pc, #424]	@ (8000654 <main+0x310>)
 80004aa:	88da      	ldrh	r2, [r3, #6]
 80004ac:	4b60      	ldr	r3, [pc, #384]	@ (8000630 <main+0x2ec>)
 80004ae:	635a      	str	r2, [r3, #52]	@ 0x34
         pwm=rcv_data_reg[0];
 80004b0:	4b68      	ldr	r3, [pc, #416]	@ (8000654 <main+0x310>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b68      	ldr	r3, [pc, #416]	@ (8000658 <main+0x314>)
 80004b8:	601a      	str	r2, [r3, #0]
	  }

	  if(auto_mode==1){
 80004ba:	4b65      	ldr	r3, [pc, #404]	@ (8000650 <main+0x30c>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d023      	beq.n	800050a <main+0x1c6>

		  if(HAL_GetTick()-auto_mode_timer>=UPDATE_TIME){
 80004c2:	f002 f973 	bl	80027ac <HAL_GetTick>
 80004c6:	4603      	mov	r3, r0
 80004c8:	4a64      	ldr	r2, [pc, #400]	@ (800065c <main+0x318>)
 80004ca:	8812      	ldrh	r2, [r2, #0]
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004d2:	d31a      	bcc.n	800050a <main+0x1c6>
           pwm=pwm+5;
 80004d4:	4b60      	ldr	r3, [pc, #384]	@ (8000658 <main+0x314>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3305      	adds	r3, #5
 80004da:	4a5f      	ldr	r2, [pc, #380]	@ (8000658 <main+0x314>)
 80004dc:	6013      	str	r3, [r2, #0]
           TIM1->CCR1=pwm;
 80004de:	4a53      	ldr	r2, [pc, #332]	@ (800062c <main+0x2e8>)
 80004e0:	4b5d      	ldr	r3, [pc, #372]	@ (8000658 <main+0x314>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6353      	str	r3, [r2, #52]	@ 0x34
           TIM1->CCR2=pwm;
 80004e6:	4a51      	ldr	r2, [pc, #324]	@ (800062c <main+0x2e8>)
 80004e8:	4b5b      	ldr	r3, [pc, #364]	@ (8000658 <main+0x314>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6393      	str	r3, [r2, #56]	@ 0x38
           TIM1->CCR3=pwm;
 80004ee:	4a4f      	ldr	r2, [pc, #316]	@ (800062c <main+0x2e8>)
 80004f0:	4b59      	ldr	r3, [pc, #356]	@ (8000658 <main+0x314>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
           TIM8->CCR1=pwm;
 80004f6:	4a4e      	ldr	r2, [pc, #312]	@ (8000630 <main+0x2ec>)
 80004f8:	4b57      	ldr	r3, [pc, #348]	@ (8000658 <main+0x314>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6353      	str	r3, [r2, #52]	@ 0x34
		  auto_mode_timer=HAL_GetTick();}
 80004fe:	f002 f955 	bl	80027ac <HAL_GetTick>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	4b55      	ldr	r3, [pc, #340]	@ (800065c <main+0x318>)
 8000508:	801a      	strh	r2, [r3, #0]
	  }

	  	TIM1->ARR= rcv_data_reg[4];
 800050a:	4b52      	ldr	r3, [pc, #328]	@ (8000654 <main+0x310>)
 800050c:	891a      	ldrh	r2, [r3, #8]
 800050e:	4b47      	ldr	r3, [pc, #284]	@ (800062c <main+0x2e8>)
 8000510:	62da      	str	r2, [r3, #44]	@ 0x2c
	  	TIM8->ARR= rcv_data_reg[4];
 8000512:	4b50      	ldr	r3, [pc, #320]	@ (8000654 <main+0x310>)
 8000514:	891a      	ldrh	r2, [r3, #8]
 8000516:	4b46      	ldr	r3, [pc, #280]	@ (8000630 <main+0x2ec>)
 8000518:	62da      	str	r2, [r3, #44]	@ 0x2c
	    Check_USART1_Timeout();
 800051a:	f001 f8ef 	bl	80016fc <Check_USART1_Timeout>
	    data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq); //Частота ШИМ ,КГц
 800051e:	4b50      	ldr	r3, [pc, #320]	@ (8000660 <main+0x31c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	4841      	ldr	r0, [pc, #260]	@ (800062c <main+0x2e8>)
 8000526:	f000 fee1 	bl	80012ec <calculateTimerFrequency>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b4d      	ldr	r3, [pc, #308]	@ (8000664 <main+0x320>)
 8000530:	801a      	strh	r2, [r3, #0]
	    data_reg[1]=calculateTimerFrequency(TIM8, timerClockFreq); //Частота ШИМ ,КГц
 8000532:	4b4b      	ldr	r3, [pc, #300]	@ (8000660 <main+0x31c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4619      	mov	r1, r3
 8000538:	483d      	ldr	r0, [pc, #244]	@ (8000630 <main+0x2ec>)
 800053a:	f000 fed7 	bl	80012ec <calculateTimerFrequency>
 800053e:	4603      	mov	r3, r0
 8000540:	461a      	mov	r2, r3
 8000542:	4b48      	ldr	r3, [pc, #288]	@ (8000664 <main+0x320>)
 8000544:	805a      	strh	r2, [r3, #2]
	    data_reg[2]=rpm;       //Скорость об.мин
 8000546:	4b48      	ldr	r3, [pc, #288]	@ (8000668 <main+0x324>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b45      	ldr	r3, [pc, #276]	@ (8000664 <main+0x320>)
 800054e:	809a      	strh	r2, [r3, #4]
	    data_reg[3]=TIM1->ARR; //Период таймера 1
 8000550:	4b36      	ldr	r3, [pc, #216]	@ (800062c <main+0x2e8>)
 8000552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000554:	b29a      	uxth	r2, r3
 8000556:	4b43      	ldr	r3, [pc, #268]	@ (8000664 <main+0x320>)
 8000558:	80da      	strh	r2, [r3, #6]
	    data_reg[4]=pwm;//Значение ШИМ
 800055a:	4b3f      	ldr	r3, [pc, #252]	@ (8000658 <main+0x314>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b40      	ldr	r3, [pc, #256]	@ (8000664 <main+0x320>)
 8000562:	811a      	strh	r2, [r3, #8]
	  //  data_reg[4]=adc_values[1];
	  //  data_reg[5]=adc_values[2];
	  //  data_reg[6]=adc_values[3];


	    coil_1= (rcv_data_reg[7]>>1)&0x01;
 8000564:	4b3b      	ldr	r3, [pc, #236]	@ (8000654 <main+0x310>)
 8000566:	89db      	ldrh	r3, [r3, #14]
 8000568:	085b      	lsrs	r3, r3, #1
 800056a:	b29b      	uxth	r3, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	bf14      	ite	ne
 8000574:	2301      	movne	r3, #1
 8000576:	2300      	moveq	r3, #0
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <main+0x328>)
 800057c:	701a      	strb	r2, [r3, #0]
	    coil_2= (rcv_data_reg[7]>>2)&0x01;
 800057e:	4b35      	ldr	r3, [pc, #212]	@ (8000654 <main+0x310>)
 8000580:	89db      	ldrh	r3, [r3, #14]
 8000582:	089b      	lsrs	r3, r3, #2
 8000584:	b29b      	uxth	r3, r3
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b36      	ldr	r3, [pc, #216]	@ (8000670 <main+0x32c>)
 8000596:	701a      	strb	r2, [r3, #0]
	    coil_3= (rcv_data_reg[7]>>3)&0x01;
 8000598:	4b2e      	ldr	r3, [pc, #184]	@ (8000654 <main+0x310>)
 800059a:	89db      	ldrh	r3, [r3, #14]
 800059c:	08db      	lsrs	r3, r3, #3
 800059e:	b29b      	uxth	r3, r3
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf14      	ite	ne
 80005a8:	2301      	movne	r3, #1
 80005aa:	2300      	moveq	r3, #0
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <main+0x330>)
 80005b0:	701a      	strb	r2, [r3, #0]
	    coil_4= (rcv_data_reg[7]>>4)&0x01;
 80005b2:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <main+0x310>)
 80005b4:	89db      	ldrh	r3, [r3, #14]
 80005b6:	091b      	lsrs	r3, r3, #4
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	bf14      	ite	ne
 80005c2:	2301      	movne	r3, #1
 80005c4:	2300      	moveq	r3, #0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <main+0x334>)
 80005ca:	701a      	strb	r2, [r3, #0]
        auto_mode= (rcv_data_reg[7]>>5)&0x01;
 80005cc:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <main+0x310>)
 80005ce:	89db      	ldrh	r3, [r3, #14]
 80005d0:	095b      	lsrs	r3, r3, #5
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf14      	ite	ne
 80005dc:	2301      	movne	r3, #1
 80005de:	2300      	moveq	r3, #0
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <main+0x30c>)
 80005e4:	701a      	strb	r2, [r3, #0]
	    if(coil_1){LED_4_ON;DRV_1_ON;}
 80005e6:	4b21      	ldr	r3, [pc, #132]	@ (800066c <main+0x328>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d00b      	beq.n	8000606 <main+0x2c2>
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f4:	480b      	ldr	r0, [pc, #44]	@ (8000624 <main+0x2e0>)
 80005f6:	f003 fd47 	bl	8004088 <HAL_GPIO_WritePin>
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <main+0x2f0>)
 8000602:	f003 fd41 	bl	8004088 <HAL_GPIO_WritePin>
	    if(!coil_1){LED_4_OFF;DRV_1_OFF;}
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <main+0x328>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	f083 0301 	eor.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d039      	beq.n	8000688 <main+0x344>
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061a:	4802      	ldr	r0, [pc, #8]	@ (8000624 <main+0x2e0>)
 800061c:	f003 fd34 	bl	8004088 <HAL_GPIO_WritePin>
 8000620:	e02c      	b.n	800067c <main+0x338>
 8000622:	bf00      	nop
 8000624:	48000400 	.word	0x48000400
 8000628:	48000c00 	.word	0x48000c00
 800062c:	40012c00 	.word	0x40012c00
 8000630:	40013400 	.word	0x40013400
 8000634:	48000800 	.word	0x48000800
 8000638:	20000328 	.word	0x20000328
 800063c:	20000034 	.word	0x20000034
 8000640:	200004a4 	.word	0x200004a4
 8000644:	2000052c 	.word	0x2000052c
 8000648:	20000458 	.word	0x20000458
 800064c:	20000374 	.word	0x20000374
 8000650:	200001c0 	.word	0x200001c0
 8000654:	20000194 	.word	0x20000194
 8000658:	200001b8 	.word	0x200001b8
 800065c:	200001b6 	.word	0x200001b6
 8000660:	20000004 	.word	0x20000004
 8000664:	20000174 	.word	0x20000174
 8000668:	200001cc 	.word	0x200001cc
 800066c:	200001bc 	.word	0x200001bc
 8000670:	200001bd 	.word	0x200001bd
 8000674:	200001be 	.word	0x200001be
 8000678:	200001bf 	.word	0x200001bf
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000682:	483d      	ldr	r0, [pc, #244]	@ (8000778 <main+0x434>)
 8000684:	f003 fd00 	bl	8004088 <HAL_GPIO_WritePin>
	    if(coil_2){LED_5_ON;DRV_2_ON;}
 8000688:	4b3c      	ldr	r3, [pc, #240]	@ (800077c <main+0x438>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00b      	beq.n	80006a8 <main+0x364>
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000696:	4838      	ldr	r0, [pc, #224]	@ (8000778 <main+0x434>)
 8000698:	f003 fcf6 	bl	8004088 <HAL_GPIO_WritePin>
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a2:	4835      	ldr	r0, [pc, #212]	@ (8000778 <main+0x434>)
 80006a4:	f003 fcf0 	bl	8004088 <HAL_GPIO_WritePin>
	   	if(!coil_2){LED_5_OFF;DRV_2_OFF;}
 80006a8:	4b34      	ldr	r3, [pc, #208]	@ (800077c <main+0x438>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00b      	beq.n	80006ce <main+0x38a>
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006bc:	482e      	ldr	r0, [pc, #184]	@ (8000778 <main+0x434>)
 80006be:	f003 fce3 	bl	8004088 <HAL_GPIO_WritePin>
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c8:	482b      	ldr	r0, [pc, #172]	@ (8000778 <main+0x434>)
 80006ca:	f003 fcdd 	bl	8004088 <HAL_GPIO_WritePin>
	   	if(coil_3){LED_6_ON;DRV_3_ON;}
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <main+0x43c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00b      	beq.n	80006ee <main+0x3aa>
 80006d6:	2201      	movs	r2, #1
 80006d8:	2110      	movs	r1, #16
 80006da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006de:	f003 fcd3 	bl	8004088 <HAL_GPIO_WritePin>
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e8:	4823      	ldr	r0, [pc, #140]	@ (8000778 <main+0x434>)
 80006ea:	f003 fccd 	bl	8004088 <HAL_GPIO_WritePin>
	    if(!coil_3){LED_6_OFF;DRV_3_OFF;}
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <main+0x43c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <main+0x3d0>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000704:	f003 fcc0 	bl	8004088 <HAL_GPIO_WritePin>
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800070e:	481a      	ldr	r0, [pc, #104]	@ (8000778 <main+0x434>)
 8000710:	f003 fcba 	bl	8004088 <HAL_GPIO_WritePin>
	    if(coil_4){LED_3_ON;DRV_4_ON;}
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <main+0x440>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00b      	beq.n	8000734 <main+0x3f0>
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	4819      	ldr	r0, [pc, #100]	@ (8000788 <main+0x444>)
 8000724:	f003 fcb0 	bl	8004088 <HAL_GPIO_WritePin>
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800072e:	4812      	ldr	r0, [pc, #72]	@ (8000778 <main+0x434>)
 8000730:	f003 fcaa 	bl	8004088 <HAL_GPIO_WritePin>
	    if(!coil_4){LED_3_OFF;DRV_4_OFF;}
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <main+0x440>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	f083 0301 	eor.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00b      	beq.n	800075a <main+0x416>
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000748:	480f      	ldr	r0, [pc, #60]	@ (8000788 <main+0x444>)
 800074a:	f003 fc9d 	bl	8004088 <HAL_GPIO_WritePin>
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	4808      	ldr	r0, [pc, #32]	@ (8000778 <main+0x434>)
 8000756:	f003 fc97 	bl	8004088 <HAL_GPIO_WritePin>

	   // Read_ADC_Values();

if((HAL_GetTick()-moove)>=ROTATE_TIME){rpm=0;}
 800075a:	f002 f827 	bl	80027ac <HAL_GetTick>
 800075e:	4602      	mov	r2, r0
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <main+0x448>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800076a:	f4ff ae8a 	bcc.w	8000482 <main+0x13e>
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <main+0x44c>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
	  if(auto_mode==0){
 8000774:	e685      	b.n	8000482 <main+0x13e>
 8000776:	bf00      	nop
 8000778:	48000800 	.word	0x48000800
 800077c:	200001bd 	.word	0x200001bd
 8000780:	200001be 	.word	0x200001be
 8000784:	200001bf 	.word	0x200001bf
 8000788:	48000400 	.word	0x48000400
 800078c:	200001d0 	.word	0x200001d0
 8000790:	200001cc 	.word	0x200001cc

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09e      	sub	sp, #120	@ 0x78
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800079e:	2228      	movs	r2, #40	@ 0x28
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fd85 	bl	80092b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	223c      	movs	r2, #60	@ 0x3c
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f008 fd77 	bl	80092b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007c4:	2303      	movs	r3, #3
 80007c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007ce:	2301      	movs	r3, #1
 80007d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	2301      	movs	r3, #1
 80007d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d6:	2310      	movs	r3, #16
 80007d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fd94 	bl	800431c <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007fa:	f001 f865 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000818:	2102      	movs	r1, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fd8c 	bl	8005338 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000826:	f001 f84f 	bl	80018c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800082a:	f243 03a1 	movw	r3, #12449	@ 0x30a1
 800082e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f004 ff89 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000854:	f001 f838 	bl	80018c8 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3778      	adds	r7, #120	@ 0x78
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000882:	4b58      	ldr	r3, [pc, #352]	@ (80009e4 <MX_ADC1_Init+0x184>)
 8000884:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000888:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800088a:	4b56      	ldr	r3, [pc, #344]	@ (80009e4 <MX_ADC1_Init+0x184>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000890:	4b54      	ldr	r3, [pc, #336]	@ (80009e4 <MX_ADC1_Init+0x184>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000896:	4b53      	ldr	r3, [pc, #332]	@ (80009e4 <MX_ADC1_Init+0x184>)
 8000898:	2201      	movs	r2, #1
 800089a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800089c:	4b51      	ldr	r3, [pc, #324]	@ (80009e4 <MX_ADC1_Init+0x184>)
 800089e:	2200      	movs	r2, #0
 80008a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a2:	4b50      	ldr	r3, [pc, #320]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008aa:	4b4e      	ldr	r3, [pc, #312]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b4b      	ldr	r3, [pc, #300]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80008bc:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008be:	2208      	movs	r2, #8
 80008c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008c2:	4b48      	ldr	r3, [pc, #288]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ca:	4b46      	ldr	r3, [pc, #280]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008cc:	2204      	movs	r2, #4
 80008ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008d0:	4b44      	ldr	r3, [pc, #272]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008d6:	4b43      	ldr	r3, [pc, #268]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008dc:	4841      	ldr	r0, [pc, #260]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008de:	f001 ff95 	bl	800280c <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 ffee 	bl	80018c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	483b      	ldr	r0, [pc, #236]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80008f8:	f002 fc52 	bl	80031a0 <HAL_ADCEx_MultiModeConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000902:	f000 ffe1 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000906:	2301      	movs	r3, #1
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090a:	2301      	movs	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4830      	ldr	r0, [pc, #192]	@ (80009e4 <MX_ADC1_Init+0x184>)
 8000924:	f002 f952 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800092e:	f000 ffcb 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000932:	2302      	movs	r3, #2
 8000934:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	482a      	ldr	r0, [pc, #168]	@ (80009e4 <MX_ADC1_Init+0x184>)
 800093c:	f002 f946 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000946:	f000 ffbf 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800094a:	2303      	movs	r3, #3
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4824      	ldr	r0, [pc, #144]	@ (80009e4 <MX_ADC1_Init+0x184>)
 8000954:	f002 f93a 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800095e:	f000 ffb3 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000962:	2304      	movs	r3, #4
 8000964:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	481e      	ldr	r0, [pc, #120]	@ (80009e4 <MX_ADC1_Init+0x184>)
 800096c:	f002 f92e 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000976:	f000 ffa7 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800097a:	2305      	movs	r3, #5
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4818      	ldr	r0, [pc, #96]	@ (80009e4 <MX_ADC1_Init+0x184>)
 8000984:	f002 f922 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800098e:	f000 ff9b 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000992:	2306      	movs	r3, #6
 8000994:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <MX_ADC1_Init+0x184>)
 800099c:	f002 f916 	bl	8002bcc <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80009a6:	f000 ff8f 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009aa:	2307      	movs	r3, #7
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80009b4:	f002 f90a 	bl	8002bcc <HAL_ADC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80009be:	f000 ff83 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009c2:	2308      	movs	r3, #8
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <MX_ADC1_Init+0x184>)
 80009cc:	f002 f8fe 	bl	8002bcc <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80009d6:	f000 ff77 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	@ 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200001d4 	.word	0x200001d4

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_I2C1_Init+0x74>)
 80009ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <MX_I2C1_Init+0x78>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_I2C1_Init+0x74>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <MX_I2C1_Init+0x7c>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a22:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a24:	f003 fb48 	bl	80040b8 <HAL_I2C_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2e:	f000 ff4b 	bl	80018c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a36:	f003 fbda 	bl	80041ee <HAL_I2CEx_ConfigAnalogFilter>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f000 ff42 	bl	80018c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a48:	f003 fc1c 	bl	8004284 <HAL_I2CEx_ConfigDigitalFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f000 ff39 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000224 	.word	0x20000224
 8000a60:	40005400 	.word	0x40005400
 8000a64:	00201d2b 	.word	0x00201d2b

08000a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae0 <MX_SPI1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a82:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a9e:	2218      	movs	r2, #24
 8000aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ac8:	f004 fff8 	bl	8005abc <HAL_SPI_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 fef9 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000278 	.word	0x20000278
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09a      	sub	sp, #104	@ 0x68
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	222c      	movs	r2, #44	@ 0x2c
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f008 fbc7 	bl	80092b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b24:	4b50      	ldr	r3, [pc, #320]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b26:	4a51      	ldr	r2, [pc, #324]	@ (8000c6c <MX_TIM1_Init+0x188>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b4d      	ldr	r3, [pc, #308]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000b36:	4b4c      	ldr	r3, [pc, #304]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b38:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b44:	4b48      	ldr	r3, [pc, #288]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b4a:	4b47      	ldr	r3, [pc, #284]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b4c:	2280      	movs	r2, #128	@ 0x80
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b50:	4845      	ldr	r0, [pc, #276]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b52:	f005 f85e 	bl	8005c12 <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b5c:	f000 feb4 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b64:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483e      	ldr	r0, [pc, #248]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b6e:	f005 ff8d 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b78:	f000 fea6 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b7c:	483a      	ldr	r0, [pc, #232]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000b7e:	f005 f938 	bl	8005df2 <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b88:	f000 fe9e 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4832      	ldr	r0, [pc, #200]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000ba0:	f006 ff02 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000baa:	f000 fe8d 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bae:	2360      	movs	r3, #96	@ 0x60
 8000bb0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000bc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4824      	ldr	r0, [pc, #144]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000bd8:	f005 fe44 	bl	8006864 <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000be2:	f000 fe71 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000be6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bea:	2204      	movs	r2, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	481e      	ldr	r0, [pc, #120]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000bf0:	f005 fe38 	bl	8006864 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8000bfa:	f000 fe65 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c02:	2208      	movs	r2, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	4818      	ldr	r0, [pc, #96]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000c08:	f005 fe2c 	bl	8006864 <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000c12:	f000 fe59 	bl	80018c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 8000c22:	2396      	movs	r3, #150	@ 0x96
 8000c24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000c4c:	f006 ff2c 	bl	8007aa8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8000c56:	f000 fe37 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c5a:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <MX_TIM1_Init+0x184>)
 8000c5c:	f001 fb58 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8000c60:	bf00      	nop
 8000c62:	3768      	adds	r7, #104	@ 0x68
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200002dc 	.word	0x200002dc
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	@ 0x30
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9c:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000c9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ca4:	4b43      	ldr	r3, [pc, #268]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b42      	ldr	r3, [pc, #264]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cb0:	4b40      	ldr	r3, [pc, #256]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc4:	483b      	ldr	r0, [pc, #236]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000cc6:	f004 ffa4 	bl	8005c12 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000cd0:	f000 fdfa 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4834      	ldr	r0, [pc, #208]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000ce2:	f005 fed3 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cec:	f000 fdec 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000cf0:	4830      	ldr	r0, [pc, #192]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000cf2:	f005 fa75 	bl	80061e0 <HAL_TIM_IC_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cfc:	f000 fde4 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4829      	ldr	r0, [pc, #164]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000d10:	f006 fe4a 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000d1a:	f000 fdd5 	bl	80018c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d22:	2301      	movs	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	4619      	mov	r1, r3
 8000d34:	481f      	ldr	r0, [pc, #124]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000d36:	f005 fcf9 	bl	800672c <HAL_TIM_IC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000d40:	f000 fdc2 	bl	80018c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2204      	movs	r2, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4817      	ldr	r0, [pc, #92]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000d58:	f005 fce8 	bl	800672c <HAL_TIM_IC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000d62:	f000 fdb1 	bl	80018c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d66:	2302      	movs	r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000d6e:	230f      	movs	r3, #15
 8000d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2208      	movs	r2, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000d7a:	f005 fcd7 	bl	800672c <HAL_TIM_IC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000d84:	f000 fda0 	bl	80018c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	220c      	movs	r2, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_TIM2_Init+0x144>)
 8000d9c:	f005 fcc6 	bl	800672c <HAL_TIM_IC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0x13a>
  {
    Error_Handler();
 8000da6:	f000 fd8f 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3730      	adds	r7, #48	@ 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000328 	.word	0x20000328

08000db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e50 <MX_TIM3_Init+0x98>)
 8000dda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000dde:	22c7      	movs	r2, #199	@ 0xc7
 8000de0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35999;
 8000de8:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000dea:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000dee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000dfe:	f004 ff08 	bl	8005c12 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e08:	f000 fd5e 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000e1a:	f005 fe37 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 fd50 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_TIM3_Init+0x94>)
 8000e36:	f006 fdb7 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 fd42 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000374 	.word	0x20000374
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_TIM6_Init+0x64>)
 8000e66:	4a15      	ldr	r2, [pc, #84]	@ (8000ebc <MX_TIM6_Init+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MX_TIM6_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_TIM6_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <MX_TIM6_Init+0x64>)
 8000e78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_TIM6_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <MX_TIM6_Init+0x64>)
 8000e86:	f004 fec4 	bl	8005c12 <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e90:	f000 fd1a 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_TIM6_Init+0x64>)
 8000ea2:	f006 fd81 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000eac:	f000 fd0c 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200003c0 	.word	0x200003c0
 8000ebc:	40001000 	.word	0x40001000

08000ec0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09a      	sub	sp, #104	@ 0x68
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	222c      	movs	r2, #44	@ 0x2c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f008 f9d9 	bl	80092b2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f00:	4b44      	ldr	r3, [pc, #272]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f02:	4a45      	ldr	r2, [pc, #276]	@ (8001018 <MX_TIM8_Init+0x158>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f06:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b41      	ldr	r3, [pc, #260]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000;
 8000f12:	4b40      	ldr	r3, [pc, #256]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f14:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f20:	4b3c      	ldr	r3, [pc, #240]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b3b      	ldr	r3, [pc, #236]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f2c:	4839      	ldr	r0, [pc, #228]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f2e:	f004 fe70 	bl	8005c12 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000f38:	f000 fcc6 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f40:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f46:	4619      	mov	r1, r3
 8000f48:	4832      	ldr	r0, [pc, #200]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f4a:	f005 fd9f 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000f54:	f000 fcb8 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f58:	482e      	ldr	r0, [pc, #184]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f5a:	f004 ff4a 	bl	8005df2 <HAL_TIM_PWM_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000f64:	f000 fcb0 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4826      	ldr	r0, [pc, #152]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000f7c:	f006 fd14 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000f86:	f000 fc9f 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8a:	2360      	movs	r3, #96	@ 0x60
 8000f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000faa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4818      	ldr	r0, [pc, #96]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000fb4:	f005 fc56 	bl	8006864 <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8000fbe:	f000 fc83 	bl	80018c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fe4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4807      	ldr	r0, [pc, #28]	@ (8001014 <MX_TIM8_Init+0x154>)
 8000ff8:	f006 fd56 	bl	8007aa8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001002:	f000 fc61 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001006:	4803      	ldr	r0, [pc, #12]	@ (8001014 <MX_TIM8_Init+0x154>)
 8001008:	f001 f982 	bl	8002310 <HAL_TIM_MspPostInit>

}
 800100c:	bf00      	nop
 800100e:	3768      	adds	r7, #104	@ 0x68
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000040c 	.word	0x2000040c
 8001018:	40013400 	.word	0x40013400

0800101c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800103a:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 800103c:	4a1f      	ldr	r2, [pc, #124]	@ (80010bc <MX_TIM15_Init+0xa0>)
 800103e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 800104e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001052:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001066:	4814      	ldr	r0, [pc, #80]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 8001068:	f004 fdd3 	bl	8005c12 <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001072:	f000 fc29 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 8001084:	f005 fd02 	bl	8006a8c <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800108e:	f000 fc1b 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <MX_TIM15_Init+0x9c>)
 80010a0:	f006 fc82 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80010aa:	f000 fc0d 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000458 	.word	0x20000458
 80010bc:	40014000 	.word	0x40014000

080010c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <MX_USART1_UART_Init+0x5c>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_USART1_UART_Init+0x58>)
 8001104:	f006 fd91 	bl	8007c2a <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800110e:	f000 fbdb 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200004a4 	.word	0x200004a4
 800111c:	40013800 	.word	0x40013800

08001120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_DMA_Init+0x48>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <MX_DMA_Init+0x48>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <MX_DMA_Init+0x48>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	200e      	movs	r0, #14
 8001144:	f002 fa83 	bl	800364e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001148:	200e      	movs	r0, #14
 800114a:	f002 fa9c 	bl	8003686 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	200f      	movs	r0, #15
 8001154:	f002 fa7b 	bl	800364e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001158:	200f      	movs	r0, #15
 800115a:	f002 fa94 	bl	8003686 <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b56      	ldr	r3, [pc, #344]	@ (80012dc <MX_GPIO_Init+0x170>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a55      	ldr	r2, [pc, #340]	@ (80012dc <MX_GPIO_Init+0x170>)
 8001188:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b53      	ldr	r3, [pc, #332]	@ (80012dc <MX_GPIO_Init+0x170>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4b50      	ldr	r3, [pc, #320]	@ (80012dc <MX_GPIO_Init+0x170>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a4f      	ldr	r2, [pc, #316]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b4d      	ldr	r3, [pc, #308]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a49      	ldr	r2, [pc, #292]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	6153      	str	r3, [r2, #20]
 80011be:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a43      	ldr	r2, [pc, #268]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b41      	ldr	r3, [pc, #260]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b3e      	ldr	r3, [pc, #248]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a3d      	ldr	r2, [pc, #244]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011ec:	6153      	str	r3, [r2, #20]
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <MX_GPIO_Init+0x170>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|DRV_6_Pin
 80011fa:	2200      	movs	r2, #0
 80011fc:	f64f 31ae 	movw	r1, #64430	@ 0xfbae
 8001200:	4837      	ldr	r0, [pc, #220]	@ (80012e0 <MX_GPIO_Init+0x174>)
 8001202:	f002 ff41 	bl	8004088 <HAL_GPIO_WritePin>
                          |DRV_7_Pin|DRV_1_Pin|DRV_8_Pin|DRV_2_Pin
                          |DRV_3_Pin|DRV_4_Pin|LED_5_Pin|PORT_1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2110      	movs	r1, #16
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f002 ff3b 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|DRV_5_Pin|LED_1_Pin
 8001212:	2200      	movs	r2, #0
 8001214:	f647 0107 	movw	r1, #30727	@ 0x7807
 8001218:	4832      	ldr	r0, [pc, #200]	@ (80012e4 <MX_GPIO_Init+0x178>)
 800121a:	f002 ff35 	bl	8004088 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECT_GPIO_Port, DIRECT_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2104      	movs	r1, #4
 8001222:	4831      	ldr	r0, [pc, #196]	@ (80012e8 <MX_GPIO_Init+0x17c>)
 8001224:	f002 ff30 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT_2_EN_Pin PORT_3_EN_Pin PORT_4_EN_Pin DRV_6_Pin
                           DRV_7_Pin DRV_1_Pin DRV_8_Pin DRV_2_Pin
                           DRV_3_Pin DRV_4_Pin LED_5_Pin PORT_1_EN_Pin */
  GPIO_InitStruct.Pin = PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|DRV_6_Pin
 8001228:	f64f 33ae 	movw	r3, #64430	@ 0xfbae
 800122c:	617b      	str	r3, [r7, #20]
                          |DRV_7_Pin|DRV_1_Pin|DRV_8_Pin|DRV_2_Pin
                          |DRV_3_Pin|DRV_4_Pin|LED_5_Pin|PORT_1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4827      	ldr	r0, [pc, #156]	@ (80012e0 <MX_GPIO_Init+0x174>)
 8001242:	f002 fccb 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_6_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin;
 8001246:	2310      	movs	r3, #16
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_6_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001260:	f002 fcbc 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_A_Pin HAL_B_Pin HAL_C_Pin */
  GPIO_InitStruct.Pin = HAL_A_Pin|HAL_B_Pin|HAL_C_Pin;
 8001264:	23e0      	movs	r3, #224	@ 0xe0
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001268:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127c:	f002 fcae 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INT_Pin */
  GPIO_InitStruct.Pin = UI_INT_Pin;
 8001280:	2310      	movs	r3, #16
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001284:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_INT_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <MX_GPIO_Init+0x174>)
 8001296:	f002 fca1 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin DRV_5_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|DRV_5_Pin|LED_1_Pin
 800129a:	f647 0307 	movw	r3, #30727	@ 0x7807
 800129e:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <MX_GPIO_Init+0x178>)
 80012b4:	f002 fc92 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin;
 80012b8:	2304      	movs	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECT_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	@ (80012e8 <MX_GPIO_Init+0x17c>)
 80012d0:	f002 fc84 	bl	8003bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	@ 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000800 	.word	0x48000800
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000c00 	.word	0x48000c00

080012ec <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */

// Функция расчёта частоты таймера
uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	b29b      	uxth	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d14c      	bne.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0xac>
     if(coil_period==2){
 8001326:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d11b      	bne.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x54>

    	 coil_period=0;
 8001330:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
     if(speed_test==1){
 8001336:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d113      	bne.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x54>
    	 LED_1_OFF;
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001346:	4823      	ldr	r0, [pc, #140]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001348:	f002 fe9e 	bl	8004088 <HAL_GPIO_WritePin>
    	 if(polarity==1){Falling_2_coil();}
 800134c:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_TIM_PeriodElapsedCallback+0x46>
 8001356:	f000 fa99 	bl	800188c <Falling_2_coil>
    	 if(polarity==2){Falling_1_coil();}
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d101      	bne.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001364:	f000 fa5a 	bl	800181c <Falling_1_coil>
         }

     }


     if(coil_period==1){LED_1_ON;TIM3->CNT=0;TIM3->ARR = period/250; coil_period=2;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d126      	bne.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001378:	4816      	ldr	r0, [pc, #88]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800137a:	f002 fe85 	bl	8004088 <HAL_GPIO_WritePin>
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800138a:	4915      	ldr	r1, [pc, #84]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800138c:	fba1 1303 	umull	r1, r3, r1, r3
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]

          if(speed_test==1){
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d10d      	bne.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0xac>
    	 if(polarity==1){Rising_2_coil();}
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x9e>
 80013ae:	f000 fa17 	bl	80017e0 <Rising_2_coil>
    	 if(polarity==2){Rising_1_coil();}
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d101      	bne.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0xac>
 80013bc:	f000 fa4a 	bl	8001854 <Rising_1_coil>
          }

     }

    }
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40000400 	.word	0x40000400
 80013cc:	200001c1 	.word	0x200001c1
 80013d0:	200001c3 	.word	0x200001c3
 80013d4:	48000400 	.word	0x48000400
 80013d8:	200001c2 	.word	0x200001c2
 80013dc:	200001c4 	.word	0x200001c4
 80013e0:	10624dd3 	.word	0x10624dd3

080013e4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f4:	f040 80ee 	bne.w	80015d4 <HAL_TIM_IC_CaptureCallback+0x1f0>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7f1b      	ldrb	r3, [r3, #28]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d12b      	bne.n	8001458 <HAL_TIM_IC_CaptureCallback+0x74>
        {

             LED_2_ON;
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001406:	4875      	ldr	r0, [pc, #468]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001408:	f002 fe3e 	bl	8004088 <HAL_GPIO_WritePin>

             DR_1_OFF;
 800140c:	2200      	movs	r2, #0
 800140e:	2108      	movs	r1, #8
 8001410:	4873      	ldr	r0, [pc, #460]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001412:	f002 fe39 	bl	8004088 <HAL_GPIO_WritePin>
             DR_4_OFF;
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800141c:	4870      	ldr	r0, [pc, #448]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800141e:	f002 fe33 	bl	8004088 <HAL_GPIO_WritePin>
             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001422:	2100      	movs	r1, #0
 8001424:	486f      	ldr	r0, [pc, #444]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001426:	f006 fa61 	bl	80078ec <HAL_TIMEx_PWMN_Stop>
             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800142a:	2104      	movs	r1, #4
 800142c:	486d      	ldr	r0, [pc, #436]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 800142e:	f004 fe41 	bl	80060b4 <HAL_TIM_PWM_Stop>


             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001432:	2104      	movs	r1, #4
 8001434:	486b      	ldr	r0, [pc, #428]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001436:	f006 f9a5 	bl	8007784 <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800143a:	2100      	movs	r1, #0
 800143c:	4869      	ldr	r0, [pc, #420]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 800143e:	f004 fd39 	bl	8005eb4 <HAL_TIM_PWM_Start>
             DR_2_ON;
 8001442:	2201      	movs	r2, #1
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	4866      	ldr	r0, [pc, #408]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001448:	f002 fe1e 	bl	8004088 <HAL_GPIO_WritePin>
             DR_3_ON;
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001452:	4863      	ldr	r0, [pc, #396]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001454:	f002 fe18 	bl	8004088 <HAL_GPIO_WritePin>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7f1b      	ldrb	r3, [r3, #28]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d12b      	bne.n	80014b8 <HAL_TIM_IC_CaptureCallback+0xd4>
        {
             LED_2_OFF;
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001466:	485d      	ldr	r0, [pc, #372]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8001468:	f002 fe0e 	bl	8004088 <HAL_GPIO_WritePin>

             DR_2_OFF;
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	485b      	ldr	r0, [pc, #364]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001472:	f002 fe09 	bl	8004088 <HAL_GPIO_WritePin>
             DR_3_OFF;
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800147c:	4858      	ldr	r0, [pc, #352]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800147e:	f002 fe03 	bl	8004088 <HAL_GPIO_WritePin>

             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001482:	2100      	movs	r1, #0
 8001484:	4857      	ldr	r0, [pc, #348]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001486:	f004 fe15 	bl	80060b4 <HAL_TIM_PWM_Stop>
             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800148a:	2104      	movs	r1, #4
 800148c:	4855      	ldr	r0, [pc, #340]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 800148e:	f006 fa2d 	bl	80078ec <HAL_TIMEx_PWMN_Stop>

             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001492:	2100      	movs	r1, #0
 8001494:	4853      	ldr	r0, [pc, #332]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001496:	f006 f975 	bl	8007784 <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800149a:	2104      	movs	r1, #4
 800149c:	4851      	ldr	r0, [pc, #324]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x200>)
 800149e:	f004 fd09 	bl	8005eb4 <HAL_TIM_PWM_Start>

             DR_1_ON;
 80014a2:	2201      	movs	r2, #1
 80014a4:	2108      	movs	r1, #8
 80014a6:	484e      	ldr	r0, [pc, #312]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80014a8:	f002 fdee 	bl	8004088 <HAL_GPIO_WritePin>
             DR_4_ON;
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b2:	484b      	ldr	r0, [pc, #300]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80014b4:	f002 fde8 	bl	8004088 <HAL_GPIO_WritePin>
           //  moove = HAL_GetTick();

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7f1b      	ldrb	r3, [r3, #28]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d14e      	bne.n	800155e <HAL_TIM_IC_CaptureCallback+0x17a>
        {
          coil_period=1;
 80014c0:	4b49      	ldr	r3, [pc, #292]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x204>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
          polarity=1;
 80014c6:	4b49      	ldr	r3, [pc, #292]	@ (80015ec <HAL_TIM_IC_CaptureCallback+0x208>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
          period = 0;
 80014cc:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
          TIM2->CNT = 0;
 80014d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24
          period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4);
 80014da:	210c      	movs	r1, #12
 80014dc:	4845      	ldr	r0, [pc, #276]	@ (80015f4 <HAL_TIM_IC_CaptureCallback+0x210>)
 80014de:	f005 fb9f 	bl	8006c20 <HAL_TIM_ReadCapturedValue>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a42      	ldr	r2, [pc, #264]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80014e6:	6013      	str	r3, [r2, #0]
          rpm= 540000000/period;
 80014e8:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a42      	ldr	r2, [pc, #264]	@ (80015f8 <HAL_TIM_IC_CaptureCallback+0x214>)
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4a42      	ldr	r2, [pc, #264]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x218>)
 80014f4:	6013      	str	r3, [r2, #0]
          f=135000000/period;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a41      	ldr	r2, [pc, #260]	@ (8001600 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001504:	801a      	strh	r2, [r3, #0]

          TIM3->ARR = period/2000;
 8001506:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a3f      	ldr	r2, [pc, #252]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x224>)
 800150c:	493f      	ldr	r1, [pc, #252]	@ (800160c <HAL_TIM_IC_CaptureCallback+0x228>)
 800150e:	fba1 1303 	umull	r1, r3, r1, r3
 8001512:	09db      	lsrs	r3, r3, #7
 8001514:	62d3      	str	r3, [r2, #44]	@ 0x2c
         // TIM3->ARR = period/1600;

          TIM3->CNT=0;
 8001516:	4b3c      	ldr	r3, [pc, #240]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24
         if((rpm<=45)&&(speed_test==0)){
 800151c:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x218>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b2d      	cmp	r3, #45	@ 0x2d
 8001522:	d808      	bhi.n	8001536 <HAL_TIM_IC_CaptureCallback+0x152>
 8001524:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <HAL_TIM_IC_CaptureCallback+0x152>
          Falling_1_coil();
 800152e:	f000 f975 	bl	800181c <Falling_1_coil>
          Rising_2_coil();}
 8001532:	f000 f955 	bl	80017e0 <Rising_2_coil>
          Falling_1_coil();
 8001536:	f000 f971 	bl	800181c <Falling_1_coil>
         if((rpm>=45)&&(speed_test==0)){speed_test=1;}
 800153a:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x218>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001540:	d907      	bls.n	8001552 <HAL_TIM_IC_CaptureCallback+0x16e>
 8001542:	4b33      	ldr	r3, [pc, #204]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <HAL_TIM_IC_CaptureCallback+0x16e>
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
          LED_1_OFF;
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001558:	4820      	ldr	r0, [pc, #128]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800155a:	f002 fd95 	bl	8004088 <HAL_GPIO_WritePin>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7f1b      	ldrb	r3, [r3, #28]
 8001562:	2b08      	cmp	r3, #8
 8001564:	d136      	bne.n	80015d4 <HAL_TIM_IC_CaptureCallback+0x1f0>
        {
           coil_period=1;
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
           polarity=2;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_TIM_IC_CaptureCallback+0x208>)
 800156e:	2202      	movs	r2, #2
 8001570:	701a      	strb	r2, [r3, #0]


           TIM3->ARR = period/2000;
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a24      	ldr	r2, [pc, #144]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001578:	4924      	ldr	r1, [pc, #144]	@ (800160c <HAL_TIM_IC_CaptureCallback+0x228>)
 800157a:	fba1 1303 	umull	r1, r3, r1, r3
 800157e:	09db      	lsrs	r3, r3, #7
 8001580:	62d3      	str	r3, [r2, #44]	@ 0x2c
          // TIM3->ARR = period/1600;
           TIM3->CNT=0;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
           moove = HAL_GetTick();
 8001588:	f001 f910 	bl	80027ac <HAL_GetTick>
 800158c:	4603      	mov	r3, r0
 800158e:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001590:	6013      	str	r3, [r2, #0]

           if((rpm<=45)&&(speed_test==0)){
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x218>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b2d      	cmp	r3, #45	@ 0x2d
 8001598:	d808      	bhi.n	80015ac <HAL_TIM_IC_CaptureCallback+0x1c8>
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <HAL_TIM_IC_CaptureCallback+0x1c8>
           Falling_2_coil();
 80015a4:	f000 f972 	bl	800188c <Falling_2_coil>
           Rising_1_coil();}
 80015a8:	f000 f954 	bl	8001854 <Rising_1_coil>
           Falling_2_coil();
 80015ac:	f000 f96e 	bl	800188c <Falling_2_coil>
           if((rpm>=45)&&(speed_test==0)){speed_test=1;}
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_TIM_IC_CaptureCallback+0x218>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b2c      	cmp	r3, #44	@ 0x2c
 80015b6:	d907      	bls.n	80015c8 <HAL_TIM_IC_CaptureCallback+0x1e4>
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_TIM_IC_CaptureCallback+0x1e4>
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
           LED_1_OFF;
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ce:	4803      	ldr	r0, [pc, #12]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80015d0:	f002 fd5a 	bl	8004088 <HAL_GPIO_WritePin>
        }
    }



}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48000800 	.word	0x48000800
 80015e4:	200002dc 	.word	0x200002dc
 80015e8:	200001c1 	.word	0x200001c1
 80015ec:	200001c2 	.word	0x200001c2
 80015f0:	200001c4 	.word	0x200001c4
 80015f4:	20000328 	.word	0x20000328
 80015f8:	202fbf00 	.word	0x202fbf00
 80015fc:	200001cc 	.word	0x200001cc
 8001600:	080befc0 	.word	0x080befc0
 8001604:	200001c8 	.word	0x200001c8
 8001608:	40000400 	.word	0x40000400
 800160c:	10624dd3 	.word	0x10624dd3
 8001610:	200001c3 	.word	0x200001c3
 8001614:	200001d0 	.word	0x200001d0

08001618 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]


	    RX_2;
 8001620:	2200      	movs	r2, #0
 8001622:	2104      	movs	r1, #4
 8001624:	4811      	ldr	r0, [pc, #68]	@ (800166c <HAL_UART_TxCpltCallback+0x54>)
 8001626:	f002 fd2f 	bl	8004088 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 800162a:	f001 f8bf 	bl	80027ac <HAL_GetTick>
 800162e:	4603      	mov	r3, r0
 8001630:	4a0f      	ldr	r2, [pc, #60]	@ (8001670 <HAL_UART_TxCpltCallback+0x58>)
 8001632:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 8001634:	2240      	movs	r2, #64	@ 0x40
 8001636:	490f      	ldr	r1, [pc, #60]	@ (8001674 <HAL_UART_TxCpltCallback+0x5c>)
 8001638:	480f      	ldr	r0, [pc, #60]	@ (8001678 <HAL_UART_TxCpltCallback+0x60>)
 800163a:	f007 fde6 	bl	800920a <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_UART_TxCpltCallback+0x60>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <HAL_UART_TxCpltCallback+0x60>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0210 	orr.w	r2, r2, #16
 800164c:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_UART_TxCpltCallback+0x64>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_UART_TxCpltCallback+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0204 	bic.w	r2, r2, #4
 800165c:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start_IT(&htim15);
 800165e:	4808      	ldr	r0, [pc, #32]	@ (8001680 <HAL_UART_TxCpltCallback+0x68>)
 8001660:	f004 fb2e 	bl	8005cc0 <HAL_TIM_Base_Start_IT>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	48000c00 	.word	0x48000c00
 8001670:	20000030 	.word	0x20000030
 8001674:	20000034 	.word	0x20000034
 8001678:	200004a4 	.word	0x200004a4
 800167c:	2000052c 	.word	0x2000052c
 8001680:	20000458 	.word	0x20000458

08001684 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <HAL_UARTEx_RxEventCallback+0x58>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d11b      	bne.n	80016d2 <HAL_UARTEx_RxEventCallback+0x4e>
	{

        HAL_TIM_Base_Stop_IT(&htim15);
 800169a:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800169c:	f004 fb7a 	bl	8005d94 <HAL_TIM_Base_Stop_IT>
		lastActivityTime = HAL_GetTick();
 80016a0:	f001 f884 	bl	80027ac <HAL_GetTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <HAL_UARTEx_RxEventCallback+0x60>)
 80016a8:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_UARTEx_RxEventCallback+0x64>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_UARTEx_RxEventCallback+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0210 	bic.w	r2, r2, #16
 80016b8:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80016ba:	480c      	ldr	r0, [pc, #48]	@ (80016ec <HAL_UARTEx_RxEventCallback+0x68>)
 80016bc:	f002 f8f9 	bl	80038b2 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_UARTEx_RxEventCallback+0x6c>)
 80016c4:	490b      	ldr	r1, [pc, #44]	@ (80016f4 <HAL_UARTEx_RxEventCallback+0x70>)
 80016c6:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <HAL_UARTEx_RxEventCallback+0x74>)
 80016c8:	f7fe fd7e 	bl	80001c8 <Registers_handler>
	    HAL_TIM_Base_Start_IT(&htim15);
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <HAL_UARTEx_RxEventCallback+0x5c>)
 80016ce:	f004 faf7 	bl	8005cc0 <HAL_TIM_Base_Start_IT>
	}
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40013800 	.word	0x40013800
 80016e0:	20000458 	.word	0x20000458
 80016e4:	20000030 	.word	0x20000030
 80016e8:	200004a4 	.word	0x200004a4
 80016ec:	2000052c 	.word	0x2000052c
 80016f0:	20000194 	.word	0x20000194
 80016f4:	20000174 	.word	0x20000174
 80016f8:	20000034 	.word	0x20000034

080016fc <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8001700:	f001 f854 	bl	80027ac <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <Check_USART1_Timeout+0x28>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001710:	d306      	bcc.n	8001720 <Check_USART1_Timeout+0x24>
     {

         Reset_USART1();
 8001712:	f000 f80b 	bl	800172c <Reset_USART1>
         RX_2;
 8001716:	2200      	movs	r2, #0
 8001718:	2104      	movs	r1, #4
 800171a:	4803      	ldr	r0, [pc, #12]	@ (8001728 <Check_USART1_Timeout+0x2c>)
 800171c:	f002 fcb4 	bl	8004088 <HAL_GPIO_WritePin>
     }
 }
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000030 	.word	0x20000030
 8001728:	48000c00 	.word	0x48000c00

0800172c <Reset_USART1>:



void Reset_USART1(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
  //  LED_1_ON;

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8001730:	4825      	ldr	r0, [pc, #148]	@ (80017c8 <Reset_USART1+0x9c>)
 8001732:	f006 fb81 	bl	8007e38 <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <Reset_USART1+0xa0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <Reset_USART1+0x18>
        HAL_DMA_Abort(&hdma_usart1_rx);
 800173e:	4823      	ldr	r0, [pc, #140]	@ (80017cc <Reset_USART1+0xa0>)
 8001740:	f002 f8b7 	bl	80038b2 <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <Reset_USART1+0xa4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <Reset_USART1+0x26>
        HAL_DMA_Abort(&hdma_usart1_tx);
 800174c:	4820      	ldr	r0, [pc, #128]	@ (80017d0 <Reset_USART1+0xa4>)
 800174e:	f002 f8b0 	bl	80038b2 <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <Reset_USART1+0x9c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <Reset_USART1+0x9c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001760:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <Reset_USART1+0x9c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2208      	movs	r2, #8
 8001768:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <Reset_USART1+0x9c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2202      	movs	r2, #2
 8001770:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <Reset_USART1+0xa8>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4a17      	ldr	r2, [pc, #92]	@ (80017d4 <Reset_USART1+0xa8>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177c:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1); // Задержка для завершения сброса
 800177e:	2001      	movs	r0, #1
 8001780:	f001 f820 	bl	80027c4 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <Reset_USART1+0xa8>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <Reset_USART1+0xa8>)
 800178a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800178e:	60d3      	str	r3, [r2, #12]

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 8001790:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <Reset_USART1+0x9c>)
 8001792:	f006 fa98 	bl	8007cc6 <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 8001796:	f7ff fc93 	bl	80010c0 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 800179a:	f7ff fcc1 	bl	8001120 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 800179e:	2240      	movs	r2, #64	@ 0x40
 80017a0:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <Reset_USART1+0xac>)
 80017a2:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <Reset_USART1+0x9c>)
 80017a4:	f007 fd31 	bl	800920a <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <Reset_USART1+0xa0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <Reset_USART1+0xa0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 80017b8:	f000 fff8 	bl	80027ac <HAL_GetTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <Reset_USART1+0xb0>)
 80017c0:	6013      	str	r3, [r2, #0]


}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200004a4 	.word	0x200004a4
 80017cc:	2000052c 	.word	0x2000052c
 80017d0:	20000570 	.word	0x20000570
 80017d4:	40021000 	.word	0x40021000
 80017d8:	20000034 	.word	0x20000034
 80017dc:	20000030 	.word	0x20000030

080017e0 <Rising_2_coil>:
        adc_values[i] = HAL_ADC_GetValue(&hadc1);  // Считываем каждое значение
    }
    HAL_ADC_Stop(&hadc1);
}

void Rising_2_coil(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80017e4:	2108      	movs	r1, #8
 80017e6:	4809      	ldr	r0, [pc, #36]	@ (800180c <Rising_2_coil+0x2c>)
 80017e8:	f005 ffcc 	bl	8007784 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80017ec:	2100      	movs	r1, #0
 80017ee:	4808      	ldr	r0, [pc, #32]	@ (8001810 <Rising_2_coil+0x30>)
 80017f0:	f004 fb60 	bl	8005eb4 <HAL_TIM_PWM_Start>
	DR_5_ON;
 80017f4:	2201      	movs	r2, #1
 80017f6:	2104      	movs	r1, #4
 80017f8:	4806      	ldr	r0, [pc, #24]	@ (8001814 <Rising_2_coil+0x34>)
 80017fa:	f002 fc45 	bl	8004088 <HAL_GPIO_WritePin>
	DR_8_ON;
 80017fe:	2201      	movs	r2, #1
 8001800:	2120      	movs	r1, #32
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <Rising_2_coil+0x38>)
 8001804:	f002 fc40 	bl	8004088 <HAL_GPIO_WritePin>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200002dc 	.word	0x200002dc
 8001810:	2000040c 	.word	0x2000040c
 8001814:	48000400 	.word	0x48000400
 8001818:	48000800 	.word	0x48000800

0800181c <Falling_1_coil>:

void Falling_1_coil(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	 DR_6_OFF;
 8001820:	2200      	movs	r2, #0
 8001822:	2102      	movs	r1, #2
 8001824:	4808      	ldr	r0, [pc, #32]	@ (8001848 <Falling_1_coil+0x2c>)
 8001826:	f002 fc2f 	bl	8004088 <HAL_GPIO_WritePin>
	 DR_7_OFF;
 800182a:	2200      	movs	r2, #0
 800182c:	2104      	movs	r1, #4
 800182e:	4806      	ldr	r0, [pc, #24]	@ (8001848 <Falling_1_coil+0x2c>)
 8001830:	f002 fc2a 	bl	8004088 <HAL_GPIO_WritePin>
	 HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001834:	2100      	movs	r1, #0
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <Falling_1_coil+0x30>)
 8001838:	f006 f858 	bl	80078ec <HAL_TIMEx_PWMN_Stop>
	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800183c:	2108      	movs	r1, #8
 800183e:	4804      	ldr	r0, [pc, #16]	@ (8001850 <Falling_1_coil+0x34>)
 8001840:	f004 fc38 	bl	80060b4 <HAL_TIM_PWM_Stop>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	48000800 	.word	0x48000800
 800184c:	2000040c 	.word	0x2000040c
 8001850:	200002dc 	.word	0x200002dc

08001854 <Rising_1_coil>:

void Rising_1_coil(void){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001858:	2108      	movs	r1, #8
 800185a:	4809      	ldr	r0, [pc, #36]	@ (8001880 <Rising_1_coil+0x2c>)
 800185c:	f004 fb2a 	bl	8005eb4 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001860:	2100      	movs	r1, #0
 8001862:	4808      	ldr	r0, [pc, #32]	@ (8001884 <Rising_1_coil+0x30>)
 8001864:	f005 ff8e 	bl	8007784 <HAL_TIMEx_PWMN_Start>
    DR_6_ON;
 8001868:	2201      	movs	r2, #1
 800186a:	2102      	movs	r1, #2
 800186c:	4806      	ldr	r0, [pc, #24]	@ (8001888 <Rising_1_coil+0x34>)
 800186e:	f002 fc0b 	bl	8004088 <HAL_GPIO_WritePin>
    DR_7_ON;
 8001872:	2201      	movs	r2, #1
 8001874:	2104      	movs	r1, #4
 8001876:	4804      	ldr	r0, [pc, #16]	@ (8001888 <Rising_1_coil+0x34>)
 8001878:	f002 fc06 	bl	8004088 <HAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200002dc 	.word	0x200002dc
 8001884:	2000040c 	.word	0x2000040c
 8001888:	48000800 	.word	0x48000800

0800188c <Falling_2_coil>:

void Falling_2_coil(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	 DR_5_OFF;
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <Falling_2_coil+0x2c>)
 8001896:	f002 fbf7 	bl	8004088 <HAL_GPIO_WritePin>
	 DR_8_OFF;
 800189a:	2200      	movs	r2, #0
 800189c:	2120      	movs	r1, #32
 800189e:	4807      	ldr	r0, [pc, #28]	@ (80018bc <Falling_2_coil+0x30>)
 80018a0:	f002 fbf2 	bl	8004088 <HAL_GPIO_WritePin>
	 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80018a4:	2108      	movs	r1, #8
 80018a6:	4806      	ldr	r0, [pc, #24]	@ (80018c0 <Falling_2_coil+0x34>)
 80018a8:	f006 f820 	bl	80078ec <HAL_TIMEx_PWMN_Stop>
	 HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80018ac:	2100      	movs	r1, #0
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <Falling_2_coil+0x38>)
 80018b0:	f004 fc00 	bl	80060b4 <HAL_TIM_PWM_Stop>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	200002dc 	.word	0x200002dc
 80018c4:	2000040c 	.word	0x2000040c

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 80018e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018e4:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	74fb      	strb	r3, [r7, #19]
 80018ea:	e023      	b.n	8001934 <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 80018ec:	7cfb      	ldrb	r3, [r7, #19]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4053      	eors	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 80018fc:	2301      	movs	r3, #1
 80018fe:	74bb      	strb	r3, [r7, #18]
 8001900:	e012      	b.n	8001928 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	617b      	str	r3, [r7, #20]
			if (flag)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 800191c:	f083 0301 	eor.w	r3, r3, #1
 8001920:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001922:	7cbb      	ldrb	r3, [r7, #18]
 8001924:	3301      	adds	r3, #1
 8001926:	74bb      	strb	r3, [r7, #18]
 8001928:	7cbb      	ldrb	r3, [r7, #18]
 800192a:	2b08      	cmp	r3, #8
 800192c:	d9e9      	bls.n	8001902 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 800192e:	7cfb      	ldrb	r3, [r7, #19]
 8001930:	3301      	adds	r3, #1
 8001932:	74fb      	strb	r3, [r7, #19]
 8001934:	7cfa      	ldrb	r2, [r7, #19]
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	429a      	cmp	r2, r3
 800193a:	d3d7      	bcc.n	80018ec <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	b29b      	uxth	r3, r3
 8001950:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	b29b      	uxth	r3, r3

}
 8001956:	4618      	mov	r0, r3
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	4613      	mov	r3, r2
 8001970:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4619      	mov	r1, r3
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f7ff ffac 	bl	80018d4 <calcCRC16ModBus>
 800197c:	4603      	mov	r3, r0
 800197e:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	3301      	adds	r3, #1
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	8afa      	ldrh	r2, [r7, #22]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 800198e:	8afb      	ldrh	r3, [r7, #22]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b299      	uxth	r1, r3
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	4413      	add	r3, r2
 800199a:	b2ca      	uxtb	r2, r1
 800199c:	701a      	strb	r2, [r3, #0]

    TX_2;
 800199e:	2201      	movs	r2, #1
 80019a0:	2104      	movs	r1, #4
 80019a2:	480b      	ldr	r0, [pc, #44]	@ (80019d0 <sendModBusRequest+0x6c>)
 80019a4:	f002 fb70 	bl	8004088 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3302      	adds	r3, #2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f006 f9c3 	bl	8007d40 <HAL_UART_Transmit_DMA>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <sendModBusRequest+0x60>

    //	LED_1_OFF;

	        Error_Handler();
 80019c0:	f7ff ff82 	bl	80018c8 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	48000c00 	.word	0x48000c00

080019d4 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
 80019e0:	4613      	mov	r3, r2
 80019e2:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <sendError+0x5c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 80019f4:	78bb      	ldrb	r3, [r7, #2]
 80019f6:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 80019f8:	f107 0308 	add.w	r3, r7, #8
 80019fc:	2103      	movs	r1, #3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff68 	bl	80018d4 <calcCRC16ModBus>
 8001a04:	4603      	mov	r3, r0
 8001a06:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001a08:	89fb      	ldrh	r3, [r7, #14]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff9f 	bl	8001964 <sendModBusRequest>

}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000000 	.word	0x20000000

08001a34 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001a3e:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <handleReadHoldingRegs+0xe4>)
 8001a40:	789b      	ldrb	r3, [r3, #2]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <handleReadHoldingRegs+0xe4>)
 8001a4a:	78db      	ldrb	r3, [r3, #3]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001a54:	4b30      	ldr	r3, [pc, #192]	@ (8001b18 <handleReadHoldingRegs+0xe4>)
 8001a56:	791b      	ldrb	r3, [r3, #4]
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <handleReadHoldingRegs+0xe4>)
 8001a60:	795b      	ldrb	r3, [r3, #5]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 8001a6a:	8afa      	ldrh	r2, [r7, #22]
 8001a6c:	897b      	ldrh	r3, [r7, #10]
 8001a6e:	4413      	add	r3, r2
 8001a70:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	2b7d      	cmp	r3, #125	@ 0x7d
 8001a76:	d905      	bls.n	8001a84 <handleReadHoldingRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001a78:	2103      	movs	r1, #3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fa26 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e045      	b.n	8001b10 <handleReadHoldingRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001a84:	893b      	ldrh	r3, [r7, #8]
 8001a86:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a88:	d905      	bls.n	8001a96 <handleReadHoldingRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fa1d 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e03c      	b.n	8001b10 <handleReadHoldingRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001a96:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <handleReadHoldingRegs+0xe8>)
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <handleReadHoldingRegs+0xec>)
 8001a9c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <handleReadHoldingRegs+0xe4>)
 8001aa0:	785a      	ldrb	r2, [r3, #1]
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <handleReadHoldingRegs+0xec>)
 8001aa4:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <handleReadHoldingRegs+0xec>)
 8001ab0:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e01d      	b.n	8001af8 <handleReadHoldingRegs+0xc4>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001abc:	8afb      	ldrh	r3, [r7, #22]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	613a      	str	r2, [r7, #16]
 8001ad0:	b2c9      	uxtb	r1, r1
 8001ad2:	4a13      	ldr	r2, [pc, #76]	@ (8001b20 <handleReadHoldingRegs+0xec>)
 8001ad4:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001ad6:	8afb      	ldrh	r3, [r7, #22]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	8819      	ldrh	r1, [r3, #0]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	613a      	str	r2, [r7, #16]
 8001ae6:	b2c9      	uxtb	r1, r1
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <handleReadHoldingRegs+0xec>)
 8001aea:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001aec:	8afb      	ldrh	r3, [r7, #22]
 8001aee:	3301      	adds	r3, #1
 8001af0:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3301      	adds	r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbdd      	blt.n	8001abc <handleReadHoldingRegs+0x88>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4906      	ldr	r1, [pc, #24]	@ (8001b20 <handleReadHoldingRegs+0xec>)
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff2b 	bl	8001964 <sendModBusRequest>
	return 1;
 8001b0e:	2301      	movs	r3, #1

}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000034 	.word	0x20000034
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000074 	.word	0x20000074

08001b24 <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <handleReadInputRegs+0xe8>)
 8001b30:	789b      	ldrb	r3, [r3, #2]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	4b34      	ldr	r3, [pc, #208]	@ (8001c0c <handleReadInputRegs+0xe8>)
 8001b3a:	78db      	ldrb	r3, [r3, #3]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001b44:	4b31      	ldr	r3, [pc, #196]	@ (8001c0c <handleReadInputRegs+0xe8>)
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <handleReadInputRegs+0xe8>)
 8001b50:	795b      	ldrb	r3, [r3, #5]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 8001b5a:	8afa      	ldrh	r2, [r7, #22]
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	2b7d      	cmp	r3, #125	@ 0x7d
 8001b6a:	d905      	bls.n	8001b78 <handleReadInputRegs+0x54>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f9ac 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e045      	b.n	8001c04 <handleReadInputRegs+0xe0>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 8001b78:	893b      	ldrh	r3, [r7, #8]
 8001b7a:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b7c:	d905      	bls.n	8001b8a <handleReadInputRegs+0x66>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001b7e:	2102      	movs	r1, #2
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9a3 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e03c      	b.n	8001c04 <handleReadInputRegs+0xe0>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <handleReadInputRegs+0xec>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <handleReadInputRegs+0xf0>)
 8001b90:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <handleReadInputRegs+0xe8>)
 8001b94:	785a      	ldrb	r2, [r3, #1]
 8001b96:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <handleReadInputRegs+0xf0>)
 8001b98:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <handleReadInputRegs+0xf0>)
 8001ba4:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e01d      	b.n	8001bec <handleReadInputRegs+0xc8>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001bb0:	8afb      	ldrh	r3, [r7, #22]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	613a      	str	r2, [r7, #16]
 8001bc4:	b2c9      	uxtb	r1, r1
 8001bc6:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <handleReadInputRegs+0xf0>)
 8001bc8:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001bca:	8afb      	ldrh	r3, [r7, #22]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	8819      	ldrh	r1, [r3, #0]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	613a      	str	r2, [r7, #16]
 8001bda:	b2c9      	uxtb	r1, r1
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <handleReadInputRegs+0xf0>)
 8001bde:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001be0:	8afb      	ldrh	r3, [r7, #22]
 8001be2:	3301      	adds	r3, #1
 8001be4:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	897b      	ldrh	r3, [r7, #10]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbdd      	blt.n	8001bb0 <handleReadInputRegs+0x8c>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4906      	ldr	r1, [pc, #24]	@ (8001c14 <handleReadInputRegs+0xf0>)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff feb1 	bl	8001964 <sendModBusRequest>
	return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000034 	.word	0x20000034
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000074 	.word	0x20000074

08001c18 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001c22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <handleReadCoils+0xc8>)
 8001c24:	789b      	ldrb	r3, [r3, #2]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <handleReadCoils+0xc8>)
 8001c2e:	78db      	ldrb	r3, [r3, #3]
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 8001c38:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <handleReadCoils+0xc8>)
 8001c3a:	791b      	ldrb	r3, [r3, #4]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	4b27      	ldr	r3, [pc, #156]	@ (8001ce0 <handleReadCoils+0xc8>)
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001c4e:	89bb      	ldrh	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <handleReadCoils+0x44>
 8001c54:	89bb      	ldrh	r3, [r7, #12]
 8001c56:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c5a:	d905      	bls.n	8001c68 <handleReadCoils+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f934 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e037      	b.n	8001cd8 <handleReadCoils+0xc0>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001c68:	89fa      	ldrh	r2, [r7, #14]
 8001c6a:	89bb      	ldrh	r3, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001c74:	897b      	ldrh	r3, [r7, #10]
 8001c76:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c78:	d905      	bls.n	8001c86 <handleReadCoils+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f925 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e028      	b.n	8001cd8 <handleReadCoils+0xc0>
	}
	memset (txFrame, '\0', 256);
 8001c86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <handleReadCoils+0xcc>)
 8001c8e:	f007 fb10 	bl	80092b2 <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <handleReadCoils+0xd0>)
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <handleReadCoils+0xcc>)
 8001c98:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <handleReadCoils+0xc8>)
 8001c9c:	785a      	ldrb	r2, [r3, #1]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <handleReadCoils+0xcc>)
 8001ca0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001ca2:	89bb      	ldrh	r3, [r7, #12]
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	89ba      	ldrh	r2, [r7, #12]
 8001cac:	f002 0207 	and.w	r2, r2, #7
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	2a00      	cmp	r2, #0
 8001cb4:	bf14      	ite	ne
 8001cb6:	2201      	movne	r2, #1
 8001cb8:	2200      	moveq	r2, #0
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <handleReadCoils+0xcc>)
 8001cc2:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001cc4:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <handleReadCoils+0xcc>)
 8001cc6:	789b      	ldrb	r3, [r3, #2]
 8001cc8:	3303      	adds	r3, #3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4905      	ldr	r1, [pc, #20]	@ (8001ce4 <handleReadCoils+0xcc>)
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fe47 	bl	8001964 <sendModBusRequest>
	return 1;
 8001cd6:	2301      	movs	r3, #1

}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000034 	.word	0x20000034
 8001ce4:	20000074 	.word	0x20000074
 8001ce8:	20000000 	.word	0x20000000

08001cec <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001cf6:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <handleReadDiscreteInputs+0xd0>)
 8001cf8:	789b      	ldrb	r3, [r3, #2]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <handleReadDiscreteInputs+0xd0>)
 8001d02:	78db      	ldrb	r3, [r3, #3]
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <handleReadDiscreteInputs+0xd0>)
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <handleReadDiscreteInputs+0xd0>)
 8001d18:	795b      	ldrb	r3, [r3, #5]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8001d22:	89bb      	ldrh	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <handleReadDiscreteInputs+0x44>
 8001d28:	89bb      	ldrh	r3, [r7, #12]
 8001d2a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d2e:	d905      	bls.n	8001d3c <handleReadDiscreteInputs+0x50>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001d30:	2103      	movs	r1, #3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8ca 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e03a      	b.n	8001db2 <handleReadDiscreteInputs+0xc6>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001d3c:	89fa      	ldrh	r2, [r7, #14]
 8001d3e:	89bb      	ldrh	r3, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001d48:	897b      	ldrh	r3, [r7, #10]
 8001d4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d4c:	d905      	bls.n	8001d5a <handleReadDiscreteInputs+0x6e>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001d4e:	2102      	movs	r1, #2
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f8bb 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e02b      	b.n	8001db2 <handleReadDiscreteInputs+0xc6>
	}
	memset (txFrame, '\0', 256);
 8001d5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4817      	ldr	r0, [pc, #92]	@ (8001dc0 <handleReadDiscreteInputs+0xd4>)
 8001d62:	f007 faa6 	bl	80092b2 <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001d66:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <handleReadDiscreteInputs+0xd8>)
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <handleReadDiscreteInputs+0xd4>)
 8001d6c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <handleReadDiscreteInputs+0xd0>)
 8001d70:	785a      	ldrb	r2, [r3, #1]
 8001d72:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <handleReadDiscreteInputs+0xd4>)
 8001d74:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001d76:	89bb      	ldrh	r3, [r7, #12]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	89ba      	ldrh	r2, [r7, #12]
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	b292      	uxth	r2, r2
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	bf14      	ite	ne
 8001d8a:	2201      	movne	r2, #1
 8001d8c:	2200      	moveq	r2, #0
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	4413      	add	r3, r2
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <handleReadDiscreteInputs+0xd4>)
 8001d96:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <handleReadDiscreteInputs+0xd4>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <handleReadDiscreteInputs+0xd4>)
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	3303      	adds	r3, #3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	4905      	ldr	r1, [pc, #20]	@ (8001dc0 <handleReadDiscreteInputs+0xd4>)
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fdda 	bl	8001964 <sendModBusRequest>
	return 1;
 8001db0:	2301      	movs	r3, #1

}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000034 	.word	0x20000034
 8001dc0:	20000074 	.word	0x20000074
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001dd4:	789b      	ldrb	r3, [r3, #2]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001dde:	78db      	ldrb	r3, [r3, #3]
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001de8:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001df4:	795b      	ldrb	r3, [r3, #5]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <handleWriteMulyipleHandlingRegister+0x42>
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	2b7b      	cmp	r3, #123	@ 0x7b
 8001e08:	d905      	bls.n	8001e16 <handleWriteMulyipleHandlingRegister+0x4e>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f85d 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e050      	b.n	8001eb8 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001e16:	8afa      	ldrh	r2, [r7, #22]
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001e22:	893b      	ldrh	r3, [r7, #8]
 8001e24:	2b3c      	cmp	r3, #60	@ 0x3c
 8001e26:	d905      	bls.n	8001e34 <handleWriteMulyipleHandlingRegister+0x6c>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001e28:	2102      	movs	r1, #2
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f84e 	bl	8001ecc <sendModbusException>
		return MODBUS_ERROR;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e041      	b.n	8001eb8 <handleWriteMulyipleHandlingRegister+0xf0>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001e34:	2307      	movs	r3, #7
 8001e36:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e01a      	b.n	8001e74 <handleWriteMulyipleHandlingRegister+0xac>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	613a      	str	r2, [r7, #16]
 8001e44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b21a      	sxth	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1c59      	adds	r1, r3, #1
 8001e52:	6139      	str	r1, [r7, #16]
 8001e54:	491a      	ldr	r1, [pc, #104]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b219      	sxth	r1, r3
 8001e5e:	8afb      	ldrh	r3, [r7, #22]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	82fa      	strh	r2, [r7, #22]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	b28a      	uxth	r2, r1
 8001e6c:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbe0      	blt.n	8001e3e <handleWriteMulyipleHandlingRegister+0x76>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001e82:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001e86:	785a      	ldrb	r2, [r3, #1]
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001e8a:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001e8e:	789a      	ldrb	r2, [r3, #2]
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001e92:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001e94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001e96:	78da      	ldrb	r2, [r3, #3]
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001e9a:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001e9e:	791a      	ldrb	r2, [r3, #4]
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001ea2:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001ea6:	795a      	ldrb	r2, [r3, #5]
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001eaa:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001eac:	2206      	movs	r2, #6
 8001eae:	4906      	ldr	r1, [pc, #24]	@ (8001ec8 <handleWriteMulyipleHandlingRegister+0x100>)
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fd57 	bl	8001964 <sendModBusRequest>
	return 1;   // success
 8001eb6:	2301      	movs	r3, #1

}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000034 	.word	0x20000034
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000074 	.word	0x20000074

08001ecc <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <sendModbusException+0x3c>)
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <sendModbusException+0x40>)
 8001ede:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <sendModbusException+0x3c>)
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <sendModbusException+0x40>)
 8001eec:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001eee:	4a07      	ldr	r2, [pc, #28]	@ (8001f0c <sendModbusException+0x40>)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	4905      	ldr	r1, [pc, #20]	@ (8001f0c <sendModbusException+0x40>)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fd33 	bl	8001964 <sendModBusRequest>
 8001efe:	4603      	mov	r3, r0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000034 	.word	0x20000034
 8001f0c:	20000074 	.word	0x20000074

08001f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6193      	str	r3, [r2, #24]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a08      	ldr	r2, [pc, #32]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	@ 0x30
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f78:	d154      	bne.n	8002024 <HAL_ADC_MspInit+0xcc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6153      	str	r3, [r2, #20]
 8001f86:	4b29      	ldr	r3, [pc, #164]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b26      	ldr	r3, [pc, #152]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001f98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f9c:	6153      	str	r3, [r2, #20]
 8001f9e:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4a1f      	ldr	r2, [pc, #124]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb4:	6153      	str	r3, [r2, #20]
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a19      	ldr	r2, [pc, #100]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001fc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fcc:	6153      	str	r3, [r2, #20]
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <HAL_ADC_MspInit+0xd4>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	4810      	ldr	r0, [pc, #64]	@ (8002030 <HAL_ADC_MspInit+0xd8>)
 8001fee:	f001 fdf5 	bl	8003bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin|SENS_3_Pin|SENS_4_Pin;
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002008:	f001 fde8 	bl	8003bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800200c:	2310      	movs	r3, #16
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002010:	2303      	movs	r3, #3
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <HAL_ADC_MspInit+0xdc>)
 8002020:	f001 fddc 	bl	8003bdc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002024:	bf00      	nop
 8002026:	3730      	adds	r7, #48	@ 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	48000800 	.word	0x48000800
 8002034:	48001400 	.word	0x48001400

08002038 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	@ 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <HAL_I2C_MspInit+0x7c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d128      	bne.n	80020ac <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <HAL_I2C_MspInit+0x80>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <HAL_I2C_MspInit+0x80>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002064:	6153      	str	r3, [r2, #20]
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_I2C_MspInit+0x80>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002078:	2312      	movs	r3, #18
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002084:	2304      	movs	r3, #4
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	480b      	ldr	r0, [pc, #44]	@ (80020bc <HAL_I2C_MspInit+0x84>)
 8002090:	f001 fda4 	bl	8003bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_I2C_MspInit+0x80>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4a07      	ldr	r2, [pc, #28]	@ (80020b8 <HAL_I2C_MspInit+0x80>)
 800209a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800209e:	61d3      	str	r3, [r2, #28]
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <HAL_I2C_MspInit+0x80>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020ac:	bf00      	nop
 80020ae:	3728      	adds	r7, #40	@ 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40005400 	.word	0x40005400
 80020b8:	40021000 	.word	0x40021000
 80020bc:	48000400 	.word	0x48000400

080020c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	@ 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a17      	ldr	r2, [pc, #92]	@ (800213c <HAL_SPI_MspInit+0x7c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d127      	bne.n	8002132 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <HAL_SPI_MspInit+0x80>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <HAL_SPI_MspInit+0x80>)
 80020e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <HAL_SPI_MspInit+0x80>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <HAL_SPI_MspInit+0x80>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a10      	ldr	r2, [pc, #64]	@ (8002140 <HAL_SPI_MspInit+0x80>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <HAL_SPI_MspInit+0x80>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002112:	2338      	movs	r3, #56	@ 0x38
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002122:	2305      	movs	r3, #5
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	4805      	ldr	r0, [pc, #20]	@ (8002144 <HAL_SPI_MspInit+0x84>)
 800212e:	f001 fd55 	bl	8003bdc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	@ 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40013000 	.word	0x40013000
 8002140:	40021000 	.word	0x40021000
 8002144:	48000400 	.word	0x48000400

08002148 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b090      	sub	sp, #64	@ 0x40
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a63      	ldr	r2, [pc, #396]	@ (80022f4 <HAL_TIM_Base_MspInit+0x1ac>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d114      	bne.n	8002194 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800216a:	4b63      	ldr	r3, [pc, #396]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4a62      	ldr	r2, [pc, #392]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8002170:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002174:	6193      	str	r3, [r2, #24]
 8002176:	4b60      	ldr	r3, [pc, #384]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	2018      	movs	r0, #24
 8002188:	f001 fa61 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800218c:	2018      	movs	r0, #24
 800218e:	f001 fa7a 	bl	8003686 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002192:	e0ab      	b.n	80022ec <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219c:	d14f      	bne.n	800223e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	4b56      	ldr	r3, [pc, #344]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a55      	ldr	r2, [pc, #340]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b53      	ldr	r3, [pc, #332]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b50      	ldr	r3, [pc, #320]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a4f      	ldr	r2, [pc, #316]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	6153      	str	r3, [r2, #20]
 80021c2:	4b4d      	ldr	r3, [pc, #308]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	4b4a      	ldr	r3, [pc, #296]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4a49      	ldr	r2, [pc, #292]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d8:	6153      	str	r3, [r2, #20]
 80021da:	4b47      	ldr	r3, [pc, #284]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = INT_2_TIM_Pin;
 80021e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f8:	2301      	movs	r3, #1
 80021fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(INT_2_TIM_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002200:	4619      	mov	r1, r3
 8002202:	483e      	ldr	r0, [pc, #248]	@ (80022fc <HAL_TIM_Base_MspInit+0x1b4>)
 8002204:	f001 fcea 	bl	8003bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_1_TIM_Pin;
 8002208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800221a:	2301      	movs	r3, #1
 800221c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(INT_1_TIM_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002228:	f001 fcd8 	bl	8003bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	201c      	movs	r0, #28
 8002232:	f001 fa0c 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002236:	201c      	movs	r0, #28
 8002238:	f001 fa25 	bl	8003686 <HAL_NVIC_EnableIRQ>
}
 800223c:	e056      	b.n	80022ec <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM3)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2f      	ldr	r2, [pc, #188]	@ (8002300 <HAL_TIM_Base_MspInit+0x1b8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d114      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002248:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4a2a      	ldr	r2, [pc, #168]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	61d3      	str	r3, [r2, #28]
 8002254:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	201d      	movs	r0, #29
 8002266:	f001 f9f2 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800226a:	201d      	movs	r0, #29
 800226c:	f001 fa0b 	bl	8003686 <HAL_NVIC_EnableIRQ>
}
 8002270:	e03c      	b.n	80022ec <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM6)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <HAL_TIM_Base_MspInit+0x1bc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d10c      	bne.n	8002296 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a1d      	ldr	r2, [pc, #116]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
}
 8002294:	e02a      	b.n	80022ec <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1b      	ldr	r2, [pc, #108]	@ (8002308 <HAL_TIM_Base_MspInit+0x1c0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d10c      	bne.n	80022ba <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a14      	ldr	r2, [pc, #80]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80022a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
}
 80022b8:	e018      	b.n	80022ec <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM15)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a13      	ldr	r2, [pc, #76]	@ (800230c <HAL_TIM_Base_MspInit+0x1c4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d113      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x1a4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2018      	movs	r0, #24
 80022e2:	f001 f9b4 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80022e6:	2018      	movs	r0, #24
 80022e8:	f001 f9cd 	bl	8003686 <HAL_NVIC_EnableIRQ>
}
 80022ec:	bf00      	nop
 80022ee:	3740      	adds	r7, #64	@ 0x40
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400
 8002300:	40000400 	.word	0x40000400
 8002304:	40001000 	.word	0x40001000
 8002308:	40013400 	.word	0x40013400
 800230c:	40014000 	.word	0x40014000

08002310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a32      	ldr	r2, [pc, #200]	@ (80023f8 <HAL_TIM_MspPostInit+0xe8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d13b      	bne.n	80023aa <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 8002338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800233c:	6153      	str	r3, [r2, #20]
 800233e:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	4b2c      	ldr	r3, [pc, #176]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4a2b      	ldr	r2, [pc, #172]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	6153      	str	r3, [r2, #20]
 8002356:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002374:	2304      	movs	r3, #4
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	4619      	mov	r1, r3
 800237e:	4820      	ldr	r0, [pc, #128]	@ (8002400 <HAL_TIM_MspPostInit+0xf0>)
 8002380:	f001 fc2c 	bl	8003bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002384:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002388:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002396:	2306      	movs	r3, #6
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a4:	f001 fc1a 	bl	8003bdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023a8:	e021      	b.n	80023ee <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM8)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <HAL_TIM_MspPostInit+0xf4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d11c      	bne.n	80023ee <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 80023ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023be:	6153      	str	r3, [r2, #20]
 80023c0:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80023cc:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80023d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80023de:	2304      	movs	r3, #4
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4807      	ldr	r0, [pc, #28]	@ (8002408 <HAL_TIM_MspPostInit+0xf8>)
 80023ea:	f001 fbf7 	bl	8003bdc <HAL_GPIO_Init>
}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	@ 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	48000400 	.word	0x48000400
 8002404:	40013400 	.word	0x40013400
 8002408:	48000800 	.word	0x48000800

0800240c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a41      	ldr	r2, [pc, #260]	@ (8002530 <HAL_UART_MspInit+0x124>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d17b      	bne.n	8002526 <HAL_UART_MspInit+0x11a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800242e:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_UART_MspInit+0x128>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4a40      	ldr	r2, [pc, #256]	@ (8002534 <HAL_UART_MspInit+0x128>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002438:	6193      	str	r3, [r2, #24]
 800243a:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <HAL_UART_MspInit+0x128>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_UART_MspInit+0x128>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4a3a      	ldr	r2, [pc, #232]	@ (8002534 <HAL_UART_MspInit+0x128>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002450:	6153      	str	r3, [r2, #20]
 8002452:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_UART_MspInit+0x128>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800245e:	23c0      	movs	r3, #192	@ 0xc0
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246e:	2307      	movs	r3, #7
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	482f      	ldr	r0, [pc, #188]	@ (8002538 <HAL_UART_MspInit+0x12c>)
 800247a:	f001 fbaf 	bl	8003bdc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800247e:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_UART_MspInit+0x130>)
 8002480:	4a2f      	ldr	r2, [pc, #188]	@ (8002540 <HAL_UART_MspInit+0x134>)
 8002482:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_UART_MspInit+0x130>)
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800248a:	4b2c      	ldr	r3, [pc, #176]	@ (800253c <HAL_UART_MspInit+0x130>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <HAL_UART_MspInit+0x130>)
 8002492:	2280      	movs	r2, #128	@ 0x80
 8002494:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002496:	4b29      	ldr	r3, [pc, #164]	@ (800253c <HAL_UART_MspInit+0x130>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249c:	4b27      	ldr	r3, [pc, #156]	@ (800253c <HAL_UART_MspInit+0x130>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_UART_MspInit+0x130>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_UART_MspInit+0x130>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024ae:	4823      	ldr	r0, [pc, #140]	@ (800253c <HAL_UART_MspInit+0x130>)
 80024b0:	f001 f911 	bl	80036d6 <HAL_DMA_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80024ba:	f7ff fa05 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <HAL_UART_MspInit+0x130>)
 80024c2:	675a      	str	r2, [r3, #116]	@ 0x74
 80024c4:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_UART_MspInit+0x130>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002548 <HAL_UART_MspInit+0x13c>)
 80024ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024d2:	2210      	movs	r2, #16
 80024d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024de:	2280      	movs	r2, #128	@ 0x80
 80024e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e8:	4b16      	ldr	r3, [pc, #88]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024f4:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024fa:	4812      	ldr	r0, [pc, #72]	@ (8002544 <HAL_UART_MspInit+0x138>)
 80024fc:	f001 f8eb 	bl	80036d6 <HAL_DMA_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8002506:	f7ff f9df 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <HAL_UART_MspInit+0x138>)
 800250e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002510:	4a0c      	ldr	r2, [pc, #48]	@ (8002544 <HAL_UART_MspInit+0x138>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2025      	movs	r0, #37	@ 0x25
 800251c:	f001 f897 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002520:	2025      	movs	r0, #37	@ 0x25
 8002522:	f001 f8b0 	bl	8003686 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002526:	bf00      	nop
 8002528:	3728      	adds	r7, #40	@ 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40013800 	.word	0x40013800
 8002534:	40021000 	.word	0x40021000
 8002538:	48000400 	.word	0x48000400
 800253c:	2000052c 	.word	0x2000052c
 8002540:	40020058 	.word	0x40020058
 8002544:	20000570 	.word	0x20000570
 8002548:	40020044 	.word	0x40020044

0800254c <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_UART_MspDeInit+0x48>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d116      	bne.n	800258c <HAL_UART_MspDeInit+0x40>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_UART_MspDeInit+0x4c>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4a0d      	ldr	r2, [pc, #52]	@ (8002598 <HAL_UART_MspDeInit+0x4c>)
 8002564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002568:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800256a:	21c0      	movs	r1, #192	@ 0xc0
 800256c:	480b      	ldr	r0, [pc, #44]	@ (800259c <HAL_UART_MspDeInit+0x50>)
 800256e:	f001 fcaf 	bl	8003ed0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002576:	4618      	mov	r0, r3
 8002578:	f001 f8f4 	bl	8003764 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	4618      	mov	r0, r3
 8002582:	f001 f8ef 	bl	8003764 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002586:	2025      	movs	r0, #37	@ 0x25
 8002588:	f001 f88b 	bl	80036a2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40013800 	.word	0x40013800
 8002598:	40021000 	.word	0x40021000
 800259c:	48000400 	.word	0x48000400

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <NMI_Handler+0x4>

080025a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <MemManage_Handler+0x4>

080025b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f000 f8c5 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002604:	4802      	ldr	r0, [pc, #8]	@ (8002610 <DMA1_Channel4_IRQHandler+0x10>)
 8002606:	f001 f9d0 	bl	80039aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000570 	.word	0x20000570

08002614 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <DMA1_Channel5_IRQHandler+0x10>)
 800261a:	f001 f9c6 	bl	80039aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000052c 	.word	0x2000052c

08002628 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800262c:	4803      	ldr	r0, [pc, #12]	@ (800263c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800262e:	f003 ff7b 	bl	8006528 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002632:	4803      	ldr	r0, [pc, #12]	@ (8002640 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002634:	f003 ff78 	bl	8006528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200002dc 	.word	0x200002dc
 8002640:	20000458 	.word	0x20000458

08002644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002648:	4802      	ldr	r0, [pc, #8]	@ (8002654 <TIM2_IRQHandler+0x10>)
 800264a:	f003 ff6d 	bl	8006528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000328 	.word	0x20000328

08002658 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800265c:	4802      	ldr	r0, [pc, #8]	@ (8002668 <TIM3_IRQHandler+0x10>)
 800265e:	f003 ff63 	bl	8006528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000374 	.word	0x20000374

0800266c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002670:	4802      	ldr	r0, [pc, #8]	@ (800267c <USART1_IRQHandler+0x10>)
 8002672:	f005 fc73 	bl	8007f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200004a4 	.word	0x200004a4

08002680 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	@ (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a8:	f7ff ffea 	bl	8002680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026ac:	480c      	ldr	r0, [pc, #48]	@ (80026e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ae:	490d      	ldr	r1, [pc, #52]	@ (80026e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <LoopForever+0xe>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c4:	4c0a      	ldr	r4, [pc, #40]	@ (80026f0 <LoopForever+0x16>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026d2:	f006 fdf7 	bl	80092c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026d6:	f7fd fe35 	bl	8000344 <main>

080026da <LoopForever>:

LoopForever:
    b LoopForever
 80026da:	e7fe      	b.n	80026da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80026e8:	08009364 	.word	0x08009364
  ldr r2, =_sbss
 80026ec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80026f0:	200005b8 	.word	0x200005b8

080026f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC1_2_IRQHandler>
	...

080026f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_Init+0x28>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <HAL_Init+0x28>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 ff95 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	200f      	movs	r0, #15
 8002710:	f000 f808 	bl	8002724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7ff fbfc 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000

08002724 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_InitTick+0x54>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_InitTick+0x58>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800273a:	fbb3 f3f1 	udiv	r3, r3, r1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 ffbb 	bl	80036be <HAL_SYSTICK_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00e      	b.n	8002770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d80a      	bhi.n	800276e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f000 ff75 	bl	800364e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4a06      	ldr	r2, [pc, #24]	@ (8002780 <HAL_InitTick+0x5c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000008 	.word	0x20000008
 800277c:	20000010 	.word	0x20000010
 8002780:	2000000c 	.word	0x2000000c

08002784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_IncTick+0x20>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_IncTick+0x24>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <HAL_IncTick+0x24>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000010 	.word	0x20000010
 80027a8:	200005b4 	.word	0x200005b4

080027ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80027b0:	4b03      	ldr	r3, [pc, #12]	@ (80027c0 <HAL_GetTick+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	200005b4 	.word	0x200005b4

080027c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff ffee 	bl	80027ac <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027de:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffde 	bl	80027ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000010 	.word	0x20000010

0800280c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b09a      	sub	sp, #104	@ 0x68
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e1c9      	b.n	8002bc0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d176      	bne.n	800292c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d152      	bne.n	80028ec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fb79 	bl	8001f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d13b      	bne.n	80028ec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fd85 	bl	8003384 <ADC_Disable>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d12f      	bne.n	80028ec <HAL_ADC_Init+0xe0>
 800288c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002890:	2b00      	cmp	r3, #0
 8002892:	d12b      	bne.n	80028ec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800289c:	f023 0302 	bic.w	r3, r3, #2
 80028a0:	f043 0202 	orr.w	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028b6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80028c6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028c8:	4b86      	ldr	r3, [pc, #536]	@ (8002ae4 <HAL_ADC_Init+0x2d8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a86      	ldr	r2, [pc, #536]	@ (8002ae8 <HAL_ADC_Init+0x2dc>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9a      	lsrs	r2, r3, #18
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028de:	e002      	b.n	80028e6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002908:	d110      	bne.n	800292c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f023 0312 	bic.w	r3, r3, #18
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 8136 	bne.w	8002ba6 <HAL_ADC_Init+0x39a>
 800293a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 8131 	bne.w	8002ba6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 8129 	bne.w	8002ba6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800295c:	f043 0202 	orr.w	r2, r3, #2
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800296c:	d004      	beq.n	8002978 <HAL_ADC_Init+0x16c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a5e      	ldr	r2, [pc, #376]	@ (8002aec <HAL_ADC_Init+0x2e0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_ADC_Init+0x170>
 8002978:	4b5d      	ldr	r3, [pc, #372]	@ (8002af0 <HAL_ADC_Init+0x2e4>)
 800297a:	e000      	b.n	800297e <HAL_ADC_Init+0x172>
 800297c:	4b5d      	ldr	r3, [pc, #372]	@ (8002af4 <HAL_ADC_Init+0x2e8>)
 800297e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002988:	d102      	bne.n	8002990 <HAL_ADC_Init+0x184>
 800298a:	4b58      	ldr	r3, [pc, #352]	@ (8002aec <HAL_ADC_Init+0x2e0>)
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e01a      	b.n	80029c6 <HAL_ADC_Init+0x1ba>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a55      	ldr	r2, [pc, #340]	@ (8002aec <HAL_ADC_Init+0x2e0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d103      	bne.n	80029a2 <HAL_ADC_Init+0x196>
 800299a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e011      	b.n	80029c6 <HAL_ADC_Init+0x1ba>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a54      	ldr	r2, [pc, #336]	@ (8002af8 <HAL_ADC_Init+0x2ec>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d102      	bne.n	80029b2 <HAL_ADC_Init+0x1a6>
 80029ac:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <HAL_ADC_Init+0x2f0>)
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e009      	b.n	80029c6 <HAL_ADC_Init+0x1ba>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a51      	ldr	r2, [pc, #324]	@ (8002afc <HAL_ADC_Init+0x2f0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d102      	bne.n	80029c2 <HAL_ADC_Init+0x1b6>
 80029bc:	4b4e      	ldr	r3, [pc, #312]	@ (8002af8 <HAL_ADC_Init+0x2ec>)
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e001      	b.n	80029c6 <HAL_ADC_Init+0x1ba>
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_ADC_Init+0x1da>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_Init+0x1da>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_ADC_Init+0x1dc>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11c      	bne.n	8002a26 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_ADC_Init+0x202>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Init+0x202>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_ADC_Init+0x204>
 8002a0e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d108      	bne.n	8002a26 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a24:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7e5b      	ldrb	r3, [r3, #25]
 8002a2a:	035b      	lsls	r3, r3, #13
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a30:	2a01      	cmp	r2, #1
 8002a32:	d002      	beq.n	8002a3a <HAL_ADC_Init+0x22e>
 8002a34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a38:	e000      	b.n	8002a3c <HAL_ADC_Init+0x230>
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d11b      	bne.n	8002a92 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7e5b      	ldrb	r3, [r3, #25]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	3b01      	subs	r3, #1
 8002a68:	045a      	lsls	r2, r3, #17
 8002a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a72:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a74:	e00d      	b.n	8002a92 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d03a      	beq.n	8002b10 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a16      	ldr	r2, [pc, #88]	@ (8002af8 <HAL_ADC_Init+0x2ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_ADC_Init+0x2a2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a14      	ldr	r2, [pc, #80]	@ (8002afc <HAL_ADC_Init+0x2f0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d128      	bne.n	8002b00 <HAL_ADC_Init+0x2f4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8002ab6:	d012      	beq.n	8002ade <HAL_ADC_Init+0x2d2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_ADC_Init+0x2cc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002aca:	d002      	beq.n	8002ad2 <HAL_ADC_Init+0x2c6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	e018      	b.n	8002b04 <HAL_ADC_Init+0x2f8>
 8002ad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad6:	e015      	b.n	8002b04 <HAL_ADC_Init+0x2f8>
 8002ad8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002adc:	e012      	b.n	8002b04 <HAL_ADC_Init+0x2f8>
 8002ade:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002ae2:	e00f      	b.n	8002b04 <HAL_ADC_Init+0x2f8>
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	431bde83 	.word	0x431bde83
 8002aec:	50000100 	.word	0x50000100
 8002af0:	50000300 	.word	0x50000300
 8002af4:	50000700 	.word	0x50000700
 8002af8:	50000400 	.word	0x50000400
 8002afc:	50000500 	.word	0x50000500
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d114      	bne.n	8002b48 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b2c:	f023 0302 	bic.w	r3, r3, #2
 8002b30:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7e1b      	ldrb	r3, [r3, #24]
 8002b36:	039a      	lsls	r2, r3, #14
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4313      	orrs	r3, r2
 8002b42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b44:	4313      	orrs	r3, r2
 8002b46:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc8 <HAL_ADC_Init+0x3bc>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10c      	bne.n	8002b7e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f023 010f 	bic.w	r1, r3, #15
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b7c:	e007      	b.n	8002b8e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 020f 	bic.w	r2, r2, #15
 8002b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f023 0303 	bic.w	r3, r3, #3
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ba4:	e00a      	b.n	8002bbc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f023 0312 	bic.w	r3, r3, #18
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002bbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3768      	adds	r7, #104	@ 0x68
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	fff0c007 	.word	0xfff0c007

08002bcc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b09b      	sub	sp, #108	@ 0x6c
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x22>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e2c8      	b.n	8003180 <HAL_ADC_ConfigChannel+0x5b4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 82ac 	bne.w	800315e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d81c      	bhi.n	8002c48 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	461a      	mov	r2, r3
 8002c22:	231f      	movs	r3, #31
 8002c24:	4093      	lsls	r3, r2
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4019      	ands	r1, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c46:	e063      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d81e      	bhi.n	8002c8e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	3b1e      	subs	r3, #30
 8002c64:	221f      	movs	r2, #31
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	4019      	ands	r1, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	3b1e      	subs	r3, #30
 8002c80:	fa00 f203 	lsl.w	r2, r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c8c:	e040      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b0e      	cmp	r3, #14
 8002c94:	d81e      	bhi.n	8002cd4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	3b3c      	subs	r3, #60	@ 0x3c
 8002caa:	221f      	movs	r2, #31
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	4019      	ands	r1, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	3b3c      	subs	r3, #60	@ 0x3c
 8002cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cd2:	e01d      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	3b5a      	subs	r3, #90	@ 0x5a
 8002ce8:	221f      	movs	r2, #31
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	4019      	ands	r1, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	3b5a      	subs	r3, #90	@ 0x5a
 8002d04:	fa00 f203 	lsl.w	r2, r0, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 80e5 	bne.w	8002eea <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	d91c      	bls.n	8002d62 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1e      	subs	r3, #30
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4019      	ands	r1, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6898      	ldr	r0, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	fa00 f203 	lsl.w	r2, r0, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	619a      	str	r2, [r3, #24]
 8002d60:	e019      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6959      	ldr	r1, [r3, #20]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	2207      	movs	r2, #7
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	4019      	ands	r1, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6898      	ldr	r0, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d84f      	bhi.n	8002e58 <HAL_ADC_ConfigChannel+0x28c>
 8002db8:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbe:	bf00      	nop
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002df3 	.word	0x08002df3
 8002dc8:	08002e15 	.word	0x08002e15
 8002dcc:	08002e37 	.word	0x08002e37
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dd6:	4b99      	ldr	r3, [pc, #612]	@ (800303c <HAL_ADC_ConfigChannel+0x470>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	0691      	lsls	r1, r2, #26
 8002de0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002de2:	430a      	orrs	r2, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002dee:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002df0:	e07b      	b.n	8002eea <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002df8:	4b90      	ldr	r3, [pc, #576]	@ (800303c <HAL_ADC_ConfigChannel+0x470>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	0691      	lsls	r1, r2, #26
 8002e02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e04:	430a      	orrs	r2, r1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e10:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e12:	e06a      	b.n	8002eea <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e1a:	4b88      	ldr	r3, [pc, #544]	@ (800303c <HAL_ADC_ConfigChannel+0x470>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	0691      	lsls	r1, r2, #26
 8002e24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e26:	430a      	orrs	r2, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e32:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e34:	e059      	b.n	8002eea <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e3c:	4b7f      	ldr	r3, [pc, #508]	@ (800303c <HAL_ADC_ConfigChannel+0x470>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	0691      	lsls	r1, r2, #26
 8002e46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e54:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e56:	e048      	b.n	8002eea <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	069b      	lsls	r3, r3, #26
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d107      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e7a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e9e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	069b      	lsls	r3, r3, #26
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ec2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	069b      	lsls	r3, r3, #26
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d107      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002ee8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x33e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x33e>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x340>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 8131 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d00f      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2201      	movs	r2, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	400a      	ands	r2, r1
 8002f34:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002f38:	e049      	b.n	8002fce <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d91c      	bls.n	8002f96 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6999      	ldr	r1, [r3, #24]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b1b      	subs	r3, #27
 8002f6e:	2207      	movs	r2, #7
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4019      	ands	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6898      	ldr	r0, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	3b1b      	subs	r3, #27
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	619a      	str	r2, [r3, #24]
 8002f94:	e01b      	b.n	8002fce <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6959      	ldr	r1, [r3, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	2207      	movs	r2, #7
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	4019      	ands	r1, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6898      	ldr	r0, [r3, #8]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fd6:	d004      	beq.n	8002fe2 <HAL_ADC_ConfigChannel+0x416>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <HAL_ADC_ConfigChannel+0x474>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x41a>
 8002fe2:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <HAL_ADC_ConfigChannel+0x478>)
 8002fe4:	e000      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x41c>
 8002fe6:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <HAL_ADC_ConfigChannel+0x47c>)
 8002fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d105      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d015      	beq.n	800302a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003002:	2b11      	cmp	r3, #17
 8003004:	d105      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003016:	2b12      	cmp	r3, #18
 8003018:	f040 80ac 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800301c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 80a5 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003032:	d10b      	bne.n	800304c <HAL_ADC_ConfigChannel+0x480>
 8003034:	4b02      	ldr	r3, [pc, #8]	@ (8003040 <HAL_ADC_ConfigChannel+0x474>)
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e023      	b.n	8003082 <HAL_ADC_ConfigChannel+0x4b6>
 800303a:	bf00      	nop
 800303c:	83fff000 	.word	0x83fff000
 8003040:	50000100 	.word	0x50000100
 8003044:	50000300 	.word	0x50000300
 8003048:	50000700 	.word	0x50000700
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a4e      	ldr	r2, [pc, #312]	@ (800318c <HAL_ADC_ConfigChannel+0x5c0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d103      	bne.n	800305e <HAL_ADC_ConfigChannel+0x492>
 8003056:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e011      	b.n	8003082 <HAL_ADC_ConfigChannel+0x4b6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a4b      	ldr	r2, [pc, #300]	@ (8003190 <HAL_ADC_ConfigChannel+0x5c4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d102      	bne.n	800306e <HAL_ADC_ConfigChannel+0x4a2>
 8003068:	4b4a      	ldr	r3, [pc, #296]	@ (8003194 <HAL_ADC_ConfigChannel+0x5c8>)
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e009      	b.n	8003082 <HAL_ADC_ConfigChannel+0x4b6>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a48      	ldr	r2, [pc, #288]	@ (8003194 <HAL_ADC_ConfigChannel+0x5c8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d102      	bne.n	800307e <HAL_ADC_ConfigChannel+0x4b2>
 8003078:	4b45      	ldr	r3, [pc, #276]	@ (8003190 <HAL_ADC_ConfigChannel+0x5c4>)
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e001      	b.n	8003082 <HAL_ADC_ConfigChannel+0x4b6>
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d108      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x4d6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x4d6>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x4d8>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d150      	bne.n	800314a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d107      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x4fe>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x4fe>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_ADC_ConfigChannel+0x500>
 80030ca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d13c      	bne.n	800314a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d11d      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x548>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e0:	d118      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80030e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003198 <HAL_ADC_ConfigChannel+0x5cc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2a      	ldr	r2, [pc, #168]	@ (800319c <HAL_ADC_ConfigChannel+0x5d0>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	0c9a      	lsrs	r2, r3, #18
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003104:	e002      	b.n	800310c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3b01      	subs	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f9      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003112:	e02e      	b.n	8003172 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b11      	cmp	r3, #17
 800311a:	d10b      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x568>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800312e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003130:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003132:	e01e      	b.n	8003172 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b12      	cmp	r3, #18
 800313a:	d11a      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800313c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003146:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003148:	e013      	b.n	8003172 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800315c:	e00a      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003170:	e000      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003172:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800317c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003180:	4618      	mov	r0, r3
 8003182:	376c      	adds	r7, #108	@ 0x6c
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	50000100 	.word	0x50000100
 8003190:	50000400 	.word	0x50000400
 8003194:	50000500 	.word	0x50000500
 8003198:	20000008 	.word	0x20000008
 800319c:	431bde83 	.word	0x431bde83

080031a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b099      	sub	sp, #100	@ 0x64
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b8:	d102      	bne.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80031ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	e01a      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d103      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80031ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e011      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a67      	ldr	r2, [pc, #412]	@ (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d102      	bne.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031dc:	4b66      	ldr	r3, [pc, #408]	@ (8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	e009      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a64      	ldr	r2, [pc, #400]	@ (8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d102      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031ec:	4b61      	ldr	r3, [pc, #388]	@ (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	e001      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b0      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800320a:	2302      	movs	r3, #2
 800320c:	e0a9      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 808d 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 8086 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323c:	d004      	beq.n	8003248 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a4b      	ldr	r2, [pc, #300]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003248:	4b4c      	ldr	r3, [pc, #304]	@ (800337c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800324a:	e000      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800324c:	4b4c      	ldr	r3, [pc, #304]	@ (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800324e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d040      	beq.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800326a:	035b      	lsls	r3, r3, #13
 800326c:	430b      	orrs	r3, r1
 800326e:	431a      	orrs	r2, r3
 8003270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003272:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d15c      	bne.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80032b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d14b      	bne.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032c4:	f023 030f 	bic.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	6892      	ldr	r2, [r2, #8]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d8:	e03c      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d108      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d123      	bne.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d107      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003328:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800332a:	2b00      	cmp	r3, #0
 800332c:	d112      	bne.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800332e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800333c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800333e:	e009      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8003352:	e000      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003354:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800335e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8003362:	4618      	mov	r0, r3
 8003364:	3764      	adds	r7, #100	@ 0x64
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	50000100 	.word	0x50000100
 8003374:	50000400 	.word	0x50000400
 8003378:	50000500 	.word	0x50000500
 800337c:	50000300 	.word	0x50000300
 8003380:	50000700 	.word	0x50000700

08003384 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d108      	bne.n	80033b0 <ADC_Disable+0x2c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <ADC_Disable+0x2c>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <ADC_Disable+0x2e>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d047      	beq.n	8003446 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030d 	and.w	r3, r3, #13
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10f      	bne.n	80033e4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0202 	orr.w	r2, r2, #2
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2203      	movs	r2, #3
 80033da:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80033dc:	f7ff f9e6 	bl	80027ac <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033e2:	e029      	b.n	8003438 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e023      	b.n	8003448 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003400:	f7ff f9d4 	bl	80027ac <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d914      	bls.n	8003438 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10d      	bne.n	8003438 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f043 0210 	orr.w	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d0dc      	beq.n	8003400 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	@ (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	@ (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db12      	blt.n	8003528 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	490a      	ldr	r1, [pc, #40]	@ (8003534 <__NVIC_DisableIRQ+0x44>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	3320      	adds	r3, #32
 8003518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800351c:	f3bf 8f4f 	dsb	sy
}
 8003520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003522:	f3bf 8f6f 	isb	sy
}
 8003526:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	@ (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	@ (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	@ 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f7ff ff8e 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff05 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003660:	f7ff ff1a 	bl	8003498 <__NVIC_GetPriorityGrouping>
 8003664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff ff8e 	bl	800358c <NVIC_EncodePriority>
 8003670:	4602      	mov	r2, r0
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff5d 	bl	8003538 <__NVIC_SetPriority>
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff0d 	bl	80034b4 <__NVIC_EnableIRQ>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff1d 	bl	80034f0 <__NVIC_DisableIRQ>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff94 	bl	80035f4 <SysTick_Config>
 80036cc:	4603      	mov	r3, r0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e037      	b.n	800375c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003702:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa10 	bl	8003b64 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e03a      	b.n	80037ec <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9dc 	bl	8003b64 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_DMA_Start_IT+0x20>
 8003810:	2302      	movs	r3, #2
 8003812:	e04a      	b.n	80038aa <HAL_DMA_Start_IT+0xb6>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003822:	2b01      	cmp	r3, #1
 8003824:	d13a      	bne.n	800389c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f95c 	bl	8003b08 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 020e 	orr.w	r2, r2, #14
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e00f      	b.n	800388a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 020a 	orr.w	r2, r2, #10
 8003878:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0204 	bic.w	r2, r2, #4
 8003888:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e005      	b.n	80038a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
 80038a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e02e      	b.n	8003922 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d008      	beq.n	80038e0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2204      	movs	r2, #4
 80038d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e020      	b.n	8003922 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 020e 	bic.w	r2, r2, #14
 80038ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003940:	2b02      	cmp	r3, #2
 8003942:	d005      	beq.n	8003950 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2204      	movs	r2, #4
 8003948:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	e027      	b.n	80039a0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 020e 	bic.w	r2, r2, #14
 800395e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	2101      	movs	r1, #1
 800397a:	fa01 f202 	lsl.w	r2, r1, r2
 800397e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
    }
  }
  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2204      	movs	r2, #4
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d024      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x72>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01f      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0204 	bic.w	r2, r2, #4
 80039f8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	2104      	movs	r1, #4
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d06a      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a1a:	e065      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	2202      	movs	r2, #2
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02c      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xdc>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d027      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 020a 	bic.w	r2, r2, #10
 8003a52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	2102      	movs	r1, #2
 8003a66:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d035      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a84:	e030      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d028      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d023      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020e 	bic.w	r2, r2, #14
 8003aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
    }
  }
}
 8003ae6:	e7ff      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x13e>
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d108      	bne.n	8003b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b46:	e007      	b.n	8003b58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <DMA_CalcBaseAndBitshift+0x60>)
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d80f      	bhi.n	8003b98 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8003b80:	4413      	add	r3, r2
 8003b82:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <DMA_CalcBaseAndBitshift+0x68>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	009a      	lsls	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd0 <DMA_CalcBaseAndBitshift+0x6c>)
 8003b94:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003b96:	e00e      	b.n	8003bb6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <DMA_CalcBaseAndBitshift+0x70>)
 8003ba0:	4413      	add	r3, r2
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bcc <DMA_CalcBaseAndBitshift+0x68>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	009a      	lsls	r2, r3, #2
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <DMA_CalcBaseAndBitshift+0x74>)
 8003bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40020407 	.word	0x40020407
 8003bc8:	bffdfff8 	.word	0xbffdfff8
 8003bcc:	cccccccd 	.word	0xcccccccd
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	bffdfbf8 	.word	0xbffdfbf8
 8003bd8:	40020400 	.word	0x40020400

08003bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bea:	e154      	b.n	8003e96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8146 	beq.w	8003e90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d005      	beq.n	8003c1c <HAL_GPIO_Init+0x40>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d130      	bne.n	8003c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c52:	2201      	movs	r2, #1
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 0201 	and.w	r2, r3, #1
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d017      	beq.n	8003cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	2203      	movs	r2, #3
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d123      	bne.n	8003d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	08da      	lsrs	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3208      	adds	r2, #8
 8003cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	08da      	lsrs	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3208      	adds	r2, #8
 8003d08:	6939      	ldr	r1, [r7, #16]
 8003d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	2203      	movs	r2, #3
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0203 	and.w	r2, r3, #3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80a0 	beq.w	8003e90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d50:	4b58      	ldr	r3, [pc, #352]	@ (8003eb4 <HAL_GPIO_Init+0x2d8>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	4a57      	ldr	r2, [pc, #348]	@ (8003eb4 <HAL_GPIO_Init+0x2d8>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6193      	str	r3, [r2, #24]
 8003d5c:	4b55      	ldr	r3, [pc, #340]	@ (8003eb4 <HAL_GPIO_Init+0x2d8>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d68:	4a53      	ldr	r2, [pc, #332]	@ (8003eb8 <HAL_GPIO_Init+0x2dc>)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	3302      	adds	r3, #2
 8003d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	220f      	movs	r2, #15
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d92:	d019      	beq.n	8003dc8 <HAL_GPIO_Init+0x1ec>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a49      	ldr	r2, [pc, #292]	@ (8003ebc <HAL_GPIO_Init+0x2e0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_GPIO_Init+0x1e8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a48      	ldr	r2, [pc, #288]	@ (8003ec0 <HAL_GPIO_Init+0x2e4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00d      	beq.n	8003dc0 <HAL_GPIO_Init+0x1e4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a47      	ldr	r2, [pc, #284]	@ (8003ec4 <HAL_GPIO_Init+0x2e8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <HAL_GPIO_Init+0x1e0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a46      	ldr	r2, [pc, #280]	@ (8003ec8 <HAL_GPIO_Init+0x2ec>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <HAL_GPIO_Init+0x1dc>
 8003db4:	2304      	movs	r3, #4
 8003db6:	e008      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003db8:	2305      	movs	r3, #5
 8003dba:	e006      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e004      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e002      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	f002 0203 	and.w	r2, r2, #3
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	4093      	lsls	r3, r2
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dda:	4937      	ldr	r1, [pc, #220]	@ (8003eb8 <HAL_GPIO_Init+0x2dc>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de8:	4b38      	ldr	r3, [pc, #224]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e12:	4b2e      	ldr	r3, [pc, #184]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e36:	4a25      	ldr	r2, [pc, #148]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e60:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e66:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e8a:	4a10      	ldr	r2, [pc, #64]	@ (8003ecc <HAL_GPIO_Init+0x2f0>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	3301      	adds	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f aea3 	bne.w	8003bec <HAL_GPIO_Init+0x10>
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	48000400 	.word	0x48000400
 8003ec0:	48000800 	.word	0x48000800
 8003ec4:	48000c00 	.word	0x48000c00
 8003ec8:	48001000 	.word	0x48001000
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ede:	e0b8      	b.n	8004052 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80ab 	beq.w	800404c <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ef6:	4a5e      	ldr	r2, [pc, #376]	@ (8004070 <HAL_GPIO_DeInit+0x1a0>)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f1e:	d019      	beq.n	8003f54 <HAL_GPIO_DeInit+0x84>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a54      	ldr	r2, [pc, #336]	@ (8004074 <HAL_GPIO_DeInit+0x1a4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <HAL_GPIO_DeInit+0x80>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a53      	ldr	r2, [pc, #332]	@ (8004078 <HAL_GPIO_DeInit+0x1a8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00d      	beq.n	8003f4c <HAL_GPIO_DeInit+0x7c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a52      	ldr	r2, [pc, #328]	@ (800407c <HAL_GPIO_DeInit+0x1ac>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <HAL_GPIO_DeInit+0x78>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a51      	ldr	r2, [pc, #324]	@ (8004080 <HAL_GPIO_DeInit+0x1b0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_GPIO_DeInit+0x74>
 8003f40:	2304      	movs	r3, #4
 8003f42:	e008      	b.n	8003f56 <HAL_GPIO_DeInit+0x86>
 8003f44:	2305      	movs	r3, #5
 8003f46:	e006      	b.n	8003f56 <HAL_GPIO_DeInit+0x86>
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e004      	b.n	8003f56 <HAL_GPIO_DeInit+0x86>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e002      	b.n	8003f56 <HAL_GPIO_DeInit+0x86>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_GPIO_DeInit+0x86>
 8003f54:	2300      	movs	r3, #0
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	f002 0203 	and.w	r2, r2, #3
 8003f5c:	0092      	lsls	r2, r2, #2
 8003f5e:	4093      	lsls	r3, r2
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d132      	bne.n	8003fcc <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f66:	4b47      	ldr	r3, [pc, #284]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	4945      	ldr	r1, [pc, #276]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f74:	4b43      	ldr	r3, [pc, #268]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4941      	ldr	r1, [pc, #260]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f82:	4b40      	ldr	r3, [pc, #256]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	493e      	ldr	r1, [pc, #248]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f90:	4b3c      	ldr	r3, [pc, #240]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	493a      	ldr	r1, [pc, #232]	@ (8004084 <HAL_GPIO_DeInit+0x1b4>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003fae:	4a30      	ldr	r2, [pc, #192]	@ (8004070 <HAL_GPIO_DeInit+0x1a0>)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	482c      	ldr	r0, [pc, #176]	@ (8004070 <HAL_GPIO_DeInit+0x1a0>)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	2103      	movs	r1, #3
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	401a      	ands	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	220f      	movs	r2, #15
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	08d2      	lsrs	r2, r2, #3
 8004002:	4019      	ands	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3208      	adds	r2, #8
 8004008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2103      	movs	r1, #3
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	401a      	ands	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	2101      	movs	r1, #1
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	401a      	ands	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2103      	movs	r1, #3
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]
    }

    position++;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	f47f af40 	bne.w	8003ee0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000
 8004074:	48000400 	.word	0x48000400
 8004078:	48000800 	.word	0x48000800
 800407c:	48000c00 	.word	0x48000c00
 8004080:	48001000 	.word	0x48001000
 8004084:	40010400 	.word	0x40010400

08004088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]
 8004094:	4613      	mov	r3, r2
 8004096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004098:	787b      	ldrb	r3, [r7, #1]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e08d      	b.n	80041e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd ffaa 	bl	8002038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	@ 0x24
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004108:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004118:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	e006      	b.n	8004140 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800413e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d108      	bne.n	800415a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	e007      	b.n	800416a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004168:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800417c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800418c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	d138      	bne.n	8004276 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800420e:	2302      	movs	r3, #2
 8004210:	e032      	b.n	8004278 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2224      	movs	r2, #36	@ 0x24
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004240:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b20      	cmp	r3, #32
 8004298:	d139      	bne.n	800430e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e033      	b.n	8004310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	@ 0x24
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
  }
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004322:	af00      	add	r7, sp, #0
 8004324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004328:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800432c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800432e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d102      	bne.n	8004342 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f000 bff4 	b.w	800532a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 816d 	beq.w	8004632 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004358:	4bb4      	ldr	r3, [pc, #720]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b04      	cmp	r3, #4
 8004362:	d00c      	beq.n	800437e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004364:	4bb1      	ldr	r3, [pc, #708]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d157      	bne.n	8004420 <HAL_RCC_OscConfig+0x104>
 8004370:	4bae      	ldr	r3, [pc, #696]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437c:	d150      	bne.n	8004420 <HAL_RCC_OscConfig+0x104>
 800437e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004382:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004392:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b3f      	cmp	r3, #63	@ 0x3f
 800439e:	d802      	bhi.n	80043a6 <HAL_RCC_OscConfig+0x8a>
 80043a0:	4ba2      	ldr	r3, [pc, #648]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	e015      	b.n	80043d2 <HAL_RCC_OscConfig+0xb6>
 80043a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043aa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80043ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043be:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80043c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80043ce:	4b97      	ldr	r3, [pc, #604]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043d6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80043da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80043de:	fa92 f2a2 	rbit	r2, r2
 80043e2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80043e6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80043ea:	fab2 f282 	clz	r2, r2
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	f042 0220 	orr.w	r2, r2, #32
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	f002 021f 	and.w	r2, r2, #31
 80043fa:	2101      	movs	r1, #1
 80043fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8114 	beq.w	8004630 <HAL_RCC_OscConfig+0x314>
 8004408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f040 810b 	bne.w	8004630 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f000 bf85 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x124>
 8004432:	4b7e      	ldr	r3, [pc, #504]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7d      	ldr	r2, [pc, #500]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e036      	b.n	80044ae <HAL_RCC_OscConfig+0x192>
 8004440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10c      	bne.n	800446a <HAL_RCC_OscConfig+0x14e>
 8004450:	4b76      	ldr	r3, [pc, #472]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a75      	ldr	r2, [pc, #468]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b73      	ldr	r3, [pc, #460]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a72      	ldr	r2, [pc, #456]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e021      	b.n	80044ae <HAL_RCC_OscConfig+0x192>
 800446a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x17a>
 800447c:	4b6b      	ldr	r3, [pc, #428]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a6a      	ldr	r2, [pc, #424]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b68      	ldr	r3, [pc, #416]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a67      	ldr	r2, [pc, #412]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e00b      	b.n	80044ae <HAL_RCC_OscConfig+0x192>
 8004496:	4b65      	ldr	r3, [pc, #404]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a64      	ldr	r2, [pc, #400]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b62      	ldr	r3, [pc, #392]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a61      	ldr	r2, [pc, #388]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80044a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ae:	4b5f      	ldr	r3, [pc, #380]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	f023 020f 	bic.w	r2, r3, #15
 80044b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	495a      	ldr	r1, [pc, #360]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d054      	beq.n	8004582 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fe f968 	bl	80027ac <HAL_GetTick>
 80044dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e2:	f7fe f963 	bl	80027ac <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	@ 0x64
 80044f0:	d902      	bls.n	80044f8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	f000 bf19 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
 80044f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044fc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800450c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b3f      	cmp	r3, #63	@ 0x3f
 8004518:	d802      	bhi.n	8004520 <HAL_RCC_OscConfig+0x204>
 800451a:	4b44      	ldr	r3, [pc, #272]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	e015      	b.n	800454c <HAL_RCC_OscConfig+0x230>
 8004520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004524:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800452c:	fa93 f3a3 	rbit	r3, r3
 8004530:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004534:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004538:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800453c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004548:	4b38      	ldr	r3, [pc, #224]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004550:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004554:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004558:	fa92 f2a2 	rbit	r2, r2
 800455c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004560:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004564:	fab2 f282 	clz	r2, r2
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	f042 0220 	orr.w	r2, r2, #32
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	f002 021f 	and.w	r2, r2, #31
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f202 	lsl.w	r2, r1, r2
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0b0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1c6>
 8004580:	e057      	b.n	8004632 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fe f913 	bl	80027ac <HAL_GetTick>
 8004586:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458c:	f7fe f90e 	bl	80027ac <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b64      	cmp	r3, #100	@ 0x64
 800459a:	d902      	bls.n	80045a2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	f000 bec4 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
 80045a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045a6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80045b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80045c2:	d802      	bhi.n	80045ca <HAL_RCC_OscConfig+0x2ae>
 80045c4:	4b19      	ldr	r3, [pc, #100]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	e015      	b.n	80045f6 <HAL_RCC_OscConfig+0x2da>
 80045ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045ce:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80045de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045e2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80045e6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80045f2:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <HAL_RCC_OscConfig+0x310>)
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045fa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80045fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004602:	fa92 f2a2 	rbit	r2, r2
 8004606:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800460a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800460e:	fab2 f282 	clz	r2, r2
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	f042 0220 	orr.w	r2, r2, #32
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	f002 021f 	and.w	r2, r2, #31
 800461e:	2101      	movs	r1, #1
 8004620:	fa01 f202 	lsl.w	r2, r1, r2
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1b0      	bne.n	800458c <HAL_RCC_OscConfig+0x270>
 800462a:	e002      	b.n	8004632 <HAL_RCC_OscConfig+0x316>
 800462c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 816c 	beq.w	8004920 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004648:	4bcc      	ldr	r3, [pc, #816]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004654:	4bc9      	ldr	r3, [pc, #804]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d16d      	bne.n	800473c <HAL_RCC_OscConfig+0x420>
 8004660:	4bc6      	ldr	r3, [pc, #792]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d167      	bne.n	800473c <HAL_RCC_OscConfig+0x420>
 800466c:	2302      	movs	r3, #2
 800466e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800467e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b3f      	cmp	r3, #63	@ 0x3f
 800468a:	d802      	bhi.n	8004692 <HAL_RCC_OscConfig+0x376>
 800468c:	4bbb      	ldr	r3, [pc, #748]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	e013      	b.n	80046ba <HAL_RCC_OscConfig+0x39e>
 8004692:	2302      	movs	r3, #2
 8004694:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80046a4:	2302      	movs	r3, #2
 80046a6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80046aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80046b6:	4bb1      	ldr	r3, [pc, #708]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	2202      	movs	r2, #2
 80046bc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80046c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80046c4:	fa92 f2a2 	rbit	r2, r2
 80046c8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80046cc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046d0:	fab2 f282 	clz	r2, r2
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	f042 0220 	orr.w	r2, r2, #32
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	f002 021f 	and.w	r2, r2, #31
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f202 	lsl.w	r2, r1, r2
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCC_OscConfig+0x3e6>
 80046ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d002      	beq.n	8004702 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f000 be14 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b9e      	ldr	r3, [pc, #632]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800470a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	21f8      	movs	r1, #248	@ 0xf8
 8004718:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004720:	fa91 f1a1 	rbit	r1, r1
 8004724:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004728:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800472c:	fab1 f181 	clz	r1, r1
 8004730:	b2c9      	uxtb	r1, r1
 8004732:	408b      	lsls	r3, r1
 8004734:	4991      	ldr	r1, [pc, #580]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	e0f1      	b.n	8004920 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004740:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8083 	beq.w	8004854 <HAL_RCC_OscConfig+0x538>
 800474e:	2301      	movs	r3, #1
 8004750:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004760:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800476e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	461a      	mov	r2, r3
 8004776:	2301      	movs	r3, #1
 8004778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477a:	f7fe f817 	bl	80027ac <HAL_GetTick>
 800477e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004784:	f7fe f812 	bl	80027ac <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d902      	bls.n	800479a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	f000 bdc8 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
 800479a:	2302      	movs	r3, #2
 800479c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80047ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	fab3 f383 	clz	r3, r3
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80047b8:	d802      	bhi.n	80047c0 <HAL_RCC_OscConfig+0x4a4>
 80047ba:	4b70      	ldr	r3, [pc, #448]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	e013      	b.n	80047e8 <HAL_RCC_OscConfig+0x4cc>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80047ca:	fa93 f3a3 	rbit	r3, r3
 80047ce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80047d2:	2302      	movs	r3, #2
 80047d4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80047d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80047e4:	4b65      	ldr	r3, [pc, #404]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	2202      	movs	r2, #2
 80047ea:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80047ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80047f2:	fa92 f2a2 	rbit	r2, r2
 80047f6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80047fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80047fe:	fab2 f282 	clz	r2, r2
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	f042 0220 	orr.w	r2, r2, #32
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	f002 021f 	and.w	r2, r2, #31
 800480e:	2101      	movs	r1, #1
 8004810:	fa01 f202 	lsl.w	r2, r1, r2
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0b4      	beq.n	8004784 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481a:	4b58      	ldr	r3, [pc, #352]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004826:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	21f8      	movs	r1, #248	@ 0xf8
 8004830:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004838:	fa91 f1a1 	rbit	r1, r1
 800483c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004840:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004844:	fab1 f181 	clz	r1, r1
 8004848:	b2c9      	uxtb	r1, r1
 800484a:	408b      	lsls	r3, r1
 800484c:	494b      	ldr	r1, [pc, #300]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
 8004852:	e065      	b.n	8004920 <HAL_RCC_OscConfig+0x604>
 8004854:	2301      	movs	r3, #1
 8004856:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004866:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004874:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	461a      	mov	r2, r3
 800487c:	2300      	movs	r3, #0
 800487e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd ff94 	bl	80027ac <HAL_GetTick>
 8004884:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004888:	e00a      	b.n	80048a0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800488a:	f7fd ff8f 	bl	80027ac <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	f000 bd45 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
 80048a0:	2302      	movs	r3, #2
 80048a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80048b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80048be:	d802      	bhi.n	80048c6 <HAL_RCC_OscConfig+0x5aa>
 80048c0:	4b2e      	ldr	r3, [pc, #184]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e013      	b.n	80048ee <HAL_RCC_OscConfig+0x5d2>
 80048c6:	2302      	movs	r3, #2
 80048c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80048d8:	2302      	movs	r3, #2
 80048da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80048de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80048ea:	4b24      	ldr	r3, [pc, #144]	@ (800497c <HAL_RCC_OscConfig+0x660>)
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	2202      	movs	r2, #2
 80048f0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80048f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80048f8:	fa92 f2a2 	rbit	r2, r2
 80048fc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004900:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004904:	fab2 f282 	clz	r2, r2
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	f042 0220 	orr.w	r2, r2, #32
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	f002 021f 	and.w	r2, r2, #31
 8004914:	2101      	movs	r1, #1
 8004916:	fa01 f202 	lsl.w	r2, r1, r2
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1b4      	bne.n	800488a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004924:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8115 	beq.w	8004b60 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800493a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d07e      	beq.n	8004a44 <HAL_RCC_OscConfig+0x728>
 8004946:	2301      	movs	r3, #1
 8004948:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <HAL_RCC_OscConfig+0x664>)
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	2301      	movs	r3, #1
 800496e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004970:	f7fd ff1c 	bl	80027ac <HAL_GetTick>
 8004974:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004978:	e00f      	b.n	800499a <HAL_RCC_OscConfig+0x67e>
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000
 8004980:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004984:	f7fd ff12 	bl	80027ac <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d902      	bls.n	800499a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	f000 bcc8 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
 800499a:	2302      	movs	r3, #2
 800499c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049b4:	2202      	movs	r2, #2
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	fa93 f2a3 	rbit	r2, r3
 80049c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d8:	2202      	movs	r2, #2
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	fa93 f2a3 	rbit	r2, r3
 80049ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80049f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f4:	4bb0      	ldr	r3, [pc, #704]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 80049f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a00:	2102      	movs	r1, #2
 8004a02:	6019      	str	r1, [r3, #0]
 8004a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	fa93 f1a3 	rbit	r1, r3
 8004a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a1a:	6019      	str	r1, [r3, #0]
  return result;
 8004a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2101      	movs	r1, #1
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0a0      	beq.n	8004984 <HAL_RCC_OscConfig+0x668>
 8004a42:	e08d      	b.n	8004b60 <HAL_RCC_OscConfig+0x844>
 8004a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	fa93 f2a3 	rbit	r2, r3
 8004a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a66:	601a      	str	r2, [r3, #0]
  return result;
 8004a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a70:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b90      	ldr	r3, [pc, #576]	@ (8004cbc <HAL_RCC_OscConfig+0x9a0>)
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a86:	f7fd fe91 	bl	80027ac <HAL_GetTick>
 8004a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a90:	f7fd fe8c 	bl	80027ac <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d902      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	f000 bc42 	b.w	800532a <HAL_RCC_OscConfig+0x100e>
 8004aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aaa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004aae:	2202      	movs	r2, #2
 8004ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	fa93 f2a3 	rbit	r2, r3
 8004ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ace:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ada:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	fa93 f2a3 	rbit	r2, r3
 8004ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004af6:	2202      	movs	r2, #2
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	fa93 f2a3 	rbit	r2, r3
 8004b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004b10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b12:	4b69      	ldr	r3, [pc, #420]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b1e:	2102      	movs	r1, #2
 8004b20:	6019      	str	r1, [r3, #0]
 8004b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	fa93 f1a3 	rbit	r1, r3
 8004b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b38:	6019      	str	r1, [r3, #0]
  return result;
 8004b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2101      	movs	r1, #1
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d197      	bne.n	8004a90 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 819e 	beq.w	8004eb2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b88:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b92:	61d3      	str	r3, [r2, #28]
 8004b94:	4b48      	ldr	r3, [pc, #288]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004baa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004bae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb6:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <HAL_RCC_OscConfig+0x9a4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d11a      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc0 <HAL_RCC_OscConfig+0x9a4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8004cc0 <HAL_RCC_OscConfig+0x9a4>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bce:	f7fd fded 	bl	80027ac <HAL_GetTick>
 8004bd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd6:	e009      	b.n	8004bec <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd8:	f7fd fde8 	bl	80027ac <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	@ 0x64
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e39e      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bec:	4b34      	ldr	r3, [pc, #208]	@ (8004cc0 <HAL_RCC_OscConfig+0x9a4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0ef      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d106      	bne.n	8004c16 <HAL_RCC_OscConfig+0x8fa>
 8004c08:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	6213      	str	r3, [r2, #32]
 8004c14:	e035      	b.n	8004c82 <HAL_RCC_OscConfig+0x966>
 8004c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x924>
 8004c26:	4b24      	ldr	r3, [pc, #144]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4a23      	ldr	r2, [pc, #140]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	6213      	str	r3, [r2, #32]
 8004c32:	4b21      	ldr	r3, [pc, #132]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	4a20      	ldr	r2, [pc, #128]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	6213      	str	r3, [r2, #32]
 8004c3e:	e020      	b.n	8004c82 <HAL_RCC_OscConfig+0x966>
 8004c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d10c      	bne.n	8004c6a <HAL_RCC_OscConfig+0x94e>
 8004c50:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c56:	f043 0304 	orr.w	r3, r3, #4
 8004c5a:	6213      	str	r3, [r2, #32]
 8004c5c:	4b16      	ldr	r3, [pc, #88]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	6213      	str	r3, [r2, #32]
 8004c68:	e00b      	b.n	8004c82 <HAL_RCC_OscConfig+0x966>
 8004c6a:	4b13      	ldr	r3, [pc, #76]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4a12      	ldr	r2, [pc, #72]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	6213      	str	r3, [r2, #32]
 8004c76:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb8 <HAL_RCC_OscConfig+0x99c>)
 8004c7c:	f023 0304 	bic.w	r3, r3, #4
 8004c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8087 	beq.w	8004da2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c94:	f7fd fd8a 	bl	80027ac <HAL_GetTick>
 8004c98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9c:	e012      	b.n	8004cc4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fd fd85 	bl	80027ac <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d908      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e339      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	10908120 	.word	0x10908120
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ccc:	2202      	movs	r2, #2
 8004cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	fa93 f2a3 	rbit	r2, r3
 8004cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cf8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	fa93 f2a3 	rbit	r2, r3
 8004d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d06:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004d0a:	601a      	str	r2, [r3, #0]
  return result;
 8004d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d10:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004d14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_RCC_OscConfig+0xa10>
 8004d26:	4b98      	ldr	r3, [pc, #608]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	e013      	b.n	8004d54 <HAL_RCC_OscConfig+0xa38>
 8004d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d34:	2202      	movs	r2, #2
 8004d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d3c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	fa93 f2a3 	rbit	r2, r3
 8004d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	4b8d      	ldr	r3, [pc, #564]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	6011      	str	r1, [r2, #0]
 8004d60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d64:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	fa92 f1a2 	rbit	r1, r2
 8004d6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d72:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d76:	6011      	str	r1, [r2, #0]
  return result;
 8004d78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d7c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	fab2 f282 	clz	r2, r2
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	f002 021f 	and.w	r2, r2, #31
 8004d92:	2101      	movs	r1, #1
 8004d94:	fa01 f202 	lsl.w	r2, r1, r2
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f43f af7f 	beq.w	8004c9e <HAL_RCC_OscConfig+0x982>
 8004da0:	e07d      	b.n	8004e9e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da2:	f7fd fd03 	bl	80027ac <HAL_GetTick>
 8004da6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fd fcfe 	bl	80027ac <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e2b2      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
 8004dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004dcc:	2202      	movs	r2, #2
 8004dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	fa93 f2a3 	rbit	r2, r3
 8004dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004df0:	2202      	movs	r2, #2
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	fa93 f2a3 	rbit	r2, r3
 8004e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e06:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e0a:	601a      	str	r2, [r3, #0]
  return result;
 8004e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <HAL_RCC_OscConfig+0xb10>
 8004e26:	4b58      	ldr	r3, [pc, #352]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	e013      	b.n	8004e54 <HAL_RCC_OscConfig+0xb38>
 8004e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e30:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e34:	2202      	movs	r2, #2
 8004e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e3c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	fa93 f2a3 	rbit	r2, r3
 8004e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e4a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	4b4d      	ldr	r3, [pc, #308]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e58:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	6011      	str	r1, [r2, #0]
 8004e60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e64:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	fa92 f1a2 	rbit	r1, r2
 8004e6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e72:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e76:	6011      	str	r1, [r2, #0]
  return result;
 8004e78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e7c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	fab2 f282 	clz	r2, r2
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	f002 021f 	and.w	r2, r2, #31
 8004e92:	2101      	movs	r1, #1
 8004e94:	fa01 f202 	lsl.w	r2, r1, r2
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d186      	bne.n	8004dac <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e9e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea6:	4b38      	ldr	r3, [pc, #224]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4a37      	ldr	r2, [pc, #220]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8232 	beq.w	8005328 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec4:	4b30      	ldr	r3, [pc, #192]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	f000 8201 	beq.w	80052d4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	f040 8157 	bne.w	8005192 <HAL_RCC_OscConfig+0xe76>
 8004ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004eec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	fa93 f2a3 	rbit	r2, r3
 8004f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f04:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f08:	601a      	str	r2, [r3, #0]
  return result;
 8004f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f12:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f14:	fab3 f383 	clz	r3, r3
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f1e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd fc3f 	bl	80027ac <HAL_GetTick>
 8004f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f32:	e009      	b.n	8004f48 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fd fc3a 	bl	80027ac <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1f0      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
 8004f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f5a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	fa93 f2a3 	rbit	r2, r3
 8004f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f68:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f6c:	601a      	str	r2, [r3, #0]
  return result;
 8004f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f72:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f80:	d804      	bhi.n	8004f8c <HAL_RCC_OscConfig+0xc70>
 8004f82:	4b01      	ldr	r3, [pc, #4]	@ (8004f88 <HAL_RCC_OscConfig+0xc6c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	e029      	b.n	8004fdc <HAL_RCC_OscConfig+0xcc0>
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f90:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f9e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	fa93 f2a3 	rbit	r2, r3
 8004fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	fa93 f2a3 	rbit	r2, r3
 8004fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	4bc3      	ldr	r3, [pc, #780]	@ (80052e8 <HAL_RCC_OscConfig+0xfcc>)
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fe0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004fe4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fee:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	fa92 f1a2 	rbit	r1, r2
 8004ff8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ffc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005000:	6011      	str	r1, [r2, #0]
  return result;
 8005002:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005006:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	fab2 f282 	clz	r2, r2
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	f042 0220 	orr.w	r2, r2, #32
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f002 021f 	and.w	r2, r2, #31
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f202 	lsl.w	r2, r1, r2
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d185      	bne.n	8004f34 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005028:	4baf      	ldr	r3, [pc, #700]	@ (80052e8 <HAL_RCC_OscConfig+0xfcc>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005034:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800503c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	430b      	orrs	r3, r1
 800504a:	49a7      	ldr	r1, [pc, #668]	@ (80052e8 <HAL_RCC_OscConfig+0xfcc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
 8005050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005054:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800505c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005062:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fa93 f2a3 	rbit	r2, r3
 800506c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005070:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005074:	601a      	str	r2, [r3, #0]
  return result;
 8005076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800507a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800507e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005080:	fab3 f383 	clz	r3, r3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800508a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	461a      	mov	r2, r3
 8005092:	2301      	movs	r3, #1
 8005094:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005096:	f7fd fb89 	bl	80027ac <HAL_GetTick>
 800509a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800509e:	e009      	b.n	80050b4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fd fb84 	bl	80027ac <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e13a      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
 80050b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	fa93 f2a3 	rbit	r2, r3
 80050d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80050d8:	601a      	str	r2, [r3, #0]
  return result;
 80050da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050de:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80050e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e4:	fab3 f383 	clz	r3, r3
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80050ec:	d802      	bhi.n	80050f4 <HAL_RCC_OscConfig+0xdd8>
 80050ee:	4b7e      	ldr	r3, [pc, #504]	@ (80052e8 <HAL_RCC_OscConfig+0xfcc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	e027      	b.n	8005144 <HAL_RCC_OscConfig+0xe28>
 80050f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80050fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005106:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	fa93 f2a3 	rbit	r2, r3
 8005110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005114:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800511e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005122:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800512c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	fa93 f2a3 	rbit	r2, r3
 8005136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800513a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	4b69      	ldr	r3, [pc, #420]	@ (80052e8 <HAL_RCC_OscConfig+0xfcc>)
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005148:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800514c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005156:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	fa92 f1a2 	rbit	r1, r2
 8005160:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005164:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005168:	6011      	str	r1, [r2, #0]
  return result;
 800516a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800516e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	fab2 f282 	clz	r2, r2
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	f042 0220 	orr.w	r2, r2, #32
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	f002 021f 	and.w	r2, r2, #31
 8005184:	2101      	movs	r1, #1
 8005186:	fa01 f202 	lsl.w	r2, r1, r2
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d087      	beq.n	80050a0 <HAL_RCC_OscConfig+0xd84>
 8005190:	e0ca      	b.n	8005328 <HAL_RCC_OscConfig+0x100c>
 8005192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005196:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800519a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800519e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	fa93 f2a3 	rbit	r2, r3
 80051ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051b6:	601a      	str	r2, [r3, #0]
  return result;
 80051b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80051cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fd fae8 	bl	80027ac <HAL_GetTick>
 80051dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e0:	e009      	b.n	80051f6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e2:	f7fd fae3 	bl	80027ac <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e099      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
 80051f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051fa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80051fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005208:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	fa93 f2a3 	rbit	r2, r3
 8005212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005216:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800521a:	601a      	str	r2, [r3, #0]
  return result;
 800521c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005220:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005224:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005226:	fab3 f383 	clz	r3, r3
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b3f      	cmp	r3, #63	@ 0x3f
 800522e:	d802      	bhi.n	8005236 <HAL_RCC_OscConfig+0xf1a>
 8005230:	4b2d      	ldr	r3, [pc, #180]	@ (80052e8 <HAL_RCC_OscConfig+0xfcc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	e027      	b.n	8005286 <HAL_RCC_OscConfig+0xf6a>
 8005236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800523a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800523e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005248:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	fa93 f2a3 	rbit	r2, r3
 8005252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005256:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005260:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005264:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800526e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	fa93 f2a3 	rbit	r2, r3
 8005278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <HAL_RCC_OscConfig+0xfcc>)
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800528a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800528e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005292:	6011      	str	r1, [r2, #0]
 8005294:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005298:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	fa92 f1a2 	rbit	r1, r2
 80052a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052a6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052aa:	6011      	str	r1, [r2, #0]
  return result;
 80052ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	fab2 f282 	clz	r2, r2
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	f042 0220 	orr.w	r2, r2, #32
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	f002 021f 	and.w	r2, r2, #31
 80052c6:	2101      	movs	r1, #1
 80052c8:	fa01 f202 	lsl.w	r2, r1, r2
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d187      	bne.n	80051e2 <HAL_RCC_OscConfig+0xec6>
 80052d2:	e029      	b.n	8005328 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d103      	bne.n	80052ec <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e020      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
 80052e8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052ec:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <HAL_RCC_OscConfig+0x1018>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80052f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005300:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	429a      	cmp	r2, r3
 800530a:	d10b      	bne.n	8005324 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800530c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005310:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005318:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000

08005338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b09e      	sub	sp, #120	@ 0x78
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e154      	b.n	80055fa <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005350:	4b89      	ldr	r3, [pc, #548]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d910      	bls.n	8005380 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b86      	ldr	r3, [pc, #536]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 0207 	bic.w	r2, r3, #7
 8005366:	4984      	ldr	r1, [pc, #528]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b82      	ldr	r3, [pc, #520]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e13c      	b.n	80055fa <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538c:	4b7b      	ldr	r3, [pc, #492]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4978      	ldr	r1, [pc, #480]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80cd 	beq.w	8005546 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d137      	bne.n	8005424 <HAL_RCC_ClockConfig+0xec>
 80053b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80053c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80053cc:	d802      	bhi.n	80053d4 <HAL_RCC_ClockConfig+0x9c>
 80053ce:	4b6b      	ldr	r3, [pc, #428]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	e00f      	b.n	80053f4 <HAL_RCC_ClockConfig+0xbc>
 80053d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053dc:	fa93 f3a3 	rbit	r3, r3
 80053e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80053e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80053e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053ea:	fa93 f3a3 	rbit	r3, r3
 80053ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053f0:	4b62      	ldr	r3, [pc, #392]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80053f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053fc:	fa92 f2a2 	rbit	r2, r2
 8005400:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005402:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005404:	fab2 f282 	clz	r2, r2
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	f042 0220 	orr.w	r2, r2, #32
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	f002 021f 	and.w	r2, r2, #31
 8005414:	2101      	movs	r1, #1
 8005416:	fa01 f202 	lsl.w	r2, r1, r2
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d171      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0ea      	b.n	80055fa <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d137      	bne.n	800549c <HAL_RCC_ClockConfig+0x164>
 800542c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005430:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800543a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b3f      	cmp	r3, #63	@ 0x3f
 8005444:	d802      	bhi.n	800544c <HAL_RCC_ClockConfig+0x114>
 8005446:	4b4d      	ldr	r3, [pc, #308]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	e00f      	b.n	800546c <HAL_RCC_ClockConfig+0x134>
 800544c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005450:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005454:	fa93 f3a3 	rbit	r3, r3
 8005458:	647b      	str	r3, [r7, #68]	@ 0x44
 800545a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800545e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005468:	4b44      	ldr	r3, [pc, #272]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005470:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005472:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005474:	fa92 f2a2 	rbit	r2, r2
 8005478:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800547a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800547c:	fab2 f282 	clz	r2, r2
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	f042 0220 	orr.w	r2, r2, #32
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	f002 021f 	and.w	r2, r2, #31
 800548c:	2101      	movs	r1, #1
 800548e:	fa01 f202 	lsl.w	r2, r1, r2
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d135      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0ae      	b.n	80055fa <HAL_RCC_ClockConfig+0x2c2>
 800549c:	2302      	movs	r3, #2
 800549e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	fa93 f3a3 	rbit	r3, r3
 80054a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054aa:	fab3 f383 	clz	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80054b2:	d802      	bhi.n	80054ba <HAL_RCC_ClockConfig+0x182>
 80054b4:	4b31      	ldr	r3, [pc, #196]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	e00d      	b.n	80054d6 <HAL_RCC_ClockConfig+0x19e>
 80054ba:	2302      	movs	r3, #2
 80054bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c6:	2302      	movs	r3, #2
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	fa93 f3a3 	rbit	r3, r3
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	4b2a      	ldr	r3, [pc, #168]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	2202      	movs	r2, #2
 80054d8:	61ba      	str	r2, [r7, #24]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	fa92 f2a2 	rbit	r2, r2
 80054e0:	617a      	str	r2, [r7, #20]
  return result;
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	fab2 f282 	clz	r2, r2
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f042 0220 	orr.w	r2, r2, #32
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	f002 021f 	and.w	r2, r2, #31
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f202 	lsl.w	r2, r1, r2
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e07a      	b.n	80055fa <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005504:	4b1d      	ldr	r3, [pc, #116]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f023 0203 	bic.w	r2, r3, #3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	491a      	ldr	r1, [pc, #104]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005512:	4313      	orrs	r3, r2
 8005514:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005516:	f7fd f949 	bl	80027ac <HAL_GetTick>
 800551a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551c:	e00a      	b.n	8005534 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551e:	f7fd f945 	bl	80027ac <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e062      	b.n	80055fa <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005534:	4b11      	ldr	r3, [pc, #68]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 020c 	and.w	r2, r3, #12
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	429a      	cmp	r2, r3
 8005544:	d1eb      	bne.n	800551e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005546:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d215      	bcs.n	8005580 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005554:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 0207 	bic.w	r2, r3, #7
 800555c:	4906      	ldr	r1, [pc, #24]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d006      	beq.n	8005580 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e041      	b.n	80055fa <HAL_RCC_ClockConfig+0x2c2>
 8005576:	bf00      	nop
 8005578:	40022000 	.word	0x40022000
 800557c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800558c:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <HAL_RCC_ClockConfig+0x2cc>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	491a      	ldr	r1, [pc, #104]	@ (8005604 <HAL_RCC_ClockConfig+0x2cc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055aa:	4b16      	ldr	r3, [pc, #88]	@ (8005604 <HAL_RCC_ClockConfig+0x2cc>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4912      	ldr	r1, [pc, #72]	@ (8005604 <HAL_RCC_ClockConfig+0x2cc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055be:	f000 f829 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80055c2:	4601      	mov	r1, r0
 80055c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <HAL_RCC_ClockConfig+0x2cc>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055cc:	22f0      	movs	r2, #240	@ 0xf0
 80055ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	fa92 f2a2 	rbit	r2, r2
 80055d6:	60fa      	str	r2, [r7, #12]
  return result;
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	fab2 f282 	clz	r2, r2
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	40d3      	lsrs	r3, r2
 80055e2:	4a09      	ldr	r2, [pc, #36]	@ (8005608 <HAL_RCC_ClockConfig+0x2d0>)
 80055e4:	5cd3      	ldrb	r3, [r2, r3]
 80055e6:	fa21 f303 	lsr.w	r3, r1, r3
 80055ea:	4a08      	ldr	r2, [pc, #32]	@ (800560c <HAL_RCC_ClockConfig+0x2d4>)
 80055ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80055ee:	4b08      	ldr	r3, [pc, #32]	@ (8005610 <HAL_RCC_ClockConfig+0x2d8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fd f896 	bl	8002724 <HAL_InitTick>
  
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3778      	adds	r7, #120	@ 0x78
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40021000 	.word	0x40021000
 8005608:	08009324 	.word	0x08009324
 800560c:	20000008 	.word	0x20000008
 8005610:	2000000c 	.word	0x2000000c

08005614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800562e:	4b1e      	ldr	r3, [pc, #120]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	2b04      	cmp	r3, #4
 800563c:	d002      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x30>
 800563e:	2b08      	cmp	r3, #8
 8005640:	d003      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x36>
 8005642:	e026      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005644:	4b19      	ldr	r3, [pc, #100]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005646:	613b      	str	r3, [r7, #16]
      break;
 8005648:	e026      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	0c9b      	lsrs	r3, r3, #18
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a17      	ldr	r2, [pc, #92]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005654:	5cd3      	ldrb	r3, [r2, r3]
 8005656:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005658:	4b13      	ldr	r3, [pc, #76]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800565a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005662:	5cd3      	ldrb	r3, [r2, r3]
 8005664:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005670:	4a0e      	ldr	r2, [pc, #56]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	fbb2 f2f3 	udiv	r2, r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	fb02 f303 	mul.w	r3, r2, r3
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e004      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a0c      	ldr	r2, [pc, #48]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	613b      	str	r3, [r7, #16]
      break;
 8005690:	e002      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005692:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8005694:	613b      	str	r3, [r7, #16]
      break;
 8005696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005698:	693b      	ldr	r3, [r7, #16]
}
 800569a:	4618      	mov	r0, r3
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	00f42400 	.word	0x00f42400
 80056b0:	0800933c 	.word	0x0800933c
 80056b4:	0800934c 	.word	0x0800934c
 80056b8:	003d0900 	.word	0x003d0900
 80056bc:	007a1200 	.word	0x007a1200

080056c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c4:	4b03      	ldr	r3, [pc, #12]	@ (80056d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000008 	.word	0x20000008

080056d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80056de:	f7ff ffef 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 80056e2:	4601      	mov	r1, r0
 80056e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056ec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80056f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	fa92 f2a2 	rbit	r2, r2
 80056f8:	603a      	str	r2, [r7, #0]
  return result;
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	fab2 f282 	clz	r2, r2
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	40d3      	lsrs	r3, r2
 8005704:	4a04      	ldr	r2, [pc, #16]	@ (8005718 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005706:	5cd3      	ldrb	r3, [r2, r3]
 8005708:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40021000 	.word	0x40021000
 8005718:	08009334 	.word	0x08009334

0800571c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005722:	f7ff ffcd 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 8005726:	4601      	mov	r1, r0
 8005728:	4b0b      	ldr	r3, [pc, #44]	@ (8005758 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005730:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005734:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	fa92 f2a2 	rbit	r2, r2
 800573c:	603a      	str	r2, [r7, #0]
  return result;
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	fab2 f282 	clz	r2, r2
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	40d3      	lsrs	r3, r2
 8005748:	4a04      	ldr	r2, [pc, #16]	@ (800575c <HAL_RCC_GetPCLK2Freq+0x40>)
 800574a:	5cd3      	ldrb	r3, [r2, r3]
 800574c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40021000 	.word	0x40021000
 800575c:	08009334 	.word	0x08009334

08005760 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b092      	sub	sp, #72	@ 0x48
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 80d2 	beq.w	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005784:	4b4d      	ldr	r3, [pc, #308]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10e      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005790:	4b4a      	ldr	r3, [pc, #296]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4a49      	ldr	r2, [pc, #292]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800579a:	61d3      	str	r3, [r2, #28]
 800579c:	4b47      	ldr	r3, [pc, #284]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ae:	4b44      	ldr	r3, [pc, #272]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d118      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ba:	4b41      	ldr	r3, [pc, #260]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a40      	ldr	r2, [pc, #256]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c6:	f7fc fff1 	bl	80027ac <HAL_GetTick>
 80057ca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057cc:	e008      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ce:	f7fc ffed 	bl	80027ac <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b64      	cmp	r3, #100	@ 0x64
 80057da:	d901      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e167      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	4b37      	ldr	r3, [pc, #220]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ec:	4b33      	ldr	r3, [pc, #204]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8082 	beq.w	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005806:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005808:	429a      	cmp	r2, r3
 800580a:	d07a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800580c:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005816:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005826:	fab3 f383 	clz	r3, r3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	4b25      	ldr	r3, [pc, #148]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	461a      	mov	r2, r3
 8005836:	2301      	movs	r3, #1
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800583e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	fa93 f3a3 	rbit	r3, r3
 8005846:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	4b1c      	ldr	r3, [pc, #112]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	461a      	mov	r2, r3
 800585a:	2300      	movs	r3, #0
 800585c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800585e:	4a17      	ldr	r2, [pc, #92]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005862:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d049      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586e:	f7fc ff9d 	bl	80027ac <HAL_GetTick>
 8005872:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005874:	e00a      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fc ff99 	bl	80027ac <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e111      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800588c:	2302      	movs	r3, #2
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	fa93 f3a3 	rbit	r3, r3
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
 8005898:	2302      	movs	r3, #2
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	61fb      	str	r3, [r7, #28]
  return result;
 80058a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a6:	fab3 f383 	clz	r3, r3
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d108      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80058b6:	4b01      	ldr	r3, [pc, #4]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	e00d      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40007000 	.word	0x40007000
 80058c4:	10908100 	.word	0x10908100
 80058c8:	2302      	movs	r3, #2
 80058ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	4b78      	ldr	r3, [pc, #480]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	2202      	movs	r2, #2
 80058da:	613a      	str	r2, [r7, #16]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	fa92 f2a2 	rbit	r2, r2
 80058e2:	60fa      	str	r2, [r7, #12]
  return result;
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	fab2 f282 	clz	r2, r2
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	f002 021f 	and.w	r2, r2, #31
 80058f6:	2101      	movs	r1, #1
 80058f8:	fa01 f202 	lsl.w	r2, r1, r2
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0b9      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005902:	4b6d      	ldr	r3, [pc, #436]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	496a      	ldr	r1, [pc, #424]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005910:	4313      	orrs	r3, r2
 8005912:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005914:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005918:	2b01      	cmp	r3, #1
 800591a:	d105      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591c:	4b66      	ldr	r3, [pc, #408]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	4a65      	ldr	r2, [pc, #404]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005926:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005934:	4b60      	ldr	r3, [pc, #384]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	f023 0203 	bic.w	r2, r3, #3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	495d      	ldr	r1, [pc, #372]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005942:	4313      	orrs	r3, r2
 8005944:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005952:	4b59      	ldr	r3, [pc, #356]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005956:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	4956      	ldr	r1, [pc, #344]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005960:	4313      	orrs	r3, r2
 8005962:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005970:	4b51      	ldr	r3, [pc, #324]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005974:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	494e      	ldr	r1, [pc, #312]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800597e:	4313      	orrs	r3, r2
 8005980:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800598e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005992:	f023 0210 	bic.w	r2, r3, #16
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	4947      	ldr	r1, [pc, #284]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800599c:	4313      	orrs	r3, r2
 800599e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80059ac:	4b42      	ldr	r3, [pc, #264]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b8:	493f      	ldr	r1, [pc, #252]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ca:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	f023 0220 	bic.w	r2, r3, #32
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4938      	ldr	r1, [pc, #224]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059e8:	4b33      	ldr	r3, [pc, #204]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4930      	ldr	r1, [pc, #192]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a06:	4b2c      	ldr	r3, [pc, #176]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	4929      	ldr	r1, [pc, #164]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a24:	4b24      	ldr	r3, [pc, #144]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	4921      	ldr	r1, [pc, #132]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a42:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	491a      	ldr	r1, [pc, #104]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a60:	4b15      	ldr	r3, [pc, #84]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	4912      	ldr	r1, [pc, #72]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8a:	490b      	ldr	r1, [pc, #44]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa8:	4903      	ldr	r1, [pc, #12]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3748      	adds	r7, #72	@ 0x48
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40021000 	.word	0x40021000

08005abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e09d      	b.n	8005c0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ade:	d009      	beq.n	8005af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	61da      	str	r2, [r3, #28]
 8005ae6:	e005      	b.n	8005af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fc fad6 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b34:	d902      	bls.n	8005b3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e002      	b.n	8005b42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b4a:	d007      	beq.n	8005b5c <HAL_SPI_Init+0xa0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	ea42 0103 	orr.w	r1, r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	f003 0204 	and.w	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005bd8:	ea42 0103 	orr.w	r1, r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e049      	b.n	8005cb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fc fa85 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f001 f847 	bl	8006ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d001      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e04a      	b.n	8005d6e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a21      	ldr	r2, [pc, #132]	@ (8005d7c <HAL_TIM_Base_Start_IT+0xbc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d018      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x6c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d02:	d013      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x6c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x6c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1c      	ldr	r2, [pc, #112]	@ (8005d84 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x6c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d88 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x6c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a19      	ldr	r2, [pc, #100]	@ (8005d8c <HAL_TIM_Base_Start_IT+0xcc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d115      	bne.n	8005d58 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	4b17      	ldr	r3, [pc, #92]	@ (8005d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b06      	cmp	r3, #6
 8005d3c:	d015      	beq.n	8005d6a <HAL_TIM_Base_Start_IT+0xaa>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d44:	d011      	beq.n	8005d6a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d56:	e008      	b.n	8005d6a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e000      	b.n	8005d6c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40013400 	.word	0x40013400
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	00010007 	.word	0x00010007

08005d94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6a1a      	ldr	r2, [r3, #32]
 8005db2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10f      	bne.n	8005ddc <HAL_TIM_Base_Stop_IT+0x48>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d107      	bne.n	8005ddc <HAL_TIM_Base_Stop_IT+0x48>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e049      	b.n	8005e98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f841 	bl	8005ea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f000 ff57 	bl	8006ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <HAL_TIM_PWM_Start+0x24>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	e03c      	b.n	8005f52 <HAL_TIM_PWM_Start+0x9e>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d109      	bne.n	8005ef2 <HAL_TIM_PWM_Start+0x3e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	bf14      	ite	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	2300      	moveq	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	e02f      	b.n	8005f52 <HAL_TIM_PWM_Start+0x9e>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d109      	bne.n	8005f0c <HAL_TIM_PWM_Start+0x58>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	e022      	b.n	8005f52 <HAL_TIM_PWM_Start+0x9e>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b0c      	cmp	r3, #12
 8005f10:	d109      	bne.n	8005f26 <HAL_TIM_PWM_Start+0x72>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	bf14      	ite	ne
 8005f1e:	2301      	movne	r3, #1
 8005f20:	2300      	moveq	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	e015      	b.n	8005f52 <HAL_TIM_PWM_Start+0x9e>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d109      	bne.n	8005f40 <HAL_TIM_PWM_Start+0x8c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	e008      	b.n	8005f52 <HAL_TIM_PWM_Start+0x9e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e097      	b.n	800608a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_PWM_Start+0xb6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f68:	e023      	b.n	8005fb2 <HAL_TIM_PWM_Start+0xfe>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_PWM_Start+0xc6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f78:	e01b      	b.n	8005fb2 <HAL_TIM_PWM_Start+0xfe>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_PWM_Start+0xd6>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f88:	e013      	b.n	8005fb2 <HAL_TIM_PWM_Start+0xfe>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_PWM_Start+0xe6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f98:	e00b      	b.n	8005fb2 <HAL_TIM_PWM_Start+0xfe>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_PWM_Start+0xf6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fa8:	e003      	b.n	8005fb2 <HAL_TIM_PWM_Start+0xfe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fbbc 	bl	8007738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a33      	ldr	r2, [pc, #204]	@ (8006094 <HAL_TIM_PWM_Start+0x1e0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_TIM_PWM_Start+0x13e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a32      	ldr	r2, [pc, #200]	@ (8006098 <HAL_TIM_PWM_Start+0x1e4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_TIM_PWM_Start+0x13e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a30      	ldr	r2, [pc, #192]	@ (800609c <HAL_TIM_PWM_Start+0x1e8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_TIM_PWM_Start+0x13e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80060a0 <HAL_TIM_PWM_Start+0x1ec>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_TIM_PWM_Start+0x13e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2d      	ldr	r2, [pc, #180]	@ (80060a4 <HAL_TIM_PWM_Start+0x1f0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <HAL_TIM_PWM_Start+0x142>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <HAL_TIM_PWM_Start+0x144>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800600a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a20      	ldr	r2, [pc, #128]	@ (8006094 <HAL_TIM_PWM_Start+0x1e0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <HAL_TIM_PWM_Start+0x194>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601e:	d013      	beq.n	8006048 <HAL_TIM_PWM_Start+0x194>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a20      	ldr	r2, [pc, #128]	@ (80060a8 <HAL_TIM_PWM_Start+0x1f4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_TIM_PWM_Start+0x194>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1f      	ldr	r2, [pc, #124]	@ (80060ac <HAL_TIM_PWM_Start+0x1f8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <HAL_TIM_PWM_Start+0x194>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a17      	ldr	r2, [pc, #92]	@ (8006098 <HAL_TIM_PWM_Start+0x1e4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_TIM_PWM_Start+0x194>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a16      	ldr	r2, [pc, #88]	@ (800609c <HAL_TIM_PWM_Start+0x1e8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d115      	bne.n	8006074 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	4b18      	ldr	r3, [pc, #96]	@ (80060b0 <HAL_TIM_PWM_Start+0x1fc>)
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b06      	cmp	r3, #6
 8006058:	d015      	beq.n	8006086 <HAL_TIM_PWM_Start+0x1d2>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006060:	d011      	beq.n	8006086 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0201 	orr.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	e008      	b.n	8006086 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e000      	b.n	8006088 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40014000 	.word	0x40014000
 80060a0:	40014400 	.word	0x40014400
 80060a4:	40014800 	.word	0x40014800
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	00010007 	.word	0x00010007

080060b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fb36 	bl	8007738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a3e      	ldr	r2, [pc, #248]	@ (80061cc <HAL_TIM_PWM_Stop+0x118>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_TIM_PWM_Stop+0x4a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3d      	ldr	r2, [pc, #244]	@ (80061d0 <HAL_TIM_PWM_Stop+0x11c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_TIM_PWM_Stop+0x4a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a3b      	ldr	r2, [pc, #236]	@ (80061d4 <HAL_TIM_PWM_Stop+0x120>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIM_PWM_Stop+0x4a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3a      	ldr	r2, [pc, #232]	@ (80061d8 <HAL_TIM_PWM_Stop+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_PWM_Stop+0x4a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a38      	ldr	r2, [pc, #224]	@ (80061dc <HAL_TIM_PWM_Stop+0x128>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_TIM_PWM_Stop+0x4e>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_TIM_PWM_Stop+0x50>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d017      	beq.n	8006138 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <HAL_TIM_PWM_Stop+0x84>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HAL_TIM_PWM_Stop+0x84>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006136:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10f      	bne.n	8006168 <HAL_TIM_PWM_Stop+0xb4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d107      	bne.n	8006168 <HAL_TIM_PWM_Stop+0xb4>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_TIM_PWM_Stop+0xc4>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006176:	e023      	b.n	80061c0 <HAL_TIM_PWM_Stop+0x10c>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b04      	cmp	r3, #4
 800617c:	d104      	bne.n	8006188 <HAL_TIM_PWM_Stop+0xd4>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006186:	e01b      	b.n	80061c0 <HAL_TIM_PWM_Stop+0x10c>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b08      	cmp	r3, #8
 800618c:	d104      	bne.n	8006198 <HAL_TIM_PWM_Stop+0xe4>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006196:	e013      	b.n	80061c0 <HAL_TIM_PWM_Stop+0x10c>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d104      	bne.n	80061a8 <HAL_TIM_PWM_Stop+0xf4>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061a6:	e00b      	b.n	80061c0 <HAL_TIM_PWM_Stop+0x10c>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d104      	bne.n	80061b8 <HAL_TIM_PWM_Stop+0x104>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061b6:	e003      	b.n	80061c0 <HAL_TIM_PWM_Stop+0x10c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40014400 	.word	0x40014400
 80061dc:	40014800 	.word	0x40014800

080061e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e049      	b.n	8006286 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f841 	bl	800628e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f000 fd60 	bl	8006ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_TIM_IC_Start_IT+0x1e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e023      	b.n	800630a <HAL_TIM_IC_Start_IT+0x66>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_IC_Start_IT+0x2e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	e01b      	b.n	800630a <HAL_TIM_IC_Start_IT+0x66>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d104      	bne.n	80062e2 <HAL_TIM_IC_Start_IT+0x3e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	e013      	b.n	800630a <HAL_TIM_IC_Start_IT+0x66>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b0c      	cmp	r3, #12
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_IC_Start_IT+0x4e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	e00b      	b.n	800630a <HAL_TIM_IC_Start_IT+0x66>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_IC_Start_IT+0x5e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	e003      	b.n	800630a <HAL_TIM_IC_Start_IT+0x66>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006308:	b2db      	uxtb	r3, r3
 800630a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <HAL_TIM_IC_Start_IT+0x78>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006318:	b2db      	uxtb	r3, r3
 800631a:	e013      	b.n	8006344 <HAL_TIM_IC_Start_IT+0xa0>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b04      	cmp	r3, #4
 8006320:	d104      	bne.n	800632c <HAL_TIM_IC_Start_IT+0x88>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e00b      	b.n	8006344 <HAL_TIM_IC_Start_IT+0xa0>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b08      	cmp	r3, #8
 8006330:	d104      	bne.n	800633c <HAL_TIM_IC_Start_IT+0x98>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006338:	b2db      	uxtb	r3, r3
 800633a:	e003      	b.n	8006344 <HAL_TIM_IC_Start_IT+0xa0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006342:	b2db      	uxtb	r3, r3
 8006344:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d102      	bne.n	8006352 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800634c:	7b7b      	ldrb	r3, [r7, #13]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d001      	beq.n	8006356 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0d8      	b.n	8006508 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <HAL_TIM_IC_Start_IT+0xc2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006364:	e023      	b.n	80063ae <HAL_TIM_IC_Start_IT+0x10a>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b04      	cmp	r3, #4
 800636a:	d104      	bne.n	8006376 <HAL_TIM_IC_Start_IT+0xd2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006374:	e01b      	b.n	80063ae <HAL_TIM_IC_Start_IT+0x10a>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d104      	bne.n	8006386 <HAL_TIM_IC_Start_IT+0xe2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006384:	e013      	b.n	80063ae <HAL_TIM_IC_Start_IT+0x10a>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d104      	bne.n	8006396 <HAL_TIM_IC_Start_IT+0xf2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006394:	e00b      	b.n	80063ae <HAL_TIM_IC_Start_IT+0x10a>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b10      	cmp	r3, #16
 800639a:	d104      	bne.n	80063a6 <HAL_TIM_IC_Start_IT+0x102>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a4:	e003      	b.n	80063ae <HAL_TIM_IC_Start_IT+0x10a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <HAL_TIM_IC_Start_IT+0x11a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063bc:	e013      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x142>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_IC_Start_IT+0x12a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063cc:	e00b      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x142>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d104      	bne.n	80063de <HAL_TIM_IC_Start_IT+0x13a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063dc:	e003      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x142>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d841      	bhi.n	8006470 <HAL_TIM_IC_Start_IT+0x1cc>
 80063ec:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <HAL_TIM_IC_Start_IT+0x150>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006429 	.word	0x08006429
 80063f8:	08006471 	.word	0x08006471
 80063fc:	08006471 	.word	0x08006471
 8006400:	08006471 	.word	0x08006471
 8006404:	0800643b 	.word	0x0800643b
 8006408:	08006471 	.word	0x08006471
 800640c:	08006471 	.word	0x08006471
 8006410:	08006471 	.word	0x08006471
 8006414:	0800644d 	.word	0x0800644d
 8006418:	08006471 	.word	0x08006471
 800641c:	08006471 	.word	0x08006471
 8006420:	08006471 	.word	0x08006471
 8006424:	0800645f 	.word	0x0800645f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0202 	orr.w	r2, r2, #2
 8006436:	60da      	str	r2, [r3, #12]
      break;
 8006438:	e01d      	b.n	8006476 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0204 	orr.w	r2, r2, #4
 8006448:	60da      	str	r2, [r3, #12]
      break;
 800644a:	e014      	b.n	8006476 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0208 	orr.w	r2, r2, #8
 800645a:	60da      	str	r2, [r3, #12]
      break;
 800645c:	e00b      	b.n	8006476 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0210 	orr.w	r2, r2, #16
 800646c:	60da      	str	r2, [r3, #12]
      break;
 800646e:	e002      	b.n	8006476 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	bf00      	nop
  }

  if (status == HAL_OK)
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d144      	bne.n	8006506 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2201      	movs	r2, #1
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f957 	bl	8007738 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a20      	ldr	r2, [pc, #128]	@ (8006510 <HAL_TIM_IC_Start_IT+0x26c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_TIM_IC_Start_IT+0x222>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800649c:	d013      	beq.n	80064c6 <HAL_TIM_IC_Start_IT+0x222>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006514 <HAL_TIM_IC_Start_IT+0x270>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIM_IC_Start_IT+0x222>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006518 <HAL_TIM_IC_Start_IT+0x274>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIM_IC_Start_IT+0x222>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a19      	ldr	r2, [pc, #100]	@ (800651c <HAL_TIM_IC_Start_IT+0x278>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIM_IC_Start_IT+0x222>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <HAL_TIM_IC_Start_IT+0x27c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d115      	bne.n	80064f2 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <HAL_TIM_IC_Start_IT+0x280>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b06      	cmp	r3, #6
 80064d6:	d015      	beq.n	8006504 <HAL_TIM_IC_Start_IT+0x260>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064de:	d011      	beq.n	8006504 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f0:	e008      	b.n	8006504 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e000      	b.n	8006506 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006504:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800
 800651c:	40013400 	.word	0x40013400
 8006520:	40014000 	.word	0x40014000
 8006524:	00010007 	.word	0x00010007

08006528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d020      	beq.n	800658c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01b      	beq.n	800658c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0202 	mvn.w	r2, #2
 800655c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fa ff36 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8006578:	e005      	b.n	8006586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb94 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb9b 	bl	8006cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d020      	beq.n	80065d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0204 	mvn.w	r2, #4
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fa ff10 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fb6e 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb75 	bl	8006cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01b      	beq.n	8006624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0208 	mvn.w	r2, #8
 80065f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2204      	movs	r2, #4
 80065fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fa feea 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fb48 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fb4f 	bl	8006cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0210 	mvn.w	r2, #16
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2208      	movs	r2, #8
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fa fec4 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fb22 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fb29 	bl	8006cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0201 	mvn.w	r2, #1
 800668c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fa fe40 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fa80 	bl	8007bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fa78 	bl	8007bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fae8 	bl	8006cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0220 	mvn.w	r2, #32
 800671c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 fa40 	bl	8007ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006746:	2302      	movs	r3, #2
 8006748:	e088      	b.n	800685c <HAL_TIM_IC_ConfigChannel+0x130>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006768:	f000 fe2e 	bl	80073c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 020c 	bic.w	r2, r2, #12
 800677a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6999      	ldr	r1, [r3, #24]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	619a      	str	r2, [r3, #24]
 800678e:	e060      	b.n	8006852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b04      	cmp	r3, #4
 8006794:	d11c      	bne.n	80067d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80067a6:	f000 fea6 	bl	80074f6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80067b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6999      	ldr	r1, [r3, #24]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	021a      	lsls	r2, r3, #8
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	619a      	str	r2, [r3, #24]
 80067ce:	e040      	b.n	8006852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d11b      	bne.n	800680e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80067e6:	f000 fef3 	bl	80075d0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 020c 	bic.w	r2, r2, #12
 80067f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69d9      	ldr	r1, [r3, #28]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	61da      	str	r2, [r3, #28]
 800680c:	e021      	b.n	8006852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b0c      	cmp	r3, #12
 8006812:	d11c      	bne.n	800684e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006824:	f000 ff10 	bl	8007648 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006836:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69d9      	ldr	r1, [r3, #28]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	021a      	lsls	r2, r3, #8
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	61da      	str	r2, [r3, #28]
 800684c:	e001      	b.n	8006852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800687e:	2302      	movs	r3, #2
 8006880:	e0ff      	b.n	8006a82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b14      	cmp	r3, #20
 800688e:	f200 80f0 	bhi.w	8006a72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006892:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006a73 	.word	0x08006a73
 80068a0:	08006a73 	.word	0x08006a73
 80068a4:	08006a73 	.word	0x08006a73
 80068a8:	0800692d 	.word	0x0800692d
 80068ac:	08006a73 	.word	0x08006a73
 80068b0:	08006a73 	.word	0x08006a73
 80068b4:	08006a73 	.word	0x08006a73
 80068b8:	0800696f 	.word	0x0800696f
 80068bc:	08006a73 	.word	0x08006a73
 80068c0:	08006a73 	.word	0x08006a73
 80068c4:	08006a73 	.word	0x08006a73
 80068c8:	080069af 	.word	0x080069af
 80068cc:	08006a73 	.word	0x08006a73
 80068d0:	08006a73 	.word	0x08006a73
 80068d4:	08006a73 	.word	0x08006a73
 80068d8:	080069f1 	.word	0x080069f1
 80068dc:	08006a73 	.word	0x08006a73
 80068e0:	08006a73 	.word	0x08006a73
 80068e4:	08006a73 	.word	0x08006a73
 80068e8:	08006a31 	.word	0x08006a31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fa92 	bl	8006e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0208 	orr.w	r2, r2, #8
 8006906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0204 	bic.w	r2, r2, #4
 8006916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6999      	ldr	r1, [r3, #24]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	619a      	str	r2, [r3, #24]
      break;
 800692a:	e0a5      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fb02 	bl	8006f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6999      	ldr	r1, [r3, #24]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	021a      	lsls	r2, r3, #8
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	619a      	str	r2, [r3, #24]
      break;
 800696c:	e084      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fb6b 	bl	8007050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0208 	orr.w	r2, r2, #8
 8006988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0204 	bic.w	r2, r2, #4
 8006998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69d9      	ldr	r1, [r3, #28]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	61da      	str	r2, [r3, #28]
      break;
 80069ac:	e064      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fbd3 	bl	8007160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69d9      	ldr	r1, [r3, #28]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	021a      	lsls	r2, r3, #8
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	61da      	str	r2, [r3, #28]
      break;
 80069ee:	e043      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fc1c 	bl	8007234 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0208 	orr.w	r2, r2, #8
 8006a0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0204 	bic.w	r2, r2, #4
 8006a1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a2e:	e023      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fc60 	bl	80072fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	021a      	lsls	r2, r3, #8
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a70:	e002      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
      break;
 8006a76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop

08006a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e0b6      	b.n	8006c16 <HAL_TIM_ConfigClockSource+0x18a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ae4:	d03e      	beq.n	8006b64 <HAL_TIM_ConfigClockSource+0xd8>
 8006ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aea:	f200 8087 	bhi.w	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af2:	f000 8086 	beq.w	8006c02 <HAL_TIM_ConfigClockSource+0x176>
 8006af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afa:	d87f      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006afc:	2b70      	cmp	r3, #112	@ 0x70
 8006afe:	d01a      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0xaa>
 8006b00:	2b70      	cmp	r3, #112	@ 0x70
 8006b02:	d87b      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006b04:	2b60      	cmp	r3, #96	@ 0x60
 8006b06:	d050      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x11e>
 8006b08:	2b60      	cmp	r3, #96	@ 0x60
 8006b0a:	d877      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006b0c:	2b50      	cmp	r3, #80	@ 0x50
 8006b0e:	d03c      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0xfe>
 8006b10:	2b50      	cmp	r3, #80	@ 0x50
 8006b12:	d873      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006b14:	2b40      	cmp	r3, #64	@ 0x40
 8006b16:	d058      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x13e>
 8006b18:	2b40      	cmp	r3, #64	@ 0x40
 8006b1a:	d86f      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006b1c:	2b30      	cmp	r3, #48	@ 0x30
 8006b1e:	d064      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15e>
 8006b20:	2b30      	cmp	r3, #48	@ 0x30
 8006b22:	d86b      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d060      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15e>
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d867      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d05c      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15e>
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d05a      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15e>
 8006b34:	e062      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b46:	f000 fdd7 	bl	80076f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	609a      	str	r2, [r3, #8]
      break;
 8006b62:	e04f      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b74:	f000 fdc0 	bl	80076f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b86:	609a      	str	r2, [r3, #8]
      break;
 8006b88:	e03c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 fc7e 	bl	8007498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2150      	movs	r1, #80	@ 0x50
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fd8d 	bl	80076c2 <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e02c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f000 fcda 	bl	8007570 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2160      	movs	r1, #96	@ 0x60
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fd7d 	bl	80076c2 <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e01c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f000 fc5e 	bl	8007498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2140      	movs	r1, #64	@ 0x40
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fd6d 	bl	80076c2 <TIM_ITRx_SetConfig>
      break;
 8006be8:	e00c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f000 fd64 	bl	80076c2 <TIM_ITRx_SetConfig>
      break;
 8006bfa:	e003      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006c00:	e000      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d831      	bhi.n	8006c98 <HAL_TIM_ReadCapturedValue+0x78>
 8006c34:	a201      	add	r2, pc, #4	@ (adr r2, 8006c3c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006c99 	.word	0x08006c99
 8006c4c:	08006c7b 	.word	0x08006c7b
 8006c50:	08006c99 	.word	0x08006c99
 8006c54:	08006c99 	.word	0x08006c99
 8006c58:	08006c99 	.word	0x08006c99
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c99 	.word	0x08006c99
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006c99 	.word	0x08006c99
 8006c6c:	08006c8f 	.word	0x08006c8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c76:	60fb      	str	r3, [r7, #12]

      break;
 8006c78:	e00f      	b.n	8006c9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c80:	60fb      	str	r3, [r7, #12]

      break;
 8006c82:	e00a      	b.n	8006c9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8a:	60fb      	str	r3, [r7, #12]

      break;
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c94:	60fb      	str	r3, [r7, #12]

      break;
 8006c96:	e000      	b.n	8006c9a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006c98:	bf00      	nop
  }

  return tmpreg;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a42      	ldr	r2, [pc, #264]	@ (8006e00 <TIM_Base_SetConfig+0x11c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00f      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d02:	d00b      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a3f      	ldr	r2, [pc, #252]	@ (8006e04 <TIM_Base_SetConfig+0x120>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8006e08 <TIM_Base_SetConfig+0x124>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a3d      	ldr	r2, [pc, #244]	@ (8006e0c <TIM_Base_SetConfig+0x128>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d108      	bne.n	8006d2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a33      	ldr	r2, [pc, #204]	@ (8006e00 <TIM_Base_SetConfig+0x11c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01b      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3c:	d017      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a30      	ldr	r2, [pc, #192]	@ (8006e04 <TIM_Base_SetConfig+0x120>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2f      	ldr	r2, [pc, #188]	@ (8006e08 <TIM_Base_SetConfig+0x124>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00f      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2e      	ldr	r2, [pc, #184]	@ (8006e0c <TIM_Base_SetConfig+0x128>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2d      	ldr	r2, [pc, #180]	@ (8006e10 <TIM_Base_SetConfig+0x12c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d007      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	@ (8006e14 <TIM_Base_SetConfig+0x130>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2b      	ldr	r2, [pc, #172]	@ (8006e18 <TIM_Base_SetConfig+0x134>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d108      	bne.n	8006d80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a16      	ldr	r2, [pc, #88]	@ (8006e00 <TIM_Base_SetConfig+0x11c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00f      	beq.n	8006dcc <TIM_Base_SetConfig+0xe8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a17      	ldr	r2, [pc, #92]	@ (8006e0c <TIM_Base_SetConfig+0x128>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <TIM_Base_SetConfig+0xe8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a16      	ldr	r2, [pc, #88]	@ (8006e10 <TIM_Base_SetConfig+0x12c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d007      	beq.n	8006dcc <TIM_Base_SetConfig+0xe8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a15      	ldr	r2, [pc, #84]	@ (8006e14 <TIM_Base_SetConfig+0x130>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0xe8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	@ (8006e18 <TIM_Base_SetConfig+0x134>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d103      	bne.n	8006dd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d105      	bne.n	8006df2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f023 0201 	bic.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]
  }
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40013400 	.word	0x40013400
 8006e10:	40014000 	.word	0x40014000
 8006e14:	40014400 	.word	0x40014400
 8006e18:	40014800 	.word	0x40014800

08006e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	f023 0201 	bic.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0303 	bic.w	r3, r3, #3
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f023 0302 	bic.w	r3, r3, #2
 8006e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	@ (8006f28 <TIM_OC1_SetConfig+0x10c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00f      	beq.n	8006e9c <TIM_OC1_SetConfig+0x80>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8006f2c <TIM_OC1_SetConfig+0x110>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00b      	beq.n	8006e9c <TIM_OC1_SetConfig+0x80>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a2a      	ldr	r2, [pc, #168]	@ (8006f30 <TIM_OC1_SetConfig+0x114>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d007      	beq.n	8006e9c <TIM_OC1_SetConfig+0x80>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a29      	ldr	r2, [pc, #164]	@ (8006f34 <TIM_OC1_SetConfig+0x118>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d003      	beq.n	8006e9c <TIM_OC1_SetConfig+0x80>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a28      	ldr	r2, [pc, #160]	@ (8006f38 <TIM_OC1_SetConfig+0x11c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d10c      	bne.n	8006eb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 0308 	bic.w	r3, r3, #8
 8006ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 0304 	bic.w	r3, r3, #4
 8006eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f28 <TIM_OC1_SetConfig+0x10c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00f      	beq.n	8006ede <TIM_OC1_SetConfig+0xc2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f2c <TIM_OC1_SetConfig+0x110>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00b      	beq.n	8006ede <TIM_OC1_SetConfig+0xc2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a19      	ldr	r2, [pc, #100]	@ (8006f30 <TIM_OC1_SetConfig+0x114>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d007      	beq.n	8006ede <TIM_OC1_SetConfig+0xc2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a18      	ldr	r2, [pc, #96]	@ (8006f34 <TIM_OC1_SetConfig+0x118>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC1_SetConfig+0xc2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a17      	ldr	r2, [pc, #92]	@ (8006f38 <TIM_OC1_SetConfig+0x11c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d111      	bne.n	8006f02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	621a      	str	r2, [r3, #32]
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	40012c00 	.word	0x40012c00
 8006f2c:	40013400 	.word	0x40013400
 8006f30:	40014000 	.word	0x40014000
 8006f34:	40014400 	.word	0x40014400
 8006f38:	40014800 	.word	0x40014800

08006f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f023 0210 	bic.w	r2, r3, #16
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0320 	bic.w	r3, r3, #32
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a28      	ldr	r2, [pc, #160]	@ (800703c <TIM_OC2_SetConfig+0x100>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC2_SetConfig+0x6c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a27      	ldr	r2, [pc, #156]	@ (8007040 <TIM_OC2_SetConfig+0x104>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d10d      	bne.n	8006fc4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800703c <TIM_OC2_SetConfig+0x100>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00f      	beq.n	8006fec <TIM_OC2_SetConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a1c      	ldr	r2, [pc, #112]	@ (8007040 <TIM_OC2_SetConfig+0x104>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00b      	beq.n	8006fec <TIM_OC2_SetConfig+0xb0>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8007044 <TIM_OC2_SetConfig+0x108>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d007      	beq.n	8006fec <TIM_OC2_SetConfig+0xb0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a1a      	ldr	r2, [pc, #104]	@ (8007048 <TIM_OC2_SetConfig+0x10c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC2_SetConfig+0xb0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a19      	ldr	r2, [pc, #100]	@ (800704c <TIM_OC2_SetConfig+0x110>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d113      	bne.n	8007014 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ff2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ffa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40012c00 	.word	0x40012c00
 8007040:	40013400 	.word	0x40013400
 8007044:	40014000 	.word	0x40014000
 8007048:	40014400 	.word	0x40014400
 800704c:	40014800 	.word	0x40014800

08007050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800707e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0303 	bic.w	r3, r3, #3
 800708a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800709c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a27      	ldr	r2, [pc, #156]	@ (800714c <TIM_OC3_SetConfig+0xfc>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d003      	beq.n	80070ba <TIM_OC3_SetConfig+0x6a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a26      	ldr	r2, [pc, #152]	@ (8007150 <TIM_OC3_SetConfig+0x100>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d10d      	bne.n	80070d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a1c      	ldr	r2, [pc, #112]	@ (800714c <TIM_OC3_SetConfig+0xfc>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00f      	beq.n	80070fe <TIM_OC3_SetConfig+0xae>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007150 <TIM_OC3_SetConfig+0x100>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00b      	beq.n	80070fe <TIM_OC3_SetConfig+0xae>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007154 <TIM_OC3_SetConfig+0x104>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d007      	beq.n	80070fe <TIM_OC3_SetConfig+0xae>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a19      	ldr	r2, [pc, #100]	@ (8007158 <TIM_OC3_SetConfig+0x108>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_OC3_SetConfig+0xae>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a18      	ldr	r2, [pc, #96]	@ (800715c <TIM_OC3_SetConfig+0x10c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d113      	bne.n	8007126 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	621a      	str	r2, [r3, #32]
}
 8007140:	bf00      	nop
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	40012c00 	.word	0x40012c00
 8007150:	40013400 	.word	0x40013400
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800719a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a18      	ldr	r2, [pc, #96]	@ (8007220 <TIM_OC4_SetConfig+0xc0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00f      	beq.n	80071e4 <TIM_OC4_SetConfig+0x84>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a17      	ldr	r2, [pc, #92]	@ (8007224 <TIM_OC4_SetConfig+0xc4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <TIM_OC4_SetConfig+0x84>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a16      	ldr	r2, [pc, #88]	@ (8007228 <TIM_OC4_SetConfig+0xc8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_OC4_SetConfig+0x84>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a15      	ldr	r2, [pc, #84]	@ (800722c <TIM_OC4_SetConfig+0xcc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC4_SetConfig+0x84>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a14      	ldr	r2, [pc, #80]	@ (8007230 <TIM_OC4_SetConfig+0xd0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d109      	bne.n	80071f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	019b      	lsls	r3, r3, #6
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800

08007234 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a17      	ldr	r2, [pc, #92]	@ (80072e8 <TIM_OC5_SetConfig+0xb4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00f      	beq.n	80072ae <TIM_OC5_SetConfig+0x7a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a16      	ldr	r2, [pc, #88]	@ (80072ec <TIM_OC5_SetConfig+0xb8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00b      	beq.n	80072ae <TIM_OC5_SetConfig+0x7a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a15      	ldr	r2, [pc, #84]	@ (80072f0 <TIM_OC5_SetConfig+0xbc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d007      	beq.n	80072ae <TIM_OC5_SetConfig+0x7a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a14      	ldr	r2, [pc, #80]	@ (80072f4 <TIM_OC5_SetConfig+0xc0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_OC5_SetConfig+0x7a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a13      	ldr	r2, [pc, #76]	@ (80072f8 <TIM_OC5_SetConfig+0xc4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d109      	bne.n	80072c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	621a      	str	r2, [r3, #32]
}
 80072dc:	bf00      	nop
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	40013400 	.word	0x40013400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800

080072fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a18      	ldr	r2, [pc, #96]	@ (80073b4 <TIM_OC6_SetConfig+0xb8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00f      	beq.n	8007378 <TIM_OC6_SetConfig+0x7c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a17      	ldr	r2, [pc, #92]	@ (80073b8 <TIM_OC6_SetConfig+0xbc>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00b      	beq.n	8007378 <TIM_OC6_SetConfig+0x7c>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a16      	ldr	r2, [pc, #88]	@ (80073bc <TIM_OC6_SetConfig+0xc0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d007      	beq.n	8007378 <TIM_OC6_SetConfig+0x7c>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <TIM_OC6_SetConfig+0xc4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_OC6_SetConfig+0x7c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a14      	ldr	r2, [pc, #80]	@ (80073c4 <TIM_OC6_SetConfig+0xc8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d109      	bne.n	800738c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800737e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	029b      	lsls	r3, r3, #10
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	40012c00 	.word	0x40012c00
 80073b8:	40013400 	.word	0x40013400
 80073bc:	40014000 	.word	0x40014000
 80073c0:	40014400 	.word	0x40014400
 80073c4:	40014800 	.word	0x40014800

080073c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f023 0201 	bic.w	r2, r3, #1
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a24      	ldr	r2, [pc, #144]	@ (8007484 <TIM_TI1_SetConfig+0xbc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <TIM_TI1_SetConfig+0x56>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fc:	d00f      	beq.n	800741e <TIM_TI1_SetConfig+0x56>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4a21      	ldr	r2, [pc, #132]	@ (8007488 <TIM_TI1_SetConfig+0xc0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00b      	beq.n	800741e <TIM_TI1_SetConfig+0x56>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a20      	ldr	r2, [pc, #128]	@ (800748c <TIM_TI1_SetConfig+0xc4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d007      	beq.n	800741e <TIM_TI1_SetConfig+0x56>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4a1f      	ldr	r2, [pc, #124]	@ (8007490 <TIM_TI1_SetConfig+0xc8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d003      	beq.n	800741e <TIM_TI1_SetConfig+0x56>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4a1e      	ldr	r2, [pc, #120]	@ (8007494 <TIM_TI1_SetConfig+0xcc>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <TIM_TI1_SetConfig+0x5a>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <TIM_TI1_SetConfig+0x5c>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f023 0303 	bic.w	r3, r3, #3
 800742e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e003      	b.n	8007442 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	b2db      	uxtb	r3, r3
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f023 030a 	bic.w	r3, r3, #10
 800745c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f003 030a 	and.w	r3, r3, #10
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40012c00 	.word	0x40012c00
 8007488:	40000400 	.word	0x40000400
 800748c:	40000800 	.word	0x40000800
 8007490:	40013400 	.word	0x40013400
 8007494:	40014000 	.word	0x40014000

08007498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f023 0201 	bic.w	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f023 030a 	bic.w	r3, r3, #10
 80074d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b087      	sub	sp, #28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f023 0210 	bic.w	r2, r3, #16
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	031b      	lsls	r3, r3, #12
 800753a:	b29b      	uxth	r3, r3
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007548:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	621a      	str	r2, [r3, #32]
}
 8007564:	bf00      	nop
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f023 0210 	bic.w	r2, r3, #16
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800759a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	031b      	lsls	r3, r3, #12
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	621a      	str	r2, [r3, #32]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800760c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	b2db      	uxtb	r3, r3
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007620:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	621a      	str	r2, [r3, #32]
}
 800763c:	bf00      	nop
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007674:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007686:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	031b      	lsls	r3, r3, #12
 800768c:	b29b      	uxth	r3, r3
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800769a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	031b      	lsls	r3, r3, #12
 80076a0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	f043 0307 	orr.w	r3, r3, #7
 80076e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	609a      	str	r2, [r3, #8]
}
 80076ec:	bf00      	nop
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	021a      	lsls	r2, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	431a      	orrs	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	609a      	str	r2, [r3, #8]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2201      	movs	r2, #1
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	43db      	mvns	r3, r3
 800775a:	401a      	ands	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	fa01 f303 	lsl.w	r3, r1, r3
 8007770:	431a      	orrs	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
	...

08007784 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d109      	bne.n	80077a8 <HAL_TIMEx_PWMN_Start+0x24>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b01      	cmp	r3, #1
 800779e:	bf14      	ite	ne
 80077a0:	2301      	movne	r3, #1
 80077a2:	2300      	moveq	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	e022      	b.n	80077ee <HAL_TIMEx_PWMN_Start+0x6a>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d109      	bne.n	80077c2 <HAL_TIMEx_PWMN_Start+0x3e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	bf14      	ite	ne
 80077ba:	2301      	movne	r3, #1
 80077bc:	2300      	moveq	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	e015      	b.n	80077ee <HAL_TIMEx_PWMN_Start+0x6a>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d109      	bne.n	80077dc <HAL_TIMEx_PWMN_Start+0x58>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	e008      	b.n	80077ee <HAL_TIMEx_PWMN_Start+0x6a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	bf14      	ite	ne
 80077e8:	2301      	movne	r3, #1
 80077ea:	2300      	moveq	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e069      	b.n	80078ca <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d104      	bne.n	8007806 <HAL_TIMEx_PWMN_Start+0x82>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007804:	e013      	b.n	800782e <HAL_TIMEx_PWMN_Start+0xaa>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b04      	cmp	r3, #4
 800780a:	d104      	bne.n	8007816 <HAL_TIMEx_PWMN_Start+0x92>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007814:	e00b      	b.n	800782e <HAL_TIMEx_PWMN_Start+0xaa>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b08      	cmp	r3, #8
 800781a:	d104      	bne.n	8007826 <HAL_TIMEx_PWMN_Start+0xa2>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007824:	e003      	b.n	800782e <HAL_TIMEx_PWMN_Start+0xaa>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2202      	movs	r2, #2
 800782a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2204      	movs	r2, #4
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f9d2 	bl	8007be0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800784a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a20      	ldr	r2, [pc, #128]	@ (80078d4 <HAL_TIMEx_PWMN_Start+0x150>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d018      	beq.n	8007888 <HAL_TIMEx_PWMN_Start+0x104>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785e:	d013      	beq.n	8007888 <HAL_TIMEx_PWMN_Start+0x104>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1c      	ldr	r2, [pc, #112]	@ (80078d8 <HAL_TIMEx_PWMN_Start+0x154>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00e      	beq.n	8007888 <HAL_TIMEx_PWMN_Start+0x104>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1b      	ldr	r2, [pc, #108]	@ (80078dc <HAL_TIMEx_PWMN_Start+0x158>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d009      	beq.n	8007888 <HAL_TIMEx_PWMN_Start+0x104>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a19      	ldr	r2, [pc, #100]	@ (80078e0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <HAL_TIMEx_PWMN_Start+0x104>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a18      	ldr	r2, [pc, #96]	@ (80078e4 <HAL_TIMEx_PWMN_Start+0x160>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d115      	bne.n	80078b4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	4b16      	ldr	r3, [pc, #88]	@ (80078e8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b06      	cmp	r3, #6
 8007898:	d015      	beq.n	80078c6 <HAL_TIMEx_PWMN_Start+0x142>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a0:	d011      	beq.n	80078c6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 0201 	orr.w	r2, r2, #1
 80078b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b2:	e008      	b.n	80078c6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e000      	b.n	80078c8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40012c00 	.word	0x40012c00
 80078d8:	40000400 	.word	0x40000400
 80078dc:	40000800 	.word	0x40000800
 80078e0:	40013400 	.word	0x40013400
 80078e4:	40014000 	.word	0x40014000
 80078e8:	00010007 	.word	0x00010007

080078ec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2200      	movs	r2, #0
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 f96e 	bl	8007be0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a1a      	ldr	r2, [r3, #32]
 800790a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800790e:	4013      	ands	r3, r2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10f      	bne.n	8007934 <HAL_TIMEx_PWMN_Stop+0x48>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	f240 4344 	movw	r3, #1092	@ 0x444
 800791e:	4013      	ands	r3, r2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d107      	bne.n	8007934 <HAL_TIMEx_PWMN_Stop+0x48>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6a1a      	ldr	r2, [r3, #32]
 800793a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800793e:	4013      	ands	r3, r2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10f      	bne.n	8007964 <HAL_TIMEx_PWMN_Stop+0x78>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6a1a      	ldr	r2, [r3, #32]
 800794a:	f240 4344 	movw	r3, #1092	@ 0x444
 800794e:	4013      	ands	r3, r2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d107      	bne.n	8007964 <HAL_TIMEx_PWMN_Stop+0x78>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0201 	bic.w	r2, r2, #1
 8007962:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <HAL_TIMEx_PWMN_Stop+0x88>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007972:	e013      	b.n	800799c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b04      	cmp	r3, #4
 8007978:	d104      	bne.n	8007984 <HAL_TIMEx_PWMN_Stop+0x98>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007982:	e00b      	b.n	800799c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b08      	cmp	r3, #8
 8007988:	d104      	bne.n	8007994 <HAL_TIMEx_PWMN_Stop+0xa8>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007992:	e003      	b.n	800799c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079bc:	2302      	movs	r3, #2
 80079be:	e063      	b.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007a94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007a98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d108      	bne.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80079fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1b      	ldr	r2, [pc, #108]	@ (8007a94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d018      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a32:	d013      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a18      	ldr	r2, [pc, #96]	@ (8007a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00e      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a17      	ldr	r2, [pc, #92]	@ (8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d009      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a12      	ldr	r2, [pc, #72]	@ (8007a98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d004      	beq.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a13      	ldr	r2, [pc, #76]	@ (8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d10c      	bne.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	40012c00 	.word	0x40012c00
 8007a98:	40013400 	.word	0x40013400
 8007a9c:	40000400 	.word	0x40000400
 8007aa0:	40000800 	.word	0x40000800
 8007aa4:	40014000 	.word	0x40014000

08007aa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e065      	b.n	8007b90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a16      	ldr	r2, [pc, #88]	@ (8007b9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a14      	ldr	r2, [pc, #80]	@ (8007ba0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d115      	bne.n	8007b7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	051b      	lsls	r3, r3, #20
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40013400 	.word	0x40013400

08007ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	401a      	ands	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e040      	b.n	8007cbe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d106      	bne.n	8007c52 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7fa fbdd 	bl	800240c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2224      	movs	r2, #36	@ 0x24
 8007c56:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fe55 	bl	8008920 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fc7e 	bl	8008578 <UART_SetConfig>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e01b      	b.n	8007cbe <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ca4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fed4 	bl	8008a64 <UART_CheckIdleState>
 8007cbc:	4603      	mov	r3, r0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e02f      	b.n	8007d38 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2224      	movs	r2, #36	@ 0x24
 8007cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fa fc20 	bl	800254c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	@ 0x28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d165      	bne.n	8007e22 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <HAL_UART_Transmit_DMA+0x22>
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e05e      	b.n	8007e24 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	88fa      	ldrh	r2, [r7, #6]
 8007d70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2221      	movs	r2, #33	@ 0x21
 8007d88:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d027      	beq.n	8007de2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d96:	4a25      	ldr	r2, [pc, #148]	@ (8007e2c <HAL_UART_Transmit_DMA+0xec>)
 8007d98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9e:	4a24      	ldr	r2, [pc, #144]	@ (8007e30 <HAL_UART_Transmit_DMA+0xf0>)
 8007da0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da6:	4a23      	ldr	r2, [pc, #140]	@ (8007e34 <HAL_UART_Transmit_DMA+0xf4>)
 8007da8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dae:	2200      	movs	r2, #0
 8007db0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3328      	adds	r3, #40	@ 0x28
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	f7fb fd15 	bl	80037f4 <HAL_DMA_Start_IT>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2210      	movs	r2, #16
 8007dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e020      	b.n	8007e24 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2240      	movs	r2, #64	@ 0x40
 8007de8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3308      	adds	r3, #8
 8007df0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e0a:	623a      	str	r2, [r7, #32]
 8007e0c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	69f9      	ldr	r1, [r7, #28]
 8007e10:	6a3a      	ldr	r2, [r7, #32]
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e5      	bne.n	8007dea <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e000      	b.n	8007e24 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007e22:	2302      	movs	r3, #2
  }
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3728      	adds	r7, #40	@ 0x28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	08008ee5 	.word	0x08008ee5
 8007e30:	08008f79 	.word	0x08008f79
 8007e34:	080090f9 	.word	0x080090f9

08007e38 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b090      	sub	sp, #64	@ 0x40
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e4c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e58:	2b80      	cmp	r3, #128	@ 0x80
 8007e5a:	d139      	bne.n	8007ed0 <HAL_UART_DMAStop+0x98>
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5e:	2b21      	cmp	r3, #33	@ 0x21
 8007e60:	d136      	bne.n	8007ed0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e5      	bne.n	8007e62 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d015      	beq.n	8007eca <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb fd05 	bl	80038b2 <HAL_DMA_Abort>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00d      	beq.n	8007eca <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fb fe1c 	bl	8003af0 <HAL_DMA_GetError>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d105      	bne.n	8007eca <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e044      	b.n	8007f54 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 ff80 	bl	8008dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eda:	2b40      	cmp	r3, #64	@ 0x40
 8007edc:	d139      	bne.n	8007f52 <HAL_UART_DMAStop+0x11a>
 8007ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee0:	2b22      	cmp	r3, #34	@ 0x22
 8007ee2:	d136      	bne.n	8007f52 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f04:	61ba      	str	r2, [r7, #24]
 8007f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6979      	ldr	r1, [r7, #20]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	613b      	str	r3, [r7, #16]
   return(result);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e5      	bne.n	8007ee4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d015      	beq.n	8007f4c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fb fcc4 	bl	80038b2 <HAL_DMA_Abort>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00d      	beq.n	8007f4c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fb fddb 	bl	8003af0 <HAL_DMA_GetError>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d105      	bne.n	8007f4c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2210      	movs	r2, #16
 8007f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e003      	b.n	8007f54 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 ff65 	bl	8008e1c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3740      	adds	r7, #64	@ 0x40
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b0ba      	sub	sp, #232	@ 0xe8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d115      	bne.n	8007fc4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa8:	f003 0320 	and.w	r3, r3, #32
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 82ab 	beq.w	8008510 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
      }
      return;
 8007fc2:	e2a5      	b.n	8008510 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8117 	beq.w	80081fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007fde:	4b85      	ldr	r3, [pc, #532]	@ (80081f4 <HAL_UART_IRQHandler+0x298>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 810a 	beq.w	80081fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d011      	beq.n	8008018 <HAL_UART_IRQHandler+0xbc>
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00b      	beq.n	8008018 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2201      	movs	r2, #1
 8008006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800800e:	f043 0201 	orr.w	r2, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d011      	beq.n	8008048 <HAL_UART_IRQHandler+0xec>
 8008024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2202      	movs	r2, #2
 8008036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800803e:	f043 0204 	orr.w	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d011      	beq.n	8008078 <HAL_UART_IRQHandler+0x11c>
 8008054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2204      	movs	r2, #4
 8008066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800806e:	f043 0202 	orr.w	r2, r3, #2
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b00      	cmp	r3, #0
 8008082:	d017      	beq.n	80080b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d105      	bne.n	800809c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008094:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2208      	movs	r2, #8
 80080a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080aa:	f043 0208 	orr.w	r2, r3, #8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d012      	beq.n	80080e6 <HAL_UART_IRQHandler+0x18a>
 80080c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00c      	beq.n	80080e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080dc:	f043 0220 	orr.w	r2, r3, #32
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8211 	beq.w	8008514 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00d      	beq.n	800811a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008120:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812e:	2b40      	cmp	r3, #64	@ 0x40
 8008130:	d005      	beq.n	800813e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008136:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800813a:	2b00      	cmp	r3, #0
 800813c:	d04f      	beq.n	80081de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fe6c 	bl	8008e1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814e:	2b40      	cmp	r3, #64	@ 0x40
 8008150:	d141      	bne.n	80081d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3308      	adds	r3, #8
 8008158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008168:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800816c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3308      	adds	r3, #8
 800817a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800817e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800818a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1d9      	bne.n	8008152 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d013      	beq.n	80081ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081aa:	4a13      	ldr	r2, [pc, #76]	@ (80081f8 <HAL_UART_IRQHandler+0x29c>)
 80081ac:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fb fbbb 	bl	800392e <HAL_DMA_Abort_IT>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d017      	beq.n	80081ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	e00f      	b.n	80081ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f9c8 	bl	8008564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d4:	e00b      	b.n	80081ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f9c4 	bl	8008564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081dc:	e007      	b.n	80081ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9c0 	bl	8008564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80081ec:	e192      	b.n	8008514 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ee:	bf00      	nop
    return;
 80081f0:	e190      	b.n	8008514 <HAL_UART_IRQHandler+0x5b8>
 80081f2:	bf00      	nop
 80081f4:	04000120 	.word	0x04000120
 80081f8:	08009177 	.word	0x08009177

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008200:	2b01      	cmp	r3, #1
 8008202:	f040 814b 	bne.w	800849c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800820a:	f003 0310 	and.w	r3, r3, #16
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 8144 	beq.w	800849c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 813d 	beq.w	800849c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2210      	movs	r2, #16
 8008228:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008234:	2b40      	cmp	r3, #64	@ 0x40
 8008236:	f040 80b5 	bne.w	80083a4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008246:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 8164 	beq.w	8008518 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800825a:	429a      	cmp	r2, r3
 800825c:	f080 815c 	bcs.w	8008518 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008266:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2b20      	cmp	r3, #32
 8008272:	f000 8086 	beq.w	8008382 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800828a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800828e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008292:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1da      	bne.n	8008276 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3308      	adds	r3, #8
 80082e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e1      	bne.n	80082c0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3308      	adds	r3, #8
 8008302:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800830c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800830e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3308      	adds	r3, #8
 800831c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008320:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008322:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008326:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800832e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e3      	bne.n	80082fc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008352:	f023 0310 	bic.w	r3, r3, #16
 8008356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008364:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008366:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800836a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e4      	bne.n	8008342 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800837c:	4618      	mov	r0, r3
 800837e:	f7fb fa98 	bl	80038b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2202      	movs	r2, #2
 8008386:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008394:	b29b      	uxth	r3, r3
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	b29b      	uxth	r3, r3
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7f9 f971 	bl	8001684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083a2:	e0b9      	b.n	8008518 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80ab 	beq.w	800851c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80083c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80a6 	beq.w	800851c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80083f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e4      	bne.n	80083d0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	623b      	str	r3, [r7, #32]
   return(result);
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	f023 0301 	bic.w	r3, r3, #1
 800841c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3308      	adds	r3, #8
 8008426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800842a:	633a      	str	r2, [r7, #48]	@ 0x30
 800842c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e3      	bne.n	8008406 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0310 	bic.w	r3, r3, #16
 8008466:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	69b9      	ldr	r1, [r7, #24]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	617b      	str	r3, [r7, #20]
   return(result);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e4      	bne.n	8008452 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800848e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7f9 f8f5 	bl	8001684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800849a:	e03f      	b.n	800851c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800849c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00e      	beq.n	80084c6 <HAL_UART_IRQHandler+0x56a>
 80084a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d008      	beq.n	80084c6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fe99 	bl	80091f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084c4:	e02d      	b.n	8008522 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00e      	beq.n	80084f0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01c      	beq.n	8008520 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
    }
    return;
 80084ee:	e017      	b.n	8008520 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d012      	beq.n	8008522 <HAL_UART_IRQHandler+0x5c6>
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00c      	beq.n	8008522 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fe4a 	bl	80091a2 <UART_EndTransmit_IT>
    return;
 800850e:	e008      	b.n	8008522 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008510:	bf00      	nop
 8008512:	e006      	b.n	8008522 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008514:	bf00      	nop
 8008516:	e004      	b.n	8008522 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008518:	bf00      	nop
 800851a:	e002      	b.n	8008522 <HAL_UART_IRQHandler+0x5c6>
      return;
 800851c:	bf00      	nop
 800851e:	e000      	b.n	8008522 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008520:	bf00      	nop
  }

}
 8008522:	37e8      	adds	r7, #232	@ 0xe8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	431a      	orrs	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80085a6:	f023 030c 	bic.w	r3, r3, #12
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	6979      	ldr	r1, [r7, #20]
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4aa7      	ldr	r2, [pc, #668]	@ (8008890 <UART_SetConfig+0x318>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d120      	bne.n	800863a <UART_SetConfig+0xc2>
 80085f8:	4ba6      	ldr	r3, [pc, #664]	@ (8008894 <UART_SetConfig+0x31c>)
 80085fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	2b03      	cmp	r3, #3
 8008602:	d817      	bhi.n	8008634 <UART_SetConfig+0xbc>
 8008604:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <UART_SetConfig+0x94>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	0800861d 	.word	0x0800861d
 8008610:	08008629 	.word	0x08008629
 8008614:	0800862f 	.word	0x0800862f
 8008618:	08008623 	.word	0x08008623
 800861c:	2301      	movs	r3, #1
 800861e:	77fb      	strb	r3, [r7, #31]
 8008620:	e0b5      	b.n	800878e <UART_SetConfig+0x216>
 8008622:	2302      	movs	r3, #2
 8008624:	77fb      	strb	r3, [r7, #31]
 8008626:	e0b2      	b.n	800878e <UART_SetConfig+0x216>
 8008628:	2304      	movs	r3, #4
 800862a:	77fb      	strb	r3, [r7, #31]
 800862c:	e0af      	b.n	800878e <UART_SetConfig+0x216>
 800862e:	2308      	movs	r3, #8
 8008630:	77fb      	strb	r3, [r7, #31]
 8008632:	e0ac      	b.n	800878e <UART_SetConfig+0x216>
 8008634:	2310      	movs	r3, #16
 8008636:	77fb      	strb	r3, [r7, #31]
 8008638:	e0a9      	b.n	800878e <UART_SetConfig+0x216>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a96      	ldr	r2, [pc, #600]	@ (8008898 <UART_SetConfig+0x320>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d124      	bne.n	800868e <UART_SetConfig+0x116>
 8008644:	4b93      	ldr	r3, [pc, #588]	@ (8008894 <UART_SetConfig+0x31c>)
 8008646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800864c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008650:	d011      	beq.n	8008676 <UART_SetConfig+0xfe>
 8008652:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008656:	d817      	bhi.n	8008688 <UART_SetConfig+0x110>
 8008658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800865c:	d011      	beq.n	8008682 <UART_SetConfig+0x10a>
 800865e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008662:	d811      	bhi.n	8008688 <UART_SetConfig+0x110>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <UART_SetConfig+0xf8>
 8008668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800866c:	d006      	beq.n	800867c <UART_SetConfig+0x104>
 800866e:	e00b      	b.n	8008688 <UART_SetConfig+0x110>
 8008670:	2300      	movs	r3, #0
 8008672:	77fb      	strb	r3, [r7, #31]
 8008674:	e08b      	b.n	800878e <UART_SetConfig+0x216>
 8008676:	2302      	movs	r3, #2
 8008678:	77fb      	strb	r3, [r7, #31]
 800867a:	e088      	b.n	800878e <UART_SetConfig+0x216>
 800867c:	2304      	movs	r3, #4
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e085      	b.n	800878e <UART_SetConfig+0x216>
 8008682:	2308      	movs	r3, #8
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e082      	b.n	800878e <UART_SetConfig+0x216>
 8008688:	2310      	movs	r3, #16
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e07f      	b.n	800878e <UART_SetConfig+0x216>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a82      	ldr	r2, [pc, #520]	@ (800889c <UART_SetConfig+0x324>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d124      	bne.n	80086e2 <UART_SetConfig+0x16a>
 8008698:	4b7e      	ldr	r3, [pc, #504]	@ (8008894 <UART_SetConfig+0x31c>)
 800869a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80086a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80086a4:	d011      	beq.n	80086ca <UART_SetConfig+0x152>
 80086a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80086aa:	d817      	bhi.n	80086dc <UART_SetConfig+0x164>
 80086ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086b0:	d011      	beq.n	80086d6 <UART_SetConfig+0x15e>
 80086b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086b6:	d811      	bhi.n	80086dc <UART_SetConfig+0x164>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <UART_SetConfig+0x14c>
 80086bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086c0:	d006      	beq.n	80086d0 <UART_SetConfig+0x158>
 80086c2:	e00b      	b.n	80086dc <UART_SetConfig+0x164>
 80086c4:	2300      	movs	r3, #0
 80086c6:	77fb      	strb	r3, [r7, #31]
 80086c8:	e061      	b.n	800878e <UART_SetConfig+0x216>
 80086ca:	2302      	movs	r3, #2
 80086cc:	77fb      	strb	r3, [r7, #31]
 80086ce:	e05e      	b.n	800878e <UART_SetConfig+0x216>
 80086d0:	2304      	movs	r3, #4
 80086d2:	77fb      	strb	r3, [r7, #31]
 80086d4:	e05b      	b.n	800878e <UART_SetConfig+0x216>
 80086d6:	2308      	movs	r3, #8
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e058      	b.n	800878e <UART_SetConfig+0x216>
 80086dc:	2310      	movs	r3, #16
 80086de:	77fb      	strb	r3, [r7, #31]
 80086e0:	e055      	b.n	800878e <UART_SetConfig+0x216>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a6e      	ldr	r2, [pc, #440]	@ (80088a0 <UART_SetConfig+0x328>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d124      	bne.n	8008736 <UART_SetConfig+0x1be>
 80086ec:	4b69      	ldr	r3, [pc, #420]	@ (8008894 <UART_SetConfig+0x31c>)
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80086f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086f8:	d011      	beq.n	800871e <UART_SetConfig+0x1a6>
 80086fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086fe:	d817      	bhi.n	8008730 <UART_SetConfig+0x1b8>
 8008700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008704:	d011      	beq.n	800872a <UART_SetConfig+0x1b2>
 8008706:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800870a:	d811      	bhi.n	8008730 <UART_SetConfig+0x1b8>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <UART_SetConfig+0x1a0>
 8008710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008714:	d006      	beq.n	8008724 <UART_SetConfig+0x1ac>
 8008716:	e00b      	b.n	8008730 <UART_SetConfig+0x1b8>
 8008718:	2300      	movs	r3, #0
 800871a:	77fb      	strb	r3, [r7, #31]
 800871c:	e037      	b.n	800878e <UART_SetConfig+0x216>
 800871e:	2302      	movs	r3, #2
 8008720:	77fb      	strb	r3, [r7, #31]
 8008722:	e034      	b.n	800878e <UART_SetConfig+0x216>
 8008724:	2304      	movs	r3, #4
 8008726:	77fb      	strb	r3, [r7, #31]
 8008728:	e031      	b.n	800878e <UART_SetConfig+0x216>
 800872a:	2308      	movs	r3, #8
 800872c:	77fb      	strb	r3, [r7, #31]
 800872e:	e02e      	b.n	800878e <UART_SetConfig+0x216>
 8008730:	2310      	movs	r3, #16
 8008732:	77fb      	strb	r3, [r7, #31]
 8008734:	e02b      	b.n	800878e <UART_SetConfig+0x216>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a5a      	ldr	r2, [pc, #360]	@ (80088a4 <UART_SetConfig+0x32c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d124      	bne.n	800878a <UART_SetConfig+0x212>
 8008740:	4b54      	ldr	r3, [pc, #336]	@ (8008894 <UART_SetConfig+0x31c>)
 8008742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008744:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008748:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800874c:	d011      	beq.n	8008772 <UART_SetConfig+0x1fa>
 800874e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008752:	d817      	bhi.n	8008784 <UART_SetConfig+0x20c>
 8008754:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008758:	d011      	beq.n	800877e <UART_SetConfig+0x206>
 800875a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800875e:	d811      	bhi.n	8008784 <UART_SetConfig+0x20c>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <UART_SetConfig+0x1f4>
 8008764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008768:	d006      	beq.n	8008778 <UART_SetConfig+0x200>
 800876a:	e00b      	b.n	8008784 <UART_SetConfig+0x20c>
 800876c:	2300      	movs	r3, #0
 800876e:	77fb      	strb	r3, [r7, #31]
 8008770:	e00d      	b.n	800878e <UART_SetConfig+0x216>
 8008772:	2302      	movs	r3, #2
 8008774:	77fb      	strb	r3, [r7, #31]
 8008776:	e00a      	b.n	800878e <UART_SetConfig+0x216>
 8008778:	2304      	movs	r3, #4
 800877a:	77fb      	strb	r3, [r7, #31]
 800877c:	e007      	b.n	800878e <UART_SetConfig+0x216>
 800877e:	2308      	movs	r3, #8
 8008780:	77fb      	strb	r3, [r7, #31]
 8008782:	e004      	b.n	800878e <UART_SetConfig+0x216>
 8008784:	2310      	movs	r3, #16
 8008786:	77fb      	strb	r3, [r7, #31]
 8008788:	e001      	b.n	800878e <UART_SetConfig+0x216>
 800878a:	2310      	movs	r3, #16
 800878c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008796:	d15b      	bne.n	8008850 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008798:	7ffb      	ldrb	r3, [r7, #31]
 800879a:	2b08      	cmp	r3, #8
 800879c:	d827      	bhi.n	80087ee <UART_SetConfig+0x276>
 800879e:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <UART_SetConfig+0x22c>)
 80087a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a4:	080087c9 	.word	0x080087c9
 80087a8:	080087d1 	.word	0x080087d1
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	080087ef 	.word	0x080087ef
 80087b4:	080087df 	.word	0x080087df
 80087b8:	080087ef 	.word	0x080087ef
 80087bc:	080087ef 	.word	0x080087ef
 80087c0:	080087ef 	.word	0x080087ef
 80087c4:	080087e7 	.word	0x080087e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c8:	f7fc ff86 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 80087cc:	61b8      	str	r0, [r7, #24]
        break;
 80087ce:	e013      	b.n	80087f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087d0:	f7fc ffa4 	bl	800571c <HAL_RCC_GetPCLK2Freq>
 80087d4:	61b8      	str	r0, [r7, #24]
        break;
 80087d6:	e00f      	b.n	80087f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087d8:	4b33      	ldr	r3, [pc, #204]	@ (80088a8 <UART_SetConfig+0x330>)
 80087da:	61bb      	str	r3, [r7, #24]
        break;
 80087dc:	e00c      	b.n	80087f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087de:	f7fc ff19 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80087e2:	61b8      	str	r0, [r7, #24]
        break;
 80087e4:	e008      	b.n	80087f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ea:	61bb      	str	r3, [r7, #24]
        break;
 80087ec:	e004      	b.n	80087f8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	77bb      	strb	r3, [r7, #30]
        break;
 80087f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8082 	beq.w	8008904 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	005a      	lsls	r2, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	085b      	lsrs	r3, r3, #1
 800880a:	441a      	add	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	fbb2 f3f3 	udiv	r3, r2, r3
 8008814:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b0f      	cmp	r3, #15
 800881a:	d916      	bls.n	800884a <UART_SetConfig+0x2d2>
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008822:	d212      	bcs.n	800884a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	b29b      	uxth	r3, r3
 8008828:	f023 030f 	bic.w	r3, r3, #15
 800882c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	085b      	lsrs	r3, r3, #1
 8008832:	b29b      	uxth	r3, r3
 8008834:	f003 0307 	and.w	r3, r3, #7
 8008838:	b29a      	uxth	r2, r3
 800883a:	89fb      	ldrh	r3, [r7, #14]
 800883c:	4313      	orrs	r3, r2
 800883e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	89fa      	ldrh	r2, [r7, #14]
 8008846:	60da      	str	r2, [r3, #12]
 8008848:	e05c      	b.n	8008904 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	77bb      	strb	r3, [r7, #30]
 800884e:	e059      	b.n	8008904 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008850:	7ffb      	ldrb	r3, [r7, #31]
 8008852:	2b08      	cmp	r3, #8
 8008854:	d835      	bhi.n	80088c2 <UART_SetConfig+0x34a>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <UART_SetConfig+0x2e4>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008881 	.word	0x08008881
 8008860:	08008889 	.word	0x08008889
 8008864:	080088ad 	.word	0x080088ad
 8008868:	080088c3 	.word	0x080088c3
 800886c:	080088b3 	.word	0x080088b3
 8008870:	080088c3 	.word	0x080088c3
 8008874:	080088c3 	.word	0x080088c3
 8008878:	080088c3 	.word	0x080088c3
 800887c:	080088bb 	.word	0x080088bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008880:	f7fc ff2a 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 8008884:	61b8      	str	r0, [r7, #24]
        break;
 8008886:	e021      	b.n	80088cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008888:	f7fc ff48 	bl	800571c <HAL_RCC_GetPCLK2Freq>
 800888c:	61b8      	str	r0, [r7, #24]
        break;
 800888e:	e01d      	b.n	80088cc <UART_SetConfig+0x354>
 8008890:	40013800 	.word	0x40013800
 8008894:	40021000 	.word	0x40021000
 8008898:	40004400 	.word	0x40004400
 800889c:	40004800 	.word	0x40004800
 80088a0:	40004c00 	.word	0x40004c00
 80088a4:	40005000 	.word	0x40005000
 80088a8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088ac:	4b1b      	ldr	r3, [pc, #108]	@ (800891c <UART_SetConfig+0x3a4>)
 80088ae:	61bb      	str	r3, [r7, #24]
        break;
 80088b0:	e00c      	b.n	80088cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088b2:	f7fc feaf 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80088b6:	61b8      	str	r0, [r7, #24]
        break;
 80088b8:	e008      	b.n	80088cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088be:	61bb      	str	r3, [r7, #24]
        break;
 80088c0:	e004      	b.n	80088cc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	77bb      	strb	r3, [r7, #30]
        break;
 80088ca:	bf00      	nop
    }

    if (pclk != 0U)
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d018      	beq.n	8008904 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	085a      	lsrs	r2, r3, #1
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	441a      	add	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b0f      	cmp	r3, #15
 80088ea:	d909      	bls.n	8008900 <UART_SetConfig+0x388>
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f2:	d205      	bcs.n	8008900 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60da      	str	r2, [r3, #12]
 80088fe:	e001      	b.n	8008904 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008910:	7fbb      	ldrb	r3, [r7, #30]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	007a1200 	.word	0x007a1200

08008920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00a      	beq.n	800894a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00a      	beq.n	800898e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01a      	beq.n	8008a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a1e:	d10a      	bne.n	8008a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	605a      	str	r2, [r3, #4]
  }
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b098      	sub	sp, #96	@ 0x60
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a74:	f7f9 fe9a 	bl	80027ac <HAL_GetTick>
 8008a78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b08      	cmp	r3, #8
 8008a86:	d12e      	bne.n	8008ae6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a90:	2200      	movs	r2, #0
 8008a92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f88c 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d021      	beq.n	8008ae6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ab6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ac2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e6      	bne.n	8008aa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e062      	b.n	8008bac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d149      	bne.n	8008b88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008afc:	2200      	movs	r2, #0
 8008afe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f856 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d03c      	beq.n	8008b88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3308      	adds	r3, #8
 8008b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0301 	bic.w	r3, r3, #1
 8008b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b60:	61fa      	str	r2, [r7, #28]
 8008b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	69b9      	ldr	r1, [r7, #24]
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e5      	bne.n	8008b40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e011      	b.n	8008bac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3758      	adds	r7, #88	@ 0x58
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc4:	e04f      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d04b      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bce:	f7f9 fded 	bl	80027ac <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d302      	bcc.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e04e      	b.n	8008c86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d037      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b80      	cmp	r3, #128	@ 0x80
 8008bfa:	d034      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b40      	cmp	r3, #64	@ 0x40
 8008c00:	d031      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d110      	bne.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2208      	movs	r2, #8
 8008c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 f8ff 	bl	8008e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2208      	movs	r2, #8
 8008c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e029      	b.n	8008c86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c40:	d111      	bne.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f8e5 	bl	8008e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e00f      	b.n	8008c86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69da      	ldr	r2, [r3, #28]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	bf0c      	ite	eq
 8008c76:	2301      	moveq	r3, #1
 8008c78:	2300      	movne	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d0a0      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b096      	sub	sp, #88	@ 0x58
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	88fa      	ldrh	r2, [r7, #6]
 8008ca8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2222      	movs	r2, #34	@ 0x22
 8008cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d028      	beq.n	8008d16 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8008dc4 <UART_Start_Receive_DMA+0x134>)
 8008cca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8008dc8 <UART_Start_Receive_DMA+0x138>)
 8008cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8008dcc <UART_Start_Receive_DMA+0x13c>)
 8008cda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3324      	adds	r3, #36	@ 0x24
 8008cee:	4619      	mov	r1, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	f7fa fd7c 	bl	80037f4 <HAL_DMA_Start_IT>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d009      	beq.n	8008d16 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2210      	movs	r2, #16
 8008d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e051      	b.n	8008dba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d018      	beq.n	8008d50 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d3e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e6      	bne.n	8008d1e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3308      	adds	r3, #8
 8008d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d70:	637a      	str	r2, [r7, #52]	@ 0x34
 8008d72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e5      	bne.n	8008d50 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	613b      	str	r3, [r7, #16]
   return(result);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008da4:	623a      	str	r2, [r7, #32]
 8008da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	69f9      	ldr	r1, [r7, #28]
 8008daa:	6a3a      	ldr	r2, [r7, #32]
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e5      	bne.n	8008d84 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3758      	adds	r7, #88	@ 0x58
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	08008f95 	.word	0x08008f95
 8008dc8:	080090bb 	.word	0x080090bb
 8008dcc:	080090f9 	.word	0x080090f9

08008dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b089      	sub	sp, #36	@ 0x24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	61bb      	str	r3, [r7, #24]
 8008df8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6979      	ldr	r1, [r7, #20]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	613b      	str	r3, [r7, #16]
   return(result);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e6      	bne.n	8008dd8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008e10:	bf00      	nop
 8008e12:	3724      	adds	r7, #36	@ 0x24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b095      	sub	sp, #84	@ 0x54
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e6      	bne.n	8008e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d118      	bne.n	8008ec4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f023 0310 	bic.w	r3, r3, #16
 8008ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6979      	ldr	r1, [r7, #20]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e6      	bne.n	8008e92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008ed8:	bf00      	nop
 8008eda:	3754      	adds	r7, #84	@ 0x54
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b090      	sub	sp, #64	@ 0x40
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d037      	beq.n	8008f6a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8008efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3308      	adds	r3, #8
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	623b      	str	r3, [r7, #32]
   return(result);
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f22:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e5      	bne.n	8008f02 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f54:	61fb      	str	r3, [r7, #28]
 8008f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	69b9      	ldr	r1, [r7, #24]
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	617b      	str	r3, [r7, #20]
   return(result);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f68:	e002      	b.n	8008f70 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8008f6a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008f6c:	f7f8 fb54 	bl	8001618 <HAL_UART_TxCpltCallback>
}
 8008f70:	bf00      	nop
 8008f72:	3740      	adds	r7, #64	@ 0x40
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff face 	bl	8008528 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f8c:	bf00      	nop
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b09c      	sub	sp, #112	@ 0x70
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	2b20      	cmp	r3, #32
 8008fa8:	d071      	beq.n	800908e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fd2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e6      	bne.n	8008fb2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009004:	647a      	str	r2, [r7, #68]	@ 0x44
 8009006:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800900a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e5      	bne.n	8008fe4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	623b      	str	r3, [r7, #32]
   return(result);
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800902e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009038:	633a      	str	r2, [r7, #48]	@ 0x30
 800903a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800903e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e5      	bne.n	8009018 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800904c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800904e:	2220      	movs	r2, #32
 8009050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009058:	2b01      	cmp	r3, #1
 800905a:	d118      	bne.n	800908e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	60fb      	str	r3, [r7, #12]
   return(result);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f023 0310 	bic.w	r3, r3, #16
 8009070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	69b9      	ldr	r1, [r7, #24]
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	617b      	str	r3, [r7, #20]
   return(result);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e6      	bne.n	800905c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800908e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009090:	2200      	movs	r2, #0
 8009092:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009098:	2b01      	cmp	r3, #1
 800909a:	d107      	bne.n	80090ac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800909c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800909e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80090a2:	4619      	mov	r1, r3
 80090a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090a6:	f7f8 faed 	bl	8001684 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090aa:	e002      	b.n	80090b2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80090ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090ae:	f7ff fa45 	bl	800853c <HAL_UART_RxCpltCallback>
}
 80090b2:	bf00      	nop
 80090b4:	3770      	adds	r7, #112	@ 0x70
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2201      	movs	r2, #1
 80090cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d109      	bne.n	80090ea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80090dc:	085b      	lsrs	r3, r3, #1
 80090de:	b29b      	uxth	r3, r3
 80090e0:	4619      	mov	r1, r3
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7f8 face 	bl	8001684 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090e8:	e002      	b.n	80090f0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fa30 	bl	8008550 <HAL_UART_RxHalfCpltCallback>
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009104:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800910a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009112:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911e:	2b80      	cmp	r3, #128	@ 0x80
 8009120:	d109      	bne.n	8009136 <UART_DMAError+0x3e>
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b21      	cmp	r3, #33	@ 0x21
 8009126:	d106      	bne.n	8009136 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009130:	6978      	ldr	r0, [r7, #20]
 8009132:	f7ff fe4d 	bl	8008dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009140:	2b40      	cmp	r3, #64	@ 0x40
 8009142:	d109      	bne.n	8009158 <UART_DMAError+0x60>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b22      	cmp	r3, #34	@ 0x22
 8009148:	d106      	bne.n	8009158 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2200      	movs	r2, #0
 800914e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009152:	6978      	ldr	r0, [r7, #20]
 8009154:	f7ff fe62 	bl	8008e1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800915e:	f043 0210 	orr.w	r2, r3, #16
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009168:	6978      	ldr	r0, [r7, #20]
 800916a:	f7ff f9fb 	bl	8008564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800916e:	bf00      	nop
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f7ff f9e5 	bl	8008564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b088      	sub	sp, #32
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091be:	61fb      	str	r3, [r7, #28]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6979      	ldr	r1, [r7, #20]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	613b      	str	r3, [r7, #16]
   return(result);
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e6      	bne.n	80091aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2220      	movs	r2, #32
 80091e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7f8 fa15 	bl	8001618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ee:	bf00      	nop
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b08c      	sub	sp, #48	@ 0x30
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	4613      	mov	r3, r2
 8009216:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800921e:	2b20      	cmp	r3, #32
 8009220:	d142      	bne.n	80092a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e03b      	b.n	80092aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	461a      	mov	r2, r3
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7ff fd23 	bl	8008c90 <UART_Start_Receive_DMA>
 800924a:	4603      	mov	r3, r0
 800924c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009254:	2b00      	cmp	r3, #0
 8009256:	d124      	bne.n	80092a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800925c:	2b01      	cmp	r3, #1
 800925e:	d11d      	bne.n	800929c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2210      	movs	r2, #16
 8009266:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	617b      	str	r3, [r7, #20]
   return(result);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f043 0310 	orr.w	r3, r3, #16
 800927c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
 8009288:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	6a39      	ldr	r1, [r7, #32]
 800928c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	61fb      	str	r3, [r7, #28]
   return(result);
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e6      	bne.n	8009268 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800929a:	e002      	b.n	80092a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80092a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092a6:	e000      	b.n	80092aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80092a8:	2302      	movs	r3, #2
  }
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3730      	adds	r7, #48	@ 0x30
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <memset>:
 80092b2:	4402      	add	r2, r0
 80092b4:	4603      	mov	r3, r0
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d100      	bne.n	80092bc <memset+0xa>
 80092ba:	4770      	bx	lr
 80092bc:	f803 1b01 	strb.w	r1, [r3], #1
 80092c0:	e7f9      	b.n	80092b6 <memset+0x4>
	...

080092c4 <__libc_init_array>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4d0d      	ldr	r5, [pc, #52]	@ (80092fc <__libc_init_array+0x38>)
 80092c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009300 <__libc_init_array+0x3c>)
 80092ca:	1b64      	subs	r4, r4, r5
 80092cc:	10a4      	asrs	r4, r4, #2
 80092ce:	2600      	movs	r6, #0
 80092d0:	42a6      	cmp	r6, r4
 80092d2:	d109      	bne.n	80092e8 <__libc_init_array+0x24>
 80092d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009304 <__libc_init_array+0x40>)
 80092d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009308 <__libc_init_array+0x44>)
 80092d8:	f000 f818 	bl	800930c <_init>
 80092dc:	1b64      	subs	r4, r4, r5
 80092de:	10a4      	asrs	r4, r4, #2
 80092e0:	2600      	movs	r6, #0
 80092e2:	42a6      	cmp	r6, r4
 80092e4:	d105      	bne.n	80092f2 <__libc_init_array+0x2e>
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ec:	4798      	blx	r3
 80092ee:	3601      	adds	r6, #1
 80092f0:	e7ee      	b.n	80092d0 <__libc_init_array+0xc>
 80092f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f6:	4798      	blx	r3
 80092f8:	3601      	adds	r6, #1
 80092fa:	e7f2      	b.n	80092e2 <__libc_init_array+0x1e>
 80092fc:	0800935c 	.word	0x0800935c
 8009300:	0800935c 	.word	0x0800935c
 8009304:	0800935c 	.word	0x0800935c
 8009308:	08009360 	.word	0x08009360

0800930c <_init>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr

08009318 <_fini>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr
