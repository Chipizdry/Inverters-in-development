
Driver_Flywheel_Soft_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d0  080090d0  0000b014  2**0
                  CONTENTS
  4 .ARM          00000000  080090d0  080090d0  0000b014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090d0  080090d0  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090d4  080090d4  0000a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080090d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b014  2**0
                  CONTENTS
 10 .bss          00000550  20000014  20000014  0000b014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000564  20000564  0000b014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001881c  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e8  00000000  00000000  00023860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  00026948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105b  00000000  00000000  00027df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020120  00000000  00000000  00028e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca35  00000000  00000000  00048f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3f19  00000000  00000000  000659a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001298b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057f8  00000000  00000000  001298fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0012f0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009080 	.word	0x08009080

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08009080 	.word	0x08009080

080001c8 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	781a      	ldrb	r2, [r3, #0]
 80001da:	4b57      	ldr	r3, [pc, #348]	@ (8000338 <Registers_handler+0x170>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d026      	beq.n	8000230 <Registers_handler+0x68>
 80001e2:	2300      	movs	r3, #0
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	e007      	b.n	80001f8 <Registers_handler+0x30>
 80001e8:	8afb      	ldrh	r3, [r7, #22]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	4413      	add	r3, r2
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
 80001f2:	8afb      	ldrh	r3, [r7, #22]
 80001f4:	3301      	adds	r3, #1
 80001f6:	82fb      	strh	r3, [r7, #22]
 80001f8:	8afb      	ldrh	r3, [r7, #22]
 80001fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80001fc:	d9f4      	bls.n	80001e8 <Registers_handler+0x20>
	     RX_2;
 80001fe:	2200      	movs	r2, #0
 8000200:	2104      	movs	r1, #4
 8000202:	484e      	ldr	r0, [pc, #312]	@ (800033c <Registers_handler+0x174>)
 8000204:	f003 fdb0 	bl	8003d68 <HAL_GPIO_WritePin>
	     LED_1_OFF;
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800020e:	484c      	ldr	r0, [pc, #304]	@ (8000340 <Registers_handler+0x178>)
 8000210:	f003 fdaa 	bl	8003d68 <HAL_GPIO_WritePin>
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000214:	2240      	movs	r2, #64	@ 0x40
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	484a      	ldr	r0, [pc, #296]	@ (8000344 <Registers_handler+0x17c>)
 800021a:	f008 feb0 	bl	8008f7e <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800021e:	4b4a      	ldr	r3, [pc, #296]	@ (8000348 <Registers_handler+0x180>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b48      	ldr	r3, [pc, #288]	@ (8000348 <Registers_handler+0x180>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f022 0204 	bic.w	r2, r2, #4
 800022c:	601a      	str	r2, [r3, #0]
		return;}
 800022e:	e080      	b.n	8000332 <Registers_handler+0x16a>


	if (Size < 4) {
 8000230:	887b      	ldrh	r3, [r7, #2]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d805      	bhi.n	8000242 <Registers_handler+0x7a>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 8000236:	2202      	movs	r2, #2
 8000238:	2103      	movs	r1, #3
 800023a:	4842      	ldr	r0, [pc, #264]	@ (8000344 <Registers_handler+0x17c>)
 800023c:	f001 fa6a 	bl	8001714 <sendError>

	        return;
 8000240:	e077      	b.n	8000332 <Registers_handler+0x16a>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 8000242:	887b      	ldrh	r3, [r7, #2]
 8000244:	3b01      	subs	r3, #1
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b21a      	sxth	r2, r3
 800024e:	887b      	ldrh	r3, [r7, #2]
 8000250:	3b02      	subs	r3, #2
 8000252:	68f9      	ldr	r1, [r7, #12]
 8000254:	440b      	add	r3, r1
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	b21b      	sxth	r3, r3
 800025c:	4313      	orrs	r3, r2
 800025e:	b21b      	sxth	r3, r3
 8000260:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 8000262:	887b      	ldrh	r3, [r7, #2]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	3b02      	subs	r3, #2
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4619      	mov	r1, r3
 800026c:	68f8      	ldr	r0, [r7, #12]
 800026e:	f001 f9c9 	bl	8001604 <calcCRC16ModBus>
 8000272:	4603      	mov	r3, r0
 8000274:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 8000276:	8aba      	ldrh	r2, [r7, #20]
 8000278:	8a7b      	ldrh	r3, [r7, #18]
 800027a:	429a      	cmp	r2, r3
 800027c:	d005      	beq.n	800028a <Registers_handler+0xc2>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 800027e:	2203      	movs	r2, #3
 8000280:	2103      	movs	r1, #3
 8000282:	4830      	ldr	r0, [pc, #192]	@ (8000344 <Registers_handler+0x17c>)
 8000284:	f001 fa46 	bl	8001714 <sendError>

	        return;
 8000288:	e053      	b.n	8000332 <Registers_handler+0x16a>
	    }


                       uint8_t opCode = rxFrame[1];
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 8000290:	7c7b      	ldrb	r3, [r7, #17]
 8000292:	3b01      	subs	r3, #1
 8000294:	2b0f      	cmp	r3, #15
 8000296:	d845      	bhi.n	8000324 <Registers_handler+0x15c>
 8000298:	a201      	add	r2, pc, #4	@ (adr r2, 80002a0 <Registers_handler+0xd8>)
 800029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029e:	bf00      	nop
 80002a0:	080002e1 	.word	0x080002e1
 80002a4:	080002ef 	.word	0x080002ef
 80002a8:	080002fd 	.word	0x080002fd
 80002ac:	08000307 	.word	0x08000307
 80002b0:	08000325 	.word	0x08000325
 80002b4:	08000311 	.word	0x08000311
 80002b8:	08000325 	.word	0x08000325
 80002bc:	08000325 	.word	0x08000325
 80002c0:	08000325 	.word	0x08000325
 80002c4:	08000325 	.word	0x08000325
 80002c8:	08000325 	.word	0x08000325
 80002cc:	08000325 	.word	0x08000325
 80002d0:	08000325 	.word	0x08000325
 80002d4:	08000325 	.word	0x08000325
 80002d8:	08000325 	.word	0x08000325
 80002dc:	0800031b 	.word	0x0800031b
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <Registers_handler+0x184>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4619      	mov	r1, r3
 80002e6:	4817      	ldr	r0, [pc, #92]	@ (8000344 <Registers_handler+0x17c>)
 80002e8:	f001 fb32 	bl	8001950 <handleReadCoils>
				  			   break;
 80002ec:	e021      	b.n	8000332 <Registers_handler+0x16a>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 80002ee:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <Registers_handler+0x188>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4813      	ldr	r0, [pc, #76]	@ (8000344 <Registers_handler+0x17c>)
 80002f6:	f001 fb93 	bl	8001a20 <handleReadDiscreteInputs>
							   break;
 80002fa:	e01a      	b.n	8000332 <Registers_handler+0x16a>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80002fc:	68b9      	ldr	r1, [r7, #8]
 80002fe:	4811      	ldr	r0, [pc, #68]	@ (8000344 <Registers_handler+0x17c>)
 8000300:	f001 fa38 	bl	8001774 <handleReadHoldingRegs>
				  			   break;
 8000304:	e015      	b.n	8000332 <Registers_handler+0x16a>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	480e      	ldr	r0, [pc, #56]	@ (8000344 <Registers_handler+0x17c>)
 800030a:	f001 faa9 	bl	8001860 <handleReadInputRegs>

				  			   break;
 800030e:	e010      	b.n	8000332 <Registers_handler+0x16a>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <Registers_handler+0x17c>)
 8000314:	f001 fbf0 	bl	8001af8 <handleWriteMulyipleHandlingRegister>

                               break;
 8000318:	e00b      	b.n	8000332 <Registers_handler+0x16a>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800031a:	6879      	ldr	r1, [r7, #4]
 800031c:	4809      	ldr	r0, [pc, #36]	@ (8000344 <Registers_handler+0x17c>)
 800031e:	f001 fbeb 	bl	8001af8 <handleWriteMulyipleHandlingRegister>

                               break;
 8000322:	e006      	b.n	8000332 <Registers_handler+0x16a>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 8000324:	7c7b      	ldrb	r3, [r7, #17]
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	4806      	ldr	r0, [pc, #24]	@ (8000344 <Registers_handler+0x17c>)
 800032c:	f001 f9f2 	bl	8001714 <sendError>
				  			   break;
 8000330:	bf00      	nop
				  			     }



                          }
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000000 	.word	0x20000000
 800033c:	48000c00 	.word	0x48000c00
 8000340:	48000400 	.word	0x48000400
 8000344:	20000450 	.word	0x20000450
 8000348:	200004d8 	.word	0x200004d8
 800034c:	200001b5 	.word	0x200001b5
 8000350:	200001b4 	.word	0x200001b4

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f002 f83e 	bl	80023d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f9bc 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 fe70 	bl	8001044 <MX_GPIO_Init>
  MX_DMA_Init();
 8000364:	f000 fe48 	bl	8000ff8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000368:	f000 fb5e 	bl	8000a28 <MX_TIM1_Init>
  MX_TIM3_Init();
 800036c:	f000 fcc6 	bl	8000cfc <MX_TIM3_Init>
  MX_TIM8_Init();
 8000370:	f000 fd12 	bl	8000d98 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000374:	f000 fc1e 	bl	8000bb4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000378:	f000 fe0e 	bl	8000f98 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800037c:	f000 fad6 	bl	800092c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000380:	f000 fa10 	bl	80007a4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000384:	f000 fb12 	bl	80009ac <MX_SPI1_Init>
  MX_TIM15_Init();
 8000388:	f000 fdb4 	bl	8000ef4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
   LED_1_ON;
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000392:	48b2      	ldr	r0, [pc, #712]	@ (800065c <main+0x308>)
 8000394:	f003 fce8 	bl	8003d68 <HAL_GPIO_WritePin>
   RX_2;
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	48b0      	ldr	r0, [pc, #704]	@ (8000660 <main+0x30c>)
 800039e:	f003 fce3 	bl	8003d68 <HAL_GPIO_WritePin>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
   HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
   */

   TIM1->ARR=9000;
 80003a2:	4bb0      	ldr	r3, [pc, #704]	@ (8000664 <main+0x310>)
 80003a4:	f242 3228 	movw	r2, #9000	@ 0x2328
 80003a8:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM8->ARR=9000;
 80003aa:	4baf      	ldr	r3, [pc, #700]	@ (8000668 <main+0x314>)
 80003ac:	f242 3228 	movw	r2, #9000	@ 0x2328
 80003b0:	62da      	str	r2, [r3, #44]	@ 0x2c

   DRV_1_ON;
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003b8:	48ac      	ldr	r0, [pc, #688]	@ (800066c <main+0x318>)
 80003ba:	f003 fcd5 	bl	8003d68 <HAL_GPIO_WritePin>
   DRV_2_ON;
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	48a9      	ldr	r0, [pc, #676]	@ (800066c <main+0x318>)
 80003c6:	f003 fccf 	bl	8003d68 <HAL_GPIO_WritePin>
   DRV_3_ON;
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d0:	48a6      	ldr	r0, [pc, #664]	@ (800066c <main+0x318>)
 80003d2:	f003 fcc9 	bl	8003d68 <HAL_GPIO_WritePin>
   DRV_4_ON;
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003dc:	48a3      	ldr	r0, [pc, #652]	@ (800066c <main+0x318>)
 80003de:	f003 fcc3 	bl	8003d68 <HAL_GPIO_WritePin>

   DR_1_OFF;
 80003e2:	2200      	movs	r2, #0
 80003e4:	2108      	movs	r1, #8
 80003e6:	48a1      	ldr	r0, [pc, #644]	@ (800066c <main+0x318>)
 80003e8:	f003 fcbe 	bl	8003d68 <HAL_GPIO_WritePin>
   DR_2_OFF;
 80003ec:	2200      	movs	r2, #0
 80003ee:	2180      	movs	r1, #128	@ 0x80
 80003f0:	489e      	ldr	r0, [pc, #632]	@ (800066c <main+0x318>)
 80003f2:	f003 fcb9 	bl	8003d68 <HAL_GPIO_WritePin>
   DR_3_OFF;
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003fc:	489b      	ldr	r0, [pc, #620]	@ (800066c <main+0x318>)
 80003fe:	f003 fcb3 	bl	8003d68 <HAL_GPIO_WritePin>
   DR_4_OFF;
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000408:	4898      	ldr	r0, [pc, #608]	@ (800066c <main+0x318>)
 800040a:	f003 fcad 	bl	8003d68 <HAL_GPIO_WritePin>
   DR_5_OFF;
 800040e:	2200      	movs	r2, #0
 8000410:	2104      	movs	r1, #4
 8000412:	4892      	ldr	r0, [pc, #584]	@ (800065c <main+0x308>)
 8000414:	f003 fca8 	bl	8003d68 <HAL_GPIO_WritePin>
   DR_6_OFF;
 8000418:	2200      	movs	r2, #0
 800041a:	2102      	movs	r1, #2
 800041c:	4893      	ldr	r0, [pc, #588]	@ (800066c <main+0x318>)
 800041e:	f003 fca3 	bl	8003d68 <HAL_GPIO_WritePin>
   DR_7_OFF;
 8000422:	2200      	movs	r2, #0
 8000424:	2104      	movs	r1, #4
 8000426:	4891      	ldr	r0, [pc, #580]	@ (800066c <main+0x318>)
 8000428:	f003 fc9e 	bl	8003d68 <HAL_GPIO_WritePin>
   DR_8_OFF;
 800042c:	2200      	movs	r2, #0
 800042e:	2120      	movs	r1, #32
 8000430:	488e      	ldr	r0, [pc, #568]	@ (800066c <main+0x318>)
 8000432:	f003 fc99 	bl	8003d68 <HAL_GPIO_WritePin>

   HAL_TIM_Base_Start_IT(&htim2);
 8000436:	488e      	ldr	r0, [pc, #568]	@ (8000670 <main+0x31c>)
 8000438:	f005 faf2 	bl	8005a20 <HAL_TIM_Base_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800043c:	2100      	movs	r1, #0
 800043e:	488c      	ldr	r0, [pc, #560]	@ (8000670 <main+0x31c>)
 8000440:	f005 fde0 	bl	8006004 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000444:	2104      	movs	r1, #4
 8000446:	488a      	ldr	r0, [pc, #552]	@ (8000670 <main+0x31c>)
 8000448:	f005 fddc 	bl	8006004 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800044c:	2108      	movs	r1, #8
 800044e:	4888      	ldr	r0, [pc, #544]	@ (8000670 <main+0x31c>)
 8000450:	f005 fdd8 	bl	8006004 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000454:	210c      	movs	r1, #12
 8000456:	4886      	ldr	r0, [pc, #536]	@ (8000670 <main+0x31c>)
 8000458:	f005 fdd4 	bl	8006004 <HAL_TIM_IC_Start_IT>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 800045c:	2240      	movs	r2, #64	@ 0x40
 800045e:	4985      	ldr	r1, [pc, #532]	@ (8000674 <main+0x320>)
 8000460:	4885      	ldr	r0, [pc, #532]	@ (8000678 <main+0x324>)
 8000462:	f008 fd8c 	bl	8008f7e <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000466:	4b85      	ldr	r3, [pc, #532]	@ (800067c <main+0x328>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b83      	ldr	r3, [pc, #524]	@ (800067c <main+0x328>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f022 0204 	bic.w	r2, r2, #4
 8000474:	601a      	str	r2, [r3, #0]
     HAL_TIM_Base_Start_IT(&htim15);
 8000476:	4882      	ldr	r0, [pc, #520]	@ (8000680 <main+0x32c>)
 8000478:	f005 fad2 	bl	8005a20 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    TIM1->CCR1=rcv_data_reg[0];
 800047c:	4b81      	ldr	r3, [pc, #516]	@ (8000684 <main+0x330>)
 800047e:	881a      	ldrh	r2, [r3, #0]
 8000480:	4b78      	ldr	r3, [pc, #480]	@ (8000664 <main+0x310>)
 8000482:	635a      	str	r2, [r3, #52]	@ 0x34
	  	TIM1->CCR2=rcv_data_reg[1];
 8000484:	4b7f      	ldr	r3, [pc, #508]	@ (8000684 <main+0x330>)
 8000486:	885a      	ldrh	r2, [r3, #2]
 8000488:	4b76      	ldr	r3, [pc, #472]	@ (8000664 <main+0x310>)
 800048a:	639a      	str	r2, [r3, #56]	@ 0x38
	  	TIM1->CCR3=rcv_data_reg[2];
 800048c:	4b7d      	ldr	r3, [pc, #500]	@ (8000684 <main+0x330>)
 800048e:	889a      	ldrh	r2, [r3, #4]
 8000490:	4b74      	ldr	r3, [pc, #464]	@ (8000664 <main+0x310>)
 8000492:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	TIM8->CCR1=rcv_data_reg[3];
 8000494:	4b7b      	ldr	r3, [pc, #492]	@ (8000684 <main+0x330>)
 8000496:	88da      	ldrh	r2, [r3, #6]
 8000498:	4b73      	ldr	r3, [pc, #460]	@ (8000668 <main+0x314>)
 800049a:	635a      	str	r2, [r3, #52]	@ 0x34
	  	TIM1->ARR= rcv_data_reg[4];
 800049c:	4b79      	ldr	r3, [pc, #484]	@ (8000684 <main+0x330>)
 800049e:	891a      	ldrh	r2, [r3, #8]
 80004a0:	4b70      	ldr	r3, [pc, #448]	@ (8000664 <main+0x310>)
 80004a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	  	TIM8->ARR= rcv_data_reg[4];
 80004a4:	4b77      	ldr	r3, [pc, #476]	@ (8000684 <main+0x330>)
 80004a6:	891a      	ldrh	r2, [r3, #8]
 80004a8:	4b6f      	ldr	r3, [pc, #444]	@ (8000668 <main+0x314>)
 80004aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	    Check_USART1_Timeout();
 80004ac:	f001 f822 	bl	80014f4 <Check_USART1_Timeout>
	    data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 80004b0:	4b75      	ldr	r3, [pc, #468]	@ (8000688 <main+0x334>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	486b      	ldr	r0, [pc, #428]	@ (8000664 <main+0x310>)
 80004b8:	f000 fe84 	bl	80011c4 <calculateTimerFrequency>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	4b72      	ldr	r3, [pc, #456]	@ (800068c <main+0x338>)
 80004c2:	801a      	strh	r2, [r3, #0]
	    data_reg[1]=calculateTimerFrequency(TIM8, timerClockFreq);
 80004c4:	4b70      	ldr	r3, [pc, #448]	@ (8000688 <main+0x334>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	4867      	ldr	r0, [pc, #412]	@ (8000668 <main+0x314>)
 80004cc:	f000 fe7a 	bl	80011c4 <calculateTimerFrequency>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b6d      	ldr	r3, [pc, #436]	@ (800068c <main+0x338>)
 80004d6:	805a      	strh	r2, [r3, #2]
	    data_reg[2]=rpm;
 80004d8:	4b6d      	ldr	r3, [pc, #436]	@ (8000690 <main+0x33c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	b29a      	uxth	r2, r3
 80004de:	4b6b      	ldr	r3, [pc, #428]	@ (800068c <main+0x338>)
 80004e0:	809a      	strh	r2, [r3, #4]
	  //  data_reg[4]=adc_values[1];
	  //  data_reg[5]=adc_values[2];
	  //  data_reg[6]=adc_values[3];


	    coil_1= (rcv_data_reg[7]>>1)&0x01;
 80004e2:	4b68      	ldr	r3, [pc, #416]	@ (8000684 <main+0x330>)
 80004e4:	89db      	ldrh	r3, [r3, #14]
 80004e6:	085b      	lsrs	r3, r3, #1
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	bf14      	ite	ne
 80004f2:	2301      	movne	r3, #1
 80004f4:	2300      	moveq	r3, #0
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b66      	ldr	r3, [pc, #408]	@ (8000694 <main+0x340>)
 80004fa:	701a      	strb	r2, [r3, #0]
	    coil_2= (rcv_data_reg[7]>>2)&0x01;
 80004fc:	4b61      	ldr	r3, [pc, #388]	@ (8000684 <main+0x330>)
 80004fe:	89db      	ldrh	r3, [r3, #14]
 8000500:	089b      	lsrs	r3, r3, #2
 8000502:	b29b      	uxth	r3, r3
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	bf14      	ite	ne
 800050c:	2301      	movne	r3, #1
 800050e:	2300      	moveq	r3, #0
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b61      	ldr	r3, [pc, #388]	@ (8000698 <main+0x344>)
 8000514:	701a      	strb	r2, [r3, #0]
	    coil_3= (rcv_data_reg[7]>>3)&0x01;
 8000516:	4b5b      	ldr	r3, [pc, #364]	@ (8000684 <main+0x330>)
 8000518:	89db      	ldrh	r3, [r3, #14]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	b29b      	uxth	r3, r3
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	bf14      	ite	ne
 8000526:	2301      	movne	r3, #1
 8000528:	2300      	moveq	r3, #0
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b5b      	ldr	r3, [pc, #364]	@ (800069c <main+0x348>)
 800052e:	701a      	strb	r2, [r3, #0]
	    coil_4= (rcv_data_reg[7]>>4)&0x01;
 8000530:	4b54      	ldr	r3, [pc, #336]	@ (8000684 <main+0x330>)
 8000532:	89db      	ldrh	r3, [r3, #14]
 8000534:	091b      	lsrs	r3, r3, #4
 8000536:	b29b      	uxth	r3, r3
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b56      	ldr	r3, [pc, #344]	@ (80006a0 <main+0x34c>)
 8000548:	701a      	strb	r2, [r3, #0]
	    if(coil_1){LED_4_ON;DRV_1_ON;}
 800054a:	4b52      	ldr	r3, [pc, #328]	@ (8000694 <main+0x340>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00b      	beq.n	800056a <main+0x216>
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000558:	4840      	ldr	r0, [pc, #256]	@ (800065c <main+0x308>)
 800055a:	f003 fc05 	bl	8003d68 <HAL_GPIO_WritePin>
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000564:	4841      	ldr	r0, [pc, #260]	@ (800066c <main+0x318>)
 8000566:	f003 fbff 	bl	8003d68 <HAL_GPIO_WritePin>
	    if(!coil_1){LED_4_OFF;DRV_1_OFF;}
 800056a:	4b4a      	ldr	r3, [pc, #296]	@ (8000694 <main+0x340>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00b      	beq.n	8000590 <main+0x23c>
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057e:	4837      	ldr	r0, [pc, #220]	@ (800065c <main+0x308>)
 8000580:	f003 fbf2 	bl	8003d68 <HAL_GPIO_WritePin>
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058a:	4838      	ldr	r0, [pc, #224]	@ (800066c <main+0x318>)
 800058c:	f003 fbec 	bl	8003d68 <HAL_GPIO_WritePin>
	    if(coil_2){LED_5_ON;DRV_2_ON;}
 8000590:	4b41      	ldr	r3, [pc, #260]	@ (8000698 <main+0x344>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <main+0x25c>
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800059e:	4833      	ldr	r0, [pc, #204]	@ (800066c <main+0x318>)
 80005a0:	f003 fbe2 	bl	8003d68 <HAL_GPIO_WritePin>
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005aa:	4830      	ldr	r0, [pc, #192]	@ (800066c <main+0x318>)
 80005ac:	f003 fbdc 	bl	8003d68 <HAL_GPIO_WritePin>
	   	if(!coil_2){LED_5_OFF;DRV_2_OFF;}
 80005b0:	4b39      	ldr	r3, [pc, #228]	@ (8000698 <main+0x344>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d00b      	beq.n	80005d6 <main+0x282>
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005c4:	4829      	ldr	r0, [pc, #164]	@ (800066c <main+0x318>)
 80005c6:	f003 fbcf 	bl	8003d68 <HAL_GPIO_WritePin>
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4826      	ldr	r0, [pc, #152]	@ (800066c <main+0x318>)
 80005d2:	f003 fbc9 	bl	8003d68 <HAL_GPIO_WritePin>
	   	if(coil_3){LED_6_ON;DRV_3_ON;}
 80005d6:	4b31      	ldr	r3, [pc, #196]	@ (800069c <main+0x348>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00b      	beq.n	80005f6 <main+0x2a2>
 80005de:	2201      	movs	r2, #1
 80005e0:	2110      	movs	r1, #16
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f003 fbbf 	bl	8003d68 <HAL_GPIO_WritePin>
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f0:	481e      	ldr	r0, [pc, #120]	@ (800066c <main+0x318>)
 80005f2:	f003 fbb9 	bl	8003d68 <HAL_GPIO_WritePin>
	    if(!coil_3){LED_6_OFF;DRV_3_OFF;}
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <main+0x348>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f083 0301 	eor.w	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <main+0x2c8>
 8000604:	2200      	movs	r2, #0
 8000606:	2110      	movs	r1, #16
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f003 fbac 	bl	8003d68 <HAL_GPIO_WritePin>
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000616:	4815      	ldr	r0, [pc, #84]	@ (800066c <main+0x318>)
 8000618:	f003 fba6 	bl	8003d68 <HAL_GPIO_WritePin>
	    if(coil_4){LED_3_ON;DRV_4_ON;}
 800061c:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <main+0x34c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d00b      	beq.n	800063c <main+0x2e8>
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <main+0x308>)
 800062c:	f003 fb9c 	bl	8003d68 <HAL_GPIO_WritePin>
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000636:	480d      	ldr	r0, [pc, #52]	@ (800066c <main+0x318>)
 8000638:	f003 fb96 	bl	8003d68 <HAL_GPIO_WritePin>
	    if(!coil_4){LED_3_OFF;DRV_4_OFF;}
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <main+0x34c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f083 0301 	eor.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d031      	beq.n	80006ae <main+0x35a>
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <main+0x308>)
 8000652:	f003 fb89 	bl	8003d68 <HAL_GPIO_WritePin>
 8000656:	2200      	movs	r2, #0
 8000658:	e024      	b.n	80006a4 <main+0x350>
 800065a:	bf00      	nop
 800065c:	48000400 	.word	0x48000400
 8000660:	48000c00 	.word	0x48000c00
 8000664:	40012c00 	.word	0x40012c00
 8000668:	40013400 	.word	0x40013400
 800066c:	48000800 	.word	0x48000800
 8000670:	20000320 	.word	0x20000320
 8000674:	20000034 	.word	0x20000034
 8000678:	20000450 	.word	0x20000450
 800067c:	200004d8 	.word	0x200004d8
 8000680:	20000404 	.word	0x20000404
 8000684:	20000194 	.word	0x20000194
 8000688:	20000004 	.word	0x20000004
 800068c:	20000174 	.word	0x20000174
 8000690:	200001c4 	.word	0x200001c4
 8000694:	200001b6 	.word	0x200001b6
 8000698:	200001b7 	.word	0x200001b7
 800069c:	200001b8 	.word	0x200001b8
 80006a0:	200001b9 	.word	0x200001b9
 80006a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006a8:	4808      	ldr	r0, [pc, #32]	@ (80006cc <main+0x378>)
 80006aa:	f003 fb5d 	bl	8003d68 <HAL_GPIO_WritePin>

	   // Read_ADC_Values();

if((HAL_GetTick()-moove)>=ROTATE_TIME){rpm=0;}
 80006ae:	f001 feed 	bl	800248c <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <main+0x37c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006be:	f4ff aedd 	bcc.w	800047c <main+0x128>
 80006c2:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <main+0x380>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
	    TIM1->CCR1=rcv_data_reg[0];
 80006c8:	e6d8      	b.n	800047c <main+0x128>
 80006ca:	bf00      	nop
 80006cc:	48000800 	.word	0x48000800
 80006d0:	200001c8 	.word	0x200001c8
 80006d4:	200001c4 	.word	0x200001c4

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09e      	sub	sp, #120	@ 0x78
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006e2:	2228      	movs	r2, #40	@ 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 fc9d 	bl	8009026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	223c      	movs	r2, #60	@ 0x3c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f008 fc8f 	bl	8009026 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000708:	2303      	movs	r3, #3
 800070a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000712:	2301      	movs	r3, #1
 8000714:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	2310      	movs	r3, #16
 800071c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000726:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000728:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800072c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fc62 	bl	8003ffc <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800073e:	f000 ff5b 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000758:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fc8a 	bl	8005078 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 ff45 	bl	80015f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800076e:	f243 03a1 	movw	r3, #12449	@ 0x30a1
 8000772:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4618      	mov	r0, r3
 800078e:	f004 fe95 	bl	80054bc <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000798:	f000 ff2e 	bl	80015f8 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3778      	adds	r7, #120	@ 0x78
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c6:	4b58      	ldr	r3, [pc, #352]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ce:	4b56      	ldr	r3, [pc, #344]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b54      	ldr	r3, [pc, #336]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007da:	4b53      	ldr	r3, [pc, #332]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e0:	4b51      	ldr	r3, [pc, #324]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000928 <MX_ADC1_Init+0x184>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000800:	4b49      	ldr	r3, [pc, #292]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000802:	2208      	movs	r2, #8
 8000804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000806:	4b48      	ldr	r3, [pc, #288]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b46      	ldr	r3, [pc, #280]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000810:	2204      	movs	r2, #4
 8000812:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000814:	4b44      	ldr	r3, [pc, #272]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000816:	2200      	movs	r2, #0
 8000818:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800081a:	4b43      	ldr	r3, [pc, #268]	@ (8000928 <MX_ADC1_Init+0x184>)
 800081c:	2200      	movs	r2, #0
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4841      	ldr	r0, [pc, #260]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000822:	f001 fe63 	bl	80024ec <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 fee4 	bl	80015f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	483b      	ldr	r0, [pc, #236]	@ (8000928 <MX_ADC1_Init+0x184>)
 800083c:	f002 fb20 	bl	8002e80 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000846:	f000 fed7 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800084a:	2301      	movs	r3, #1
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2301      	movs	r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4830      	ldr	r0, [pc, #192]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000868:	f002 f820 	bl	80028ac <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000872:	f000 fec1 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000876:	2302      	movs	r3, #2
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	482a      	ldr	r0, [pc, #168]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000880:	f002 f814 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800088a:	f000 feb5 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800088e:	2303      	movs	r3, #3
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4824      	ldr	r0, [pc, #144]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000898:	f002 f808 	bl	80028ac <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80008a2:	f000 fea9 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	481e      	ldr	r0, [pc, #120]	@ (8000928 <MX_ADC1_Init+0x184>)
 80008b0:	f001 fffc 	bl	80028ac <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80008ba:	f000 fe9d 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008be:	2305      	movs	r3, #5
 80008c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_ADC1_Init+0x184>)
 80008c8:	f001 fff0 	bl	80028ac <HAL_ADC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80008d2:	f000 fe91 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008d6:	2306      	movs	r3, #6
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <MX_ADC1_Init+0x184>)
 80008e0:	f001 ffe4 	bl	80028ac <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80008ea:	f000 fe85 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80008ee:	2307      	movs	r3, #7
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	480c      	ldr	r0, [pc, #48]	@ (8000928 <MX_ADC1_Init+0x184>)
 80008f8:	f001 ffd8 	bl	80028ac <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8000902:	f000 fe79 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000906:	2308      	movs	r3, #8
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <MX_ADC1_Init+0x184>)
 8000910:	f001 ffcc 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800091a:	f000 fe6d 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001cc 	.word	0x200001cc

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C1_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <MX_I2C1_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000968:	f003 fa16 	bl	8003d98 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 fe41 	bl	80015f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800097a:	f003 faa8 	bl	8003ece <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 fe38 	bl	80015f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800098c:	f003 faea 	bl	8003f64 <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 fe2f 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000021c 	.word	0x2000021c
 80009a4:	40005400 	.word	0x40005400
 80009a8:	00201d2b 	.word	0x00201d2b

080009ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <MX_SPI1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009c6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009e2:	2218      	movs	r2, #24
 80009e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_SPI1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_SPI1_Init+0x74>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_SPI1_Init+0x74>)
 8000a0c:	f004 ff06 	bl	800581c <HAL_SPI_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 fdef 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000270 	.word	0x20000270
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09a      	sub	sp, #104	@ 0x68
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	222c      	movs	r2, #44	@ 0x2c
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f008 fadf 	bl	8009026 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a68:	4b50      	ldr	r3, [pc, #320]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a6a:	4a51      	ldr	r2, [pc, #324]	@ (8000bb0 <MX_TIM1_Init+0x188>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b4d      	ldr	r3, [pc, #308]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a7c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b4a      	ldr	r3, [pc, #296]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a88:	4b48      	ldr	r3, [pc, #288]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8e:	4b47      	ldr	r3, [pc, #284]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a94:	4845      	ldr	r0, [pc, #276]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000a96:	f004 ff6c 	bl	8005972 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 fdaa 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aae:	4619      	mov	r1, r3
 8000ab0:	483e      	ldr	r0, [pc, #248]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000ab2:	f005 fe9b 	bl	80067ec <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000abc:	f000 fd9c 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac0:	483a      	ldr	r0, [pc, #232]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000ac2:	f005 f846 	bl	8005b52 <HAL_TIM_PWM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000acc:	f000 fd94 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000adc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4832      	ldr	r0, [pc, #200]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000ae4:	f006 fe1a 	bl	800771c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000aee:	f000 fd83 	bl	80015f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af2:	2360      	movs	r3, #96	@ 0x60
 8000af4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b04:	2304      	movs	r3, #4
 8000b06:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b10:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4824      	ldr	r0, [pc, #144]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000b1c:	f005 fd52 	bl	80065c4 <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000b26:	f000 fd67 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	481e      	ldr	r0, [pc, #120]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000b34:	f005 fd46 	bl	80065c4 <HAL_TIM_PWM_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8000b3e:	f000 fd5b 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b46:	2208      	movs	r2, #8
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4818      	ldr	r0, [pc, #96]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000b4c:	f005 fd3a 	bl	80065c4 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000b56:	f000 fd4f 	bl	80015f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 8000b66:	2396      	movs	r3, #150	@ 0x96
 8000b68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000b90:	f006 fe44 	bl	800781c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8000b9a:	f000 fd2d 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_TIM1_Init+0x184>)
 8000ba0:	f001 fa30 	bl	8002004 <HAL_TIM_MspPostInit>

}
 8000ba4:	bf00      	nop
 8000ba6:	3768      	adds	r7, #104	@ 0x68
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200002d4 	.word	0x200002d4
 8000bb0:	40012c00 	.word	0x40012c00

08000bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	@ 0x30
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be0:	4b45      	ldr	r3, [pc, #276]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000be2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bf4:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c08:	483b      	ldr	r0, [pc, #236]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000c0a:	f004 feb2 	bl	8005972 <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000c14:	f000 fcf0 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	4619      	mov	r1, r3
 8000c24:	4834      	ldr	r0, [pc, #208]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000c26:	f005 fde1 	bl	80067ec <HAL_TIM_ConfigClockSource>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c30:	f000 fce2 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c34:	4830      	ldr	r0, [pc, #192]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000c36:	f005 f983 	bl	8005f40 <HAL_TIM_IC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c40:	f000 fcda 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4829      	ldr	r0, [pc, #164]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000c54:	f006 fd62 	bl	800771c <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000c5e:	f000 fccb 	bl	80015f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c62:	2302      	movs	r3, #2
 8000c64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c66:	2301      	movs	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	481f      	ldr	r0, [pc, #124]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000c7a:	f005 fc07 	bl	800648c <HAL_TIM_IC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000c84:	f000 fcb8 	bl	80015f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2204      	movs	r2, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4817      	ldr	r0, [pc, #92]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000c9c:	f005 fbf6 	bl	800648c <HAL_TIM_IC_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000ca6:	f000 fca7 	bl	80015f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000caa:	2302      	movs	r3, #2
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2208      	movs	r2, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480e      	ldr	r0, [pc, #56]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000cbe:	f005 fbe5 	bl	800648c <HAL_TIM_IC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000cc8:	f000 fc96 	bl	80015f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	220c      	movs	r2, #12
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <MX_TIM2_Init+0x144>)
 8000ce0:	f005 fbd4 	bl	800648c <HAL_TIM_IC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x13a>
  {
    Error_Handler();
 8000cea:	f000 fc85 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	@ 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000320 	.word	0x20000320

08000cfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <MX_TIM3_Init+0x98>)
 8000d1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d40:	4813      	ldr	r0, [pc, #76]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d42:	f004 fe16 	bl	8005972 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d4c:	f000 fc54 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d5e:	f005 fd45 	bl	80067ec <HAL_TIM_ConfigClockSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d68:	f000 fc46 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_TIM3_Init+0x94>)
 8000d7a:	f006 fccf 	bl	800771c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 fc38 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000036c 	.word	0x2000036c
 8000d94:	40000400 	.word	0x40000400

08000d98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b09a      	sub	sp, #104	@ 0x68
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	222c      	movs	r2, #44	@ 0x2c
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f008 f927 	bl	8009026 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dd8:	4b44      	ldr	r3, [pc, #272]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000dda:	4a45      	ldr	r2, [pc, #276]	@ (8000ef0 <MX_TIM8_Init+0x158>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dde:	4b43      	ldr	r3, [pc, #268]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b41      	ldr	r3, [pc, #260]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000;
 8000dea:	4b40      	ldr	r3, [pc, #256]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000dec:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000df0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b3e      	ldr	r3, [pc, #248]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000df8:	4b3c      	ldr	r3, [pc, #240]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e04:	4839      	ldr	r0, [pc, #228]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000e06:	f004 fdb4 	bl	8005972 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e10:	f000 fbf2 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4832      	ldr	r0, [pc, #200]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000e22:	f005 fce3 	bl	80067ec <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e2c:	f000 fbe4 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000e32:	f004 fe8e 	bl	8005b52 <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e3c:	f000 fbdc 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4826      	ldr	r0, [pc, #152]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000e54:	f006 fc62 	bl	800771c <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e5e:	f000 fbcb 	bl	80015f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	2360      	movs	r3, #96	@ 0x60
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e74:	2304      	movs	r3, #4
 8000e76:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e80:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4818      	ldr	r0, [pc, #96]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000e8c:	f005 fb9a 	bl	80065c4 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8000e96:	f000 fbaf 	bl	80015f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ebc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000ed0:	f006 fca4 	bl	800781c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8000eda:	f000 fb8d 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <MX_TIM8_Init+0x154>)
 8000ee0:	f001 f890 	bl	8002004 <HAL_TIM_MspPostInit>

}
 8000ee4:	bf00      	nop
 8000ee6:	3768      	adds	r7, #104	@ 0x68
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200003b8 	.word	0x200003b8
 8000ef0:	40013400 	.word	0x40013400

08000ef4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f14:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <MX_TIM15_Init+0xa0>)
 8000f16:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f2a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f3e:	4814      	ldr	r0, [pc, #80]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f40:	f004 fd17 	bl	8005972 <HAL_TIM_Base_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000f4a:	f000 fb55 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f5c:	f005 fc46 	bl	80067ec <HAL_TIM_ConfigClockSource>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000f66:	f000 fb47 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <MX_TIM15_Init+0x9c>)
 8000f78:	f006 fbd0 	bl	800771c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000f82:	f000 fb39 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000404 	.word	0x20000404
 8000f94:	40014000 	.word	0x40014000

08000f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000f9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fa4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fdc:	f006 fcdf 	bl	800799e <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 fb07 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000450 	.word	0x20000450
 8000ff4:	40013800 	.word	0x40013800

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_DMA_Init+0x48>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <MX_DMA_Init+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <MX_DMA_Init+0x48>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	200e      	movs	r0, #14
 800101c:	f002 f987 	bl	800332e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f002 f9a0 	bl	8003366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	200f      	movs	r0, #15
 800102c:	f002 f97f 	bl	800332e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001030:	200f      	movs	r0, #15
 8001032:	f002 f998 	bl	8003366 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b56      	ldr	r3, [pc, #344]	@ (80011b4 <MX_GPIO_Init+0x170>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a55      	ldr	r2, [pc, #340]	@ (80011b4 <MX_GPIO_Init+0x170>)
 8001060:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b53      	ldr	r3, [pc, #332]	@ (80011b4 <MX_GPIO_Init+0x170>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001072:	4b50      	ldr	r3, [pc, #320]	@ (80011b4 <MX_GPIO_Init+0x170>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a4f      	ldr	r2, [pc, #316]	@ (80011b4 <MX_GPIO_Init+0x170>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b4d      	ldr	r3, [pc, #308]	@ (80011b4 <MX_GPIO_Init+0x170>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b4a      	ldr	r3, [pc, #296]	@ (80011b4 <MX_GPIO_Init+0x170>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a49      	ldr	r2, [pc, #292]	@ (80011b4 <MX_GPIO_Init+0x170>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b47      	ldr	r3, [pc, #284]	@ (80011b4 <MX_GPIO_Init+0x170>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b44      	ldr	r3, [pc, #272]	@ (80011b4 <MX_GPIO_Init+0x170>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a43      	ldr	r2, [pc, #268]	@ (80011b4 <MX_GPIO_Init+0x170>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b41      	ldr	r3, [pc, #260]	@ (80011b4 <MX_GPIO_Init+0x170>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b3e      	ldr	r3, [pc, #248]	@ (80011b4 <MX_GPIO_Init+0x170>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a3d      	ldr	r2, [pc, #244]	@ (80011b4 <MX_GPIO_Init+0x170>)
 80010c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b3b      	ldr	r3, [pc, #236]	@ (80011b4 <MX_GPIO_Init+0x170>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|DRV_6_Pin
 80010d2:	2200      	movs	r2, #0
 80010d4:	f64f 31ae 	movw	r1, #64430	@ 0xfbae
 80010d8:	4837      	ldr	r0, [pc, #220]	@ (80011b8 <MX_GPIO_Init+0x174>)
 80010da:	f002 fe45 	bl	8003d68 <HAL_GPIO_WritePin>
                          |DRV_7_Pin|DRV_1_Pin|DRV_8_Pin|DRV_2_Pin
                          |DRV_3_Pin|DRV_4_Pin|LED_5_Pin|PORT_1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2110      	movs	r1, #16
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e6:	f002 fe3f 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|DRV_5_Pin|LED_1_Pin
 80010ea:	2200      	movs	r2, #0
 80010ec:	f647 0107 	movw	r1, #30727	@ 0x7807
 80010f0:	4832      	ldr	r0, [pc, #200]	@ (80011bc <MX_GPIO_Init+0x178>)
 80010f2:	f002 fe39 	bl	8003d68 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECT_GPIO_Port, DIRECT_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	4831      	ldr	r0, [pc, #196]	@ (80011c0 <MX_GPIO_Init+0x17c>)
 80010fc:	f002 fe34 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT_2_EN_Pin PORT_3_EN_Pin PORT_4_EN_Pin DRV_6_Pin
                           DRV_7_Pin DRV_1_Pin DRV_8_Pin DRV_2_Pin
                           DRV_3_Pin DRV_4_Pin LED_5_Pin PORT_1_EN_Pin */
  GPIO_InitStruct.Pin = PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|DRV_6_Pin
 8001100:	f64f 33ae 	movw	r3, #64430	@ 0xfbae
 8001104:	617b      	str	r3, [r7, #20]
                          |DRV_7_Pin|DRV_1_Pin|DRV_8_Pin|DRV_2_Pin
                          |DRV_3_Pin|DRV_4_Pin|LED_5_Pin|PORT_1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4827      	ldr	r0, [pc, #156]	@ (80011b8 <MX_GPIO_Init+0x174>)
 800111a:	f002 fbcf 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_6_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin;
 800111e:	2310      	movs	r3, #16
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_6_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001138:	f002 fbc0 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_A_Pin HAL_B_Pin HAL_C_Pin */
  GPIO_InitStruct.Pin = HAL_A_Pin|HAL_B_Pin|HAL_C_Pin;
 800113c:	23e0      	movs	r3, #224	@ 0xe0
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001140:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001154:	f002 fbb2 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INT_Pin */
  GPIO_InitStruct.Pin = UI_INT_Pin;
 8001158:	2310      	movs	r3, #16
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_INT_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <MX_GPIO_Init+0x174>)
 800116e:	f002 fba5 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin DRV_5_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|DRV_5_Pin|LED_1_Pin
 8001172:	f647 0307 	movw	r3, #30727	@ 0x7807
 8001176:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <MX_GPIO_Init+0x178>)
 800118c:	f002 fb96 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin;
 8001190:	2304      	movs	r3, #4
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECT_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <MX_GPIO_Init+0x17c>)
 80011a8:	f002 fb88 	bl	80038bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	@ 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000400 	.word	0x48000400
 80011c0:	48000c00 	.word	0x48000c00

080011c4 <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */

// Функция расчёта частоты таймера
uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d2:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	b29b      	uxth	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011fc:	f040 80de 	bne.w	80013bc <HAL_TIM_IC_CaptureCallback+0x1d0>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7f1b      	ldrb	r3, [r3, #28]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d12b      	bne.n	8001260 <HAL_TIM_IC_CaptureCallback+0x74>
        {

             LED_2_ON;
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800120e:	486d      	ldr	r0, [pc, #436]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001210:	f002 fdaa 	bl	8003d68 <HAL_GPIO_WritePin>
          //  period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);

          //  rpm= 1080000000/period;
         //   f=270000000/period;

             DR_1_OFF;
 8001214:	2200      	movs	r2, #0
 8001216:	2108      	movs	r1, #8
 8001218:	486b      	ldr	r0, [pc, #428]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800121a:	f002 fda5 	bl	8003d68 <HAL_GPIO_WritePin>
             DR_4_OFF;
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001224:	4868      	ldr	r0, [pc, #416]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001226:	f002 fd9f 	bl	8003d68 <HAL_GPIO_WritePin>
             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800122a:	2100      	movs	r1, #0
 800122c:	4867      	ldr	r0, [pc, #412]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800122e:	f006 fa17 	bl	8007660 <HAL_TIMEx_PWMN_Stop>
             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001232:	2104      	movs	r1, #4
 8001234:	4865      	ldr	r0, [pc, #404]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001236:	f004 fded 	bl	8005e14 <HAL_TIM_PWM_Stop>


             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800123a:	2104      	movs	r1, #4
 800123c:	4863      	ldr	r0, [pc, #396]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800123e:	f006 f95b 	bl	80074f8 <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001242:	2100      	movs	r1, #0
 8001244:	4861      	ldr	r0, [pc, #388]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001246:	f004 fce5 	bl	8005c14 <HAL_TIM_PWM_Start>
             DR_2_ON;
 800124a:	2201      	movs	r2, #1
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	485e      	ldr	r0, [pc, #376]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001250:	f002 fd8a 	bl	8003d68 <HAL_GPIO_WritePin>
             DR_3_ON;
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800125a:	485b      	ldr	r0, [pc, #364]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800125c:	f002 fd84 	bl	8003d68 <HAL_GPIO_WritePin>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7f1b      	ldrb	r3, [r3, #28]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d12b      	bne.n	80012c0 <HAL_TIM_IC_CaptureCallback+0xd4>
        {
             LED_2_OFF;
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800126e:	4855      	ldr	r0, [pc, #340]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001270:	f002 fd7a 	bl	8003d68 <HAL_GPIO_WritePin>

             DR_2_OFF;
 8001274:	2200      	movs	r2, #0
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	4853      	ldr	r0, [pc, #332]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800127a:	f002 fd75 	bl	8003d68 <HAL_GPIO_WritePin>
             DR_3_OFF;
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001284:	4850      	ldr	r0, [pc, #320]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001286:	f002 fd6f 	bl	8003d68 <HAL_GPIO_WritePin>

             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800128a:	2100      	movs	r1, #0
 800128c:	484f      	ldr	r0, [pc, #316]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800128e:	f004 fdc1 	bl	8005e14 <HAL_TIM_PWM_Stop>
             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001292:	2104      	movs	r1, #4
 8001294:	484d      	ldr	r0, [pc, #308]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001296:	f006 f9e3 	bl	8007660 <HAL_TIMEx_PWMN_Stop>

             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800129a:	2100      	movs	r1, #0
 800129c:	484b      	ldr	r0, [pc, #300]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800129e:	f006 f92b 	bl	80074f8 <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012a2:	2104      	movs	r1, #4
 80012a4:	4849      	ldr	r0, [pc, #292]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80012a6:	f004 fcb5 	bl	8005c14 <HAL_TIM_PWM_Start>

             DR_1_ON;
 80012aa:	2201      	movs	r2, #1
 80012ac:	2108      	movs	r1, #8
 80012ae:	4846      	ldr	r0, [pc, #280]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80012b0:	f002 fd5a 	bl	8003d68 <HAL_GPIO_WritePin>
             DR_4_ON;
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ba:	4843      	ldr	r0, [pc, #268]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80012bc:	f002 fd54 	bl	8003d68 <HAL_GPIO_WritePin>
           //  moove = HAL_GetTick();

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7f1b      	ldrb	r3, [r3, #28]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d146      	bne.n	8001356 <HAL_TIM_IC_CaptureCallback+0x16a>
        {
          LED_3_ON;
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ce:	483d      	ldr	r0, [pc, #244]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80012d0:	f002 fd4a 	bl	8003d68 <HAL_GPIO_WritePin>
          period = 0;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
          TIM2->CNT = 0;
 80012da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	@ 0x24
          period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4);
 80012e2:	210c      	movs	r1, #12
 80012e4:	483b      	ldr	r0, [pc, #236]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80012e6:	f005 fb4b 	bl	8006980 <HAL_TIM_ReadCapturedValue>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a38      	ldr	r2, [pc, #224]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80012ee:	6013      	str	r3, [r2, #0]

          rpm= 1080000000/period;
 80012f0:	4b37      	ldr	r3, [pc, #220]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a38      	ldr	r2, [pc, #224]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4a38      	ldr	r2, [pc, #224]	@ (80013dc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80012fc:	6013      	str	r3, [r2, #0]
          f=270000000/period;
 80012fe:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a37      	ldr	r2, [pc, #220]	@ (80013e0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800130c:	801a      	strh	r2, [r3, #0]

          DR_6_OFF;
 800130e:	2200      	movs	r2, #0
 8001310:	2102      	movs	r1, #2
 8001312:	482d      	ldr	r0, [pc, #180]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001314:	f002 fd28 	bl	8003d68 <HAL_GPIO_WritePin>
          DR_7_OFF;
 8001318:	2200      	movs	r2, #0
 800131a:	2104      	movs	r1, #4
 800131c:	482a      	ldr	r0, [pc, #168]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800131e:	f002 fd23 	bl	8003d68 <HAL_GPIO_WritePin>
          HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001322:	2100      	movs	r1, #0
 8001324:	4830      	ldr	r0, [pc, #192]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001326:	f006 f99b 	bl	8007660 <HAL_TIMEx_PWMN_Stop>
          HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800132a:	2108      	movs	r1, #8
 800132c:	4827      	ldr	r0, [pc, #156]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800132e:	f004 fd71 	bl	8005e14 <HAL_TIM_PWM_Stop>

          HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001332:	2108      	movs	r1, #8
 8001334:	4825      	ldr	r0, [pc, #148]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001336:	f006 f8df 	bl	80074f8 <HAL_TIMEx_PWMN_Start>
          HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800133a:	2100      	movs	r1, #0
 800133c:	482a      	ldr	r0, [pc, #168]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800133e:	f004 fc69 	bl	8005c14 <HAL_TIM_PWM_Start>

          DR_5_ON;
 8001342:	2201      	movs	r2, #1
 8001344:	2104      	movs	r1, #4
 8001346:	481f      	ldr	r0, [pc, #124]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001348:	f002 fd0e 	bl	8003d68 <HAL_GPIO_WritePin>
          DR_8_ON;
 800134c:	2201      	movs	r2, #1
 800134e:	2120      	movs	r1, #32
 8001350:	481d      	ldr	r0, [pc, #116]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001352:	f002 fd09 	bl	8003d68 <HAL_GPIO_WritePin>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7f1b      	ldrb	r3, [r3, #28]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d12e      	bne.n	80013bc <HAL_TIM_IC_CaptureCallback+0x1d0>
        {
           LED_3_OFF;
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001364:	4817      	ldr	r0, [pc, #92]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001366:	f002 fcff 	bl	8003d68 <HAL_GPIO_WritePin>

           DR_5_OFF;
 800136a:	2200      	movs	r2, #0
 800136c:	2104      	movs	r1, #4
 800136e:	4815      	ldr	r0, [pc, #84]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001370:	f002 fcfa 	bl	8003d68 <HAL_GPIO_WritePin>
           DR_8_OFF;
 8001374:	2200      	movs	r2, #0
 8001376:	2120      	movs	r1, #32
 8001378:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800137a:	f002 fcf5 	bl	8003d68 <HAL_GPIO_WritePin>

           HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800137e:	2108      	movs	r1, #8
 8001380:	4812      	ldr	r0, [pc, #72]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001382:	f006 f96d 	bl	8007660 <HAL_TIMEx_PWMN_Stop>
           HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001386:	2100      	movs	r1, #0
 8001388:	4817      	ldr	r0, [pc, #92]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800138a:	f004 fd43 	bl	8005e14 <HAL_TIM_PWM_Stop>

           HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800138e:	2108      	movs	r1, #8
 8001390:	480e      	ldr	r0, [pc, #56]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001392:	f004 fc3f 	bl	8005c14 <HAL_TIM_PWM_Start>
           HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001396:	2100      	movs	r1, #0
 8001398:	4813      	ldr	r0, [pc, #76]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800139a:	f006 f8ad 	bl	80074f8 <HAL_TIMEx_PWMN_Start>

           DR_6_ON;
 800139e:	2201      	movs	r2, #1
 80013a0:	2102      	movs	r1, #2
 80013a2:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80013a4:	f002 fce0 	bl	8003d68 <HAL_GPIO_WritePin>
           DR_7_ON;
 80013a8:	2201      	movs	r2, #1
 80013aa:	2104      	movs	r1, #4
 80013ac:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80013ae:	f002 fcdb 	bl	8003d68 <HAL_GPIO_WritePin>

           moove = HAL_GetTick();
 80013b2:	f001 f86b 	bl	800248c <HAL_GetTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x200>)
 80013ba:	6013      	str	r3, [r2, #0]
        }
    }
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800
 80013cc:	200002d4 	.word	0x200002d4
 80013d0:	200001bc 	.word	0x200001bc
 80013d4:	20000320 	.word	0x20000320
 80013d8:	405f7e00 	.word	0x405f7e00
 80013dc:	200001c4 	.word	0x200001c4
 80013e0:	1017df80 	.word	0x1017df80
 80013e4:	200001c0 	.word	0x200001c0
 80013e8:	200003b8 	.word	0x200003b8
 80013ec:	200001c8 	.word	0x200001c8

080013f0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]


	    RX_2;
 80013f8:	2200      	movs	r2, #0
 80013fa:	2104      	movs	r1, #4
 80013fc:	4814      	ldr	r0, [pc, #80]	@ (8001450 <HAL_UART_TxCpltCallback+0x60>)
 80013fe:	f002 fcb3 	bl	8003d68 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 8001402:	f001 f843 	bl	800248c <HAL_GetTick>
 8001406:	4603      	mov	r3, r0
 8001408:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <HAL_UART_TxCpltCallback+0x64>)
 800140a:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 800140c:	2240      	movs	r2, #64	@ 0x40
 800140e:	4912      	ldr	r1, [pc, #72]	@ (8001458 <HAL_UART_TxCpltCallback+0x68>)
 8001410:	4812      	ldr	r0, [pc, #72]	@ (800145c <HAL_UART_TxCpltCallback+0x6c>)
 8001412:	f007 fdb4 	bl	8008f7e <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_UART_TxCpltCallback+0x6c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_UART_TxCpltCallback+0x6c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0210 	orr.w	r2, r2, #16
 8001424:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_UART_TxCpltCallback+0x70>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_UART_TxCpltCallback+0x70>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0204 	bic.w	r2, r2, #4
 8001434:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start_IT(&htim15);
 8001436:	480b      	ldr	r0, [pc, #44]	@ (8001464 <HAL_UART_TxCpltCallback+0x74>)
 8001438:	f004 faf2 	bl	8005a20 <HAL_TIM_Base_Start_IT>
	    LED_1_OFF;
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001442:	4809      	ldr	r0, [pc, #36]	@ (8001468 <HAL_UART_TxCpltCallback+0x78>)
 8001444:	f002 fc90 	bl	8003d68 <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	48000c00 	.word	0x48000c00
 8001454:	20000030 	.word	0x20000030
 8001458:	20000034 	.word	0x20000034
 800145c:	20000450 	.word	0x20000450
 8001460:	200004d8 	.word	0x200004d8
 8001464:	20000404 	.word	0x20000404
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <HAL_UARTEx_RxEventCallback+0x64>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d121      	bne.n	80014c6 <HAL_UARTEx_RxEventCallback+0x5a>
	{

        LED_1_ON;
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001488:	4812      	ldr	r0, [pc, #72]	@ (80014d4 <HAL_UARTEx_RxEventCallback+0x68>)
 800148a:	f002 fc6d 	bl	8003d68 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim15);
 800148e:	4812      	ldr	r0, [pc, #72]	@ (80014d8 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001490:	f004 fb30 	bl	8005af4 <HAL_TIM_Base_Stop_IT>
		lastActivityTime = HAL_GetTick();
 8001494:	f000 fffa 	bl	800248c <HAL_GetTick>
 8001498:	4603      	mov	r3, r0
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <HAL_UARTEx_RxEventCallback+0x70>)
 800149c:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_UARTEx_RxEventCallback+0x74>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_UARTEx_RxEventCallback+0x74>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0210 	bic.w	r2, r2, #16
 80014ac:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <HAL_UARTEx_RxEventCallback+0x78>)
 80014b0:	f002 f86f 	bl	8003592 <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	4a0c      	ldr	r2, [pc, #48]	@ (80014e8 <HAL_UARTEx_RxEventCallback+0x7c>)
 80014b8:	490c      	ldr	r1, [pc, #48]	@ (80014ec <HAL_UARTEx_RxEventCallback+0x80>)
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <HAL_UARTEx_RxEventCallback+0x84>)
 80014bc:	f7fe fe84 	bl	80001c8 <Registers_handler>
	    HAL_TIM_Base_Start_IT(&htim15);
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_UARTEx_RxEventCallback+0x6c>)
 80014c2:	f004 faad 	bl	8005a20 <HAL_TIM_Base_Start_IT>
	}
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40013800 	.word	0x40013800
 80014d4:	48000400 	.word	0x48000400
 80014d8:	20000404 	.word	0x20000404
 80014dc:	20000030 	.word	0x20000030
 80014e0:	20000450 	.word	0x20000450
 80014e4:	200004d8 	.word	0x200004d8
 80014e8:	20000194 	.word	0x20000194
 80014ec:	20000174 	.word	0x20000174
 80014f0:	20000034 	.word	0x20000034

080014f4 <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 80014f8:	f000 ffc8 	bl	800248c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <Check_USART1_Timeout+0x34>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001508:	d30c      	bcc.n	8001524 <Check_USART1_Timeout+0x30>
     {

         Reset_USART1();
 800150a:	f000 f813 	bl	8001534 <Reset_USART1>
         RX_2;
 800150e:	2200      	movs	r2, #0
 8001510:	2104      	movs	r1, #4
 8001512:	4806      	ldr	r0, [pc, #24]	@ (800152c <Check_USART1_Timeout+0x38>)
 8001514:	f002 fc28 	bl	8003d68 <HAL_GPIO_WritePin>
         LED_1_OFF;
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800151e:	4804      	ldr	r0, [pc, #16]	@ (8001530 <Check_USART1_Timeout+0x3c>)
 8001520:	f002 fc22 	bl	8003d68 <HAL_GPIO_WritePin>
     }
 }
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000030 	.word	0x20000030
 800152c:	48000c00 	.word	0x48000c00
 8001530:	48000400 	.word	0x48000400

08001534 <Reset_USART1>:



void Reset_USART1(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
    LED_1_ON;
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800153e:	4827      	ldr	r0, [pc, #156]	@ (80015dc <Reset_USART1+0xa8>)
 8001540:	f002 fc12 	bl	8003d68 <HAL_GPIO_WritePin>

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8001544:	4826      	ldr	r0, [pc, #152]	@ (80015e0 <Reset_USART1+0xac>)
 8001546:	f006 fb31 	bl	8007bac <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <Reset_USART1+0xb0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <Reset_USART1+0x24>
        HAL_DMA_Abort(&hdma_usart1_rx);
 8001552:	4824      	ldr	r0, [pc, #144]	@ (80015e4 <Reset_USART1+0xb0>)
 8001554:	f002 f81d 	bl	8003592 <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <Reset_USART1+0xb4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <Reset_USART1+0x32>
        HAL_DMA_Abort(&hdma_usart1_tx);
 8001560:	4821      	ldr	r0, [pc, #132]	@ (80015e8 <Reset_USART1+0xb4>)
 8001562:	f002 f816 	bl	8003592 <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <Reset_USART1+0xac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <Reset_USART1+0xac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001574:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <Reset_USART1+0xac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2208      	movs	r2, #8
 800157c:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <Reset_USART1+0xac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2202      	movs	r2, #2
 8001584:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <Reset_USART1+0xb8>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <Reset_USART1+0xb8>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001590:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1); // Задержка для завершения сброса
 8001592:	2001      	movs	r0, #1
 8001594:	f000 ff86 	bl	80024a4 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <Reset_USART1+0xb8>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <Reset_USART1+0xb8>)
 800159e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015a2:	60d3      	str	r3, [r2, #12]

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 80015a4:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <Reset_USART1+0xac>)
 80015a6:	f006 fa48 	bl	8007a3a <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 80015aa:	f7ff fcf5 	bl	8000f98 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 80015ae:	f7ff fd23 	bl	8000ff8 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80015b2:	2240      	movs	r2, #64	@ 0x40
 80015b4:	490e      	ldr	r1, [pc, #56]	@ (80015f0 <Reset_USART1+0xbc>)
 80015b6:	480a      	ldr	r0, [pc, #40]	@ (80015e0 <Reset_USART1+0xac>)
 80015b8:	f007 fce1 	bl	8008f7e <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <Reset_USART1+0xb0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <Reset_USART1+0xb0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0204 	bic.w	r2, r2, #4
 80015ca:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 80015cc:	f000 ff5e 	bl	800248c <HAL_GetTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <Reset_USART1+0xc0>)
 80015d4:	6013      	str	r3, [r2, #0]


}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	48000400 	.word	0x48000400
 80015e0:	20000450 	.word	0x20000450
 80015e4:	200004d8 	.word	0x200004d8
 80015e8:	2000051c 	.word	0x2000051c
 80015ec:	40021000 	.word	0x40021000
 80015f0:	20000034 	.word	0x20000034
 80015f4:	20000030 	.word	0x20000030

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <Error_Handler+0x8>

08001604 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8001610:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001614:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	74fb      	strb	r3, [r7, #19]
 800161a:	e023      	b.n	8001664 <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 800161c:	7cfb      	ldrb	r3, [r7, #19]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4053      	eors	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 800162c:	2301      	movs	r3, #1
 800162e:	74bb      	strb	r3, [r7, #18]
 8001630:	e012      	b.n	8001658 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	617b      	str	r3, [r7, #20]
			if (flag)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001652:	7cbb      	ldrb	r3, [r7, #18]
 8001654:	3301      	adds	r3, #1
 8001656:	74bb      	strb	r3, [r7, #18]
 8001658:	7cbb      	ldrb	r3, [r7, #18]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d9e9      	bls.n	8001632 <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 800165e:	7cfb      	ldrb	r3, [r7, #19]
 8001660:	3301      	adds	r3, #1
 8001662:	74fb      	strb	r3, [r7, #19]
 8001664:	7cfa      	ldrb	r2, [r7, #19]
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3d7      	bcc.n	800161c <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	b29b      	uxth	r3, r3
 8001680:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	b29b      	uxth	r3, r3

}
 8001686:	4618      	mov	r0, r3
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	4613      	mov	r3, r2
 80016a0:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4619      	mov	r1, r3
 80016a6:	68b8      	ldr	r0, [r7, #8]
 80016a8:	f7ff ffac 	bl	8001604 <calcCRC16ModBus>
 80016ac:	4603      	mov	r3, r0
 80016ae:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	3301      	adds	r3, #1
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	8afa      	ldrh	r2, [r7, #22]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80016be:	8afb      	ldrh	r3, [r7, #22]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	b299      	uxth	r1, r3
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4413      	add	r3, r2
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]

    TX_2;
 80016ce:	2201      	movs	r2, #1
 80016d0:	2104      	movs	r1, #4
 80016d2:	480e      	ldr	r0, [pc, #56]	@ (800170c <sendModBusRequest+0x78>)
 80016d4:	f002 fb48 	bl	8003d68 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3302      	adds	r3, #2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f006 f9e5 	bl	8007ab4 <HAL_UART_Transmit_DMA>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <sendModBusRequest+0x6c>

    	LED_1_OFF;
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f6:	4806      	ldr	r0, [pc, #24]	@ (8001710 <sendModBusRequest+0x7c>)
 80016f8:	f002 fb36 	bl	8003d68 <HAL_GPIO_WritePin>

	        Error_Handler();
 80016fc:	f7ff ff7c 	bl	80015f8 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	48000c00 	.word	0x48000c00
 8001710:	48000400 	.word	0x48000400

08001714 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
 8001720:	4613      	mov	r3, r2
 8001722:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <sendError+0x5c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001730:	b2db      	uxtb	r3, r3
 8001732:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 8001734:	78bb      	ldrb	r3, [r7, #2]
 8001736:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2103      	movs	r1, #3
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff60 	bl	8001604 <calcCRC16ModBus>
 8001744:	4603      	mov	r3, r0
 8001746:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	2205      	movs	r2, #5
 800175e:	4619      	mov	r1, r3
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff97 	bl	8001694 <sendModBusRequest>

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000000 	.word	0x20000000

08001774 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <handleReadHoldingRegs+0xe0>)
 8001780:	789b      	ldrb	r3, [r3, #2]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <handleReadHoldingRegs+0xe0>)
 8001788:	78db      	ldrb	r3, [r3, #3]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21b      	sxth	r3, r3
 8001790:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <handleReadHoldingRegs+0xe0>)
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <handleReadHoldingRegs+0xe0>)
 800179c:	795b      	ldrb	r3, [r3, #5]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 80017a6:	8afa      	ldrh	r2, [r7, #22]
 80017a8:	897b      	ldrh	r3, [r7, #10]
 80017aa:	4413      	add	r3, r2
 80017ac:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 80017ae:	897b      	ldrh	r3, [r7, #10]
 80017b0:	2b7d      	cmp	r3, #125	@ 0x7d
 80017b2:	d905      	bls.n	80017c0 <handleReadHoldingRegs+0x4c>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80017b4:	2103      	movs	r1, #3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fa1e 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 80017bc:	2300      	movs	r3, #0
 80017be:	e045      	b.n	800184c <handleReadHoldingRegs+0xd8>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80017c0:	893b      	ldrh	r3, [r7, #8]
 80017c2:	2b3c      	cmp	r3, #60	@ 0x3c
 80017c4:	d905      	bls.n	80017d2 <handleReadHoldingRegs+0x5e>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80017c6:	2102      	movs	r1, #2
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fa15 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e03c      	b.n	800184c <handleReadHoldingRegs+0xd8>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <handleReadHoldingRegs+0xe4>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <handleReadHoldingRegs+0xe8>)
 80017d8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80017da:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <handleReadHoldingRegs+0xe0>)
 80017dc:	785a      	ldrb	r2, [r3, #1]
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <handleReadHoldingRegs+0xe8>)
 80017e0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <handleReadHoldingRegs+0xe8>)
 80017ec:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80017ee:	2303      	movs	r3, #3
 80017f0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e01d      	b.n	8001834 <handleReadHoldingRegs+0xc0>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80017f8:	8afb      	ldrh	r3, [r7, #22]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b299      	uxth	r1, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	613a      	str	r2, [r7, #16]
 800180c:	b2c9      	uxtb	r1, r1
 800180e:	4a13      	ldr	r2, [pc, #76]	@ (800185c <handleReadHoldingRegs+0xe8>)
 8001810:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001812:	8afb      	ldrh	r3, [r7, #22]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	8819      	ldrh	r1, [r3, #0]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	613a      	str	r2, [r7, #16]
 8001822:	b2c9      	uxtb	r1, r1
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <handleReadHoldingRegs+0xe8>)
 8001826:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001828:	8afb      	ldrh	r3, [r7, #22]
 800182a:	3301      	adds	r3, #1
 800182c:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3301      	adds	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	897b      	ldrh	r3, [r7, #10]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbdd      	blt.n	80017f8 <handleReadHoldingRegs+0x84>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4906      	ldr	r1, [pc, #24]	@ (800185c <handleReadHoldingRegs+0xe8>)
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff25 	bl	8001694 <sendModBusRequest>
	return 1;
 800184a:	2301      	movs	r3, #1

}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000034 	.word	0x20000034
 8001858:	20000000 	.word	0x20000000
 800185c:	20000074 	.word	0x20000074

08001860 <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800186a:	4b36      	ldr	r3, [pc, #216]	@ (8001944 <handleReadInputRegs+0xe4>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <handleReadInputRegs+0xe4>)
 8001874:	78db      	ldrb	r3, [r3, #3]
 8001876:	b21b      	sxth	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b21b      	sxth	r3, r3
 800187c:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <handleReadInputRegs+0xe4>)
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b21a      	sxth	r2, r3
 8001886:	4b2f      	ldr	r3, [pc, #188]	@ (8001944 <handleReadInputRegs+0xe4>)
 8001888:	795b      	ldrb	r3, [r3, #5]
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21b      	sxth	r3, r3
 8001890:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 8001892:	8afa      	ldrh	r2, [r7, #22]
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	2b7d      	cmp	r3, #125	@ 0x7d
 80018a2:	d905      	bls.n	80018b0 <handleReadInputRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80018a4:	2103      	movs	r1, #3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f9a6 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e045      	b.n	800193c <handleReadInputRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80018b0:	893b      	ldrh	r3, [r7, #8]
 80018b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80018b4:	d905      	bls.n	80018c2 <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80018b6:	2102      	movs	r1, #2
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f99d 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 80018be:	2300      	movs	r3, #0
 80018c0:	e03c      	b.n	800193c <handleReadInputRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <handleReadInputRegs+0xe8>)
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <handleReadInputRegs+0xec>)
 80018c8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <handleReadInputRegs+0xe4>)
 80018cc:	785a      	ldrb	r2, [r3, #1]
 80018ce:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <handleReadInputRegs+0xec>)
 80018d0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <handleReadInputRegs+0xec>)
 80018dc:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80018de:	2303      	movs	r3, #3
 80018e0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e01d      	b.n	8001924 <handleReadInputRegs+0xc4>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80018e8:	8afb      	ldrh	r3, [r7, #22]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b299      	uxth	r1, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	613a      	str	r2, [r7, #16]
 80018fc:	b2c9      	uxtb	r1, r1
 80018fe:	4a13      	ldr	r2, [pc, #76]	@ (800194c <handleReadInputRegs+0xec>)
 8001900:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 8001902:	8afb      	ldrh	r3, [r7, #22]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	8819      	ldrh	r1, [r3, #0]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	613a      	str	r2, [r7, #16]
 8001912:	b2c9      	uxtb	r1, r1
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <handleReadInputRegs+0xec>)
 8001916:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001918:	8afb      	ldrh	r3, [r7, #22]
 800191a:	3301      	adds	r3, #1
 800191c:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	897b      	ldrh	r3, [r7, #10]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbdd      	blt.n	80018e8 <handleReadInputRegs+0x88>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4906      	ldr	r1, [pc, #24]	@ (800194c <handleReadInputRegs+0xec>)
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fead 	bl	8001694 <sendModBusRequest>
	return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000034 	.word	0x20000034
 8001948:	20000000 	.word	0x20000000
 800194c:	20000074 	.word	0x20000074

08001950 <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <handleReadCoils+0xc4>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b2c      	ldr	r3, [pc, #176]	@ (8001a14 <handleReadCoils+0xc4>)
 8001964:	78db      	ldrb	r3, [r3, #3]
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21b      	sxth	r3, r3
 800196c:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 800196e:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <handleReadCoils+0xc4>)
 8001970:	791b      	ldrb	r3, [r3, #4]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b21a      	sxth	r2, r3
 8001976:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <handleReadCoils+0xc4>)
 8001978:	795b      	ldrb	r3, [r3, #5]
 800197a:	b21b      	sxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b21b      	sxth	r3, r3
 8001980:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 8001982:	89bb      	ldrh	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <handleReadCoils+0x40>
 8001988:	89bb      	ldrh	r3, [r7, #12]
 800198a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800198e:	d905      	bls.n	800199c <handleReadCoils+0x4c>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001990:	2103      	movs	r1, #3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f930 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 8001998:	2300      	movs	r3, #0
 800199a:	e037      	b.n	8001a0c <handleReadCoils+0xbc>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 800199c:	89fa      	ldrh	r2, [r7, #14]
 800199e:	89bb      	ldrh	r3, [r7, #12]
 80019a0:	4413      	add	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80019a8:	897b      	ldrh	r3, [r7, #10]
 80019aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80019ac:	d905      	bls.n	80019ba <handleReadCoils+0x6a>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80019ae:	2102      	movs	r1, #2
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f921 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e028      	b.n	8001a0c <handleReadCoils+0xbc>
	}
	memset (txFrame, '\0', 256);
 80019ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019be:	2100      	movs	r1, #0
 80019c0:	4815      	ldr	r0, [pc, #84]	@ (8001a18 <handleReadCoils+0xc8>)
 80019c2:	f007 fb30 	bl	8009026 <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <handleReadCoils+0xcc>)
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <handleReadCoils+0xc8>)
 80019cc:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <handleReadCoils+0xc4>)
 80019d0:	785a      	ldrb	r2, [r3, #1]
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <handleReadCoils+0xc8>)
 80019d4:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 80019d6:	89bb      	ldrh	r3, [r7, #12]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	89ba      	ldrh	r2, [r7, #12]
 80019e0:	f002 0207 	and.w	r2, r2, #7
 80019e4:	b292      	uxth	r2, r2
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2201      	movne	r2, #1
 80019ec:	2200      	moveq	r2, #0
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	4413      	add	r3, r2
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <handleReadCoils+0xc8>)
 80019f6:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <handleReadCoils+0xc8>)
 80019fa:	789b      	ldrb	r3, [r3, #2]
 80019fc:	3303      	adds	r3, #3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4905      	ldr	r1, [pc, #20]	@ (8001a18 <handleReadCoils+0xc8>)
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fe45 	bl	8001694 <sendModBusRequest>
	return 1;
 8001a0a:	2301      	movs	r3, #1

}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000034 	.word	0x20000034
 8001a18:	20000074 	.word	0x20000074
 8001a1c:	20000000 	.word	0x20000000

08001a20 <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001a2a:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <handleReadDiscreteInputs+0xcc>)
 8001a2c:	789b      	ldrb	r3, [r3, #2]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <handleReadDiscreteInputs+0xcc>)
 8001a34:	78db      	ldrb	r3, [r3, #3]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <handleReadDiscreteInputs+0xcc>)
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <handleReadDiscreteInputs+0xcc>)
 8001a48:	795b      	ldrb	r3, [r3, #5]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <handleReadDiscreteInputs+0x40>
 8001a58:	89bb      	ldrh	r3, [r7, #12]
 8001a5a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a5e:	d905      	bls.n	8001a6c <handleReadDiscreteInputs+0x4c>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 8001a60:	2103      	movs	r1, #3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8c8 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e03a      	b.n	8001ae2 <handleReadDiscreteInputs+0xc2>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001a6c:	89fa      	ldrh	r2, [r7, #14]
 8001a6e:	89bb      	ldrh	r3, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001a78:	897b      	ldrh	r3, [r7, #10]
 8001a7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001a7c:	d905      	bls.n	8001a8a <handleReadDiscreteInputs+0x6a>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001a7e:	2102      	movs	r1, #2
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8b9 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e02b      	b.n	8001ae2 <handleReadDiscreteInputs+0xc2>
	}
	memset (txFrame, '\0', 256);
 8001a8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4817      	ldr	r0, [pc, #92]	@ (8001af0 <handleReadDiscreteInputs+0xd0>)
 8001a92:	f007 fac8 	bl	8009026 <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <handleReadDiscreteInputs+0xd4>)
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <handleReadDiscreteInputs+0xd0>)
 8001a9c:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <handleReadDiscreteInputs+0xcc>)
 8001aa0:	785a      	ldrb	r2, [r3, #1]
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <handleReadDiscreteInputs+0xd0>)
 8001aa4:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001aa6:	89bb      	ldrh	r3, [r7, #12]
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	89ba      	ldrh	r2, [r7, #12]
 8001ab0:	f002 0207 	and.w	r2, r2, #7
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2201      	movne	r2, #1
 8001abc:	2200      	moveq	r2, #0
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <handleReadDiscreteInputs+0xd0>)
 8001ac6:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <handleReadDiscreteInputs+0xd0>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <handleReadDiscreteInputs+0xd0>)
 8001ad0:	789b      	ldrb	r3, [r3, #2]
 8001ad2:	3303      	adds	r3, #3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4905      	ldr	r1, [pc, #20]	@ (8001af0 <handleReadDiscreteInputs+0xd0>)
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fdda 	bl	8001694 <sendModBusRequest>
	return 1;
 8001ae0:	2301      	movs	r3, #1

}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000034 	.word	0x20000034
 8001af0:	20000074 	.word	0x20000074
 8001af4:	20000000 	.word	0x20000000

08001af8 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 8001b02:	4b3a      	ldr	r3, [pc, #232]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001b04:	789b      	ldrb	r3, [r3, #2]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001b0c:	78db      	ldrb	r3, [r3, #3]
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001b16:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001b20:	795b      	ldrb	r3, [r3, #5]
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <handleWriteMulyipleHandlingRegister+0x3e>
 8001b30:	897b      	ldrh	r3, [r7, #10]
 8001b32:	2b7b      	cmp	r3, #123	@ 0x7b
 8001b34:	d905      	bls.n	8001b42 <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001b36:	2103      	movs	r1, #3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f85d 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e04f      	b.n	8001be2 <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 8001b42:	8afa      	ldrh	r2, [r7, #22]
 8001b44:	897b      	ldrh	r3, [r7, #10]
 8001b46:	4413      	add	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 8001b4e:	893b      	ldrh	r3, [r7, #8]
 8001b50:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b52:	d905      	bls.n	8001b60 <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001b54:	2102      	movs	r1, #2
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f84e 	bl	8001bf8 <sendModbusException>
		return MODBUS_ERROR;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e040      	b.n	8001be2 <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 8001b60:	2307      	movs	r3, #7
 8001b62:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e019      	b.n	8001b9e <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	613a      	str	r2, [r7, #16]
 8001b70:	4a1e      	ldr	r2, [pc, #120]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	6139      	str	r1, [r7, #16]
 8001b7e:	491b      	ldr	r1, [pc, #108]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b219      	sxth	r1, r3
 8001b88:	8afb      	ldrh	r3, [r7, #22]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	82fa      	strh	r2, [r7, #22]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b28a      	uxth	r2, r1
 8001b96:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbe1      	blt.n	8001b6a <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <handleWriteMulyipleHandlingRegister+0xf8>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001bac:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 8001bae:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001bb0:	785a      	ldrb	r2, [r3, #1]
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001bb4:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001bb8:	789a      	ldrb	r2, [r3, #2]
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001bbc:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001bc0:	78da      	ldrb	r2, [r3, #3]
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001bc4:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001bc8:	791a      	ldrb	r2, [r3, #4]
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001bcc:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <handleWriteMulyipleHandlingRegister+0xf4>)
 8001bd0:	795a      	ldrb	r2, [r3, #5]
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001bd4:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001bd6:	2206      	movs	r2, #6
 8001bd8:	4906      	ldr	r1, [pc, #24]	@ (8001bf4 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fd5a 	bl	8001694 <sendModBusRequest>
	return 1;   // success
 8001be0:	2301      	movs	r3, #1

}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000034 	.word	0x20000034
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000074 	.word	0x20000074

08001bf8 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <sendModbusException+0x3c>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <sendModbusException+0x40>)
 8001c0a:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <sendModbusException+0x3c>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <sendModbusException+0x40>)
 8001c18:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001c1a:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <sendModbusException+0x40>)
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001c20:	2203      	movs	r2, #3
 8001c22:	4905      	ldr	r1, [pc, #20]	@ (8001c38 <sendModbusException+0x40>)
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fd35 	bl	8001694 <sendModBusRequest>
 8001c2a:	4603      	mov	r3, r0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000034 	.word	0x20000034
 8001c38:	20000074 	.word	0x20000074

08001c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	4a0e      	ldr	r2, [pc, #56]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6193      	str	r3, [r2, #24]
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_MspInit+0x44>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ca4:	d154      	bne.n	8001d50 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a2b      	ldr	r2, [pc, #172]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cc8:	6153      	str	r3, [r2, #20]
 8001cca:	4b23      	ldr	r3, [pc, #140]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	4a1f      	ldr	r2, [pc, #124]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	6153      	str	r3, [r2, #20]
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cee:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a19      	ldr	r2, [pc, #100]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_ADC_MspInit+0xd4>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	4810      	ldr	r0, [pc, #64]	@ (8001d5c <HAL_ADC_MspInit+0xd8>)
 8001d1a:	f001 fdcf 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENS_1_Pin|SENS_2_Pin|SENS_3_Pin|SENS_4_Pin;
 8001d1e:	230f      	movs	r3, #15
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d34:	f001 fdc2 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_ADC_MspInit+0xdc>)
 8001d4c:	f001 fdb6 	bl	80038bc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d50:	bf00      	nop
 8001d52:	3730      	adds	r7, #48	@ 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	48001400 	.word	0x48001400

08001d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a17      	ldr	r2, [pc, #92]	@ (8001de0 <HAL_I2C_MspInit+0x7c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d128      	bne.n	8001dd8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <HAL_I2C_MspInit+0x80>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4a16      	ldr	r2, [pc, #88]	@ (8001de4 <HAL_I2C_MspInit+0x80>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d90:	6153      	str	r3, [r2, #20]
 8001d92:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <HAL_I2C_MspInit+0x80>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db0:	2304      	movs	r3, #4
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <HAL_I2C_MspInit+0x84>)
 8001dbc:	f001 fd7e 	bl	80038bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <HAL_I2C_MspInit+0x80>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <HAL_I2C_MspInit+0x80>)
 8001dc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dca:	61d3      	str	r3, [r2, #28]
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_I2C_MspInit+0x80>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40005400 	.word	0x40005400
 8001de4:	40021000 	.word	0x40021000
 8001de8:	48000400 	.word	0x48000400

08001dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	@ 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a17      	ldr	r2, [pc, #92]	@ (8001e68 <HAL_SPI_MspInit+0x7c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d127      	bne.n	8001e5e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a16      	ldr	r2, [pc, #88]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e30:	6153      	str	r3, [r2, #20]
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_SPI_MspInit+0x80>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e3e:	2338      	movs	r3, #56	@ 0x38
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_SPI_MspInit+0x84>)
 8001e5a:	f001 fd2f 	bl	80038bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	@ 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40013000 	.word	0x40013000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	@ 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a56      	ldr	r2, [pc, #344]	@ (8001fec <HAL_TIM_Base_MspInit+0x178>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d114      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e96:	4b56      	ldr	r3, [pc, #344]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	4a55      	ldr	r2, [pc, #340]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001e9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea0:	6193      	str	r3, [r2, #24]
 8001ea2:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2018      	movs	r0, #24
 8001eb4:	f001 fa3b 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001eb8:	2018      	movs	r0, #24
 8001eba:	f001 fa54 	bl	8003366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ebe:	e091      	b.n	8001fe4 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d14f      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	4b49      	ldr	r3, [pc, #292]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a48      	ldr	r2, [pc, #288]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b46      	ldr	r3, [pc, #280]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b43      	ldr	r3, [pc, #268]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4a42      	ldr	r2, [pc, #264]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eec:	6153      	str	r3, [r2, #20]
 8001eee:	4b40      	ldr	r3, [pc, #256]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f04:	6153      	str	r3, [r2, #20]
 8001f06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INT_2_TIM_Pin;
 8001f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f24:	2301      	movs	r3, #1
 8001f26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_2_TIM_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4831      	ldr	r0, [pc, #196]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x180>)
 8001f30:	f001 fcc4 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_1_TIM_Pin;
 8001f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f46:	2301      	movs	r3, #1
 8001f48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_1_TIM_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f54:	f001 fcb2 	bl	80038bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	201c      	movs	r0, #28
 8001f5e:	f001 f9e6 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f62:	201c      	movs	r0, #28
 8001f64:	f001 f9ff 	bl	8003366 <HAL_NVIC_EnableIRQ>
}
 8001f68:	e03c      	b.n	8001fe4 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM3)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ff8 <HAL_TIM_Base_MspInit+0x184>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10c      	bne.n	8001f8e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	61d3      	str	r3, [r2, #28]
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
}
 8001f8c:	e02a      	b.n	8001fe4 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM8)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <HAL_TIM_Base_MspInit+0x188>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10c      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001f9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	e018      	b.n	8001fe4 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM15)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <HAL_TIM_Base_MspInit+0x18c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d113      	bne.n	8001fe4 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x17c>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2018      	movs	r0, #24
 8001fda:	f001 f9a8 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001fde:	2018      	movs	r0, #24
 8001fe0:	f001 f9c1 	bl	8003366 <HAL_NVIC_EnableIRQ>
}
 8001fe4:	bf00      	nop
 8001fe6:	3738      	adds	r7, #56	@ 0x38
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40013400 	.word	0x40013400
 8002000:	40014000 	.word	0x40014000

08002004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a32      	ldr	r2, [pc, #200]	@ (80020ec <HAL_TIM_MspPostInit+0xe8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d13b      	bne.n	800209e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b32      	ldr	r3, [pc, #200]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4a31      	ldr	r2, [pc, #196]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002030:	6153      	str	r3, [r2, #20]
 8002032:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b2c      	ldr	r3, [pc, #176]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4a2b      	ldr	r2, [pc, #172]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 8002044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002048:	6153      	str	r3, [r2, #20]
 800204a:	4b29      	ldr	r3, [pc, #164]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002068:	2304      	movs	r3, #4
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4820      	ldr	r0, [pc, #128]	@ (80020f4 <HAL_TIM_MspPostInit+0xf0>)
 8002074:	f001 fc22 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002078:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800207c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800208a:	2306      	movs	r3, #6
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002098:	f001 fc10 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800209c:	e021      	b.n	80020e2 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a15      	ldr	r2, [pc, #84]	@ (80020f8 <HAL_TIM_MspPostInit+0xf4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d11c      	bne.n	80020e2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	4a10      	ldr	r2, [pc, #64]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 80020ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020b2:	6153      	str	r3, [r2, #20]
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_TIM_MspPostInit+0xec>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80020c0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80020d2:	2304      	movs	r3, #4
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4807      	ldr	r0, [pc, #28]	@ (80020fc <HAL_TIM_MspPostInit+0xf8>)
 80020de:	f001 fbed 	bl	80038bc <HAL_GPIO_Init>
}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	@ 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	48000400 	.word	0x48000400
 80020f8:	40013400 	.word	0x40013400
 80020fc:	48000800 	.word	0x48000800

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a41      	ldr	r2, [pc, #260]	@ (8002224 <HAL_UART_MspInit+0x124>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d17b      	bne.n	800221a <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_UART_MspInit+0x128>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	4a40      	ldr	r2, [pc, #256]	@ (8002228 <HAL_UART_MspInit+0x128>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212c:	6193      	str	r3, [r2, #24]
 800212e:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <HAL_UART_MspInit+0x128>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <HAL_UART_MspInit+0x128>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a3a      	ldr	r2, [pc, #232]	@ (8002228 <HAL_UART_MspInit+0x128>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002144:	6153      	str	r3, [r2, #20]
 8002146:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_UART_MspInit+0x128>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002152:	23c0      	movs	r3, #192	@ 0xc0
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002162:	2307      	movs	r3, #7
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	482f      	ldr	r0, [pc, #188]	@ (800222c <HAL_UART_MspInit+0x12c>)
 800216e:	f001 fba5 	bl	80038bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002172:	4b2f      	ldr	r3, [pc, #188]	@ (8002230 <HAL_UART_MspInit+0x130>)
 8002174:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <HAL_UART_MspInit+0x134>)
 8002176:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_UART_MspInit+0x130>)
 800217a:	2200      	movs	r2, #0
 800217c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800217e:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <HAL_UART_MspInit+0x130>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002184:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <HAL_UART_MspInit+0x130>)
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800218a:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <HAL_UART_MspInit+0x130>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002190:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <HAL_UART_MspInit+0x130>)
 8002192:	2200      	movs	r2, #0
 8002194:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002196:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_UART_MspInit+0x130>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <HAL_UART_MspInit+0x130>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021a2:	4823      	ldr	r0, [pc, #140]	@ (8002230 <HAL_UART_MspInit+0x130>)
 80021a4:	f001 f907 	bl	80033b6 <HAL_DMA_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80021ae:	f7ff fa23 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002230 <HAL_UART_MspInit+0x130>)
 80021b6:	675a      	str	r2, [r3, #116]	@ 0x74
 80021b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <HAL_UART_MspInit+0x130>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021c0:	4a1e      	ldr	r2, [pc, #120]	@ (800223c <HAL_UART_MspInit+0x13c>)
 80021c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021c6:	2210      	movs	r2, #16
 80021c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021d2:	2280      	movs	r2, #128	@ 0x80
 80021d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021ee:	4812      	ldr	r0, [pc, #72]	@ (8002238 <HAL_UART_MspInit+0x138>)
 80021f0:	f001 f8e1 	bl	80033b6 <HAL_DMA_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80021fa:	f7ff f9fd 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_UART_MspInit+0x138>)
 8002202:	671a      	str	r2, [r3, #112]	@ 0x70
 8002204:	4a0c      	ldr	r2, [pc, #48]	@ (8002238 <HAL_UART_MspInit+0x138>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2025      	movs	r0, #37	@ 0x25
 8002210:	f001 f88d 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002214:	2025      	movs	r0, #37	@ 0x25
 8002216:	f001 f8a6 	bl	8003366 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	@ 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40013800 	.word	0x40013800
 8002228:	40021000 	.word	0x40021000
 800222c:	48000400 	.word	0x48000400
 8002230:	200004d8 	.word	0x200004d8
 8002234:	40020058 	.word	0x40020058
 8002238:	2000051c 	.word	0x2000051c
 800223c:	40020044 	.word	0x40020044

08002240 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0e      	ldr	r2, [pc, #56]	@ (8002288 <HAL_UART_MspDeInit+0x48>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d116      	bne.n	8002280 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_UART_MspDeInit+0x4c>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <HAL_UART_MspDeInit+0x4c>)
 8002258:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800225c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800225e:	21c0      	movs	r1, #192	@ 0xc0
 8002260:	480b      	ldr	r0, [pc, #44]	@ (8002290 <HAL_UART_MspDeInit+0x50>)
 8002262:	f001 fca5 	bl	8003bb0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226a:	4618      	mov	r0, r3
 800226c:	f001 f8ea 	bl	8003444 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002274:	4618      	mov	r0, r3
 8002276:	f001 f8e5 	bl	8003444 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800227a:	2025      	movs	r0, #37	@ 0x25
 800227c:	f001 f881 	bl	8003382 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40013800 	.word	0x40013800
 800228c:	40021000 	.word	0x40021000
 8002290:	48000400 	.word	0x48000400

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <NMI_Handler+0x4>

0800229c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <MemManage_Handler+0x4>

080022ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <UsageFault_Handler+0x4>

080022bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ea:	f000 f8bb 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <DMA1_Channel4_IRQHandler+0x10>)
 80022fa:	f001 f9c6 	bl	800368a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000051c 	.word	0x2000051c

08002308 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA1_Channel5_IRQHandler+0x10>)
 800230e:	f001 f9bc 	bl	800368a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200004d8 	.word	0x200004d8

0800231c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002320:	4803      	ldr	r0, [pc, #12]	@ (8002330 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002322:	f003 ffb1 	bl	8006288 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002326:	4803      	ldr	r0, [pc, #12]	@ (8002334 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002328:	f003 ffae 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200002d4 	.word	0x200002d4
 8002334:	20000404 	.word	0x20000404

08002338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <TIM2_IRQHandler+0x10>)
 800233e:	f003 ffa3 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000320 	.word	0x20000320

0800234c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <USART1_IRQHandler+0x10>)
 8002352:	f005 fcbd 	bl	8007cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000450 	.word	0x20000450

08002360 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <SystemInit+0x20>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <SystemInit+0x20>)
 800236c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002388:	f7ff ffea 	bl	8002360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800238c:	480c      	ldr	r0, [pc, #48]	@ (80023c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800238e:	490d      	ldr	r1, [pc, #52]	@ (80023c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <LoopForever+0xe>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a4:	4c0a      	ldr	r4, [pc, #40]	@ (80023d0 <LoopForever+0x16>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b2:	f006 fe41 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b6:	f7fd ffcd 	bl	8000354 <main>

080023ba <LoopForever>:

LoopForever:
    b LoopForever
 80023ba:	e7fe      	b.n	80023ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80023c8:	080090d8 	.word	0x080090d8
  ldr r2, =_sbss
 80023cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80023d0:	20000564 	.word	0x20000564

080023d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC1_2_IRQHandler>
	...

080023d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <HAL_Init+0x28>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <HAL_Init+0x28>)
 80023e2:	f043 0310 	orr.w	r3, r3, #16
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 ff95 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ee:	200f      	movs	r0, #15
 80023f0:	f000 f808 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f4:	f7ff fc22 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000

08002404 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 ffbb 	bl	800339e <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 ff75 	bl	800332e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	@ (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000008 	.word	0x20000008
 800245c:	20000010 	.word	0x20000010
 8002460:	2000000c 	.word	0x2000000c

08002464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000010 	.word	0x20000010
 8002488:	20000560 	.word	0x20000560

0800248c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000560 	.word	0x20000560

080024a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000010 	.word	0x20000010

080024ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b09a      	sub	sp, #104	@ 0x68
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e1c9      	b.n	80028a0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	d176      	bne.n	800260c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d152      	bne.n	80025cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fb9f 	bl	8001c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d13b      	bne.n	80025cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fd85 	bl	8003064 <ADC_Disable>
 800255a:	4603      	mov	r3, r0
 800255c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d12f      	bne.n	80025cc <HAL_ADC_Init+0xe0>
 800256c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12b      	bne.n	80025cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800257c:	f023 0302 	bic.w	r3, r3, #2
 8002580:	f043 0202 	orr.w	r2, r3, #2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002596:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025a8:	4b86      	ldr	r3, [pc, #536]	@ (80027c4 <HAL_ADC_Init+0x2d8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a86      	ldr	r2, [pc, #536]	@ (80027c8 <HAL_ADC_Init+0x2dc>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0c9a      	lsrs	r2, r3, #18
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025be:	e002      	b.n	80025c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f9      	bne.n	80025c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e8:	d110      	bne.n	800260c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f023 0312 	bic.w	r3, r3, #18
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 8136 	bne.w	8002886 <HAL_ADC_Init+0x39a>
 800261a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8131 	bne.w	8002886 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 8129 	bne.w	8002886 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800264c:	d004      	beq.n	8002658 <HAL_ADC_Init+0x16c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5e      	ldr	r2, [pc, #376]	@ (80027cc <HAL_ADC_Init+0x2e0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_ADC_Init+0x170>
 8002658:	4b5d      	ldr	r3, [pc, #372]	@ (80027d0 <HAL_ADC_Init+0x2e4>)
 800265a:	e000      	b.n	800265e <HAL_ADC_Init+0x172>
 800265c:	4b5d      	ldr	r3, [pc, #372]	@ (80027d4 <HAL_ADC_Init+0x2e8>)
 800265e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002668:	d102      	bne.n	8002670 <HAL_ADC_Init+0x184>
 800266a:	4b58      	ldr	r3, [pc, #352]	@ (80027cc <HAL_ADC_Init+0x2e0>)
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e01a      	b.n	80026a6 <HAL_ADC_Init+0x1ba>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a55      	ldr	r2, [pc, #340]	@ (80027cc <HAL_ADC_Init+0x2e0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d103      	bne.n	8002682 <HAL_ADC_Init+0x196>
 800267a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e011      	b.n	80026a6 <HAL_ADC_Init+0x1ba>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a54      	ldr	r2, [pc, #336]	@ (80027d8 <HAL_ADC_Init+0x2ec>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <HAL_ADC_Init+0x1a6>
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_ADC_Init+0x2f0>)
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e009      	b.n	80026a6 <HAL_ADC_Init+0x1ba>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a51      	ldr	r2, [pc, #324]	@ (80027dc <HAL_ADC_Init+0x2f0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <HAL_ADC_Init+0x1b6>
 800269c:	4b4e      	ldr	r3, [pc, #312]	@ (80027d8 <HAL_ADC_Init+0x2ec>)
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e001      	b.n	80026a6 <HAL_ADC_Init+0x1ba>
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d108      	bne.n	80026c6 <HAL_ADC_Init+0x1da>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_Init+0x1da>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_ADC_Init+0x1dc>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11c      	bne.n	8002706 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d010      	beq.n	80026f4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_ADC_Init+0x202>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_Init+0x202>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_Init+0x204>
 80026ee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d108      	bne.n	8002706 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80026f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	431a      	orrs	r2, r3
 8002702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002704:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7e5b      	ldrb	r3, [r3, #25]
 800270a:	035b      	lsls	r3, r3, #13
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002710:	2a01      	cmp	r2, #1
 8002712:	d002      	beq.n	800271a <HAL_ADC_Init+0x22e>
 8002714:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002718:	e000      	b.n	800271c <HAL_ADC_Init+0x230>
 800271a:	2200      	movs	r2, #0
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4313      	orrs	r3, r2
 800272a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800272c:	4313      	orrs	r3, r2
 800272e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d11b      	bne.n	8002772 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7e5b      	ldrb	r3, [r3, #25]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	3b01      	subs	r3, #1
 8002748:	045a      	lsls	r2, r3, #17
 800274a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800274c:	4313      	orrs	r3, r2
 800274e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002752:	663b      	str	r3, [r7, #96]	@ 0x60
 8002754:	e00d      	b.n	8002772 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800275e:	f043 0220 	orr.w	r2, r3, #32
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	2b01      	cmp	r3, #1
 8002778:	d03a      	beq.n	80027f0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a16      	ldr	r2, [pc, #88]	@ (80027d8 <HAL_ADC_Init+0x2ec>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_ADC_Init+0x2a2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_ADC_Init+0x2f0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d128      	bne.n	80027e0 <HAL_ADC_Init+0x2f4>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8002796:	d012      	beq.n	80027be <HAL_ADC_Init+0x2d2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a0:	d00a      	beq.n	80027b8 <HAL_ADC_Init+0x2cc>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80027aa:	d002      	beq.n	80027b2 <HAL_ADC_Init+0x2c6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	e018      	b.n	80027e4 <HAL_ADC_Init+0x2f8>
 80027b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027b6:	e015      	b.n	80027e4 <HAL_ADC_Init+0x2f8>
 80027b8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80027bc:	e012      	b.n	80027e4 <HAL_ADC_Init+0x2f8>
 80027be:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80027c2:	e00f      	b.n	80027e4 <HAL_ADC_Init+0x2f8>
 80027c4:	20000008 	.word	0x20000008
 80027c8:	431bde83 	.word	0x431bde83
 80027cc:	50000100 	.word	0x50000100
 80027d0:	50000300 	.word	0x50000300
 80027d4:	50000700 	.word	0x50000700
 80027d8:	50000400 	.word	0x50000400
 80027dc:	50000500 	.word	0x50000500
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027e8:	4313      	orrs	r3, r2
 80027ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027ec:	4313      	orrs	r3, r2
 80027ee:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d114      	bne.n	8002828 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800280c:	f023 0302 	bic.w	r3, r3, #2
 8002810:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7e1b      	ldrb	r3, [r3, #24]
 8002816:	039a      	lsls	r2, r3, #14
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4313      	orrs	r3, r2
 8002822:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002824:	4313      	orrs	r3, r2
 8002826:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <HAL_ADC_Init+0x3bc>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002838:	430b      	orrs	r3, r1
 800283a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10c      	bne.n	800285e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f023 010f 	bic.w	r1, r3, #15
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
 800285c:	e007      	b.n	800286e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 020f 	bic.w	r2, r2, #15
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	f023 0303 	bic.w	r3, r3, #3
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40
 8002884:	e00a      	b.n	800289c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f023 0312 	bic.w	r3, r3, #18
 800288e:	f043 0210 	orr.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800289c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3768      	adds	r7, #104	@ 0x68
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	fff0c007 	.word	0xfff0c007

080028ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b09b      	sub	sp, #108	@ 0x6c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x22>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e2c8      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x5b4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 82ac 	bne.w	8002e3e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d81c      	bhi.n	8002928 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	461a      	mov	r2, r3
 8002902:	231f      	movs	r3, #31
 8002904:	4093      	lsls	r3, r2
 8002906:	43db      	mvns	r3, r3
 8002908:	4019      	ands	r1, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
 8002926:	e063      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b09      	cmp	r3, #9
 800292e:	d81e      	bhi.n	800296e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	3b1e      	subs	r3, #30
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	4019      	ands	r1, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	3b1e      	subs	r3, #30
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	@ 0x34
 800296c:	e040      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b0e      	cmp	r3, #14
 8002974:	d81e      	bhi.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	3b3c      	subs	r3, #60	@ 0x3c
 800298a:	221f      	movs	r2, #31
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	4019      	ands	r1, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	3b3c      	subs	r3, #60	@ 0x3c
 80029a6:	fa00 f203 	lsl.w	r2, r0, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80029b2:	e01d      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	3b5a      	subs	r3, #90	@ 0x5a
 80029c8:	221f      	movs	r2, #31
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4019      	ands	r1, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	3b5a      	subs	r3, #90	@ 0x5a
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 80e5 	bne.w	8002bca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d91c      	bls.n	8002a42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6999      	ldr	r1, [r3, #24]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	3b1e      	subs	r3, #30
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	e019      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	2207      	movs	r2, #7
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6898      	ldr	r0, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d84f      	bhi.n	8002b38 <HAL_ADC_ConfigChannel+0x28c>
 8002a98:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ad3 	.word	0x08002ad3
 8002aa8:	08002af5 	.word	0x08002af5
 8002aac:	08002b17 	.word	0x08002b17
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ab6:	4b99      	ldr	r3, [pc, #612]	@ (8002d1c <HAL_ADC_ConfigChannel+0x470>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	0691      	lsls	r1, r2, #26
 8002ac0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ace:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ad0:	e07b      	b.n	8002bca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ad8:	4b90      	ldr	r3, [pc, #576]	@ (8002d1c <HAL_ADC_ConfigChannel+0x470>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	0691      	lsls	r1, r2, #26
 8002ae2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002af0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002af2:	e06a      	b.n	8002bca <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002afa:	4b88      	ldr	r3, [pc, #544]	@ (8002d1c <HAL_ADC_ConfigChannel+0x470>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	0691      	lsls	r1, r2, #26
 8002b04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b06:	430a      	orrs	r2, r1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b12:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b14:	e059      	b.n	8002bca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d1c <HAL_ADC_ConfigChannel+0x470>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	0691      	lsls	r1, r2, #26
 8002b26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b34:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b36:	e048      	b.n	8002bca <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b5a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	069b      	lsls	r3, r3, #26
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b7e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ba2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002baa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d107      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bc6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002bc8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d108      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x33e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x33e>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_ADC_ConfigChannel+0x340>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 8131 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d00f      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	400a      	ands	r2, r1
 8002c14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002c18:	e049      	b.n	8002cae <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d91c      	bls.n	8002c76 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6999      	ldr	r1, [r3, #24]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b1b      	subs	r3, #27
 8002c4e:	2207      	movs	r2, #7
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	4019      	ands	r1, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6898      	ldr	r0, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	3b1b      	subs	r3, #27
 8002c68:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
 8002c74:	e01b      	b.n	8002cae <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6959      	ldr	r1, [r3, #20]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	2207      	movs	r2, #7
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	4019      	ands	r1, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6898      	ldr	r0, [r3, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb6:	d004      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x416>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <HAL_ADC_ConfigChannel+0x474>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x41a>
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_ADC_ConfigChannel+0x478>)
 8002cc4:	e000      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x41c>
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <HAL_ADC_ConfigChannel+0x47c>)
 8002cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d105      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ce2:	2b11      	cmp	r3, #17
 8002ce4:	d105      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cf6:	2b12      	cmp	r3, #18
 8002cf8:	f040 80ac 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 80a5 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d12:	d10b      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x480>
 8002d14:	4b02      	ldr	r3, [pc, #8]	@ (8002d20 <HAL_ADC_ConfigChannel+0x474>)
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e023      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x4b6>
 8002d1a:	bf00      	nop
 8002d1c:	83fff000 	.word	0x83fff000
 8002d20:	50000100 	.word	0x50000100
 8002d24:	50000300 	.word	0x50000300
 8002d28:	50000700 	.word	0x50000700
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a4e      	ldr	r2, [pc, #312]	@ (8002e6c <HAL_ADC_ConfigChannel+0x5c0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d103      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x492>
 8002d36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e011      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x4b6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a4b      	ldr	r2, [pc, #300]	@ (8002e70 <HAL_ADC_ConfigChannel+0x5c4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d102      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x4a2>
 8002d48:	4b4a      	ldr	r3, [pc, #296]	@ (8002e74 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e009      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x4b6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a48      	ldr	r2, [pc, #288]	@ (8002e74 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x4b2>
 8002d58:	4b45      	ldr	r3, [pc, #276]	@ (8002e70 <HAL_ADC_ConfigChannel+0x5c4>)
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e001      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x4b6>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d108      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x4d6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x4d6>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x4d8>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d150      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x4fe>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x4fe>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_ADC_ConfigChannel+0x500>
 8002daa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d13c      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d11d      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x548>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc0:	d118      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002dca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dcc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dce:	4b2a      	ldr	r3, [pc, #168]	@ (8002e78 <HAL_ADC_ConfigChannel+0x5cc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e7c <HAL_ADC_ConfigChannel+0x5d0>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	0c9a      	lsrs	r2, r3, #18
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002de4:	e002      	b.n	8002dec <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002df2:	e02e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b11      	cmp	r3, #17
 8002dfa:	d10b      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x568>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e04:	d106      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e12:	e01e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b12      	cmp	r3, #18
 8002e1a:	d11a      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e26:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e28:	e013      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002e3c:	e00a      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e52:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	376c      	adds	r7, #108	@ 0x6c
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	50000100 	.word	0x50000100
 8002e70:	50000400 	.word	0x50000400
 8002e74:	50000500 	.word	0x50000500
 8002e78:	20000008 	.word	0x20000008
 8002e7c:	431bde83 	.word	0x431bde83

08002e80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b099      	sub	sp, #100	@ 0x64
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e98:	d102      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	e01a      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d103      	bne.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002eaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	e011      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a67      	ldr	r2, [pc, #412]	@ (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d102      	bne.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ebc:	4b66      	ldr	r3, [pc, #408]	@ (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	e009      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a64      	ldr	r2, [pc, #400]	@ (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d102      	bne.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ecc:	4b61      	ldr	r3, [pc, #388]	@ (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	e001      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b0      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e0a9      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 808d 	bne.w	8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8086 	bne.w	8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f1c:	d004      	beq.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4b      	ldr	r2, [pc, #300]	@ (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f28:	4b4c      	ldr	r3, [pc, #304]	@ (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002f2a:	e000      	b.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002f2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d040      	beq.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f4a:	035b      	lsls	r3, r3, #13
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f52:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d15c      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d14b      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fa4:	f023 030f 	bic.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	6811      	ldr	r1, [r2, #0]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fb6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb8:	e03c      	b.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fc4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d123      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003008:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d112      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800300e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003016:	f023 030f 	bic.w	r3, r3, #15
 800301a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800301c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800301e:	e009      	b.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8003032:	e000      	b.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003034:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800303e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8003042:	4618      	mov	r0, r3
 8003044:	3764      	adds	r7, #100	@ 0x64
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	50000100 	.word	0x50000100
 8003054:	50000400 	.word	0x50000400
 8003058:	50000500 	.word	0x50000500
 800305c:	50000300 	.word	0x50000300
 8003060:	50000700 	.word	0x50000700

08003064 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d108      	bne.n	8003090 <ADC_Disable+0x2c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <ADC_Disable+0x2c>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <ADC_Disable+0x2e>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d047      	beq.n	8003126 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030d 	and.w	r3, r3, #13
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10f      	bne.n	80030c4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0202 	orr.w	r2, r2, #2
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2203      	movs	r2, #3
 80030ba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030bc:	f7ff f9e6 	bl	800248c <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030c2:	e029      	b.n	8003118 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f043 0210 	orr.w	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e023      	b.n	8003128 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030e0:	f7ff f9d4 	bl	800248c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d914      	bls.n	8003118 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10d      	bne.n	8003118 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d0dc      	beq.n	80030e0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	@ (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db12      	blt.n	8003208 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	490a      	ldr	r1, [pc, #40]	@ (8003214 <__NVIC_DisableIRQ+0x44>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	3320      	adds	r3, #32
 80031f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031fc:	f3bf 8f4f 	dsb	sy
}
 8003200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003202:	f3bf 8f6f 	isb	sy
}
 8003206:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db0a      	blt.n	8003242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	490c      	ldr	r1, [pc, #48]	@ (8003264 <__NVIC_SetPriority+0x4c>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	440b      	add	r3, r1
 800323c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003240:	e00a      	b.n	8003258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4908      	ldr	r1, [pc, #32]	@ (8003268 <__NVIC_SetPriority+0x50>)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	3b04      	subs	r3, #4
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	440b      	add	r3, r1
 8003256:	761a      	strb	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000e100 	.word	0xe000e100
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	@ 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f1c3 0307 	rsb	r3, r3, #7
 8003286:	2b04      	cmp	r3, #4
 8003288:	bf28      	it	cs
 800328a:	2304      	movcs	r3, #4
 800328c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3304      	adds	r3, #4
 8003292:	2b06      	cmp	r3, #6
 8003294:	d902      	bls.n	800329c <NVIC_EncodePriority+0x30>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3b03      	subs	r3, #3
 800329a:	e000      	b.n	800329e <NVIC_EncodePriority+0x32>
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	401a      	ands	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	43d9      	mvns	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	4313      	orrs	r3, r2
         );
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	@ 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e4:	d301      	bcc.n	80032ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <SysTick_Config+0x40>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f2:	210f      	movs	r1, #15
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f7ff ff8e 	bl	8003218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032fc:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <SysTick_Config+0x40>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003302:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <SysTick_Config+0x40>)
 8003304:	2207      	movs	r2, #7
 8003306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	e000e010 	.word	0xe000e010

08003318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff05 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003340:	f7ff ff1a 	bl	8003178 <__NVIC_GetPriorityGrouping>
 8003344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	6978      	ldr	r0, [r7, #20]
 800334c:	f7ff ff8e 	bl	800326c <NVIC_EncodePriority>
 8003350:	4602      	mov	r2, r0
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff5d 	bl	8003218 <__NVIC_SetPriority>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff0d 	bl	8003194 <__NVIC_EnableIRQ>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff1d 	bl	80031d0 <__NVIC_DisableIRQ>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff ff94 	bl	80032d4 <SysTick_Config>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e037      	b.n	800343c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80033e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa10 	bl	8003844 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03a      	b.n	80034cc <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9dc 	bl	8003844 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_DMA_Start_IT+0x20>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e04a      	b.n	800358a <HAL_DMA_Start_IT+0xb6>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003502:	2b01      	cmp	r3, #1
 8003504:	d13a      	bne.n	800357c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f95c 	bl	80037e8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 020e 	orr.w	r2, r2, #14
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e00f      	b.n	800356a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 020a 	orr.w	r2, r2, #10
 8003558:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0204 	bic.w	r2, r2, #4
 8003568:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e005      	b.n	8003588 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e02e      	b.n	8003602 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d008      	beq.n	80035c0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e020      	b.n	8003602 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 020e 	bic.w	r2, r2, #14
 80035ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003620:	2b02      	cmp	r3, #2
 8003622:	d005      	beq.n	8003630 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
 800362e:	e027      	b.n	8003680 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020e 	bic.w	r2, r2, #14
 800363e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f202 	lsl.w	r2, r1, r2
 800365e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
    }
  }
  return status;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2204      	movs	r2, #4
 80036a8:	409a      	lsls	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d024      	beq.n	80036fc <HAL_DMA_IRQHandler+0x72>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01f      	beq.n	80036fc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0204 	bic.w	r2, r2, #4
 80036d8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e2:	2104      	movs	r1, #4
 80036e4:	fa01 f202 	lsl.w	r2, r1, r2
 80036e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d06a      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036fa:	e065      	b.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	2202      	movs	r2, #2
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02c      	beq.n	8003766 <HAL_DMA_IRQHandler+0xdc>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d027      	beq.n	8003766 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 020a 	bic.w	r2, r2, #10
 8003732:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	2102      	movs	r1, #2
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d035      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003764:	e030      	b.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	2208      	movs	r2, #8
 800376c:	409a      	lsls	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d028      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d023      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020e 	bic.w	r2, r2, #14
 800378e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f202 	lsl.w	r2, r1, r2
 800379e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
    }
  }
}
 80037c6:	e7ff      	b.n	80037c8 <HAL_DMA_IRQHandler+0x13e>
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f202 	lsl.w	r2, r1, r2
 8003804:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d108      	bne.n	8003828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003826:	e007      	b.n	8003838 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b14      	ldr	r3, [pc, #80]	@ (80038a4 <DMA_CalcBaseAndBitshift+0x60>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d80f      	bhi.n	8003878 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003860:	4413      	add	r3, r2
 8003862:	4a12      	ldr	r2, [pc, #72]	@ (80038ac <DMA_CalcBaseAndBitshift+0x68>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	009a      	lsls	r2, r3, #2
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0f      	ldr	r2, [pc, #60]	@ (80038b0 <DMA_CalcBaseAndBitshift+0x6c>)
 8003874:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003876:	e00e      	b.n	8003896 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <DMA_CalcBaseAndBitshift+0x70>)
 8003880:	4413      	add	r3, r2
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <DMA_CalcBaseAndBitshift+0x68>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	009a      	lsls	r2, r3, #2
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <DMA_CalcBaseAndBitshift+0x74>)
 8003894:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40020407 	.word	0x40020407
 80038a8:	bffdfff8 	.word	0xbffdfff8
 80038ac:	cccccccd 	.word	0xcccccccd
 80038b0:	40020000 	.word	0x40020000
 80038b4:	bffdfbf8 	.word	0xbffdfbf8
 80038b8:	40020400 	.word	0x40020400

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ca:	e154      	b.n	8003b76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8146 	beq.w	8003b70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d005      	beq.n	80038fc <HAL_GPIO_Init+0x40>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d130      	bne.n	800395e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003932:	2201      	movs	r2, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0201 	and.w	r2, r3, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b03      	cmp	r3, #3
 8003968:	d017      	beq.n	800399a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d123      	bne.n	80039ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	6939      	ldr	r1, [r7, #16]
 80039ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80a0 	beq.w	8003b70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a30:	4b58      	ldr	r3, [pc, #352]	@ (8003b94 <HAL_GPIO_Init+0x2d8>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4a57      	ldr	r2, [pc, #348]	@ (8003b94 <HAL_GPIO_Init+0x2d8>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6193      	str	r3, [r2, #24]
 8003a3c:	4b55      	ldr	r3, [pc, #340]	@ (8003b94 <HAL_GPIO_Init+0x2d8>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a48:	4a53      	ldr	r2, [pc, #332]	@ (8003b98 <HAL_GPIO_Init+0x2dc>)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	220f      	movs	r2, #15
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a72:	d019      	beq.n	8003aa8 <HAL_GPIO_Init+0x1ec>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a49      	ldr	r2, [pc, #292]	@ (8003b9c <HAL_GPIO_Init+0x2e0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <HAL_GPIO_Init+0x1e8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a48      	ldr	r2, [pc, #288]	@ (8003ba0 <HAL_GPIO_Init+0x2e4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00d      	beq.n	8003aa0 <HAL_GPIO_Init+0x1e4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a47      	ldr	r2, [pc, #284]	@ (8003ba4 <HAL_GPIO_Init+0x2e8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <HAL_GPIO_Init+0x1e0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ba8 <HAL_GPIO_Init+0x2ec>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <HAL_GPIO_Init+0x1dc>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e008      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003a98:	2305      	movs	r3, #5
 8003a9a:	e006      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e004      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e002      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	f002 0203 	and.w	r2, r2, #3
 8003ab0:	0092      	lsls	r2, r2, #2
 8003ab2:	4093      	lsls	r3, r2
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aba:	4937      	ldr	r1, [pc, #220]	@ (8003b98 <HAL_GPIO_Init+0x2dc>)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ac8:	4b38      	ldr	r3, [pc, #224]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003aec:	4a2f      	ldr	r2, [pc, #188]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af2:	4b2e      	ldr	r3, [pc, #184]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b16:	4a25      	ldr	r2, [pc, #148]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b1c:	4b23      	ldr	r3, [pc, #140]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b40:	4a1a      	ldr	r2, [pc, #104]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b46:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b6a:	4a10      	ldr	r2, [pc, #64]	@ (8003bac <HAL_GPIO_Init+0x2f0>)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3301      	adds	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f47f aea3 	bne.w	80038cc <HAL_GPIO_Init+0x10>
  }
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	48000400 	.word	0x48000400
 8003ba0:	48000800 	.word	0x48000800
 8003ba4:	48000c00 	.word	0x48000c00
 8003ba8:	48001000 	.word	0x48001000
 8003bac:	40010400 	.word	0x40010400

08003bb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003bbe:	e0b8      	b.n	8003d32 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80ab 	beq.w	8003d2c <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003bd6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d50 <HAL_GPIO_DeInit+0x1a0>)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	3302      	adds	r3, #2
 8003bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	220f      	movs	r2, #15
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bfe:	d019      	beq.n	8003c34 <HAL_GPIO_DeInit+0x84>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a54      	ldr	r2, [pc, #336]	@ (8003d54 <HAL_GPIO_DeInit+0x1a4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <HAL_GPIO_DeInit+0x80>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a53      	ldr	r2, [pc, #332]	@ (8003d58 <HAL_GPIO_DeInit+0x1a8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00d      	beq.n	8003c2c <HAL_GPIO_DeInit+0x7c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a52      	ldr	r2, [pc, #328]	@ (8003d5c <HAL_GPIO_DeInit+0x1ac>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <HAL_GPIO_DeInit+0x78>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a51      	ldr	r2, [pc, #324]	@ (8003d60 <HAL_GPIO_DeInit+0x1b0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <HAL_GPIO_DeInit+0x74>
 8003c20:	2304      	movs	r3, #4
 8003c22:	e008      	b.n	8003c36 <HAL_GPIO_DeInit+0x86>
 8003c24:	2305      	movs	r3, #5
 8003c26:	e006      	b.n	8003c36 <HAL_GPIO_DeInit+0x86>
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e004      	b.n	8003c36 <HAL_GPIO_DeInit+0x86>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e002      	b.n	8003c36 <HAL_GPIO_DeInit+0x86>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_GPIO_DeInit+0x86>
 8003c34:	2300      	movs	r3, #0
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	f002 0203 	and.w	r2, r2, #3
 8003c3c:	0092      	lsls	r2, r2, #2
 8003c3e:	4093      	lsls	r3, r2
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d132      	bne.n	8003cac <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	4945      	ldr	r1, [pc, #276]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c54:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	4941      	ldr	r1, [pc, #260]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c62:	4b40      	ldr	r3, [pc, #256]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	493e      	ldr	r1, [pc, #248]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c70:	4b3c      	ldr	r3, [pc, #240]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	493a      	ldr	r1, [pc, #232]	@ (8003d64 <HAL_GPIO_DeInit+0x1b4>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	220f      	movs	r2, #15
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c8e:	4a30      	ldr	r2, [pc, #192]	@ (8003d50 <HAL_GPIO_DeInit+0x1a0>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	482c      	ldr	r0, [pc, #176]	@ (8003d50 <HAL_GPIO_DeInit+0x1a0>)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	08da      	lsrs	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3208      	adds	r2, #8
 8003cca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	220f      	movs	r2, #15
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	08d2      	lsrs	r2, r2, #3
 8003ce2:	4019      	ands	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3208      	adds	r2, #8
 8003ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2103      	movs	r1, #3
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	2101      	movs	r1, #1
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2103      	movs	r1, #3
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	401a      	ands	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f47f af40 	bne.w	8003bc0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	48000400 	.word	0x48000400
 8003d58:	48000800 	.word	0x48000800
 8003d5c:	48000c00 	.word	0x48000c00
 8003d60:	48001000 	.word	0x48001000
 8003d64:	40010400 	.word	0x40010400

08003d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
 8003d74:	4613      	mov	r3, r2
 8003d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d84:	e002      	b.n	8003d8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d86:	887a      	ldrh	r2, [r7, #2]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e08d      	b.n	8003ec6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd ffd0 	bl	8001d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	@ 0x24
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003de8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003df8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	e006      	b.n	8003e20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d108      	bne.n	8003e3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e007      	b.n	8003e4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69d9      	ldr	r1, [r3, #28]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d138      	bne.n	8003f56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e032      	b.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	@ 0x24
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d139      	bne.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e033      	b.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	@ 0x24
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004002:	af00      	add	r7, sp, #0
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800400c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800400e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004012:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f001 b823 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004026:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 817d 	beq.w	8004332 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004038:	4bbc      	ldr	r3, [pc, #752]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b04      	cmp	r3, #4
 8004042:	d00c      	beq.n	800405e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004044:	4bb9      	ldr	r3, [pc, #740]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 030c 	and.w	r3, r3, #12
 800404c:	2b08      	cmp	r3, #8
 800404e:	d15c      	bne.n	800410a <HAL_RCC_OscConfig+0x10e>
 8004050:	4bb6      	ldr	r3, [pc, #728]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405c:	d155      	bne.n	800410a <HAL_RCC_OscConfig+0x10e>
 800405e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004062:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004072:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <HAL_RCC_OscConfig+0x94>
 800408a:	4ba8      	ldr	r3, [pc, #672]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e015      	b.n	80040bc <HAL_RCC_OscConfig+0xc0>
 8004090:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004094:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80040a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80040ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80040b8:	4b9c      	ldr	r3, [pc, #624]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80040c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80040c8:	fa92 f2a2 	rbit	r2, r2
 80040cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80040d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80040d4:	fab2 f282 	clz	r2, r2
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f042 0220 	orr.w	r2, r2, #32
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	f002 021f 	and.w	r2, r2, #31
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 811f 	beq.w	8004330 <HAL_RCC_OscConfig+0x334>
 80040f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 8116 	bne.w	8004330 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f000 bfaf 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800410e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x12e>
 800411c:	4b83      	ldr	r3, [pc, #524]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a82      	ldr	r2, [pc, #520]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e036      	b.n	8004198 <HAL_RCC_OscConfig+0x19c>
 800412a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x158>
 800413a:	4b7c      	ldr	r3, [pc, #496]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7b      	ldr	r2, [pc, #492]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b79      	ldr	r3, [pc, #484]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a78      	ldr	r2, [pc, #480]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800414c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e021      	b.n	8004198 <HAL_RCC_OscConfig+0x19c>
 8004154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004158:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0x184>
 8004166:	4b71      	ldr	r3, [pc, #452]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a70      	ldr	r2, [pc, #448]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800416c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b6e      	ldr	r3, [pc, #440]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6d      	ldr	r2, [pc, #436]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0x19c>
 8004180:	4b6a      	ldr	r3, [pc, #424]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a69      	ldr	r2, [pc, #420]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b67      	ldr	r3, [pc, #412]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a66      	ldr	r2, [pc, #408]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004196:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004198:	4b64      	ldr	r3, [pc, #400]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	f023 020f 	bic.w	r2, r3, #15
 80041a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	495f      	ldr	r1, [pc, #380]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d059      	beq.n	8004276 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fe f963 	bl	800248c <HAL_GetTick>
 80041c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041cc:	f7fe f95e 	bl	800248c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b64      	cmp	r3, #100	@ 0x64
 80041da:	d902      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	f000 bf43 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
 80041e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80041f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_RCC_OscConfig+0x218>
 800420e:	4b47      	ldr	r3, [pc, #284]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	e015      	b.n	8004240 <HAL_RCC_OscConfig+0x244>
 8004214:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004218:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004228:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800422c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004230:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800423c:	4b3b      	ldr	r3, [pc, #236]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004244:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004248:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800424c:	fa92 f2a2 	rbit	r2, r2
 8004250:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004254:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004258:	fab2 f282 	clz	r2, r2
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	f042 0220 	orr.w	r2, r2, #32
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f002 021f 	and.w	r2, r2, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f202 	lsl.w	r2, r1, r2
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ab      	beq.n	80041cc <HAL_RCC_OscConfig+0x1d0>
 8004274:	e05d      	b.n	8004332 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004276:	f7fe f909 	bl	800248c <HAL_GetTick>
 800427a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004280:	f7fe f904 	bl	800248c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b64      	cmp	r3, #100	@ 0x64
 800428e:	d902      	bls.n	8004296 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	f000 bee9 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
 8004296:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800429a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80042aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_OscConfig+0x2cc>
 80042c2:	4b1a      	ldr	r3, [pc, #104]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	e015      	b.n	80042f4 <HAL_RCC_OscConfig+0x2f8>
 80042c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042cc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80042dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042e0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80042e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <HAL_RCC_OscConfig+0x330>)
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042f8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80042fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004300:	fa92 f2a2 	rbit	r2, r2
 8004304:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004308:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800430c:	fab2 f282 	clz	r2, r2
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f042 0220 	orr.w	r2, r2, #32
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f002 021f 	and.w	r2, r2, #31
 800431c:	2101      	movs	r1, #1
 800431e:	fa01 f202 	lsl.w	r2, r1, r2
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ab      	bne.n	8004280 <HAL_RCC_OscConfig+0x284>
 8004328:	e003      	b.n	8004332 <HAL_RCC_OscConfig+0x336>
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004336:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 817d 	beq.w	8004642 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004348:	4ba6      	ldr	r3, [pc, #664]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004354:	4ba3      	ldr	r3, [pc, #652]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b08      	cmp	r3, #8
 800435e:	d172      	bne.n	8004446 <HAL_RCC_OscConfig+0x44a>
 8004360:	4ba0      	ldr	r3, [pc, #640]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d16c      	bne.n	8004446 <HAL_RCC_OscConfig+0x44a>
 800436c:	2302      	movs	r3, #2
 800436e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800437e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_RCC_OscConfig+0x3a0>
 8004396:	4b93      	ldr	r3, [pc, #588]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	e013      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c8>
 800439c:	2302      	movs	r3, #2
 800439e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80043ae:	2302      	movs	r3, #2
 80043b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80043b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80043b8:	fa93 f3a3 	rbit	r3, r3
 80043bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80043c0:	4b88      	ldr	r3, [pc, #544]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	2202      	movs	r2, #2
 80043c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80043ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80043ce:	fa92 f2a2 	rbit	r2, r2
 80043d2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80043d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043da:	fab2 f282 	clz	r2, r2
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	f042 0220 	orr.w	r2, r2, #32
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	f002 021f 	and.w	r2, r2, #31
 80043ea:	2101      	movs	r1, #1
 80043ec:	fa01 f202 	lsl.w	r2, r1, r2
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCC_OscConfig+0x410>
 80043f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d002      	beq.n	800440c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f000 be2e 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b75      	ldr	r3, [pc, #468]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004418:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	21f8      	movs	r1, #248	@ 0xf8
 8004422:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800442a:	fa91 f1a1 	rbit	r1, r1
 800442e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004432:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004436:	fab1 f181 	clz	r1, r1
 800443a:	b2c9      	uxtb	r1, r1
 800443c:	408b      	lsls	r3, r1
 800443e:	4969      	ldr	r1, [pc, #420]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004444:	e0fd      	b.n	8004642 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8088 	beq.w	8004568 <HAL_RCC_OscConfig+0x56c>
 8004458:	2301      	movs	r3, #1
 800445a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800446a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004478:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	461a      	mov	r2, r3
 8004480:	2301      	movs	r3, #1
 8004482:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fe f802 	bl	800248c <HAL_GetTick>
 8004488:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800448e:	f7fd fffd 	bl	800248c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d902      	bls.n	80044a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	f000 bde2 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
 80044a4:	2302      	movs	r3, #2
 80044a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80044b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d102      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4d8>
 80044ce:	4b45      	ldr	r3, [pc, #276]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	e013      	b.n	80044fc <HAL_RCC_OscConfig+0x500>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80044e6:	2302      	movs	r3, #2
 80044e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80044ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80044f8:	4b3a      	ldr	r3, [pc, #232]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	2202      	movs	r2, #2
 80044fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004502:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004506:	fa92 f2a2 	rbit	r2, r2
 800450a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800450e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004512:	fab2 f282 	clz	r2, r2
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f042 0220 	orr.w	r2, r2, #32
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	f002 021f 	and.w	r2, r2, #31
 8004522:	2101      	movs	r1, #1
 8004524:	fa01 f202 	lsl.w	r2, r1, r2
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0af      	beq.n	800448e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b2d      	ldr	r3, [pc, #180]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	21f8      	movs	r1, #248	@ 0xf8
 8004544:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800454c:	fa91 f1a1 	rbit	r1, r1
 8004550:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004554:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004558:	fab1 f181 	clz	r1, r1
 800455c:	b2c9      	uxtb	r1, r1
 800455e:	408b      	lsls	r3, r1
 8004560:	4920      	ldr	r1, [pc, #128]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
 8004566:	e06c      	b.n	8004642 <HAL_RCC_OscConfig+0x646>
 8004568:	2301      	movs	r3, #1
 800456a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800457a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004588:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	461a      	mov	r2, r3
 8004590:	2300      	movs	r3, #0
 8004592:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fd ff7a 	bl	800248c <HAL_GetTick>
 8004598:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459e:	f7fd ff75 	bl	800248c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	f000 bd5a 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
 80045b4:	2302      	movs	r3, #2
 80045b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80045c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d104      	bne.n	80045e8 <HAL_RCC_OscConfig+0x5ec>
 80045de:	4b01      	ldr	r3, [pc, #4]	@ (80045e4 <HAL_RCC_OscConfig+0x5e8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	e015      	b.n	8004610 <HAL_RCC_OscConfig+0x614>
 80045e4:	40021000 	.word	0x40021000
 80045e8:	2302      	movs	r3, #2
 80045ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80045fa:	2302      	movs	r3, #2
 80045fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004600:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800460c:	4bc8      	ldr	r3, [pc, #800]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	2202      	movs	r2, #2
 8004612:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004616:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800461a:	fa92 f2a2 	rbit	r2, r2
 800461e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004622:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004626:	fab2 f282 	clz	r2, r2
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	f042 0220 	orr.w	r2, r2, #32
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	f002 021f 	and.w	r2, r2, #31
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f202 	lsl.w	r2, r1, r2
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ad      	bne.n	800459e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004646:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8110 	beq.w	8004878 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d079      	beq.n	800475c <HAL_RCC_OscConfig+0x760>
 8004668:	2301      	movs	r3, #1
 800466a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800467a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	4bab      	ldr	r3, [pc, #684]	@ (8004934 <HAL_RCC_OscConfig+0x938>)
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	2301      	movs	r3, #1
 8004690:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fd fefb 	bl	800248c <HAL_GetTick>
 8004696:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469c:	f7fd fef6 	bl	800248c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d902      	bls.n	80046b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f000 bcdb 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
 80046b2:	2302      	movs	r3, #2
 80046b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80046c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80046cc:	2202      	movs	r2, #2
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	fa93 f2a3 	rbit	r2, r3
 80046de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f0:	2202      	movs	r2, #2
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fa93 f2a3 	rbit	r2, r3
 8004702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004706:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800470a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470c:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 800470e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004714:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004718:	2102      	movs	r1, #2
 800471a:	6019      	str	r1, [r3, #0]
 800471c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004720:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	fa93 f1a3 	rbit	r1, r3
 800472a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004732:	6019      	str	r1, [r3, #0]
  return result;
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	2101      	movs	r1, #1
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	4013      	ands	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0a0      	beq.n	800469c <HAL_RCC_OscConfig+0x6a0>
 800475a:	e08d      	b.n	8004878 <HAL_RCC_OscConfig+0x87c>
 800475c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004760:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	fa93 f2a3 	rbit	r2, r3
 8004776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800477a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800477e:	601a      	str	r2, [r3, #0]
  return result;
 8004780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004784:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004788:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478a:	fab3 f383 	clz	r3, r3
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	4b68      	ldr	r3, [pc, #416]	@ (8004934 <HAL_RCC_OscConfig+0x938>)
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	461a      	mov	r2, r3
 800479a:	2300      	movs	r3, #0
 800479c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479e:	f7fd fe75 	bl	800248c <HAL_GetTick>
 80047a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fd fe70 	bl	800248c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d902      	bls.n	80047be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	f000 bc55 	b.w	8005068 <HAL_RCC_OscConfig+0x106c>
 80047be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80047c6:	2202      	movs	r2, #2
 80047c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	fa93 f2a3 	rbit	r2, r3
 80047d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047ea:	2202      	movs	r2, #2
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	fa93 f2a3 	rbit	r2, r3
 80047fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004800:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800480e:	2202      	movs	r2, #2
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004816:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fa93 f2a3 	rbit	r2, r3
 8004820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004824:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004828:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 800482c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800482e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004832:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004836:	2102      	movs	r1, #2
 8004838:	6019      	str	r1, [r3, #0]
 800483a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	fa93 f1a3 	rbit	r1, r3
 8004848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004850:	6019      	str	r1, [r3, #0]
  return result;
 8004852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004856:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	fab3 f383 	clz	r3, r3
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d197      	bne.n	80047a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 81a1 	beq.w	8004bd0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004894:	4b26      	ldr	r3, [pc, #152]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4a22      	ldr	r2, [pc, #136]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	61d3      	str	r3, [r2, #28]
 80048ac:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80048b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80048c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <HAL_RCC_OscConfig+0x93c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11a      	bne.n	8004910 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048da:	4b17      	ldr	r3, [pc, #92]	@ (8004938 <HAL_RCC_OscConfig+0x93c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a16      	ldr	r2, [pc, #88]	@ (8004938 <HAL_RCC_OscConfig+0x93c>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e6:	f7fd fdd1 	bl	800248c <HAL_GetTick>
 80048ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ee:	e009      	b.n	8004904 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f0:	f7fd fdcc 	bl	800248c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b64      	cmp	r3, #100	@ 0x64
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e3b1      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004904:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <HAL_RCC_OscConfig+0x93c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ef      	beq.n	80048f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004914:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10d      	bne.n	800493c <HAL_RCC_OscConfig+0x940>
 8004920:	4b03      	ldr	r3, [pc, #12]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	4a02      	ldr	r2, [pc, #8]	@ (8004930 <HAL_RCC_OscConfig+0x934>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6213      	str	r3, [r2, #32]
 800492c:	e03c      	b.n	80049a8 <HAL_RCC_OscConfig+0x9ac>
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	10908120 	.word	0x10908120
 8004938:	40007000 	.word	0x40007000
 800493c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004940:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_OscConfig+0x96a>
 800494c:	4bc1      	ldr	r3, [pc, #772]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4ac0      	ldr	r2, [pc, #768]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6213      	str	r3, [r2, #32]
 8004958:	4bbe      	ldr	r3, [pc, #760]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4abd      	ldr	r2, [pc, #756]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6213      	str	r3, [r2, #32]
 8004964:	e020      	b.n	80049a8 <HAL_RCC_OscConfig+0x9ac>
 8004966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b05      	cmp	r3, #5
 8004974:	d10c      	bne.n	8004990 <HAL_RCC_OscConfig+0x994>
 8004976:	4bb7      	ldr	r3, [pc, #732]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	4ab6      	ldr	r2, [pc, #728]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	6213      	str	r3, [r2, #32]
 8004982:	4bb4      	ldr	r3, [pc, #720]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	4ab3      	ldr	r2, [pc, #716]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	6213      	str	r3, [r2, #32]
 800498e:	e00b      	b.n	80049a8 <HAL_RCC_OscConfig+0x9ac>
 8004990:	4bb0      	ldr	r3, [pc, #704]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	4aaf      	ldr	r2, [pc, #700]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	6213      	str	r3, [r2, #32]
 800499c:	4bad      	ldr	r3, [pc, #692]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4aac      	ldr	r2, [pc, #688]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 80049a2:	f023 0304 	bic.w	r3, r3, #4
 80049a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8081 	beq.w	8004abc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fd fd67 	bl	800248c <HAL_GetTick>
 80049be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fd fd62 	bl	800248c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e345      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80049e4:	2202      	movs	r2, #2
 80049e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	fa93 f2a3 	rbit	r2, r3
 80049f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a08:	2202      	movs	r2, #2
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a10:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	fa93 f2a3 	rbit	r2, r3
 8004a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a22:	601a      	str	r2, [r3, #0]
  return result;
 8004a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a28:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d102      	bne.n	8004a48 <HAL_RCC_OscConfig+0xa4c>
 8004a42:	4b84      	ldr	r3, [pc, #528]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	e013      	b.n	8004a70 <HAL_RCC_OscConfig+0xa74>
 8004a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a50:	2202      	movs	r2, #2
 8004a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	fa93 f2a3 	rbit	r2, r3
 8004a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a66:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	4b79      	ldr	r3, [pc, #484]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004a78:	2102      	movs	r1, #2
 8004a7a:	6011      	str	r1, [r2, #0]
 8004a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	fa92 f1a2 	rbit	r1, r2
 8004a8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a8e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004a92:	6011      	str	r1, [r2, #0]
  return result;
 8004a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a98:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	fab2 f282 	clz	r2, r2
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	f002 021f 	and.w	r2, r2, #31
 8004aae:	2101      	movs	r1, #1
 8004ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d084      	beq.n	80049c4 <HAL_RCC_OscConfig+0x9c8>
 8004aba:	e07f      	b.n	8004bbc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abc:	f7fd fce6 	bl	800248c <HAL_GetTick>
 8004ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac4:	e00b      	b.n	8004ade <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fd fce1 	bl	800248c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e2c4      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
 8004ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	fa93 f2a3 	rbit	r2, r3
 8004af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b12:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	fa93 f2a3 	rbit	r2, r3
 8004b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004b24:	601a      	str	r2, [r3, #0]
  return result;
 8004b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004b2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f043 0302 	orr.w	r3, r3, #2
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d102      	bne.n	8004b4a <HAL_RCC_OscConfig+0xb4e>
 8004b44:	4b43      	ldr	r3, [pc, #268]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	e013      	b.n	8004b72 <HAL_RCC_OscConfig+0xb76>
 8004b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b52:	2202      	movs	r2, #2
 8004b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b5a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	fa93 f2a3 	rbit	r2, r3
 8004b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b68:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b76:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	6011      	str	r1, [r2, #0]
 8004b7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b82:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	fa92 f1a2 	rbit	r1, r2
 8004b8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b90:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004b94:	6011      	str	r1, [r2, #0]
  return result;
 8004b96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b9a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	fab2 f282 	clz	r2, r2
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	f002 021f 	and.w	r2, r2, #31
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d184      	bne.n	8004ac6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bbc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc4:	4b23      	ldr	r3, [pc, #140]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	4a22      	ldr	r2, [pc, #136]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8242 	beq.w	8005066 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c54 <HAL_RCC_OscConfig+0xc58>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	f000 8213 	beq.w	8005016 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f040 8162 	bne.w	8004ec6 <HAL_RCC_OscConfig+0xeca>
 8004c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c06:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004c0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c14:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	fa93 f2a3 	rbit	r2, r3
 8004c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c22:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004c26:	601a      	str	r2, [r3, #0]
  return result;
 8004c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004c30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004c3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	461a      	mov	r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fd fc20 	bl	800248c <HAL_GetTick>
 8004c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c50:	e00c      	b.n	8004c6c <HAL_RCC_OscConfig+0xc70>
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fd fc18 	bl	800248c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e1fd      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
 8004c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c70:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004c74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	fa93 f2a3 	rbit	r2, r3
 8004c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c8c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004c90:	601a      	str	r2, [r3, #0]
  return result;
 8004c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c96:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004c9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c9c:	fab3 f383 	clz	r3, r3
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCC_OscConfig+0xcba>
 8004cb0:	4bb0      	ldr	r3, [pc, #704]	@ (8004f74 <HAL_RCC_OscConfig+0xf78>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	e027      	b.n	8004d06 <HAL_RCC_OscConfig+0xd0a>
 8004cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004cbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	fa93 f2a3 	rbit	r2, r3
 8004cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	fa93 f2a3 	rbit	r2, r3
 8004cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	4b9c      	ldr	r3, [pc, #624]	@ (8004f74 <HAL_RCC_OscConfig+0xf78>)
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d0a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004d0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004d12:	6011      	str	r1, [r2, #0]
 8004d14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d18:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	fa92 f1a2 	rbit	r1, r2
 8004d22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d26:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004d2a:	6011      	str	r1, [r2, #0]
  return result;
 8004d2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d30:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	fab2 f282 	clz	r2, r2
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	f042 0220 	orr.w	r2, r2, #32
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	f002 021f 	and.w	r2, r2, #31
 8004d46:	2101      	movs	r1, #1
 8004d48:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d182      	bne.n	8004c58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d52:	4b88      	ldr	r3, [pc, #544]	@ (8004f74 <HAL_RCC_OscConfig+0xf78>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	430b      	orrs	r3, r1
 8004d74:	497f      	ldr	r1, [pc, #508]	@ (8004f74 <HAL_RCC_OscConfig+0xf78>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	604b      	str	r3, [r1, #4]
 8004d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d7e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004d82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d8c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	fa93 f2a3 	rbit	r2, r3
 8004d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d9a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004d9e:	601a      	str	r2, [r3, #0]
  return result;
 8004da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004da8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004db4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fb64 	bl	800248c <HAL_GetTick>
 8004dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc8:	e009      	b.n	8004dde <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fd fb5f 	bl	800248c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e144      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
 8004dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004de6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fa93 f2a3 	rbit	r2, r3
 8004dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004e02:	601a      	str	r2, [r3, #0]
  return result;
 8004e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e08:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004e0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d102      	bne.n	8004e28 <HAL_RCC_OscConfig+0xe2c>
 8004e22:	4b54      	ldr	r3, [pc, #336]	@ (8004f74 <HAL_RCC_OscConfig+0xf78>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	e027      	b.n	8004e78 <HAL_RCC_OscConfig+0xe7c>
 8004e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004e30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e3a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	fa93 f2a3 	rbit	r2, r3
 8004e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e52:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e60:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	fa93 f2a3 	rbit	r2, r3
 8004e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e6e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	4b3f      	ldr	r3, [pc, #252]	@ (8004f74 <HAL_RCC_OscConfig+0xf78>)
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e7c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004e80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e84:	6011      	str	r1, [r2, #0]
 8004e86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e8a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	fa92 f1a2 	rbit	r1, r2
 8004e94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e98:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004e9c:	6011      	str	r1, [r2, #0]
  return result;
 8004e9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ea2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	fab2 f282 	clz	r2, r2
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	f042 0220 	orr.w	r2, r2, #32
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	f002 021f 	and.w	r2, r2, #31
 8004eb8:	2101      	movs	r1, #1
 8004eba:	fa01 f202 	lsl.w	r2, r1, r2
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d082      	beq.n	8004dca <HAL_RCC_OscConfig+0xdce>
 8004ec4:	e0cf      	b.n	8005066 <HAL_RCC_OscConfig+0x106a>
 8004ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004ece:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	fa93 f2a3 	rbit	r2, r3
 8004ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004eea:	601a      	str	r2, [r3, #0]
  return result;
 8004eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004ef4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	461a      	mov	r2, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fd fabe 	bl	800248c <HAL_GetTick>
 8004f10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f14:	e009      	b.n	8004f2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd fab9 	bl	800248c <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e09e      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
 8004f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f2e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004f32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	fa93 f2a3 	rbit	r2, r3
 8004f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f4e:	601a      	str	r2, [r3, #0]
  return result;
 8004f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5a:	fab3 f383 	clz	r3, r3
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d104      	bne.n	8004f78 <HAL_RCC_OscConfig+0xf7c>
 8004f6e:	4b01      	ldr	r3, [pc, #4]	@ (8004f74 <HAL_RCC_OscConfig+0xf78>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	e029      	b.n	8004fc8 <HAL_RCC_OscConfig+0xfcc>
 8004f74:	40021000 	.word	0x40021000
 8004f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	fa93 f2a3 	rbit	r2, r3
 8004f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f98:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004fa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	fa93 f2a3 	rbit	r2, r3
 8004fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <HAL_RCC_OscConfig+0x1078>)
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fcc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004fd0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fda:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	fa92 f1a2 	rbit	r1, r2
 8004fe4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fe8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004fec:	6011      	str	r1, [r2, #0]
  return result;
 8004fee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ff2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	fab2 f282 	clz	r2, r2
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	f042 0220 	orr.w	r2, r2, #32
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	f002 021f 	and.w	r2, r2, #31
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f202 	lsl.w	r2, r1, r2
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d180      	bne.n	8004f16 <HAL_RCC_OscConfig+0xf1a>
 8005014:	e027      	b.n	8005066 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800501a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e01e      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800502a:	4b12      	ldr	r3, [pc, #72]	@ (8005074 <HAL_RCC_OscConfig+0x1078>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005032:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005036:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800503a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800503e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	429a      	cmp	r2, r3
 8005048:	d10b      	bne.n	8005062 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800504a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800504e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800505e:	429a      	cmp	r2, r3
 8005060:	d001      	beq.n	8005066 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000

08005078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b09e      	sub	sp, #120	@ 0x78
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e162      	b.n	8005356 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005090:	4b90      	ldr	r3, [pc, #576]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d910      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b8d      	ldr	r3, [pc, #564]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 0207 	bic.w	r2, r3, #7
 80050a6:	498b      	ldr	r1, [pc, #556]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b89      	ldr	r3, [pc, #548]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e14a      	b.n	8005356 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b82      	ldr	r3, [pc, #520]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	497f      	ldr	r1, [pc, #508]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 80dc 	beq.w	80052a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d13c      	bne.n	800516e <HAL_RCC_ClockConfig+0xf6>
 80050f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d102      	bne.n	800511e <HAL_RCC_ClockConfig+0xa6>
 8005118:	4b6f      	ldr	r3, [pc, #444]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	e00f      	b.n	800513e <HAL_RCC_ClockConfig+0xc6>
 800511e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005122:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005126:	fa93 f3a3 	rbit	r3, r3
 800512a:	667b      	str	r3, [r7, #100]	@ 0x64
 800512c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005130:	663b      	str	r3, [r7, #96]	@ 0x60
 8005132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800513a:	4b67      	ldr	r3, [pc, #412]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005142:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005146:	fa92 f2a2 	rbit	r2, r2
 800514a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800514c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800514e:	fab2 f282 	clz	r2, r2
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	f042 0220 	orr.w	r2, r2, #32
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	f002 021f 	and.w	r2, r2, #31
 800515e:	2101      	movs	r1, #1
 8005160:	fa01 f202 	lsl.w	r2, r1, r2
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d17b      	bne.n	8005262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0f3      	b.n	8005356 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d13c      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x178>
 8005176:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800517a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800517e:	fa93 f3a3 	rbit	r3, r3
 8005182:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 800519a:	4b4f      	ldr	r3, [pc, #316]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	e00f      	b.n	80051c0 <HAL_RCC_ClockConfig+0x148>
 80051a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80051b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051bc:	4b46      	ldr	r3, [pc, #280]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80051c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051c8:	fa92 f2a2 	rbit	r2, r2
 80051cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80051ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051d0:	fab2 f282 	clz	r2, r2
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	f042 0220 	orr.w	r2, r2, #32
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	f002 021f 	and.w	r2, r2, #31
 80051e0:	2101      	movs	r1, #1
 80051e2:	fa01 f202 	lsl.w	r2, r1, r2
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d13a      	bne.n	8005262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0b2      	b.n	8005356 <HAL_RCC_ClockConfig+0x2de>
 80051f0:	2302      	movs	r3, #2
 80051f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	fa93 f3a3 	rbit	r3, r3
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d102      	bne.n	8005218 <HAL_RCC_ClockConfig+0x1a0>
 8005212:	4b31      	ldr	r3, [pc, #196]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	e00d      	b.n	8005234 <HAL_RCC_ClockConfig+0x1bc>
 8005218:	2302      	movs	r3, #2
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	fa93 f3a3 	rbit	r3, r3
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
 8005224:	2302      	movs	r3, #2
 8005226:	623b      	str	r3, [r7, #32]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	4b29      	ldr	r3, [pc, #164]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	2202      	movs	r2, #2
 8005236:	61ba      	str	r2, [r7, #24]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	fa92 f2a2 	rbit	r2, r2
 800523e:	617a      	str	r2, [r7, #20]
  return result;
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	fab2 f282 	clz	r2, r2
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	f042 0220 	orr.w	r2, r2, #32
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	f002 021f 	and.w	r2, r2, #31
 8005252:	2101      	movs	r1, #1
 8005254:	fa01 f202 	lsl.w	r2, r1, r2
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e079      	b.n	8005356 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b1d      	ldr	r3, [pc, #116]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	491a      	ldr	r1, [pc, #104]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7fd f90a 	bl	800248c <HAL_GetTick>
 8005278:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7fd f906 	bl	800248c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e061      	b.n	8005356 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <HAL_RCC_ClockConfig+0x260>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d214      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 0207 	bic.w	r2, r3, #7
 80052ba:	4906      	ldr	r1, [pc, #24]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e040      	b.n	8005356 <HAL_RCC_ClockConfig+0x2de>
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <HAL_RCC_ClockConfig+0x2e8>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	491a      	ldr	r1, [pc, #104]	@ (8005360 <HAL_RCC_ClockConfig+0x2e8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005306:	4b16      	ldr	r3, [pc, #88]	@ (8005360 <HAL_RCC_ClockConfig+0x2e8>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4912      	ldr	r1, [pc, #72]	@ (8005360 <HAL_RCC_ClockConfig+0x2e8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800531a:	f000 f829 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800531e:	4601      	mov	r1, r0
 8005320:	4b0f      	ldr	r3, [pc, #60]	@ (8005360 <HAL_RCC_ClockConfig+0x2e8>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005328:	22f0      	movs	r2, #240	@ 0xf0
 800532a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	fa92 f2a2 	rbit	r2, r2
 8005332:	60fa      	str	r2, [r7, #12]
  return result;
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	fab2 f282 	clz	r2, r2
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	40d3      	lsrs	r3, r2
 800533e:	4a09      	ldr	r2, [pc, #36]	@ (8005364 <HAL_RCC_ClockConfig+0x2ec>)
 8005340:	5cd3      	ldrb	r3, [r2, r3]
 8005342:	fa21 f303 	lsr.w	r3, r1, r3
 8005346:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <HAL_RCC_ClockConfig+0x2f0>)
 8005348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800534a:	4b08      	ldr	r3, [pc, #32]	@ (800536c <HAL_RCC_ClockConfig+0x2f4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f7fd f858 	bl	8002404 <HAL_InitTick>
  
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3778      	adds	r7, #120	@ 0x78
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	08009098 	.word	0x08009098
 8005368:	20000008 	.word	0x20000008
 800536c:	2000000c 	.word	0x2000000c

08005370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800538a:	4b1e      	ldr	r3, [pc, #120]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x94>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d002      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x30>
 800539a:	2b08      	cmp	r3, #8
 800539c:	d003      	beq.n	80053a6 <HAL_RCC_GetSysClockFreq+0x36>
 800539e:	e026      	b.n	80053ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053a0:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053a2:	613b      	str	r3, [r7, #16]
      break;
 80053a4:	e026      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	0c9b      	lsrs	r3, r3, #18
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	4a17      	ldr	r2, [pc, #92]	@ (800540c <HAL_RCC_GetSysClockFreq+0x9c>)
 80053b0:	5cd3      	ldrb	r3, [r2, r3]
 80053b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80053b4:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x94>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053be:	5cd3      	ldrb	r3, [r2, r3]
 80053c0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e004      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005414 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	613b      	str	r3, [r7, #16]
      break;
 80053ec:	e002      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <HAL_RCC_GetSysClockFreq+0xa8>)
 80053f0:	613b      	str	r3, [r7, #16]
      break;
 80053f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f4:	693b      	ldr	r3, [r7, #16]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000
 8005408:	00f42400 	.word	0x00f42400
 800540c:	080090b0 	.word	0x080090b0
 8005410:	080090c0 	.word	0x080090c0
 8005414:	003d0900 	.word	0x003d0900
 8005418:	007a1200 	.word	0x007a1200

0800541c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005420:	4b03      	ldr	r3, [pc, #12]	@ (8005430 <HAL_RCC_GetHCLKFreq+0x14>)
 8005422:	681b      	ldr	r3, [r3, #0]
}
 8005424:	4618      	mov	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	20000008 	.word	0x20000008

08005434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800543a:	f7ff ffef 	bl	800541c <HAL_RCC_GetHCLKFreq>
 800543e:	4601      	mov	r1, r0
 8005440:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005448:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800544c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	fa92 f2a2 	rbit	r2, r2
 8005454:	603a      	str	r2, [r7, #0]
  return result;
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	fab2 f282 	clz	r2, r2
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	40d3      	lsrs	r3, r2
 8005460:	4a04      	ldr	r2, [pc, #16]	@ (8005474 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	080090a8 	.word	0x080090a8

08005478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800547e:	f7ff ffcd 	bl	800541c <HAL_RCC_GetHCLKFreq>
 8005482:	4601      	mov	r1, r0
 8005484:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800548c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005490:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	fa92 f2a2 	rbit	r2, r2
 8005498:	603a      	str	r2, [r7, #0]
  return result;
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	fab2 f282 	clz	r2, r2
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	40d3      	lsrs	r3, r2
 80054a4:	4a04      	ldr	r2, [pc, #16]	@ (80054b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80054a6:	5cd3      	ldrb	r3, [r2, r3]
 80054a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40021000 	.word	0x40021000
 80054b8:	080090a8 	.word	0x080090a8

080054bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b092      	sub	sp, #72	@ 0x48
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80d4 	beq.w	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e0:	4b4e      	ldr	r3, [pc, #312]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10e      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ec:	4b4b      	ldr	r3, [pc, #300]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	4a4a      	ldr	r2, [pc, #296]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f6:	61d3      	str	r3, [r2, #28]
 80054f8:	4b48      	ldr	r3, [pc, #288]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	4b45      	ldr	r3, [pc, #276]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d118      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005516:	4b42      	ldr	r3, [pc, #264]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a41      	ldr	r2, [pc, #260]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800551c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005522:	f7fc ffb3 	bl	800248c <HAL_GetTick>
 8005526:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005528:	e008      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552a:	f7fc ffaf 	bl	800248c <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b64      	cmp	r3, #100	@ 0x64
 8005536:	d901      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e169      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553c:	4b38      	ldr	r3, [pc, #224]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005548:	4b34      	ldr	r3, [pc, #208]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005550:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8084 	beq.w	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005562:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005564:	429a      	cmp	r2, r3
 8005566:	d07c      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005568:	4b2c      	ldr	r3, [pc, #176]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005572:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005576:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	fa93 f3a3 	rbit	r3, r3
 800557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005582:	fab3 f383 	clz	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	4b26      	ldr	r3, [pc, #152]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	461a      	mov	r2, r3
 8005592:	2301      	movs	r3, #1
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800559a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559e:	fa93 f3a3 	rbit	r3, r3
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80055a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055a6:	fab3 f383 	clz	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d04b      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fc ff5f 	bl	800248c <HAL_GetTick>
 80055ce:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fc ff5b 	bl	800248c <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e113      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80055e8:	2302      	movs	r3, #2
 80055ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	fa93 f3a3 	rbit	r3, r3
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f4:	2302      	movs	r3, #2
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005600:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d108      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005616:	4b01      	ldr	r3, [pc, #4]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	e00d      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800561c:	40021000 	.word	0x40021000
 8005620:	40007000 	.word	0x40007000
 8005624:	10908100 	.word	0x10908100
 8005628:	2302      	movs	r3, #2
 800562a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	fa93 f3a3 	rbit	r3, r3
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	4b78      	ldr	r3, [pc, #480]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	2202      	movs	r2, #2
 800563a:	613a      	str	r2, [r7, #16]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	fa92 f2a2 	rbit	r2, r2
 8005642:	60fa      	str	r2, [r7, #12]
  return result;
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	fab2 f282 	clz	r2, r2
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	f002 021f 	and.w	r2, r2, #31
 8005656:	2101      	movs	r1, #1
 8005658:	fa01 f202 	lsl.w	r2, r1, r2
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0b7      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005662:	4b6d      	ldr	r3, [pc, #436]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	496a      	ldr	r1, [pc, #424]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005670:	4313      	orrs	r3, r2
 8005672:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005674:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005678:	2b01      	cmp	r3, #1
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567c:	4b66      	ldr	r3, [pc, #408]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	4a65      	ldr	r2, [pc, #404]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005686:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005694:	4b60      	ldr	r3, [pc, #384]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	f023 0203 	bic.w	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	495d      	ldr	r1, [pc, #372]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056b2:	4b59      	ldr	r3, [pc, #356]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	4956      	ldr	r1, [pc, #344]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056d0:	4b51      	ldr	r3, [pc, #324]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	494e      	ldr	r1, [pc, #312]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f2:	f023 0210 	bic.w	r2, r3, #16
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4947      	ldr	r1, [pc, #284]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800570c:	4b42      	ldr	r3, [pc, #264]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	493f      	ldr	r1, [pc, #252]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800571a:	4313      	orrs	r3, r2
 800571c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800572a:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572e:	f023 0220 	bic.w	r2, r3, #32
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	4938      	ldr	r1, [pc, #224]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005738:	4313      	orrs	r3, r2
 800573a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005748:	4b33      	ldr	r3, [pc, #204]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	4930      	ldr	r1, [pc, #192]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005766:	4b2c      	ldr	r3, [pc, #176]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	4929      	ldr	r1, [pc, #164]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005774:	4313      	orrs	r3, r2
 8005776:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005784:	4b24      	ldr	r3, [pc, #144]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	4921      	ldr	r1, [pc, #132]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	491a      	ldr	r1, [pc, #104]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80057c0:	4b15      	ldr	r3, [pc, #84]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	4912      	ldr	r1, [pc, #72]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	490b      	ldr	r1, [pc, #44]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80057fc:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005808:	4903      	ldr	r1, [pc, #12]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800580a:	4313      	orrs	r3, r2
 800580c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3748      	adds	r7, #72	@ 0x48
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000

0800581c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e09d      	b.n	800596a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800583e:	d009      	beq.n	8005854 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
 8005846:	e005      	b.n	8005854 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fc fabc 	bl	8001dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800588a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005894:	d902      	bls.n	800589c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	e002      	b.n	80058a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800589c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058aa:	d007      	beq.n	80058bc <HAL_SPI_Init+0xa0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058b4:	d002      	beq.n	80058bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fe:	ea42 0103 	orr.w	r1, r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	f003 0204 	and.w	r2, r3, #4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005938:	ea42 0103 	orr.w	r1, r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005958:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e049      	b.n	8005a18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fc fa6b 	bl	8001e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f001 f851 	bl	8006a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d001      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e04a      	b.n	8005ace <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a21      	ldr	r2, [pc, #132]	@ (8005adc <HAL_TIM_Base_Start_IT+0xbc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0x6c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a62:	d013      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0x6c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0x6c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0x6c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0x6c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a19      	ldr	r2, [pc, #100]	@ (8005aec <HAL_TIM_Base_Start_IT+0xcc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d115      	bne.n	8005ab8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	4b17      	ldr	r3, [pc, #92]	@ (8005af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b06      	cmp	r3, #6
 8005a9c:	d015      	beq.n	8005aca <HAL_TIM_Base_Start_IT+0xaa>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa4:	d011      	beq.n	8005aca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	e008      	b.n	8005aca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e000      	b.n	8005acc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	00010007 	.word	0x00010007

08005af4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10f      	bne.n	8005b3c <HAL_TIM_Base_Stop_IT+0x48>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b26:	4013      	ands	r3, r2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_Base_Stop_IT+0x48>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e049      	b.n	8005bf8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f841 	bl	8005c00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f000 ff61 	bl	8006a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_TIM_PWM_Start+0x24>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	bf14      	ite	ne
 8005c30:	2301      	movne	r3, #1
 8005c32:	2300      	moveq	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e03c      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x9e>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d109      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x3e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	bf14      	ite	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	2300      	moveq	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	e02f      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x9e>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d109      	bne.n	8005c6c <HAL_TIM_PWM_Start+0x58>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	bf14      	ite	ne
 8005c64:	2301      	movne	r3, #1
 8005c66:	2300      	moveq	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e022      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x9e>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d109      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x72>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	bf14      	ite	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	2300      	moveq	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	e015      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x9e>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d109      	bne.n	8005ca0 <HAL_TIM_PWM_Start+0x8c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	e008      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x9e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e097      	b.n	8005dea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d104      	bne.n	8005cca <HAL_TIM_PWM_Start+0xb6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cc8:	e023      	b.n	8005d12 <HAL_TIM_PWM_Start+0xfe>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d104      	bne.n	8005cda <HAL_TIM_PWM_Start+0xc6>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd8:	e01b      	b.n	8005d12 <HAL_TIM_PWM_Start+0xfe>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d104      	bne.n	8005cea <HAL_TIM_PWM_Start+0xd6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce8:	e013      	b.n	8005d12 <HAL_TIM_PWM_Start+0xfe>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b0c      	cmp	r3, #12
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_PWM_Start+0xe6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cf8:	e00b      	b.n	8005d12 <HAL_TIM_PWM_Start+0xfe>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Start+0xf6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d08:	e003      	b.n	8005d12 <HAL_TIM_PWM_Start+0xfe>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 fbc6 	bl	80074ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a33      	ldr	r2, [pc, #204]	@ (8005df4 <HAL_TIM_PWM_Start+0x1e0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x13e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a32      	ldr	r2, [pc, #200]	@ (8005df8 <HAL_TIM_PWM_Start+0x1e4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00e      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x13e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a30      	ldr	r2, [pc, #192]	@ (8005dfc <HAL_TIM_PWM_Start+0x1e8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d009      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x13e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2f      	ldr	r2, [pc, #188]	@ (8005e00 <HAL_TIM_PWM_Start+0x1ec>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x13e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e04 <HAL_TIM_PWM_Start+0x1f0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d101      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x142>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <HAL_TIM_PWM_Start+0x144>
 8005d56:	2300      	movs	r3, #0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a20      	ldr	r2, [pc, #128]	@ (8005df4 <HAL_TIM_PWM_Start+0x1e0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d018      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x194>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7e:	d013      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x194>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a20      	ldr	r2, [pc, #128]	@ (8005e08 <HAL_TIM_PWM_Start+0x1f4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00e      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x194>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e0c <HAL_TIM_PWM_Start+0x1f8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d009      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x194>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a17      	ldr	r2, [pc, #92]	@ (8005df8 <HAL_TIM_PWM_Start+0x1e4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x194>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a16      	ldr	r2, [pc, #88]	@ (8005dfc <HAL_TIM_PWM_Start+0x1e8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d115      	bne.n	8005dd4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	4b18      	ldr	r3, [pc, #96]	@ (8005e10 <HAL_TIM_PWM_Start+0x1fc>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b06      	cmp	r3, #6
 8005db8:	d015      	beq.n	8005de6 <HAL_TIM_PWM_Start+0x1d2>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc0:	d011      	beq.n	8005de6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd2:	e008      	b.n	8005de6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e000      	b.n	8005de8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	00010007 	.word	0x00010007

08005e14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fb40 	bl	80074ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a3e      	ldr	r2, [pc, #248]	@ (8005f2c <HAL_TIM_PWM_Stop+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <HAL_TIM_PWM_Stop+0x4a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005f30 <HAL_TIM_PWM_Stop+0x11c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00e      	beq.n	8005e5e <HAL_TIM_PWM_Stop+0x4a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3b      	ldr	r2, [pc, #236]	@ (8005f34 <HAL_TIM_PWM_Stop+0x120>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d009      	beq.n	8005e5e <HAL_TIM_PWM_Stop+0x4a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f38 <HAL_TIM_PWM_Stop+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d004      	beq.n	8005e5e <HAL_TIM_PWM_Stop+0x4a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a38      	ldr	r2, [pc, #224]	@ (8005f3c <HAL_TIM_PWM_Stop+0x128>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_TIM_PWM_Stop+0x4e>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <HAL_TIM_PWM_Stop+0x50>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d017      	beq.n	8005e98 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e72:	4013      	ands	r3, r2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10f      	bne.n	8005e98 <HAL_TIM_PWM_Stop+0x84>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d107      	bne.n	8005e98 <HAL_TIM_PWM_Stop+0x84>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_TIM_PWM_Stop+0xb4>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	f240 4344 	movw	r3, #1092	@ 0x444
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <HAL_TIM_PWM_Stop+0xb4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <HAL_TIM_PWM_Stop+0xc4>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ed6:	e023      	b.n	8005f20 <HAL_TIM_PWM_Stop+0x10c>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d104      	bne.n	8005ee8 <HAL_TIM_PWM_Stop+0xd4>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ee6:	e01b      	b.n	8005f20 <HAL_TIM_PWM_Stop+0x10c>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d104      	bne.n	8005ef8 <HAL_TIM_PWM_Stop+0xe4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ef6:	e013      	b.n	8005f20 <HAL_TIM_PWM_Stop+0x10c>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d104      	bne.n	8005f08 <HAL_TIM_PWM_Stop+0xf4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f06:	e00b      	b.n	8005f20 <HAL_TIM_PWM_Stop+0x10c>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b10      	cmp	r3, #16
 8005f0c:	d104      	bne.n	8005f18 <HAL_TIM_PWM_Stop+0x104>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f16:	e003      	b.n	8005f20 <HAL_TIM_PWM_Stop+0x10c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40013400 	.word	0x40013400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800

08005f40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e049      	b.n	8005fe6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f841 	bl	8005fee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f000 fd6a 	bl	8006a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <HAL_TIM_IC_Start_IT+0x1e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800601e:	b2db      	uxtb	r3, r3
 8006020:	e023      	b.n	800606a <HAL_TIM_IC_Start_IT+0x66>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b04      	cmp	r3, #4
 8006026:	d104      	bne.n	8006032 <HAL_TIM_IC_Start_IT+0x2e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800602e:	b2db      	uxtb	r3, r3
 8006030:	e01b      	b.n	800606a <HAL_TIM_IC_Start_IT+0x66>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b08      	cmp	r3, #8
 8006036:	d104      	bne.n	8006042 <HAL_TIM_IC_Start_IT+0x3e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800603e:	b2db      	uxtb	r3, r3
 8006040:	e013      	b.n	800606a <HAL_TIM_IC_Start_IT+0x66>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d104      	bne.n	8006052 <HAL_TIM_IC_Start_IT+0x4e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	e00b      	b.n	800606a <HAL_TIM_IC_Start_IT+0x66>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b10      	cmp	r3, #16
 8006056:	d104      	bne.n	8006062 <HAL_TIM_IC_Start_IT+0x5e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800605e:	b2db      	uxtb	r3, r3
 8006060:	e003      	b.n	800606a <HAL_TIM_IC_Start_IT+0x66>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006068:	b2db      	uxtb	r3, r3
 800606a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <HAL_TIM_IC_Start_IT+0x78>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e013      	b.n	80060a4 <HAL_TIM_IC_Start_IT+0xa0>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d104      	bne.n	800608c <HAL_TIM_IC_Start_IT+0x88>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e00b      	b.n	80060a4 <HAL_TIM_IC_Start_IT+0xa0>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b08      	cmp	r3, #8
 8006090:	d104      	bne.n	800609c <HAL_TIM_IC_Start_IT+0x98>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006098:	b2db      	uxtb	r3, r3
 800609a:	e003      	b.n	80060a4 <HAL_TIM_IC_Start_IT+0xa0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d102      	bne.n	80060b2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ac:	7b7b      	ldrb	r3, [r7, #13]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d001      	beq.n	80060b6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e0d8      	b.n	8006268 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_IC_Start_IT+0xc2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c4:	e023      	b.n	800610e <HAL_TIM_IC_Start_IT+0x10a>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_IC_Start_IT+0xd2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060d4:	e01b      	b.n	800610e <HAL_TIM_IC_Start_IT+0x10a>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_IC_Start_IT+0xe2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e4:	e013      	b.n	800610e <HAL_TIM_IC_Start_IT+0x10a>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_IC_Start_IT+0xf2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060f4:	e00b      	b.n	800610e <HAL_TIM_IC_Start_IT+0x10a>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_IC_Start_IT+0x102>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006104:	e003      	b.n	800610e <HAL_TIM_IC_Start_IT+0x10a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <HAL_TIM_IC_Start_IT+0x11a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800611c:	e013      	b.n	8006146 <HAL_TIM_IC_Start_IT+0x142>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d104      	bne.n	800612e <HAL_TIM_IC_Start_IT+0x12a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800612c:	e00b      	b.n	8006146 <HAL_TIM_IC_Start_IT+0x142>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d104      	bne.n	800613e <HAL_TIM_IC_Start_IT+0x13a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800613c:	e003      	b.n	8006146 <HAL_TIM_IC_Start_IT+0x142>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b0c      	cmp	r3, #12
 800614a:	d841      	bhi.n	80061d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800614c:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <HAL_TIM_IC_Start_IT+0x150>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	08006189 	.word	0x08006189
 8006158:	080061d1 	.word	0x080061d1
 800615c:	080061d1 	.word	0x080061d1
 8006160:	080061d1 	.word	0x080061d1
 8006164:	0800619b 	.word	0x0800619b
 8006168:	080061d1 	.word	0x080061d1
 800616c:	080061d1 	.word	0x080061d1
 8006170:	080061d1 	.word	0x080061d1
 8006174:	080061ad 	.word	0x080061ad
 8006178:	080061d1 	.word	0x080061d1
 800617c:	080061d1 	.word	0x080061d1
 8006180:	080061d1 	.word	0x080061d1
 8006184:	080061bf 	.word	0x080061bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0202 	orr.w	r2, r2, #2
 8006196:	60da      	str	r2, [r3, #12]
      break;
 8006198:	e01d      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0204 	orr.w	r2, r2, #4
 80061a8:	60da      	str	r2, [r3, #12]
      break;
 80061aa:	e014      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0208 	orr.w	r2, r2, #8
 80061ba:	60da      	str	r2, [r3, #12]
      break;
 80061bc:	e00b      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0210 	orr.w	r2, r2, #16
 80061cc:	60da      	str	r2, [r3, #12]
      break;
 80061ce:	e002      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
      break;
 80061d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d144      	bne.n	8006266 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2201      	movs	r2, #1
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f961 	bl	80074ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a20      	ldr	r2, [pc, #128]	@ (8006270 <HAL_TIM_IC_Start_IT+0x26c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d018      	beq.n	8006226 <HAL_TIM_IC_Start_IT+0x222>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fc:	d013      	beq.n	8006226 <HAL_TIM_IC_Start_IT+0x222>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <HAL_TIM_IC_Start_IT+0x270>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <HAL_TIM_IC_Start_IT+0x222>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1a      	ldr	r2, [pc, #104]	@ (8006278 <HAL_TIM_IC_Start_IT+0x274>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_TIM_IC_Start_IT+0x222>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a19      	ldr	r2, [pc, #100]	@ (800627c <HAL_TIM_IC_Start_IT+0x278>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_TIM_IC_Start_IT+0x222>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <HAL_TIM_IC_Start_IT+0x27c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d115      	bne.n	8006252 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <HAL_TIM_IC_Start_IT+0x280>)
 800622e:	4013      	ands	r3, r2
 8006230:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b06      	cmp	r3, #6
 8006236:	d015      	beq.n	8006264 <HAL_TIM_IC_Start_IT+0x260>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623e:	d011      	beq.n	8006264 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006250:	e008      	b.n	8006264 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e000      	b.n	8006266 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006264:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40012c00 	.word	0x40012c00
 8006274:	40000400 	.word	0x40000400
 8006278:	40000800 	.word	0x40000800
 800627c:	40013400 	.word	0x40013400
 8006280:	40014000 	.word	0x40014000
 8006284:	00010007 	.word	0x00010007

08006288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d020      	beq.n	80062ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01b      	beq.n	80062ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0202 	mvn.w	r2, #2
 80062bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fa ff8a 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fb9e 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fba5 	bl	8006a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d020      	beq.n	8006338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01b      	beq.n	8006338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0204 	mvn.w	r2, #4
 8006308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fa ff64 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 8006324:	e005      	b.n	8006332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fb78 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb7f 	bl	8006a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d020      	beq.n	8006384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0208 	mvn.w	r2, #8
 8006354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fa ff3e 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 8006370:	e005      	b.n	800637e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fb52 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fb59 	bl	8006a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	2b00      	cmp	r3, #0
 800638c:	d020      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01b      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0210 	mvn.w	r2, #16
 80063a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2208      	movs	r2, #8
 80063a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fa ff18 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 80063bc:	e005      	b.n	80063ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fb2c 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fb33 	bl	8006a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00c      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0201 	mvn.w	r2, #1
 80063ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fb0a 	bl	8006a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fa8a 	bl	800792c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fa82 	bl	8007940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 faf2 	bl	8006a44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0220 	mvn.w	r2, #32
 800647c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 fa4a 	bl	8007918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e088      	b.n	80065bc <HAL_TIM_IC_ConfigChannel+0x130>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80064c8:	f000 fe38 	bl	800713c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020c 	bic.w	r2, r2, #12
 80064da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6999      	ldr	r1, [r3, #24]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	619a      	str	r2, [r3, #24]
 80064ee:	e060      	b.n	80065b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d11c      	bne.n	8006530 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006506:	f000 feb0 	bl	800726a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006518:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6999      	ldr	r1, [r3, #24]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	021a      	lsls	r2, r3, #8
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	619a      	str	r2, [r3, #24]
 800652e:	e040      	b.n	80065b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b08      	cmp	r3, #8
 8006534:	d11b      	bne.n	800656e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006546:	f000 fefd 	bl	8007344 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 020c 	bic.w	r2, r2, #12
 8006558:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69d9      	ldr	r1, [r3, #28]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	61da      	str	r2, [r3, #28]
 800656c:	e021      	b.n	80065b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d11c      	bne.n	80065ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006584:	f000 ff1a 	bl	80073bc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006596:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69d9      	ldr	r1, [r3, #28]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	021a      	lsls	r2, r3, #8
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	61da      	str	r2, [r3, #28]
 80065ac:	e001      	b.n	80065b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065de:	2302      	movs	r3, #2
 80065e0:	e0ff      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b14      	cmp	r3, #20
 80065ee:	f200 80f0 	bhi.w	80067d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	080067d3 	.word	0x080067d3
 8006600:	080067d3 	.word	0x080067d3
 8006604:	080067d3 	.word	0x080067d3
 8006608:	0800668d 	.word	0x0800668d
 800660c:	080067d3 	.word	0x080067d3
 8006610:	080067d3 	.word	0x080067d3
 8006614:	080067d3 	.word	0x080067d3
 8006618:	080066cf 	.word	0x080066cf
 800661c:	080067d3 	.word	0x080067d3
 8006620:	080067d3 	.word	0x080067d3
 8006624:	080067d3 	.word	0x080067d3
 8006628:	0800670f 	.word	0x0800670f
 800662c:	080067d3 	.word	0x080067d3
 8006630:	080067d3 	.word	0x080067d3
 8006634:	080067d3 	.word	0x080067d3
 8006638:	08006751 	.word	0x08006751
 800663c:	080067d3 	.word	0x080067d3
 8006640:	080067d3 	.word	0x080067d3
 8006644:	080067d3 	.word	0x080067d3
 8006648:	08006791 	.word	0x08006791
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fa9c 	bl	8006b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0208 	orr.w	r2, r2, #8
 8006666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0204 	bic.w	r2, r2, #4
 8006676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	619a      	str	r2, [r3, #24]
      break;
 800668a:	e0a5      	b.n	80067d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb0c 	bl	8006cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6999      	ldr	r1, [r3, #24]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	021a      	lsls	r2, r3, #8
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	619a      	str	r2, [r3, #24]
      break;
 80066cc:	e084      	b.n	80067d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fb75 	bl	8006dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0208 	orr.w	r2, r2, #8
 80066e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0204 	bic.w	r2, r2, #4
 80066f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69d9      	ldr	r1, [r3, #28]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	61da      	str	r2, [r3, #28]
      break;
 800670c:	e064      	b.n	80067d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fbdd 	bl	8006ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69d9      	ldr	r1, [r3, #28]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	021a      	lsls	r2, r3, #8
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	61da      	str	r2, [r3, #28]
      break;
 800674e:	e043      	b.n	80067d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fc26 	bl	8006fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0204 	bic.w	r2, r2, #4
 800677a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800678e:	e023      	b.n	80067d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fc6a 	bl	8007070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	021a      	lsls	r2, r3, #8
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067d0:	e002      	b.n	80067d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	75fb      	strb	r3, [r7, #23]
      break;
 80067d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop

080067ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIM_ConfigClockSource+0x1c>
 8006804:	2302      	movs	r3, #2
 8006806:	e0b6      	b.n	8006976 <HAL_TIM_ConfigClockSource+0x18a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006826:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800682a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006844:	d03e      	beq.n	80068c4 <HAL_TIM_ConfigClockSource+0xd8>
 8006846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684a:	f200 8087 	bhi.w	800695c <HAL_TIM_ConfigClockSource+0x170>
 800684e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006852:	f000 8086 	beq.w	8006962 <HAL_TIM_ConfigClockSource+0x176>
 8006856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685a:	d87f      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0x170>
 800685c:	2b70      	cmp	r3, #112	@ 0x70
 800685e:	d01a      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0xaa>
 8006860:	2b70      	cmp	r3, #112	@ 0x70
 8006862:	d87b      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0x170>
 8006864:	2b60      	cmp	r3, #96	@ 0x60
 8006866:	d050      	beq.n	800690a <HAL_TIM_ConfigClockSource+0x11e>
 8006868:	2b60      	cmp	r3, #96	@ 0x60
 800686a:	d877      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0x170>
 800686c:	2b50      	cmp	r3, #80	@ 0x50
 800686e:	d03c      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0xfe>
 8006870:	2b50      	cmp	r3, #80	@ 0x50
 8006872:	d873      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0x170>
 8006874:	2b40      	cmp	r3, #64	@ 0x40
 8006876:	d058      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x13e>
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d86f      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0x170>
 800687c:	2b30      	cmp	r3, #48	@ 0x30
 800687e:	d064      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x15e>
 8006880:	2b30      	cmp	r3, #48	@ 0x30
 8006882:	d86b      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0x170>
 8006884:	2b20      	cmp	r3, #32
 8006886:	d060      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x15e>
 8006888:	2b20      	cmp	r3, #32
 800688a:	d867      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0x170>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d05c      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x15e>
 8006890:	2b10      	cmp	r3, #16
 8006892:	d05a      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x15e>
 8006894:	e062      	b.n	800695c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068a6:	f000 fde1 	bl	800746c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	609a      	str	r2, [r3, #8]
      break;
 80068c2:	e04f      	b.n	8006964 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068d4:	f000 fdca 	bl	800746c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068e6:	609a      	str	r2, [r3, #8]
      break;
 80068e8:	e03c      	b.n	8006964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f6:	461a      	mov	r2, r3
 80068f8:	f000 fc88 	bl	800720c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2150      	movs	r1, #80	@ 0x50
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fd97 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006908:	e02c      	b.n	8006964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006916:	461a      	mov	r2, r3
 8006918:	f000 fce4 	bl	80072e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2160      	movs	r1, #96	@ 0x60
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fd87 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006928:	e01c      	b.n	8006964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	461a      	mov	r2, r3
 8006938:	f000 fc68 	bl	800720c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2140      	movs	r1, #64	@ 0x40
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fd77 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006948:	e00c      	b.n	8006964 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f000 fd6e 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 800695a:	e003      	b.n	8006964 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
      break;
 8006960:	e000      	b.n	8006964 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b0c      	cmp	r3, #12
 8006992:	d831      	bhi.n	80069f8 <HAL_TIM_ReadCapturedValue+0x78>
 8006994:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069f9 	.word	0x080069f9
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	080069db 	.word	0x080069db
 80069b0:	080069f9 	.word	0x080069f9
 80069b4:	080069f9 	.word	0x080069f9
 80069b8:	080069f9 	.word	0x080069f9
 80069bc:	080069e5 	.word	0x080069e5
 80069c0:	080069f9 	.word	0x080069f9
 80069c4:	080069f9 	.word	0x080069f9
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	080069ef 	.word	0x080069ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d6:	60fb      	str	r3, [r7, #12]

      break;
 80069d8:	e00f      	b.n	80069fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	60fb      	str	r3, [r7, #12]

      break;
 80069e2:	e00a      	b.n	80069fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ea:	60fb      	str	r3, [r7, #12]

      break;
 80069ec:	e005      	b.n	80069fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	60fb      	str	r3, [r7, #12]

      break;
 80069f6:	e000      	b.n	80069fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80069f8:	bf00      	nop
  }

  return tmpreg;
 80069fa:	68fb      	ldr	r3, [r7, #12]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a42      	ldr	r2, [pc, #264]	@ (8006b74 <TIM_Base_SetConfig+0x11c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00f      	beq.n	8006a90 <TIM_Base_SetConfig+0x38>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a76:	d00b      	beq.n	8006a90 <TIM_Base_SetConfig+0x38>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b78 <TIM_Base_SetConfig+0x120>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d007      	beq.n	8006a90 <TIM_Base_SetConfig+0x38>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a3e      	ldr	r2, [pc, #248]	@ (8006b7c <TIM_Base_SetConfig+0x124>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_Base_SetConfig+0x38>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b80 <TIM_Base_SetConfig+0x128>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d108      	bne.n	8006aa2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a33      	ldr	r2, [pc, #204]	@ (8006b74 <TIM_Base_SetConfig+0x11c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d01b      	beq.n	8006ae2 <TIM_Base_SetConfig+0x8a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab0:	d017      	beq.n	8006ae2 <TIM_Base_SetConfig+0x8a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a30      	ldr	r2, [pc, #192]	@ (8006b78 <TIM_Base_SetConfig+0x120>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <TIM_Base_SetConfig+0x8a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a2f      	ldr	r2, [pc, #188]	@ (8006b7c <TIM_Base_SetConfig+0x124>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00f      	beq.n	8006ae2 <TIM_Base_SetConfig+0x8a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8006b80 <TIM_Base_SetConfig+0x128>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_Base_SetConfig+0x8a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2d      	ldr	r2, [pc, #180]	@ (8006b84 <TIM_Base_SetConfig+0x12c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_Base_SetConfig+0x8a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8006b88 <TIM_Base_SetConfig+0x130>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_Base_SetConfig+0x8a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2b      	ldr	r2, [pc, #172]	@ (8006b8c <TIM_Base_SetConfig+0x134>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d108      	bne.n	8006af4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	@ (8006b74 <TIM_Base_SetConfig+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00f      	beq.n	8006b40 <TIM_Base_SetConfig+0xe8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a17      	ldr	r2, [pc, #92]	@ (8006b80 <TIM_Base_SetConfig+0x128>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00b      	beq.n	8006b40 <TIM_Base_SetConfig+0xe8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a16      	ldr	r2, [pc, #88]	@ (8006b84 <TIM_Base_SetConfig+0x12c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d007      	beq.n	8006b40 <TIM_Base_SetConfig+0xe8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a15      	ldr	r2, [pc, #84]	@ (8006b88 <TIM_Base_SetConfig+0x130>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_Base_SetConfig+0xe8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a14      	ldr	r2, [pc, #80]	@ (8006b8c <TIM_Base_SetConfig+0x134>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d103      	bne.n	8006b48 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d105      	bne.n	8006b66 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f023 0201 	bic.w	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	611a      	str	r2, [r3, #16]
  }
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40012c00 	.word	0x40012c00
 8006b78:	40000400 	.word	0x40000400
 8006b7c:	40000800 	.word	0x40000800
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f023 0201 	bic.w	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 0302 	bic.w	r3, r3, #2
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a2c      	ldr	r2, [pc, #176]	@ (8006c9c <TIM_OC1_SetConfig+0x10c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00f      	beq.n	8006c10 <TIM_OC1_SetConfig+0x80>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8006ca0 <TIM_OC1_SetConfig+0x110>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <TIM_OC1_SetConfig+0x80>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca4 <TIM_OC1_SetConfig+0x114>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_OC1_SetConfig+0x80>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a29      	ldr	r2, [pc, #164]	@ (8006ca8 <TIM_OC1_SetConfig+0x118>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_OC1_SetConfig+0x80>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a28      	ldr	r2, [pc, #160]	@ (8006cac <TIM_OC1_SetConfig+0x11c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10c      	bne.n	8006c2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 0308 	bic.w	r3, r3, #8
 8006c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 0304 	bic.w	r3, r3, #4
 8006c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c9c <TIM_OC1_SetConfig+0x10c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00f      	beq.n	8006c52 <TIM_OC1_SetConfig+0xc2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca0 <TIM_OC1_SetConfig+0x110>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00b      	beq.n	8006c52 <TIM_OC1_SetConfig+0xc2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ca4 <TIM_OC1_SetConfig+0x114>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d007      	beq.n	8006c52 <TIM_OC1_SetConfig+0xc2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <TIM_OC1_SetConfig+0x118>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_OC1_SetConfig+0xc2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <TIM_OC1_SetConfig+0x11c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d111      	bne.n	8006c76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800

08006cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f023 0210 	bic.w	r2, r3, #16
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	021b      	lsls	r3, r3, #8
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 0320 	bic.w	r3, r3, #32
 8006cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a28      	ldr	r2, [pc, #160]	@ (8006db0 <TIM_OC2_SetConfig+0x100>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC2_SetConfig+0x6c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a27      	ldr	r2, [pc, #156]	@ (8006db4 <TIM_OC2_SetConfig+0x104>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d10d      	bne.n	8006d38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006db0 <TIM_OC2_SetConfig+0x100>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00f      	beq.n	8006d60 <TIM_OC2_SetConfig+0xb0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <TIM_OC2_SetConfig+0x104>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <TIM_OC2_SetConfig+0xb0>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006db8 <TIM_OC2_SetConfig+0x108>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d007      	beq.n	8006d60 <TIM_OC2_SetConfig+0xb0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a1a      	ldr	r2, [pc, #104]	@ (8006dbc <TIM_OC2_SetConfig+0x10c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_OC2_SetConfig+0xb0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a19      	ldr	r2, [pc, #100]	@ (8006dc0 <TIM_OC2_SetConfig+0x110>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d113      	bne.n	8006d88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d66:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d6e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	621a      	str	r2, [r3, #32]
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40012c00 	.word	0x40012c00
 8006db4:	40013400 	.word	0x40013400
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a27      	ldr	r2, [pc, #156]	@ (8006ec0 <TIM_OC3_SetConfig+0xfc>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d003      	beq.n	8006e2e <TIM_OC3_SetConfig+0x6a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a26      	ldr	r2, [pc, #152]	@ (8006ec4 <TIM_OC3_SetConfig+0x100>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d10d      	bne.n	8006e4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e48:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec0 <TIM_OC3_SetConfig+0xfc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <TIM_OC3_SetConfig+0xae>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <TIM_OC3_SetConfig+0x100>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <TIM_OC3_SetConfig+0xae>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec8 <TIM_OC3_SetConfig+0x104>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_OC3_SetConfig+0xae>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a19      	ldr	r2, [pc, #100]	@ (8006ecc <TIM_OC3_SetConfig+0x108>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_OC3_SetConfig+0xae>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a18      	ldr	r2, [pc, #96]	@ (8006ed0 <TIM_OC3_SetConfig+0x10c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d113      	bne.n	8006e9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	621a      	str	r2, [r3, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40013400 	.word	0x40013400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	40014800 	.word	0x40014800

08006ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	031b      	lsls	r3, r3, #12
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a18      	ldr	r2, [pc, #96]	@ (8006f94 <TIM_OC4_SetConfig+0xc0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00f      	beq.n	8006f58 <TIM_OC4_SetConfig+0x84>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a17      	ldr	r2, [pc, #92]	@ (8006f98 <TIM_OC4_SetConfig+0xc4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00b      	beq.n	8006f58 <TIM_OC4_SetConfig+0x84>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a16      	ldr	r2, [pc, #88]	@ (8006f9c <TIM_OC4_SetConfig+0xc8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d007      	beq.n	8006f58 <TIM_OC4_SetConfig+0x84>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a15      	ldr	r2, [pc, #84]	@ (8006fa0 <TIM_OC4_SetConfig+0xcc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_OC4_SetConfig+0x84>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a14      	ldr	r2, [pc, #80]	@ (8006fa4 <TIM_OC4_SetConfig+0xd0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d109      	bne.n	8006f6c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	019b      	lsls	r3, r3, #6
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40012c00 	.word	0x40012c00
 8006f98:	40013400 	.word	0x40013400
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800

08006fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006fec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	041b      	lsls	r3, r3, #16
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a17      	ldr	r2, [pc, #92]	@ (800705c <TIM_OC5_SetConfig+0xb4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00f      	beq.n	8007022 <TIM_OC5_SetConfig+0x7a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a16      	ldr	r2, [pc, #88]	@ (8007060 <TIM_OC5_SetConfig+0xb8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00b      	beq.n	8007022 <TIM_OC5_SetConfig+0x7a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <TIM_OC5_SetConfig+0xbc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d007      	beq.n	8007022 <TIM_OC5_SetConfig+0x7a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a14      	ldr	r2, [pc, #80]	@ (8007068 <TIM_OC5_SetConfig+0xc0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d003      	beq.n	8007022 <TIM_OC5_SetConfig+0x7a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a13      	ldr	r2, [pc, #76]	@ (800706c <TIM_OC5_SetConfig+0xc4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d109      	bne.n	8007036 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007028:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40013400 	.word	0x40013400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800

08007070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	051b      	lsls	r3, r3, #20
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a18      	ldr	r2, [pc, #96]	@ (8007128 <TIM_OC6_SetConfig+0xb8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00f      	beq.n	80070ec <TIM_OC6_SetConfig+0x7c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a17      	ldr	r2, [pc, #92]	@ (800712c <TIM_OC6_SetConfig+0xbc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00b      	beq.n	80070ec <TIM_OC6_SetConfig+0x7c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a16      	ldr	r2, [pc, #88]	@ (8007130 <TIM_OC6_SetConfig+0xc0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d007      	beq.n	80070ec <TIM_OC6_SetConfig+0x7c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a15      	ldr	r2, [pc, #84]	@ (8007134 <TIM_OC6_SetConfig+0xc4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_OC6_SetConfig+0x7c>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a14      	ldr	r2, [pc, #80]	@ (8007138 <TIM_OC6_SetConfig+0xc8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d109      	bne.n	8007100 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	029b      	lsls	r3, r3, #10
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40012c00 	.word	0x40012c00
 800712c:	40013400 	.word	0x40013400
 8007130:	40014000 	.word	0x40014000
 8007134:	40014400 	.word	0x40014400
 8007138:	40014800 	.word	0x40014800

0800713c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f023 0201 	bic.w	r2, r3, #1
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4a24      	ldr	r2, [pc, #144]	@ (80071f8 <TIM_TI1_SetConfig+0xbc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_TI1_SetConfig+0x56>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007170:	d00f      	beq.n	8007192 <TIM_TI1_SetConfig+0x56>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4a21      	ldr	r2, [pc, #132]	@ (80071fc <TIM_TI1_SetConfig+0xc0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_TI1_SetConfig+0x56>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a20      	ldr	r2, [pc, #128]	@ (8007200 <TIM_TI1_SetConfig+0xc4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_TI1_SetConfig+0x56>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4a1f      	ldr	r2, [pc, #124]	@ (8007204 <TIM_TI1_SetConfig+0xc8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_TI1_SetConfig+0x56>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4a1e      	ldr	r2, [pc, #120]	@ (8007208 <TIM_TI1_SetConfig+0xcc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d101      	bne.n	8007196 <TIM_TI1_SetConfig+0x5a>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <TIM_TI1_SetConfig+0x5c>
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0303 	bic.w	r3, r3, #3
 80071a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	e003      	b.n	80071b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f023 030a 	bic.w	r3, r3, #10
 80071d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f003 030a 	and.w	r3, r3, #10
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40012c00 	.word	0x40012c00
 80071fc:	40000400 	.word	0x40000400
 8007200:	40000800 	.word	0x40000800
 8007204:	40013400 	.word	0x40013400
 8007208:	40014000 	.word	0x40014000

0800720c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f023 0201 	bic.w	r2, r3, #1
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f023 030a 	bic.w	r3, r3, #10
 8007248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800726a:	b480      	push	{r7}
 800726c:	b087      	sub	sp, #28
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f023 0210 	bic.w	r2, r3, #16
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	031b      	lsls	r3, r3, #12
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	621a      	str	r2, [r3, #32]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f023 0210 	bic.w	r2, r3, #16
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800730e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	031b      	lsls	r3, r3, #12
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007320:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	621a      	str	r2, [r3, #32]
}
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 0303 	bic.w	r3, r3, #3
 8007370:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007380:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	b2db      	uxtb	r3, r3
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007394:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	621a      	str	r2, [r3, #32]
}
 80073b0:	bf00      	nop
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	031b      	lsls	r3, r3, #12
 8007400:	b29b      	uxth	r3, r3
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800740e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	031b      	lsls	r3, r3, #12
 8007414:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	f043 0307 	orr.w	r3, r3, #7
 8007458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	021a      	lsls	r2, r3, #8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	431a      	orrs	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4313      	orrs	r3, r2
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	609a      	str	r2, [r3, #8]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2201      	movs	r2, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	401a      	ands	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1a      	ldr	r2, [r3, #32]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <HAL_TIMEx_PWMN_Start+0x24>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	e022      	b.n	8007562 <HAL_TIMEx_PWMN_Start+0x6a>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b04      	cmp	r3, #4
 8007520:	d109      	bne.n	8007536 <HAL_TIMEx_PWMN_Start+0x3e>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	e015      	b.n	8007562 <HAL_TIMEx_PWMN_Start+0x6a>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d109      	bne.n	8007550 <HAL_TIMEx_PWMN_Start+0x58>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	bf14      	ite	ne
 8007548:	2301      	movne	r3, #1
 800754a:	2300      	moveq	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	e008      	b.n	8007562 <HAL_TIMEx_PWMN_Start+0x6a>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	bf14      	ite	ne
 800755c:	2301      	movne	r3, #1
 800755e:	2300      	moveq	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e069      	b.n	800763e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <HAL_TIMEx_PWMN_Start+0x82>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007578:	e013      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b04      	cmp	r3, #4
 800757e:	d104      	bne.n	800758a <HAL_TIMEx_PWMN_Start+0x92>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007588:	e00b      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d104      	bne.n	800759a <HAL_TIMEx_PWMN_Start+0xa2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007598:	e003      	b.n	80075a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2204      	movs	r2, #4
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f9d2 	bl	8007954 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a20      	ldr	r2, [pc, #128]	@ (8007648 <HAL_TIMEx_PWMN_Start+0x150>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d018      	beq.n	80075fc <HAL_TIMEx_PWMN_Start+0x104>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d2:	d013      	beq.n	80075fc <HAL_TIMEx_PWMN_Start+0x104>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	@ (800764c <HAL_TIMEx_PWMN_Start+0x154>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_TIMEx_PWMN_Start+0x104>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007650 <HAL_TIMEx_PWMN_Start+0x158>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_TIMEx_PWMN_Start+0x104>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <HAL_TIMEx_PWMN_Start+0x15c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_TIMEx_PWMN_Start+0x104>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <HAL_TIMEx_PWMN_Start+0x160>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d115      	bne.n	8007628 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	4b16      	ldr	r3, [pc, #88]	@ (800765c <HAL_TIMEx_PWMN_Start+0x164>)
 8007604:	4013      	ands	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b06      	cmp	r3, #6
 800760c:	d015      	beq.n	800763a <HAL_TIMEx_PWMN_Start+0x142>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007614:	d011      	beq.n	800763a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0201 	orr.w	r2, r2, #1
 8007624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007626:	e008      	b.n	800763a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e000      	b.n	800763c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40012c00 	.word	0x40012c00
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40013400 	.word	0x40013400
 8007658:	40014000 	.word	0x40014000
 800765c:	00010007 	.word	0x00010007

08007660 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2200      	movs	r2, #0
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f96e 	bl	8007954 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10f      	bne.n	80076a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a1a      	ldr	r2, [r3, #32]
 800768e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007692:	4013      	ands	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d107      	bne.n	80076a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6a1a      	ldr	r2, [r3, #32]
 80076ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076b2:	4013      	ands	r3, r2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10f      	bne.n	80076d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	f240 4344 	movw	r3, #1092	@ 0x444
 80076c2:	4013      	ands	r3, r2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <HAL_TIMEx_PWMN_Stop+0x88>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e6:	e013      	b.n	8007710 <HAL_TIMEx_PWMN_Stop+0xb0>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d104      	bne.n	80076f8 <HAL_TIMEx_PWMN_Stop+0x98>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076f6:	e00b      	b.n	8007710 <HAL_TIMEx_PWMN_Stop+0xb0>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d104      	bne.n	8007708 <HAL_TIMEx_PWMN_Stop+0xa8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007706:	e003      	b.n	8007710 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007730:	2302      	movs	r3, #2
 8007732:	e063      	b.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2b      	ldr	r2, [pc, #172]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2a      	ldr	r2, [pc, #168]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d108      	bne.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800776e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1b      	ldr	r2, [pc, #108]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077a6:	d013      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a18      	ldr	r2, [pc, #96]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a17      	ldr	r2, [pc, #92]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a12      	ldr	r2, [pc, #72]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a13      	ldr	r2, [pc, #76]	@ (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10c      	bne.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	40012c00 	.word	0x40012c00
 800780c:	40013400 	.word	0x40013400
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800
 8007818:	40014000 	.word	0x40014000

0800781c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007834:	2302      	movs	r3, #2
 8007836:	e065      	b.n	8007904 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a16      	ldr	r2, [pc, #88]	@ (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a14      	ldr	r2, [pc, #80]	@ (8007914 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d115      	bne.n	80078f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	051b      	lsls	r3, r3, #20
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400

08007918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	2204      	movs	r2, #4
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	43db      	mvns	r3, r3
 8007976:	401a      	ands	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1a      	ldr	r2, [r3, #32]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	fa01 f303 	lsl.w	r3, r1, r3
 800798c:	431a      	orrs	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e040      	b.n	8007a32 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d106      	bne.n	80079c6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7fa fb9d 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2224      	movs	r2, #36	@ 0x24
 80079ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0201 	bic.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fe55 	bl	8008694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc7e 	bl	80082ec <UART_SetConfig>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e01b      	b.n	8007a32 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fed4 	bl	80087d8 <UART_CheckIdleState>
 8007a30:	4603      	mov	r3, r0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e02f      	b.n	8007aac <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2224      	movs	r2, #36	@ 0x24
 8007a50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fa fbe0 	bl	8002240 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	@ 0x28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d165      	bne.n	8007b96 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_UART_Transmit_DMA+0x22>
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e05e      	b.n	8007b98 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2221      	movs	r2, #33	@ 0x21
 8007afc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d027      	beq.n	8007b56 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b0a:	4a25      	ldr	r2, [pc, #148]	@ (8007ba0 <HAL_UART_Transmit_DMA+0xec>)
 8007b0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b12:	4a24      	ldr	r2, [pc, #144]	@ (8007ba4 <HAL_UART_Transmit_DMA+0xf0>)
 8007b14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b1a:	4a23      	ldr	r2, [pc, #140]	@ (8007ba8 <HAL_UART_Transmit_DMA+0xf4>)
 8007b1c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	2200      	movs	r2, #0
 8007b24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3328      	adds	r3, #40	@ 0x28
 8007b36:	461a      	mov	r2, r3
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	f7fb fccb 	bl	80034d4 <HAL_DMA_Start_IT>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2210      	movs	r2, #16
 8007b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e020      	b.n	8007b98 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2240      	movs	r2, #64	@ 0x40
 8007b5c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b7e:	623a      	str	r2, [r7, #32]
 8007b80:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	69f9      	ldr	r1, [r7, #28]
 8007b84:	6a3a      	ldr	r2, [r7, #32]
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e000      	b.n	8007b98 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007b96:	2302      	movs	r3, #2
  }
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3728      	adds	r7, #40	@ 0x28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	08008c59 	.word	0x08008c59
 8007ba4:	08008ced 	.word	0x08008ced
 8007ba8:	08008e6d 	.word	0x08008e6d

08007bac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b090      	sub	sp, #64	@ 0x40
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc0:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bcc:	2b80      	cmp	r3, #128	@ 0x80
 8007bce:	d139      	bne.n	8007c44 <HAL_UART_DMAStop+0x98>
 8007bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bd2:	2b21      	cmp	r3, #33	@ 0x21
 8007bd4:	d136      	bne.n	8007c44 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e5      	bne.n	8007bd6 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d015      	beq.n	8007c3e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fb fcbb 	bl	8003592 <HAL_DMA_Abort>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00d      	beq.n	8007c3e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fb fdd2 	bl	80037d0 <HAL_DMA_GetError>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d105      	bne.n	8007c3e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2210      	movs	r2, #16
 8007c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e044      	b.n	8007cc8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 ff80 	bl	8008b44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4e:	2b40      	cmp	r3, #64	@ 0x40
 8007c50:	d139      	bne.n	8007cc6 <HAL_UART_DMAStop+0x11a>
 8007c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c54:	2b22      	cmp	r3, #34	@ 0x22
 8007c56:	d136      	bne.n	8007cc6 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c78:	61ba      	str	r2, [r7, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6979      	ldr	r1, [r7, #20]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	613b      	str	r3, [r7, #16]
   return(result);
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d015      	beq.n	8007cc0 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fb fc7a 	bl	8003592 <HAL_DMA_Abort>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00d      	beq.n	8007cc0 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fb fd91 	bl	80037d0 <HAL_DMA_GetError>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	d105      	bne.n	8007cc0 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e003      	b.n	8007cc8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 ff65 	bl	8008b90 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3740      	adds	r7, #64	@ 0x40
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007cf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007cfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007cfe:	4013      	ands	r3, r2
 8007d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d115      	bne.n	8007d38 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00f      	beq.n	8007d38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d009      	beq.n	8007d38 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 82ab 	beq.w	8008284 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	4798      	blx	r3
      }
      return;
 8007d36:	e2a5      	b.n	8008284 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8117 	beq.w	8007f70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007d4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d52:	4b85      	ldr	r3, [pc, #532]	@ (8007f68 <HAL_UART_IRQHandler+0x298>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 810a 	beq.w	8007f70 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d011      	beq.n	8007d8c <HAL_UART_IRQHandler+0xbc>
 8007d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d82:	f043 0201 	orr.w	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d011      	beq.n	8007dbc <HAL_UART_IRQHandler+0xec>
 8007d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2202      	movs	r2, #2
 8007daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007db2:	f043 0204 	orr.w	r2, r3, #4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d011      	beq.n	8007dec <HAL_UART_IRQHandler+0x11c>
 8007dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2204      	movs	r2, #4
 8007dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007de2:	f043 0202 	orr.w	r2, r3, #2
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d017      	beq.n	8007e28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d105      	bne.n	8007e10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2208      	movs	r2, #8
 8007e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e1e:	f043 0208 	orr.w	r2, r3, #8
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d012      	beq.n	8007e5a <HAL_UART_IRQHandler+0x18a>
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00c      	beq.n	8007e5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8211 	beq.w	8008288 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea2:	2b40      	cmp	r3, #64	@ 0x40
 8007ea4:	d005      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d04f      	beq.n	8007f52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fe6c 	bl	8008b90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec2:	2b40      	cmp	r3, #64	@ 0x40
 8007ec4:	d141      	bne.n	8007f4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3308      	adds	r3, #8
 8007eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1d9      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d013      	beq.n	8007f42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f1e:	4a13      	ldr	r2, [pc, #76]	@ (8007f6c <HAL_UART_IRQHandler+0x29c>)
 8007f20:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fb fb71 	bl	800360e <HAL_DMA_Abort_IT>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d017      	beq.n	8007f62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f40:	e00f      	b.n	8007f62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f9c8 	bl	80082d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f48:	e00b      	b.n	8007f62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9c4 	bl	80082d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f50:	e007      	b.n	8007f62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9c0 	bl	80082d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007f60:	e192      	b.n	8008288 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f62:	bf00      	nop
    return;
 8007f64:	e190      	b.n	8008288 <HAL_UART_IRQHandler+0x5b8>
 8007f66:	bf00      	nop
 8007f68:	04000120 	.word	0x04000120
 8007f6c:	08008eeb 	.word	0x08008eeb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	f040 814b 	bne.w	8008210 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8144 	beq.w	8008210 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 813d 	beq.w	8008210 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2210      	movs	r2, #16
 8007f9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa8:	2b40      	cmp	r3, #64	@ 0x40
 8007faa:	f040 80b5 	bne.w	8008118 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 8164 	beq.w	800828c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	f080 815c 	bcs.w	800828c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	f000 8086 	beq.w	80080f6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008002:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008006:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008014:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008018:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008020:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800802c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1da      	bne.n	8007fea <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3308      	adds	r3, #8
 800803a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008044:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008058:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800805c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008060:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008064:	e841 2300 	strex	r3, r2, [r1]
 8008068:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800806a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e1      	bne.n	8008034 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3308      	adds	r3, #8
 8008076:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008086:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008094:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008096:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800809a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e3      	bne.n	8008070 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c6:	f023 0310 	bic.w	r3, r3, #16
 80080ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80080e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e4      	bne.n	80080b6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fb fa4e 	bl	8003592 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008108:	b29b      	uxth	r3, r3
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	b29b      	uxth	r3, r3
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7f9 f9ab 	bl	800146c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008116:	e0b9      	b.n	800828c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008124:	b29b      	uxth	r3, r3
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80ab 	beq.w	8008290 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800813a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 80a6 	beq.w	8008290 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008166:	647b      	str	r3, [r7, #68]	@ 0x44
 8008168:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800816c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e4      	bne.n	8008144 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	623b      	str	r3, [r7, #32]
   return(result);
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3308      	adds	r3, #8
 800819a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800819e:	633a      	str	r2, [r7, #48]	@ 0x30
 80081a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e3      	bne.n	800817a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0310 	bic.w	r3, r3, #16
 80081da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80081e8:	61fb      	str	r3, [r7, #28]
 80081ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	69b9      	ldr	r1, [r7, #24]
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	617b      	str	r3, [r7, #20]
   return(result);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e4      	bne.n	80081c6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7f9 f92f 	bl	800146c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800820e:	e03f      	b.n	8008290 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008214:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00e      	beq.n	800823a <HAL_UART_IRQHandler+0x56a>
 800821c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d008      	beq.n	800823a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fe99 	bl	8008f6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008238:	e02d      	b.n	8008296 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800823e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00e      	beq.n	8008264 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800824a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d008      	beq.n	8008264 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01c      	beq.n	8008294 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
    }
    return;
 8008262:	e017      	b.n	8008294 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	d012      	beq.n	8008296 <HAL_UART_IRQHandler+0x5c6>
 8008270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fe4a 	bl	8008f16 <UART_EndTransmit_IT>
    return;
 8008282:	e008      	b.n	8008296 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008284:	bf00      	nop
 8008286:	e006      	b.n	8008296 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008288:	bf00      	nop
 800828a:	e004      	b.n	8008296 <HAL_UART_IRQHandler+0x5c6>
      return;
 800828c:	bf00      	nop
 800828e:	e002      	b.n	8008296 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008290:	bf00      	nop
 8008292:	e000      	b.n	8008296 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008294:	bf00      	nop
  }

}
 8008296:	37e8      	adds	r7, #232	@ 0xe8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800831a:	f023 030c 	bic.w	r3, r3, #12
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	6979      	ldr	r1, [r7, #20]
 8008324:	430b      	orrs	r3, r1
 8008326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	4313      	orrs	r3, r2
 800834c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	430a      	orrs	r2, r1
 8008360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4aa7      	ldr	r2, [pc, #668]	@ (8008604 <UART_SetConfig+0x318>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d120      	bne.n	80083ae <UART_SetConfig+0xc2>
 800836c:	4ba6      	ldr	r3, [pc, #664]	@ (8008608 <UART_SetConfig+0x31c>)
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	2b03      	cmp	r3, #3
 8008376:	d817      	bhi.n	80083a8 <UART_SetConfig+0xbc>
 8008378:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <UART_SetConfig+0x94>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	08008391 	.word	0x08008391
 8008384:	0800839d 	.word	0x0800839d
 8008388:	080083a3 	.word	0x080083a3
 800838c:	08008397 	.word	0x08008397
 8008390:	2301      	movs	r3, #1
 8008392:	77fb      	strb	r3, [r7, #31]
 8008394:	e0b5      	b.n	8008502 <UART_SetConfig+0x216>
 8008396:	2302      	movs	r3, #2
 8008398:	77fb      	strb	r3, [r7, #31]
 800839a:	e0b2      	b.n	8008502 <UART_SetConfig+0x216>
 800839c:	2304      	movs	r3, #4
 800839e:	77fb      	strb	r3, [r7, #31]
 80083a0:	e0af      	b.n	8008502 <UART_SetConfig+0x216>
 80083a2:	2308      	movs	r3, #8
 80083a4:	77fb      	strb	r3, [r7, #31]
 80083a6:	e0ac      	b.n	8008502 <UART_SetConfig+0x216>
 80083a8:	2310      	movs	r3, #16
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e0a9      	b.n	8008502 <UART_SetConfig+0x216>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a96      	ldr	r2, [pc, #600]	@ (800860c <UART_SetConfig+0x320>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d124      	bne.n	8008402 <UART_SetConfig+0x116>
 80083b8:	4b93      	ldr	r3, [pc, #588]	@ (8008608 <UART_SetConfig+0x31c>)
 80083ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083c4:	d011      	beq.n	80083ea <UART_SetConfig+0xfe>
 80083c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083ca:	d817      	bhi.n	80083fc <UART_SetConfig+0x110>
 80083cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d0:	d011      	beq.n	80083f6 <UART_SetConfig+0x10a>
 80083d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d6:	d811      	bhi.n	80083fc <UART_SetConfig+0x110>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <UART_SetConfig+0xf8>
 80083dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e0:	d006      	beq.n	80083f0 <UART_SetConfig+0x104>
 80083e2:	e00b      	b.n	80083fc <UART_SetConfig+0x110>
 80083e4:	2300      	movs	r3, #0
 80083e6:	77fb      	strb	r3, [r7, #31]
 80083e8:	e08b      	b.n	8008502 <UART_SetConfig+0x216>
 80083ea:	2302      	movs	r3, #2
 80083ec:	77fb      	strb	r3, [r7, #31]
 80083ee:	e088      	b.n	8008502 <UART_SetConfig+0x216>
 80083f0:	2304      	movs	r3, #4
 80083f2:	77fb      	strb	r3, [r7, #31]
 80083f4:	e085      	b.n	8008502 <UART_SetConfig+0x216>
 80083f6:	2308      	movs	r3, #8
 80083f8:	77fb      	strb	r3, [r7, #31]
 80083fa:	e082      	b.n	8008502 <UART_SetConfig+0x216>
 80083fc:	2310      	movs	r3, #16
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e07f      	b.n	8008502 <UART_SetConfig+0x216>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a82      	ldr	r2, [pc, #520]	@ (8008610 <UART_SetConfig+0x324>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d124      	bne.n	8008456 <UART_SetConfig+0x16a>
 800840c:	4b7e      	ldr	r3, [pc, #504]	@ (8008608 <UART_SetConfig+0x31c>)
 800840e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008410:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008414:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008418:	d011      	beq.n	800843e <UART_SetConfig+0x152>
 800841a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800841e:	d817      	bhi.n	8008450 <UART_SetConfig+0x164>
 8008420:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008424:	d011      	beq.n	800844a <UART_SetConfig+0x15e>
 8008426:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800842a:	d811      	bhi.n	8008450 <UART_SetConfig+0x164>
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <UART_SetConfig+0x14c>
 8008430:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008434:	d006      	beq.n	8008444 <UART_SetConfig+0x158>
 8008436:	e00b      	b.n	8008450 <UART_SetConfig+0x164>
 8008438:	2300      	movs	r3, #0
 800843a:	77fb      	strb	r3, [r7, #31]
 800843c:	e061      	b.n	8008502 <UART_SetConfig+0x216>
 800843e:	2302      	movs	r3, #2
 8008440:	77fb      	strb	r3, [r7, #31]
 8008442:	e05e      	b.n	8008502 <UART_SetConfig+0x216>
 8008444:	2304      	movs	r3, #4
 8008446:	77fb      	strb	r3, [r7, #31]
 8008448:	e05b      	b.n	8008502 <UART_SetConfig+0x216>
 800844a:	2308      	movs	r3, #8
 800844c:	77fb      	strb	r3, [r7, #31]
 800844e:	e058      	b.n	8008502 <UART_SetConfig+0x216>
 8008450:	2310      	movs	r3, #16
 8008452:	77fb      	strb	r3, [r7, #31]
 8008454:	e055      	b.n	8008502 <UART_SetConfig+0x216>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a6e      	ldr	r2, [pc, #440]	@ (8008614 <UART_SetConfig+0x328>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d124      	bne.n	80084aa <UART_SetConfig+0x1be>
 8008460:	4b69      	ldr	r3, [pc, #420]	@ (8008608 <UART_SetConfig+0x31c>)
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008468:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800846c:	d011      	beq.n	8008492 <UART_SetConfig+0x1a6>
 800846e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008472:	d817      	bhi.n	80084a4 <UART_SetConfig+0x1b8>
 8008474:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008478:	d011      	beq.n	800849e <UART_SetConfig+0x1b2>
 800847a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800847e:	d811      	bhi.n	80084a4 <UART_SetConfig+0x1b8>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <UART_SetConfig+0x1a0>
 8008484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008488:	d006      	beq.n	8008498 <UART_SetConfig+0x1ac>
 800848a:	e00b      	b.n	80084a4 <UART_SetConfig+0x1b8>
 800848c:	2300      	movs	r3, #0
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e037      	b.n	8008502 <UART_SetConfig+0x216>
 8008492:	2302      	movs	r3, #2
 8008494:	77fb      	strb	r3, [r7, #31]
 8008496:	e034      	b.n	8008502 <UART_SetConfig+0x216>
 8008498:	2304      	movs	r3, #4
 800849a:	77fb      	strb	r3, [r7, #31]
 800849c:	e031      	b.n	8008502 <UART_SetConfig+0x216>
 800849e:	2308      	movs	r3, #8
 80084a0:	77fb      	strb	r3, [r7, #31]
 80084a2:	e02e      	b.n	8008502 <UART_SetConfig+0x216>
 80084a4:	2310      	movs	r3, #16
 80084a6:	77fb      	strb	r3, [r7, #31]
 80084a8:	e02b      	b.n	8008502 <UART_SetConfig+0x216>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a5a      	ldr	r2, [pc, #360]	@ (8008618 <UART_SetConfig+0x32c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d124      	bne.n	80084fe <UART_SetConfig+0x212>
 80084b4:	4b54      	ldr	r3, [pc, #336]	@ (8008608 <UART_SetConfig+0x31c>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80084bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80084c0:	d011      	beq.n	80084e6 <UART_SetConfig+0x1fa>
 80084c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80084c6:	d817      	bhi.n	80084f8 <UART_SetConfig+0x20c>
 80084c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084cc:	d011      	beq.n	80084f2 <UART_SetConfig+0x206>
 80084ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084d2:	d811      	bhi.n	80084f8 <UART_SetConfig+0x20c>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <UART_SetConfig+0x1f4>
 80084d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084dc:	d006      	beq.n	80084ec <UART_SetConfig+0x200>
 80084de:	e00b      	b.n	80084f8 <UART_SetConfig+0x20c>
 80084e0:	2300      	movs	r3, #0
 80084e2:	77fb      	strb	r3, [r7, #31]
 80084e4:	e00d      	b.n	8008502 <UART_SetConfig+0x216>
 80084e6:	2302      	movs	r3, #2
 80084e8:	77fb      	strb	r3, [r7, #31]
 80084ea:	e00a      	b.n	8008502 <UART_SetConfig+0x216>
 80084ec:	2304      	movs	r3, #4
 80084ee:	77fb      	strb	r3, [r7, #31]
 80084f0:	e007      	b.n	8008502 <UART_SetConfig+0x216>
 80084f2:	2308      	movs	r3, #8
 80084f4:	77fb      	strb	r3, [r7, #31]
 80084f6:	e004      	b.n	8008502 <UART_SetConfig+0x216>
 80084f8:	2310      	movs	r3, #16
 80084fa:	77fb      	strb	r3, [r7, #31]
 80084fc:	e001      	b.n	8008502 <UART_SetConfig+0x216>
 80084fe:	2310      	movs	r3, #16
 8008500:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800850a:	d15b      	bne.n	80085c4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800850c:	7ffb      	ldrb	r3, [r7, #31]
 800850e:	2b08      	cmp	r3, #8
 8008510:	d827      	bhi.n	8008562 <UART_SetConfig+0x276>
 8008512:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <UART_SetConfig+0x22c>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	0800853d 	.word	0x0800853d
 800851c:	08008545 	.word	0x08008545
 8008520:	0800854d 	.word	0x0800854d
 8008524:	08008563 	.word	0x08008563
 8008528:	08008553 	.word	0x08008553
 800852c:	08008563 	.word	0x08008563
 8008530:	08008563 	.word	0x08008563
 8008534:	08008563 	.word	0x08008563
 8008538:	0800855b 	.word	0x0800855b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800853c:	f7fc ff7a 	bl	8005434 <HAL_RCC_GetPCLK1Freq>
 8008540:	61b8      	str	r0, [r7, #24]
        break;
 8008542:	e013      	b.n	800856c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008544:	f7fc ff98 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 8008548:	61b8      	str	r0, [r7, #24]
        break;
 800854a:	e00f      	b.n	800856c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800854c:	4b33      	ldr	r3, [pc, #204]	@ (800861c <UART_SetConfig+0x330>)
 800854e:	61bb      	str	r3, [r7, #24]
        break;
 8008550:	e00c      	b.n	800856c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008552:	f7fc ff0d 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8008556:	61b8      	str	r0, [r7, #24]
        break;
 8008558:	e008      	b.n	800856c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800855a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800855e:	61bb      	str	r3, [r7, #24]
        break;
 8008560:	e004      	b.n	800856c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	77bb      	strb	r3, [r7, #30]
        break;
 800856a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 8082 	beq.w	8008678 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	005a      	lsls	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	085b      	lsrs	r3, r3, #1
 800857e:	441a      	add	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b0f      	cmp	r3, #15
 800858e:	d916      	bls.n	80085be <UART_SetConfig+0x2d2>
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008596:	d212      	bcs.n	80085be <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f023 030f 	bic.w	r3, r3, #15
 80085a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	89fb      	ldrh	r3, [r7, #14]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	89fa      	ldrh	r2, [r7, #14]
 80085ba:	60da      	str	r2, [r3, #12]
 80085bc:	e05c      	b.n	8008678 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	77bb      	strb	r3, [r7, #30]
 80085c2:	e059      	b.n	8008678 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085c4:	7ffb      	ldrb	r3, [r7, #31]
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d835      	bhi.n	8008636 <UART_SetConfig+0x34a>
 80085ca:	a201      	add	r2, pc, #4	@ (adr r2, 80085d0 <UART_SetConfig+0x2e4>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085f5 	.word	0x080085f5
 80085d4:	080085fd 	.word	0x080085fd
 80085d8:	08008621 	.word	0x08008621
 80085dc:	08008637 	.word	0x08008637
 80085e0:	08008627 	.word	0x08008627
 80085e4:	08008637 	.word	0x08008637
 80085e8:	08008637 	.word	0x08008637
 80085ec:	08008637 	.word	0x08008637
 80085f0:	0800862f 	.word	0x0800862f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085f4:	f7fc ff1e 	bl	8005434 <HAL_RCC_GetPCLK1Freq>
 80085f8:	61b8      	str	r0, [r7, #24]
        break;
 80085fa:	e021      	b.n	8008640 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085fc:	f7fc ff3c 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 8008600:	61b8      	str	r0, [r7, #24]
        break;
 8008602:	e01d      	b.n	8008640 <UART_SetConfig+0x354>
 8008604:	40013800 	.word	0x40013800
 8008608:	40021000 	.word	0x40021000
 800860c:	40004400 	.word	0x40004400
 8008610:	40004800 	.word	0x40004800
 8008614:	40004c00 	.word	0x40004c00
 8008618:	40005000 	.word	0x40005000
 800861c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008620:	4b1b      	ldr	r3, [pc, #108]	@ (8008690 <UART_SetConfig+0x3a4>)
 8008622:	61bb      	str	r3, [r7, #24]
        break;
 8008624:	e00c      	b.n	8008640 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008626:	f7fc fea3 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800862a:	61b8      	str	r0, [r7, #24]
        break;
 800862c:	e008      	b.n	8008640 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800862e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008632:	61bb      	str	r3, [r7, #24]
        break;
 8008634:	e004      	b.n	8008640 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	77bb      	strb	r3, [r7, #30]
        break;
 800863e:	bf00      	nop
    }

    if (pclk != 0U)
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d018      	beq.n	8008678 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	085a      	lsrs	r2, r3, #1
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	441a      	add	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	fbb2 f3f3 	udiv	r3, r2, r3
 8008658:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	2b0f      	cmp	r3, #15
 800865e:	d909      	bls.n	8008674 <UART_SetConfig+0x388>
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008666:	d205      	bcs.n	8008674 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	b29a      	uxth	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	e001      	b.n	8008678 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008684:	7fbb      	ldrb	r3, [r7, #30]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	007a1200 	.word	0x007a1200

08008694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a0:	f003 0308 	and.w	r3, r3, #8
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01a      	beq.n	80087aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008792:	d10a      	bne.n	80087aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	605a      	str	r2, [r3, #4]
  }
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b098      	sub	sp, #96	@ 0x60
 80087dc:	af02      	add	r7, sp, #8
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087e8:	f7f9 fe50 	bl	800248c <HAL_GetTick>
 80087ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d12e      	bne.n	800885a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008804:	2200      	movs	r2, #0
 8008806:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f88c 	bl	8008928 <UART_WaitOnFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d021      	beq.n	800885a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800882a:	653b      	str	r3, [r7, #80]	@ 0x50
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008834:	647b      	str	r3, [r7, #68]	@ 0x44
 8008836:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800883a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e6      	bne.n	8008816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e062      	b.n	8008920 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d149      	bne.n	80088fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008870:	2200      	movs	r2, #0
 8008872:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f856 	bl	8008928 <UART_WaitOnFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d03c      	beq.n	80088fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	623b      	str	r3, [r7, #32]
   return(result);
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80088a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e6      	bne.n	8008882 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3308      	adds	r3, #8
 80088ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3308      	adds	r3, #8
 80088d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088d4:	61fa      	str	r2, [r7, #28]
 80088d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	69b9      	ldr	r1, [r7, #24]
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	617b      	str	r3, [r7, #20]
   return(result);
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e011      	b.n	8008920 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3758      	adds	r7, #88	@ 0x58
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	4613      	mov	r3, r2
 8008936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008938:	e04f      	b.n	80089da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d04b      	beq.n	80089da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008942:	f7f9 fda3 	bl	800248c <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d302      	bcc.n	8008958 <UART_WaitOnFlagUntilTimeout+0x30>
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e04e      	b.n	80089fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	d037      	beq.n	80089da <UART_WaitOnFlagUntilTimeout+0xb2>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b80      	cmp	r3, #128	@ 0x80
 800896e:	d034      	beq.n	80089da <UART_WaitOnFlagUntilTimeout+0xb2>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b40      	cmp	r3, #64	@ 0x40
 8008974:	d031      	beq.n	80089da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	f003 0308 	and.w	r3, r3, #8
 8008980:	2b08      	cmp	r3, #8
 8008982:	d110      	bne.n	80089a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2208      	movs	r2, #8
 800898a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 f8ff 	bl	8008b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2208      	movs	r2, #8
 8008996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e029      	b.n	80089fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b4:	d111      	bne.n	80089da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 f8e5 	bl	8008b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e00f      	b.n	80089fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4013      	ands	r3, r2
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	bf0c      	ite	eq
 80089ea:	2301      	moveq	r3, #1
 80089ec:	2300      	movne	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	461a      	mov	r2, r3
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d0a0      	beq.n	800893a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b096      	sub	sp, #88	@ 0x58
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	88fa      	ldrh	r2, [r7, #6]
 8008a1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2222      	movs	r2, #34	@ 0x22
 8008a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d028      	beq.n	8008a8a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b38 <UART_Start_Receive_DMA+0x134>)
 8008a3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a44:	4a3d      	ldr	r2, [pc, #244]	@ (8008b3c <UART_Start_Receive_DMA+0x138>)
 8008a46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b40 <UART_Start_Receive_DMA+0x13c>)
 8008a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a54:	2200      	movs	r2, #0
 8008a56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3324      	adds	r3, #36	@ 0x24
 8008a62:	4619      	mov	r1, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a68:	461a      	mov	r2, r3
 8008a6a:	88fb      	ldrh	r3, [r7, #6]
 8008a6c:	f7fa fd32 	bl	80034d4 <HAL_DMA_Start_IT>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d009      	beq.n	8008a8a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2210      	movs	r2, #16
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e051      	b.n	8008b2e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d018      	beq.n	8008ac4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008aa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e6      	bne.n	8008a92 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ae4:	637a      	str	r2, [r7, #52]	@ 0x34
 8008ae6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008aea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e5      	bne.n	8008ac4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	613b      	str	r3, [r7, #16]
   return(result);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b18:	623a      	str	r2, [r7, #32]
 8008b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	69f9      	ldr	r1, [r7, #28]
 8008b1e:	6a3a      	ldr	r2, [r7, #32]
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e5      	bne.n	8008af8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3758      	adds	r7, #88	@ 0x58
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	08008d09 	.word	0x08008d09
 8008b3c:	08008e2f 	.word	0x08008e2f
 8008b40:	08008e6d 	.word	0x08008e6d

08008b44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b089      	sub	sp, #36	@ 0x24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	61bb      	str	r3, [r7, #24]
 8008b6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6979      	ldr	r1, [r7, #20]
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	613b      	str	r3, [r7, #16]
   return(result);
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e6      	bne.n	8008b4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2220      	movs	r2, #32
 8008b82:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008b84:	bf00      	nop
 8008b86:	3724      	adds	r7, #36	@ 0x24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b095      	sub	sp, #84	@ 0x54
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e6      	bne.n	8008b98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e5      	bne.n	8008bca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d118      	bne.n	8008c38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f023 0310 	bic.w	r3, r3, #16
 8008c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6979      	ldr	r1, [r7, #20]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	613b      	str	r3, [r7, #16]
   return(result);
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e6      	bne.n	8008c06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c4c:	bf00      	nop
 8008c4e:	3754      	adds	r7, #84	@ 0x54
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b090      	sub	sp, #64	@ 0x40
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d037      	beq.n	8008cde <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	623b      	str	r3, [r7, #32]
   return(result);
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3308      	adds	r3, #8
 8008c94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c96:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e5      	bne.n	8008c76 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc8:	61fb      	str	r3, [r7, #28]
 8008cca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	69b9      	ldr	r1, [r7, #24]
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e6      	bne.n	8008caa <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cdc:	e002      	b.n	8008ce4 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8008cde:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008ce0:	f7f8 fb86 	bl	80013f0 <HAL_UART_TxCpltCallback>
}
 8008ce4:	bf00      	nop
 8008ce6:	3740      	adds	r7, #64	@ 0x40
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff face 	bl	800829c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b09c      	sub	sp, #112	@ 0x70
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d071      	beq.n	8008e02 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e6      	bne.n	8008d26 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6a:	f023 0301 	bic.w	r3, r3, #1
 8008d6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d78:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d7a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d80:	e841 2300 	strex	r3, r2, [r1]
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e5      	bne.n	8008d58 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3308      	adds	r3, #8
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3308      	adds	r3, #8
 8008daa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e5      	bne.n	8008d8c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d118      	bne.n	8008e02 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f023 0310 	bic.w	r3, r3, #16
 8008de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	69b9      	ldr	r1, [r7, #24]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e6      	bne.n	8008dd0 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e04:	2200      	movs	r2, #0
 8008e06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d107      	bne.n	8008e20 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e16:	4619      	mov	r1, r3
 8008e18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e1a:	f7f8 fb27 	bl	800146c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e1e:	e002      	b.n	8008e26 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008e20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e22:	f7ff fa45 	bl	80082b0 <HAL_UART_RxCpltCallback>
}
 8008e26:	bf00      	nop
 8008e28:	3770      	adds	r7, #112	@ 0x70
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d109      	bne.n	8008e5e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	4619      	mov	r1, r3
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f7f8 fb08 	bl	800146c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e5c:	e002      	b.n	8008e64 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff fa30 	bl	80082c4 <HAL_UART_RxHalfCpltCallback>
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e92:	2b80      	cmp	r3, #128	@ 0x80
 8008e94:	d109      	bne.n	8008eaa <UART_DMAError+0x3e>
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	2b21      	cmp	r3, #33	@ 0x21
 8008e9a:	d106      	bne.n	8008eaa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008ea4:	6978      	ldr	r0, [r7, #20]
 8008ea6:	f7ff fe4d 	bl	8008b44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb4:	2b40      	cmp	r3, #64	@ 0x40
 8008eb6:	d109      	bne.n	8008ecc <UART_DMAError+0x60>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b22      	cmp	r3, #34	@ 0x22
 8008ebc:	d106      	bne.n	8008ecc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f7ff fe62 	bl	8008b90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ed2:	f043 0210 	orr.w	r2, r3, #16
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008edc:	6978      	ldr	r0, [r7, #20]
 8008ede:	f7ff f9fb 	bl	80082d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ee2:	bf00      	nop
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff f9e5 	bl	80082d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f0e:	bf00      	nop
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	61bb      	str	r3, [r7, #24]
 8008f3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	6979      	ldr	r1, [r7, #20]
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	613b      	str	r3, [r7, #16]
   return(result);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e6      	bne.n	8008f1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7f8 fa47 	bl	80013f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f62:	bf00      	nop
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b08c      	sub	sp, #48	@ 0x30
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	d142      	bne.n	800901c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e03b      	b.n	800901e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7ff fd23 	bl	8008a04 <UART_Start_Receive_DMA>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d124      	bne.n	8009016 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d11d      	bne.n	8009010 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2210      	movs	r2, #16
 8008fda:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	e853 3f00 	ldrex	r3, [r3]
 8008fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f043 0310 	orr.w	r3, r3, #16
 8008ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ffc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6a39      	ldr	r1, [r7, #32]
 8009000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	61fb      	str	r3, [r7, #28]
   return(result);
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e6      	bne.n	8008fdc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800900e:	e002      	b.n	8009016 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800901a:	e000      	b.n	800901e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800901c:	2302      	movs	r3, #2
  }
}
 800901e:	4618      	mov	r0, r3
 8009020:	3730      	adds	r7, #48	@ 0x30
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <memset>:
 8009026:	4402      	add	r2, r0
 8009028:	4603      	mov	r3, r0
 800902a:	4293      	cmp	r3, r2
 800902c:	d100      	bne.n	8009030 <memset+0xa>
 800902e:	4770      	bx	lr
 8009030:	f803 1b01 	strb.w	r1, [r3], #1
 8009034:	e7f9      	b.n	800902a <memset+0x4>
	...

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	4d0d      	ldr	r5, [pc, #52]	@ (8009070 <__libc_init_array+0x38>)
 800903c:	4c0d      	ldr	r4, [pc, #52]	@ (8009074 <__libc_init_array+0x3c>)
 800903e:	1b64      	subs	r4, r4, r5
 8009040:	10a4      	asrs	r4, r4, #2
 8009042:	2600      	movs	r6, #0
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	4d0b      	ldr	r5, [pc, #44]	@ (8009078 <__libc_init_array+0x40>)
 800904a:	4c0c      	ldr	r4, [pc, #48]	@ (800907c <__libc_init_array+0x44>)
 800904c:	f000 f818 	bl	8009080 <_init>
 8009050:	1b64      	subs	r4, r4, r5
 8009052:	10a4      	asrs	r4, r4, #2
 8009054:	2600      	movs	r6, #0
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	080090d0 	.word	0x080090d0
 8009074:	080090d0 	.word	0x080090d0
 8009078:	080090d0 	.word	0x080090d0
 800907c:	080090d4 	.word	0x080090d4

08009080 <_init>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr

0800908c <_fini>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr
