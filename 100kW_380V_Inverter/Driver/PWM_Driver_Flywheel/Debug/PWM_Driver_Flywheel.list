
PWM_Driver_Flywheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cfc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008e84  08008e84  00009e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ebc  08008ebc  0000a014  2**0
                  CONTENTS
  4 .ARM          00000000  08008ebc  08008ebc  0000a014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ebc  08008ebc  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ebc  08008ebc  00009ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ec0  08008ec0  00009ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08008ec4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a014  2**0
                  CONTENTS
 10 .bss          00000550  20000014  20000014  0000a014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000564  20000564  0000a014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018772  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e7  00000000  00000000  000227b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  000258a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001055  00000000  00000000  00026d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002005e  00000000  00000000  00027d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c947  00000000  00000000  00047df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3a86  00000000  00000000  0006473a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001281c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057d4  00000000  00000000  00128204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0012d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e6c 	.word	0x08008e6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08008e6c 	.word	0x08008e6c

080001c8 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	781a      	ldrb	r2, [r3, #0]
 80001da:	4b57      	ldr	r3, [pc, #348]	@ (8000338 <Registers_handler+0x170>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d026      	beq.n	8000230 <Registers_handler+0x68>
 80001e2:	2300      	movs	r3, #0
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	e007      	b.n	80001f8 <Registers_handler+0x30>
 80001e8:	8afb      	ldrh	r3, [r7, #22]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	4413      	add	r3, r2
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
 80001f2:	8afb      	ldrh	r3, [r7, #22]
 80001f4:	3301      	adds	r3, #1
 80001f6:	82fb      	strh	r3, [r7, #22]
 80001f8:	8afb      	ldrh	r3, [r7, #22]
 80001fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80001fc:	d9f4      	bls.n	80001e8 <Registers_handler+0x20>
	     RX_2;
 80001fe:	2200      	movs	r2, #0
 8000200:	2104      	movs	r1, #4
 8000202:	484e      	ldr	r0, [pc, #312]	@ (800033c <Registers_handler+0x174>)
 8000204:	f003 fca6 	bl	8003b54 <HAL_GPIO_WritePin>
	     LED_1_OFF;
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800020e:	484c      	ldr	r0, [pc, #304]	@ (8000340 <Registers_handler+0x178>)
 8000210:	f003 fca0 	bl	8003b54 <HAL_GPIO_WritePin>
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000214:	2240      	movs	r2, #64	@ 0x40
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	484a      	ldr	r0, [pc, #296]	@ (8000344 <Registers_handler+0x17c>)
 800021a:	f008 fda6 	bl	8008d6a <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800021e:	4b4a      	ldr	r3, [pc, #296]	@ (8000348 <Registers_handler+0x180>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b48      	ldr	r3, [pc, #288]	@ (8000348 <Registers_handler+0x180>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f022 0204 	bic.w	r2, r2, #4
 800022c:	601a      	str	r2, [r3, #0]
		return;}
 800022e:	e080      	b.n	8000332 <Registers_handler+0x16a>


	if (Size < 4) {
 8000230:	887b      	ldrh	r3, [r7, #2]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d805      	bhi.n	8000242 <Registers_handler+0x7a>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 8000236:	2202      	movs	r2, #2
 8000238:	2103      	movs	r1, #3
 800023a:	4842      	ldr	r0, [pc, #264]	@ (8000344 <Registers_handler+0x17c>)
 800023c:	f001 f960 	bl	8001500 <sendError>

	        return;
 8000240:	e077      	b.n	8000332 <Registers_handler+0x16a>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 8000242:	887b      	ldrh	r3, [r7, #2]
 8000244:	3b01      	subs	r3, #1
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b21a      	sxth	r2, r3
 800024e:	887b      	ldrh	r3, [r7, #2]
 8000250:	3b02      	subs	r3, #2
 8000252:	68f9      	ldr	r1, [r7, #12]
 8000254:	440b      	add	r3, r1
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	b21b      	sxth	r3, r3
 800025c:	4313      	orrs	r3, r2
 800025e:	b21b      	sxth	r3, r3
 8000260:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 8000262:	887b      	ldrh	r3, [r7, #2]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	3b02      	subs	r3, #2
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4619      	mov	r1, r3
 800026c:	68f8      	ldr	r0, [r7, #12]
 800026e:	f001 f8bf 	bl	80013f0 <calcCRC16ModBus>
 8000272:	4603      	mov	r3, r0
 8000274:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 8000276:	8aba      	ldrh	r2, [r7, #20]
 8000278:	8a7b      	ldrh	r3, [r7, #18]
 800027a:	429a      	cmp	r2, r3
 800027c:	d005      	beq.n	800028a <Registers_handler+0xc2>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 800027e:	2203      	movs	r2, #3
 8000280:	2103      	movs	r1, #3
 8000282:	4830      	ldr	r0, [pc, #192]	@ (8000344 <Registers_handler+0x17c>)
 8000284:	f001 f93c 	bl	8001500 <sendError>

	        return;
 8000288:	e053      	b.n	8000332 <Registers_handler+0x16a>
	    }


                       uint8_t opCode = rxFrame[1];
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 8000290:	7c7b      	ldrb	r3, [r7, #17]
 8000292:	3b01      	subs	r3, #1
 8000294:	2b0f      	cmp	r3, #15
 8000296:	d845      	bhi.n	8000324 <Registers_handler+0x15c>
 8000298:	a201      	add	r2, pc, #4	@ (adr r2, 80002a0 <Registers_handler+0xd8>)
 800029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029e:	bf00      	nop
 80002a0:	080002e1 	.word	0x080002e1
 80002a4:	080002ef 	.word	0x080002ef
 80002a8:	080002fd 	.word	0x080002fd
 80002ac:	08000307 	.word	0x08000307
 80002b0:	08000325 	.word	0x08000325
 80002b4:	08000311 	.word	0x08000311
 80002b8:	08000325 	.word	0x08000325
 80002bc:	08000325 	.word	0x08000325
 80002c0:	08000325 	.word	0x08000325
 80002c4:	08000325 	.word	0x08000325
 80002c8:	08000325 	.word	0x08000325
 80002cc:	08000325 	.word	0x08000325
 80002d0:	08000325 	.word	0x08000325
 80002d4:	08000325 	.word	0x08000325
 80002d8:	08000325 	.word	0x08000325
 80002dc:	0800031b 	.word	0x0800031b
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <Registers_handler+0x184>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4619      	mov	r1, r3
 80002e6:	4817      	ldr	r0, [pc, #92]	@ (8000344 <Registers_handler+0x17c>)
 80002e8:	f001 fa28 	bl	800173c <handleReadCoils>
				  			   break;
 80002ec:	e021      	b.n	8000332 <Registers_handler+0x16a>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 80002ee:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <Registers_handler+0x188>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4813      	ldr	r0, [pc, #76]	@ (8000344 <Registers_handler+0x17c>)
 80002f6:	f001 fa89 	bl	800180c <handleReadDiscreteInputs>
							   break;
 80002fa:	e01a      	b.n	8000332 <Registers_handler+0x16a>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80002fc:	68b9      	ldr	r1, [r7, #8]
 80002fe:	4811      	ldr	r0, [pc, #68]	@ (8000344 <Registers_handler+0x17c>)
 8000300:	f001 f92e 	bl	8001560 <handleReadHoldingRegs>
				  			   break;
 8000304:	e015      	b.n	8000332 <Registers_handler+0x16a>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	480e      	ldr	r0, [pc, #56]	@ (8000344 <Registers_handler+0x17c>)
 800030a:	f001 f99f 	bl	800164c <handleReadInputRegs>

				  			   break;
 800030e:	e010      	b.n	8000332 <Registers_handler+0x16a>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <Registers_handler+0x17c>)
 8000314:	f001 fae6 	bl	80018e4 <handleWriteMulyipleHandlingRegister>

                               break;
 8000318:	e00b      	b.n	8000332 <Registers_handler+0x16a>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800031a:	6879      	ldr	r1, [r7, #4]
 800031c:	4809      	ldr	r0, [pc, #36]	@ (8000344 <Registers_handler+0x17c>)
 800031e:	f001 fae1 	bl	80018e4 <handleWriteMulyipleHandlingRegister>

                               break;
 8000322:	e006      	b.n	8000332 <Registers_handler+0x16a>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 8000324:	7c7b      	ldrb	r3, [r7, #17]
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	4806      	ldr	r0, [pc, #24]	@ (8000344 <Registers_handler+0x17c>)
 800032c:	f001 f8e8 	bl	8001500 <sendError>
				  			   break;
 8000330:	bf00      	nop
				  			     }



                          }
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000000 	.word	0x20000000
 800033c:	48000c00 	.word	0x48000c00
 8000340:	48000400 	.word	0x48000400
 8000344:	20000450 	.word	0x20000450
 8000348:	200004d8 	.word	0x200004d8
 800034c:	200001b5 	.word	0x200001b5
 8000350:	200001b4 	.word	0x200001b4

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f001 ff34 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f95a 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 fdbc 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8000364:	f000 fd94 	bl	8000e90 <MX_DMA_Init>
  MX_TIM1_Init();
 8000368:	f000 faa8 	bl	80008bc <MX_TIM1_Init>
  MX_TIM3_Init();
 800036c:	f000 fc12 	bl	8000b94 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000370:	f000 fc5e 	bl	8000c30 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000374:	f000 fb6a 	bl	8000a4c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000378:	f000 fd5a 	bl	8000e30 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800037c:	f000 fa20 	bl	80007c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000380:	f000 f9ae 	bl	80006e0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000384:	f000 fa5c 	bl	8000840 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000388:	f000 fd00 	bl	8000d8c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
   LED_1_ON;
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000392:	488d      	ldr	r0, [pc, #564]	@ (80005c8 <main+0x274>)
 8000394:	f003 fbde 	bl	8003b54 <HAL_GPIO_WritePin>
   RX_2;
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	488b      	ldr	r0, [pc, #556]	@ (80005cc <main+0x278>)
 800039e:	f003 fbd9 	bl	8003b54 <HAL_GPIO_WritePin>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
   HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
   */

   TIM1->ARR=2000;
 80003a2:	4b8b      	ldr	r3, [pc, #556]	@ (80005d0 <main+0x27c>)
 80003a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80003a8:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM8->ARR=2000;
 80003aa:	4b8a      	ldr	r3, [pc, #552]	@ (80005d4 <main+0x280>)
 80003ac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80003b0:	62da      	str	r2, [r3, #44]	@ 0x2c

   DRV_1_ON;
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003b8:	4887      	ldr	r0, [pc, #540]	@ (80005d8 <main+0x284>)
 80003ba:	f003 fbcb 	bl	8003b54 <HAL_GPIO_WritePin>
   DRV_2_ON;
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	4884      	ldr	r0, [pc, #528]	@ (80005d8 <main+0x284>)
 80003c6:	f003 fbc5 	bl	8003b54 <HAL_GPIO_WritePin>
   DRV_3_ON;
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d0:	4881      	ldr	r0, [pc, #516]	@ (80005d8 <main+0x284>)
 80003d2:	f003 fbbf 	bl	8003b54 <HAL_GPIO_WritePin>
   DRV_4_ON;
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003dc:	487e      	ldr	r0, [pc, #504]	@ (80005d8 <main+0x284>)
 80003de:	f003 fbb9 	bl	8003b54 <HAL_GPIO_WritePin>
   HAL_TIM_Base_Start_IT(&htim2);
 80003e2:	487e      	ldr	r0, [pc, #504]	@ (80005dc <main+0x288>)
 80003e4:	f005 fa12 	bl	800580c <HAL_TIM_Base_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80003e8:	2100      	movs	r1, #0
 80003ea:	487c      	ldr	r0, [pc, #496]	@ (80005dc <main+0x288>)
 80003ec:	f005 fd00 	bl	8005df0 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80003f0:	2104      	movs	r1, #4
 80003f2:	487a      	ldr	r0, [pc, #488]	@ (80005dc <main+0x288>)
 80003f4:	f005 fcfc 	bl	8005df0 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80003f8:	2108      	movs	r1, #8
 80003fa:	4878      	ldr	r0, [pc, #480]	@ (80005dc <main+0x288>)
 80003fc:	f005 fcf8 	bl	8005df0 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000400:	210c      	movs	r1, #12
 8000402:	4876      	ldr	r0, [pc, #472]	@ (80005dc <main+0x288>)
 8000404:	f005 fcf4 	bl	8005df0 <HAL_TIM_IC_Start_IT>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000408:	2240      	movs	r2, #64	@ 0x40
 800040a:	4975      	ldr	r1, [pc, #468]	@ (80005e0 <main+0x28c>)
 800040c:	4875      	ldr	r0, [pc, #468]	@ (80005e4 <main+0x290>)
 800040e:	f008 fcac 	bl	8008d6a <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000412:	4b75      	ldr	r3, [pc, #468]	@ (80005e8 <main+0x294>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b73      	ldr	r3, [pc, #460]	@ (80005e8 <main+0x294>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f022 0204 	bic.w	r2, r2, #4
 8000420:	601a      	str	r2, [r3, #0]
     HAL_TIM_Base_Start_IT(&htim15);
 8000422:	4872      	ldr	r0, [pc, #456]	@ (80005ec <main+0x298>)
 8000424:	f005 f9f2 	bl	800580c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    TIM1->CCR1=rcv_data_reg[0];
 8000428:	4b71      	ldr	r3, [pc, #452]	@ (80005f0 <main+0x29c>)
 800042a:	881a      	ldrh	r2, [r3, #0]
 800042c:	4b68      	ldr	r3, [pc, #416]	@ (80005d0 <main+0x27c>)
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
	  	TIM1->CCR2=rcv_data_reg[1];
 8000430:	4b6f      	ldr	r3, [pc, #444]	@ (80005f0 <main+0x29c>)
 8000432:	885a      	ldrh	r2, [r3, #2]
 8000434:	4b66      	ldr	r3, [pc, #408]	@ (80005d0 <main+0x27c>)
 8000436:	639a      	str	r2, [r3, #56]	@ 0x38
	  	TIM1->CCR3=rcv_data_reg[2];
 8000438:	4b6d      	ldr	r3, [pc, #436]	@ (80005f0 <main+0x29c>)
 800043a:	889a      	ldrh	r2, [r3, #4]
 800043c:	4b64      	ldr	r3, [pc, #400]	@ (80005d0 <main+0x27c>)
 800043e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	TIM8->CCR1=rcv_data_reg[3];
 8000440:	4b6b      	ldr	r3, [pc, #428]	@ (80005f0 <main+0x29c>)
 8000442:	88da      	ldrh	r2, [r3, #6]
 8000444:	4b63      	ldr	r3, [pc, #396]	@ (80005d4 <main+0x280>)
 8000446:	635a      	str	r2, [r3, #52]	@ 0x34
	  	TIM1->ARR= rcv_data_reg[4];
 8000448:	4b69      	ldr	r3, [pc, #420]	@ (80005f0 <main+0x29c>)
 800044a:	891a      	ldrh	r2, [r3, #8]
 800044c:	4b60      	ldr	r3, [pc, #384]	@ (80005d0 <main+0x27c>)
 800044e:	62da      	str	r2, [r3, #44]	@ 0x2c
	  	TIM8->ARR= rcv_data_reg[4];
 8000450:	4b67      	ldr	r3, [pc, #412]	@ (80005f0 <main+0x29c>)
 8000452:	891a      	ldrh	r2, [r3, #8]
 8000454:	4b5f      	ldr	r3, [pc, #380]	@ (80005d4 <main+0x280>)
 8000456:	62da      	str	r2, [r3, #44]	@ 0x2c
	    Check_USART1_Timeout();
 8000458:	f000 ff42 	bl	80012e0 <Check_USART1_Timeout>
	    data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 800045c:	4b65      	ldr	r3, [pc, #404]	@ (80005f4 <main+0x2a0>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4619      	mov	r1, r3
 8000462:	485b      	ldr	r0, [pc, #364]	@ (80005d0 <main+0x27c>)
 8000464:	f000 fdfa 	bl	800105c <calculateTimerFrequency>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b62      	ldr	r3, [pc, #392]	@ (80005f8 <main+0x2a4>)
 800046e:	801a      	strh	r2, [r3, #0]
	    data_reg[1]=calculateTimerFrequency(TIM8, timerClockFreq);
 8000470:	4b60      	ldr	r3, [pc, #384]	@ (80005f4 <main+0x2a0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	4857      	ldr	r0, [pc, #348]	@ (80005d4 <main+0x280>)
 8000478:	f000 fdf0 	bl	800105c <calculateTimerFrequency>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	4b5d      	ldr	r3, [pc, #372]	@ (80005f8 <main+0x2a4>)
 8000482:	805a      	strh	r2, [r3, #2]
	    data_reg[2]=rpm;
 8000484:	4b5d      	ldr	r3, [pc, #372]	@ (80005fc <main+0x2a8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b5b      	ldr	r3, [pc, #364]	@ (80005f8 <main+0x2a4>)
 800048c:	809a      	strh	r2, [r3, #4]

	    coil_1= (rcv_data_reg[7]>>1)&0x01;
 800048e:	4b58      	ldr	r3, [pc, #352]	@ (80005f0 <main+0x29c>)
 8000490:	89db      	ldrh	r3, [r3, #14]
 8000492:	085b      	lsrs	r3, r3, #1
 8000494:	b29b      	uxth	r3, r3
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	2b00      	cmp	r3, #0
 800049c:	bf14      	ite	ne
 800049e:	2301      	movne	r3, #1
 80004a0:	2300      	moveq	r3, #0
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b56      	ldr	r3, [pc, #344]	@ (8000600 <main+0x2ac>)
 80004a6:	701a      	strb	r2, [r3, #0]
	    coil_2= (rcv_data_reg[7]>>2)&0x01;
 80004a8:	4b51      	ldr	r3, [pc, #324]	@ (80005f0 <main+0x29c>)
 80004aa:	89db      	ldrh	r3, [r3, #14]
 80004ac:	089b      	lsrs	r3, r3, #2
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	bf14      	ite	ne
 80004b8:	2301      	movne	r3, #1
 80004ba:	2300      	moveq	r3, #0
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b51      	ldr	r3, [pc, #324]	@ (8000604 <main+0x2b0>)
 80004c0:	701a      	strb	r2, [r3, #0]
	    coil_3= (rcv_data_reg[7]>>3)&0x01;
 80004c2:	4b4b      	ldr	r3, [pc, #300]	@ (80005f0 <main+0x29c>)
 80004c4:	89db      	ldrh	r3, [r3, #14]
 80004c6:	08db      	lsrs	r3, r3, #3
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	bf14      	ite	ne
 80004d2:	2301      	movne	r3, #1
 80004d4:	2300      	moveq	r3, #0
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	4b4b      	ldr	r3, [pc, #300]	@ (8000608 <main+0x2b4>)
 80004da:	701a      	strb	r2, [r3, #0]
	    coil_4= (rcv_data_reg[7]>>4)&0x01;
 80004dc:	4b44      	ldr	r3, [pc, #272]	@ (80005f0 <main+0x29c>)
 80004de:	89db      	ldrh	r3, [r3, #14]
 80004e0:	091b      	lsrs	r3, r3, #4
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	bf14      	ite	ne
 80004ec:	2301      	movne	r3, #1
 80004ee:	2300      	moveq	r3, #0
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b46      	ldr	r3, [pc, #280]	@ (800060c <main+0x2b8>)
 80004f4:	701a      	strb	r2, [r3, #0]
	    if(coil_1){LED_4_ON;}
 80004f6:	4b42      	ldr	r3, [pc, #264]	@ (8000600 <main+0x2ac>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d005      	beq.n	800050a <main+0x1b6>
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000504:	4830      	ldr	r0, [pc, #192]	@ (80005c8 <main+0x274>)
 8000506:	f003 fb25 	bl	8003b54 <HAL_GPIO_WritePin>
	    if(!coil_1){LED_4_OFF;}
 800050a:	4b3d      	ldr	r3, [pc, #244]	@ (8000600 <main+0x2ac>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	f083 0301 	eor.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d005      	beq.n	8000524 <main+0x1d0>
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800051e:	482a      	ldr	r0, [pc, #168]	@ (80005c8 <main+0x274>)
 8000520:	f003 fb18 	bl	8003b54 <HAL_GPIO_WritePin>
	    if(coil_2){LED_5_ON;}
 8000524:	4b37      	ldr	r3, [pc, #220]	@ (8000604 <main+0x2b0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d005      	beq.n	8000538 <main+0x1e4>
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000532:	4829      	ldr	r0, [pc, #164]	@ (80005d8 <main+0x284>)
 8000534:	f003 fb0e 	bl	8003b54 <HAL_GPIO_WritePin>
	   	if(!coil_2){LED_5_OFF;}
 8000538:	4b32      	ldr	r3, [pc, #200]	@ (8000604 <main+0x2b0>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	f083 0301 	eor.w	r3, r3, #1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d005      	beq.n	8000552 <main+0x1fe>
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800054c:	4822      	ldr	r0, [pc, #136]	@ (80005d8 <main+0x284>)
 800054e:	f003 fb01 	bl	8003b54 <HAL_GPIO_WritePin>
	   	if(coil_3){LED_6_ON;}
 8000552:	4b2d      	ldr	r3, [pc, #180]	@ (8000608 <main+0x2b4>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d005      	beq.n	8000566 <main+0x212>
 800055a:	2201      	movs	r2, #1
 800055c:	2110      	movs	r1, #16
 800055e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000562:	f003 faf7 	bl	8003b54 <HAL_GPIO_WritePin>
	    if(!coil_3){LED_6_OFF;}
 8000566:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <main+0x2b4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <main+0x22c>
 8000574:	2200      	movs	r2, #0
 8000576:	2110      	movs	r1, #16
 8000578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057c:	f003 faea 	bl	8003b54 <HAL_GPIO_WritePin>
	    if(coil_4){LED_7_ON;}
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <main+0x2b8>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d004      	beq.n	8000592 <main+0x23e>
 8000588:	2201      	movs	r2, #1
 800058a:	2120      	movs	r1, #32
 800058c:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <main+0x284>)
 800058e:	f003 fae1 	bl	8003b54 <HAL_GPIO_WritePin>
	    if(!coil_4){LED_7_OFF;}
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <main+0x2b8>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	f083 0301 	eor.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d004      	beq.n	80005aa <main+0x256>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <main+0x284>)
 80005a6:	f003 fad5 	bl	8003b54 <HAL_GPIO_WritePin>

if((HAL_GetTick()-moove)>=ROTATE_TIME){rpm=0;}
 80005aa:	f001 fe65 	bl	8002278 <HAL_GetTick>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <main+0x2bc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005ba:	f4ff af35 	bcc.w	8000428 <main+0xd4>
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <main+0x2a8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	    TIM1->CCR1=rcv_data_reg[0];
 80005c4:	e730      	b.n	8000428 <main+0xd4>
 80005c6:	bf00      	nop
 80005c8:	48000400 	.word	0x48000400
 80005cc:	48000c00 	.word	0x48000c00
 80005d0:	40012c00 	.word	0x40012c00
 80005d4:	40013400 	.word	0x40013400
 80005d8:	48000800 	.word	0x48000800
 80005dc:	20000320 	.word	0x20000320
 80005e0:	20000034 	.word	0x20000034
 80005e4:	20000450 	.word	0x20000450
 80005e8:	200004d8 	.word	0x200004d8
 80005ec:	20000404 	.word	0x20000404
 80005f0:	20000194 	.word	0x20000194
 80005f4:	20000004 	.word	0x20000004
 80005f8:	20000174 	.word	0x20000174
 80005fc:	200001c4 	.word	0x200001c4
 8000600:	200001b6 	.word	0x200001b6
 8000604:	200001b7 	.word	0x200001b7
 8000608:	200001b8 	.word	0x200001b8
 800060c:	200001b9 	.word	0x200001b9
 8000610:	200001c8 	.word	0x200001c8

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b09e      	sub	sp, #120	@ 0x78
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800061e:	2228      	movs	r2, #40	@ 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f008 fbf5 	bl	8008e12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	223c      	movs	r2, #60	@ 0x3c
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f008 fbe7 	bl	8008e12 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000644:	2303      	movs	r3, #3
 8000646:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800064e:	2301      	movs	r3, #1
 8000650:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000662:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000664:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000668:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fbba 	bl	8003de8 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800067a:	f000 feb3 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fbe2 	bl	8004e64 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a6:	f000 fe9d 	bl	80013e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80006aa:	f243 03a1 	movw	r3, #12449	@ 0x30a1
 80006ae:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006be:	2300      	movs	r3, #0
 80006c0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fded 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d4:	f000 fe86 	bl	80013e4 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3778      	adds	r7, #120	@ 0x78
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000702:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000704:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000708:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800070a:	4b2c      	ldr	r3, [pc, #176]	@ (80007bc <MX_ADC1_Init+0xdc>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <MX_ADC1_Init+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <MX_ADC1_Init+0xdc>)
 800072c:	2200      	movs	r2, #0
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000732:	2201      	movs	r2, #1
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_ADC1_Init+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_ADC1_Init+0xdc>)
 800074c:	2204      	movs	r2, #4
 800074e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000752:	2200      	movs	r2, #0
 8000754:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075c:	4817      	ldr	r0, [pc, #92]	@ (80007bc <MX_ADC1_Init+0xdc>)
 800075e:	f001 fdbb 	bl	80022d8 <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000768:	f000 fe3c 	bl	80013e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <MX_ADC1_Init+0xdc>)
 8000778:	f002 fa78 	bl	8002c6c <HAL_ADCEx_MultiModeConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000782:	f000 fe2f 	bl	80013e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2301      	movs	r3, #1
 800078c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <MX_ADC1_Init+0xdc>)
 80007a4:	f001 ff78 	bl	8002698 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80007ae:	f000 fe19 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200001cc 	.word	0x200001cc

080007c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_I2C1_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_I2C1_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007fc:	f003 f9c2 	bl	8003b84 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 fded 	bl	80013e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <MX_I2C1_Init+0x74>)
 800080e:	f003 fa54 	bl	8003cba <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fde4 	bl	80013e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_I2C1_Init+0x74>)
 8000820:	f003 fa96 	bl	8003d50 <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fddb 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000021c 	.word	0x2000021c
 8000838:	40005400 	.word	0x40005400
 800083c:	00201d2b 	.word	0x00201d2b

08000840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	@ (80008b8 <MX_SPI1_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_SPI1_Init+0x74>)
 800084c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_SPI1_Init+0x74>)
 800085a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800085e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_SPI1_Init+0x74>)
 800086e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000872:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000876:	2218      	movs	r2, #24
 8000878:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_SPI1_Init+0x74>)
 800088e:	2207      	movs	r2, #7
 8000890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_SPI1_Init+0x74>)
 800089a:	2208      	movs	r2, #8
 800089c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_SPI1_Init+0x74>)
 80008a0:	f004 feb2 	bl	8005608 <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fd9b 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000270 	.word	0x20000270
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09a      	sub	sp, #104	@ 0x68
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	222c      	movs	r2, #44	@ 0x2c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f008 fa8b 	bl	8008e12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008fc:	4b51      	ldr	r3, [pc, #324]	@ (8000a44 <MX_TIM1_Init+0x188>)
 80008fe:	4a52      	ldr	r2, [pc, #328]	@ (8000a48 <MX_TIM1_Init+0x18c>)
 8000900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000902:	4b50      	ldr	r3, [pc, #320]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b4e      	ldr	r3, [pc, #312]	@ (8000a44 <MX_TIM1_Init+0x188>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800090e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000910:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b4b      	ldr	r3, [pc, #300]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800091c:	4b49      	ldr	r3, [pc, #292]	@ (8000a44 <MX_TIM1_Init+0x188>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000922:	4b48      	ldr	r3, [pc, #288]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000924:	2280      	movs	r2, #128	@ 0x80
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000928:	4846      	ldr	r0, [pc, #280]	@ (8000a44 <MX_TIM1_Init+0x188>)
 800092a:	f004 ff18 	bl	800575e <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 fd56 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000942:	4619      	mov	r1, r3
 8000944:	483f      	ldr	r0, [pc, #252]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000946:	f005 fe47 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000950:	f000 fd48 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000954:	483b      	ldr	r0, [pc, #236]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000956:	f004 fff2 	bl	800593e <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000960:	f000 fd40 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000970:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000978:	f006 fdc6 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000982:	f000 fd2f 	bl	80013e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000986:	2360      	movs	r3, #96	@ 0x60
 8000988:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 800098a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80009a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4825      	ldr	r0, [pc, #148]	@ (8000a44 <MX_TIM1_Init+0x188>)
 80009b0:	f005 fcfe 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80009ba:	f000 fd13 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009c2:	2204      	movs	r2, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	481f      	ldr	r0, [pc, #124]	@ (8000a44 <MX_TIM1_Init+0x188>)
 80009c8:	f005 fcf2 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 80009d2:	f000 fd07 	bl	80013e4 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009de:	2208      	movs	r2, #8
 80009e0:	4619      	mov	r1, r3
 80009e2:	4818      	ldr	r0, [pc, #96]	@ (8000a44 <MX_TIM1_Init+0x188>)
 80009e4:	f005 fce4 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80009ee:	f000 fcf9 	bl	80013e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 80009fe:	2396      	movs	r3, #150	@ 0x96
 8000a00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000a28:	f006 fdee 	bl	8007608 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000a32:	f000 fcd7 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a36:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <MX_TIM1_Init+0x188>)
 8000a38:	f001 f9da 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3768      	adds	r7, #104	@ 0x68
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200002d4 	.word	0x200002d4
 8000a48:	40012c00 	.word	0x40012c00

08000a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	@ 0x30
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b45      	ldr	r3, [pc, #276]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a80:	4b43      	ldr	r3, [pc, #268]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b42      	ldr	r3, [pc, #264]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a8c:	4b40      	ldr	r3, [pc, #256]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b3e      	ldr	r3, [pc, #248]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa0:	483b      	ldr	r0, [pc, #236]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000aa2:	f004 fe5c 	bl	800575e <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000aac:	f000 fc9a 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	4619      	mov	r1, r3
 8000abc:	4834      	ldr	r0, [pc, #208]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000abe:	f005 fd8b 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ac8:	f000 fc8c 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000acc:	4830      	ldr	r0, [pc, #192]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000ace:	f005 f92d 	bl	8005d2c <HAL_TIM_IC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ad8:	f000 fc84 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4829      	ldr	r0, [pc, #164]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000aec:	f006 fd0c 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000af6:	f000 fc75 	bl	80013e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000afa:	2302      	movs	r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8000b06:	230f      	movs	r3, #15
 8000b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481f      	ldr	r0, [pc, #124]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000b12:	f005 fbb1 	bl	8006278 <HAL_TIM_IC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000b1c:	f000 fc62 	bl	80013e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b24:	2302      	movs	r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4817      	ldr	r0, [pc, #92]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000b34:	f005 fba0 	bl	8006278 <HAL_TIM_IC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000b3e:	f000 fc51 	bl	80013e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b42:	2302      	movs	r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2208      	movs	r2, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	480e      	ldr	r0, [pc, #56]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000b56:	f005 fb8f 	bl	8006278 <HAL_TIM_IC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000b60:	f000 fc40 	bl	80013e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	220c      	movs	r2, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_TIM2_Init+0x144>)
 8000b78:	f005 fb7e 	bl	8006278 <HAL_TIM_IC_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM2_Init+0x13a>
  {
    Error_Handler();
 8000b82:	f000 fc2f 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	@ 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000320 	.word	0x20000320

08000b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c2c <MX_TIM3_Init+0x98>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bda:	f004 fdc0 	bl	800575e <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000be4:	f000 fbfe 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000bf6:	f005 fcef 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c00:	f000 fbf0 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM3_Init+0x94>)
 8000c12:	f006 fc79 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 fbe2 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000036c 	.word	0x2000036c
 8000c2c:	40000400 	.word	0x40000400

08000c30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09a      	sub	sp, #104	@ 0x68
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	222c      	movs	r2, #44	@ 0x2c
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 f8d1 	bl	8008e12 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c70:	4b44      	ldr	r3, [pc, #272]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c72:	4a45      	ldr	r2, [pc, #276]	@ (8000d88 <MX_TIM8_Init+0x158>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c76:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b41      	ldr	r3, [pc, #260]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 8000c82:	4b40      	ldr	r3, [pc, #256]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c84:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c90:	4b3c      	ldr	r3, [pc, #240]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b3b      	ldr	r3, [pc, #236]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c9c:	4839      	ldr	r0, [pc, #228]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000c9e:	f004 fd5e 	bl	800575e <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000ca8:	f000 fb9c 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4832      	ldr	r0, [pc, #200]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000cba:	f005 fc8d 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 fb8e 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000cc8:	482e      	ldr	r0, [pc, #184]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000cca:	f004 fe38 	bl	800593e <HAL_TIM_PWM_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000cd4:	f000 fb86 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ce4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4826      	ldr	r0, [pc, #152]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000cec:	f006 fc0c 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000cf6:	f000 fb75 	bl	80013e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfa:	2360      	movs	r3, #96	@ 0x60
 8000cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4818      	ldr	r0, [pc, #96]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000d22:	f005 fb45 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000d2c:	f000 fb5a 	bl	80013e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4807      	ldr	r0, [pc, #28]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000d66:	f006 fc4f 	bl	8007608 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000d70:	f000 fb38 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d74:	4803      	ldr	r0, [pc, #12]	@ (8000d84 <MX_TIM8_Init+0x154>)
 8000d76:	f001 f83b 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8000d7a:	bf00      	nop
 8000d7c:	3768      	adds	r7, #104	@ 0x68
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200003b8 	.word	0x200003b8
 8000d88:	40013400 	.word	0x40013400

08000d8c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000dac:	4a1f      	ldr	r2, [pc, #124]	@ (8000e2c <MX_TIM15_Init+0xa0>)
 8000dae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000dbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000dd6:	4814      	ldr	r0, [pc, #80]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000dd8:	f004 fcc1 	bl	800575e <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000de2:	f000 faff 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000df4:	f005 fbf0 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000dfe:	f000 faf1 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <MX_TIM15_Init+0x9c>)
 8000e10:	f006 fb7a 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000e1a:	f000 fae3 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000404 	.word	0x20000404
 8000e2c:	40014000 	.word	0x40014000

08000e30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	@ (8000e8c <MX_USART1_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e74:	f006 fc89 	bl	800778a <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 fab1 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000450 	.word	0x20000450
 8000e8c:	40013800 	.word	0x40013800

08000e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <MX_DMA_Init+0x48>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed8 <MX_DMA_Init+0x48>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <MX_DMA_Init+0x48>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	200e      	movs	r0, #14
 8000eb4:	f002 f931 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000eb8:	200e      	movs	r0, #14
 8000eba:	f002 f94a 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f002 f929 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ec8:	200f      	movs	r0, #15
 8000eca:	f002 f942 	bl	8003152 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b56      	ldr	r3, [pc, #344]	@ (800104c <MX_GPIO_Init+0x170>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	4a55      	ldr	r2, [pc, #340]	@ (800104c <MX_GPIO_Init+0x170>)
 8000ef8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000efc:	6153      	str	r3, [r2, #20]
 8000efe:	4b53      	ldr	r3, [pc, #332]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0a:	4b50      	ldr	r3, [pc, #320]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	4b4d      	ldr	r3, [pc, #308]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b4a      	ldr	r3, [pc, #296]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	4a49      	ldr	r2, [pc, #292]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	6153      	str	r3, [r2, #20]
 8000f2e:	4b47      	ldr	r3, [pc, #284]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b44      	ldr	r3, [pc, #272]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a43      	ldr	r2, [pc, #268]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b41      	ldr	r3, [pc, #260]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	4b3e      	ldr	r3, [pc, #248]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a3d      	ldr	r2, [pc, #244]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <MX_GPIO_Init+0x170>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f64f 31a0 	movw	r1, #64416	@ 0xfba0
 8000f70:	4837      	ldr	r0, [pc, #220]	@ (8001050 <MX_GPIO_Init+0x174>)
 8000f72:	f002 fdef 	bl	8003b54 <HAL_GPIO_WritePin>
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2110      	movs	r1, #16
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f002 fde9 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 8000f82:	2200      	movs	r2, #0
 8000f84:	f647 0107 	movw	r1, #30727	@ 0x7807
 8000f88:	4832      	ldr	r0, [pc, #200]	@ (8001054 <MX_GPIO_Init+0x178>)
 8000f8a:	f002 fde3 	bl	8003b54 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECT_GPIO_Port, DIRECT_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2104      	movs	r1, #4
 8000f92:	4831      	ldr	r0, [pc, #196]	@ (8001058 <MX_GPIO_Init+0x17c>)
 8000f94:	f002 fdde 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT_2_EN_Pin PORT_3_EN_Pin PORT_4_EN_Pin LED_7_Pin
                           DISP_DC_RS_Pin DISP_LED_Pin DISP_RST_Pin LED_5_Pin
                           PORT_1_EN_Pin */
  GPIO_InitStruct.Pin = PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000f98:	f64f 33a0 	movw	r3, #64416	@ 0xfba0
 8000f9c:	617b      	str	r3, [r7, #20]
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4827      	ldr	r0, [pc, #156]	@ (8001050 <MX_GPIO_Init+0x174>)
 8000fb2:	f002 fb79 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_INT_Pin UI_INT_Pin */
  GPIO_InitStruct.Pin = DISP_INT_Pin|UI_INT_Pin;
 8000fb6:	2318      	movs	r3, #24
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4821      	ldr	r0, [pc, #132]	@ (8001050 <MX_GPIO_Init+0x174>)
 8000fcc:	f002 fb6c 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_6_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_6_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fea:	f002 fb5d 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_A_Pin HAL_B_Pin HAL_C_Pin */
  GPIO_InitStruct.Pin = HAL_A_Pin|HAL_B_Pin|HAL_C_Pin;
 8000fee:	23e0      	movs	r3, #224	@ 0xe0
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f002 fb4f 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin CS_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 800100a:	f647 0307 	movw	r3, #30727	@ 0x7807
 800100e:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <MX_GPIO_Init+0x178>)
 8001024:	f002 fb40 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin;
 8001028:	2304      	movs	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECT_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <MX_GPIO_Init+0x17c>)
 8001040:	f002 fb32 	bl	80036a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	48000800 	.word	0x48000800
 8001054:	48000400 	.word	0x48000400
 8001058:	48000c00 	.word	0x48000c00

0800105c <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */

// Функция расчёта частоты таймера
uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106a:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	b29b      	uxth	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001094:	f040 808a 	bne.w	80011ac <HAL_TIM_IC_CaptureCallback+0x128>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7f1b      	ldrb	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d132      	bne.n	8001106 <HAL_TIM_IC_CaptureCallback+0x82>
        {

             LED_2_ON;
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010a6:	4843      	ldr	r0, [pc, #268]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010a8:	f002 fd54 	bl	8003b54 <HAL_GPIO_WritePin>




        	period = 0;
 80010ac:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

            TIM2->CNT = 0;
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
            period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80010ba:	2100      	movs	r1, #0
 80010bc:	483f      	ldr	r0, [pc, #252]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x138>)
 80010be:	f005 fb55 	bl	800676c <HAL_TIM_ReadCapturedValue>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a3c      	ldr	r2, [pc, #240]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010c6:	6013      	str	r3, [r2, #0]
          //  pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);

            rpm= 1080000000/period;
 80010c8:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a3c      	ldr	r2, [pc, #240]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4a3c      	ldr	r2, [pc, #240]	@ (80011c4 <HAL_TIM_IC_CaptureCallback+0x140>)
 80010d4:	6013      	str	r3, [r2, #0]
            f=270000000/period;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a3b      	ldr	r2, [pc, #236]	@ (80011c8 <HAL_TIM_IC_CaptureCallback+0x144>)
 80010dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <HAL_TIM_IC_CaptureCallback+0x148>)
 80010e4:	801a      	strh	r2, [r3, #0]



             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80010e6:	2100      	movs	r1, #0
 80010e8:	4839      	ldr	r0, [pc, #228]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80010ea:	f006 f9af 	bl	800744c <HAL_TIMEx_PWMN_Stop>
             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80010ee:	2104      	movs	r1, #4
 80010f0:	4837      	ldr	r0, [pc, #220]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80010f2:	f004 fd85 	bl	8005c00 <HAL_TIM_PWM_Stop>

             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80010f6:	2104      	movs	r1, #4
 80010f8:	4835      	ldr	r0, [pc, #212]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80010fa:	f006 f8f3 	bl	80072e4 <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010fe:	2100      	movs	r1, #0
 8001100:	4833      	ldr	r0, [pc, #204]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001102:	f004 fc7d 	bl	8005a00 <HAL_TIM_PWM_Start>
        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7f1b      	ldrb	r3, [r3, #28]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d11a      	bne.n	8001144 <HAL_TIM_IC_CaptureCallback+0xc0>
        {
             LED_2_OFF;
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001114:	4827      	ldr	r0, [pc, #156]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001116:	f002 fd1d 	bl	8003b54 <HAL_GPIO_WritePin>
             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800111a:	2100      	movs	r1, #0
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800111e:	f004 fd6f 	bl	8005c00 <HAL_TIM_PWM_Stop>
             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001122:	2104      	movs	r1, #4
 8001124:	482a      	ldr	r0, [pc, #168]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001126:	f006 f991 	bl	800744c <HAL_TIMEx_PWMN_Stop>

             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800112a:	2100      	movs	r1, #0
 800112c:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800112e:	f006 f8d9 	bl	80072e4 <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001132:	2104      	movs	r1, #4
 8001134:	4826      	ldr	r0, [pc, #152]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001136:	f004 fc63 	bl	8005a00 <HAL_TIM_PWM_Start>
             moove = HAL_GetTick();
 800113a:	f001 f89d 	bl	8002278 <HAL_GetTick>
 800113e:	4603      	mov	r3, r0
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001142:	6013      	str	r3, [r2, #0]

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7f1b      	ldrb	r3, [r3, #28]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d115      	bne.n	8001178 <HAL_TIM_IC_CaptureCallback+0xf4>
        {
          LED_3_ON;
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001152:	4818      	ldr	r0, [pc, #96]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001154:	f002 fcfe 	bl	8003b54 <HAL_GPIO_WritePin>
          HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001158:	2100      	movs	r1, #0
 800115a:	481f      	ldr	r0, [pc, #124]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x154>)
 800115c:	f006 f976 	bl	800744c <HAL_TIMEx_PWMN_Stop>
          HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001160:	2108      	movs	r1, #8
 8001162:	481b      	ldr	r0, [pc, #108]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001164:	f004 fd4c 	bl	8005c00 <HAL_TIM_PWM_Stop>

          HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001168:	2108      	movs	r1, #8
 800116a:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800116c:	f006 f8ba 	bl	80072e4 <HAL_TIMEx_PWMN_Start>
          HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001170:	2100      	movs	r1, #0
 8001172:	4819      	ldr	r0, [pc, #100]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001174:	f004 fc44 	bl	8005a00 <HAL_TIM_PWM_Start>



        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7f1b      	ldrb	r3, [r3, #28]
 800117c:	2b08      	cmp	r3, #8
 800117e:	d115      	bne.n	80011ac <HAL_TIM_IC_CaptureCallback+0x128>
        {
           LED_3_OFF;
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001186:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001188:	f002 fce4 	bl	8003b54 <HAL_GPIO_WritePin>
           HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800118c:	2108      	movs	r1, #8
 800118e:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001190:	f006 f95c 	bl	800744c <HAL_TIMEx_PWMN_Stop>
           HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001194:	2100      	movs	r1, #0
 8001196:	4810      	ldr	r0, [pc, #64]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001198:	f004 fd32 	bl	8005c00 <HAL_TIM_PWM_Stop>

           HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800119c:	2108      	movs	r1, #8
 800119e:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80011a0:	f004 fc2e 	bl	8005a00 <HAL_TIM_PWM_Start>
           HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80011a4:	2100      	movs	r1, #0
 80011a6:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x154>)
 80011a8:	f006 f89c 	bl	80072e4 <HAL_TIMEx_PWMN_Start>

        }
    }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	48000400 	.word	0x48000400
 80011b8:	200001bc 	.word	0x200001bc
 80011bc:	20000320 	.word	0x20000320
 80011c0:	405f7e00 	.word	0x405f7e00
 80011c4:	200001c4 	.word	0x200001c4
 80011c8:	1017df80 	.word	0x1017df80
 80011cc:	200001c0 	.word	0x200001c0
 80011d0:	200002d4 	.word	0x200002d4
 80011d4:	200001c8 	.word	0x200001c8
 80011d8:	200003b8 	.word	0x200003b8

080011dc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]


	    RX_2;
 80011e4:	2200      	movs	r2, #0
 80011e6:	2104      	movs	r1, #4
 80011e8:	4814      	ldr	r0, [pc, #80]	@ (800123c <HAL_UART_TxCpltCallback+0x60>)
 80011ea:	f002 fcb3 	bl	8003b54 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 80011ee:	f001 f843 	bl	8002278 <HAL_GetTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <HAL_UART_TxCpltCallback+0x64>)
 80011f6:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 80011f8:	2240      	movs	r2, #64	@ 0x40
 80011fa:	4912      	ldr	r1, [pc, #72]	@ (8001244 <HAL_UART_TxCpltCallback+0x68>)
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <HAL_UART_TxCpltCallback+0x6c>)
 80011fe:	f007 fdb4 	bl	8008d6a <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_UART_TxCpltCallback+0x6c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_UART_TxCpltCallback+0x6c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0210 	orr.w	r2, r2, #16
 8001210:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_UART_TxCpltCallback+0x70>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <HAL_UART_TxCpltCallback+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0204 	bic.w	r2, r2, #4
 8001220:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start_IT(&htim15);
 8001222:	480b      	ldr	r0, [pc, #44]	@ (8001250 <HAL_UART_TxCpltCallback+0x74>)
 8001224:	f004 faf2 	bl	800580c <HAL_TIM_Base_Start_IT>
	    LED_1_OFF;
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800122e:	4809      	ldr	r0, [pc, #36]	@ (8001254 <HAL_UART_TxCpltCallback+0x78>)
 8001230:	f002 fc90 	bl	8003b54 <HAL_GPIO_WritePin>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	48000c00 	.word	0x48000c00
 8001240:	20000030 	.word	0x20000030
 8001244:	20000034 	.word	0x20000034
 8001248:	20000450 	.word	0x20000450
 800124c:	200004d8 	.word	0x200004d8
 8001250:	20000404 	.word	0x20000404
 8001254:	48000400 	.word	0x48000400

08001258 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <HAL_UARTEx_RxEventCallback+0x64>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d121      	bne.n	80012b2 <HAL_UARTEx_RxEventCallback+0x5a>
	{

        LED_1_ON;
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001274:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x68>)
 8001276:	f002 fc6d 	bl	8003b54 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim15);
 800127a:	4812      	ldr	r0, [pc, #72]	@ (80012c4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800127c:	f004 fb30 	bl	80058e0 <HAL_TIM_Base_Stop_IT>
		lastActivityTime = HAL_GetTick();
 8001280:	f000 fffa 	bl	8002278 <HAL_GetTick>
 8001284:	4603      	mov	r3, r0
 8001286:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x70>)
 8001288:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <HAL_UARTEx_RxEventCallback+0x74>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_UARTEx_RxEventCallback+0x74>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0210 	bic.w	r2, r2, #16
 8001298:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 800129a:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <HAL_UARTEx_RxEventCallback+0x78>)
 800129c:	f002 f86f 	bl	800337e <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <HAL_UARTEx_RxEventCallback+0x7c>)
 80012a4:	490c      	ldr	r1, [pc, #48]	@ (80012d8 <HAL_UARTEx_RxEventCallback+0x80>)
 80012a6:	480d      	ldr	r0, [pc, #52]	@ (80012dc <HAL_UARTEx_RxEventCallback+0x84>)
 80012a8:	f7fe ff8e 	bl	80001c8 <Registers_handler>
	    HAL_TIM_Base_Start_IT(&htim15);
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_UARTEx_RxEventCallback+0x6c>)
 80012ae:	f004 faad 	bl	800580c <HAL_TIM_Base_Start_IT>
	}
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40013800 	.word	0x40013800
 80012c0:	48000400 	.word	0x48000400
 80012c4:	20000404 	.word	0x20000404
 80012c8:	20000030 	.word	0x20000030
 80012cc:	20000450 	.word	0x20000450
 80012d0:	200004d8 	.word	0x200004d8
 80012d4:	20000194 	.word	0x20000194
 80012d8:	20000174 	.word	0x20000174
 80012dc:	20000034 	.word	0x20000034

080012e0 <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 80012e4:	f000 ffc8 	bl	8002278 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <Check_USART1_Timeout+0x34>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80012f4:	d30c      	bcc.n	8001310 <Check_USART1_Timeout+0x30>
     {

         Reset_USART1();
 80012f6:	f000 f813 	bl	8001320 <Reset_USART1>
         RX_2;
 80012fa:	2200      	movs	r2, #0
 80012fc:	2104      	movs	r1, #4
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <Check_USART1_Timeout+0x38>)
 8001300:	f002 fc28 	bl	8003b54 <HAL_GPIO_WritePin>
         LED_1_OFF;
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800130a:	4804      	ldr	r0, [pc, #16]	@ (800131c <Check_USART1_Timeout+0x3c>)
 800130c:	f002 fc22 	bl	8003b54 <HAL_GPIO_WritePin>
     }
 }
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000030 	.word	0x20000030
 8001318:	48000c00 	.word	0x48000c00
 800131c:	48000400 	.word	0x48000400

08001320 <Reset_USART1>:



void Reset_USART1(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
    LED_1_ON;
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800132a:	4827      	ldr	r0, [pc, #156]	@ (80013c8 <Reset_USART1+0xa8>)
 800132c:	f002 fc12 	bl	8003b54 <HAL_GPIO_WritePin>

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8001330:	4826      	ldr	r0, [pc, #152]	@ (80013cc <Reset_USART1+0xac>)
 8001332:	f006 fb31 	bl	8007998 <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 8001336:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <Reset_USART1+0xb0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <Reset_USART1+0x24>
        HAL_DMA_Abort(&hdma_usart1_rx);
 800133e:	4824      	ldr	r0, [pc, #144]	@ (80013d0 <Reset_USART1+0xb0>)
 8001340:	f002 f81d 	bl	800337e <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <Reset_USART1+0xb4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <Reset_USART1+0x32>
        HAL_DMA_Abort(&hdma_usart1_tx);
 800134c:	4821      	ldr	r0, [pc, #132]	@ (80013d4 <Reset_USART1+0xb4>)
 800134e:	f002 f816 	bl	800337e <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <Reset_USART1+0xac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <Reset_USART1+0xac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001360:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <Reset_USART1+0xac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2208      	movs	r2, #8
 8001368:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <Reset_USART1+0xac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2202      	movs	r2, #2
 8001370:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <Reset_USART1+0xb8>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <Reset_USART1+0xb8>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1); // Задержка для завершения сброса
 800137e:	2001      	movs	r0, #1
 8001380:	f000 ff86 	bl	8002290 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <Reset_USART1+0xb8>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <Reset_USART1+0xb8>)
 800138a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800138e:	60d3      	str	r3, [r2, #12]

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 8001390:	480e      	ldr	r0, [pc, #56]	@ (80013cc <Reset_USART1+0xac>)
 8001392:	f006 fa48 	bl	8007826 <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 8001396:	f7ff fd4b 	bl	8000e30 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 800139a:	f7ff fd79 	bl	8000e90 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 800139e:	2240      	movs	r2, #64	@ 0x40
 80013a0:	490e      	ldr	r1, [pc, #56]	@ (80013dc <Reset_USART1+0xbc>)
 80013a2:	480a      	ldr	r0, [pc, #40]	@ (80013cc <Reset_USART1+0xac>)
 80013a4:	f007 fce1 	bl	8008d6a <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <Reset_USART1+0xb0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <Reset_USART1+0xb0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 80013b8:	f000 ff5e 	bl	8002278 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a08      	ldr	r2, [pc, #32]	@ (80013e0 <Reset_USART1+0xc0>)
 80013c0:	6013      	str	r3, [r2, #0]


}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	48000400 	.word	0x48000400
 80013cc:	20000450 	.word	0x20000450
 80013d0:	200004d8 	.word	0x200004d8
 80013d4:	2000051c 	.word	0x2000051c
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20000034 	.word	0x20000034
 80013e0:	20000030 	.word	0x20000030

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <Error_Handler+0x8>

080013f0 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 80013fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001400:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8001402:	2300      	movs	r3, #0
 8001404:	74fb      	strb	r3, [r7, #19]
 8001406:	e023      	b.n	8001450 <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 8001408:	7cfb      	ldrb	r3, [r7, #19]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4053      	eors	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001418:	2301      	movs	r3, #1
 800141a:	74bb      	strb	r3, [r7, #18]
 800141c:	e012      	b.n	8001444 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	617b      	str	r3, [r7, #20]
			if (flag)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 800143e:	7cbb      	ldrb	r3, [r7, #18]
 8001440:	3301      	adds	r3, #1
 8001442:	74bb      	strb	r3, [r7, #18]
 8001444:	7cbb      	ldrb	r3, [r7, #18]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d9e9      	bls.n	800141e <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 800144a:	7cfb      	ldrb	r3, [r7, #19]
 800144c:	3301      	adds	r3, #1
 800144e:	74fb      	strb	r3, [r7, #19]
 8001450:	7cfa      	ldrb	r2, [r7, #19]
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3d7      	bcc.n	8001408 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	b29b      	uxth	r3, r3
 800146c:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	b29b      	uxth	r3, r3

}
 8001472:	4618      	mov	r0, r3
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	4613      	mov	r3, r2
 800148c:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4619      	mov	r1, r3
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f7ff ffac 	bl	80013f0 <calcCRC16ModBus>
 8001498:	4603      	mov	r3, r0
 800149a:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3301      	adds	r3, #1
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	4413      	add	r3, r2
 80014a4:	8afa      	ldrh	r2, [r7, #22]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80014aa:	8afb      	ldrh	r3, [r7, #22]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b299      	uxth	r1, r3
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	4413      	add	r3, r2
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]

    TX_2;
 80014ba:	2201      	movs	r2, #1
 80014bc:	2104      	movs	r1, #4
 80014be:	480e      	ldr	r0, [pc, #56]	@ (80014f8 <sendModBusRequest+0x78>)
 80014c0:	f002 fb48 	bl	8003b54 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3302      	adds	r3, #2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f006 f9e5 	bl	80078a0 <HAL_UART_Transmit_DMA>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <sendModBusRequest+0x6c>

    	LED_1_OFF;
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014e2:	4806      	ldr	r0, [pc, #24]	@ (80014fc <sendModBusRequest+0x7c>)
 80014e4:	f002 fb36 	bl	8003b54 <HAL_GPIO_WritePin>

	        Error_Handler();
 80014e8:	f7ff ff7c 	bl	80013e4 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	48000c00 	.word	0x48000c00
 80014fc:	48000400 	.word	0x48000400

08001500 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
 800150c:	4613      	mov	r3, r2
 800150e:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <sendError+0x5c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800151c:	b2db      	uxtb	r3, r3
 800151e:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 8001520:	78bb      	ldrb	r3, [r7, #2]
 8001522:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2103      	movs	r1, #3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff60 	bl	80013f0 <calcCRC16ModBus>
 8001530:	4603      	mov	r3, r0
 8001532:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	2205      	movs	r2, #5
 800154a:	4619      	mov	r1, r3
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff97 	bl	8001480 <sendModBusRequest>

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000

08001560 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 800156a:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <handleReadHoldingRegs+0xe0>)
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <handleReadHoldingRegs+0xe0>)
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21b      	sxth	r3, r3
 800157c:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800157e:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <handleReadHoldingRegs+0xe0>)
 8001580:	791b      	ldrb	r3, [r3, #4]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <handleReadHoldingRegs+0xe0>)
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 8001592:	8afa      	ldrh	r2, [r7, #22]
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	4413      	add	r3, r2
 8001598:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 800159a:	897b      	ldrh	r3, [r7, #10]
 800159c:	2b7d      	cmp	r3, #125	@ 0x7d
 800159e:	d905      	bls.n	80015ac <handleReadHoldingRegs+0x4c>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80015a0:	2103      	movs	r1, #3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fa1e 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e045      	b.n	8001638 <handleReadHoldingRegs+0xd8>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80015ac:	893b      	ldrh	r3, [r7, #8]
 80015ae:	2b3c      	cmp	r3, #60	@ 0x3c
 80015b0:	d905      	bls.n	80015be <handleReadHoldingRegs+0x5e>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80015b2:	2102      	movs	r1, #2
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fa15 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e03c      	b.n	8001638 <handleReadHoldingRegs+0xd8>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <handleReadHoldingRegs+0xe4>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <handleReadHoldingRegs+0xe8>)
 80015c4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80015c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <handleReadHoldingRegs+0xe0>)
 80015c8:	785a      	ldrb	r2, [r3, #1]
 80015ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <handleReadHoldingRegs+0xe8>)
 80015cc:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <handleReadHoldingRegs+0xe8>)
 80015d8:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80015da:	2303      	movs	r3, #3
 80015dc:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e01d      	b.n	8001620 <handleReadHoldingRegs+0xc0>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80015e4:	8afb      	ldrh	r3, [r7, #22]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b299      	uxth	r1, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	613a      	str	r2, [r7, #16]
 80015f8:	b2c9      	uxtb	r1, r1
 80015fa:	4a13      	ldr	r2, [pc, #76]	@ (8001648 <handleReadHoldingRegs+0xe8>)
 80015fc:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	613a      	str	r2, [r7, #16]
 800160e:	b2c9      	uxtb	r1, r1
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <handleReadHoldingRegs+0xe8>)
 8001612:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001614:	8afb      	ldrh	r3, [r7, #22]
 8001616:	3301      	adds	r3, #1
 8001618:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3301      	adds	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	897b      	ldrh	r3, [r7, #10]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbdd      	blt.n	80015e4 <handleReadHoldingRegs+0x84>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4906      	ldr	r1, [pc, #24]	@ (8001648 <handleReadHoldingRegs+0xe8>)
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff25 	bl	8001480 <sendModBusRequest>
	return 1;
 8001636:	2301      	movs	r3, #1

}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000034 	.word	0x20000034
 8001644:	20000000 	.word	0x20000000
 8001648:	20000074 	.word	0x20000074

0800164c <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 8001656:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <handleReadInputRegs+0xe4>)
 8001658:	789b      	ldrb	r3, [r3, #2]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <handleReadInputRegs+0xe4>)
 8001660:	78db      	ldrb	r3, [r3, #3]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	b21b      	sxth	r3, r3
 8001668:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <handleReadInputRegs+0xe4>)
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <handleReadInputRegs+0xe4>)
 8001674:	795b      	ldrb	r3, [r3, #5]
 8001676:	b21b      	sxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b21b      	sxth	r3, r3
 800167c:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 800167e:	8afa      	ldrh	r2, [r7, #22]
 8001680:	897b      	ldrh	r3, [r7, #10]
 8001682:	4413      	add	r3, r2
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	2b7d      	cmp	r3, #125	@ 0x7d
 800168e:	d905      	bls.n	800169c <handleReadInputRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 8001690:	2103      	movs	r1, #3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f9a6 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 8001698:	2300      	movs	r3, #0
 800169a:	e045      	b.n	8001728 <handleReadInputRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	2b3c      	cmp	r3, #60	@ 0x3c
 80016a0:	d905      	bls.n	80016ae <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80016a2:	2102      	movs	r1, #2
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f99d 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e03c      	b.n	8001728 <handleReadInputRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80016ae:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <handleReadInputRegs+0xe8>)
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <handleReadInputRegs+0xec>)
 80016b4:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <handleReadInputRegs+0xe4>)
 80016b8:	785a      	ldrb	r2, [r3, #1]
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <handleReadInputRegs+0xec>)
 80016bc:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <handleReadInputRegs+0xec>)
 80016c8:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 80016ca:	2303      	movs	r3, #3
 80016cc:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e01d      	b.n	8001710 <handleReadInputRegs+0xc4>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 80016d4:	8afb      	ldrh	r3, [r7, #22]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b299      	uxth	r1, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	613a      	str	r2, [r7, #16]
 80016e8:	b2c9      	uxtb	r1, r1
 80016ea:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <handleReadInputRegs+0xec>)
 80016ec:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 80016ee:	8afb      	ldrh	r3, [r7, #22]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	8819      	ldrh	r1, [r3, #0]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	613a      	str	r2, [r7, #16]
 80016fe:	b2c9      	uxtb	r1, r1
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <handleReadInputRegs+0xec>)
 8001702:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001704:	8afb      	ldrh	r3, [r7, #22]
 8001706:	3301      	adds	r3, #1
 8001708:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	897b      	ldrh	r3, [r7, #10]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbdd      	blt.n	80016d4 <handleReadInputRegs+0x88>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	4906      	ldr	r1, [pc, #24]	@ (8001738 <handleReadInputRegs+0xec>)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fead 	bl	8001480 <sendModBusRequest>
	return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000034 	.word	0x20000034
 8001734:	20000000 	.word	0x20000000
 8001738:	20000074 	.word	0x20000074

0800173c <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001746:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <handleReadCoils+0xc4>)
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b2c      	ldr	r3, [pc, #176]	@ (8001800 <handleReadCoils+0xc4>)
 8001750:	78db      	ldrb	r3, [r3, #3]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <handleReadCoils+0xc4>)
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <handleReadCoils+0xc4>)
 8001764:	795b      	ldrb	r3, [r3, #5]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 800176e:	89bb      	ldrh	r3, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <handleReadCoils+0x40>
 8001774:	89bb      	ldrh	r3, [r7, #12]
 8001776:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800177a:	d905      	bls.n	8001788 <handleReadCoils+0x4c>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 800177c:	2103      	movs	r1, #3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f930 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 8001784:	2300      	movs	r3, #0
 8001786:	e037      	b.n	80017f8 <handleReadCoils+0xbc>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 8001788:	89fa      	ldrh	r2, [r7, #14]
 800178a:	89bb      	ldrh	r3, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	2bc7      	cmp	r3, #199	@ 0xc7
 8001798:	d905      	bls.n	80017a6 <handleReadCoils+0x6a>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800179a:	2102      	movs	r1, #2
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f921 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e028      	b.n	80017f8 <handleReadCoils+0xbc>
	}
	memset (txFrame, '\0', 256);
 80017a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017aa:	2100      	movs	r1, #0
 80017ac:	4815      	ldr	r0, [pc, #84]	@ (8001804 <handleReadCoils+0xc8>)
 80017ae:	f007 fb30 	bl	8008e12 <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <handleReadCoils+0xcc>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <handleReadCoils+0xc8>)
 80017b8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 80017ba:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <handleReadCoils+0xc4>)
 80017bc:	785a      	ldrb	r2, [r3, #1]
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <handleReadCoils+0xc8>)
 80017c0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 80017c2:	89bb      	ldrh	r3, [r7, #12]
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	89ba      	ldrh	r2, [r7, #12]
 80017cc:	f002 0207 	and.w	r2, r2, #7
 80017d0:	b292      	uxth	r2, r2
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2201      	movne	r2, #1
 80017d8:	2200      	moveq	r2, #0
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	4413      	add	r3, r2
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <handleReadCoils+0xc8>)
 80017e2:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <handleReadCoils+0xc8>)
 80017e6:	789b      	ldrb	r3, [r3, #2]
 80017e8:	3303      	adds	r3, #3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	4905      	ldr	r1, [pc, #20]	@ (8001804 <handleReadCoils+0xc8>)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe45 	bl	8001480 <sendModBusRequest>
	return 1;
 80017f6:	2301      	movs	r3, #1

}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000034 	.word	0x20000034
 8001804:	20000074 	.word	0x20000074
 8001808:	20000000 	.word	0x20000000

0800180c <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <handleReadDiscreteInputs+0xcc>)
 8001818:	789b      	ldrb	r3, [r3, #2]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <handleReadDiscreteInputs+0xcc>)
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21b      	sxth	r3, r3
 8001828:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 800182a:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <handleReadDiscreteInputs+0xcc>)
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <handleReadDiscreteInputs+0xcc>)
 8001834:	795b      	ldrb	r3, [r3, #5]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 800183e:	89bb      	ldrh	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <handleReadDiscreteInputs+0x40>
 8001844:	89bb      	ldrh	r3, [r7, #12]
 8001846:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800184a:	d905      	bls.n	8001858 <handleReadDiscreteInputs+0x4c>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 800184c:	2103      	movs	r1, #3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f8c8 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 8001854:	2300      	movs	r3, #0
 8001856:	e03a      	b.n	80018ce <handleReadDiscreteInputs+0xc2>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 8001858:	89fa      	ldrh	r2, [r7, #14]
 800185a:	89bb      	ldrh	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 8001864:	897b      	ldrh	r3, [r7, #10]
 8001866:	2bc7      	cmp	r3, #199	@ 0xc7
 8001868:	d905      	bls.n	8001876 <handleReadDiscreteInputs+0x6a>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 800186a:	2102      	movs	r1, #2
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f8b9 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 8001872:	2300      	movs	r3, #0
 8001874:	e02b      	b.n	80018ce <handleReadDiscreteInputs+0xc2>
	}
	memset (txFrame, '\0', 256);
 8001876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800187a:	2100      	movs	r1, #0
 800187c:	4817      	ldr	r0, [pc, #92]	@ (80018dc <handleReadDiscreteInputs+0xd0>)
 800187e:	f007 fac8 	bl	8008e12 <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <handleReadDiscreteInputs+0xd4>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <handleReadDiscreteInputs+0xd0>)
 8001888:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <handleReadDiscreteInputs+0xcc>)
 800188c:	785a      	ldrb	r2, [r3, #1]
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <handleReadDiscreteInputs+0xd0>)
 8001890:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 8001892:	89bb      	ldrh	r3, [r7, #12]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	b29b      	uxth	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	89ba      	ldrh	r2, [r7, #12]
 800189c:	f002 0207 	and.w	r2, r2, #7
 80018a0:	b292      	uxth	r2, r2
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	bf14      	ite	ne
 80018a6:	2201      	movne	r2, #1
 80018a8:	2200      	moveq	r2, #0
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	4413      	add	r3, r2
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <handleReadDiscreteInputs+0xd0>)
 80018b2:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <handleReadDiscreteInputs+0xd0>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <handleReadDiscreteInputs+0xd0>)
 80018bc:	789b      	ldrb	r3, [r3, #2]
 80018be:	3303      	adds	r3, #3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	4905      	ldr	r1, [pc, #20]	@ (80018dc <handleReadDiscreteInputs+0xd0>)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fdda 	bl	8001480 <sendModBusRequest>
	return 1;
 80018cc:	2301      	movs	r3, #1

}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000034 	.word	0x20000034
 80018dc:	20000074 	.word	0x20000074
 80018e0:	20000000 	.word	0x20000000

080018e4 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 80018ee:	4b3a      	ldr	r3, [pc, #232]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 80018f0:	789b      	ldrb	r3, [r3, #2]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	4b38      	ldr	r3, [pc, #224]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 80018f8:	78db      	ldrb	r3, [r3, #3]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001902:	4b35      	ldr	r3, [pc, #212]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 8001904:	791b      	ldrb	r3, [r3, #4]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 800190c:	795b      	ldrb	r3, [r3, #5]
 800190e:	b21b      	sxth	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b21b      	sxth	r3, r3
 8001914:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <handleWriteMulyipleHandlingRegister+0x3e>
 800191c:	897b      	ldrh	r3, [r7, #10]
 800191e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001920:	d905      	bls.n	800192e <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001922:	2103      	movs	r1, #3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f85d 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 800192a:	2300      	movs	r3, #0
 800192c:	e04f      	b.n	80019ce <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 800192e:	8afa      	ldrh	r2, [r7, #22]
 8001930:	897b      	ldrh	r3, [r7, #10]
 8001932:	4413      	add	r3, r2
 8001934:	b29b      	uxth	r3, r3
 8001936:	3b01      	subs	r3, #1
 8001938:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 800193a:	893b      	ldrh	r3, [r7, #8]
 800193c:	2b3c      	cmp	r3, #60	@ 0x3c
 800193e:	d905      	bls.n	800194c <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001940:	2102      	movs	r1, #2
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f84e 	bl	80019e4 <sendModbusException>
		return MODBUS_ERROR;
 8001948:	2300      	movs	r3, #0
 800194a:	e040      	b.n	80019ce <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 800194c:	2307      	movs	r3, #7
 800194e:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e019      	b.n	800198a <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	613a      	str	r2, [r7, #16]
 800195c:	4a1e      	ldr	r2, [pc, #120]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21a      	sxth	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	6139      	str	r1, [r7, #16]
 800196a:	491b      	ldr	r1, [pc, #108]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b219      	sxth	r1, r3
 8001974:	8afb      	ldrh	r3, [r7, #22]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	82fa      	strh	r2, [r7, #22]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	b28a      	uxth	r2, r1
 8001982:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	897b      	ldrh	r3, [r7, #10]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	429a      	cmp	r2, r3
 8001990:	dbe1      	blt.n	8001956 <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <handleWriteMulyipleHandlingRegister+0xf8>)
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001998:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 800199c:	785a      	ldrb	r2, [r3, #1]
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <handleWriteMulyipleHandlingRegister+0xfc>)
 80019a0:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 80019a4:	789a      	ldrb	r2, [r3, #2]
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <handleWriteMulyipleHandlingRegister+0xfc>)
 80019a8:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 80019ac:	78da      	ldrb	r2, [r3, #3]
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <handleWriteMulyipleHandlingRegister+0xfc>)
 80019b0:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 80019b4:	791a      	ldrb	r2, [r3, #4]
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <handleWriteMulyipleHandlingRegister+0xfc>)
 80019b8:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 80019ba:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <handleWriteMulyipleHandlingRegister+0xf4>)
 80019bc:	795a      	ldrb	r2, [r3, #5]
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <handleWriteMulyipleHandlingRegister+0xfc>)
 80019c0:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 80019c2:	2206      	movs	r2, #6
 80019c4:	4906      	ldr	r1, [pc, #24]	@ (80019e0 <handleWriteMulyipleHandlingRegister+0xfc>)
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd5a 	bl	8001480 <sendModBusRequest>
	return 1;   // success
 80019cc:	2301      	movs	r3, #1

}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000034 	.word	0x20000034
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000074 	.word	0x20000074

080019e4 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <sendModbusException+0x3c>)
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <sendModbusException+0x40>)
 80019f6:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <sendModbusException+0x3c>)
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <sendModbusException+0x40>)
 8001a04:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001a06:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <sendModbusException+0x40>)
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	4905      	ldr	r1, [pc, #20]	@ (8001a24 <sendModbusException+0x40>)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fd35 	bl	8001480 <sendModBusRequest>
 8001a16:	4603      	mov	r3, r0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000034 	.word	0x20000034
 8001a24:	20000074 	.word	0x20000074

08001a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a90:	d154      	bne.n	8001b3c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a92:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a2b      	ldr	r2, [pc, #172]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	6153      	str	r3, [r2, #20]
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a25      	ldr	r2, [pc, #148]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001ab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ab4:	6153      	str	r3, [r2, #20]
 8001ab6:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001acc:	6153      	str	r3, [r2, #20]
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a19      	ldr	r2, [pc, #100]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001ae0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <HAL_ADC_MspInit+0xd4>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001af2:	2307      	movs	r3, #7
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	4810      	ldr	r0, [pc, #64]	@ (8001b48 <HAL_ADC_MspInit+0xd8>)
 8001b06:	f001 fdcf 	bl	80036a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f001 fdc2 	bl	80036a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b24:	2310      	movs	r3, #16
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001b38:	f001 fdb6 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b3c:	bf00      	nop
 8001b3e:	3730      	adds	r7, #48	@ 0x30
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48001400 	.word	0x48001400

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <HAL_I2C_MspInit+0x7c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d128      	bne.n	8001bc4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <HAL_I2C_MspInit+0x80>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <HAL_I2C_MspInit+0x80>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7c:	6153      	str	r3, [r2, #20]
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <HAL_I2C_MspInit+0x80>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b90:	2312      	movs	r3, #18
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <HAL_I2C_MspInit+0x84>)
 8001ba8:	f001 fd7e 	bl	80036a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_I2C_MspInit+0x80>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_I2C_MspInit+0x80>)
 8001bb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bb6:	61d3      	str	r3, [r2, #28]
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_I2C_MspInit+0x80>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <HAL_SPI_MspInit+0x7c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d127      	bne.n	8001c4a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfa:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c04:	6193      	str	r3, [r2, #24]
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4a10      	ldr	r2, [pc, #64]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c1c:	6153      	str	r3, [r2, #20]
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_SPI_MspInit+0x80>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c2a:	2338      	movs	r3, #56	@ 0x38
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <HAL_SPI_MspInit+0x84>)
 8001c46:	f001 fd2f 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	@ 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000400 	.word	0x48000400

08001c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08e      	sub	sp, #56	@ 0x38
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a56      	ldr	r2, [pc, #344]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x178>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d114      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c82:	4b56      	ldr	r3, [pc, #344]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a55      	ldr	r2, [pc, #340]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001c88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b53      	ldr	r3, [pc, #332]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2018      	movs	r0, #24
 8001ca0:	f001 fa3b 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ca4:	2018      	movs	r0, #24
 8001ca6:	f001 fa54 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001caa:	e091      	b.n	8001dd0 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb4:	d14f      	bne.n	8001d56 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb6:	4b49      	ldr	r3, [pc, #292]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a48      	ldr	r2, [pc, #288]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b46      	ldr	r3, [pc, #280]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	4a42      	ldr	r2, [pc, #264]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6153      	str	r3, [r2, #20]
 8001cda:	4b40      	ldr	r3, [pc, #256]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4a3c      	ldr	r2, [pc, #240]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf0:	6153      	str	r3, [r2, #20]
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INT_2_TIM_Pin;
 8001cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d10:	2301      	movs	r3, #1
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_2_TIM_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4831      	ldr	r0, [pc, #196]	@ (8001de0 <HAL_TIM_Base_MspInit+0x180>)
 8001d1c:	f001 fcc4 	bl	80036a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_1_TIM_Pin;
 8001d20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d32:	2301      	movs	r3, #1
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_1_TIM_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d40:	f001 fcb2 	bl	80036a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	201c      	movs	r0, #28
 8001d4a:	f001 f9e6 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d4e:	201c      	movs	r0, #28
 8001d50:	f001 f9ff 	bl	8003152 <HAL_NVIC_EnableIRQ>
}
 8001d54:	e03c      	b.n	8001dd0 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM3)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a22      	ldr	r2, [pc, #136]	@ (8001de4 <HAL_TIM_Base_MspInit+0x184>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d10c      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d60:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4a1d      	ldr	r2, [pc, #116]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	61d3      	str	r3, [r2, #28]
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
}
 8001d78:	e02a      	b.n	8001dd0 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM8)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001de8 <HAL_TIM_Base_MspInit+0x188>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10c      	bne.n	8001d9e <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d84:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001d8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	e018      	b.n	8001dd0 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM15)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <HAL_TIM_Base_MspInit+0x18c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d113      	bne.n	8001dd0 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_TIM_Base_MspInit+0x17c>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2018      	movs	r0, #24
 8001dc6:	f001 f9a8 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001dca:	2018      	movs	r0, #24
 8001dcc:	f001 f9c1 	bl	8003152 <HAL_NVIC_EnableIRQ>
}
 8001dd0:	bf00      	nop
 8001dd2:	3738      	adds	r7, #56	@ 0x38
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48000400 	.word	0x48000400
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40013400 	.word	0x40013400
 8001dec:	40014000 	.word	0x40014000

08001df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a32      	ldr	r2, [pc, #200]	@ (8001ed8 <HAL_TIM_MspPostInit+0xe8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d13b      	bne.n	8001e8a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4a31      	ldr	r2, [pc, #196]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6153      	str	r3, [r2, #20]
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	6153      	str	r3, [r2, #20]
 8001e36:	4b29      	ldr	r3, [pc, #164]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001e54:	2304      	movs	r3, #4
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4820      	ldr	r0, [pc, #128]	@ (8001ee0 <HAL_TIM_MspPostInit+0xf0>)
 8001e60:	f001 fc22 	bl	80036a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e64:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001e68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e76:	2306      	movs	r3, #6
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e84:	f001 fc10 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e88:	e021      	b.n	8001ece <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <HAL_TIM_MspPostInit+0xf4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11c      	bne.n	8001ece <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001e9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e9e:	6153      	str	r3, [r2, #20]
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_TIM_MspPostInit+0xec>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001eac:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4807      	ldr	r0, [pc, #28]	@ (8001ee8 <HAL_TIM_MspPostInit+0xf8>)
 8001eca:	f001 fbed 	bl	80036a8 <HAL_GPIO_Init>
}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	40013400 	.word	0x40013400
 8001ee8:	48000800 	.word	0x48000800

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a41      	ldr	r2, [pc, #260]	@ (8002010 <HAL_UART_MspInit+0x124>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d17b      	bne.n	8002006 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0e:	4b41      	ldr	r3, [pc, #260]	@ (8002014 <HAL_UART_MspInit+0x128>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a40      	ldr	r2, [pc, #256]	@ (8002014 <HAL_UART_MspInit+0x128>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002014 <HAL_UART_MspInit+0x128>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	4b3b      	ldr	r3, [pc, #236]	@ (8002014 <HAL_UART_MspInit+0x128>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <HAL_UART_MspInit+0x128>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f30:	6153      	str	r3, [r2, #20]
 8001f32:	4b38      	ldr	r3, [pc, #224]	@ (8002014 <HAL_UART_MspInit+0x128>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3e:	23c0      	movs	r3, #192	@ 0xc0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	482f      	ldr	r0, [pc, #188]	@ (8002018 <HAL_UART_MspInit+0x12c>)
 8001f5a:	f001 fba5 	bl	80036a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f60:	4a2f      	ldr	r2, [pc, #188]	@ (8002020 <HAL_UART_MspInit+0x134>)
 8001f62:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f70:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f72:	2280      	movs	r2, #128	@ 0x80
 8001f74:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f76:	4b29      	ldr	r3, [pc, #164]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f8e:	4823      	ldr	r0, [pc, #140]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001f90:	f001 f907 	bl	80031a2 <HAL_DMA_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001f9a:	f7ff fa23 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001fa2:	675a      	str	r2, [r3, #116]	@ 0x74
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800201c <HAL_UART_MspInit+0x130>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fac:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001fae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fbe:	2280      	movs	r2, #128	@ 0x80
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fda:	4812      	ldr	r0, [pc, #72]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fdc:	f001 f8e1 	bl	80031a2 <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001fe6:	f7ff f9fd 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001fee:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2025      	movs	r0, #37	@ 0x25
 8001ffc:	f001 f88d 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002000:	2025      	movs	r0, #37	@ 0x25
 8002002:	f001 f8a6 	bl	8003152 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40013800 	.word	0x40013800
 8002014:	40021000 	.word	0x40021000
 8002018:	48000400 	.word	0x48000400
 800201c:	200004d8 	.word	0x200004d8
 8002020:	40020058 	.word	0x40020058
 8002024:	2000051c 	.word	0x2000051c
 8002028:	40020044 	.word	0x40020044

0800202c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <HAL_UART_MspDeInit+0x48>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d116      	bne.n	800206c <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_UART_MspDeInit+0x4c>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <HAL_UART_MspDeInit+0x4c>)
 8002044:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002048:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800204a:	21c0      	movs	r1, #192	@ 0xc0
 800204c:	480b      	ldr	r0, [pc, #44]	@ (800207c <HAL_UART_MspDeInit+0x50>)
 800204e:	f001 fca5 	bl	800399c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002056:	4618      	mov	r0, r3
 8002058:	f001 f8ea 	bl	8003230 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f8e5 	bl	8003230 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002066:	2025      	movs	r0, #37	@ 0x25
 8002068:	f001 f881 	bl	800316e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40013800 	.word	0x40013800
 8002078:	40021000 	.word	0x40021000
 800207c:	48000400 	.word	0x48000400

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <NMI_Handler+0x4>

08002088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <MemManage_Handler+0x4>

08002098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <BusFault_Handler+0x4>

080020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <UsageFault_Handler+0x4>

080020a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d6:	f000 f8bb 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <DMA1_Channel4_IRQHandler+0x10>)
 80020e6:	f001 f9c6 	bl	8003476 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000051c 	.word	0x2000051c

080020f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <DMA1_Channel5_IRQHandler+0x10>)
 80020fa:	f001 f9bc 	bl	8003476 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200004d8 	.word	0x200004d8

08002108 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800210c:	4803      	ldr	r0, [pc, #12]	@ (800211c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800210e:	f003 ffb1 	bl	8006074 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002112:	4803      	ldr	r0, [pc, #12]	@ (8002120 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002114:	f003 ffae 	bl	8006074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200002d4 	.word	0x200002d4
 8002120:	20000404 	.word	0x20000404

08002124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <TIM2_IRQHandler+0x10>)
 800212a:	f003 ffa3 	bl	8006074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000320 	.word	0x20000320

08002138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <USART1_IRQHandler+0x10>)
 800213e:	f005 fcbd 	bl	8007abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000450 	.word	0x20000450

0800214c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <SystemInit+0x20>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <SystemInit+0x20>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002174:	f7ff ffea 	bl	800214c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LoopForever+0x6>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	@ (80021b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <LoopForever+0xe>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	@ (80021bc <LoopForever+0x16>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219e:	f006 fe41 	bl	8008e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021a2:	f7fe f8d7 	bl	8000354 <main>

080021a6 <LoopForever>:

LoopForever:
    b LoopForever
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80021b4:	08008ec4 	.word	0x08008ec4
  ldr r2, =_sbss
 80021b8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80021bc:	20000564 	.word	0x20000564

080021c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_Init+0x28>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_Init+0x28>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 ff95 	bl	8003104 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fc22 	bl	8001a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ffbb 	bl	800318a <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 ff75 	bl	800311a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	@ (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000008 	.word	0x20000008
 8002248:	20000010 	.word	0x20000010
 800224c:	2000000c 	.word	0x2000000c

08002250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000010 	.word	0x20000010
 8002274:	20000560 	.word	0x20000560

08002278 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;  
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000560 	.word	0x20000560

08002290 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000010 	.word	0x20000010

080022d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b09a      	sub	sp, #104	@ 0x68
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e1c9      	b.n	800268c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d176      	bne.n	80023f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d152      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fb9f 	bl	8001a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d13b      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fd85 	bl	8002e50 <ADC_Disable>
 8002346:	4603      	mov	r3, r0
 8002348:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d12f      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
 8002358:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800235c:	2b00      	cmp	r3, #0
 800235e:	d12b      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002368:	f023 0302 	bic.w	r3, r3, #2
 800236c:	f043 0202 	orr.w	r2, r3, #2
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002382:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002392:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002394:	4b86      	ldr	r3, [pc, #536]	@ (80025b0 <HAL_ADC_Init+0x2d8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a86      	ldr	r2, [pc, #536]	@ (80025b4 <HAL_ADC_Init+0x2dc>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9a      	lsrs	r2, r3, #18
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023aa:	e002      	b.n	80023b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023d4:	d110      	bne.n	80023f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f023 0312 	bic.w	r3, r3, #18
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8136 	bne.w	8002672 <HAL_ADC_Init+0x39a>
 8002406:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8131 	bne.w	8002672 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 8129 	bne.w	8002672 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002428:	f043 0202 	orr.w	r2, r3, #2
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002438:	d004      	beq.n	8002444 <HAL_ADC_Init+0x16c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a5e      	ldr	r2, [pc, #376]	@ (80025b8 <HAL_ADC_Init+0x2e0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_ADC_Init+0x170>
 8002444:	4b5d      	ldr	r3, [pc, #372]	@ (80025bc <HAL_ADC_Init+0x2e4>)
 8002446:	e000      	b.n	800244a <HAL_ADC_Init+0x172>
 8002448:	4b5d      	ldr	r3, [pc, #372]	@ (80025c0 <HAL_ADC_Init+0x2e8>)
 800244a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002454:	d102      	bne.n	800245c <HAL_ADC_Init+0x184>
 8002456:	4b58      	ldr	r3, [pc, #352]	@ (80025b8 <HAL_ADC_Init+0x2e0>)
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e01a      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a55      	ldr	r2, [pc, #340]	@ (80025b8 <HAL_ADC_Init+0x2e0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d103      	bne.n	800246e <HAL_ADC_Init+0x196>
 8002466:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e011      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a54      	ldr	r2, [pc, #336]	@ (80025c4 <HAL_ADC_Init+0x2ec>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <HAL_ADC_Init+0x1a6>
 8002478:	4b53      	ldr	r3, [pc, #332]	@ (80025c8 <HAL_ADC_Init+0x2f0>)
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e009      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a51      	ldr	r2, [pc, #324]	@ (80025c8 <HAL_ADC_Init+0x2f0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d102      	bne.n	800248e <HAL_ADC_Init+0x1b6>
 8002488:	4b4e      	ldr	r3, [pc, #312]	@ (80025c4 <HAL_ADC_Init+0x2ec>)
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e001      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_ADC_Init+0x1da>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Init+0x1da>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_Init+0x1dc>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11c      	bne.n	80024f2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_ADC_Init+0x202>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Init+0x202>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_ADC_Init+0x204>
 80024da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80024e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7e5b      	ldrb	r3, [r3, #25]
 80024f6:	035b      	lsls	r3, r3, #13
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024fc:	2a01      	cmp	r2, #1
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_Init+0x22e>
 8002500:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002504:	e000      	b.n	8002508 <HAL_ADC_Init+0x230>
 8002506:	2200      	movs	r2, #0
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4313      	orrs	r3, r2
 8002516:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002518:	4313      	orrs	r3, r2
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d11b      	bne.n	800255e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7e5b      	ldrb	r3, [r3, #25]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	3b01      	subs	r3, #1
 8002534:	045a      	lsls	r2, r3, #17
 8002536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002538:	4313      	orrs	r3, r2
 800253a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002540:	e00d      	b.n	800255e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002562:	2b01      	cmp	r3, #1
 8002564:	d03a      	beq.n	80025dc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a16      	ldr	r2, [pc, #88]	@ (80025c4 <HAL_ADC_Init+0x2ec>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADC_Init+0x2a2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <HAL_ADC_Init+0x2f0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d128      	bne.n	80025cc <HAL_ADC_Init+0x2f4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8002582:	d012      	beq.n	80025aa <HAL_ADC_Init+0x2d2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800258c:	d00a      	beq.n	80025a4 <HAL_ADC_Init+0x2cc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002596:	d002      	beq.n	800259e <HAL_ADC_Init+0x2c6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	e018      	b.n	80025d0 <HAL_ADC_Init+0x2f8>
 800259e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a2:	e015      	b.n	80025d0 <HAL_ADC_Init+0x2f8>
 80025a4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80025a8:	e012      	b.n	80025d0 <HAL_ADC_Init+0x2f8>
 80025aa:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80025ae:	e00f      	b.n	80025d0 <HAL_ADC_Init+0x2f8>
 80025b0:	20000008 	.word	0x20000008
 80025b4:	431bde83 	.word	0x431bde83
 80025b8:	50000100 	.word	0x50000100
 80025bc:	50000300 	.word	0x50000300
 80025c0:	50000700 	.word	0x50000700
 80025c4:	50000400 	.word	0x50000400
 80025c8:	50000500 	.word	0x50000500
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025d4:	4313      	orrs	r3, r2
 80025d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025d8:	4313      	orrs	r3, r2
 80025da:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d114      	bne.n	8002614 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7e1b      	ldrb	r3, [r3, #24]
 8002602:	039a      	lsls	r2, r3, #14
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4313      	orrs	r3, r2
 800260e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002610:	4313      	orrs	r3, r2
 8002612:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_ADC_Init+0x3bc>)
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002624:	430b      	orrs	r3, r1
 8002626:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10c      	bne.n	800264a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f023 010f 	bic.w	r1, r3, #15
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
 8002648:	e007      	b.n	800265a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 020f 	bic.w	r2, r2, #15
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f023 0303 	bic.w	r3, r3, #3
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002670:	e00a      	b.n	8002688 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f023 0312 	bic.w	r3, r3, #18
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002688:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800268c:	4618      	mov	r0, r3
 800268e:	3768      	adds	r7, #104	@ 0x68
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	fff0c007 	.word	0xfff0c007

08002698 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002698:	b480      	push	{r7}
 800269a:	b09b      	sub	sp, #108	@ 0x6c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x22>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e2c8      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x5b4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 82ac 	bne.w	8002c2a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d81c      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	461a      	mov	r2, r3
 80026ee:	231f      	movs	r3, #31
 80026f0:	4093      	lsls	r3, r2
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4019      	ands	r1, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa00 f203 	lsl.w	r2, r0, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30
 8002712:	e063      	b.n	80027dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b09      	cmp	r3, #9
 800271a:	d81e      	bhi.n	800275a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	3b1e      	subs	r3, #30
 8002730:	221f      	movs	r2, #31
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	4019      	ands	r1, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	3b1e      	subs	r3, #30
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	@ 0x34
 8002758:	e040      	b.n	80027dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b0e      	cmp	r3, #14
 8002760:	d81e      	bhi.n	80027a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	3b3c      	subs	r3, #60	@ 0x3c
 8002776:	221f      	movs	r2, #31
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	4019      	ands	r1, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	3b3c      	subs	r3, #60	@ 0x3c
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	639a      	str	r2, [r3, #56]	@ 0x38
 800279e:	e01d      	b.n	80027dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	3b5a      	subs	r3, #90	@ 0x5a
 80027b4:	221f      	movs	r2, #31
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	4019      	ands	r1, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	3b5a      	subs	r3, #90	@ 0x5a
 80027d0:	fa00 f203 	lsl.w	r2, r0, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80e5 	bne.w	80029b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d91c      	bls.n	800282e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6999      	ldr	r1, [r3, #24]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	3b1e      	subs	r3, #30
 8002806:	2207      	movs	r2, #7
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	4019      	ands	r1, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6898      	ldr	r0, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	3b1e      	subs	r3, #30
 8002820:	fa00 f203 	lsl.w	r2, r0, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	619a      	str	r2, [r3, #24]
 800282c:	e019      	b.n	8002862 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6959      	ldr	r1, [r3, #20]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	2207      	movs	r2, #7
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	4019      	ands	r1, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6898      	ldr	r0, [r3, #8]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	fa00 f203 	lsl.w	r2, r0, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	3b01      	subs	r3, #1
 8002880:	2b03      	cmp	r3, #3
 8002882:	d84f      	bhi.n	8002924 <HAL_ADC_ConfigChannel+0x28c>
 8002884:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_ADC_ConfigChannel+0x1f4>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028bf 	.word	0x080028bf
 8002894:	080028e1 	.word	0x080028e1
 8002898:	08002903 	.word	0x08002903
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028a2:	4b99      	ldr	r3, [pc, #612]	@ (8002b08 <HAL_ADC_ConfigChannel+0x470>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	0691      	lsls	r1, r2, #26
 80028ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028ae:	430a      	orrs	r2, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80028ba:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028bc:	e07b      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028c4:	4b90      	ldr	r3, [pc, #576]	@ (8002b08 <HAL_ADC_ConfigChannel+0x470>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	0691      	lsls	r1, r2, #26
 80028ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028d0:	430a      	orrs	r2, r1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80028dc:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028de:	e06a      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028e6:	4b88      	ldr	r3, [pc, #544]	@ (8002b08 <HAL_ADC_ConfigChannel+0x470>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	0691      	lsls	r1, r2, #26
 80028f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028f2:	430a      	orrs	r2, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80028fe:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002900:	e059      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002908:	4b7f      	ldr	r3, [pc, #508]	@ (8002b08 <HAL_ADC_ConfigChannel+0x470>)
 800290a:	4013      	ands	r3, r2
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	0691      	lsls	r1, r2, #26
 8002912:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002914:	430a      	orrs	r2, r1
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002920:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002922:	e048      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	069b      	lsls	r3, r3, #26
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002946:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800294e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800296a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002972:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	069b      	lsls	r3, r3, #26
 800297c:	429a      	cmp	r2, r3
 800297e:	d107      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800298e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002996:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	069b      	lsls	r3, r3, #26
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80029b4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d108      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x33e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x33e>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x340>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 8131 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d00f      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43da      	mvns	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	400a      	ands	r2, r1
 8002a00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002a04:	e049      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2201      	movs	r2, #1
 8002a14:	409a      	lsls	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	d91c      	bls.n	8002a62 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6999      	ldr	r1, [r3, #24]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	3b1b      	subs	r3, #27
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4019      	ands	r1, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6898      	ldr	r0, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	3b1b      	subs	r3, #27
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	619a      	str	r2, [r3, #24]
 8002a60:	e01b      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6959      	ldr	r1, [r3, #20]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	2207      	movs	r2, #7
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	4019      	ands	r1, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6898      	ldr	r0, [r3, #8]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa2:	d004      	beq.n	8002aae <HAL_ADC_ConfigChannel+0x416>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <HAL_ADC_ConfigChannel+0x474>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x41a>
 8002aae:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <HAL_ADC_ConfigChannel+0x478>)
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x41c>
 8002ab2:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <HAL_ADC_ConfigChannel+0x47c>)
 8002ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d105      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d015      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ace:	2b11      	cmp	r3, #17
 8002ad0:	d105      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ae2:	2b12      	cmp	r3, #18
 8002ae4:	f040 80ac 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 80a5 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afe:	d10b      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x480>
 8002b00:	4b02      	ldr	r3, [pc, #8]	@ (8002b0c <HAL_ADC_ConfigChannel+0x474>)
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e023      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x4b6>
 8002b06:	bf00      	nop
 8002b08:	83fff000 	.word	0x83fff000
 8002b0c:	50000100 	.word	0x50000100
 8002b10:	50000300 	.word	0x50000300
 8002b14:	50000700 	.word	0x50000700
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c58 <HAL_ADC_ConfigChannel+0x5c0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d103      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x492>
 8002b22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e011      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x4b6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c5c <HAL_ADC_ConfigChannel+0x5c4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d102      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x4a2>
 8002b34:	4b4a      	ldr	r3, [pc, #296]	@ (8002c60 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e009      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x4b6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a48      	ldr	r2, [pc, #288]	@ (8002c60 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x4b2>
 8002b44:	4b45      	ldr	r3, [pc, #276]	@ (8002c5c <HAL_ADC_ConfigChannel+0x5c4>)
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e001      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x4b6>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x4d6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x4d6>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x4d8>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d150      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x4fe>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x4fe>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x500>
 8002b96:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d13c      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d11d      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x548>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bac:	d118      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	4b2a      	ldr	r3, [pc, #168]	@ (8002c64 <HAL_ADC_ConfigChannel+0x5cc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002c68 <HAL_ADC_ConfigChannel+0x5d0>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	0c9a      	lsrs	r2, r3, #18
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bde:	e02e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b11      	cmp	r3, #17
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x568>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bf0:	d106      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bfc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bfe:	e01e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b12      	cmp	r3, #18
 8002c06:	d11a      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c14:	e013      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c28:	e00a      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c3c:	e000      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c3e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	376c      	adds	r7, #108	@ 0x6c
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	50000100 	.word	0x50000100
 8002c5c:	50000400 	.word	0x50000400
 8002c60:	50000500 	.word	0x50000500
 8002c64:	20000008 	.word	0x20000008
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b099      	sub	sp, #100	@ 0x64
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c84:	d102      	bne.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c86:	4b6d      	ldr	r3, [pc, #436]	@ (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	e01a      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6a      	ldr	r2, [pc, #424]	@ (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d103      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002c96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	e011      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a67      	ldr	r2, [pc, #412]	@ (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d102      	bne.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ca8:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	e009      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a64      	ldr	r2, [pc, #400]	@ (8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002cb8:	4b61      	ldr	r3, [pc, #388]	@ (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	e001      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b0      	b.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e0a9      	b.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 808d 	bne.w	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8086 	bne.w	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d08:	d004      	beq.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4b      	ldr	r2, [pc, #300]	@ (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d14:	4b4c      	ldr	r3, [pc, #304]	@ (8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002d16:	e000      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d18:	4b4c      	ldr	r3, [pc, #304]	@ (8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d040      	beq.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d36:	035b      	lsls	r3, r3, #13
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d3e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d15c      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002d82:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d14b      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d90:	f023 030f 	bic.w	r3, r3, #15
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	6811      	ldr	r1, [r2, #0]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	6892      	ldr	r2, [r2, #8]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002da2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da4:	e03c      	b.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002db0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d108      	bne.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d123      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002df4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d112      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e02:	f023 030f 	bic.w	r3, r3, #15
 8002e06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e08:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e0a:	e009      	b.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002e1e:	e000      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e20:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3764      	adds	r7, #100	@ 0x64
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	50000100 	.word	0x50000100
 8002e40:	50000400 	.word	0x50000400
 8002e44:	50000500 	.word	0x50000500
 8002e48:	50000300 	.word	0x50000300
 8002e4c:	50000700 	.word	0x50000700

08002e50 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d108      	bne.n	8002e7c <ADC_Disable+0x2c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <ADC_Disable+0x2c>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <ADC_Disable+0x2e>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d047      	beq.n	8002f12 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030d 	and.w	r3, r3, #13
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10f      	bne.n	8002eb0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0202 	orr.w	r2, r2, #2
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002ea8:	f7ff f9e6 	bl	8002278 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eae:	e029      	b.n	8002f04 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e023      	b.n	8002f14 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ecc:	f7ff f9d4 	bl	8002278 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d914      	bls.n	8002f04 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d10d      	bne.n	8002f04 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f043 0210 	orr.w	r2, r3, #16
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e007      	b.n	8002f14 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d0dc      	beq.n	8002ecc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	@ (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <__NVIC_GetPriorityGrouping+0x18>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0307 	and.w	r3, r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0b      	blt.n	8002faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4907      	ldr	r1, [pc, #28]	@ (8002fb8 <__NVIC_EnableIRQ+0x38>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db12      	blt.n	8002ff4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	490a      	ldr	r1, [pc, #40]	@ (8003000 <__NVIC_DisableIRQ+0x44>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe8:	f3bf 8f4f 	dsb	sy
}
 8002fec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fee:	f3bf 8f6f 	isb	sy
}
 8002ff2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	@ (8003050 <__NVIC_SetPriority+0x4c>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4908      	ldr	r1, [pc, #32]	@ (8003054 <__NVIC_SetPriority+0x50>)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3b04      	subs	r3, #4
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	@ 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf28      	it	cs
 8003076:	2304      	movcs	r3, #4
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3304      	adds	r3, #4
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b03      	subs	r3, #3
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	401a      	ands	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	4313      	orrs	r3, r2
         );
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	@ 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d0:	d301      	bcc.n	80030d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00f      	b.n	80030f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <SysTick_Config+0x40>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030de:	210f      	movs	r1, #15
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f7ff ff8e 	bl	8003004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <SysTick_Config+0x40>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ee:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <SysTick_Config+0x40>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010

08003104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff05 	bl	8002f1c <__NVIC_SetPriorityGrouping>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312c:	f7ff ff1a 	bl	8002f64 <__NVIC_GetPriorityGrouping>
 8003130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff ff8e 	bl	8003058 <NVIC_EncodePriority>
 800313c:	4602      	mov	r2, r0
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff5d 	bl	8003004 <__NVIC_SetPriority>
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff0d 	bl	8002f80 <__NVIC_EnableIRQ>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff1d 	bl	8002fbc <__NVIC_DisableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ff94 	bl	80030c0 <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e037      	b.n	8003228 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80031d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa10 	bl	8003630 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03a      	b.n	80032b8 <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f9dc 	bl	8003630 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Start_IT+0x20>
 80032dc:	2302      	movs	r3, #2
 80032de:	e04a      	b.n	8003376 <HAL_DMA_Start_IT+0xb6>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d13a      	bne.n	8003368 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f95c 	bl	80035d4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 020e 	orr.w	r2, r2, #14
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e00f      	b.n	8003356 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 020a 	orr.w	r2, r2, #10
 8003344:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0204 	bic.w	r2, r2, #4
 8003354:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e005      	b.n	8003374 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003370:	2302      	movs	r3, #2
 8003372:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003374:	7dfb      	ldrb	r3, [r7, #23]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e02e      	b.n	80033ee <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003396:	2b02      	cmp	r3, #2
 8003398:	d008      	beq.n	80033ac <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2204      	movs	r2, #4
 800339e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e020      	b.n	80033ee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 020e 	bic.w	r2, r2, #14
 80033ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800340c:	2b02      	cmp	r3, #2
 800340e:	d005      	beq.n	800341c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2204      	movs	r2, #4
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e027      	b.n	800346c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 020e 	bic.w	r2, r2, #14
 800342a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
    }
  }
  return status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2204      	movs	r2, #4
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d024      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x72>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01f      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0204 	bic.w	r2, r2, #4
 80034c4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	2104      	movs	r1, #4
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d06a      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034e6:	e065      	b.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	2202      	movs	r2, #2
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_IRQHandler+0xdc>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d027      	beq.n	8003552 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 020a 	bic.w	r2, r2, #10
 800351e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	2102      	movs	r1, #2
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d035      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003550:	e030      	b.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2208      	movs	r2, #8
 8003558:	409a      	lsls	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d028      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 020e 	bic.w	r2, r2, #14
 800357a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003584:	2101      	movs	r1, #1
 8003586:	fa01 f202 	lsl.w	r2, r1, r2
 800358a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
    }
  }
}
 80035b2:	e7ff      	b.n	80035b4 <HAL_DMA_IRQHandler+0x13e>
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d108      	bne.n	8003614 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003612:	e007      	b.n	8003624 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <DMA_CalcBaseAndBitshift+0x60>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d80f      	bhi.n	8003664 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <DMA_CalcBaseAndBitshift+0x64>)
 800364c:	4413      	add	r3, r2
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <DMA_CalcBaseAndBitshift+0x68>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	009a      	lsls	r2, r3, #2
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0f      	ldr	r2, [pc, #60]	@ (800369c <DMA_CalcBaseAndBitshift+0x6c>)
 8003660:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003662:	e00e      	b.n	8003682 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <DMA_CalcBaseAndBitshift+0x70>)
 800366c:	4413      	add	r3, r2
 800366e:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <DMA_CalcBaseAndBitshift+0x68>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	009a      	lsls	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <DMA_CalcBaseAndBitshift+0x74>)
 8003680:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40020407 	.word	0x40020407
 8003694:	bffdfff8 	.word	0xbffdfff8
 8003698:	cccccccd 	.word	0xcccccccd
 800369c:	40020000 	.word	0x40020000
 80036a0:	bffdfbf8 	.word	0xbffdfbf8
 80036a4:	40020400 	.word	0x40020400

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b6:	e154      	b.n	8003962 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8146 	beq.w	800395c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d005      	beq.n	80036e8 <HAL_GPIO_Init+0x40>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d130      	bne.n	800374a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800371e:	2201      	movs	r2, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0201 	and.w	r2, r3, #1
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b03      	cmp	r3, #3
 8003754:	d017      	beq.n	8003786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2203      	movs	r2, #3
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d123      	bne.n	80037da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	08da      	lsrs	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3208      	adds	r2, #8
 800379a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	220f      	movs	r2, #15
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	08da      	lsrs	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3208      	adds	r2, #8
 80037d4:	6939      	ldr	r1, [r7, #16]
 80037d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	2203      	movs	r2, #3
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0203 	and.w	r2, r3, #3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a0 	beq.w	800395c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381c:	4b58      	ldr	r3, [pc, #352]	@ (8003980 <HAL_GPIO_Init+0x2d8>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	4a57      	ldr	r2, [pc, #348]	@ (8003980 <HAL_GPIO_Init+0x2d8>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6193      	str	r3, [r2, #24]
 8003828:	4b55      	ldr	r3, [pc, #340]	@ (8003980 <HAL_GPIO_Init+0x2d8>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003834:	4a53      	ldr	r2, [pc, #332]	@ (8003984 <HAL_GPIO_Init+0x2dc>)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	220f      	movs	r2, #15
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800385e:	d019      	beq.n	8003894 <HAL_GPIO_Init+0x1ec>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a49      	ldr	r2, [pc, #292]	@ (8003988 <HAL_GPIO_Init+0x2e0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <HAL_GPIO_Init+0x1e8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a48      	ldr	r2, [pc, #288]	@ (800398c <HAL_GPIO_Init+0x2e4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00d      	beq.n	800388c <HAL_GPIO_Init+0x1e4>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a47      	ldr	r2, [pc, #284]	@ (8003990 <HAL_GPIO_Init+0x2e8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <HAL_GPIO_Init+0x1e0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a46      	ldr	r2, [pc, #280]	@ (8003994 <HAL_GPIO_Init+0x2ec>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_GPIO_Init+0x1dc>
 8003880:	2304      	movs	r3, #4
 8003882:	e008      	b.n	8003896 <HAL_GPIO_Init+0x1ee>
 8003884:	2305      	movs	r3, #5
 8003886:	e006      	b.n	8003896 <HAL_GPIO_Init+0x1ee>
 8003888:	2303      	movs	r3, #3
 800388a:	e004      	b.n	8003896 <HAL_GPIO_Init+0x1ee>
 800388c:	2302      	movs	r3, #2
 800388e:	e002      	b.n	8003896 <HAL_GPIO_Init+0x1ee>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_GPIO_Init+0x1ee>
 8003894:	2300      	movs	r3, #0
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	f002 0203 	and.w	r2, r2, #3
 800389c:	0092      	lsls	r2, r2, #2
 800389e:	4093      	lsls	r3, r2
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038a6:	4937      	ldr	r1, [pc, #220]	@ (8003984 <HAL_GPIO_Init+0x2dc>)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b4:	4b38      	ldr	r3, [pc, #224]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038de:	4b2e      	ldr	r3, [pc, #184]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003902:	4a25      	ldr	r2, [pc, #148]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003908:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800392c:	4a1a      	ldr	r2, [pc, #104]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003956:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <HAL_GPIO_Init+0x2f0>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	3301      	adds	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f aea3 	bne.w	80036b8 <HAL_GPIO_Init+0x10>
  }
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40021000 	.word	0x40021000
 8003984:	40010000 	.word	0x40010000
 8003988:	48000400 	.word	0x48000400
 800398c:	48000800 	.word	0x48000800
 8003990:	48000c00 	.word	0x48000c00
 8003994:	48001000 	.word	0x48001000
 8003998:	40010400 	.word	0x40010400

0800399c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80039aa:	e0b8      	b.n	8003b1e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80039ac:	2201      	movs	r2, #1
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80ab 	beq.w	8003b18 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80039c2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b3c <HAL_GPIO_DeInit+0x1a0>)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039ea:	d019      	beq.n	8003a20 <HAL_GPIO_DeInit+0x84>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a54      	ldr	r2, [pc, #336]	@ (8003b40 <HAL_GPIO_DeInit+0x1a4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_GPIO_DeInit+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a53      	ldr	r2, [pc, #332]	@ (8003b44 <HAL_GPIO_DeInit+0x1a8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00d      	beq.n	8003a18 <HAL_GPIO_DeInit+0x7c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a52      	ldr	r2, [pc, #328]	@ (8003b48 <HAL_GPIO_DeInit+0x1ac>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <HAL_GPIO_DeInit+0x78>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a51      	ldr	r2, [pc, #324]	@ (8003b4c <HAL_GPIO_DeInit+0x1b0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <HAL_GPIO_DeInit+0x74>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e008      	b.n	8003a22 <HAL_GPIO_DeInit+0x86>
 8003a10:	2305      	movs	r3, #5
 8003a12:	e006      	b.n	8003a22 <HAL_GPIO_DeInit+0x86>
 8003a14:	2303      	movs	r3, #3
 8003a16:	e004      	b.n	8003a22 <HAL_GPIO_DeInit+0x86>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e002      	b.n	8003a22 <HAL_GPIO_DeInit+0x86>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_GPIO_DeInit+0x86>
 8003a20:	2300      	movs	r3, #0
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	f002 0203 	and.w	r2, r2, #3
 8003a28:	0092      	lsls	r2, r2, #2
 8003a2a:	4093      	lsls	r3, r2
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d132      	bne.n	8003a98 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	4945      	ldr	r1, [pc, #276]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a40:	4b43      	ldr	r3, [pc, #268]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	4941      	ldr	r1, [pc, #260]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a4e:	4b40      	ldr	r3, [pc, #256]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	493e      	ldr	r1, [pc, #248]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	493a      	ldr	r1, [pc, #232]	@ (8003b50 <HAL_GPIO_DeInit+0x1b4>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	220f      	movs	r2, #15
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a7a:	4a30      	ldr	r2, [pc, #192]	@ (8003b3c <HAL_GPIO_DeInit+0x1a0>)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	482c      	ldr	r0, [pc, #176]	@ (8003b3c <HAL_GPIO_DeInit+0x1a0>)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	400a      	ands	r2, r1
 8003a92:	3302      	adds	r3, #2
 8003a94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2103      	movs	r1, #3
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	08da      	lsrs	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3208      	adds	r2, #8
 8003ab6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	08d2      	lsrs	r2, r2, #3
 8003ace:	4019      	ands	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	2103      	movs	r1, #3
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	401a      	ands	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	2101      	movs	r1, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	401a      	ands	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f47f af40 	bne.w	80039ac <HAL_GPIO_DeInit+0x10>
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	48000400 	.word	0x48000400
 8003b44:	48000800 	.word	0x48000800
 8003b48:	48000c00 	.word	0x48000c00
 8003b4c:	48001000 	.word	0x48001000
 8003b50:	40010400 	.word	0x40010400

08003b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b70:	e002      	b.n	8003b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e08d      	b.n	8003cb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd ffd0 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003be4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	e006      	b.n	8003c0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d108      	bne.n	8003c26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c22:	605a      	str	r2, [r3, #4]
 8003c24:	e007      	b.n	8003c36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69d9      	ldr	r1, [r3, #28]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d138      	bne.n	8003d42 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e032      	b.n	8003d44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2224      	movs	r2, #36	@ 0x24
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d0c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d139      	bne.n	8003dda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e033      	b.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	@ 0x24
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003da2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003df8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f001 b823 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 817d 	beq.w	800411e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e24:	4bbc      	ldr	r3, [pc, #752]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d00c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e30:	4bb9      	ldr	r3, [pc, #740]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d15c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x10e>
 8003e3c:	4bb6      	ldr	r3, [pc, #728]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e48:	d155      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x10e>
 8003e4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e4e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d102      	bne.n	8003e7c <HAL_RCC_OscConfig+0x94>
 8003e76:	4ba8      	ldr	r3, [pc, #672]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	e015      	b.n	8003ea8 <HAL_RCC_OscConfig+0xc0>
 8003e7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e80:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e94:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003e98:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003ea4:	4b9c      	ldr	r3, [pc, #624]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003eac:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003eb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003eb4:	fa92 f2a2 	rbit	r2, r2
 8003eb8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003ebc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003ec0:	fab2 f282 	clz	r2, r2
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	f042 0220 	orr.w	r2, r2, #32
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	f002 021f 	and.w	r2, r2, #31
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 811f 	beq.w	800411c <HAL_RCC_OscConfig+0x334>
 8003ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 8116 	bne.w	800411c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f000 bfaf 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x12e>
 8003f08:	4b83      	ldr	r3, [pc, #524]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a82      	ldr	r2, [pc, #520]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	e036      	b.n	8003f84 <HAL_RCC_OscConfig+0x19c>
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x158>
 8003f26:	4b7c      	ldr	r3, [pc, #496]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7b      	ldr	r2, [pc, #492]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b79      	ldr	r3, [pc, #484]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a78      	ldr	r2, [pc, #480]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e021      	b.n	8003f84 <HAL_RCC_OscConfig+0x19c>
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x184>
 8003f52:	4b71      	ldr	r3, [pc, #452]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a70      	ldr	r2, [pc, #448]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6d      	ldr	r2, [pc, #436]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0x19c>
 8003f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a69      	ldr	r2, [pc, #420]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b67      	ldr	r3, [pc, #412]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a66      	ldr	r2, [pc, #408]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f82:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f84:	4b64      	ldr	r3, [pc, #400]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	f023 020f 	bic.w	r2, r3, #15
 8003f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	495f      	ldr	r1, [pc, #380]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d059      	beq.n	8004062 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fe f963 	bl	8002278 <HAL_GetTick>
 8003fb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fe f95e 	bl	8002278 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b64      	cmp	r3, #100	@ 0x64
 8003fc6:	d902      	bls.n	8003fce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	f000 bf43 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
 8003fce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fd2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003fda:	fa93 f3a3 	rbit	r3, r3
 8003fde:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003fe2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_OscConfig+0x218>
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	e015      	b.n	800402c <HAL_RCC_OscConfig+0x244>
 8004000:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004004:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004018:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800401c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004028:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004030:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004034:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004038:	fa92 f2a2 	rbit	r2, r2
 800403c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004040:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004044:	fab2 f282 	clz	r2, r2
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f042 0220 	orr.w	r2, r2, #32
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	f002 021f 	and.w	r2, r2, #31
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ab      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x1d0>
 8004060:	e05d      	b.n	800411e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe f909 	bl	8002278 <HAL_GetTick>
 8004066:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe f904 	bl	8002278 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	@ 0x64
 800407a:	d902      	bls.n	8004082 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	f000 bee9 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
 8004082:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004086:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004096:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2cc>
 80040ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	e015      	b.n	80040e0 <HAL_RCC_OscConfig+0x2f8>
 80040b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040b8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80040c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040cc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80040d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80040d4:	fa93 f3a3 	rbit	r3, r3
 80040d8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80040dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <HAL_RCC_OscConfig+0x330>)
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040e4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80040e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80040ec:	fa92 f2a2 	rbit	r2, r2
 80040f0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80040f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80040f8:	fab2 f282 	clz	r2, r2
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	f042 0220 	orr.w	r2, r2, #32
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f002 021f 	and.w	r2, r2, #31
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ab      	bne.n	800406c <HAL_RCC_OscConfig+0x284>
 8004114:	e003      	b.n	800411e <HAL_RCC_OscConfig+0x336>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 817d 	beq.w	800442e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004134:	4ba6      	ldr	r3, [pc, #664]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004140:	4ba3      	ldr	r3, [pc, #652]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d172      	bne.n	8004232 <HAL_RCC_OscConfig+0x44a>
 800414c:	4ba0      	ldr	r3, [pc, #640]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d16c      	bne.n	8004232 <HAL_RCC_OscConfig+0x44a>
 8004158:	2302      	movs	r3, #2
 800415a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800416a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_RCC_OscConfig+0x3a0>
 8004182:	4b93      	ldr	r3, [pc, #588]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e013      	b.n	80041b0 <HAL_RCC_OscConfig+0x3c8>
 8004188:	2302      	movs	r3, #2
 800418a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800419a:	2302      	movs	r3, #2
 800419c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80041a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80041ac:	4b88      	ldr	r3, [pc, #544]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	2202      	movs	r2, #2
 80041b2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80041b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80041ba:	fa92 f2a2 	rbit	r2, r2
 80041be:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80041c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041c6:	fab2 f282 	clz	r2, r2
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	f042 0220 	orr.w	r2, r2, #32
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f002 021f 	and.w	r2, r2, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f202 	lsl.w	r2, r1, r2
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCC_OscConfig+0x410>
 80041e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f000 be2e 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b75      	ldr	r3, [pc, #468]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004204:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	21f8      	movs	r1, #248	@ 0xf8
 800420e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004216:	fa91 f1a1 	rbit	r1, r1
 800421a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800421e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004222:	fab1 f181 	clz	r1, r1
 8004226:	b2c9      	uxtb	r1, r1
 8004228:	408b      	lsls	r3, r1
 800422a:	4969      	ldr	r1, [pc, #420]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004230:	e0fd      	b.n	800442e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004236:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8088 	beq.w	8004354 <HAL_RCC_OscConfig+0x56c>
 8004244:	2301      	movs	r3, #1
 8004246:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004256:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004264:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	461a      	mov	r2, r3
 800426c:	2301      	movs	r3, #1
 800426e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fe f802 	bl	8002278 <HAL_GetTick>
 8004274:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800427a:	f7fd fffd 	bl	8002278 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d902      	bls.n	8004290 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	f000 bde2 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
 8004290:	2302      	movs	r3, #2
 8004292:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80042a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4d8>
 80042ba:	4b45      	ldr	r3, [pc, #276]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	e013      	b.n	80042e8 <HAL_RCC_OscConfig+0x500>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80042d2:	2302      	movs	r3, #2
 80042d4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80042d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80042e4:	4b3a      	ldr	r3, [pc, #232]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	2202      	movs	r2, #2
 80042ea:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80042ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80042f2:	fa92 f2a2 	rbit	r2, r2
 80042f6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80042fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	f042 0220 	orr.w	r2, r2, #32
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f002 021f 	and.w	r2, r2, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0af      	beq.n	800427a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	4b2d      	ldr	r3, [pc, #180]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004326:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	21f8      	movs	r1, #248	@ 0xf8
 8004330:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004338:	fa91 f1a1 	rbit	r1, r1
 800433c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004340:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004344:	fab1 f181 	clz	r1, r1
 8004348:	b2c9      	uxtb	r1, r1
 800434a:	408b      	lsls	r3, r1
 800434c:	4920      	ldr	r1, [pc, #128]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
 8004352:	e06c      	b.n	800442e <HAL_RCC_OscConfig+0x646>
 8004354:	2301      	movs	r3, #1
 8004356:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004366:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004374:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	461a      	mov	r2, r3
 800437c:	2300      	movs	r3, #0
 800437e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fd ff7a 	bl	8002278 <HAL_GetTick>
 8004384:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438a:	f7fd ff75 	bl	8002278 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d902      	bls.n	80043a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	f000 bd5a 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
 80043a0:	2302      	movs	r3, #2
 80043a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80043b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d104      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5ec>
 80043ca:	4b01      	ldr	r3, [pc, #4]	@ (80043d0 <HAL_RCC_OscConfig+0x5e8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e015      	b.n	80043fc <HAL_RCC_OscConfig+0x614>
 80043d0:	40021000 	.word	0x40021000
 80043d4:	2302      	movs	r3, #2
 80043d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80043e6:	2302      	movs	r3, #2
 80043e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80043ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80043f8:	4bc8      	ldr	r3, [pc, #800]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	2202      	movs	r2, #2
 80043fe:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004402:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004406:	fa92 f2a2 	rbit	r2, r2
 800440a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800440e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004412:	fab2 f282 	clz	r2, r2
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	f042 0220 	orr.w	r2, r2, #32
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	f002 021f 	and.w	r2, r2, #31
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f202 	lsl.w	r2, r1, r2
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ad      	bne.n	800438a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004432:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8110 	beq.w	8004664 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004448:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d079      	beq.n	8004548 <HAL_RCC_OscConfig+0x760>
 8004454:	2301      	movs	r3, #1
 8004456:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	4bab      	ldr	r3, [pc, #684]	@ (8004720 <HAL_RCC_OscConfig+0x938>)
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	461a      	mov	r2, r3
 800447a:	2301      	movs	r3, #1
 800447c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7fd fefb 	bl	8002278 <HAL_GetTick>
 8004482:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e00a      	b.n	800449e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd fef6 	bl	8002278 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d902      	bls.n	800449e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	f000 bcdb 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
 800449e:	2302      	movs	r3, #2
 80044a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80044b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80044b8:	2202      	movs	r2, #2
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	fa93 f2a3 	rbit	r2, r3
 80044ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044dc:	2202      	movs	r2, #2
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	fa93 f2a3 	rbit	r2, r3
 80044ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80044f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f8:	4b88      	ldr	r3, [pc, #544]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 80044fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004504:	2102      	movs	r1, #2
 8004506:	6019      	str	r1, [r3, #0]
 8004508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	fa93 f1a3 	rbit	r1, r3
 8004516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800451e:	6019      	str	r1, [r3, #0]
  return result;
 8004520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004524:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	2101      	movs	r1, #1
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0a0      	beq.n	8004488 <HAL_RCC_OscConfig+0x6a0>
 8004546:	e08d      	b.n	8004664 <HAL_RCC_OscConfig+0x87c>
 8004548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004558:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	fa93 f2a3 	rbit	r2, r3
 8004562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004566:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800456a:	601a      	str	r2, [r3, #0]
  return result;
 800456c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004570:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004574:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	4b68      	ldr	r3, [pc, #416]	@ (8004720 <HAL_RCC_OscConfig+0x938>)
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	461a      	mov	r2, r3
 8004586:	2300      	movs	r3, #0
 8004588:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7fd fe75 	bl	8002278 <HAL_GetTick>
 800458e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fd fe70 	bl	8002278 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d902      	bls.n	80045aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	f000 bc55 	b.w	8004e54 <HAL_RCC_OscConfig+0x106c>
 80045aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80045b2:	2202      	movs	r2, #2
 80045b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80045d6:	2202      	movs	r2, #2
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	fa93 f2a3 	rbit	r2, r3
 80045e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80045fa:	2202      	movs	r2, #2
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004602:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	fa93 f2a3 	rbit	r2, r3
 800460c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004610:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004614:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004616:	4b41      	ldr	r3, [pc, #260]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 8004618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800461a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004622:	2102      	movs	r1, #2
 8004624:	6019      	str	r1, [r3, #0]
 8004626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800462a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	fa93 f1a3 	rbit	r1, r3
 8004634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004638:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800463c:	6019      	str	r1, [r3, #0]
  return result;
 800463e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004642:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d197      	bne.n	8004594 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004668:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 81a1 	beq.w	80049bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004680:	4b26      	ldr	r3, [pc, #152]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d116      	bne.n	80046ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468c:	4b23      	ldr	r3, [pc, #140]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4a22      	ldr	r2, [pc, #136]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004696:	61d3      	str	r3, [r2, #28]
 8004698:	4b20      	ldr	r3, [pc, #128]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80046a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80046b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <HAL_RCC_OscConfig+0x93c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d11a      	bne.n	80046fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c6:	4b17      	ldr	r3, [pc, #92]	@ (8004724 <HAL_RCC_OscConfig+0x93c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a16      	ldr	r2, [pc, #88]	@ (8004724 <HAL_RCC_OscConfig+0x93c>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fd fdd1 	bl	8002278 <HAL_GetTick>
 80046d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046da:	e009      	b.n	80046f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046dc:	f7fd fdcc 	bl	8002278 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	@ 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e3b1      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <HAL_RCC_OscConfig+0x93c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ef      	beq.n	80046dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10d      	bne.n	8004728 <HAL_RCC_OscConfig+0x940>
 800470c:	4b03      	ldr	r3, [pc, #12]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4a02      	ldr	r2, [pc, #8]	@ (800471c <HAL_RCC_OscConfig+0x934>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6213      	str	r3, [r2, #32]
 8004718:	e03c      	b.n	8004794 <HAL_RCC_OscConfig+0x9ac>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	10908120 	.word	0x10908120
 8004724:	40007000 	.word	0x40007000
 8004728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10c      	bne.n	8004752 <HAL_RCC_OscConfig+0x96a>
 8004738:	4bc1      	ldr	r3, [pc, #772]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	4ac0      	ldr	r2, [pc, #768]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6213      	str	r3, [r2, #32]
 8004744:	4bbe      	ldr	r3, [pc, #760]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4abd      	ldr	r2, [pc, #756]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	6213      	str	r3, [r2, #32]
 8004750:	e020      	b.n	8004794 <HAL_RCC_OscConfig+0x9ac>
 8004752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b05      	cmp	r3, #5
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x994>
 8004762:	4bb7      	ldr	r3, [pc, #732]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4ab6      	ldr	r2, [pc, #728]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	6213      	str	r3, [r2, #32]
 800476e:	4bb4      	ldr	r3, [pc, #720]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4ab3      	ldr	r2, [pc, #716]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	6213      	str	r3, [r2, #32]
 800477a:	e00b      	b.n	8004794 <HAL_RCC_OscConfig+0x9ac>
 800477c:	4bb0      	ldr	r3, [pc, #704]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	4aaf      	ldr	r2, [pc, #700]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	6213      	str	r3, [r2, #32]
 8004788:	4bad      	ldr	r3, [pc, #692]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4aac      	ldr	r2, [pc, #688]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800478e:	f023 0304 	bic.w	r3, r3, #4
 8004792:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004798:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8081 	beq.w	80048a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd fd67 	bl	8002278 <HAL_GetTick>
 80047aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd fd62 	bl	8002278 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e345      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
 80047c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80047d0:	2202      	movs	r2, #2
 80047d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	fa93 f2a3 	rbit	r2, r3
 80047e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80047f4:	2202      	movs	r2, #2
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	fa93 f2a3 	rbit	r2, r3
 8004806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800480e:	601a      	str	r2, [r3, #0]
  return result;
 8004810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004814:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004818:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d102      	bne.n	8004834 <HAL_RCC_OscConfig+0xa4c>
 800482e:	4b84      	ldr	r3, [pc, #528]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	e013      	b.n	800485c <HAL_RCC_OscConfig+0xa74>
 8004834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004838:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800483c:	2202      	movs	r2, #2
 800483e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004844:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	fa93 f2a3 	rbit	r2, r3
 800484e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004852:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	4b79      	ldr	r3, [pc, #484]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004860:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004864:	2102      	movs	r1, #2
 8004866:	6011      	str	r1, [r2, #0]
 8004868:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800486c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	fa92 f1a2 	rbit	r1, r2
 8004876:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800487a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800487e:	6011      	str	r1, [r2, #0]
  return result;
 8004880:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004884:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	fab2 f282 	clz	r2, r2
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	f002 021f 	and.w	r2, r2, #31
 800489a:	2101      	movs	r1, #1
 800489c:	fa01 f202 	lsl.w	r2, r1, r2
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d084      	beq.n	80047b0 <HAL_RCC_OscConfig+0x9c8>
 80048a6:	e07f      	b.n	80049a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a8:	f7fd fce6 	bl	8002278 <HAL_GetTick>
 80048ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b0:	e00b      	b.n	80048ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fd fce1 	bl	8002278 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e2c4      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
 80048ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ce:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80048d2:	2202      	movs	r2, #2
 80048d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	fa93 f2a3 	rbit	r2, r3
 80048e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80048f6:	2202      	movs	r2, #2
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fa93 f2a3 	rbit	r2, r3
 8004908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004910:	601a      	str	r2, [r3, #0]
  return result;
 8004912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004916:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800491a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491c:	fab3 f383 	clz	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f043 0302 	orr.w	r3, r3, #2
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d102      	bne.n	8004936 <HAL_RCC_OscConfig+0xb4e>
 8004930:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	e013      	b.n	800495e <HAL_RCC_OscConfig+0xb76>
 8004936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800493a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800493e:	2202      	movs	r2, #2
 8004940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	fa93 f2a3 	rbit	r2, r3
 8004950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004954:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004962:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004966:	2102      	movs	r1, #2
 8004968:	6011      	str	r1, [r2, #0]
 800496a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800496e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	fa92 f1a2 	rbit	r1, r2
 8004978:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800497c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004980:	6011      	str	r1, [r2, #0]
  return result;
 8004982:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004986:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	fab2 f282 	clz	r2, r2
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	f002 021f 	and.w	r2, r2, #31
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f202 	lsl.w	r2, r1, r2
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d184      	bne.n	80048b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b0:	4b23      	ldr	r3, [pc, #140]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	4a22      	ldr	r2, [pc, #136]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 80049b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8242 	beq.w	8004e52 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004a40 <HAL_RCC_OscConfig+0xc58>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	f000 8213 	beq.w	8004e02 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	f040 8162 	bne.w	8004cb2 <HAL_RCC_OscConfig+0xeca>
 80049ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80049f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a00:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	fa93 f2a3 	rbit	r2, r3
 8004a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004a12:	601a      	str	r2, [r3, #0]
  return result;
 8004a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a18:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004a1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fd fc20 	bl	8002278 <HAL_GetTick>
 8004a38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3c:	e00c      	b.n	8004a58 <HAL_RCC_OscConfig+0xc70>
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd fc18 	bl	8002278 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1fd      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
 8004a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	fa93 f2a3 	rbit	r2, r3
 8004a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a78:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004a7c:	601a      	str	r2, [r3, #0]
  return result;
 8004a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a82:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004a86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_OscConfig+0xcba>
 8004a9c:	4bb0      	ldr	r3, [pc, #704]	@ (8004d60 <HAL_RCC_OscConfig+0xf78>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	e027      	b.n	8004af2 <HAL_RCC_OscConfig+0xd0a>
 8004aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004aaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	fa93 f2a3 	rbit	r2, r3
 8004abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004acc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004ad0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ada:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	fa93 f2a3 	rbit	r2, r3
 8004ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	4b9c      	ldr	r3, [pc, #624]	@ (8004d60 <HAL_RCC_OscConfig+0xf78>)
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004af6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004afa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004afe:	6011      	str	r1, [r2, #0]
 8004b00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b04:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	fa92 f1a2 	rbit	r1, r2
 8004b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b12:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004b16:	6011      	str	r1, [r2, #0]
  return result;
 8004b18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b1c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	fab2 f282 	clz	r2, r2
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	f042 0220 	orr.w	r2, r2, #32
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	f002 021f 	and.w	r2, r2, #31
 8004b32:	2101      	movs	r1, #1
 8004b34:	fa01 f202 	lsl.w	r2, r1, r2
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d182      	bne.n	8004a44 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b3e:	4b88      	ldr	r3, [pc, #544]	@ (8004d60 <HAL_RCC_OscConfig+0xf78>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	497f      	ldr	r1, [pc, #508]	@ (8004d60 <HAL_RCC_OscConfig+0xf78>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
 8004b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004b6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b78:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	fa93 f2a3 	rbit	r2, r3
 8004b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b86:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004b8a:	601a      	str	r2, [r3, #0]
  return result;
 8004b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b90:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004b94:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ba0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2301      	movs	r3, #1
 8004baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fd fb64 	bl	8002278 <HAL_GetTick>
 8004bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bb4:	e009      	b.n	8004bca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fd fb5f 	bl	8002278 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e144      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
 8004bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004bd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bdc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	fa93 f2a3 	rbit	r2, r3
 8004be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004bee:	601a      	str	r2, [r3, #0]
  return result;
 8004bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004bf8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d102      	bne.n	8004c14 <HAL_RCC_OscConfig+0xe2c>
 8004c0e:	4b54      	ldr	r3, [pc, #336]	@ (8004d60 <HAL_RCC_OscConfig+0xf78>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	e027      	b.n	8004c64 <HAL_RCC_OscConfig+0xe7c>
 8004c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c18:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c26:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	fa93 f2a3 	rbit	r2, r3
 8004c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004c42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c4c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	fa93 f2a3 	rbit	r2, r3
 8004c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	4b3f      	ldr	r3, [pc, #252]	@ (8004d60 <HAL_RCC_OscConfig+0xf78>)
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c68:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004c6c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004c70:	6011      	str	r1, [r2, #0]
 8004c72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c76:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	fa92 f1a2 	rbit	r1, r2
 8004c80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c84:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004c88:	6011      	str	r1, [r2, #0]
  return result;
 8004c8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c8e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	fab2 f282 	clz	r2, r2
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	f042 0220 	orr.w	r2, r2, #32
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	f002 021f 	and.w	r2, r2, #31
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d082      	beq.n	8004bb6 <HAL_RCC_OscConfig+0xdce>
 8004cb0:	e0cf      	b.n	8004e52 <HAL_RCC_OscConfig+0x106a>
 8004cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004cba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	fa93 f2a3 	rbit	r2, r3
 8004cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004cd6:	601a      	str	r2, [r3, #0]
  return result;
 8004cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cdc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004ce0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004cec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fd fabe 	bl	8002278 <HAL_GetTick>
 8004cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d00:	e009      	b.n	8004d16 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd fab9 	bl	8002278 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e09e      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
 8004d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004d1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fa93 f2a3 	rbit	r2, r3
 8004d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d36:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004d3a:	601a      	str	r2, [r3, #0]
  return result;
 8004d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d40:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004d44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d104      	bne.n	8004d64 <HAL_RCC_OscConfig+0xf7c>
 8004d5a:	4b01      	ldr	r3, [pc, #4]	@ (8004d60 <HAL_RCC_OscConfig+0xf78>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	e029      	b.n	8004db4 <HAL_RCC_OscConfig+0xfcc>
 8004d60:	40021000 	.word	0x40021000
 8004d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d68:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004d6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d76:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	fa93 f2a3 	rbit	r2, r3
 8004d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d84:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d8e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004d92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d9c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	fa93 f2a3 	rbit	r2, r3
 8004da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004daa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e60 <HAL_RCC_OscConfig+0x1078>)
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004db8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004dbc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dc6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	fa92 f1a2 	rbit	r1, r2
 8004dd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dd4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004dd8:	6011      	str	r1, [r2, #0]
  return result;
 8004dda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dde:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	fab2 f282 	clz	r2, r2
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f042 0220 	orr.w	r2, r2, #32
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	f002 021f 	and.w	r2, r2, #31
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d180      	bne.n	8004d02 <HAL_RCC_OscConfig+0xf1a>
 8004e00:	e027      	b.n	8004e52 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e01e      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e16:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <HAL_RCC_OscConfig+0x1078>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004e22:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004e36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004e3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000

08004e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b09e      	sub	sp, #120	@ 0x78
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e162      	b.n	8005142 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b90      	ldr	r3, [pc, #576]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d910      	bls.n	8004eac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 0207 	bic.w	r2, r3, #7
 8004e92:	498b      	ldr	r1, [pc, #556]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9a:	4b89      	ldr	r3, [pc, #548]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e14a      	b.n	8005142 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb8:	4b82      	ldr	r3, [pc, #520]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	497f      	ldr	r1, [pc, #508]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80dc 	beq.w	8005090 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d13c      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xf6>
 8004ee0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ee4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d102      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xa6>
 8004f04:	4b6f      	ldr	r3, [pc, #444]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	e00f      	b.n	8004f2a <HAL_RCC_ClockConfig+0xc6>
 8004f0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f12:	fa93 f3a3 	rbit	r3, r3
 8004f16:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f20:	fa93 f3a3 	rbit	r3, r3
 8004f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f26:	4b67      	ldr	r3, [pc, #412]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f2e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f32:	fa92 f2a2 	rbit	r2, r2
 8004f36:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004f38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f3a:	fab2 f282 	clz	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f042 0220 	orr.w	r2, r2, #32
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	f002 021f 	and.w	r2, r2, #31
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d17b      	bne.n	800504e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0f3      	b.n	8005142 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d13c      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x178>
 8004f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f6a:	fa93 f3a3 	rbit	r3, r3
 8004f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d102      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x128>
 8004f86:	4b4f      	ldr	r3, [pc, #316]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	e00f      	b.n	8004fac <HAL_RCC_ClockConfig+0x148>
 8004f8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f94:	fa93 f3a3 	rbit	r3, r3
 8004f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa2:	fa93 f3a3 	rbit	r3, r3
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa8:	4b46      	ldr	r3, [pc, #280]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fb0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fb4:	fa92 f2a2 	rbit	r2, r2
 8004fb8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fbc:	fab2 f282 	clz	r2, r2
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	f042 0220 	orr.w	r2, r2, #32
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	f002 021f 	and.w	r2, r2, #31
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d13a      	bne.n	800504e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0b2      	b.n	8005142 <HAL_RCC_ClockConfig+0x2de>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_RCC_ClockConfig+0x1a0>
 8004ffe:	4b31      	ldr	r3, [pc, #196]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	e00d      	b.n	8005020 <HAL_RCC_ClockConfig+0x1bc>
 8005004:	2302      	movs	r3, #2
 8005006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	fa93 f3a3 	rbit	r3, r3
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005010:	2302      	movs	r3, #2
 8005012:	623b      	str	r3, [r7, #32]
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	fa93 f3a3 	rbit	r3, r3
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	4b29      	ldr	r3, [pc, #164]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	2202      	movs	r2, #2
 8005022:	61ba      	str	r2, [r7, #24]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	fa92 f2a2 	rbit	r2, r2
 800502a:	617a      	str	r2, [r7, #20]
  return result;
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	fab2 f282 	clz	r2, r2
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	f042 0220 	orr.w	r2, r2, #32
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	f002 021f 	and.w	r2, r2, #31
 800503e:	2101      	movs	r1, #1
 8005040:	fa01 f202 	lsl.w	r2, r1, r2
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e079      	b.n	8005142 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800504e:	4b1d      	ldr	r3, [pc, #116]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f023 0203 	bic.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	491a      	ldr	r1, [pc, #104]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005060:	f7fd f90a 	bl	8002278 <HAL_GetTick>
 8005064:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	e00a      	b.n	800507e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005068:	f7fd f906 	bl	8002278 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e061      	b.n	8005142 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507e:	4b11      	ldr	r3, [pc, #68]	@ (80050c4 <HAL_RCC_ClockConfig+0x260>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 020c 	and.w	r2, r3, #12
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	429a      	cmp	r2, r3
 800508e:	d1eb      	bne.n	8005068 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005090:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d214      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b08      	ldr	r3, [pc, #32]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 0207 	bic.w	r2, r3, #7
 80050a6:	4906      	ldr	r1, [pc, #24]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b04      	ldr	r3, [pc, #16]	@ (80050c0 <HAL_RCC_ClockConfig+0x25c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e040      	b.n	8005142 <HAL_RCC_ClockConfig+0x2de>
 80050c0:	40022000 	.word	0x40022000
 80050c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d4:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <HAL_RCC_ClockConfig+0x2e8>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	491a      	ldr	r1, [pc, #104]	@ (800514c <HAL_RCC_ClockConfig+0x2e8>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050f2:	4b16      	ldr	r3, [pc, #88]	@ (800514c <HAL_RCC_ClockConfig+0x2e8>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4912      	ldr	r1, [pc, #72]	@ (800514c <HAL_RCC_ClockConfig+0x2e8>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005106:	f000 f829 	bl	800515c <HAL_RCC_GetSysClockFreq>
 800510a:	4601      	mov	r1, r0
 800510c:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <HAL_RCC_ClockConfig+0x2e8>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005114:	22f0      	movs	r2, #240	@ 0xf0
 8005116:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	fa92 f2a2 	rbit	r2, r2
 800511e:	60fa      	str	r2, [r7, #12]
  return result;
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	fab2 f282 	clz	r2, r2
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	40d3      	lsrs	r3, r2
 800512a:	4a09      	ldr	r2, [pc, #36]	@ (8005150 <HAL_RCC_ClockConfig+0x2ec>)
 800512c:	5cd3      	ldrb	r3, [r2, r3]
 800512e:	fa21 f303 	lsr.w	r3, r1, r3
 8005132:	4a08      	ldr	r2, [pc, #32]	@ (8005154 <HAL_RCC_ClockConfig+0x2f0>)
 8005134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005136:	4b08      	ldr	r3, [pc, #32]	@ (8005158 <HAL_RCC_ClockConfig+0x2f4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fd f858 	bl	80021f0 <HAL_InitTick>
  
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3778      	adds	r7, #120	@ 0x78
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	08008e84 	.word	0x08008e84
 8005154:	20000008 	.word	0x20000008
 8005158:	2000000c 	.word	0x2000000c

0800515c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005176:	4b1e      	ldr	r3, [pc, #120]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b04      	cmp	r3, #4
 8005184:	d002      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x30>
 8005186:	2b08      	cmp	r3, #8
 8005188:	d003      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x36>
 800518a:	e026      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800518c:	4b19      	ldr	r3, [pc, #100]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800518e:	613b      	str	r3, [r7, #16]
      break;
 8005190:	e026      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0c9b      	lsrs	r3, r3, #18
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	4a17      	ldr	r2, [pc, #92]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800519c:	5cd3      	ldrb	r3, [r2, r3]
 800519e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80051a0:	4b13      	ldr	r3, [pc, #76]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80051aa:	5cd3      	ldrb	r3, [r2, r3]
 80051ac:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051b8:	4a0e      	ldr	r2, [pc, #56]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e004      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005200 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	613b      	str	r3, [r7, #16]
      break;
 80051d8:	e002      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <HAL_RCC_GetSysClockFreq+0xa8>)
 80051dc:	613b      	str	r3, [r7, #16]
      break;
 80051de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051e0:	693b      	ldr	r3, [r7, #16]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	00f42400 	.word	0x00f42400
 80051f8:	08008e9c 	.word	0x08008e9c
 80051fc:	08008eac 	.word	0x08008eac
 8005200:	003d0900 	.word	0x003d0900
 8005204:	007a1200 	.word	0x007a1200

08005208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800520c:	4b03      	ldr	r3, [pc, #12]	@ (800521c <HAL_RCC_GetHCLKFreq+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000008 	.word	0x20000008

08005220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005226:	f7ff ffef 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 800522a:	4601      	mov	r1, r0
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005234:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005238:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	fa92 f2a2 	rbit	r2, r2
 8005240:	603a      	str	r2, [r7, #0]
  return result;
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	fab2 f282 	clz	r2, r2
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	40d3      	lsrs	r3, r2
 800524c:	4a04      	ldr	r2, [pc, #16]	@ (8005260 <HAL_RCC_GetPCLK1Freq+0x40>)
 800524e:	5cd3      	ldrb	r3, [r2, r3]
 8005250:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40021000 	.word	0x40021000
 8005260:	08008e94 	.word	0x08008e94

08005264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800526a:	f7ff ffcd 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 800526e:	4601      	mov	r1, r0
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005278:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800527c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	fa92 f2a2 	rbit	r2, r2
 8005284:	603a      	str	r2, [r7, #0]
  return result;
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	fab2 f282 	clz	r2, r2
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	40d3      	lsrs	r3, r2
 8005290:	4a04      	ldr	r2, [pc, #16]	@ (80052a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005292:	5cd3      	ldrb	r3, [r2, r3]
 8005294:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	08008e94 	.word	0x08008e94

080052a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b092      	sub	sp, #72	@ 0x48
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80d4 	beq.w	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10e      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	61d3      	str	r3, [r2, #28]
 80052e4:	4b48      	ldr	r3, [pc, #288]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f0:	2301      	movs	r3, #1
 80052f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f6:	4b45      	ldr	r3, [pc, #276]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d118      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005302:	4b42      	ldr	r3, [pc, #264]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a41      	ldr	r2, [pc, #260]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530e:	f7fc ffb3 	bl	8002278 <HAL_GetTick>
 8005312:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005314:	e008      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005316:	f7fc ffaf 	bl	8002278 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b64      	cmp	r3, #100	@ 0x64
 8005322:	d901      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e169      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	4b38      	ldr	r3, [pc, #224]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005334:	4b34      	ldr	r3, [pc, #208]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800533e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8084 	beq.w	800544e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800534e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005350:	429a      	cmp	r2, r3
 8005352:	d07c      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005354:	4b2c      	ldr	r3, [pc, #176]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005362:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800536c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	4b26      	ldr	r3, [pc, #152]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	461a      	mov	r2, r3
 800537e:	2301      	movs	r3, #1
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005386:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	fa93 f3a3 	rbit	r3, r3
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	4b1d      	ldr	r3, [pc, #116]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053a6:	4a18      	ldr	r2, [pc, #96]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04b      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b6:	f7fc ff5f 	bl	8002278 <HAL_GetTick>
 80053ba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053bc:	e00a      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053be:	f7fc ff5b 	bl	8002278 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e113      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80053d4:	2302      	movs	r3, #2
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	fa93 f3a3 	rbit	r3, r3
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e0:	2302      	movs	r3, #2
 80053e2:	623b      	str	r3, [r7, #32]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	61fb      	str	r3, [r7, #28]
  return result;
 80053ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ee:	fab3 f383 	clz	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d108      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005402:	4b01      	ldr	r3, [pc, #4]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	e00d      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005408:	40021000 	.word	0x40021000
 800540c:	40007000 	.word	0x40007000
 8005410:	10908100 	.word	0x10908100
 8005414:	2302      	movs	r3, #2
 8005416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	4b78      	ldr	r3, [pc, #480]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	2202      	movs	r2, #2
 8005426:	613a      	str	r2, [r7, #16]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	fa92 f2a2 	rbit	r2, r2
 800542e:	60fa      	str	r2, [r7, #12]
  return result;
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	fab2 f282 	clz	r2, r2
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	f002 021f 	and.w	r2, r2, #31
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f202 	lsl.w	r2, r1, r2
 8005448:	4013      	ands	r3, r2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0b7      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800544e:	4b6d      	ldr	r3, [pc, #436]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	496a      	ldr	r1, [pc, #424]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545c:	4313      	orrs	r3, r2
 800545e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005460:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b66      	ldr	r3, [pc, #408]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	4a65      	ldr	r2, [pc, #404]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005472:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005480:	4b60      	ldr	r3, [pc, #384]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005484:	f023 0203 	bic.w	r2, r3, #3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	495d      	ldr	r1, [pc, #372]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d008      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800549e:	4b59      	ldr	r3, [pc, #356]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	4956      	ldr	r1, [pc, #344]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054bc:	4b51      	ldr	r3, [pc, #324]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	494e      	ldr	r1, [pc, #312]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054da:	4b4a      	ldr	r3, [pc, #296]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	f023 0210 	bic.w	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	4947      	ldr	r1, [pc, #284]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80054f8:	4b42      	ldr	r3, [pc, #264]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	493f      	ldr	r1, [pc, #252]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005516:	4b3b      	ldr	r3, [pc, #236]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	f023 0220 	bic.w	r2, r3, #32
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4938      	ldr	r1, [pc, #224]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d008      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005534:	4b33      	ldr	r3, [pc, #204]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005538:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	4930      	ldr	r1, [pc, #192]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b00      	cmp	r3, #0
 8005550:	d008      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005552:	4b2c      	ldr	r3, [pc, #176]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005556:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	4929      	ldr	r1, [pc, #164]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005570:	4b24      	ldr	r3, [pc, #144]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	4921      	ldr	r1, [pc, #132]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800558e:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	491a      	ldr	r1, [pc, #104]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80055ac:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	4912      	ldr	r1, [pc, #72]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	490b      	ldr	r1, [pc, #44]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80055e8:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f4:	4903      	ldr	r1, [pc, #12]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3748      	adds	r7, #72	@ 0x48
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40021000 	.word	0x40021000

08005608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e09d      	b.n	8005756 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800562a:	d009      	beq.n	8005640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
 8005632:	e005      	b.n	8005640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fabc 	bl	8001bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005676:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005680:	d902      	bls.n	8005688 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e002      	b.n	800568e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800568c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005696:	d007      	beq.n	80056a8 <HAL_SPI_Init+0xa0>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ea:	ea42 0103 	orr.w	r1, r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f003 0204 	and.w	r2, r3, #4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005724:	ea42 0103 	orr.w	r1, r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e049      	b.n	8005804 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fc fa6b 	bl	8001c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f001 f851 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e04a      	b.n	80058ba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a21      	ldr	r2, [pc, #132]	@ (80058c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584e:	d013      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1d      	ldr	r2, [pc, #116]	@ (80058cc <HAL_TIM_Base_Start_IT+0xc0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1c      	ldr	r2, [pc, #112]	@ (80058d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1a      	ldr	r2, [pc, #104]	@ (80058d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a19      	ldr	r2, [pc, #100]	@ (80058d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d115      	bne.n	80058a4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	4b17      	ldr	r3, [pc, #92]	@ (80058dc <HAL_TIM_Base_Start_IT+0xd0>)
 8005880:	4013      	ands	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d015      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0xaa>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005890:	d011      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	e008      	b.n	80058b6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	00010007 	.word	0x00010007

080058e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a1a      	ldr	r2, [r3, #32]
 80058fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10f      	bne.n	8005928 <HAL_TIM_Base_Stop_IT+0x48>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d107      	bne.n	8005928 <HAL_TIM_Base_Stop_IT+0x48>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e049      	b.n	80059e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f841 	bl	80059ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 ff61 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <HAL_TIM_PWM_Start+0x24>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	bf14      	ite	ne
 8005a1c:	2301      	movne	r3, #1
 8005a1e:	2300      	moveq	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e03c      	b.n	8005a9e <HAL_TIM_PWM_Start+0x9e>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d109      	bne.n	8005a3e <HAL_TIM_PWM_Start+0x3e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	bf14      	ite	ne
 8005a36:	2301      	movne	r3, #1
 8005a38:	2300      	moveq	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	e02f      	b.n	8005a9e <HAL_TIM_PWM_Start+0x9e>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d109      	bne.n	8005a58 <HAL_TIM_PWM_Start+0x58>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e022      	b.n	8005a9e <HAL_TIM_PWM_Start+0x9e>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	d109      	bne.n	8005a72 <HAL_TIM_PWM_Start+0x72>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	bf14      	ite	ne
 8005a6a:	2301      	movne	r3, #1
 8005a6c:	2300      	moveq	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	e015      	b.n	8005a9e <HAL_TIM_PWM_Start+0x9e>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d109      	bne.n	8005a8c <HAL_TIM_PWM_Start+0x8c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e008      	b.n	8005a9e <HAL_TIM_PWM_Start+0x9e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e097      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xb6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab4:	e023      	b.n	8005afe <HAL_TIM_PWM_Start+0xfe>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0xc6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ac4:	e01b      	b.n	8005afe <HAL_TIM_PWM_Start+0xfe>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0xd6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad4:	e013      	b.n	8005afe <HAL_TIM_PWM_Start+0xfe>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b0c      	cmp	r3, #12
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0xe6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ae4:	e00b      	b.n	8005afe <HAL_TIM_PWM_Start+0xfe>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start+0xf6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af4:	e003      	b.n	8005afe <HAL_TIM_PWM_Start+0xfe>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 fbc6 	bl	8007298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a33      	ldr	r2, [pc, #204]	@ (8005be0 <HAL_TIM_PWM_Start+0x1e0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x13e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a32      	ldr	r2, [pc, #200]	@ (8005be4 <HAL_TIM_PWM_Start+0x1e4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x13e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a30      	ldr	r2, [pc, #192]	@ (8005be8 <HAL_TIM_PWM_Start+0x1e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x13e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8005bec <HAL_TIM_PWM_Start+0x1ec>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x13e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2d      	ldr	r2, [pc, #180]	@ (8005bf0 <HAL_TIM_PWM_Start+0x1f0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_Start+0x142>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_PWM_Start+0x144>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a20      	ldr	r2, [pc, #128]	@ (8005be0 <HAL_TIM_PWM_Start+0x1e0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x194>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x194>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a20      	ldr	r2, [pc, #128]	@ (8005bf4 <HAL_TIM_PWM_Start+0x1f4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x194>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf8 <HAL_TIM_PWM_Start+0x1f8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x194>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a17      	ldr	r2, [pc, #92]	@ (8005be4 <HAL_TIM_PWM_Start+0x1e4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x194>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	@ (8005be8 <HAL_TIM_PWM_Start+0x1e8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d115      	bne.n	8005bc0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	4b18      	ldr	r3, [pc, #96]	@ (8005bfc <HAL_TIM_PWM_Start+0x1fc>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b06      	cmp	r3, #6
 8005ba4:	d015      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x1d2>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bac:	d011      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	e008      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e000      	b.n	8005bd4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400
 8005bf0:	40014800 	.word	0x40014800
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	00010007 	.word	0x00010007

08005c00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fb40 	bl	8007298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d18 <HAL_TIM_PWM_Stop+0x118>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_TIM_PWM_Stop+0x4a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3d      	ldr	r2, [pc, #244]	@ (8005d1c <HAL_TIM_PWM_Stop+0x11c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00e      	beq.n	8005c4a <HAL_TIM_PWM_Stop+0x4a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3b      	ldr	r2, [pc, #236]	@ (8005d20 <HAL_TIM_PWM_Stop+0x120>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_TIM_PWM_Stop+0x4a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8005d24 <HAL_TIM_PWM_Stop+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_TIM_PWM_Stop+0x4a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a38      	ldr	r2, [pc, #224]	@ (8005d28 <HAL_TIM_PWM_Stop+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d101      	bne.n	8005c4e <HAL_TIM_PWM_Stop+0x4e>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <HAL_TIM_PWM_Stop+0x50>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10f      	bne.n	8005c84 <HAL_TIM_PWM_Stop+0x84>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a1a      	ldr	r2, [r3, #32]
 8005c6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d107      	bne.n	8005c84 <HAL_TIM_PWM_Stop+0x84>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10f      	bne.n	8005cb4 <HAL_TIM_PWM_Stop+0xb4>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d107      	bne.n	8005cb4 <HAL_TIM_PWM_Stop+0xb4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_TIM_PWM_Stop+0xc4>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cc2:	e023      	b.n	8005d0c <HAL_TIM_PWM_Stop+0x10c>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d104      	bne.n	8005cd4 <HAL_TIM_PWM_Stop+0xd4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd2:	e01b      	b.n	8005d0c <HAL_TIM_PWM_Stop+0x10c>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d104      	bne.n	8005ce4 <HAL_TIM_PWM_Stop+0xe4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce2:	e013      	b.n	8005d0c <HAL_TIM_PWM_Stop+0x10c>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d104      	bne.n	8005cf4 <HAL_TIM_PWM_Stop+0xf4>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cf2:	e00b      	b.n	8005d0c <HAL_TIM_PWM_Stop+0x10c>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d104      	bne.n	8005d04 <HAL_TIM_PWM_Stop+0x104>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d02:	e003      	b.n	8005d0c <HAL_TIM_PWM_Stop+0x10c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800

08005d2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e049      	b.n	8005dd2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f841 	bl	8005dda <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 fd6a 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_IC_Start_IT+0x1e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e023      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x66>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_IC_Start_IT+0x2e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e01b      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x66>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_IC_Start_IT+0x3e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e013      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x66>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_IC_Start_IT+0x4e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	e00b      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x66>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_IC_Start_IT+0x5e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e003      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x66>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <HAL_TIM_IC_Start_IT+0x78>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e013      	b.n	8005e90 <HAL_TIM_IC_Start_IT+0xa0>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d104      	bne.n	8005e78 <HAL_TIM_IC_Start_IT+0x88>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e00b      	b.n	8005e90 <HAL_TIM_IC_Start_IT+0xa0>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d104      	bne.n	8005e88 <HAL_TIM_IC_Start_IT+0x98>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	e003      	b.n	8005e90 <HAL_TIM_IC_Start_IT+0xa0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d102      	bne.n	8005e9e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e98:	7b7b      	ldrb	r3, [r7, #13]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d001      	beq.n	8005ea2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e0d8      	b.n	8006054 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_IC_Start_IT+0xc2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb0:	e023      	b.n	8005efa <HAL_TIM_IC_Start_IT+0x10a>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_IC_Start_IT+0xd2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec0:	e01b      	b.n	8005efa <HAL_TIM_IC_Start_IT+0x10a>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_IC_Start_IT+0xe2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed0:	e013      	b.n	8005efa <HAL_TIM_IC_Start_IT+0x10a>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b0c      	cmp	r3, #12
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_IC_Start_IT+0xf2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ee0:	e00b      	b.n	8005efa <HAL_TIM_IC_Start_IT+0x10a>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_IC_Start_IT+0x102>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef0:	e003      	b.n	8005efa <HAL_TIM_IC_Start_IT+0x10a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_IC_Start_IT+0x11a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f08:	e013      	b.n	8005f32 <HAL_TIM_IC_Start_IT+0x142>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_IC_Start_IT+0x12a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f18:	e00b      	b.n	8005f32 <HAL_TIM_IC_Start_IT+0x142>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_IC_Start_IT+0x13a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f28:	e003      	b.n	8005f32 <HAL_TIM_IC_Start_IT+0x142>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d841      	bhi.n	8005fbc <HAL_TIM_IC_Start_IT+0x1cc>
 8005f38:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <HAL_TIM_IC_Start_IT+0x150>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f75 	.word	0x08005f75
 8005f44:	08005fbd 	.word	0x08005fbd
 8005f48:	08005fbd 	.word	0x08005fbd
 8005f4c:	08005fbd 	.word	0x08005fbd
 8005f50:	08005f87 	.word	0x08005f87
 8005f54:	08005fbd 	.word	0x08005fbd
 8005f58:	08005fbd 	.word	0x08005fbd
 8005f5c:	08005fbd 	.word	0x08005fbd
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005fbd 	.word	0x08005fbd
 8005f70:	08005fab 	.word	0x08005fab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0202 	orr.w	r2, r2, #2
 8005f82:	60da      	str	r2, [r3, #12]
      break;
 8005f84:	e01d      	b.n	8005fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0204 	orr.w	r2, r2, #4
 8005f94:	60da      	str	r2, [r3, #12]
      break;
 8005f96:	e014      	b.n	8005fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0208 	orr.w	r2, r2, #8
 8005fa6:	60da      	str	r2, [r3, #12]
      break;
 8005fa8:	e00b      	b.n	8005fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0210 	orr.w	r2, r2, #16
 8005fb8:	60da      	str	r2, [r3, #12]
      break;
 8005fba:	e002      	b.n	8005fc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d144      	bne.n	8006052 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 f961 	bl	8007298 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a20      	ldr	r2, [pc, #128]	@ (800605c <HAL_TIM_IC_Start_IT+0x26c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d018      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x222>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe8:	d013      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x222>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1c      	ldr	r2, [pc, #112]	@ (8006060 <HAL_TIM_IC_Start_IT+0x270>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x222>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8006064 <HAL_TIM_IC_Start_IT+0x274>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x222>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a19      	ldr	r2, [pc, #100]	@ (8006068 <HAL_TIM_IC_Start_IT+0x278>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIM_IC_Start_IT+0x222>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a17      	ldr	r2, [pc, #92]	@ (800606c <HAL_TIM_IC_Start_IT+0x27c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d115      	bne.n	800603e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <HAL_TIM_IC_Start_IT+0x280>)
 800601a:	4013      	ands	r3, r2
 800601c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d015      	beq.n	8006050 <HAL_TIM_IC_Start_IT+0x260>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602a:	d011      	beq.n	8006050 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	e008      	b.n	8006050 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e000      	b.n	8006052 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006050:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40013400 	.word	0x40013400
 800606c:	40014000 	.word	0x40014000
 8006070:	00010007 	.word	0x00010007

08006074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d020      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01b      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0202 	mvn.w	r2, #2
 80060a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fa ffe0 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80060c4:	e005      	b.n	80060d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fb9e 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fba5 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d020      	beq.n	8006124 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01b      	beq.n	8006124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0204 	mvn.w	r2, #4
 80060f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fa ffba 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8006110:	e005      	b.n	800611e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fb78 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb7f 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d020      	beq.n	8006170 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0208 	mvn.w	r2, #8
 8006140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2204      	movs	r2, #4
 8006146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fa ff94 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 800615c:	e005      	b.n	800616a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fb52 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fb59 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	2b00      	cmp	r3, #0
 8006178:	d020      	beq.n	80061bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01b      	beq.n	80061bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0210 	mvn.w	r2, #16
 800618c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2208      	movs	r2, #8
 8006192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fa ff6e 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fb2c 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fb33 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0201 	mvn.w	r2, #1
 80061d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fb0a 	bl	80067f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fa8a 	bl	8007718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 fa82 	bl	800772c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 faf2 	bl	8006830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0220 	mvn.w	r2, #32
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fa4a 	bl	8007704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006292:	2302      	movs	r3, #2
 8006294:	e088      	b.n	80063a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80062b4:	f000 fe38 	bl	8006f28 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 020c 	bic.w	r2, r2, #12
 80062c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6999      	ldr	r1, [r3, #24]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	619a      	str	r2, [r3, #24]
 80062da:	e060      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d11c      	bne.n	800631c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80062f2:	f000 feb0 	bl	8007056 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006304:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6999      	ldr	r1, [r3, #24]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	619a      	str	r2, [r3, #24]
 800631a:	e040      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b08      	cmp	r3, #8
 8006320:	d11b      	bne.n	800635a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006332:	f000 fefd 	bl	8007130 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 020c 	bic.w	r2, r2, #12
 8006344:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	61da      	str	r2, [r3, #28]
 8006358:	e021      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d11c      	bne.n	800639a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006370:	f000 ff1a 	bl	80071a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006382:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69d9      	ldr	r1, [r3, #28]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	021a      	lsls	r2, r3, #8
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	e001      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0ff      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b14      	cmp	r3, #20
 80063da:	f200 80f0 	bhi.w	80065be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006439 	.word	0x08006439
 80063e8:	080065bf 	.word	0x080065bf
 80063ec:	080065bf 	.word	0x080065bf
 80063f0:	080065bf 	.word	0x080065bf
 80063f4:	08006479 	.word	0x08006479
 80063f8:	080065bf 	.word	0x080065bf
 80063fc:	080065bf 	.word	0x080065bf
 8006400:	080065bf 	.word	0x080065bf
 8006404:	080064bb 	.word	0x080064bb
 8006408:	080065bf 	.word	0x080065bf
 800640c:	080065bf 	.word	0x080065bf
 8006410:	080065bf 	.word	0x080065bf
 8006414:	080064fb 	.word	0x080064fb
 8006418:	080065bf 	.word	0x080065bf
 800641c:	080065bf 	.word	0x080065bf
 8006420:	080065bf 	.word	0x080065bf
 8006424:	0800653d 	.word	0x0800653d
 8006428:	080065bf 	.word	0x080065bf
 800642c:	080065bf 	.word	0x080065bf
 8006430:	080065bf 	.word	0x080065bf
 8006434:	0800657d 	.word	0x0800657d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fa9c 	bl	800697c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0208 	orr.w	r2, r2, #8
 8006452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0204 	bic.w	r2, r2, #4
 8006462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6999      	ldr	r1, [r3, #24]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	619a      	str	r2, [r3, #24]
      break;
 8006476:	e0a5      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fb0c 	bl	8006a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	021a      	lsls	r2, r3, #8
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	619a      	str	r2, [r3, #24]
      break;
 80064b8:	e084      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fb75 	bl	8006bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0208 	orr.w	r2, r2, #8
 80064d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0204 	bic.w	r2, r2, #4
 80064e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	61da      	str	r2, [r3, #28]
      break;
 80064f8:	e064      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fbdd 	bl	8006cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	021a      	lsls	r2, r3, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	61da      	str	r2, [r3, #28]
      break;
 800653a:	e043      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc26 	bl	8006d94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0208 	orr.w	r2, r2, #8
 8006556:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800657a:	e023      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fc6a 	bl	8006e5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006596:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	021a      	lsls	r2, r3, #8
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
      break;
 80065c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_TIM_ConfigClockSource+0x1c>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e0b6      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x18a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006612:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd8>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x170>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x176>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006648:	2b70      	cmp	r3, #112	@ 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xaa>
 800664c:	2b70      	cmp	r3, #112	@ 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006650:	2b60      	cmp	r3, #96	@ 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11e>
 8006654:	2b60      	cmp	r3, #96	@ 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b50      	cmp	r3, #80	@ 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfe>
 800665c:	2b50      	cmp	r3, #80	@ 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13e>
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006668:	2b30      	cmp	r3, #48	@ 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 800666c:	2b30      	cmp	r3, #48	@ 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	f000 fde1 	bl	8007258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	f000 fdca 	bl	8007258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fc88 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	@ 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fd97 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fce4 	bl	80070d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	@ 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fd87 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fc68 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	@ 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fd77 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 fd6e 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b0c      	cmp	r3, #12
 800677e:	d831      	bhi.n	80067e4 <HAL_TIM_ReadCapturedValue+0x78>
 8006780:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067bd 	.word	0x080067bd
 800678c:	080067e5 	.word	0x080067e5
 8006790:	080067e5 	.word	0x080067e5
 8006794:	080067e5 	.word	0x080067e5
 8006798:	080067c7 	.word	0x080067c7
 800679c:	080067e5 	.word	0x080067e5
 80067a0:	080067e5 	.word	0x080067e5
 80067a4:	080067e5 	.word	0x080067e5
 80067a8:	080067d1 	.word	0x080067d1
 80067ac:	080067e5 	.word	0x080067e5
 80067b0:	080067e5 	.word	0x080067e5
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	080067db 	.word	0x080067db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c2:	60fb      	str	r3, [r7, #12]

      break;
 80067c4:	e00f      	b.n	80067e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	60fb      	str	r3, [r7, #12]

      break;
 80067ce:	e00a      	b.n	80067e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d6:	60fb      	str	r3, [r7, #12]

      break;
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e0:	60fb      	str	r3, [r7, #12]

      break;
 80067e2:	e000      	b.n	80067e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80067e4:	bf00      	nop
  }

  return tmpreg;
 80067e6:	68fb      	ldr	r3, [r7, #12]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a42      	ldr	r2, [pc, #264]	@ (8006960 <TIM_Base_SetConfig+0x11c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00f      	beq.n	800687c <TIM_Base_SetConfig+0x38>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006862:	d00b      	beq.n	800687c <TIM_Base_SetConfig+0x38>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a3f      	ldr	r2, [pc, #252]	@ (8006964 <TIM_Base_SetConfig+0x120>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d007      	beq.n	800687c <TIM_Base_SetConfig+0x38>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a3e      	ldr	r2, [pc, #248]	@ (8006968 <TIM_Base_SetConfig+0x124>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_Base_SetConfig+0x38>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a3d      	ldr	r2, [pc, #244]	@ (800696c <TIM_Base_SetConfig+0x128>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d108      	bne.n	800688e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a33      	ldr	r2, [pc, #204]	@ (8006960 <TIM_Base_SetConfig+0x11c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01b      	beq.n	80068ce <TIM_Base_SetConfig+0x8a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689c:	d017      	beq.n	80068ce <TIM_Base_SetConfig+0x8a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a30      	ldr	r2, [pc, #192]	@ (8006964 <TIM_Base_SetConfig+0x120>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <TIM_Base_SetConfig+0x8a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006968 <TIM_Base_SetConfig+0x124>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00f      	beq.n	80068ce <TIM_Base_SetConfig+0x8a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2e      	ldr	r2, [pc, #184]	@ (800696c <TIM_Base_SetConfig+0x128>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_Base_SetConfig+0x8a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006970 <TIM_Base_SetConfig+0x12c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <TIM_Base_SetConfig+0x8a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <TIM_Base_SetConfig+0x130>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_Base_SetConfig+0x8a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006978 <TIM_Base_SetConfig+0x134>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d108      	bne.n	80068e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a16      	ldr	r2, [pc, #88]	@ (8006960 <TIM_Base_SetConfig+0x11c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00f      	beq.n	800692c <TIM_Base_SetConfig+0xe8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a17      	ldr	r2, [pc, #92]	@ (800696c <TIM_Base_SetConfig+0x128>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00b      	beq.n	800692c <TIM_Base_SetConfig+0xe8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a16      	ldr	r2, [pc, #88]	@ (8006970 <TIM_Base_SetConfig+0x12c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_Base_SetConfig+0xe8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a15      	ldr	r2, [pc, #84]	@ (8006974 <TIM_Base_SetConfig+0x130>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_Base_SetConfig+0xe8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a14      	ldr	r2, [pc, #80]	@ (8006978 <TIM_Base_SetConfig+0x134>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d103      	bne.n	8006934 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b01      	cmp	r3, #1
 8006944:	d105      	bne.n	8006952 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]
  }
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40012c00 	.word	0x40012c00
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40013400 	.word	0x40013400
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800

0800697c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	f023 0201 	bic.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 0302 	bic.w	r3, r3, #2
 80069c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a88 <TIM_OC1_SetConfig+0x10c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00f      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a2b      	ldr	r2, [pc, #172]	@ (8006a8c <TIM_OC1_SetConfig+0x110>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a90 <TIM_OC1_SetConfig+0x114>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a29      	ldr	r2, [pc, #164]	@ (8006a94 <TIM_OC1_SetConfig+0x118>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC1_SetConfig+0x80>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a28      	ldr	r2, [pc, #160]	@ (8006a98 <TIM_OC1_SetConfig+0x11c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10c      	bne.n	8006a16 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0308 	bic.w	r3, r3, #8
 8006a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0304 	bic.w	r3, r3, #4
 8006a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a1b      	ldr	r2, [pc, #108]	@ (8006a88 <TIM_OC1_SetConfig+0x10c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00f      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1a      	ldr	r2, [pc, #104]	@ (8006a8c <TIM_OC1_SetConfig+0x110>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a19      	ldr	r2, [pc, #100]	@ (8006a90 <TIM_OC1_SetConfig+0x114>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a18      	ldr	r2, [pc, #96]	@ (8006a94 <TIM_OC1_SetConfig+0x118>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_OC1_SetConfig+0xc2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a17      	ldr	r2, [pc, #92]	@ (8006a98 <TIM_OC1_SetConfig+0x11c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d111      	bne.n	8006a62 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	621a      	str	r2, [r3, #32]
}
 8006a7c:	bf00      	nop
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f023 0210 	bic.w	r2, r3, #16
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0320 	bic.w	r3, r3, #32
 8006aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a28      	ldr	r2, [pc, #160]	@ (8006b9c <TIM_OC2_SetConfig+0x100>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0x6c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a27      	ldr	r2, [pc, #156]	@ (8006ba0 <TIM_OC2_SetConfig+0x104>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10d      	bne.n	8006b24 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <TIM_OC2_SetConfig+0x100>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00f      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba0 <TIM_OC2_SetConfig+0x104>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00b      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba4 <TIM_OC2_SetConfig+0x108>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d007      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba8 <TIM_OC2_SetConfig+0x10c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC2_SetConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a19      	ldr	r2, [pc, #100]	@ (8006bac <TIM_OC2_SetConfig+0x110>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d113      	bne.n	8006b74 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b52:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b5a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800

08006bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a27      	ldr	r2, [pc, #156]	@ (8006cac <TIM_OC3_SetConfig+0xfc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_OC3_SetConfig+0x6a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a26      	ldr	r2, [pc, #152]	@ (8006cb0 <TIM_OC3_SetConfig+0x100>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10d      	bne.n	8006c36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c34:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1c      	ldr	r2, [pc, #112]	@ (8006cac <TIM_OC3_SetConfig+0xfc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb0 <TIM_OC3_SetConfig+0x100>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb4 <TIM_OC3_SetConfig+0x104>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a19      	ldr	r2, [pc, #100]	@ (8006cb8 <TIM_OC3_SetConfig+0x108>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_OC3_SetConfig+0xae>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a18      	ldr	r2, [pc, #96]	@ (8006cbc <TIM_OC3_SetConfig+0x10c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d113      	bne.n	8006c86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40013400 	.word	0x40013400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800

08006cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a18      	ldr	r2, [pc, #96]	@ (8006d80 <TIM_OC4_SetConfig+0xc0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00f      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a17      	ldr	r2, [pc, #92]	@ (8006d84 <TIM_OC4_SetConfig+0xc4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a16      	ldr	r2, [pc, #88]	@ (8006d88 <TIM_OC4_SetConfig+0xc8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <TIM_OC4_SetConfig+0xcc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC4_SetConfig+0x84>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a14      	ldr	r2, [pc, #80]	@ (8006d90 <TIM_OC4_SetConfig+0xd0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d109      	bne.n	8006d58 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	019b      	lsls	r3, r3, #6
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40014000 	.word	0x40014000
 8006d8c:	40014400 	.word	0x40014400
 8006d90:	40014800 	.word	0x40014800

08006d94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a17      	ldr	r2, [pc, #92]	@ (8006e48 <TIM_OC5_SetConfig+0xb4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00f      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a16      	ldr	r2, [pc, #88]	@ (8006e4c <TIM_OC5_SetConfig+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a15      	ldr	r2, [pc, #84]	@ (8006e50 <TIM_OC5_SetConfig+0xbc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d007      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a14      	ldr	r2, [pc, #80]	@ (8006e54 <TIM_OC5_SetConfig+0xc0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d003      	beq.n	8006e0e <TIM_OC5_SetConfig+0x7a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a13      	ldr	r2, [pc, #76]	@ (8006e58 <TIM_OC5_SetConfig+0xc4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d109      	bne.n	8006e22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800

08006e5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	051b      	lsls	r3, r3, #20
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	@ (8006f14 <TIM_OC6_SetConfig+0xb8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a17      	ldr	r2, [pc, #92]	@ (8006f18 <TIM_OC6_SetConfig+0xbc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <TIM_OC6_SetConfig+0xc0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a15      	ldr	r2, [pc, #84]	@ (8006f20 <TIM_OC6_SetConfig+0xc4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x7c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a14      	ldr	r2, [pc, #80]	@ (8006f24 <TIM_OC6_SetConfig+0xc8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d109      	bne.n	8006eec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800

08006f28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f023 0201 	bic.w	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4a24      	ldr	r2, [pc, #144]	@ (8006fe4 <TIM_TI1_SetConfig+0xbc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <TIM_TI1_SetConfig+0x56>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5c:	d00f      	beq.n	8006f7e <TIM_TI1_SetConfig+0x56>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a21      	ldr	r2, [pc, #132]	@ (8006fe8 <TIM_TI1_SetConfig+0xc0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_TI1_SetConfig+0x56>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a20      	ldr	r2, [pc, #128]	@ (8006fec <TIM_TI1_SetConfig+0xc4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_TI1_SetConfig+0x56>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff0 <TIM_TI1_SetConfig+0xc8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_TI1_SetConfig+0x56>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff4 <TIM_TI1_SetConfig+0xcc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <TIM_TI1_SetConfig+0x5a>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <TIM_TI1_SetConfig+0x5c>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 0303 	bic.w	r3, r3, #3
 8006f8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e003      	b.n	8006fa2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f043 0301 	orr.w	r3, r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f023 030a 	bic.w	r3, r3, #10
 8006fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f003 030a 	and.w	r3, r3, #10
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	40000800 	.word	0x40000800
 8006ff0:	40013400 	.word	0x40013400
 8006ff4:	40014000 	.word	0x40014000

08006ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 030a 	bic.w	r3, r3, #10
 8007034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007056:	b480      	push	{r7}
 8007058:	b087      	sub	sp, #28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f023 0210 	bic.w	r2, r3, #16
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	031b      	lsls	r3, r3, #12
 800709a:	b29b      	uxth	r3, r3
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	621a      	str	r2, [r3, #32]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	031b      	lsls	r3, r3, #12
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800710c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	621a      	str	r2, [r3, #32]
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800716c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	b2db      	uxtb	r3, r3
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007180:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	621a      	str	r2, [r3, #32]
}
 800719c:	bf00      	nop
 800719e:	371c      	adds	r7, #28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	031b      	lsls	r3, r3, #12
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80071fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	031b      	lsls	r3, r3, #12
 8007200:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	f043 0307 	orr.w	r3, r3, #7
 8007244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	021a      	lsls	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	431a      	orrs	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2201      	movs	r2, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	43db      	mvns	r3, r3
 80072ba:	401a      	ands	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	fa01 f303 	lsl.w	r3, r1, r3
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <HAL_TIMEx_PWMN_Start+0x24>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	bf14      	ite	ne
 8007300:	2301      	movne	r3, #1
 8007302:	2300      	moveq	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	e022      	b.n	800734e <HAL_TIMEx_PWMN_Start+0x6a>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b04      	cmp	r3, #4
 800730c:	d109      	bne.n	8007322 <HAL_TIMEx_PWMN_Start+0x3e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b01      	cmp	r3, #1
 8007318:	bf14      	ite	ne
 800731a:	2301      	movne	r3, #1
 800731c:	2300      	moveq	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	e015      	b.n	800734e <HAL_TIMEx_PWMN_Start+0x6a>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b08      	cmp	r3, #8
 8007326:	d109      	bne.n	800733c <HAL_TIMEx_PWMN_Start+0x58>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b01      	cmp	r3, #1
 8007332:	bf14      	ite	ne
 8007334:	2301      	movne	r3, #1
 8007336:	2300      	moveq	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	e008      	b.n	800734e <HAL_TIMEx_PWMN_Start+0x6a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b01      	cmp	r3, #1
 8007346:	bf14      	ite	ne
 8007348:	2301      	movne	r3, #1
 800734a:	2300      	moveq	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e069      	b.n	800742a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <HAL_TIMEx_PWMN_Start+0x82>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007364:	e013      	b.n	800738e <HAL_TIMEx_PWMN_Start+0xaa>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b04      	cmp	r3, #4
 800736a:	d104      	bne.n	8007376 <HAL_TIMEx_PWMN_Start+0x92>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007374:	e00b      	b.n	800738e <HAL_TIMEx_PWMN_Start+0xaa>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b08      	cmp	r3, #8
 800737a:	d104      	bne.n	8007386 <HAL_TIMEx_PWMN_Start+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007384:	e003      	b.n	800738e <HAL_TIMEx_PWMN_Start+0xaa>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2202      	movs	r2, #2
 800738a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2204      	movs	r2, #4
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f9d2 	bl	8007740 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a20      	ldr	r2, [pc, #128]	@ (8007434 <HAL_TIMEx_PWMN_Start+0x150>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d018      	beq.n	80073e8 <HAL_TIMEx_PWMN_Start+0x104>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073be:	d013      	beq.n	80073e8 <HAL_TIMEx_PWMN_Start+0x104>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007438 <HAL_TIMEx_PWMN_Start+0x154>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00e      	beq.n	80073e8 <HAL_TIMEx_PWMN_Start+0x104>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1b      	ldr	r2, [pc, #108]	@ (800743c <HAL_TIMEx_PWMN_Start+0x158>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_TIMEx_PWMN_Start+0x104>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a19      	ldr	r2, [pc, #100]	@ (8007440 <HAL_TIMEx_PWMN_Start+0x15c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_TIMEx_PWMN_Start+0x104>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a18      	ldr	r2, [pc, #96]	@ (8007444 <HAL_TIMEx_PWMN_Start+0x160>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d115      	bne.n	8007414 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	4b16      	ldr	r3, [pc, #88]	@ (8007448 <HAL_TIMEx_PWMN_Start+0x164>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b06      	cmp	r3, #6
 80073f8:	d015      	beq.n	8007426 <HAL_TIMEx_PWMN_Start+0x142>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007400:	d011      	beq.n	8007426 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0201 	orr.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007412:	e008      	b.n	8007426 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e000      	b.n	8007428 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40000400 	.word	0x40000400
 800743c:	40000800 	.word	0x40000800
 8007440:	40013400 	.word	0x40013400
 8007444:	40014000 	.word	0x40014000
 8007448:	00010007 	.word	0x00010007

0800744c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2200      	movs	r2, #0
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f96e 	bl	8007740 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6a1a      	ldr	r2, [r3, #32]
 800746a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10f      	bne.n	8007494 <HAL_TIMEx_PWMN_Stop+0x48>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6a1a      	ldr	r2, [r3, #32]
 800747a:	f240 4344 	movw	r3, #1092	@ 0x444
 800747e:	4013      	ands	r3, r2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d107      	bne.n	8007494 <HAL_TIMEx_PWMN_Stop+0x48>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007492:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6a1a      	ldr	r2, [r3, #32]
 800749a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800749e:	4013      	ands	r3, r2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10f      	bne.n	80074c4 <HAL_TIMEx_PWMN_Stop+0x78>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d107      	bne.n	80074c4 <HAL_TIMEx_PWMN_Stop+0x78>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0201 	bic.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <HAL_TIMEx_PWMN_Stop+0x88>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074d2:	e013      	b.n	80074fc <HAL_TIMEx_PWMN_Stop+0xb0>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d104      	bne.n	80074e4 <HAL_TIMEx_PWMN_Stop+0x98>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074e2:	e00b      	b.n	80074fc <HAL_TIMEx_PWMN_Stop+0xb0>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b08      	cmp	r3, #8
 80074e8:	d104      	bne.n	80074f4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074f2:	e003      	b.n	80074fc <HAL_TIMEx_PWMN_Stop+0xb0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800751c:	2302      	movs	r3, #2
 800751e:	e063      	b.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a2b      	ldr	r2, [pc, #172]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a2a      	ldr	r2, [pc, #168]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d108      	bne.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800755a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800756c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1b      	ldr	r2, [pc, #108]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d018      	beq.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007592:	d013      	beq.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a18      	ldr	r2, [pc, #96]	@ (80075fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00e      	beq.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a17      	ldr	r2, [pc, #92]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d009      	beq.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a12      	ldr	r2, [pc, #72]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a13      	ldr	r2, [pc, #76]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d10c      	bne.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40013400 	.word	0x40013400
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40014000 	.word	0x40014000

08007608 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007620:	2302      	movs	r3, #2
 8007622:	e065      	b.n	80076f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a16      	ldr	r2, [pc, #88]	@ (80076fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a14      	ldr	r2, [pc, #80]	@ (8007700 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d115      	bne.n	80076de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	051b      	lsls	r3, r3, #20
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40013400 	.word	0x40013400

08007704 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	2204      	movs	r2, #4
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a1a      	ldr	r2, [r3, #32]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	43db      	mvns	r3, r3
 8007762:	401a      	ands	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a1a      	ldr	r2, [r3, #32]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	fa01 f303 	lsl.w	r3, r1, r3
 8007778:	431a      	orrs	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e040      	b.n	800781e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d106      	bne.n	80077b2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7fa fb9d 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2224      	movs	r2, #36	@ 0x24
 80077b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fe55 	bl	8008480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fc7e 	bl	80080d8 <UART_SetConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e01b      	b.n	800781e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007804:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0201 	orr.w	r2, r2, #1
 8007814:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fed4 	bl	80085c4 <UART_CheckIdleState>
 800781c:	4603      	mov	r3, r0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e02f      	b.n	8007898 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2224      	movs	r2, #36	@ 0x24
 800783c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fa fbe0 	bl	800202c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	@ 0x28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d165      	bne.n	8007982 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <HAL_UART_Transmit_DMA+0x22>
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e05e      	b.n	8007984 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	88fa      	ldrh	r2, [r7, #6]
 80078d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	88fa      	ldrh	r2, [r7, #6]
 80078d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2221      	movs	r2, #33	@ 0x21
 80078e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d027      	beq.n	8007942 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f6:	4a25      	ldr	r2, [pc, #148]	@ (800798c <HAL_UART_Transmit_DMA+0xec>)
 80078f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fe:	4a24      	ldr	r2, [pc, #144]	@ (8007990 <HAL_UART_Transmit_DMA+0xf0>)
 8007900:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007906:	4a23      	ldr	r2, [pc, #140]	@ (8007994 <HAL_UART_Transmit_DMA+0xf4>)
 8007908:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790e:	2200      	movs	r2, #0
 8007910:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800791a:	4619      	mov	r1, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3328      	adds	r3, #40	@ 0x28
 8007922:	461a      	mov	r2, r3
 8007924:	88fb      	ldrh	r3, [r7, #6]
 8007926:	f7fb fccb 	bl	80032c0 <HAL_DMA_Start_IT>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2210      	movs	r2, #16
 8007934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2220      	movs	r2, #32
 800793c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e020      	b.n	8007984 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2240      	movs	r2, #64	@ 0x40
 8007948:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	613b      	str	r3, [r7, #16]
   return(result);
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3308      	adds	r3, #8
 8007968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800796a:	623a      	str	r2, [r7, #32]
 800796c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	69f9      	ldr	r1, [r7, #28]
 8007970:	6a3a      	ldr	r2, [r7, #32]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	61bb      	str	r3, [r7, #24]
   return(result);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	e000      	b.n	8007984 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007982:	2302      	movs	r3, #2
  }
}
 8007984:	4618      	mov	r0, r3
 8007986:	3728      	adds	r7, #40	@ 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	08008a45 	.word	0x08008a45
 8007990:	08008ad9 	.word	0x08008ad9
 8007994:	08008c59 	.word	0x08008c59

08007998 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b090      	sub	sp, #64	@ 0x40
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ac:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b8:	2b80      	cmp	r3, #128	@ 0x80
 80079ba:	d139      	bne.n	8007a30 <HAL_UART_DMAStop+0x98>
 80079bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079be:	2b21      	cmp	r3, #33	@ 0x21
 80079c0:	d136      	bne.n	8007a30 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e5      	bne.n	80079c2 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d015      	beq.n	8007a2a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fb fcbb 	bl	800337e <HAL_DMA_Abort>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00d      	beq.n	8007a2a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fb fdd2 	bl	80035bc <HAL_DMA_GetError>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d105      	bne.n	8007a2a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2210      	movs	r2, #16
 8007a22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e044      	b.n	8007ab4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 ff80 	bl	8008930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3a:	2b40      	cmp	r3, #64	@ 0x40
 8007a3c:	d139      	bne.n	8007ab2 <HAL_UART_DMAStop+0x11a>
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a40:	2b22      	cmp	r3, #34	@ 0x22
 8007a42:	d136      	bne.n	8007ab2 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3308      	adds	r3, #8
 8007a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3308      	adds	r3, #8
 8007a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a64:	61ba      	str	r2, [r7, #24]
 8007a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6979      	ldr	r1, [r7, #20]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	613b      	str	r3, [r7, #16]
   return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e5      	bne.n	8007a44 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d015      	beq.n	8007aac <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fb fc7a 	bl	800337e <HAL_DMA_Abort>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00d      	beq.n	8007aac <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fb fd91 	bl	80035bc <HAL_DMA_GetError>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d105      	bne.n	8007aac <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2210      	movs	r2, #16
 8007aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e003      	b.n	8007ab4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 ff65 	bl	800897c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3740      	adds	r7, #64	@ 0x40
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b0ba      	sub	sp, #232	@ 0xe8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ae2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ae6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007aea:	4013      	ands	r3, r2
 8007aec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d115      	bne.n	8007b24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00f      	beq.n	8007b24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 82ab 	beq.w	8008070 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
      }
      return;
 8007b22:	e2a5      	b.n	8008070 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 8117 	beq.w	8007d5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b3e:	4b85      	ldr	r3, [pc, #532]	@ (8007d54 <HAL_UART_IRQHandler+0x298>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 810a 	beq.w	8007d5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d011      	beq.n	8007b78 <HAL_UART_IRQHandler+0xbc>
 8007b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2201      	movs	r2, #1
 8007b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b6e:	f043 0201 	orr.w	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d011      	beq.n	8007ba8 <HAL_UART_IRQHandler+0xec>
 8007b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2202      	movs	r2, #2
 8007b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b9e:	f043 0204 	orr.w	r2, r3, #4
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d011      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x11c>
 8007bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bce:	f043 0202 	orr.w	r2, r3, #2
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d017      	beq.n	8007c14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d105      	bne.n	8007bfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2208      	movs	r2, #8
 8007c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c0a:	f043 0208 	orr.w	r2, r3, #8
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d012      	beq.n	8007c46 <HAL_UART_IRQHandler+0x18a>
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00c      	beq.n	8007c46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8211 	beq.w	8008074 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8e:	2b40      	cmp	r3, #64	@ 0x40
 8007c90:	d005      	beq.n	8007c9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d04f      	beq.n	8007d3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fe6c 	bl	800897c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cae:	2b40      	cmp	r3, #64	@ 0x40
 8007cb0:	d141      	bne.n	8007d36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d9      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d0a:	4a13      	ldr	r2, [pc, #76]	@ (8007d58 <HAL_UART_IRQHandler+0x29c>)
 8007d0c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fb fb71 	bl	80033fa <HAL_DMA_Abort_IT>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d017      	beq.n	8007d4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2c:	e00f      	b.n	8007d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f9c8 	bl	80080c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d34:	e00b      	b.n	8007d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f9c4 	bl	80080c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	e007      	b.n	8007d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9c0 	bl	80080c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007d4c:	e192      	b.n	8008074 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4e:	bf00      	nop
    return;
 8007d50:	e190      	b.n	8008074 <HAL_UART_IRQHandler+0x5b8>
 8007d52:	bf00      	nop
 8007d54:	04000120 	.word	0x04000120
 8007d58:	08008cd7 	.word	0x08008cd7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	f040 814b 	bne.w	8007ffc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6a:	f003 0310 	and.w	r3, r3, #16
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 8144 	beq.w	8007ffc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 813d 	beq.w	8007ffc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2210      	movs	r2, #16
 8007d88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d94:	2b40      	cmp	r3, #64	@ 0x40
 8007d96:	f040 80b5 	bne.w	8007f04 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007da6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8164 	beq.w	8008078 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	f080 815c 	bcs.w	8008078 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	f000 8086 	beq.w	8007ee2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e04:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1da      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e44:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e1      	bne.n	8007e20 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e80:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e3      	bne.n	8007e5c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb2:	f023 0310 	bic.w	r3, r3, #16
 8007eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ec6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007eca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e4      	bne.n	8007ea2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fb fa4e 	bl	800337e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7f9 f9ab 	bl	8001258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f02:	e0b9      	b.n	8008078 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80ab 	beq.w	800807c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80a6 	beq.w	800807c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e4      	bne.n	8007f30 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	623b      	str	r3, [r7, #32]
   return(result);
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e3      	bne.n	8007f66 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0310 	bic.w	r3, r3, #16
 8007fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd8:	69b9      	ldr	r1, [r7, #24]
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	e841 2300 	strex	r3, r2, [r1]
 8007fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1e4      	bne.n	8007fb2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7f9 f92f 	bl	8001258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ffa:	e03f      	b.n	800807c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <HAL_UART_IRQHandler+0x56a>
 8008008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800800c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800801c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fe99 	bl	8008d56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008024:	e02d      	b.n	8008082 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01c      	beq.n	8008080 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
    }
    return;
 800804e:	e017      	b.n	8008080 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d012      	beq.n	8008082 <HAL_UART_IRQHandler+0x5c6>
 800805c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00c      	beq.n	8008082 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fe4a 	bl	8008d02 <UART_EndTransmit_IT>
    return;
 800806e:	e008      	b.n	8008082 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008070:	bf00      	nop
 8008072:	e006      	b.n	8008082 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008074:	bf00      	nop
 8008076:	e004      	b.n	8008082 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008078:	bf00      	nop
 800807a:	e002      	b.n	8008082 <HAL_UART_IRQHandler+0x5c6>
      return;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008080:	bf00      	nop
  }

}
 8008082:	37e8      	adds	r7, #232	@ 0xe8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008106:	f023 030c 	bic.w	r3, r3, #12
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	6979      	ldr	r1, [r7, #20]
 8008110:	430b      	orrs	r3, r1
 8008112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	430a      	orrs	r2, r1
 800814c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4aa7      	ldr	r2, [pc, #668]	@ (80083f0 <UART_SetConfig+0x318>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d120      	bne.n	800819a <UART_SetConfig+0xc2>
 8008158:	4ba6      	ldr	r3, [pc, #664]	@ (80083f4 <UART_SetConfig+0x31c>)
 800815a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	2b03      	cmp	r3, #3
 8008162:	d817      	bhi.n	8008194 <UART_SetConfig+0xbc>
 8008164:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <UART_SetConfig+0x94>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	0800817d 	.word	0x0800817d
 8008170:	08008189 	.word	0x08008189
 8008174:	0800818f 	.word	0x0800818f
 8008178:	08008183 	.word	0x08008183
 800817c:	2301      	movs	r3, #1
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	e0b5      	b.n	80082ee <UART_SetConfig+0x216>
 8008182:	2302      	movs	r3, #2
 8008184:	77fb      	strb	r3, [r7, #31]
 8008186:	e0b2      	b.n	80082ee <UART_SetConfig+0x216>
 8008188:	2304      	movs	r3, #4
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e0af      	b.n	80082ee <UART_SetConfig+0x216>
 800818e:	2308      	movs	r3, #8
 8008190:	77fb      	strb	r3, [r7, #31]
 8008192:	e0ac      	b.n	80082ee <UART_SetConfig+0x216>
 8008194:	2310      	movs	r3, #16
 8008196:	77fb      	strb	r3, [r7, #31]
 8008198:	e0a9      	b.n	80082ee <UART_SetConfig+0x216>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a96      	ldr	r2, [pc, #600]	@ (80083f8 <UART_SetConfig+0x320>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d124      	bne.n	80081ee <UART_SetConfig+0x116>
 80081a4:	4b93      	ldr	r3, [pc, #588]	@ (80083f4 <UART_SetConfig+0x31c>)
 80081a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081b0:	d011      	beq.n	80081d6 <UART_SetConfig+0xfe>
 80081b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081b6:	d817      	bhi.n	80081e8 <UART_SetConfig+0x110>
 80081b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081bc:	d011      	beq.n	80081e2 <UART_SetConfig+0x10a>
 80081be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081c2:	d811      	bhi.n	80081e8 <UART_SetConfig+0x110>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <UART_SetConfig+0xf8>
 80081c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081cc:	d006      	beq.n	80081dc <UART_SetConfig+0x104>
 80081ce:	e00b      	b.n	80081e8 <UART_SetConfig+0x110>
 80081d0:	2300      	movs	r3, #0
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	e08b      	b.n	80082ee <UART_SetConfig+0x216>
 80081d6:	2302      	movs	r3, #2
 80081d8:	77fb      	strb	r3, [r7, #31]
 80081da:	e088      	b.n	80082ee <UART_SetConfig+0x216>
 80081dc:	2304      	movs	r3, #4
 80081de:	77fb      	strb	r3, [r7, #31]
 80081e0:	e085      	b.n	80082ee <UART_SetConfig+0x216>
 80081e2:	2308      	movs	r3, #8
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e082      	b.n	80082ee <UART_SetConfig+0x216>
 80081e8:	2310      	movs	r3, #16
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e07f      	b.n	80082ee <UART_SetConfig+0x216>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a82      	ldr	r2, [pc, #520]	@ (80083fc <UART_SetConfig+0x324>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d124      	bne.n	8008242 <UART_SetConfig+0x16a>
 80081f8:	4b7e      	ldr	r3, [pc, #504]	@ (80083f4 <UART_SetConfig+0x31c>)
 80081fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008200:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008204:	d011      	beq.n	800822a <UART_SetConfig+0x152>
 8008206:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800820a:	d817      	bhi.n	800823c <UART_SetConfig+0x164>
 800820c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008210:	d011      	beq.n	8008236 <UART_SetConfig+0x15e>
 8008212:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008216:	d811      	bhi.n	800823c <UART_SetConfig+0x164>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <UART_SetConfig+0x14c>
 800821c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008220:	d006      	beq.n	8008230 <UART_SetConfig+0x158>
 8008222:	e00b      	b.n	800823c <UART_SetConfig+0x164>
 8008224:	2300      	movs	r3, #0
 8008226:	77fb      	strb	r3, [r7, #31]
 8008228:	e061      	b.n	80082ee <UART_SetConfig+0x216>
 800822a:	2302      	movs	r3, #2
 800822c:	77fb      	strb	r3, [r7, #31]
 800822e:	e05e      	b.n	80082ee <UART_SetConfig+0x216>
 8008230:	2304      	movs	r3, #4
 8008232:	77fb      	strb	r3, [r7, #31]
 8008234:	e05b      	b.n	80082ee <UART_SetConfig+0x216>
 8008236:	2308      	movs	r3, #8
 8008238:	77fb      	strb	r3, [r7, #31]
 800823a:	e058      	b.n	80082ee <UART_SetConfig+0x216>
 800823c:	2310      	movs	r3, #16
 800823e:	77fb      	strb	r3, [r7, #31]
 8008240:	e055      	b.n	80082ee <UART_SetConfig+0x216>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a6e      	ldr	r2, [pc, #440]	@ (8008400 <UART_SetConfig+0x328>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d124      	bne.n	8008296 <UART_SetConfig+0x1be>
 800824c:	4b69      	ldr	r3, [pc, #420]	@ (80083f4 <UART_SetConfig+0x31c>)
 800824e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008250:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008254:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008258:	d011      	beq.n	800827e <UART_SetConfig+0x1a6>
 800825a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800825e:	d817      	bhi.n	8008290 <UART_SetConfig+0x1b8>
 8008260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008264:	d011      	beq.n	800828a <UART_SetConfig+0x1b2>
 8008266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800826a:	d811      	bhi.n	8008290 <UART_SetConfig+0x1b8>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <UART_SetConfig+0x1a0>
 8008270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008274:	d006      	beq.n	8008284 <UART_SetConfig+0x1ac>
 8008276:	e00b      	b.n	8008290 <UART_SetConfig+0x1b8>
 8008278:	2300      	movs	r3, #0
 800827a:	77fb      	strb	r3, [r7, #31]
 800827c:	e037      	b.n	80082ee <UART_SetConfig+0x216>
 800827e:	2302      	movs	r3, #2
 8008280:	77fb      	strb	r3, [r7, #31]
 8008282:	e034      	b.n	80082ee <UART_SetConfig+0x216>
 8008284:	2304      	movs	r3, #4
 8008286:	77fb      	strb	r3, [r7, #31]
 8008288:	e031      	b.n	80082ee <UART_SetConfig+0x216>
 800828a:	2308      	movs	r3, #8
 800828c:	77fb      	strb	r3, [r7, #31]
 800828e:	e02e      	b.n	80082ee <UART_SetConfig+0x216>
 8008290:	2310      	movs	r3, #16
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	e02b      	b.n	80082ee <UART_SetConfig+0x216>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a5a      	ldr	r2, [pc, #360]	@ (8008404 <UART_SetConfig+0x32c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d124      	bne.n	80082ea <UART_SetConfig+0x212>
 80082a0:	4b54      	ldr	r3, [pc, #336]	@ (80083f4 <UART_SetConfig+0x31c>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80082a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80082ac:	d011      	beq.n	80082d2 <UART_SetConfig+0x1fa>
 80082ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80082b2:	d817      	bhi.n	80082e4 <UART_SetConfig+0x20c>
 80082b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082b8:	d011      	beq.n	80082de <UART_SetConfig+0x206>
 80082ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082be:	d811      	bhi.n	80082e4 <UART_SetConfig+0x20c>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <UART_SetConfig+0x1f4>
 80082c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082c8:	d006      	beq.n	80082d8 <UART_SetConfig+0x200>
 80082ca:	e00b      	b.n	80082e4 <UART_SetConfig+0x20c>
 80082cc:	2300      	movs	r3, #0
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e00d      	b.n	80082ee <UART_SetConfig+0x216>
 80082d2:	2302      	movs	r3, #2
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e00a      	b.n	80082ee <UART_SetConfig+0x216>
 80082d8:	2304      	movs	r3, #4
 80082da:	77fb      	strb	r3, [r7, #31]
 80082dc:	e007      	b.n	80082ee <UART_SetConfig+0x216>
 80082de:	2308      	movs	r3, #8
 80082e0:	77fb      	strb	r3, [r7, #31]
 80082e2:	e004      	b.n	80082ee <UART_SetConfig+0x216>
 80082e4:	2310      	movs	r3, #16
 80082e6:	77fb      	strb	r3, [r7, #31]
 80082e8:	e001      	b.n	80082ee <UART_SetConfig+0x216>
 80082ea:	2310      	movs	r3, #16
 80082ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082f6:	d15b      	bne.n	80083b0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80082f8:	7ffb      	ldrb	r3, [r7, #31]
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d827      	bhi.n	800834e <UART_SetConfig+0x276>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <UART_SetConfig+0x22c>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008329 	.word	0x08008329
 8008308:	08008331 	.word	0x08008331
 800830c:	08008339 	.word	0x08008339
 8008310:	0800834f 	.word	0x0800834f
 8008314:	0800833f 	.word	0x0800833f
 8008318:	0800834f 	.word	0x0800834f
 800831c:	0800834f 	.word	0x0800834f
 8008320:	0800834f 	.word	0x0800834f
 8008324:	08008347 	.word	0x08008347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008328:	f7fc ff7a 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 800832c:	61b8      	str	r0, [r7, #24]
        break;
 800832e:	e013      	b.n	8008358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008330:	f7fc ff98 	bl	8005264 <HAL_RCC_GetPCLK2Freq>
 8008334:	61b8      	str	r0, [r7, #24]
        break;
 8008336:	e00f      	b.n	8008358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008338:	4b33      	ldr	r3, [pc, #204]	@ (8008408 <UART_SetConfig+0x330>)
 800833a:	61bb      	str	r3, [r7, #24]
        break;
 800833c:	e00c      	b.n	8008358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800833e:	f7fc ff0d 	bl	800515c <HAL_RCC_GetSysClockFreq>
 8008342:	61b8      	str	r0, [r7, #24]
        break;
 8008344:	e008      	b.n	8008358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800834a:	61bb      	str	r3, [r7, #24]
        break;
 800834c:	e004      	b.n	8008358 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	77bb      	strb	r3, [r7, #30]
        break;
 8008356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 8082 	beq.w	8008464 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	005a      	lsls	r2, r3, #1
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	085b      	lsrs	r3, r3, #1
 800836a:	441a      	add	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	fbb2 f3f3 	udiv	r3, r2, r3
 8008374:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b0f      	cmp	r3, #15
 800837a:	d916      	bls.n	80083aa <UART_SetConfig+0x2d2>
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008382:	d212      	bcs.n	80083aa <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	b29b      	uxth	r3, r3
 8008388:	f023 030f 	bic.w	r3, r3, #15
 800838c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	085b      	lsrs	r3, r3, #1
 8008392:	b29b      	uxth	r3, r3
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	b29a      	uxth	r2, r3
 800839a:	89fb      	ldrh	r3, [r7, #14]
 800839c:	4313      	orrs	r3, r2
 800839e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	89fa      	ldrh	r2, [r7, #14]
 80083a6:	60da      	str	r2, [r3, #12]
 80083a8:	e05c      	b.n	8008464 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	77bb      	strb	r3, [r7, #30]
 80083ae:	e059      	b.n	8008464 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083b0:	7ffb      	ldrb	r3, [r7, #31]
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d835      	bhi.n	8008422 <UART_SetConfig+0x34a>
 80083b6:	a201      	add	r2, pc, #4	@ (adr r2, 80083bc <UART_SetConfig+0x2e4>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	080083e9 	.word	0x080083e9
 80083c4:	0800840d 	.word	0x0800840d
 80083c8:	08008423 	.word	0x08008423
 80083cc:	08008413 	.word	0x08008413
 80083d0:	08008423 	.word	0x08008423
 80083d4:	08008423 	.word	0x08008423
 80083d8:	08008423 	.word	0x08008423
 80083dc:	0800841b 	.word	0x0800841b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e0:	f7fc ff1e 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 80083e4:	61b8      	str	r0, [r7, #24]
        break;
 80083e6:	e021      	b.n	800842c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083e8:	f7fc ff3c 	bl	8005264 <HAL_RCC_GetPCLK2Freq>
 80083ec:	61b8      	str	r0, [r7, #24]
        break;
 80083ee:	e01d      	b.n	800842c <UART_SetConfig+0x354>
 80083f0:	40013800 	.word	0x40013800
 80083f4:	40021000 	.word	0x40021000
 80083f8:	40004400 	.word	0x40004400
 80083fc:	40004800 	.word	0x40004800
 8008400:	40004c00 	.word	0x40004c00
 8008404:	40005000 	.word	0x40005000
 8008408:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800840c:	4b1b      	ldr	r3, [pc, #108]	@ (800847c <UART_SetConfig+0x3a4>)
 800840e:	61bb      	str	r3, [r7, #24]
        break;
 8008410:	e00c      	b.n	800842c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008412:	f7fc fea3 	bl	800515c <HAL_RCC_GetSysClockFreq>
 8008416:	61b8      	str	r0, [r7, #24]
        break;
 8008418:	e008      	b.n	800842c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800841a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800841e:	61bb      	str	r3, [r7, #24]
        break;
 8008420:	e004      	b.n	800842c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	77bb      	strb	r3, [r7, #30]
        break;
 800842a:	bf00      	nop
    }

    if (pclk != 0U)
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d018      	beq.n	8008464 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	085a      	lsrs	r2, r3, #1
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	441a      	add	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b0f      	cmp	r3, #15
 800844a:	d909      	bls.n	8008460 <UART_SetConfig+0x388>
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008452:	d205      	bcs.n	8008460 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	b29a      	uxth	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60da      	str	r2, [r3, #12]
 800845e:	e001      	b.n	8008464 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008470:	7fbb      	ldrb	r3, [r7, #30]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	007a1200 	.word	0x007a1200

08008480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01a      	beq.n	8008596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800857e:	d10a      	bne.n	8008596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	605a      	str	r2, [r3, #4]
  }
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b098      	sub	sp, #96	@ 0x60
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085d4:	f7f9 fe50 	bl	8002278 <HAL_GetTick>
 80085d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d12e      	bne.n	8008646 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085f0:	2200      	movs	r2, #0
 80085f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f88c 	bl	8008714 <UART_WaitOnFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d021      	beq.n	8008646 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008616:	653b      	str	r3, [r7, #80]	@ 0x50
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008620:	647b      	str	r3, [r7, #68]	@ 0x44
 8008622:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800862e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e6      	bne.n	8008602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2220      	movs	r2, #32
 8008638:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e062      	b.n	800870c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b04      	cmp	r3, #4
 8008652:	d149      	bne.n	80086e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800865c:	2200      	movs	r2, #0
 800865e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f856 	bl	8008714 <UART_WaitOnFlagUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d03c      	beq.n	80086e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	623b      	str	r3, [r7, #32]
   return(result);
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868c:	633b      	str	r3, [r7, #48]	@ 0x30
 800868e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e6      	bne.n	800866e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086c0:	61fa      	str	r2, [r7, #28]
 80086c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	69b9      	ldr	r1, [r7, #24]
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	617b      	str	r3, [r7, #20]
   return(result);
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e5      	bne.n	80086a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e011      	b.n	800870c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2220      	movs	r2, #32
 80086ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3758      	adds	r7, #88	@ 0x58
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008724:	e04f      	b.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872c:	d04b      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872e:	f7f9 fda3 	bl	8002278 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	429a      	cmp	r2, r3
 800873c:	d302      	bcc.n	8008744 <UART_WaitOnFlagUntilTimeout+0x30>
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e04e      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0304 	and.w	r3, r3, #4
 8008752:	2b00      	cmp	r3, #0
 8008754:	d037      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b80      	cmp	r3, #128	@ 0x80
 800875a:	d034      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b40      	cmp	r3, #64	@ 0x40
 8008760:	d031      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b08      	cmp	r3, #8
 800876e:	d110      	bne.n	8008792 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2208      	movs	r2, #8
 8008776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f8ff 	bl	800897c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2208      	movs	r2, #8
 8008782:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e029      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800879c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087a0:	d111      	bne.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 f8e5 	bl	800897c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e00f      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4013      	ands	r3, r2
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d0a0      	beq.n	8008726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b096      	sub	sp, #88	@ 0x58
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2222      	movs	r2, #34	@ 0x22
 8008818:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008820:	2b00      	cmp	r3, #0
 8008822:	d028      	beq.n	8008876 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008828:	4a3e      	ldr	r2, [pc, #248]	@ (8008924 <UART_Start_Receive_DMA+0x134>)
 800882a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008830:	4a3d      	ldr	r2, [pc, #244]	@ (8008928 <UART_Start_Receive_DMA+0x138>)
 8008832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008838:	4a3c      	ldr	r2, [pc, #240]	@ (800892c <UART_Start_Receive_DMA+0x13c>)
 800883a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008840:	2200      	movs	r2, #0
 8008842:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3324      	adds	r3, #36	@ 0x24
 800884e:	4619      	mov	r1, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008854:	461a      	mov	r2, r3
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	f7fa fd32 	bl	80032c0 <HAL_DMA_Start_IT>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2210      	movs	r2, #16
 8008866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e051      	b.n	800891a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d018      	beq.n	80088b0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008892:	657b      	str	r3, [r7, #84]	@ 0x54
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800889c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800889e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80088aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e6      	bne.n	800887e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3308      	adds	r3, #8
 80088b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	f043 0301 	orr.w	r3, r3, #1
 80088c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3308      	adds	r3, #8
 80088ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80088d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80088d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	613b      	str	r3, [r7, #16]
   return(result);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3308      	adds	r3, #8
 8008902:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008904:	623a      	str	r2, [r7, #32]
 8008906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	69f9      	ldr	r1, [r7, #28]
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	61bb      	str	r3, [r7, #24]
   return(result);
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e5      	bne.n	80088e4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3758      	adds	r7, #88	@ 0x58
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	08008af5 	.word	0x08008af5
 8008928:	08008c1b 	.word	0x08008c1b
 800892c:	08008c59 	.word	0x08008c59

08008930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b089      	sub	sp, #36	@ 0x24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	60bb      	str	r3, [r7, #8]
   return(result);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	61bb      	str	r3, [r7, #24]
 8008958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6979      	ldr	r1, [r7, #20]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	613b      	str	r3, [r7, #16]
   return(result);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e6      	bne.n	8008938 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008970:	bf00      	nop
 8008972:	3724      	adds	r7, #36	@ 0x24
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800897c:	b480      	push	{r7}
 800897e:	b095      	sub	sp, #84	@ 0x54
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80089a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e6      	bne.n	8008984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3308      	adds	r3, #8
 80089bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3308      	adds	r3, #8
 80089d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e5      	bne.n	80089b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d118      	bne.n	8008a24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f023 0310 	bic.w	r3, r3, #16
 8008a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6979      	ldr	r1, [r7, #20]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e6      	bne.n	80089f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008a38:	bf00      	nop
 8008a3a:	3754      	adds	r7, #84	@ 0x54
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b090      	sub	sp, #64	@ 0x40
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a50:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d037      	beq.n	8008aca <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	623b      	str	r3, [r7, #32]
   return(result);
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e5      	bne.n	8008a62 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	69b9      	ldr	r1, [r7, #24]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e6      	bne.n	8008a96 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ac8:	e002      	b.n	8008ad0 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8008aca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008acc:	f7f8 fb86 	bl	80011dc <HAL_UART_TxCpltCallback>
}
 8008ad0:	bf00      	nop
 8008ad2:	3740      	adds	r7, #64	@ 0x40
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f7ff face 	bl	8008088 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aec:	bf00      	nop
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b09c      	sub	sp, #112	@ 0x70
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d071      	beq.n	8008bee <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e6      	bne.n	8008b12 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3308      	adds	r3, #8
 8008b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3308      	adds	r3, #8
 8008b62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b64:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e5      	bne.n	8008b44 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	623b      	str	r3, [r7, #32]
   return(result);
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3308      	adds	r3, #8
 8008b96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b98:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e5      	bne.n	8008b78 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d118      	bne.n	8008bee <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f023 0310 	bic.w	r3, r3, #16
 8008bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bda:	61fb      	str	r3, [r7, #28]
 8008bdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	69b9      	ldr	r1, [r7, #24]
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	617b      	str	r3, [r7, #20]
   return(result);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e6      	bne.n	8008bbc <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d107      	bne.n	8008c0c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c02:	4619      	mov	r1, r3
 8008c04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c06:	f7f8 fb27 	bl	8001258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c0a:	e002      	b.n	8008c12 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008c0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c0e:	f7ff fa45 	bl	800809c <HAL_UART_RxCpltCallback>
}
 8008c12:	bf00      	nop
 8008c14:	3770      	adds	r7, #112	@ 0x70
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d109      	bne.n	8008c4a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	4619      	mov	r1, r3
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7f8 fb08 	bl	8001258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c48:	e002      	b.n	8008c50 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fa30 	bl	80080b0 <HAL_UART_RxHalfCpltCallback>
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c7e:	2b80      	cmp	r3, #128	@ 0x80
 8008c80:	d109      	bne.n	8008c96 <UART_DMAError+0x3e>
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b21      	cmp	r3, #33	@ 0x21
 8008c86:	d106      	bne.n	8008c96 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008c90:	6978      	ldr	r0, [r7, #20]
 8008c92:	f7ff fe4d 	bl	8008930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca0:	2b40      	cmp	r3, #64	@ 0x40
 8008ca2:	d109      	bne.n	8008cb8 <UART_DMAError+0x60>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b22      	cmp	r3, #34	@ 0x22
 8008ca8:	d106      	bne.n	8008cb8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008cb2:	6978      	ldr	r0, [r7, #20]
 8008cb4:	f7ff fe62 	bl	800897c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cbe:	f043 0210 	orr.w	r2, r3, #16
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cc8:	6978      	ldr	r0, [r7, #20]
 8008cca:	f7ff f9fb 	bl	80080c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cce:	bf00      	nop
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff f9e5 	bl	80080c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b088      	sub	sp, #32
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	61bb      	str	r3, [r7, #24]
 8008d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6979      	ldr	r1, [r7, #20]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	613b      	str	r3, [r7, #16]
   return(result);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e6      	bne.n	8008d0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7f8 fa47 	bl	80011dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4e:	bf00      	nop
 8008d50:	3720      	adds	r7, #32
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b08c      	sub	sp, #48	@ 0x30
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	4613      	mov	r3, r2
 8008d76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d142      	bne.n	8008e08 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008d88:	88fb      	ldrh	r3, [r7, #6]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e03b      	b.n	8008e0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008d9e:	88fb      	ldrh	r3, [r7, #6]
 8008da0:	461a      	mov	r2, r3
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f7ff fd23 	bl	80087f0 <UART_Start_Receive_DMA>
 8008daa:	4603      	mov	r3, r0
 8008dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008db0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d124      	bne.n	8008e02 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d11d      	bne.n	8008dfc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f043 0310 	orr.w	r3, r3, #16
 8008ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008de8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6a39      	ldr	r1, [r7, #32]
 8008dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e6      	bne.n	8008dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008dfa:	e002      	b.n	8008e02 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008e02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e06:	e000      	b.n	8008e0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008e08:	2302      	movs	r3, #2
  }
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3730      	adds	r7, #48	@ 0x30
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <memset>:
 8008e12:	4402      	add	r2, r0
 8008e14:	4603      	mov	r3, r0
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d100      	bne.n	8008e1c <memset+0xa>
 8008e1a:	4770      	bx	lr
 8008e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8008e20:	e7f9      	b.n	8008e16 <memset+0x4>
	...

08008e24 <__libc_init_array>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	4d0d      	ldr	r5, [pc, #52]	@ (8008e5c <__libc_init_array+0x38>)
 8008e28:	4c0d      	ldr	r4, [pc, #52]	@ (8008e60 <__libc_init_array+0x3c>)
 8008e2a:	1b64      	subs	r4, r4, r5
 8008e2c:	10a4      	asrs	r4, r4, #2
 8008e2e:	2600      	movs	r6, #0
 8008e30:	42a6      	cmp	r6, r4
 8008e32:	d109      	bne.n	8008e48 <__libc_init_array+0x24>
 8008e34:	4d0b      	ldr	r5, [pc, #44]	@ (8008e64 <__libc_init_array+0x40>)
 8008e36:	4c0c      	ldr	r4, [pc, #48]	@ (8008e68 <__libc_init_array+0x44>)
 8008e38:	f000 f818 	bl	8008e6c <_init>
 8008e3c:	1b64      	subs	r4, r4, r5
 8008e3e:	10a4      	asrs	r4, r4, #2
 8008e40:	2600      	movs	r6, #0
 8008e42:	42a6      	cmp	r6, r4
 8008e44:	d105      	bne.n	8008e52 <__libc_init_array+0x2e>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
 8008e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4c:	4798      	blx	r3
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7ee      	b.n	8008e30 <__libc_init_array+0xc>
 8008e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e56:	4798      	blx	r3
 8008e58:	3601      	adds	r6, #1
 8008e5a:	e7f2      	b.n	8008e42 <__libc_init_array+0x1e>
 8008e5c:	08008ebc 	.word	0x08008ebc
 8008e60:	08008ebc 	.word	0x08008ebc
 8008e64:	08008ebc 	.word	0x08008ebc
 8008e68:	08008ec0 	.word	0x08008ec0

08008e6c <_init>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr

08008e78 <_fini>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	bf00      	nop
 8008e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7e:	bc08      	pop	{r3}
 8008e80:	469e      	mov	lr, r3
 8008e82:	4770      	bx	lr
