
PWM_Driver_Flywheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e7c  08005e7c  00006e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb4  08005eb4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005eb4  08005eb4  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eb4  08005eb4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb4  08005eb4  00006eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005eb8  08005eb8  00006eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005ebc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000002e0  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001491f  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024a0  00000000  00000000  0001b95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0001de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ead  00000000  00000000  0001f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e95e  00000000  00000000  0001ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187c5  00000000  00000000  0003e87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf890  00000000  00000000  00057040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001168d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fb0  00000000  00000000  00116914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0011b8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e64 	.word	0x08005e64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e64 	.word	0x08005e64

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 ffba 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f814 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fbf8 	bl	80009c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f964 	bl	80004a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80001dc:	f000 faca 	bl	8000774 <MX_TIM3_Init>
  MX_TIM8_Init();
 80001e0:	f000 fb16 	bl	8000810 <MX_TIM8_Init>
  MX_TIM2_Init();
 80001e4:	f000 fa22 	bl	800062c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 fbbe 	bl	8000968 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80001ec:	f000 f8dc 	bl	80003a8 <MX_I2C1_Init>
  MX_ADC1_Init();
 80001f0:	f000 f86a 	bl	80002c8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80001f4:	f000 f918 	bl	8000428 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	bf00      	nop
 80001fa:	e7fd      	b.n	80001f8 <main+0x30>

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b09e      	sub	sp, #120	@ 0x78
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000206:	2228      	movs	r2, #40	@ 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f005 fdfd 	bl	8005e0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	223c      	movs	r2, #60	@ 0x3c
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f005 fdef 	bl	8005e0a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800022c:	2303      	movs	r3, #3
 800022e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000234:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000236:	2301      	movs	r3, #1
 8000238:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000250:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000256:	4618      	mov	r0, r3
 8000258:	f002 f9d2 	bl	8002600 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000262:	f000 fc71 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2302      	movs	r3, #2
 800026c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000276:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f003 f9fa 	bl	800367c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800028e:	f000 fc5b 	bl	8000b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000292:	f243 03a1 	movw	r3, #12449	@ 0x30a1
 8000296:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800029c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002a0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002a6:	2300      	movs	r3, #0
 80002a8:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80002aa:	2300      	movs	r3, #0
 80002ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	463b      	mov	r3, r7
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 fc05 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80002bc:	f000 fc44 	bl	8000b48 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3778      	adds	r7, #120	@ 0x78
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	@ 0x28
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ce:	f107 031c 	add.w	r3, r7, #28
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ea:	4b2e      	ldr	r3, [pc, #184]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 80002ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f2:	4b2c      	ldr	r3, [pc, #176]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002f8:	4b2a      	ldr	r3, [pc, #168]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000304:	4b27      	ldr	r3, [pc, #156]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000306:	2200      	movs	r2, #0
 8000308:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030a:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000312:	4b24      	ldr	r3, [pc, #144]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000314:	2200      	movs	r2, #0
 8000316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000318:	4b22      	ldr	r3, [pc, #136]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 800031a:	2201      	movs	r2, #1
 800031c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031e:	4b21      	ldr	r3, [pc, #132]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000324:	4b1f      	ldr	r3, [pc, #124]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000326:	2201      	movs	r2, #1
 8000328:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800032a:	4b1e      	ldr	r3, [pc, #120]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000332:	4b1c      	ldr	r3, [pc, #112]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000334:	2204      	movs	r2, #4
 8000336:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000338:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 800033a:	2200      	movs	r2, #0
 800033c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800033e:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000344:	4817      	ldr	r0, [pc, #92]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000346:	f000 ff63 	bl	8001210 <HAL_ADC_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000350:	f000 fbfa 	bl	8000b48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000354:	2300      	movs	r3, #0
 8000356:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000358:	f107 031c 	add.w	r3, r7, #28
 800035c:	4619      	mov	r1, r3
 800035e:	4811      	ldr	r0, [pc, #68]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 8000360:	f001 fc20 	bl	8001ba4 <HAL_ADCEx_MultiModeConfigChannel>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800036a:	f000 fbed 	bl	8000b48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800036e:	2301      	movs	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000372:	2301      	movs	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4619      	mov	r1, r3
 800038a:	4806      	ldr	r0, [pc, #24]	@ (80003a4 <MX_ADC1_Init+0xdc>)
 800038c:	f001 f920 	bl	80015d0 <HAL_ADC_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000396:	f000 fbd7 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	3728      	adds	r7, #40	@ 0x28
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000028 	.word	0x20000028

080003a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_I2C1_Init+0x74>)
 80003ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000420 <MX_I2C1_Init+0x78>)
 80003b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <MX_I2C1_Init+0x74>)
 80003b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000424 <MX_I2C1_Init+0x7c>)
 80003b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <MX_I2C1_Init+0x74>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	@ (800041c <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ca:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_I2C1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_I2C1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e2:	480e      	ldr	r0, [pc, #56]	@ (800041c <MX_I2C1_Init+0x74>)
 80003e4:	f001 ffda 	bl	800239c <HAL_I2C_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ee:	f000 fbab 	bl	8000b48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003f2:	2100      	movs	r1, #0
 80003f4:	4809      	ldr	r0, [pc, #36]	@ (800041c <MX_I2C1_Init+0x74>)
 80003f6:	f002 f86c 	bl	80024d2 <HAL_I2CEx_ConfigAnalogFilter>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000400:	f000 fba2 	bl	8000b48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000404:	2100      	movs	r1, #0
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_I2C1_Init+0x74>)
 8000408:	f002 f8ae 	bl	8002568 <HAL_I2CEx_ConfigDigitalFilter>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000412:	f000 fb99 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000078 	.word	0x20000078
 8000420:	40005400 	.word	0x40005400
 8000424:	00201d2b 	.word	0x00201d2b

08000428 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <MX_SPI1_Init+0x74>)
 800042e:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <MX_SPI1_Init+0x78>)
 8000430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000432:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_SPI1_Init+0x74>)
 8000434:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043a:	4b18      	ldr	r3, [pc, #96]	@ (800049c <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000440:	4b16      	ldr	r3, [pc, #88]	@ (800049c <MX_SPI1_Init+0x74>)
 8000442:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000446:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_SPI1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044e:	4b13      	ldr	r3, [pc, #76]	@ (800049c <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <MX_SPI1_Init+0x74>)
 8000456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800045a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_SPI1_Init+0x74>)
 800045e:	2218      	movs	r2, #24
 8000460:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000468:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <MX_SPI1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000474:	4b09      	ldr	r3, [pc, #36]	@ (800049c <MX_SPI1_Init+0x74>)
 8000476:	2207      	movs	r2, #7
 8000478:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800047a:	4b08      	ldr	r3, [pc, #32]	@ (800049c <MX_SPI1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <MX_SPI1_Init+0x74>)
 8000482:	2208      	movs	r2, #8
 8000484:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000486:	4805      	ldr	r0, [pc, #20]	@ (800049c <MX_SPI1_Init+0x74>)
 8000488:	f003 fcca 	bl	8003e20 <HAL_SPI_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000492:	f000 fb59 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000cc 	.word	0x200000cc
 80004a0:	40013000 	.word	0x40013000

080004a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b09a      	sub	sp, #104	@ 0x68
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]
 80004d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	222c      	movs	r2, #44	@ 0x2c
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f005 fc93 	bl	8005e0a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e4:	4b4f      	ldr	r3, [pc, #316]	@ (8000624 <MX_TIM1_Init+0x180>)
 80004e6:	4a50      	ldr	r2, [pc, #320]	@ (8000628 <MX_TIM1_Init+0x184>)
 80004e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ea:	4b4e      	ldr	r3, [pc, #312]	@ (8000624 <MX_TIM1_Init+0x180>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000624 <MX_TIM1_Init+0x180>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000624 <MX_TIM1_Init+0x180>)
 80004f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fe:	4b49      	ldr	r3, [pc, #292]	@ (8000624 <MX_TIM1_Init+0x180>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000504:	4b47      	ldr	r3, [pc, #284]	@ (8000624 <MX_TIM1_Init+0x180>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b46      	ldr	r3, [pc, #280]	@ (8000624 <MX_TIM1_Init+0x180>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000510:	4844      	ldr	r0, [pc, #272]	@ (8000624 <MX_TIM1_Init+0x180>)
 8000512:	f003 fd30 	bl	8003f76 <HAL_TIM_Base_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800051c:	f000 fb14 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000524:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000526:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800052a:	4619      	mov	r1, r3
 800052c:	483d      	ldr	r0, [pc, #244]	@ (8000624 <MX_TIM1_Init+0x180>)
 800052e:	f004 f8ed 	bl	800470c <HAL_TIM_ConfigClockSource>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000538:	f000 fb06 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800053c:	4839      	ldr	r0, [pc, #228]	@ (8000624 <MX_TIM1_Init+0x180>)
 800053e:	f003 fd71 	bl	8004024 <HAL_TIM_PWM_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000548:	f000 fafe 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054c:	2300      	movs	r3, #0
 800054e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000558:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800055c:	4619      	mov	r1, r3
 800055e:	4831      	ldr	r0, [pc, #196]	@ (8000624 <MX_TIM1_Init+0x180>)
 8000560:	f004 fefa 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800056a:	f000 faed 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056e:	2360      	movs	r3, #96	@ 0x60
 8000570:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000576:	2300      	movs	r3, #0
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800057a:	2300      	movs	r3, #0
 800057c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000582:	2300      	movs	r3, #0
 8000584:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800058a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	4824      	ldr	r0, [pc, #144]	@ (8000624 <MX_TIM1_Init+0x180>)
 8000594:	f003 ffa6 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800059e:	f000 fad3 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005a6:	2204      	movs	r2, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	481e      	ldr	r0, [pc, #120]	@ (8000624 <MX_TIM1_Init+0x180>)
 80005ac:	f003 ff9a 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80005b6:	f000 fac7 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005be:	2208      	movs	r2, #8
 80005c0:	4619      	mov	r1, r3
 80005c2:	4818      	ldr	r0, [pc, #96]	@ (8000624 <MX_TIM1_Init+0x180>)
 80005c4:	f003 ff8e 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80005ce:	f000 fabb 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	4807      	ldr	r0, [pc, #28]	@ (8000624 <MX_TIM1_Init+0x180>)
 8000608:	f004 ff26 	bl	8005458 <HAL_TIMEx_ConfigBreakDeadTime>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000612:	f000 fa99 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000616:	4803      	ldr	r0, [pc, #12]	@ (8000624 <MX_TIM1_Init+0x180>)
 8000618:	f000 fc5c 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 800061c:	bf00      	nop
 800061e:	3768      	adds	r7, #104	@ 0x68
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000130 	.word	0x20000130
 8000628:	40012c00 	.word	0x40012c00

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	@ 0x30
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000658:	4b45      	ldr	r3, [pc, #276]	@ (8000770 <MX_TIM2_Init+0x144>)
 800065a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800065e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000660:	4b43      	ldr	r3, [pc, #268]	@ (8000770 <MX_TIM2_Init+0x144>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b42      	ldr	r3, [pc, #264]	@ (8000770 <MX_TIM2_Init+0x144>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800066c:	4b40      	ldr	r3, [pc, #256]	@ (8000770 <MX_TIM2_Init+0x144>)
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b3e      	ldr	r3, [pc, #248]	@ (8000770 <MX_TIM2_Init+0x144>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067a:	4b3d      	ldr	r3, [pc, #244]	@ (8000770 <MX_TIM2_Init+0x144>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000680:	483b      	ldr	r0, [pc, #236]	@ (8000770 <MX_TIM2_Init+0x144>)
 8000682:	f003 fc78 	bl	8003f76 <HAL_TIM_Base_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800068c:	f000 fa5c 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4619      	mov	r1, r3
 800069c:	4834      	ldr	r0, [pc, #208]	@ (8000770 <MX_TIM2_Init+0x144>)
 800069e:	f004 f835 	bl	800470c <HAL_TIM_ConfigClockSource>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80006a8:	f000 fa4e 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006ac:	4830      	ldr	r0, [pc, #192]	@ (8000770 <MX_TIM2_Init+0x144>)
 80006ae:	f003 fd1a 	bl	80040e6 <HAL_TIM_IC_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006b8:	f000 fa46 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4829      	ldr	r0, [pc, #164]	@ (8000770 <MX_TIM2_Init+0x144>)
 80006cc:	f004 fe44 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80006d6:	f000 fa37 	bl	8000b48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006da:	2302      	movs	r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80006e6:	230f      	movs	r3, #15
 80006e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	4619      	mov	r1, r3
 80006f0:	481f      	ldr	r0, [pc, #124]	@ (8000770 <MX_TIM2_Init+0x144>)
 80006f2:	f003 fe5b 	bl	80043ac <HAL_TIM_IC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80006fc:	f000 fa24 	bl	8000b48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000704:	2302      	movs	r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2204      	movs	r2, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4817      	ldr	r0, [pc, #92]	@ (8000770 <MX_TIM2_Init+0x144>)
 8000714:	f003 fe4a 	bl	80043ac <HAL_TIM_IC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800071e:	f000 fa13 	bl	8000b48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000722:	2302      	movs	r3, #2
 8000724:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000726:	2301      	movs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800072a:	230f      	movs	r3, #15
 800072c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2208      	movs	r2, #8
 8000732:	4619      	mov	r1, r3
 8000734:	480e      	ldr	r0, [pc, #56]	@ (8000770 <MX_TIM2_Init+0x144>)
 8000736:	f003 fe39 	bl	80043ac <HAL_TIM_IC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000740:	f000 fa02 	bl	8000b48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000748:	2302      	movs	r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	220c      	movs	r2, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <MX_TIM2_Init+0x144>)
 8000758:	f003 fe28 	bl	80043ac <HAL_TIM_IC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x13a>
  {
    Error_Handler();
 8000762:	f000 f9f1 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3730      	adds	r7, #48	@ 0x30
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000017c 	.word	0x2000017c

08000774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_TIM3_Init+0x94>)
 8000794:	4a1d      	ldr	r2, [pc, #116]	@ (800080c <MX_TIM3_Init+0x98>)
 8000796:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_TIM3_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b8:	4813      	ldr	r0, [pc, #76]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007ba:	f003 fbdc 	bl	8003f76 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007c4:	f000 f9c0 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007d6:	f003 ff99 	bl	800470c <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 f9b2 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007f2:	f004 fdb1 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 f9a4 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001c8 	.word	0x200001c8
 800080c:	40000400 	.word	0x40000400

08000810 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09a      	sub	sp, #104	@ 0x68
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000816:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000830:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]
 8000842:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	222c      	movs	r2, #44	@ 0x2c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 fadd 	bl	8005e0a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000850:	4b43      	ldr	r3, [pc, #268]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000852:	4a44      	ldr	r2, [pc, #272]	@ (8000964 <MX_TIM8_Init+0x154>)
 8000854:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000856:	4b42      	ldr	r3, [pc, #264]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b40      	ldr	r3, [pc, #256]	@ (8000960 <MX_TIM8_Init+0x150>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000862:	4b3f      	ldr	r3, [pc, #252]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000868:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b3d      	ldr	r3, [pc, #244]	@ (8000960 <MX_TIM8_Init+0x150>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000870:	4b3b      	ldr	r3, [pc, #236]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b3a      	ldr	r3, [pc, #232]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800087c:	4838      	ldr	r0, [pc, #224]	@ (8000960 <MX_TIM8_Init+0x150>)
 800087e:	f003 fb7a 	bl	8003f76 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000888:	f000 f95e 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000890:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000896:	4619      	mov	r1, r3
 8000898:	4831      	ldr	r0, [pc, #196]	@ (8000960 <MX_TIM8_Init+0x150>)
 800089a:	f003 ff37 	bl	800470c <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80008a4:	f000 f950 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008a8:	482d      	ldr	r0, [pc, #180]	@ (8000960 <MX_TIM8_Init+0x150>)
 80008aa:	f003 fbbb 	bl	8004024 <HAL_TIM_PWM_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80008b4:	f000 f948 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008c8:	4619      	mov	r1, r3
 80008ca:	4825      	ldr	r0, [pc, #148]	@ (8000960 <MX_TIM8_Init+0x150>)
 80008cc:	f004 fd44 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80008d6:	f000 f937 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008da:	2360      	movs	r3, #96	@ 0x60
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4818      	ldr	r0, [pc, #96]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000900:	f003 fdf0 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800090a:	f000 f91d 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000926:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4807      	ldr	r0, [pc, #28]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000944:	f004 fd88 	bl	8005458 <HAL_TIMEx_ConfigBreakDeadTime>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800094e:	f000 f8fb 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <MX_TIM8_Init+0x150>)
 8000954:	f000 fabe 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 8000958:	bf00      	nop
 800095a:	3768      	adds	r7, #104	@ 0x68
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000214 	.word	0x20000214
 8000964:	40013400 	.word	0x40013400

08000968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <MX_USART1_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000974:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART1_UART_Init+0x58>)
 80009ac:	f004 fdf0 	bl	8005590 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f8c7 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000260 	.word	0x20000260
 80009c4:	40013800 	.word	0x40013800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b56      	ldr	r3, [pc, #344]	@ (8000b38 <MX_GPIO_Init+0x170>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a55      	ldr	r2, [pc, #340]	@ (8000b38 <MX_GPIO_Init+0x170>)
 80009e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b53      	ldr	r3, [pc, #332]	@ (8000b38 <MX_GPIO_Init+0x170>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <MX_GPIO_Init+0x170>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a4f      	ldr	r2, [pc, #316]	@ (8000b38 <MX_GPIO_Init+0x170>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b4d      	ldr	r3, [pc, #308]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a49      	ldr	r2, [pc, #292]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b47      	ldr	r3, [pc, #284]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b44      	ldr	r3, [pc, #272]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a43      	ldr	r2, [pc, #268]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a3d      	ldr	r2, [pc, #244]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a48:	6153      	str	r3, [r2, #20]
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b38 <MX_GPIO_Init+0x170>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000a56:	2200      	movs	r2, #0
 8000a58:	f64f 31a0 	movw	r1, #64416	@ 0xfba0
 8000a5c:	4837      	ldr	r0, [pc, #220]	@ (8000b3c <MX_GPIO_Init+0x174>)
 8000a5e:	f001 fc85 	bl	800236c <HAL_GPIO_WritePin>
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2110      	movs	r1, #16
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f001 fc7f 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f647 0107 	movw	r1, #30727	@ 0x7807
 8000a74:	4832      	ldr	r0, [pc, #200]	@ (8000b40 <MX_GPIO_Init+0x178>)
 8000a76:	f001 fc79 	bl	800236c <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECT_GPIO_Port, DIRECT_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4831      	ldr	r0, [pc, #196]	@ (8000b44 <MX_GPIO_Init+0x17c>)
 8000a80:	f001 fc74 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT_2_EN_Pin PORT_3_EN_Pin PORT_4_EN_Pin LED_7_Pin
                           DISP_DC_RS_Pin DISP_LED_Pin DISP_RST_Pin LED_5_Pin
                           PORT_1_EN_Pin */
  GPIO_InitStruct.Pin = PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000a84:	f64f 33a0 	movw	r3, #64416	@ 0xfba0
 8000a88:	617b      	str	r3, [r7, #20]
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4827      	ldr	r0, [pc, #156]	@ (8000b3c <MX_GPIO_Init+0x174>)
 8000a9e:	f001 faeb 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_INT_Pin UI_INT_Pin */
  GPIO_InitStruct.Pin = DISP_INT_Pin|UI_INT_Pin;
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4821      	ldr	r0, [pc, #132]	@ (8000b3c <MX_GPIO_Init+0x174>)
 8000ab8:	f001 fade 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_6_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin;
 8000abc:	2310      	movs	r3, #16
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_6_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f001 facf 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_A_Pin HAL_B_Pin HAL_C_Pin */
  GPIO_InitStruct.Pin = HAL_A_Pin|HAL_B_Pin|HAL_C_Pin;
 8000ada:	23e0      	movs	r3, #224	@ 0xe0
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f001 fac1 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin CS_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 8000af6:	f647 0307 	movw	r3, #30727	@ 0x7807
 8000afa:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <MX_GPIO_Init+0x178>)
 8000b10:	f001 fab2 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin;
 8000b14:	2304      	movs	r3, #4
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECT_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <MX_GPIO_Init+0x17c>)
 8000b2c:	f001 faa4 	bl	8002078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	@ 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000c00 	.word	0x48000c00

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x44>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	@ 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bbc:	d154      	bne.n	8000c68 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a25      	ldr	r2, [pc, #148]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000c0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_ADC_MspInit+0xd4>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4810      	ldr	r0, [pc, #64]	@ (8000c74 <HAL_ADC_MspInit+0xd8>)
 8000c32:	f001 fa21 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c36:	230f      	movs	r3, #15
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4c:	f001 fa14 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c50:	2310      	movs	r3, #16
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <HAL_ADC_MspInit+0xdc>)
 8000c64:	f001 fa08 	bl	8002078 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	@ 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000800 	.word	0x48000800
 8000c78:	48001400 	.word	0x48001400

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <HAL_I2C_MspInit+0x7c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d128      	bne.n	8000cf0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <HAL_I2C_MspInit+0x80>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a16      	ldr	r2, [pc, #88]	@ (8000cfc <HAL_I2C_MspInit+0x80>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <HAL_I2C_MspInit+0x80>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <HAL_I2C_MspInit+0x84>)
 8000cd4:	f001 f9d0 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_I2C_MspInit+0x80>)
 8000cda:	69db      	ldr	r3, [r3, #28]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_I2C_MspInit+0x80>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	61d3      	str	r3, [r2, #28]
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_I2C_MspInit+0x80>)
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	@ 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	48000400 	.word	0x48000400

08000d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_SPI_MspInit+0x7c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d127      	bne.n	8000d76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d56:	2338      	movs	r3, #56	@ 0x38
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_SPI_MspInit+0x84>)
 8000d72:	f001 f981 	bl	8002078 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000400 	.word	0x48000400

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	@ 0x38
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a45      	ldr	r2, [pc, #276]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x134>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d10c      	bne.n	8000dc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dae:	4b45      	ldr	r3, [pc, #276]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a44      	ldr	r2, [pc, #272]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000db4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dc2:	623b      	str	r3, [r7, #32]
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000dc6:	e077      	b.n	8000eb8 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd0:	d14f      	bne.n	8000e72 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b39      	ldr	r3, [pc, #228]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a35      	ldr	r2, [pc, #212]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b30      	ldr	r3, [pc, #192]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INT_2_TIM_Pin;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_2_TIM_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4824      	ldr	r0, [pc, #144]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x13c>)
 8000e38:	f001 f91e 	bl	8002078 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_1_TIM_Pin;
 8000e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_1_TIM_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f001 f90c 	bl	8002078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	201c      	movs	r0, #28
 8000e66:	f001 f8d0 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e6a:	201c      	movs	r0, #28
 8000e6c:	f001 f8e9 	bl	8002042 <HAL_NVIC_EnableIRQ>
}
 8000e70:	e022      	b.n	8000eb8 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM3)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a15      	ldr	r2, [pc, #84]	@ (8000ecc <HAL_TIM_Base_MspInit+0x140>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d10c      	bne.n	8000e96 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	61d3      	str	r3, [r2, #28]
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
}
 8000e94:	e010      	b.n	8000eb8 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM8)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x144>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d10b      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000ea6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x138>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	@ 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40013400 	.word	0x40013400

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a32      	ldr	r2, [pc, #200]	@ (8000fbc <HAL_TIM_MspPostInit+0xe8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d13b      	bne.n	8000f6e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4820      	ldr	r0, [pc, #128]	@ (8000fc4 <HAL_TIM_MspPostInit+0xf0>)
 8000f44:	f001 f898 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f48:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000f4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f001 f886 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f6c:	e021      	b.n	8000fb2 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM8)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <HAL_TIM_MspPostInit+0xf4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d11c      	bne.n	8000fb2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000f7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f82:	6153      	str	r3, [r2, #20]
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <HAL_TIM_MspPostInit+0xec>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000f90:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <HAL_TIM_MspPostInit+0xf8>)
 8000fae:	f001 f863 	bl	8002078 <HAL_GPIO_Init>
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	@ 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40012c00 	.word	0x40012c00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	40013400 	.word	0x40013400
 8000fcc:	48000800 	.word	0x48000800

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	@ (800104c <HAL_UART_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d127      	bne.n	8001042 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <HAL_UART_MspInit+0x80>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a16      	ldr	r2, [pc, #88]	@ (8001050 <HAL_UART_MspInit+0x80>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <HAL_UART_MspInit+0x80>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_UART_MspInit+0x80>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a10      	ldr	r2, [pc, #64]	@ (8001050 <HAL_UART_MspInit+0x80>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_UART_MspInit+0x80>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001022:	23c0      	movs	r3, #192	@ 0xc0
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001032:	2307      	movs	r3, #7
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <HAL_UART_MspInit+0x84>)
 800103e:	f001 f81b 	bl	8002078 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	@ 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40013800 	.word	0x40013800
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <NMI_Handler+0x4>

08001060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <MemManage_Handler+0x4>

08001070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <UsageFault_Handler+0x4>

08001080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ae:	f000 f88f 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f003 f873 	bl	80041a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000017c 	.word	0x2000017c

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001128 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff ffea 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f004 fe7d 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001122:	f7ff f851 	bl	80001c8 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001128:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001134:	08005ebc 	.word	0x08005ebc
  ldr r2, =_sbss
 8001138:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800113c:	200002ec 	.word	0x200002ec

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_Init+0x28>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_Init+0x28>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 ff4d 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	200f      	movs	r0, #15
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fcf8 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000

08001170 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 ff65 	bl	800205e <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 ff2d 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	200002e8 	.word	0x200002e8

080011f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200002e8 	.word	0x200002e8

08001210 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b09a      	sub	sp, #104	@ 0x68
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e1c9      	b.n	80015c4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d176      	bne.n	8001330 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	2b00      	cmp	r3, #0
 8001248:	d152      	bne.n	80012f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fc99 	bl	8000b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d13b      	bne.n	80012f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fd85 	bl	8001d88 <ADC_Disable>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b00      	cmp	r3, #0
 800128e:	d12f      	bne.n	80012f0 <HAL_ADC_Init+0xe0>
 8001290:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001294:	2b00      	cmp	r3, #0
 8001296:	d12b      	bne.n	80012f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012a0:	f023 0302 	bic.w	r3, r3, #2
 80012a4:	f043 0202 	orr.w	r2, r3, #2
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012cc:	4b86      	ldr	r3, [pc, #536]	@ (80014e8 <HAL_ADC_Init+0x2d8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a86      	ldr	r2, [pc, #536]	@ (80014ec <HAL_ADC_Init+0x2dc>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9a      	lsrs	r2, r3, #18
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e2:	e002      	b.n	80012ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f9      	bne.n	80012e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800130c:	d110      	bne.n	8001330 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f023 0312 	bic.w	r3, r3, #18
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 8136 	bne.w	80015aa <HAL_ADC_Init+0x39a>
 800133e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 8131 	bne.w	80015aa <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 8129 	bne.w	80015aa <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001360:	f043 0202 	orr.w	r2, r3, #2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001370:	d004      	beq.n	800137c <HAL_ADC_Init+0x16c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5e      	ldr	r2, [pc, #376]	@ (80014f0 <HAL_ADC_Init+0x2e0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d101      	bne.n	8001380 <HAL_ADC_Init+0x170>
 800137c:	4b5d      	ldr	r3, [pc, #372]	@ (80014f4 <HAL_ADC_Init+0x2e4>)
 800137e:	e000      	b.n	8001382 <HAL_ADC_Init+0x172>
 8001380:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <HAL_ADC_Init+0x2e8>)
 8001382:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800138c:	d102      	bne.n	8001394 <HAL_ADC_Init+0x184>
 800138e:	4b58      	ldr	r3, [pc, #352]	@ (80014f0 <HAL_ADC_Init+0x2e0>)
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e01a      	b.n	80013ca <HAL_ADC_Init+0x1ba>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a55      	ldr	r2, [pc, #340]	@ (80014f0 <HAL_ADC_Init+0x2e0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d103      	bne.n	80013a6 <HAL_ADC_Init+0x196>
 800139e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e011      	b.n	80013ca <HAL_ADC_Init+0x1ba>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a54      	ldr	r2, [pc, #336]	@ (80014fc <HAL_ADC_Init+0x2ec>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d102      	bne.n	80013b6 <HAL_ADC_Init+0x1a6>
 80013b0:	4b53      	ldr	r3, [pc, #332]	@ (8001500 <HAL_ADC_Init+0x2f0>)
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e009      	b.n	80013ca <HAL_ADC_Init+0x1ba>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a51      	ldr	r2, [pc, #324]	@ (8001500 <HAL_ADC_Init+0x2f0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d102      	bne.n	80013c6 <HAL_ADC_Init+0x1b6>
 80013c0:	4b4e      	ldr	r3, [pc, #312]	@ (80014fc <HAL_ADC_Init+0x2ec>)
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	e001      	b.n	80013ca <HAL_ADC_Init+0x1ba>
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d108      	bne.n	80013ea <HAL_ADC_Init+0x1da>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Init+0x1da>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_ADC_Init+0x1dc>
 80013ea:	2300      	movs	r3, #0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d11c      	bne.n	800142a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d010      	beq.n	8001418 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_ADC_Init+0x202>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Init+0x202>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_ADC_Init+0x204>
 8001412:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001414:	2b00      	cmp	r3, #0
 8001416:	d108      	bne.n	800142a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	431a      	orrs	r2, r3
 8001426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001428:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7e5b      	ldrb	r3, [r3, #25]
 800142e:	035b      	lsls	r3, r3, #13
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001434:	2a01      	cmp	r2, #1
 8001436:	d002      	beq.n	800143e <HAL_ADC_Init+0x22e>
 8001438:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800143c:	e000      	b.n	8001440 <HAL_ADC_Init+0x230>
 800143e:	2200      	movs	r2, #0
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4313      	orrs	r3, r2
 800144e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001450:	4313      	orrs	r3, r2
 8001452:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d11b      	bne.n	8001496 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7e5b      	ldrb	r3, [r3, #25]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	3b01      	subs	r3, #1
 800146c:	045a      	lsls	r2, r3, #17
 800146e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001470:	4313      	orrs	r3, r2
 8001472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001476:	663b      	str	r3, [r7, #96]	@ 0x60
 8001478:	e00d      	b.n	8001496 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001482:	f043 0220 	orr.w	r2, r3, #32
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f043 0201 	orr.w	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	2b01      	cmp	r3, #1
 800149c:	d03a      	beq.n	8001514 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a16      	ldr	r2, [pc, #88]	@ (80014fc <HAL_ADC_Init+0x2ec>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d004      	beq.n	80014b2 <HAL_ADC_Init+0x2a2>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <HAL_ADC_Init+0x2f0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d128      	bne.n	8001504 <HAL_ADC_Init+0x2f4>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b6:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80014ba:	d012      	beq.n	80014e2 <HAL_ADC_Init+0x2d2>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014c4:	d00a      	beq.n	80014dc <HAL_ADC_Init+0x2cc>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ca:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80014ce:	d002      	beq.n	80014d6 <HAL_ADC_Init+0x2c6>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d4:	e018      	b.n	8001508 <HAL_ADC_Init+0x2f8>
 80014d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014da:	e015      	b.n	8001508 <HAL_ADC_Init+0x2f8>
 80014dc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80014e0:	e012      	b.n	8001508 <HAL_ADC_Init+0x2f8>
 80014e2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80014e6:	e00f      	b.n	8001508 <HAL_ADC_Init+0x2f8>
 80014e8:	20000000 	.word	0x20000000
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	50000100 	.word	0x50000100
 80014f4:	50000300 	.word	0x50000300
 80014f8:	50000700 	.word	0x50000700
 80014fc:	50000400 	.word	0x50000400
 8001500:	50000500 	.word	0x50000500
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800150c:	4313      	orrs	r3, r2
 800150e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001510:	4313      	orrs	r3, r2
 8001512:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b00      	cmp	r3, #0
 8001520:	d114      	bne.n	800154c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001530:	f023 0302 	bic.w	r3, r3, #2
 8001534:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7e1b      	ldrb	r3, [r3, #24]
 800153a:	039a      	lsls	r2, r3, #14
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4313      	orrs	r3, r2
 8001546:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001548:	4313      	orrs	r3, r2
 800154a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_ADC_Init+0x3bc>)
 8001554:	4013      	ands	r3, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800155c:	430b      	orrs	r3, r1
 800155e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10c      	bne.n	8001582 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f023 010f 	bic.w	r1, r3, #15
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001580:	e007      	b.n	8001592 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020f 	bic.w	r2, r2, #15
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	f023 0303 	bic.w	r3, r3, #3
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80015a8:	e00a      	b.n	80015c0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f023 0312 	bic.w	r3, r3, #18
 80015b2:	f043 0210 	orr.w	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015ba:	2301      	movs	r3, #1
 80015bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3768      	adds	r7, #104	@ 0x68
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	fff0c007 	.word	0xfff0c007

080015d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b09b      	sub	sp, #108	@ 0x6c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x22>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e2c8      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x5b4>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 82ac 	bne.w	8001b62 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d81c      	bhi.n	800164c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	461a      	mov	r2, r3
 8001626:	231f      	movs	r3, #31
 8001628:	4093      	lsls	r3, r2
 800162a:	43db      	mvns	r3, r3
 800162c:	4019      	ands	r1, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	631a      	str	r2, [r3, #48]	@ 0x30
 800164a:	e063      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b09      	cmp	r3, #9
 8001652:	d81e      	bhi.n	8001692 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	3b1e      	subs	r3, #30
 8001668:	221f      	movs	r2, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	4019      	ands	r1, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	3b1e      	subs	r3, #30
 8001684:	fa00 f203 	lsl.w	r2, r0, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001690:	e040      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b0e      	cmp	r3, #14
 8001698:	d81e      	bhi.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	3b3c      	subs	r3, #60	@ 0x3c
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4019      	ands	r1, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	3b3c      	subs	r3, #60	@ 0x3c
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016d6:	e01d      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	3b5a      	subs	r3, #90	@ 0x5a
 80016ec:	221f      	movs	r2, #31
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4019      	ands	r1, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	3b5a      	subs	r3, #90	@ 0x5a
 8001708:	fa00 f203 	lsl.w	r2, r0, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 80e5 	bne.w	80018ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b09      	cmp	r3, #9
 800172a:	d91c      	bls.n	8001766 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6999      	ldr	r1, [r3, #24]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3b1e      	subs	r3, #30
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6898      	ldr	r0, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	3b1e      	subs	r3, #30
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	619a      	str	r2, [r3, #24]
 8001764:	e019      	b.n	800179a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6959      	ldr	r1, [r3, #20]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	4019      	ands	r1, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	fa00 f203 	lsl.w	r2, r0, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d84f      	bhi.n	800185c <HAL_ADC_ConfigChannel+0x28c>
 80017bc:	a201      	add	r2, pc, #4	@ (adr r2, 80017c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	080017f7 	.word	0x080017f7
 80017cc:	08001819 	.word	0x08001819
 80017d0:	0800183b 	.word	0x0800183b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017da:	4b99      	ldr	r3, [pc, #612]	@ (8001a40 <HAL_ADC_ConfigChannel+0x470>)
 80017dc:	4013      	ands	r3, r2
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	0691      	lsls	r1, r2, #26
 80017e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017e6:	430a      	orrs	r2, r1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80017f2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f4:	e07b      	b.n	80018ee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80017fc:	4b90      	ldr	r3, [pc, #576]	@ (8001a40 <HAL_ADC_ConfigChannel+0x470>)
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	0691      	lsls	r1, r2, #26
 8001806:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001808:	430a      	orrs	r2, r1
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001814:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001816:	e06a      	b.n	80018ee <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800181e:	4b88      	ldr	r3, [pc, #544]	@ (8001a40 <HAL_ADC_ConfigChannel+0x470>)
 8001820:	4013      	ands	r3, r2
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	0691      	lsls	r1, r2, #26
 8001828:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800182a:	430a      	orrs	r2, r1
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001836:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001838:	e059      	b.n	80018ee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001840:	4b7f      	ldr	r3, [pc, #508]	@ (8001a40 <HAL_ADC_ConfigChannel+0x470>)
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	0691      	lsls	r1, r2, #26
 800184a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800184c:	430a      	orrs	r2, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001858:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800185a:	e048      	b.n	80018ee <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001862:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800187e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018a2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	069b      	lsls	r3, r3, #26
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d107      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018c6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	069b      	lsls	r3, r3, #26
 80018d8:	429a      	cmp	r2, r3
 80018da:	d107      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80018ec:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_ADC_ConfigChannel+0x33e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ADC_ConfigChannel+0x33e>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_ADC_ConfigChannel+0x340>
 800190e:	2300      	movs	r3, #0
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 8131 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d00f      	beq.n	800193e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43da      	mvns	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	400a      	ands	r2, r1
 8001938:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800193c:	e049      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	409a      	lsls	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b09      	cmp	r3, #9
 800195e:	d91c      	bls.n	800199a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6999      	ldr	r1, [r3, #24]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	3b1b      	subs	r3, #27
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	4019      	ands	r1, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6898      	ldr	r0, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	3b1b      	subs	r3, #27
 800198c:	fa00 f203 	lsl.w	r2, r0, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	619a      	str	r2, [r3, #24]
 8001998:	e01b      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6959      	ldr	r1, [r3, #20]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	2207      	movs	r2, #7
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4019      	ands	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6898      	ldr	r0, [r3, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019da:	d004      	beq.n	80019e6 <HAL_ADC_ConfigChannel+0x416>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a18      	ldr	r2, [pc, #96]	@ (8001a44 <HAL_ADC_ConfigChannel+0x474>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x41a>
 80019e6:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <HAL_ADC_ConfigChannel+0x478>)
 80019e8:	e000      	b.n	80019ec <HAL_ADC_ConfigChannel+0x41c>
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_ADC_ConfigChannel+0x47c>)
 80019ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d105      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d015      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a06:	2b11      	cmp	r3, #17
 8001a08:	d105      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	f040 80ac 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 80a5 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a36:	d10b      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x480>
 8001a38:	4b02      	ldr	r3, [pc, #8]	@ (8001a44 <HAL_ADC_ConfigChannel+0x474>)
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e023      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x4b6>
 8001a3e:	bf00      	nop
 8001a40:	83fff000 	.word	0x83fff000
 8001a44:	50000100 	.word	0x50000100
 8001a48:	50000300 	.word	0x50000300
 8001a4c:	50000700 	.word	0x50000700
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a4e      	ldr	r2, [pc, #312]	@ (8001b90 <HAL_ADC_ConfigChannel+0x5c0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d103      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x492>
 8001a5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e011      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x4b6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a4b      	ldr	r2, [pc, #300]	@ (8001b94 <HAL_ADC_ConfigChannel+0x5c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x4a2>
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e009      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x4b6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a48      	ldr	r2, [pc, #288]	@ (8001b98 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d102      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x4b2>
 8001a7c:	4b45      	ldr	r3, [pc, #276]	@ (8001b94 <HAL_ADC_ConfigChannel+0x5c4>)
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e001      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x4b6>
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x4d6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x4d6>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x4d8>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d150      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d010      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x4fe>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x4fe>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x500>
 8001ace:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d13c      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d11d      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x548>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ae4:	d118      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001af0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <HAL_ADC_ConfigChannel+0x5cc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b16:	e02e      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b11      	cmp	r3, #17
 8001b1e:	d10b      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x568>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b28:	d106      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b34:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b36:	e01e      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b12      	cmp	r3, #18
 8001b3e:	d11a      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b4a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b4c:	e013      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f043 0220 	orr.w	r2, r3, #32
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001b60:	e00a      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f043 0220 	orr.w	r2, r3, #32
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001b74:	e000      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b76:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	376c      	adds	r7, #108	@ 0x6c
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	50000100 	.word	0x50000100
 8001b94:	50000400 	.word	0x50000400
 8001b98:	50000500 	.word	0x50000500
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b099      	sub	sp, #100	@ 0x64
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bbc:	d102      	bne.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	e01a      	b.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d103      	bne.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001bce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	e011      	b.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a67      	ldr	r2, [pc, #412]	@ (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001be0:	4b66      	ldr	r3, [pc, #408]	@ (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	e009      	b.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a64      	ldr	r2, [pc, #400]	@ (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d102      	bne.n	8001bf6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001bf0:	4b61      	ldr	r3, [pc, #388]	@ (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	e001      	b.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b0      	b.n	8001d66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e0a9      	b.n	8001d66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 808d 	bne.w	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 8086 	bne.w	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c40:	d004      	beq.n	8001c4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a4b      	ldr	r2, [pc, #300]	@ (8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c4e:	e000      	b.n	8001c52 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c50:	4b4c      	ldr	r3, [pc, #304]	@ (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c52:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d040      	beq.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c6e:	035b      	lsls	r3, r3, #13
 8001c70:	430b      	orrs	r3, r1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c76:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d15c      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001cba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d14b      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001cc8:	f023 030f 	bic.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	6811      	ldr	r1, [r2, #0]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	6892      	ldr	r2, [r2, #8]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cda:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cdc:	e03c      	b.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ce8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d123      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d112      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d3a:	f023 030f 	bic.w	r3, r3, #15
 8001d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d42:	e009      	b.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f043 0220 	orr.w	r2, r3, #32
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001d56:	e000      	b.n	8001d5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001d66:	4618      	mov	r0, r3
 8001d68:	3764      	adds	r7, #100	@ 0x64
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	50000100 	.word	0x50000100
 8001d78:	50000400 	.word	0x50000400
 8001d7c:	50000500 	.word	0x50000500
 8001d80:	50000300 	.word	0x50000300
 8001d84:	50000700 	.word	0x50000700

08001d88 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <ADC_Disable+0x2c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <ADC_Disable+0x2c>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <ADC_Disable+0x2e>
 8001db4:	2300      	movs	r3, #0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d047      	beq.n	8001e4a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030d 	and.w	r3, r3, #13
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10f      	bne.n	8001de8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0202 	orr.w	r2, r2, #2
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001de0:	f7ff fa0a 	bl	80011f8 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001de6:	e029      	b.n	8001e3c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f043 0210 	orr.w	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e023      	b.n	8001e4c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e04:	f7ff f9f8 	bl	80011f8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d914      	bls.n	8001e3c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10d      	bne.n	8001e3c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f043 0210 	orr.w	r2, r3, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e007      	b.n	8001e4c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d0dc      	beq.n	8001e04 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	@ (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	@ (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	@ (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	@ 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	e154      	b.n	8002332 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8146 	beq.w	800232c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d005      	beq.n	80020b8 <HAL_GPIO_Init+0x40>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d130      	bne.n	800211a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ee:	2201      	movs	r2, #1
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	f003 0201 	and.w	r2, r3, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b03      	cmp	r3, #3
 8002124:	d017      	beq.n	8002156 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d123      	bne.n	80021aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	6939      	ldr	r1, [r7, #16]
 80021a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0203 	and.w	r2, r3, #3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80a0 	beq.w	800232c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ec:	4b58      	ldr	r3, [pc, #352]	@ (8002350 <HAL_GPIO_Init+0x2d8>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a57      	ldr	r2, [pc, #348]	@ (8002350 <HAL_GPIO_Init+0x2d8>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b55      	ldr	r3, [pc, #340]	@ (8002350 <HAL_GPIO_Init+0x2d8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002204:	4a53      	ldr	r2, [pc, #332]	@ (8002354 <HAL_GPIO_Init+0x2dc>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800222e:	d019      	beq.n	8002264 <HAL_GPIO_Init+0x1ec>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_GPIO_Init+0x2e0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <HAL_GPIO_Init+0x1e8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a48      	ldr	r2, [pc, #288]	@ (800235c <HAL_GPIO_Init+0x2e4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00d      	beq.n	800225c <HAL_GPIO_Init+0x1e4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a47      	ldr	r2, [pc, #284]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x1e0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a46      	ldr	r2, [pc, #280]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_GPIO_Init+0x1dc>
 8002250:	2304      	movs	r3, #4
 8002252:	e008      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002254:	2305      	movs	r3, #5
 8002256:	e006      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002258:	2303      	movs	r3, #3
 800225a:	e004      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 800225c:	2302      	movs	r3, #2
 800225e:	e002      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_GPIO_Init+0x1ee>
 8002264:	2300      	movs	r3, #0
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	f002 0203 	and.w	r2, r2, #3
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	4093      	lsls	r3, r2
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002276:	4937      	ldr	r1, [pc, #220]	@ (8002354 <HAL_GPIO_Init+0x2dc>)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002284:	4b38      	ldr	r3, [pc, #224]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022d2:	4a25      	ldr	r2, [pc, #148]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d8:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002302:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002326:	4a10      	ldr	r2, [pc, #64]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	f47f aea3 	bne.w	8002088 <HAL_GPIO_Init+0x10>
  }
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000
 8002354:	40010000 	.word	0x40010000
 8002358:	48000400 	.word	0x48000400
 800235c:	48000800 	.word	0x48000800
 8002360:	48000c00 	.word	0x48000c00
 8002364:	48001000 	.word	0x48001000
 8002368:	40010400 	.word	0x40010400

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002388:	e002      	b.n	8002390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08d      	b.n	80024ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fc5a 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	@ 0x24
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	e006      	b.n	8002424 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002422:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d108      	bne.n	800243e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	e007      	b.n	800244e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800244c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800245c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69d9      	ldr	r1, [r3, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1a      	ldr	r2, [r3, #32]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d138      	bne.n	800255a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e032      	b.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2224      	movs	r2, #36	@ 0x24
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002524:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6819      	ldr	r1, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	d139      	bne.n	80025f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002588:	2302      	movs	r3, #2
 800258a:	e033      	b.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	@ 0x24
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e000      	b.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
  }
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002606:	af00      	add	r7, sp, #0
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002610:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f001 b823 	b.w	800366c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 817d 	beq.w	8002936 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800263c:	4bbc      	ldr	r3, [pc, #752]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00c      	beq.n	8002662 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002648:	4bb9      	ldr	r3, [pc, #740]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d15c      	bne.n	800270e <HAL_RCC_OscConfig+0x10e>
 8002654:	4bb6      	ldr	r3, [pc, #728]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002660:	d155      	bne.n	800270e <HAL_RCC_OscConfig+0x10e>
 8002662:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002666:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002676:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_RCC_OscConfig+0x94>
 800268e:	4ba8      	ldr	r3, [pc, #672]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	e015      	b.n	80026c0 <HAL_RCC_OscConfig+0xc0>
 8002694:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002698:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80026a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ac:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80026b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80026bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026c4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80026c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026cc:	fa92 f2a2 	rbit	r2, r2
 80026d0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80026d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 811f 	beq.w	8002934 <HAL_RCC_OscConfig+0x334>
 80026f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 8116 	bne.w	8002934 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f000 bfaf 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x12e>
 8002720:	4b83      	ldr	r3, [pc, #524]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a82      	ldr	r2, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	e036      	b.n	800279c <HAL_RCC_OscConfig+0x19c>
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x158>
 800273e:	4b7c      	ldr	r3, [pc, #496]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7b      	ldr	r2, [pc, #492]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b79      	ldr	r3, [pc, #484]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a78      	ldr	r2, [pc, #480]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002750:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e021      	b.n	800279c <HAL_RCC_OscConfig+0x19c>
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0x184>
 800276a:	4b71      	ldr	r3, [pc, #452]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a70      	ldr	r2, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b6e      	ldr	r3, [pc, #440]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6d      	ldr	r2, [pc, #436]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0x19c>
 8002784:	4b6a      	ldr	r3, [pc, #424]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a69      	ldr	r2, [pc, #420]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b67      	ldr	r3, [pc, #412]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a66      	ldr	r2, [pc, #408]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800279c:	4b64      	ldr	r3, [pc, #400]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	f023 020f 	bic.w	r2, r3, #15
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	495f      	ldr	r1, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d059      	beq.n	800287a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fd17 	bl	80011f8 <HAL_GetTick>
 80027ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe fd12 	bl	80011f8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	@ 0x64
 80027de:	d902      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	f000 bf43 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
 80027e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80027fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d102      	bne.n	8002818 <HAL_RCC_OscConfig+0x218>
 8002812:	4b47      	ldr	r3, [pc, #284]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	e015      	b.n	8002844 <HAL_RCC_OscConfig+0x244>
 8002818:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800281c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800282c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002830:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002834:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002840:	4b3b      	ldr	r3, [pc, #236]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002848:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800284c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002850:	fa92 f2a2 	rbit	r2, r2
 8002854:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002858:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	f002 021f 	and.w	r2, r2, #31
 800286c:	2101      	movs	r1, #1
 800286e:	fa01 f202 	lsl.w	r2, r1, r2
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ab      	beq.n	80027d0 <HAL_RCC_OscConfig+0x1d0>
 8002878:	e05d      	b.n	8002936 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fcbd 	bl	80011f8 <HAL_GetTick>
 800287e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe fcb8 	bl	80011f8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	@ 0x64
 8002892:	d902      	bls.n	800289a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	f000 bee9 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
 800289a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800289e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80028ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0x2cc>
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e015      	b.n	80028f8 <HAL_RCC_OscConfig+0x2f8>
 80028cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_RCC_OscConfig+0x330>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028fc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002900:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800290c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ab      	bne.n	8002884 <HAL_RCC_OscConfig+0x284>
 800292c:	e003      	b.n	8002936 <HAL_RCC_OscConfig+0x336>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 817d 	beq.w	8002c46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800294c:	4ba6      	ldr	r3, [pc, #664]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002958:	4ba3      	ldr	r3, [pc, #652]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d172      	bne.n	8002a4a <HAL_RCC_OscConfig+0x44a>
 8002964:	4ba0      	ldr	r3, [pc, #640]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d16c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x44a>
 8002970:	2302      	movs	r3, #2
 8002972:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002982:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x3a0>
 800299a:	4b93      	ldr	r3, [pc, #588]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	e013      	b.n	80029c8 <HAL_RCC_OscConfig+0x3c8>
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80029b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80029c4:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	2202      	movs	r2, #2
 80029ca:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80029ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029d2:	fa92 f2a2 	rbit	r2, r2
 80029d6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80029da:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80029de:	fab2 f282 	clz	r2, r2
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f042 0220 	orr.w	r2, r2, #32
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f002 021f 	and.w	r2, r2, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCC_OscConfig+0x410>
 80029fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f000 be2e 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b75      	ldr	r3, [pc, #468]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	21f8      	movs	r1, #248	@ 0xf8
 8002a26:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a2e:	fa91 f1a1 	rbit	r1, r1
 8002a32:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a36:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a3a:	fab1 f181 	clz	r1, r1
 8002a3e:	b2c9      	uxtb	r1, r1
 8002a40:	408b      	lsls	r3, r1
 8002a42:	4969      	ldr	r1, [pc, #420]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a48:	e0fd      	b.n	8002c46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8088 	beq.w	8002b6c <HAL_RCC_OscConfig+0x56c>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	461a      	mov	r2, r3
 8002a84:	2301      	movs	r3, #1
 8002a86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fbb6 	bl	80011f8 <HAL_GetTick>
 8002a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fbb1 	bl	80011f8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	f000 bde2 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002aba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4d8>
 8002ad2:	4b45      	ldr	r3, [pc, #276]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	e013      	b.n	8002b00 <HAL_RCC_OscConfig+0x500>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002aea:	2302      	movs	r3, #2
 8002aec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002af0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002afc:	4b3a      	ldr	r3, [pc, #232]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	2202      	movs	r2, #2
 8002b02:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002b06:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002b0a:	fa92 f2a2 	rbit	r2, r2
 8002b0e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002b12:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b16:	fab2 f282 	clz	r2, r2
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f042 0220 	orr.w	r2, r2, #32
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f002 021f 	and.w	r2, r2, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0af      	beq.n	8002a92 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	21f8      	movs	r1, #248	@ 0xf8
 8002b48:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b50:	fa91 f1a1 	rbit	r1, r1
 8002b54:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b58:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b5c:	fab1 f181 	clz	r1, r1
 8002b60:	b2c9      	uxtb	r1, r1
 8002b62:	408b      	lsls	r3, r1
 8002b64:	4920      	ldr	r1, [pc, #128]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
 8002b6a:	e06c      	b.n	8002c46 <HAL_RCC_OscConfig+0x646>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	461a      	mov	r2, r3
 8002b94:	2300      	movs	r3, #0
 8002b96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fb2e 	bl	80011f8 <HAL_GetTick>
 8002b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fb29 	bl	80011f8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d902      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	f000 bd5a 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d104      	bne.n	8002bec <HAL_RCC_OscConfig+0x5ec>
 8002be2:	4b01      	ldr	r3, [pc, #4]	@ (8002be8 <HAL_RCC_OscConfig+0x5e8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0x614>
 8002be8:	40021000 	.word	0x40021000
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002c04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002c10:	4bc8      	ldr	r3, [pc, #800]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	2202      	movs	r2, #2
 8002c16:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002c1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c26:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ad      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8110 	beq.w	8002e7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d079      	beq.n	8002d60 <HAL_RCC_OscConfig+0x760>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4bab      	ldr	r3, [pc, #684]	@ (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	461a      	mov	r2, r3
 8002c92:	2301      	movs	r3, #1
 8002c94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c96:	f7fe faaf 	bl	80011f8 <HAL_GetTick>
 8002c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fe faaa 	bl	80011f8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d902      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	f000 bcdb 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ccc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d10:	4b88      	ldr	r3, [pc, #544]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	6019      	str	r1, [r3, #0]
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f1a3 	rbit	r1, r3
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d36:	6019      	str	r1, [r3, #0]
  return result;
 8002d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0a0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x6a0>
 8002d5e:	e08d      	b.n	8002e7c <HAL_RCC_OscConfig+0x87c>
 8002d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d82:	601a      	str	r2, [r3, #0]
  return result;
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b68      	ldr	r3, [pc, #416]	@ (8002f38 <HAL_RCC_OscConfig+0x938>)
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fa29 	bl	80011f8 <HAL_GetTick>
 8002da6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fa24 	bl	80011f8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d902      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f000 bc55 	b.w	800366c <HAL_RCC_OscConfig+0x106c>
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dca:	2202      	movs	r2, #2
 8002dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dee:	2202      	movs	r2, #2
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f2a3 	rbit	r2, r3
 8002e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e12:	2202      	movs	r2, #2
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2e:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	6019      	str	r1, [r3, #0]
 8002e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	fa93 f1a3 	rbit	r1, r3
 8002e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e54:	6019      	str	r1, [r3, #0]
  return result;
 8002e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d197      	bne.n	8002dac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 81a1 	beq.w	80031d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e98:	4b26      	ldr	r3, [pc, #152]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	4b23      	ldr	r3, [pc, #140]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	61d3      	str	r3, [r2, #28]
 8002eb0:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002eca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f3c <HAL_RCC_OscConfig+0x93c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ede:	4b17      	ldr	r3, [pc, #92]	@ (8002f3c <HAL_RCC_OscConfig+0x93c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a16      	ldr	r2, [pc, #88]	@ (8002f3c <HAL_RCC_OscConfig+0x93c>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe f985 	bl	80011f8 <HAL_GetTick>
 8002eee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	e009      	b.n	8002f08 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef4:	f7fe f980 	bl	80011f8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b64      	cmp	r3, #100	@ 0x64
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e3b1      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <HAL_RCC_OscConfig+0x93c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ef      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCC_OscConfig+0x940>
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a02      	ldr	r2, [pc, #8]	@ (8002f34 <HAL_RCC_OscConfig+0x934>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e03c      	b.n	8002fac <HAL_RCC_OscConfig+0x9ac>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	10908120 	.word	0x10908120
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x96a>
 8002f50:	4bc1      	ldr	r3, [pc, #772]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4ac0      	ldr	r2, [pc, #768]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	4bbe      	ldr	r3, [pc, #760]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4abd      	ldr	r2, [pc, #756]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f62:	f023 0304 	bic.w	r3, r3, #4
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	e020      	b.n	8002fac <HAL_RCC_OscConfig+0x9ac>
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x994>
 8002f7a:	4bb7      	ldr	r3, [pc, #732]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4ab6      	ldr	r2, [pc, #728]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	4bb4      	ldr	r3, [pc, #720]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4ab3      	ldr	r2, [pc, #716]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0x9ac>
 8002f94:	4bb0      	ldr	r3, [pc, #704]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4aaf      	ldr	r2, [pc, #700]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	4bad      	ldr	r3, [pc, #692]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4aac      	ldr	r2, [pc, #688]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8081 	beq.w	80030c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f91b 	bl	80011f8 <HAL_GetTick>
 8002fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe f916 	bl	80011f8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e345      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fe8:	2202      	movs	r2, #2
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003008:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800300c:	2202      	movs	r2, #2
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fa93 f2a3 	rbit	r2, r3
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003026:	601a      	str	r2, [r3, #0]
  return result;
 8003028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003030:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d102      	bne.n	800304c <HAL_RCC_OscConfig+0xa4c>
 8003046:	4b84      	ldr	r3, [pc, #528]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	e013      	b.n	8003074 <HAL_RCC_OscConfig+0xa74>
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003054:	2202      	movs	r2, #2
 8003056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	4b79      	ldr	r3, [pc, #484]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003078:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800307c:	2102      	movs	r1, #2
 800307e:	6011      	str	r1, [r2, #0]
 8003080:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003084:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	fa92 f1a2 	rbit	r1, r2
 800308e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003092:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003096:	6011      	str	r1, [r2, #0]
  return result;
 8003098:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800309c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	fab2 f282 	clz	r2, r2
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f002 021f 	and.w	r2, r2, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f202 	lsl.w	r2, r1, r2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d084      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x9c8>
 80030be:	e07f      	b.n	80031c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe f89a 	bl	80011f8 <HAL_GetTick>
 80030c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	e00b      	b.n	80030e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe f895 	bl	80011f8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e2c4      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030ea:	2202      	movs	r2, #2
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800310e:	2202      	movs	r2, #2
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003128:	601a      	str	r2, [r3, #0]
  return result;
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003132:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f043 0302 	orr.w	r3, r3, #2
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d102      	bne.n	800314e <HAL_RCC_OscConfig+0xb4e>
 8003148:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	e013      	b.n	8003176 <HAL_RCC_OscConfig+0xb76>
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003156:	2202      	movs	r2, #2
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	4b39      	ldr	r3, [pc, #228]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800317a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800317e:	2102      	movs	r1, #2
 8003180:	6011      	str	r1, [r2, #0]
 8003182:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003186:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	fa92 f1a2 	rbit	r1, r2
 8003190:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003194:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003198:	6011      	str	r1, [r2, #0]
  return result;
 800319a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f002 021f 	and.w	r2, r2, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d184      	bne.n	80030ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 80031ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8242 	beq.w	800366a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_RCC_OscConfig+0xc58>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	f000 8213 	beq.w	800361a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b02      	cmp	r3, #2
 8003202:	f040 8162 	bne.w	80034ca <HAL_RCC_OscConfig+0xeca>
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800320e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	fa93 f2a3 	rbit	r2, r3
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800322a:	601a      	str	r2, [r3, #0]
  return result;
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003234:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003240:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	461a      	mov	r2, r3
 8003248:	2300      	movs	r3, #0
 800324a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fd ffd4 	bl	80011f8 <HAL_GetTick>
 8003250:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003254:	e00c      	b.n	8003270 <HAL_RCC_OscConfig+0xc70>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325c:	f7fd ffcc 	bl	80011f8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1fd      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003278:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800327c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003290:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003294:	601a      	str	r2, [r3, #0]
  return result;
 8003296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800329e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_OscConfig+0xcba>
 80032b4:	4bb0      	ldr	r3, [pc, #704]	@ (8003578 <HAL_RCC_OscConfig+0xf78>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	e027      	b.n	800330a <HAL_RCC_OscConfig+0xd0a>
 80032ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032be:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	4b9c      	ldr	r3, [pc, #624]	@ (8003578 <HAL_RCC_OscConfig+0xf78>)
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800330e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003312:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003316:	6011      	str	r1, [r2, #0]
 8003318:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800331c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	fa92 f1a2 	rbit	r1, r2
 8003326:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800332a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800332e:	6011      	str	r1, [r2, #0]
  return result;
 8003330:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003334:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d182      	bne.n	800325c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003356:	4b88      	ldr	r3, [pc, #544]	@ (8003578 <HAL_RCC_OscConfig+0xf78>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	430b      	orrs	r3, r1
 8003378:	497f      	ldr	r1, [pc, #508]	@ (8003578 <HAL_RCC_OscConfig+0xf78>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003386:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800338a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033a2:	601a      	str	r2, [r3, #0]
  return result;
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	2301      	movs	r3, #1
 80033c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd ff18 	bl	80011f8 <HAL_GetTick>
 80033c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033cc:	e009      	b.n	80033e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fd ff13 	bl	80011f8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e144      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
 80033e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	fa93 f2a3 	rbit	r2, r3
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003406:	601a      	str	r2, [r3, #0]
  return result;
 8003408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003410:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_RCC_OscConfig+0xe2c>
 8003426:	4b54      	ldr	r3, [pc, #336]	@ (8003578 <HAL_RCC_OscConfig+0xf78>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	e027      	b.n	800347c <HAL_RCC_OscConfig+0xe7c>
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003434:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	fa93 f2a3 	rbit	r2, r3
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003456:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800345a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003464:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	4b3f      	ldr	r3, [pc, #252]	@ (8003578 <HAL_RCC_OscConfig+0xf78>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003480:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003484:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003488:	6011      	str	r1, [r2, #0]
 800348a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800348e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	fa92 f1a2 	rbit	r1, r2
 8003498:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800349c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034a0:	6011      	str	r1, [r2, #0]
  return result;
 80034a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d082      	beq.n	80033ce <HAL_RCC_OscConfig+0xdce>
 80034c8:	e0cf      	b.n	800366a <HAL_RCC_OscConfig+0x106a>
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	fa93 f2a3 	rbit	r2, r3
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034ee:	601a      	str	r2, [r3, #0]
  return result;
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003504:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	461a      	mov	r2, r3
 800350c:	2300      	movs	r3, #0
 800350e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fe72 	bl	80011f8 <HAL_GetTick>
 8003514:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	e009      	b.n	800352e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd fe6d 	bl	80011f8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e09e      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003536:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800353a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fa93 f2a3 	rbit	r2, r3
 800354a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003552:	601a      	str	r2, [r3, #0]
  return result;
 8003554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003558:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800355c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d104      	bne.n	800357c <HAL_RCC_OscConfig+0xf7c>
 8003572:	4b01      	ldr	r3, [pc, #4]	@ (8003578 <HAL_RCC_OscConfig+0xf78>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	e029      	b.n	80035cc <HAL_RCC_OscConfig+0xfcc>
 8003578:	40021000 	.word	0x40021000
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_RCC_OscConfig+0x1078>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035d4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035d8:	6011      	str	r1, [r2, #0]
 80035da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035de:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	fa92 f1a2 	rbit	r1, r2
 80035e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035f0:	6011      	str	r1, [r2, #0]
  return result;
 80035f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	fab2 f282 	clz	r2, r2
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	f042 0220 	orr.w	r2, r2, #32
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f002 021f 	and.w	r2, r2, #31
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d180      	bne.n	800351a <HAL_RCC_OscConfig+0xf1a>
 8003618:	e027      	b.n	800366a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e01e      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800362e:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_RCC_OscConfig+0x1078>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003636:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800363a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10b      	bne.n	8003666 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800364e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003652:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000

0800367c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b09e      	sub	sp, #120	@ 0x78
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e162      	b.n	800395a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003694:	4b90      	ldr	r3, [pc, #576]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d910      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b8d      	ldr	r3, [pc, #564]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 0207 	bic.w	r2, r3, #7
 80036aa:	498b      	ldr	r1, [pc, #556]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b89      	ldr	r3, [pc, #548]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e14a      	b.n	800395a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b82      	ldr	r3, [pc, #520]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	497f      	ldr	r1, [pc, #508]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80dc 	beq.w	80038a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d13c      	bne.n	8003772 <HAL_RCC_ClockConfig+0xf6>
 80036f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_RCC_ClockConfig+0xa6>
 800371c:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e00f      	b.n	8003742 <HAL_RCC_ClockConfig+0xc6>
 8003722:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003726:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003730:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003734:	663b      	str	r3, [r7, #96]	@ 0x60
 8003736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800373e:	4b67      	ldr	r3, [pc, #412]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003746:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800374a:	fa92 f2a2 	rbit	r2, r2
 800374e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003750:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003752:	fab2 f282 	clz	r2, r2
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f042 0220 	orr.w	r2, r2, #32
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f002 021f 	and.w	r2, r2, #31
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f202 	lsl.w	r2, r1, r2
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d17b      	bne.n	8003866 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0f3      	b.n	800395a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d13c      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x178>
 800377a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800377e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x128>
 800379e:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	e00f      	b.n	80037c4 <HAL_RCC_ClockConfig+0x148>
 80037a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80037b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c0:	4b46      	ldr	r3, [pc, #280]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037c8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037cc:	fa92 f2a2 	rbit	r2, r2
 80037d0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80037d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	f002 021f 	and.w	r2, r2, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d13a      	bne.n	8003866 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0b2      	b.n	800395a <HAL_RCC_ClockConfig+0x2de>
 80037f4:	2302      	movs	r3, #2
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_RCC_ClockConfig+0x1a0>
 8003816:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e00d      	b.n	8003838 <HAL_RCC_ClockConfig+0x1bc>
 800381c:	2302      	movs	r3, #2
 800381e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24
 8003828:	2302      	movs	r3, #2
 800382a:	623b      	str	r3, [r7, #32]
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	2202      	movs	r2, #2
 800383a:	61ba      	str	r2, [r7, #24]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	fa92 f2a2 	rbit	r2, r2
 8003842:	617a      	str	r2, [r7, #20]
  return result;
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	fab2 f282 	clz	r2, r2
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f042 0220 	orr.w	r2, r2, #32
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f002 021f 	and.w	r2, r2, #31
 8003856:	2101      	movs	r1, #1
 8003858:	fa01 f202 	lsl.w	r2, r1, r2
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e079      	b.n	800395a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	491a      	ldr	r1, [pc, #104]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7fd fcbe 	bl	80011f8 <HAL_GetTick>
 800387c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fcba 	bl	80011f8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e061      	b.n	800395a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <HAL_RCC_ClockConfig+0x260>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d214      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4906      	ldr	r1, [pc, #24]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <HAL_RCC_ClockConfig+0x25c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e040      	b.n	800395a <HAL_RCC_ClockConfig+0x2de>
 80038d8:	40022000 	.word	0x40022000
 80038dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <HAL_RCC_ClockConfig+0x2e8>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	491a      	ldr	r1, [pc, #104]	@ (8003964 <HAL_RCC_ClockConfig+0x2e8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390a:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <HAL_RCC_ClockConfig+0x2e8>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4912      	ldr	r1, [pc, #72]	@ (8003964 <HAL_RCC_ClockConfig+0x2e8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800391e:	f000 f829 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003922:	4601      	mov	r1, r0
 8003924:	4b0f      	ldr	r3, [pc, #60]	@ (8003964 <HAL_RCC_ClockConfig+0x2e8>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800392c:	22f0      	movs	r2, #240	@ 0xf0
 800392e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	fa92 f2a2 	rbit	r2, r2
 8003936:	60fa      	str	r2, [r7, #12]
  return result;
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	40d3      	lsrs	r3, r2
 8003942:	4a09      	ldr	r2, [pc, #36]	@ (8003968 <HAL_RCC_ClockConfig+0x2ec>)
 8003944:	5cd3      	ldrb	r3, [r2, r3]
 8003946:	fa21 f303 	lsr.w	r3, r1, r3
 800394a:	4a08      	ldr	r2, [pc, #32]	@ (800396c <HAL_RCC_ClockConfig+0x2f0>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800394e:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_RCC_ClockConfig+0x2f4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd fc0c 	bl	8001170 <HAL_InitTick>
  
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3778      	adds	r7, #120	@ 0x78
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	08005e7c 	.word	0x08005e7c
 800396c:	20000000 	.word	0x20000000
 8003970:	20000004 	.word	0x20000004

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800398e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x30>
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x36>
 80039a2:	e026      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80039a6:	613b      	str	r3, [r7, #16]
      break;
 80039a8:	e026      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0c9b      	lsrs	r3, r3, #18
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
 80039b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80039b8:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0x94>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	4a14      	ldr	r2, [pc, #80]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039d0:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e004      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	613b      	str	r3, [r7, #16]
      break;
 80039f0:	e002      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039f2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0xa8>)
 80039f4:	613b      	str	r3, [r7, #16]
      break;
 80039f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f8:	693b      	ldr	r3, [r7, #16]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	08005e94 	.word	0x08005e94
 8003a14:	08005ea4 	.word	0x08005ea4
 8003a18:	003d0900 	.word	0x003d0900
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000000 	.word	0x20000000

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a3e:	f7ff ffef 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a42:	4601      	mov	r1, r0
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a4c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	fa92 f2a2 	rbit	r2, r2
 8003a58:	603a      	str	r2, [r7, #0]
  return result;
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	fab2 f282 	clz	r2, r2
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	40d3      	lsrs	r3, r2
 8003a64:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08005e8c 	.word	0x08005e8c

08003a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a82:	f7ff ffcd 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a86:	4601      	mov	r1, r0
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a90:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	fa92 f2a2 	rbit	r2, r2
 8003a9c:	603a      	str	r2, [r7, #0]
  return result;
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	fab2 f282 	clz	r2, r2
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	40d3      	lsrs	r3, r2
 8003aa8:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08005e8c 	.word	0x08005e8c

08003ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b092      	sub	sp, #72	@ 0x48
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80d4 	beq.w	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10e      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	4a4a      	ldr	r2, [pc, #296]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	61d3      	str	r3, [r2, #28]
 8003afc:	4b48      	ldr	r3, [pc, #288]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b45      	ldr	r3, [pc, #276]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d118      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1a:	4b42      	ldr	r3, [pc, #264]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a41      	ldr	r2, [pc, #260]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b26:	f7fd fb67 	bl	80011f8 <HAL_GetTick>
 8003b2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fd fb63 	bl	80011f8 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	@ 0x64
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e169      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b4c:	4b34      	ldr	r3, [pc, #208]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8084 	beq.w	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d07c      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b26      	ldr	r3, [pc, #152]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	2301      	movs	r3, #1
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bbe:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04b      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fd fb13 	bl	80011f8 <HAL_GetTick>
 8003bd2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd fb0f 	bl	80011f8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e113      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003bec:	2302      	movs	r3, #2
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	61fb      	str	r3, [r7, #28]
  return result;
 8003c04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d108      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c1a:	4b01      	ldr	r3, [pc, #4]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	e00d      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
 8003c28:	10908100 	.word	0x10908100
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	4b78      	ldr	r3, [pc, #480]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	613a      	str	r2, [r7, #16]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	60fa      	str	r2, [r7, #12]
  return result;
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0b7      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c66:	4b6d      	ldr	r3, [pc, #436]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	496a      	ldr	r1, [pc, #424]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b66      	ldr	r3, [pc, #408]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4a65      	ldr	r2, [pc, #404]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c98:	4b60      	ldr	r3, [pc, #384]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	f023 0203 	bic.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	495d      	ldr	r1, [pc, #372]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb6:	4b59      	ldr	r3, [pc, #356]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4956      	ldr	r1, [pc, #344]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cd4:	4b51      	ldr	r3, [pc, #324]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	494e      	ldr	r1, [pc, #312]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	f023 0210 	bic.w	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	4947      	ldr	r1, [pc, #284]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d10:	4b42      	ldr	r3, [pc, #264]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	493f      	ldr	r1, [pc, #252]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f023 0220 	bic.w	r2, r3, #32
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4938      	ldr	r1, [pc, #224]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d4c:	4b33      	ldr	r3, [pc, #204]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4930      	ldr	r1, [pc, #192]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	4929      	ldr	r1, [pc, #164]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d88:	4b24      	ldr	r3, [pc, #144]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	4921      	ldr	r1, [pc, #132]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003da6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	491a      	ldr	r1, [pc, #104]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003dc4:	4b15      	ldr	r3, [pc, #84]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	4912      	ldr	r1, [pc, #72]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003de2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	490b      	ldr	r1, [pc, #44]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e00:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0c:	4903      	ldr	r1, [pc, #12]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3748      	adds	r7, #72	@ 0x48
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e09d      	b.n	8003f6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e42:	d009      	beq.n	8003e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	61da      	str	r2, [r3, #28]
 8003e4a:	e005      	b.n	8003e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc ff46 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e98:	d902      	bls.n	8003ea0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e002      	b.n	8003ea6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003eae:	d007      	beq.n	8003ec0 <HAL_SPI_Init+0xa0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003eb8:	d002      	beq.n	8003ec0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f02:	ea42 0103 	orr.w	r1, r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	f003 0204 	and.w	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e049      	b.n	800401c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fc fef5 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f000 fca5 	bl	8004904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e049      	b.n	80040ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f841 	bl	80040d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f000 fc4e 	bl	8004904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e049      	b.n	800418c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f841 	bl	8004194 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 fbed 	bl	8004904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0202 	mvn.w	r2, #2
 80041dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fb67 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fb59 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fb6a 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d020      	beq.n	8004258 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0204 	mvn.w	r2, #4
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fb41 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fb33 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb44 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0208 	mvn.w	r2, #8
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2204      	movs	r2, #4
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb1b 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fb0d 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb1e 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0210 	mvn.w	r2, #16
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2208      	movs	r2, #8
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 faf5 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fae7 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 faf8 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0201 	mvn.w	r2, #1
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fac5 	bl	800489e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f001 f918 	bl	8005568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f001 f910 	bl	800557c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fab7 	bl	80048ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0220 	mvn.w	r2, #32
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 f8d8 	bl	8005554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e088      	b.n	80044dc <HAL_TIM_IC_ConfigChannel+0x130>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80043e8:	f000 fdfe 	bl	8004fe8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 020c 	bic.w	r2, r2, #12
 80043fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6999      	ldr	r1, [r3, #24]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	619a      	str	r2, [r3, #24]
 800440e:	e060      	b.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b04      	cmp	r3, #4
 8004414:	d11c      	bne.n	8004450 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004426:	f000 fe76 	bl	8005116 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004438:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6999      	ldr	r1, [r3, #24]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	021a      	lsls	r2, r3, #8
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]
 800444e:	e040      	b.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b08      	cmp	r3, #8
 8004454:	d11b      	bne.n	800448e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004466:	f000 fec3 	bl	80051f0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 020c 	bic.w	r2, r2, #12
 8004478:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69d9      	ldr	r1, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	61da      	str	r2, [r3, #28]
 800448c:	e021      	b.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d11c      	bne.n	80044ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80044a4:	f000 fee0 	bl	8005268 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80044b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69d9      	ldr	r1, [r3, #28]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	021a      	lsls	r2, r3, #8
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	61da      	str	r2, [r3, #28]
 80044cc:	e001      	b.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044fe:	2302      	movs	r3, #2
 8004500:	e0ff      	b.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b14      	cmp	r3, #20
 800450e:	f200 80f0 	bhi.w	80046f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004512:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800456d 	.word	0x0800456d
 800451c:	080046f3 	.word	0x080046f3
 8004520:	080046f3 	.word	0x080046f3
 8004524:	080046f3 	.word	0x080046f3
 8004528:	080045ad 	.word	0x080045ad
 800452c:	080046f3 	.word	0x080046f3
 8004530:	080046f3 	.word	0x080046f3
 8004534:	080046f3 	.word	0x080046f3
 8004538:	080045ef 	.word	0x080045ef
 800453c:	080046f3 	.word	0x080046f3
 8004540:	080046f3 	.word	0x080046f3
 8004544:	080046f3 	.word	0x080046f3
 8004548:	0800462f 	.word	0x0800462f
 800454c:	080046f3 	.word	0x080046f3
 8004550:	080046f3 	.word	0x080046f3
 8004554:	080046f3 	.word	0x080046f3
 8004558:	08004671 	.word	0x08004671
 800455c:	080046f3 	.word	0x080046f3
 8004560:	080046f3 	.word	0x080046f3
 8004564:	080046f3 	.word	0x080046f3
 8004568:	080046b1 	.word	0x080046b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fa62 	bl	8004a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0208 	orr.w	r2, r2, #8
 8004586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
      break;
 80045aa:	e0a5      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fad2 	bl	8004b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6999      	ldr	r1, [r3, #24]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	021a      	lsls	r2, r3, #8
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	619a      	str	r2, [r3, #24]
      break;
 80045ec:	e084      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fb3b 	bl	8004c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0208 	orr.w	r2, r2, #8
 8004608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0204 	bic.w	r2, r2, #4
 8004618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69d9      	ldr	r1, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	61da      	str	r2, [r3, #28]
      break;
 800462c:	e064      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fba3 	bl	8004d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	61da      	str	r2, [r3, #28]
      break;
 800466e:	e043      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fbec 	bl	8004e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0208 	orr.w	r2, r2, #8
 800468a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0204 	bic.w	r2, r2, #4
 800469a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80046ae:	e023      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fc30 	bl	8004f1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	021a      	lsls	r2, r3, #8
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80046f0:	e002      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
      break;
 80046f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004700:	7dfb      	ldrb	r3, [r7, #23]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop

0800470c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_TIM_ConfigClockSource+0x1c>
 8004724:	2302      	movs	r3, #2
 8004726:	e0b6      	b.n	8004896 <HAL_TIM_ConfigClockSource+0x18a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004746:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800474a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004764:	d03e      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0xd8>
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800476a:	f200 8087 	bhi.w	800487c <HAL_TIM_ConfigClockSource+0x170>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004772:	f000 8086 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x176>
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477a:	d87f      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x170>
 800477c:	2b70      	cmp	r3, #112	@ 0x70
 800477e:	d01a      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0xaa>
 8004780:	2b70      	cmp	r3, #112	@ 0x70
 8004782:	d87b      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x170>
 8004784:	2b60      	cmp	r3, #96	@ 0x60
 8004786:	d050      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x11e>
 8004788:	2b60      	cmp	r3, #96	@ 0x60
 800478a:	d877      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x170>
 800478c:	2b50      	cmp	r3, #80	@ 0x50
 800478e:	d03c      	beq.n	800480a <HAL_TIM_ConfigClockSource+0xfe>
 8004790:	2b50      	cmp	r3, #80	@ 0x50
 8004792:	d873      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x170>
 8004794:	2b40      	cmp	r3, #64	@ 0x40
 8004796:	d058      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x13e>
 8004798:	2b40      	cmp	r3, #64	@ 0x40
 800479a:	d86f      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x170>
 800479c:	2b30      	cmp	r3, #48	@ 0x30
 800479e:	d064      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15e>
 80047a0:	2b30      	cmp	r3, #48	@ 0x30
 80047a2:	d86b      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x170>
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d060      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15e>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d867      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x170>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05c      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15e>
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d05a      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15e>
 80047b4:	e062      	b.n	800487c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	f000 fda7 	bl	8005318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	609a      	str	r2, [r3, #8]
      break;
 80047e2:	e04f      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	f000 fd90 	bl	8005318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004806:	609a      	str	r2, [r3, #8]
      break;
 8004808:	e03c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	461a      	mov	r2, r3
 8004818:	f000 fc4e 	bl	80050b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2150      	movs	r1, #80	@ 0x50
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fd5d 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 8004828:	e02c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004836:	461a      	mov	r2, r3
 8004838:	f000 fcaa 	bl	8005190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2160      	movs	r1, #96	@ 0x60
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fd4d 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 8004848:	e01c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	461a      	mov	r2, r3
 8004858:	f000 fc2e 	bl	80050b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2140      	movs	r1, #64	@ 0x40
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fd3d 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 8004868:	e00c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f000 fd34 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 800487a:	e003      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      break;
 8004880:	e000      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a42      	ldr	r2, [pc, #264]	@ (8004a20 <TIM_Base_SetConfig+0x11c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <TIM_Base_SetConfig+0x38>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004922:	d00b      	beq.n	800493c <TIM_Base_SetConfig+0x38>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a3f      	ldr	r2, [pc, #252]	@ (8004a24 <TIM_Base_SetConfig+0x120>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_Base_SetConfig+0x38>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a28 <TIM_Base_SetConfig+0x124>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_Base_SetConfig+0x38>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3d      	ldr	r2, [pc, #244]	@ (8004a2c <TIM_Base_SetConfig+0x128>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d108      	bne.n	800494e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a33      	ldr	r2, [pc, #204]	@ (8004a20 <TIM_Base_SetConfig+0x11c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01b      	beq.n	800498e <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495c:	d017      	beq.n	800498e <TIM_Base_SetConfig+0x8a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a30      	ldr	r2, [pc, #192]	@ (8004a24 <TIM_Base_SetConfig+0x120>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <TIM_Base_SetConfig+0x8a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2f      	ldr	r2, [pc, #188]	@ (8004a28 <TIM_Base_SetConfig+0x124>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00f      	beq.n	800498e <TIM_Base_SetConfig+0x8a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a2e      	ldr	r2, [pc, #184]	@ (8004a2c <TIM_Base_SetConfig+0x128>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_Base_SetConfig+0x8a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2d      	ldr	r2, [pc, #180]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2c      	ldr	r2, [pc, #176]	@ (8004a34 <TIM_Base_SetConfig+0x130>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_Base_SetConfig+0x8a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2b      	ldr	r2, [pc, #172]	@ (8004a38 <TIM_Base_SetConfig+0x134>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d108      	bne.n	80049a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <TIM_Base_SetConfig+0x11c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00f      	beq.n	80049ec <TIM_Base_SetConfig+0xe8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <TIM_Base_SetConfig+0x128>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00b      	beq.n	80049ec <TIM_Base_SetConfig+0xe8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a16      	ldr	r2, [pc, #88]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <TIM_Base_SetConfig+0xe8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a15      	ldr	r2, [pc, #84]	@ (8004a34 <TIM_Base_SetConfig+0x130>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_Base_SetConfig+0xe8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a14      	ldr	r2, [pc, #80]	@ (8004a38 <TIM_Base_SetConfig+0x134>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]
  }
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40013400 	.word	0x40013400
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40014400 	.word	0x40014400
 8004a38:	40014800 	.word	0x40014800

08004a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f023 0201 	bic.w	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 0302 	bic.w	r3, r3, #2
 8004a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a2c      	ldr	r2, [pc, #176]	@ (8004b48 <TIM_OC1_SetConfig+0x10c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00f      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b4c <TIM_OC1_SetConfig+0x110>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b50 <TIM_OC1_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a29      	ldr	r2, [pc, #164]	@ (8004b54 <TIM_OC1_SetConfig+0x118>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_OC1_SetConfig+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a28      	ldr	r2, [pc, #160]	@ (8004b58 <TIM_OC1_SetConfig+0x11c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10c      	bne.n	8004ad6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0308 	bic.w	r3, r3, #8
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b48 <TIM_OC1_SetConfig+0x10c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00f      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b4c <TIM_OC1_SetConfig+0x110>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	@ (8004b50 <TIM_OC1_SetConfig+0x114>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <TIM_OC1_SetConfig+0x118>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_OC1_SetConfig+0xc2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <TIM_OC1_SetConfig+0x11c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40013400 	.word	0x40013400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f023 0210 	bic.w	r2, r3, #16
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0320 	bic.w	r3, r3, #32
 8004baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a28      	ldr	r2, [pc, #160]	@ (8004c5c <TIM_OC2_SetConfig+0x100>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC2_SetConfig+0x6c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a27      	ldr	r2, [pc, #156]	@ (8004c60 <TIM_OC2_SetConfig+0x104>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10d      	bne.n	8004be4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004be2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <TIM_OC2_SetConfig+0x100>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a1c      	ldr	r2, [pc, #112]	@ (8004c60 <TIM_OC2_SetConfig+0x104>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <TIM_OC2_SetConfig+0x108>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8004c68 <TIM_OC2_SetConfig+0x10c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC2_SetConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <TIM_OC2_SetConfig+0x110>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d113      	bne.n	8004c34 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c12:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c1a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800

08004c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a27      	ldr	r2, [pc, #156]	@ (8004d6c <TIM_OC3_SetConfig+0xfc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC3_SetConfig+0x6a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	@ (8004d70 <TIM_OC3_SetConfig+0x100>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d10d      	bne.n	8004cf6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cf4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <TIM_OC3_SetConfig+0xfc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00f      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	@ (8004d70 <TIM_OC3_SetConfig+0x100>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1a      	ldr	r2, [pc, #104]	@ (8004d74 <TIM_OC3_SetConfig+0x104>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a19      	ldr	r2, [pc, #100]	@ (8004d78 <TIM_OC3_SetConfig+0x108>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_OC3_SetConfig+0xae>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a18      	ldr	r2, [pc, #96]	@ (8004d7c <TIM_OC3_SetConfig+0x10c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d113      	bne.n	8004d46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	031b      	lsls	r3, r3, #12
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a18      	ldr	r2, [pc, #96]	@ (8004e40 <TIM_OC4_SetConfig+0xc0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a17      	ldr	r2, [pc, #92]	@ (8004e44 <TIM_OC4_SetConfig+0xc4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <TIM_OC4_SetConfig+0xc8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <TIM_OC4_SetConfig+0xcc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC4_SetConfig+0x84>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a14      	ldr	r2, [pc, #80]	@ (8004e50 <TIM_OC4_SetConfig+0xd0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d109      	bne.n	8004e18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a17      	ldr	r2, [pc, #92]	@ (8004f08 <TIM_OC5_SetConfig+0xb4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a16      	ldr	r2, [pc, #88]	@ (8004f0c <TIM_OC5_SetConfig+0xb8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a15      	ldr	r2, [pc, #84]	@ (8004f10 <TIM_OC5_SetConfig+0xbc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a14      	ldr	r2, [pc, #80]	@ (8004f14 <TIM_OC5_SetConfig+0xc0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC5_SetConfig+0x7a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	@ (8004f18 <TIM_OC5_SetConfig+0xc4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d109      	bne.n	8004ee2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40013400 	.word	0x40013400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800

08004f1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	051b      	lsls	r3, r3, #20
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a18      	ldr	r2, [pc, #96]	@ (8004fd4 <TIM_OC6_SetConfig+0xb8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a17      	ldr	r2, [pc, #92]	@ (8004fd8 <TIM_OC6_SetConfig+0xbc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <TIM_OC6_SetConfig+0xc0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <TIM_OC6_SetConfig+0xc4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC6_SetConfig+0x7c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <TIM_OC6_SetConfig+0xc8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d109      	bne.n	8004fac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800

08004fe8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f023 0201 	bic.w	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a24      	ldr	r2, [pc, #144]	@ (80050a4 <TIM_TI1_SetConfig+0xbc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_TI1_SetConfig+0x56>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d00f      	beq.n	800503e <TIM_TI1_SetConfig+0x56>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a21      	ldr	r2, [pc, #132]	@ (80050a8 <TIM_TI1_SetConfig+0xc0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_TI1_SetConfig+0x56>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a20      	ldr	r2, [pc, #128]	@ (80050ac <TIM_TI1_SetConfig+0xc4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_TI1_SetConfig+0x56>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <TIM_TI1_SetConfig+0xc8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_TI1_SetConfig+0x56>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a1e      	ldr	r2, [pc, #120]	@ (80050b4 <TIM_TI1_SetConfig+0xcc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <TIM_TI1_SetConfig+0x5a>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <TIM_TI1_SetConfig+0x5c>
 8005042:	2300      	movs	r3, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e003      	b.n	8005062 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	b2db      	uxtb	r3, r3
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f023 030a 	bic.w	r3, r3, #10
 800507c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f003 030a 	and.w	r3, r3, #10
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000

080050b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0201 	bic.w	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 030a 	bic.w	r3, r3, #10
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	031b      	lsls	r3, r3, #12
 800515a:	b29b      	uxth	r3, r3
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005168:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	621a      	str	r2, [r3, #32]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0210 	bic.w	r2, r3, #16
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	031b      	lsls	r3, r3, #12
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	621a      	str	r2, [r3, #32]
}
 80051e4:	bf00      	nop
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f023 0303 	bic.w	r3, r3, #3
 800521c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800522c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	b2db      	uxtb	r3, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005240:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	621a      	str	r2, [r3, #32]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005294:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	031b      	lsls	r3, r3, #12
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80052ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	031b      	lsls	r3, r3, #12
 80052c0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f043 0307 	orr.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	021a      	lsls	r2, r3, #8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	431a      	orrs	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800536c:	2302      	movs	r3, #2
 800536e:	e063      	b.n	8005438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2b      	ldr	r2, [pc, #172]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2a      	ldr	r2, [pc, #168]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d108      	bne.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e2:	d013      	beq.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a18      	ldr	r2, [pc, #96]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a12      	ldr	r2, [pc, #72]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10c      	bne.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40014000 	.word	0x40014000

08005458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005470:	2302      	movs	r3, #2
 8005472:	e065      	b.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a16      	ldr	r2, [pc, #88]	@ (800554c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d004      	beq.n	8005502 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a14      	ldr	r2, [pc, #80]	@ (8005550 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d115      	bne.n	800552e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	051b      	lsls	r3, r3, #20
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40013400 	.word	0x40013400

08005554 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e040      	b.n	8005624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb fd0c 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	@ 0x24
 80055bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9fc 	bl	80059d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f825 	bl	800562c <UART_SetConfig>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e01b      	b.n	8005624 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800560a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fa7b 	bl	8005b18 <UART_CheckIdleState>
 8005622:	4603      	mov	r3, r0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800565a:	f023 030c 	bic.w	r3, r3, #12
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	6979      	ldr	r1, [r7, #20]
 8005664:	430b      	orrs	r3, r1
 8005666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	430a      	orrs	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4aa7      	ldr	r2, [pc, #668]	@ (8005944 <UART_SetConfig+0x318>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d120      	bne.n	80056ee <UART_SetConfig+0xc2>
 80056ac:	4ba6      	ldr	r3, [pc, #664]	@ (8005948 <UART_SetConfig+0x31c>)
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d817      	bhi.n	80056e8 <UART_SetConfig+0xbc>
 80056b8:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x94>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056dd 	.word	0x080056dd
 80056c8:	080056e3 	.word	0x080056e3
 80056cc:	080056d7 	.word	0x080056d7
 80056d0:	2301      	movs	r3, #1
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e0b5      	b.n	8005842 <UART_SetConfig+0x216>
 80056d6:	2302      	movs	r3, #2
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e0b2      	b.n	8005842 <UART_SetConfig+0x216>
 80056dc:	2304      	movs	r3, #4
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e0af      	b.n	8005842 <UART_SetConfig+0x216>
 80056e2:	2308      	movs	r3, #8
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e0ac      	b.n	8005842 <UART_SetConfig+0x216>
 80056e8:	2310      	movs	r3, #16
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e0a9      	b.n	8005842 <UART_SetConfig+0x216>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a96      	ldr	r2, [pc, #600]	@ (800594c <UART_SetConfig+0x320>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d124      	bne.n	8005742 <UART_SetConfig+0x116>
 80056f8:	4b93      	ldr	r3, [pc, #588]	@ (8005948 <UART_SetConfig+0x31c>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005700:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005704:	d011      	beq.n	800572a <UART_SetConfig+0xfe>
 8005706:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800570a:	d817      	bhi.n	800573c <UART_SetConfig+0x110>
 800570c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005710:	d011      	beq.n	8005736 <UART_SetConfig+0x10a>
 8005712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005716:	d811      	bhi.n	800573c <UART_SetConfig+0x110>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <UART_SetConfig+0xf8>
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d006      	beq.n	8005730 <UART_SetConfig+0x104>
 8005722:	e00b      	b.n	800573c <UART_SetConfig+0x110>
 8005724:	2300      	movs	r3, #0
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e08b      	b.n	8005842 <UART_SetConfig+0x216>
 800572a:	2302      	movs	r3, #2
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e088      	b.n	8005842 <UART_SetConfig+0x216>
 8005730:	2304      	movs	r3, #4
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e085      	b.n	8005842 <UART_SetConfig+0x216>
 8005736:	2308      	movs	r3, #8
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e082      	b.n	8005842 <UART_SetConfig+0x216>
 800573c:	2310      	movs	r3, #16
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e07f      	b.n	8005842 <UART_SetConfig+0x216>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a82      	ldr	r2, [pc, #520]	@ (8005950 <UART_SetConfig+0x324>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d124      	bne.n	8005796 <UART_SetConfig+0x16a>
 800574c:	4b7e      	ldr	r3, [pc, #504]	@ (8005948 <UART_SetConfig+0x31c>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005750:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005754:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005758:	d011      	beq.n	800577e <UART_SetConfig+0x152>
 800575a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800575e:	d817      	bhi.n	8005790 <UART_SetConfig+0x164>
 8005760:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005764:	d011      	beq.n	800578a <UART_SetConfig+0x15e>
 8005766:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800576a:	d811      	bhi.n	8005790 <UART_SetConfig+0x164>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <UART_SetConfig+0x14c>
 8005770:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005774:	d006      	beq.n	8005784 <UART_SetConfig+0x158>
 8005776:	e00b      	b.n	8005790 <UART_SetConfig+0x164>
 8005778:	2300      	movs	r3, #0
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e061      	b.n	8005842 <UART_SetConfig+0x216>
 800577e:	2302      	movs	r3, #2
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e05e      	b.n	8005842 <UART_SetConfig+0x216>
 8005784:	2304      	movs	r3, #4
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e05b      	b.n	8005842 <UART_SetConfig+0x216>
 800578a:	2308      	movs	r3, #8
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e058      	b.n	8005842 <UART_SetConfig+0x216>
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e055      	b.n	8005842 <UART_SetConfig+0x216>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a6e      	ldr	r2, [pc, #440]	@ (8005954 <UART_SetConfig+0x328>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d124      	bne.n	80057ea <UART_SetConfig+0x1be>
 80057a0:	4b69      	ldr	r3, [pc, #420]	@ (8005948 <UART_SetConfig+0x31c>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80057a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057ac:	d011      	beq.n	80057d2 <UART_SetConfig+0x1a6>
 80057ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057b2:	d817      	bhi.n	80057e4 <UART_SetConfig+0x1b8>
 80057b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057b8:	d011      	beq.n	80057de <UART_SetConfig+0x1b2>
 80057ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057be:	d811      	bhi.n	80057e4 <UART_SetConfig+0x1b8>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <UART_SetConfig+0x1a0>
 80057c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c8:	d006      	beq.n	80057d8 <UART_SetConfig+0x1ac>
 80057ca:	e00b      	b.n	80057e4 <UART_SetConfig+0x1b8>
 80057cc:	2300      	movs	r3, #0
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e037      	b.n	8005842 <UART_SetConfig+0x216>
 80057d2:	2302      	movs	r3, #2
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e034      	b.n	8005842 <UART_SetConfig+0x216>
 80057d8:	2304      	movs	r3, #4
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e031      	b.n	8005842 <UART_SetConfig+0x216>
 80057de:	2308      	movs	r3, #8
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e02e      	b.n	8005842 <UART_SetConfig+0x216>
 80057e4:	2310      	movs	r3, #16
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e02b      	b.n	8005842 <UART_SetConfig+0x216>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a5a      	ldr	r2, [pc, #360]	@ (8005958 <UART_SetConfig+0x32c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d124      	bne.n	800583e <UART_SetConfig+0x212>
 80057f4:	4b54      	ldr	r3, [pc, #336]	@ (8005948 <UART_SetConfig+0x31c>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80057fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005800:	d011      	beq.n	8005826 <UART_SetConfig+0x1fa>
 8005802:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005806:	d817      	bhi.n	8005838 <UART_SetConfig+0x20c>
 8005808:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800580c:	d011      	beq.n	8005832 <UART_SetConfig+0x206>
 800580e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005812:	d811      	bhi.n	8005838 <UART_SetConfig+0x20c>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <UART_SetConfig+0x1f4>
 8005818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800581c:	d006      	beq.n	800582c <UART_SetConfig+0x200>
 800581e:	e00b      	b.n	8005838 <UART_SetConfig+0x20c>
 8005820:	2300      	movs	r3, #0
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e00d      	b.n	8005842 <UART_SetConfig+0x216>
 8005826:	2302      	movs	r3, #2
 8005828:	77fb      	strb	r3, [r7, #31]
 800582a:	e00a      	b.n	8005842 <UART_SetConfig+0x216>
 800582c:	2304      	movs	r3, #4
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e007      	b.n	8005842 <UART_SetConfig+0x216>
 8005832:	2308      	movs	r3, #8
 8005834:	77fb      	strb	r3, [r7, #31]
 8005836:	e004      	b.n	8005842 <UART_SetConfig+0x216>
 8005838:	2310      	movs	r3, #16
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e001      	b.n	8005842 <UART_SetConfig+0x216>
 800583e:	2310      	movs	r3, #16
 8005840:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584a:	d15b      	bne.n	8005904 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800584c:	7ffb      	ldrb	r3, [r7, #31]
 800584e:	2b08      	cmp	r3, #8
 8005850:	d827      	bhi.n	80058a2 <UART_SetConfig+0x276>
 8005852:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <UART_SetConfig+0x22c>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fe f8dc 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005880:	61b8      	str	r0, [r7, #24]
        break;
 8005882:	e013      	b.n	80058ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe f8fa 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8005888:	61b8      	str	r0, [r7, #24]
        break;
 800588a:	e00f      	b.n	80058ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b33      	ldr	r3, [pc, #204]	@ (800595c <UART_SetConfig+0x330>)
 800588e:	61bb      	str	r3, [r7, #24]
        break;
 8005890:	e00c      	b.n	80058ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fe f86f 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8005896:	61b8      	str	r0, [r7, #24]
        break;
 8005898:	e008      	b.n	80058ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589e:	61bb      	str	r3, [r7, #24]
        break;
 80058a0:	e004      	b.n	80058ac <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	77bb      	strb	r3, [r7, #30]
        break;
 80058aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8082 	beq.w	80059b8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	005a      	lsls	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	441a      	add	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d916      	bls.n	80058fe <UART_SetConfig+0x2d2>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d6:	d212      	bcs.n	80058fe <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f023 030f 	bic.w	r3, r3, #15
 80058e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	89fb      	ldrh	r3, [r7, #14]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	89fa      	ldrh	r2, [r7, #14]
 80058fa:	60da      	str	r2, [r3, #12]
 80058fc:	e05c      	b.n	80059b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	77bb      	strb	r3, [r7, #30]
 8005902:	e059      	b.n	80059b8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	2b08      	cmp	r3, #8
 8005908:	d835      	bhi.n	8005976 <UART_SetConfig+0x34a>
 800590a:	a201      	add	r2, pc, #4	@ (adr r2, 8005910 <UART_SetConfig+0x2e4>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005935 	.word	0x08005935
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005961 	.word	0x08005961
 800591c:	08005977 	.word	0x08005977
 8005920:	08005967 	.word	0x08005967
 8005924:	08005977 	.word	0x08005977
 8005928:	08005977 	.word	0x08005977
 800592c:	08005977 	.word	0x08005977
 8005930:	0800596f 	.word	0x0800596f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fe f880 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005938:	61b8      	str	r0, [r7, #24]
        break;
 800593a:	e021      	b.n	8005980 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593c:	f7fe f89e 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8005940:	61b8      	str	r0, [r7, #24]
        break;
 8005942:	e01d      	b.n	8005980 <UART_SetConfig+0x354>
 8005944:	40013800 	.word	0x40013800
 8005948:	40021000 	.word	0x40021000
 800594c:	40004400 	.word	0x40004400
 8005950:	40004800 	.word	0x40004800
 8005954:	40004c00 	.word	0x40004c00
 8005958:	40005000 	.word	0x40005000
 800595c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005960:	4b1b      	ldr	r3, [pc, #108]	@ (80059d0 <UART_SetConfig+0x3a4>)
 8005962:	61bb      	str	r3, [r7, #24]
        break;
 8005964:	e00c      	b.n	8005980 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005966:	f7fe f805 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 800596a:	61b8      	str	r0, [r7, #24]
        break;
 800596c:	e008      	b.n	8005980 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005972:	61bb      	str	r3, [r7, #24]
        break;
 8005974:	e004      	b.n	8005980 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	77bb      	strb	r3, [r7, #30]
        break;
 800597e:	bf00      	nop
    }

    if (pclk != 0U)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	085a      	lsrs	r2, r3, #1
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	441a      	add	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b0f      	cmp	r3, #15
 800599e:	d909      	bls.n	80059b4 <UART_SetConfig+0x388>
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a6:	d205      	bcs.n	80059b4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e001      	b.n	80059b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	007a1200 	.word	0x007a1200

080059d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad2:	d10a      	bne.n	8005aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b098      	sub	sp, #96	@ 0x60
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b28:	f7fb fb66 	bl	80011f8 <HAL_GetTick>
 8005b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d12e      	bne.n	8005b9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f88c 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d021      	beq.n	8005b9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e062      	b.n	8005c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d149      	bne.n	8005c3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f856 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d03c      	beq.n	8005c3c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e011      	b.n	8005c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3758      	adds	r7, #88	@ 0x58
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c78:	e04f      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d04b      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c82:	f7fb fab9 	bl	80011f8 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e04e      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d037      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b80      	cmp	r3, #128	@ 0x80
 8005cae:	d034      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b40      	cmp	r3, #64	@ 0x40
 8005cb4:	d031      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d110      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f838 	bl	8005d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e029      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf4:	d111      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f81e 	bl	8005d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e00f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d0a0      	beq.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b095      	sub	sp, #84	@ 0x54
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e6      	bne.n	8005d4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f023 0301 	bic.w	r3, r3, #1
 8005d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e5      	bne.n	8005d7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d118      	bne.n	8005dea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 0310 	bic.w	r3, r3, #16
 8005dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	613b      	str	r3, [r7, #16]
   return(result);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e6      	bne.n	8005db8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dfe:	bf00      	nop
 8005e00:	3754      	adds	r7, #84	@ 0x54
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <memset>:
 8005e0a:	4402      	add	r2, r0
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d100      	bne.n	8005e14 <memset+0xa>
 8005e12:	4770      	bx	lr
 8005e14:	f803 1b01 	strb.w	r1, [r3], #1
 8005e18:	e7f9      	b.n	8005e0e <memset+0x4>
	...

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e54 <__libc_init_array+0x38>)
 8005e20:	4c0d      	ldr	r4, [pc, #52]	@ (8005e58 <__libc_init_array+0x3c>)
 8005e22:	1b64      	subs	r4, r4, r5
 8005e24:	10a4      	asrs	r4, r4, #2
 8005e26:	2600      	movs	r6, #0
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005e5c <__libc_init_array+0x40>)
 8005e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005e60 <__libc_init_array+0x44>)
 8005e30:	f000 f818 	bl	8005e64 <_init>
 8005e34:	1b64      	subs	r4, r4, r5
 8005e36:	10a4      	asrs	r4, r4, #2
 8005e38:	2600      	movs	r6, #0
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08005eb4 	.word	0x08005eb4
 8005e58:	08005eb4 	.word	0x08005eb4
 8005e5c:	08005eb4 	.word	0x08005eb4
 8005e60:	08005eb8 	.word	0x08005eb8

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
