
PWM_Driver_Flywheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000619c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006324  08006324  00007324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800635c  0800635c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  0800635c  0800635c  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800635c  0800635c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800635c  0800635c  0000735c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006360  08006360  00007360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006364  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          000002e0  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001495f  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c3  00000000  00000000  0001c99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0001ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eae  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002320  00000000  00000000  00020f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001897f  00000000  00000000  0002329e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c306b  00000000  00000000  0003bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fec88  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fb0  00000000  00000000  000feccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00103c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800630c 	.word	0x0800630c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800630c 	.word	0x0800630c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f80c 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f862 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fc4a 	bl	8000a6c <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f9b2 	bl	8000540 <MX_TIM1_Init>
  MX_TIM3_Init();
 80001dc:	f000 fb1a 	bl	8000814 <MX_TIM3_Init>
  MX_TIM8_Init();
 80001e0:	f000 fb66 	bl	80008b0 <MX_TIM8_Init>
  MX_TIM2_Init();
 80001e4:	f000 fa72 	bl	80006cc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 fc10 	bl	8000a0c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80001ec:	f000 f92a 	bl	8000444 <MX_I2C1_Init>
  MX_ADC1_Init();
 80001f0:	f000 f8b8 	bl	8000364 <MX_ADC1_Init>
  MX_SPI1_Init();
 80001f4:	f000 f966 	bl	80004c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
   LED_1_ON;
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001fe:	4821      	ldr	r0, [pc, #132]	@ (8000284 <main+0xbc>)
 8000200:	f002 f906 	bl	8002410 <HAL_GPIO_WritePin>
   RX_2;
 8000204:	2200      	movs	r2, #0
 8000206:	2104      	movs	r1, #4
 8000208:	481f      	ldr	r0, [pc, #124]	@ (8000288 <main+0xc0>)
 800020a:	f002 f901 	bl	8002410 <HAL_GPIO_WritePin>

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800020e:	2100      	movs	r1, #0
 8000210:	481e      	ldr	r0, [pc, #120]	@ (800028c <main+0xc4>)
 8000212:	f003 ffbb 	bl	800418c <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000216:	2100      	movs	r1, #0
 8000218:	481c      	ldr	r0, [pc, #112]	@ (800028c <main+0xc4>)
 800021a:	f005 fa17 	bl	800564c <HAL_TIMEx_PWMN_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800021e:	2104      	movs	r1, #4
 8000220:	481a      	ldr	r0, [pc, #104]	@ (800028c <main+0xc4>)
 8000222:	f003 ffb3 	bl	800418c <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000226:	2104      	movs	r1, #4
 8000228:	4818      	ldr	r0, [pc, #96]	@ (800028c <main+0xc4>)
 800022a:	f005 fa0f 	bl	800564c <HAL_TIMEx_PWMN_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800022e:	2108      	movs	r1, #8
 8000230:	4816      	ldr	r0, [pc, #88]	@ (800028c <main+0xc4>)
 8000232:	f003 ffab 	bl	800418c <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000236:	2108      	movs	r1, #8
 8000238:	4814      	ldr	r0, [pc, #80]	@ (800028c <main+0xc4>)
 800023a:	f005 fa07 	bl	800564c <HAL_TIMEx_PWMN_Start>
   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800023e:	2100      	movs	r1, #0
 8000240:	4813      	ldr	r0, [pc, #76]	@ (8000290 <main+0xc8>)
 8000242:	f003 ffa3 	bl	800418c <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8000246:	2100      	movs	r1, #0
 8000248:	4811      	ldr	r0, [pc, #68]	@ (8000290 <main+0xc8>)
 800024a:	f005 f9ff 	bl	800564c <HAL_TIMEx_PWMN_Start>

   DRV_1_ON;
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000254:	480f      	ldr	r0, [pc, #60]	@ (8000294 <main+0xcc>)
 8000256:	f002 f8db 	bl	8002410 <HAL_GPIO_WritePin>
   DRV_2_ON;
 800025a:	2201      	movs	r2, #1
 800025c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000260:	480c      	ldr	r0, [pc, #48]	@ (8000294 <main+0xcc>)
 8000262:	f002 f8d5 	bl	8002410 <HAL_GPIO_WritePin>
   DRV_3_ON;
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800026c:	4809      	ldr	r0, [pc, #36]	@ (8000294 <main+0xcc>)
 800026e:	f002 f8cf 	bl	8002410 <HAL_GPIO_WritePin>
   DRV_4_ON;
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000278:	4806      	ldr	r0, [pc, #24]	@ (8000294 <main+0xcc>)
 800027a:	f002 f8c9 	bl	8002410 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027e:	bf00      	nop
 8000280:	e7fd      	b.n	800027e <main+0xb6>
 8000282:	bf00      	nop
 8000284:	48000400 	.word	0x48000400
 8000288:	48000c00 	.word	0x48000c00
 800028c:	20000130 	.word	0x20000130
 8000290:	20000214 	.word	0x20000214
 8000294:	48000800 	.word	0x48000800

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b09e      	sub	sp, #120	@ 0x78
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002a2:	2228      	movs	r2, #40	@ 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f006 f803 	bl	80062b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	223c      	movs	r2, #60	@ 0x3c
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 fff5 	bl	80062b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002c8:	2303      	movs	r3, #3
 80002ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80002d2:	2301      	movs	r3, #1
 80002d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	2310      	movs	r3, #16
 80002dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ec:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 f9d6 	bl	80026a4 <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002fe:	f000 fc75 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2302      	movs	r3, #2
 8000308:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000312:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000318:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f003 f9fe 	bl	8003720 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800032a:	f000 fc5f 	bl	8000bec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800032e:	f243 03a1 	movw	r3, #12449	@ 0x30a1
 8000332:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800033c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000342:	2300      	movs	r3, #0
 8000344:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000346:	2300      	movs	r3, #0
 8000348:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f003 fc09 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000358:	f000 fc48 	bl	8000bec <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3778      	adds	r7, #120	@ 0x78
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08a      	sub	sp, #40	@ 0x28
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800036a:	f107 031c 	add.w	r3, r7, #28
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
 8000384:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000386:	4b2e      	ldr	r3, [pc, #184]	@ (8000440 <MX_ADC1_Init+0xdc>)
 8000388:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800038c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800038e:	4b2c      	ldr	r3, [pc, #176]	@ (8000440 <MX_ADC1_Init+0xdc>)
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000394:	4b2a      	ldr	r3, [pc, #168]	@ (8000440 <MX_ADC1_Init+0xdc>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039a:	4b29      	ldr	r3, [pc, #164]	@ (8000440 <MX_ADC1_Init+0xdc>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a0:	4b27      	ldr	r3, [pc, #156]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b26      	ldr	r3, [pc, #152]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ae:	4b24      	ldr	r3, [pc, #144]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b4:	4b22      	ldr	r3, [pc, #136]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ba:	4b21      	ldr	r3, [pc, #132]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003d0:	2204      	movs	r2, #4
 80003d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003da:	4b19      	ldr	r3, [pc, #100]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e0:	4817      	ldr	r0, [pc, #92]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003e2:	f000 ff67 	bl	80012b4 <HAL_ADC_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003ec:	f000 fbfe 	bl	8000bec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003f4:	f107 031c 	add.w	r3, r7, #28
 80003f8:	4619      	mov	r1, r3
 80003fa:	4811      	ldr	r0, [pc, #68]	@ (8000440 <MX_ADC1_Init+0xdc>)
 80003fc:	f001 fc24 	bl	8001c48 <HAL_ADCEx_MultiModeConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000406:	f000 fbf1 	bl	8000bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800040a:	2301      	movs	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040e:	2301      	movs	r3, #1
 8000410:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	@ (8000440 <MX_ADC1_Init+0xdc>)
 8000428:	f001 f924 	bl	8001674 <HAL_ADC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000432:	f000 fbdb 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3728      	adds	r7, #40	@ 0x28
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000028 	.word	0x20000028

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_I2C1_Init+0x74>)
 800044a:	4a1c      	ldr	r2, [pc, #112]	@ (80004bc <MX_I2C1_Init+0x78>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800044e:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <MX_I2C1_Init+0x74>)
 8000450:	4a1b      	ldr	r2, [pc, #108]	@ (80004c0 <MX_I2C1_Init+0x7c>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <MX_I2C1_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000460:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <MX_I2C1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000466:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <MX_I2C1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046c:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000472:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800047e:	480e      	ldr	r0, [pc, #56]	@ (80004b8 <MX_I2C1_Init+0x74>)
 8000480:	f001 ffde 	bl	8002440 <HAL_I2C_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800048a:	f000 fbaf 	bl	8000bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048e:	2100      	movs	r1, #0
 8000490:	4809      	ldr	r0, [pc, #36]	@ (80004b8 <MX_I2C1_Init+0x74>)
 8000492:	f002 f870 	bl	8002576 <HAL_I2CEx_ConfigAnalogFilter>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800049c:	f000 fba6 	bl	8000bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004a0:	2100      	movs	r1, #0
 80004a2:	4805      	ldr	r0, [pc, #20]	@ (80004b8 <MX_I2C1_Init+0x74>)
 80004a4:	f002 f8b2 	bl	800260c <HAL_I2CEx_ConfigDigitalFilter>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ae:	f000 fb9d 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000078 	.word	0x20000078
 80004bc:	40005400 	.word	0x40005400
 80004c0:	00201d2b 	.word	0x00201d2b

080004c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004ca:	4a1c      	ldr	r2, [pc, #112]	@ (800053c <MX_SPI1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004d6:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004dc:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004de:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e4:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ea:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004f0:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_SPI1_Init+0x74>)
 80004fa:	2218      	movs	r2, #24
 80004fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_SPI1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <MX_SPI1_Init+0x74>)
 8000512:	2207      	movs	r2, #7
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <MX_SPI1_Init+0x74>)
 800051e:	2208      	movs	r2, #8
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	@ (8000538 <MX_SPI1_Init+0x74>)
 8000524:	f003 fcce 	bl	8003ec4 <HAL_SPI_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f000 fb5d 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000cc 	.word	0x200000cc
 800053c:	40013000 	.word	0x40013000

08000540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b09a      	sub	sp, #104	@ 0x68
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000560:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
 8000570:	615a      	str	r2, [r3, #20]
 8000572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	222c      	movs	r2, #44	@ 0x2c
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fe99 	bl	80062b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000580:	4b50      	ldr	r3, [pc, #320]	@ (80006c4 <MX_TIM1_Init+0x184>)
 8000582:	4a51      	ldr	r2, [pc, #324]	@ (80006c8 <MX_TIM1_Init+0x188>)
 8000584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000586:	4b4f      	ldr	r3, [pc, #316]	@ (80006c4 <MX_TIM1_Init+0x184>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b4d      	ldr	r3, [pc, #308]	@ (80006c4 <MX_TIM1_Init+0x184>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000592:	4b4c      	ldr	r3, [pc, #304]	@ (80006c4 <MX_TIM1_Init+0x184>)
 8000594:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059a:	4b4a      	ldr	r3, [pc, #296]	@ (80006c4 <MX_TIM1_Init+0x184>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a0:	4b48      	ldr	r3, [pc, #288]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a6:	4b47      	ldr	r3, [pc, #284]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ac:	4845      	ldr	r0, [pc, #276]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80005ae:	f003 fd34 	bl	800401a <HAL_TIM_Base_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005b8:	f000 fb18 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005c6:	4619      	mov	r1, r3
 80005c8:	483e      	ldr	r0, [pc, #248]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80005ca:	f004 f9f3 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80005d4:	f000 fb0a 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d8:	483a      	ldr	r0, [pc, #232]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80005da:	f003 fd75 	bl	80040c8 <HAL_TIM_PWM_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80005e4:	f000 fb02 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e8:	2300      	movs	r3, #0
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005f8:	4619      	mov	r1, r3
 80005fa:	4832      	ldr	r0, [pc, #200]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80005fc:	f005 f8da 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000606:	f000 faf1 	bl	8000bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060a:	2360      	movs	r3, #96	@ 0x60
 800060c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000614:	2300      	movs	r3, #0
 8000616:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000628:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800062c:	2200      	movs	r2, #0
 800062e:	4619      	mov	r1, r3
 8000630:	4824      	ldr	r0, [pc, #144]	@ (80006c4 <MX_TIM1_Init+0x184>)
 8000632:	f004 f8ab 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800063c:	f000 fad6 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000640:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000644:	2204      	movs	r2, #4
 8000646:	4619      	mov	r1, r3
 8000648:	481e      	ldr	r0, [pc, #120]	@ (80006c4 <MX_TIM1_Init+0x184>)
 800064a:	f004 f89f 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000654:	f000 faca 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000658:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800065c:	2208      	movs	r2, #8
 800065e:	4619      	mov	r1, r3
 8000660:	4818      	ldr	r0, [pc, #96]	@ (80006c4 <MX_TIM1_Init+0x184>)
 8000662:	f004 f893 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800066c:	f000 fabe 	bl	8000bec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000688:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80006a6:	f005 f905 	bl	80058b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80006b0:	f000 fa9c 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <MX_TIM1_Init+0x184>)
 80006b6:	f000 fc5f 	bl	8000f78 <HAL_TIM_MspPostInit>

}
 80006ba:	bf00      	nop
 80006bc:	3768      	adds	r7, #104	@ 0x68
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000130 	.word	0x20000130
 80006c8:	40012c00 	.word	0x40012c00

080006cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	@ 0x30
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f8:	4b45      	ldr	r3, [pc, #276]	@ (8000810 <MX_TIM2_Init+0x144>)
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000700:	4b43      	ldr	r3, [pc, #268]	@ (8000810 <MX_TIM2_Init+0x144>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b42      	ldr	r3, [pc, #264]	@ (8000810 <MX_TIM2_Init+0x144>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800070c:	4b40      	ldr	r3, [pc, #256]	@ (8000810 <MX_TIM2_Init+0x144>)
 800070e:	f04f 32ff 	mov.w	r2, #4294967295
 8000712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b3e      	ldr	r3, [pc, #248]	@ (8000810 <MX_TIM2_Init+0x144>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <MX_TIM2_Init+0x144>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000720:	483b      	ldr	r0, [pc, #236]	@ (8000810 <MX_TIM2_Init+0x144>)
 8000722:	f003 fc7a 	bl	800401a <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800072c:	f000 fa5e 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000734:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4619      	mov	r1, r3
 800073c:	4834      	ldr	r0, [pc, #208]	@ (8000810 <MX_TIM2_Init+0x144>)
 800073e:	f004 f939 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000748:	f000 fa50 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800074c:	4830      	ldr	r0, [pc, #192]	@ (8000810 <MX_TIM2_Init+0x144>)
 800074e:	f003 fe1d 	bl	800438c <HAL_TIM_IC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 fa48 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4829      	ldr	r0, [pc, #164]	@ (8000810 <MX_TIM2_Init+0x144>)
 800076c:	f005 f822 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000776:	f000 fa39 	bl	8000bec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800077a:	2302      	movs	r3, #2
 800077c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800077e:	2301      	movs	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8000786:	230f      	movs	r3, #15
 8000788:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	481f      	ldr	r0, [pc, #124]	@ (8000810 <MX_TIM2_Init+0x144>)
 8000792:	f003 ff5e 	bl	8004652 <HAL_TIM_IC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800079c:	f000 fa26 	bl	8000bec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2204      	movs	r2, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4817      	ldr	r0, [pc, #92]	@ (8000810 <MX_TIM2_Init+0x144>)
 80007b4:	f003 ff4d 	bl	8004652 <HAL_TIM_IC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80007be:	f000 fa15 	bl	8000bec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80007c2:	2302      	movs	r3, #2
 80007c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80007ca:	230f      	movs	r3, #15
 80007cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2208      	movs	r2, #8
 80007d2:	4619      	mov	r1, r3
 80007d4:	480e      	ldr	r0, [pc, #56]	@ (8000810 <MX_TIM2_Init+0x144>)
 80007d6:	f003 ff3c 	bl	8004652 <HAL_TIM_IC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80007e0:	f000 fa04 	bl	8000bec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	220c      	movs	r2, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_TIM2_Init+0x144>)
 80007f8:	f003 ff2b 	bl	8004652 <HAL_TIM_IC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x13a>
  {
    Error_Handler();
 8000802:	f000 f9f3 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3730      	adds	r7, #48	@ 0x30
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000017c 	.word	0x2000017c

08000814 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_TIM3_Init+0x94>)
 8000834:	4a1d      	ldr	r2, [pc, #116]	@ (80008ac <MX_TIM3_Init+0x98>)
 8000836:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_TIM3_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_TIM3_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000844:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_TIM3_Init+0x94>)
 8000846:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800084a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_TIM3_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <MX_TIM3_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000858:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <MX_TIM3_Init+0x94>)
 800085a:	f003 fbde 	bl	800401a <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000864:	f000 f9c2 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_TIM3_Init+0x94>)
 8000876:	f004 f89d 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f9b4 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_TIM3_Init+0x94>)
 8000892:	f004 ff8f 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f9a6 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200001c8 	.word	0x200001c8
 80008ac:	40000400 	.word	0x40000400

080008b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09a      	sub	sp, #104	@ 0x68
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	222c      	movs	r2, #44	@ 0x2c
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fce1 	bl	80062b2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f0:	4b44      	ldr	r3, [pc, #272]	@ (8000a04 <MX_TIM8_Init+0x154>)
 80008f2:	4a45      	ldr	r2, [pc, #276]	@ (8000a08 <MX_TIM8_Init+0x158>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008f6:	4b43      	ldr	r3, [pc, #268]	@ (8000a04 <MX_TIM8_Init+0x154>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b41      	ldr	r3, [pc, #260]	@ (8000a04 <MX_TIM8_Init+0x154>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 8000902:	4b40      	ldr	r3, [pc, #256]	@ (8000a04 <MX_TIM8_Init+0x154>)
 8000904:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000908:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a04 <MX_TIM8_Init+0x154>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000910:	4b3c      	ldr	r3, [pc, #240]	@ (8000a04 <MX_TIM8_Init+0x154>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b3b      	ldr	r3, [pc, #236]	@ (8000a04 <MX_TIM8_Init+0x154>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800091c:	4839      	ldr	r0, [pc, #228]	@ (8000a04 <MX_TIM8_Init+0x154>)
 800091e:	f003 fb7c 	bl	800401a <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f960 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000936:	4619      	mov	r1, r3
 8000938:	4832      	ldr	r0, [pc, #200]	@ (8000a04 <MX_TIM8_Init+0x154>)
 800093a:	f004 f83b 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000944:	f000 f952 	bl	8000bec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000948:	482e      	ldr	r0, [pc, #184]	@ (8000a04 <MX_TIM8_Init+0x154>)
 800094a:	f003 fbbd 	bl	80040c8 <HAL_TIM_PWM_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000954:	f000 f94a 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000964:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000968:	4619      	mov	r1, r3
 800096a:	4826      	ldr	r0, [pc, #152]	@ (8000a04 <MX_TIM8_Init+0x154>)
 800096c:	f004 ff22 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000976:	f000 f939 	bl	8000bec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097a:	2360      	movs	r3, #96	@ 0x60
 800097c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000988:	2300      	movs	r3, #0
 800098a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	4818      	ldr	r0, [pc, #96]	@ (8000a04 <MX_TIM8_Init+0x154>)
 80009a2:	f003 fef3 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80009ac:	f000 f91e 	bl	8000bec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <MX_TIM8_Init+0x154>)
 80009e6:	f004 ff65 	bl	80058b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80009f0:	f000 f8fc 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <MX_TIM8_Init+0x154>)
 80009f6:	f000 fabf 	bl	8000f78 <HAL_TIM_MspPostInit>

}
 80009fa:	bf00      	nop
 80009fc:	3768      	adds	r7, #104	@ 0x68
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000214 	.word	0x20000214
 8000a08:	40013400 	.word	0x40013400

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	@ (8000a68 <MX_USART1_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a18:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a50:	f004 fff1 	bl	8005a36 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 f8c7 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000260 	.word	0x20000260
 8000a68:	40013800 	.word	0x40013800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b56      	ldr	r3, [pc, #344]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a55      	ldr	r2, [pc, #340]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000a88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b53      	ldr	r3, [pc, #332]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b50      	ldr	r3, [pc, #320]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a4f      	ldr	r2, [pc, #316]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000aa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a49      	ldr	r2, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b47      	ldr	r3, [pc, #284]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b44      	ldr	r3, [pc, #272]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a43      	ldr	r2, [pc, #268]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b41      	ldr	r3, [pc, #260]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a3d      	ldr	r2, [pc, #244]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000ae8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000aec:	6153      	str	r3, [r2, #20]
 8000aee:	4b3b      	ldr	r3, [pc, #236]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000afa:	2200      	movs	r2, #0
 8000afc:	f64f 31a0 	movw	r1, #64416	@ 0xfba0
 8000b00:	4837      	ldr	r0, [pc, #220]	@ (8000be0 <MX_GPIO_Init+0x174>)
 8000b02:	f001 fc85 	bl	8002410 <HAL_GPIO_WritePin>
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2110      	movs	r1, #16
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0e:	f001 fc7f 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 8000b12:	2200      	movs	r2, #0
 8000b14:	f647 0107 	movw	r1, #30727	@ 0x7807
 8000b18:	4832      	ldr	r0, [pc, #200]	@ (8000be4 <MX_GPIO_Init+0x178>)
 8000b1a:	f001 fc79 	bl	8002410 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECT_GPIO_Port, DIRECT_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2104      	movs	r1, #4
 8000b22:	4831      	ldr	r0, [pc, #196]	@ (8000be8 <MX_GPIO_Init+0x17c>)
 8000b24:	f001 fc74 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT_2_EN_Pin PORT_3_EN_Pin PORT_4_EN_Pin LED_7_Pin
                           DISP_DC_RS_Pin DISP_LED_Pin DISP_RST_Pin LED_5_Pin
                           PORT_1_EN_Pin */
  GPIO_InitStruct.Pin = PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000b28:	f64f 33a0 	movw	r3, #64416	@ 0xfba0
 8000b2c:	617b      	str	r3, [r7, #20]
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <MX_GPIO_Init+0x174>)
 8000b42:	f001 faeb 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_INT_Pin UI_INT_Pin */
  GPIO_InitStruct.Pin = DISP_INT_Pin|UI_INT_Pin;
 8000b46:	2318      	movs	r3, #24
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4821      	ldr	r0, [pc, #132]	@ (8000be0 <MX_GPIO_Init+0x174>)
 8000b5c:	f001 fade 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_6_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin;
 8000b60:	2310      	movs	r3, #16
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_6_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7a:	f001 facf 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_A_Pin HAL_B_Pin HAL_C_Pin */
  GPIO_InitStruct.Pin = HAL_A_Pin|HAL_B_Pin|HAL_C_Pin;
 8000b7e:	23e0      	movs	r3, #224	@ 0xe0
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f001 fac1 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin CS_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 8000b9a:	f647 0307 	movw	r3, #30727	@ 0x7807
 8000b9e:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <MX_GPIO_Init+0x178>)
 8000bb4:	f001 fab2 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECT_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_GPIO_Init+0x17c>)
 8000bd0:	f001 faa4 	bl	800211c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000800 	.word	0x48000800
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000c00 	.word	0x48000c00

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c60:	d154      	bne.n	8000d0c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c62:	4b2c      	ldr	r3, [pc, #176]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a2b      	ldr	r2, [pc, #172]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b26      	ldr	r3, [pc, #152]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a25      	ldr	r2, [pc, #148]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b23      	ldr	r3, [pc, #140]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a1f      	ldr	r2, [pc, #124]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a19      	ldr	r2, [pc, #100]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000cb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_ADC_MspInit+0xd4>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4810      	ldr	r0, [pc, #64]	@ (8000d18 <HAL_ADC_MspInit+0xd8>)
 8000cd6:	f001 fa21 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000cda:	230f      	movs	r3, #15
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf0:	f001 fa14 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_ADC_MspInit+0xdc>)
 8000d08:	f001 fa08 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3730      	adds	r7, #48	@ 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	48001400 	.word	0x48001400

08000d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_I2C_MspInit+0x7c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d128      	bne.n	8000d94 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <HAL_I2C_MspInit+0x80>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a16      	ldr	r2, [pc, #88]	@ (8000da0 <HAL_I2C_MspInit+0x80>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d4c:	6153      	str	r3, [r2, #20]
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_I2C_MspInit+0x80>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d60:	2312      	movs	r3, #18
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <HAL_I2C_MspInit+0x84>)
 8000d78:	f001 f9d0 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_I2C_MspInit+0x80>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_I2C_MspInit+0x80>)
 8000d82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d86:	61d3      	str	r3, [r2, #28]
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_I2C_MspInit+0x80>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	@ 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000400 	.word	0x48000400

08000da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <HAL_SPI_MspInit+0x7c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d127      	bne.n	8000e1a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <HAL_SPI_MspInit+0x80>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a16      	ldr	r2, [pc, #88]	@ (8000e28 <HAL_SPI_MspInit+0x80>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_SPI_MspInit+0x80>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_SPI_MspInit+0x80>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <HAL_SPI_MspInit+0x80>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_SPI_MspInit+0x80>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000dfa:	2338      	movs	r3, #56	@ 0x38
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_SPI_MspInit+0x84>)
 8000e16:	f001 f981 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40013000 	.word	0x40013000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400

08000e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	@ 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a45      	ldr	r2, [pc, #276]	@ (8000f64 <HAL_TIM_Base_MspInit+0x134>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10c      	bne.n	8000e6c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e52:	4b45      	ldr	r3, [pc, #276]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a44      	ldr	r2, [pc, #272]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b42      	ldr	r3, [pc, #264]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e66:	623b      	str	r3, [r7, #32]
 8000e68:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e6a:	e077      	b.n	8000f5c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e74:	d14f      	bne.n	8000f16 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	4b3c      	ldr	r3, [pc, #240]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a35      	ldr	r2, [pc, #212]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INT_2_TIM_Pin;
 8000ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_2_TIM_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4824      	ldr	r0, [pc, #144]	@ (8000f6c <HAL_TIM_Base_MspInit+0x13c>)
 8000edc:	f001 f91e 	bl	800211c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_1_TIM_Pin;
 8000ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_1_TIM_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f001 f90c 	bl	800211c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	201c      	movs	r0, #28
 8000f0a:	f001 f8d0 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f001 f8e9 	bl	80020e6 <HAL_NVIC_EnableIRQ>
}
 8000f14:	e022      	b.n	8000f5c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM3)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a15      	ldr	r2, [pc, #84]	@ (8000f70 <HAL_TIM_Base_MspInit+0x140>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d10c      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	61d3      	str	r3, [r2, #28]
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
}
 8000f38:	e010      	b.n	8000f5c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM8)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <HAL_TIM_Base_MspInit+0x144>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d10b      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000f4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_TIM_Base_MspInit+0x138>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3738      	adds	r7, #56	@ 0x38
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	40000400 	.word	0x40000400
 8000f74:	40013400 	.word	0x40013400

08000f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a32      	ldr	r2, [pc, #200]	@ (8001060 <HAL_TIM_MspPostInit+0xe8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d13b      	bne.n	8001012 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a31      	ldr	r2, [pc, #196]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4820      	ldr	r0, [pc, #128]	@ (8001068 <HAL_TIM_MspPostInit+0xf0>)
 8000fe8:	f001 f898 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fec:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000ff0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ffe:	2306      	movs	r3, #6
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f001 f886 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001010:	e021      	b.n	8001056 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM8)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <HAL_TIM_MspPostInit+0xf4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d11c      	bne.n	8001056 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 8001022:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001026:	6153      	str	r3, [r2, #20]
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_TIM_MspPostInit+0xec>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001034:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001046:	2304      	movs	r3, #4
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4807      	ldr	r0, [pc, #28]	@ (8001070 <HAL_TIM_MspPostInit+0xf8>)
 8001052:	f001 f863 	bl	800211c <HAL_GPIO_Init>
}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	@ 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40012c00 	.word	0x40012c00
 8001064:	40021000 	.word	0x40021000
 8001068:	48000400 	.word	0x48000400
 800106c:	40013400 	.word	0x40013400
 8001070:	48000800 	.word	0x48000800

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <HAL_UART_MspInit+0x7c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d127      	bne.n	80010e6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_UART_MspInit+0x80>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_UART_MspInit+0x80>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_UART_MspInit+0x80>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_UART_MspInit+0x80>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a10      	ldr	r2, [pc, #64]	@ (80010f4 <HAL_UART_MspInit+0x80>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_UART_MspInit+0x80>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c6:	23c0      	movs	r3, #192	@ 0xc0
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d6:	2307      	movs	r3, #7
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <HAL_UART_MspInit+0x84>)
 80010e2:	f001 f81b 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000400 	.word	0x48000400

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <UsageFault_Handler+0x4>

08001124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001152:	f000 f88f 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM2_IRQHandler+0x10>)
 8001162:	f003 f974 	bl	800444e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000017c 	.word	0x2000017c

08001170 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f005 f87f 	bl	80062c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c6:	f7fe ffff 	bl	80001c8 <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011d8:	08006364 	.word	0x08006364
  ldr r2, =_sbss
 80011dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e0:	200002ec 	.word	0x200002ec

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 ff4d 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fcf8 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 ff65 	bl	8002102 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 ff2d 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	200002e8 	.word	0x200002e8

0800129c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;  
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200002e8 	.word	0x200002e8

080012b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b09a      	sub	sp, #104	@ 0x68
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e1c9      	b.n	8001668 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d176      	bne.n	80013d4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d152      	bne.n	8001394 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc99 	bl	8000c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d13b      	bne.n	8001394 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fd85 	bl	8001e2c <ADC_Disable>
 8001322:	4603      	mov	r3, r0
 8001324:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	d12f      	bne.n	8001394 <HAL_ADC_Init+0xe0>
 8001334:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001338:	2b00      	cmp	r3, #0
 800133a:	d12b      	bne.n	8001394 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001344:	f023 0302 	bic.w	r3, r3, #2
 8001348:	f043 0202 	orr.w	r2, r3, #2
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800135e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800136e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001370:	4b86      	ldr	r3, [pc, #536]	@ (800158c <HAL_ADC_Init+0x2d8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a86      	ldr	r2, [pc, #536]	@ (8001590 <HAL_ADC_Init+0x2dc>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	0c9a      	lsrs	r2, r3, #18
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001386:	e002      	b.n	800138e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3b01      	subs	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f9      	bne.n	8001388 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013b0:	d110      	bne.n	80013d4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f023 0312 	bic.w	r3, r3, #18
 80013ba:	f043 0210 	orr.w	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 8136 	bne.w	800164e <HAL_ADC_Init+0x39a>
 80013e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 8131 	bne.w	800164e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 8129 	bne.w	800164e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001404:	f043 0202 	orr.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001414:	d004      	beq.n	8001420 <HAL_ADC_Init+0x16c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a5e      	ldr	r2, [pc, #376]	@ (8001594 <HAL_ADC_Init+0x2e0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_ADC_Init+0x170>
 8001420:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <HAL_ADC_Init+0x2e4>)
 8001422:	e000      	b.n	8001426 <HAL_ADC_Init+0x172>
 8001424:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <HAL_ADC_Init+0x2e8>)
 8001426:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001430:	d102      	bne.n	8001438 <HAL_ADC_Init+0x184>
 8001432:	4b58      	ldr	r3, [pc, #352]	@ (8001594 <HAL_ADC_Init+0x2e0>)
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e01a      	b.n	800146e <HAL_ADC_Init+0x1ba>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a55      	ldr	r2, [pc, #340]	@ (8001594 <HAL_ADC_Init+0x2e0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d103      	bne.n	800144a <HAL_ADC_Init+0x196>
 8001442:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e011      	b.n	800146e <HAL_ADC_Init+0x1ba>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a54      	ldr	r2, [pc, #336]	@ (80015a0 <HAL_ADC_Init+0x2ec>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d102      	bne.n	800145a <HAL_ADC_Init+0x1a6>
 8001454:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_ADC_Init+0x2f0>)
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e009      	b.n	800146e <HAL_ADC_Init+0x1ba>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a51      	ldr	r2, [pc, #324]	@ (80015a4 <HAL_ADC_Init+0x2f0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <HAL_ADC_Init+0x1b6>
 8001464:	4b4e      	ldr	r3, [pc, #312]	@ (80015a0 <HAL_ADC_Init+0x2ec>)
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e001      	b.n	800146e <HAL_ADC_Init+0x1ba>
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_ADC_Init+0x1da>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_ADC_Init+0x1da>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_ADC_Init+0x1dc>
 800148e:	2300      	movs	r3, #0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d11c      	bne.n	80014ce <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001494:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001496:	2b00      	cmp	r3, #0
 8001498:	d010      	beq.n	80014bc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_ADC_Init+0x202>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_Init+0x202>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_ADC_Init+0x204>
 80014b6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d108      	bne.n	80014ce <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014cc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7e5b      	ldrb	r3, [r3, #25]
 80014d2:	035b      	lsls	r3, r3, #13
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d002      	beq.n	80014e2 <HAL_ADC_Init+0x22e>
 80014dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014e0:	e000      	b.n	80014e4 <HAL_ADC_Init+0x230>
 80014e2:	2200      	movs	r2, #0
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014f4:	4313      	orrs	r3, r2
 80014f6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d11b      	bne.n	800153a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7e5b      	ldrb	r3, [r3, #25]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	3b01      	subs	r3, #1
 8001510:	045a      	lsls	r2, r3, #17
 8001512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001514:	4313      	orrs	r3, r2
 8001516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151a:	663b      	str	r3, [r7, #96]	@ 0x60
 800151c:	e00d      	b.n	800153a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153e:	2b01      	cmp	r3, #1
 8001540:	d03a      	beq.n	80015b8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a16      	ldr	r2, [pc, #88]	@ (80015a0 <HAL_ADC_Init+0x2ec>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Init+0x2a2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <HAL_ADC_Init+0x2f0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d128      	bne.n	80015a8 <HAL_ADC_Init+0x2f4>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800155e:	d012      	beq.n	8001586 <HAL_ADC_Init+0x2d2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001568:	d00a      	beq.n	8001580 <HAL_ADC_Init+0x2cc>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001572:	d002      	beq.n	800157a <HAL_ADC_Init+0x2c6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	e018      	b.n	80015ac <HAL_ADC_Init+0x2f8>
 800157a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800157e:	e015      	b.n	80015ac <HAL_ADC_Init+0x2f8>
 8001580:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001584:	e012      	b.n	80015ac <HAL_ADC_Init+0x2f8>
 8001586:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800158a:	e00f      	b.n	80015ac <HAL_ADC_Init+0x2f8>
 800158c:	20000000 	.word	0x20000000
 8001590:	431bde83 	.word	0x431bde83
 8001594:	50000100 	.word	0x50000100
 8001598:	50000300 	.word	0x50000300
 800159c:	50000700 	.word	0x50000700
 80015a0:	50000400 	.word	0x50000400
 80015a4:	50000500 	.word	0x50000500
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80015b0:	4313      	orrs	r3, r2
 80015b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b4:	4313      	orrs	r3, r2
 80015b6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d114      	bne.n	80015f0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015d4:	f023 0302 	bic.w	r3, r3, #2
 80015d8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7e1b      	ldrb	r3, [r3, #24]
 80015de:	039a      	lsls	r2, r3, #14
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4313      	orrs	r3, r2
 80015ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015ec:	4313      	orrs	r3, r2
 80015ee:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <HAL_ADC_Init+0x3bc>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001600:	430b      	orrs	r3, r1
 8001602:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10c      	bne.n	8001626 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f023 010f 	bic.w	r1, r3, #15
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	1e5a      	subs	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	631a      	str	r2, [r3, #48]	@ 0x30
 8001624:	e007      	b.n	8001636 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 020f 	bic.w	r2, r2, #15
 8001634:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f023 0303 	bic.w	r3, r3, #3
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	@ 0x40
 800164c:	e00a      	b.n	8001664 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f023 0312 	bic.w	r3, r3, #18
 8001656:	f043 0210 	orr.w	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001664:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001668:	4618      	mov	r0, r3
 800166a:	3768      	adds	r7, #104	@ 0x68
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	fff0c007 	.word	0xfff0c007

08001674 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001674:	b480      	push	{r7}
 8001676:	b09b      	sub	sp, #108	@ 0x6c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x22>
 8001692:	2302      	movs	r3, #2
 8001694:	e2c8      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x5b4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 82ac 	bne.w	8001c06 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d81c      	bhi.n	80016f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	461a      	mov	r2, r3
 80016ca:	231f      	movs	r3, #31
 80016cc:	4093      	lsls	r3, r2
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4019      	ands	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80016ee:	e063      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d81e      	bhi.n	8001736 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	3b1e      	subs	r3, #30
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	4019      	ands	r1, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	3b1e      	subs	r3, #30
 8001728:	fa00 f203 	lsl.w	r2, r0, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
 8001734:	e040      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b0e      	cmp	r3, #14
 800173c:	d81e      	bhi.n	800177c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	3b3c      	subs	r3, #60	@ 0x3c
 8001752:	221f      	movs	r2, #31
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	3b3c      	subs	r3, #60	@ 0x3c
 800176e:	fa00 f203 	lsl.w	r2, r0, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	639a      	str	r2, [r3, #56]	@ 0x38
 800177a:	e01d      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	3b5a      	subs	r3, #90	@ 0x5a
 8001790:	221f      	movs	r2, #31
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	4019      	ands	r1, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	3b5a      	subs	r3, #90	@ 0x5a
 80017ac:	fa00 f203 	lsl.w	r2, r0, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80e5 	bne.w	8001992 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b09      	cmp	r3, #9
 80017ce:	d91c      	bls.n	800180a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6999      	ldr	r1, [r3, #24]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	3b1e      	subs	r3, #30
 80017e2:	2207      	movs	r2, #7
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4019      	ands	r1, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6898      	ldr	r0, [r3, #8]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	3b1e      	subs	r3, #30
 80017fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e019      	b.n	800183e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6959      	ldr	r1, [r3, #20]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	2207      	movs	r2, #7
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	4019      	ands	r1, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6898      	ldr	r0, [r3, #8]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	fa00 f203 	lsl.w	r2, r0, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	3b01      	subs	r3, #1
 800185c:	2b03      	cmp	r3, #3
 800185e:	d84f      	bhi.n	8001900 <HAL_ADC_ConfigChannel+0x28c>
 8001860:	a201      	add	r2, pc, #4	@ (adr r2, 8001868 <HAL_ADC_ConfigChannel+0x1f4>)
 8001862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001866:	bf00      	nop
 8001868:	08001879 	.word	0x08001879
 800186c:	0800189b 	.word	0x0800189b
 8001870:	080018bd 	.word	0x080018bd
 8001874:	080018df 	.word	0x080018df
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800187e:	4b99      	ldr	r3, [pc, #612]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x470>)
 8001880:	4013      	ands	r3, r2
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	0691      	lsls	r1, r2, #26
 8001888:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800188a:	430a      	orrs	r2, r1
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001896:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001898:	e07b      	b.n	8001992 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018a0:	4b90      	ldr	r3, [pc, #576]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x470>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	0691      	lsls	r1, r2, #26
 80018aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018ac:	430a      	orrs	r2, r1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018b8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ba:	e06a      	b.n	8001992 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80018c2:	4b88      	ldr	r3, [pc, #544]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x470>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	0691      	lsls	r1, r2, #26
 80018cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018ce:	430a      	orrs	r2, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018da:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018dc:	e059      	b.n	8001992 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018e4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x470>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	0691      	lsls	r1, r2, #26
 80018ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018f0:	430a      	orrs	r2, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018fc:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018fe:	e048      	b.n	8001992 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001906:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001922:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800192a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	069b      	lsls	r3, r3, #26
 8001934:	429a      	cmp	r2, r3
 8001936:	d107      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001946:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800194e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	069b      	lsls	r3, r3, #26
 8001958:	429a      	cmp	r2, r3
 800195a:	d107      	bne.n	800196c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800196a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001972:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	069b      	lsls	r3, r3, #26
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800198e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001990:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x33e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x33e>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x340>
 80019b2:	2300      	movs	r3, #0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8131 	bne.w	8001c1c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d00f      	beq.n	80019e2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43da      	mvns	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	400a      	ands	r2, r1
 80019dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80019e0:	e049      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	409a      	lsls	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d91c      	bls.n	8001a3e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6999      	ldr	r1, [r3, #24]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	3b1b      	subs	r3, #27
 8001a16:	2207      	movs	r2, #7
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6898      	ldr	r0, [r3, #8]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b1b      	subs	r3, #27
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	619a      	str	r2, [r3, #24]
 8001a3c:	e01b      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6959      	ldr	r1, [r3, #20]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	2207      	movs	r2, #7
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4019      	ands	r1, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6898      	ldr	r0, [r3, #8]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0x416>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x474>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x41a>
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_ADC_ConfigChannel+0x478>)
 8001a8c:	e000      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x41c>
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_ADC_ConfigChannel+0x47c>)
 8001a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d105      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d015      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aaa:	2b11      	cmp	r3, #17
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	f040 80ac 	bne.w	8001c1c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 80a5 	bne.w	8001c1c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ada:	d10b      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x480>
 8001adc:	4b02      	ldr	r3, [pc, #8]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x474>)
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e023      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x4b6>
 8001ae2:	bf00      	nop
 8001ae4:	83fff000 	.word	0x83fff000
 8001ae8:	50000100 	.word	0x50000100
 8001aec:	50000300 	.word	0x50000300
 8001af0:	50000700 	.word	0x50000700
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c34 <HAL_ADC_ConfigChannel+0x5c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d103      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x492>
 8001afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e011      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x4b6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c38 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d102      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x4a2>
 8001b10:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e009      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x4b6>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a48      	ldr	r2, [pc, #288]	@ (8001c3c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d102      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x4b2>
 8001b20:	4b45      	ldr	r3, [pc, #276]	@ (8001c38 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e001      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x4b6>
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x4d6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x4d6>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x4d8>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d150      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d010      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x4fe>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x4fe>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x500>
 8001b72:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d13c      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d11d      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x548>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b88:	d118      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b94:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b96:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c44 <HAL_ADC_ConfigChannel+0x5d0>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9a      	lsrs	r2, r3, #18
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bac:	e002      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f9      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bba:	e02e      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b11      	cmp	r3, #17
 8001bc2:	d10b      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x568>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bd8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bda:	e01e      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d11a      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bf0:	e013      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001c04:	e00a      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001c18:	e000      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c1a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	376c      	adds	r7, #108	@ 0x6c
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	50000100 	.word	0x50000100
 8001c38:	50000400 	.word	0x50000400
 8001c3c:	50000500 	.word	0x50000500
 8001c40:	20000000 	.word	0x20000000
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b099      	sub	sp, #100	@ 0x64
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c60:	d102      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c62:	4b6d      	ldr	r3, [pc, #436]	@ (8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	e01a      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d103      	bne.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001c72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	e011      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a67      	ldr	r2, [pc, #412]	@ (8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d102      	bne.n	8001c8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	e009      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a64      	ldr	r2, [pc, #400]	@ (8001e20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d102      	bne.n	8001c9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001c94:	4b61      	ldr	r3, [pc, #388]	@ (8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	e001      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b0      	b.n	8001e0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e0a9      	b.n	8001e0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 808d 	bne.w	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8086 	bne.w	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ce4:	d004      	beq.n	8001cf0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a4b      	ldr	r2, [pc, #300]	@ (8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001cf2:	e000      	b.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d040      	beq.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d12:	035b      	lsls	r3, r3, #13
 8001d14:	430b      	orrs	r3, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d1a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d15c      	bne.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d5e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d14b      	bne.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d6c:	f023 030f 	bic.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	6811      	ldr	r1, [r2, #0]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	6892      	ldr	r2, [r2, #8]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d7e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d80:	e03c      	b.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d8c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001dae:	2300      	movs	r3, #0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d123      	bne.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001dd0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d112      	bne.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001dde:	f023 030f 	bic.w	r3, r3, #15
 8001de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001de4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de6:	e009      	b.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001dfa:	e000      	b.n	8001dfe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dfc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3764      	adds	r7, #100	@ 0x64
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	50000100 	.word	0x50000100
 8001e1c:	50000400 	.word	0x50000400
 8001e20:	50000500 	.word	0x50000500
 8001e24:	50000300 	.word	0x50000300
 8001e28:	50000700 	.word	0x50000700

08001e2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <ADC_Disable+0x2c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <ADC_Disable+0x2c>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <ADC_Disable+0x2e>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d047      	beq.n	8001eee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 030d 	and.w	r3, r3, #13
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10f      	bne.n	8001e8c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0202 	orr.w	r2, r2, #2
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2203      	movs	r2, #3
 8001e82:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e84:	f7ff fa0a 	bl	800129c <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e8a:	e029      	b.n	8001ee0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e023      	b.n	8001ef0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ea8:	f7ff f9f8 	bl	800129c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d914      	bls.n	8001ee0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10d      	bne.n	8001ee0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	f043 0210 	orr.w	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e007      	b.n	8001ef0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d0dc      	beq.n	8001ea8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	@ (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e154      	b.n	80023d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8146 	beq.w	80023d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d005      	beq.n	800215c <HAL_GPIO_Init+0x40>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d130      	bne.n	80021be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002192:	2201      	movs	r2, #1
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 0201 	and.w	r2, r3, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d017      	beq.n	80021fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d123      	bne.n	800224e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	6939      	ldr	r1, [r7, #16]
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80a0 	beq.w	80023d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	4b58      	ldr	r3, [pc, #352]	@ (80023f4 <HAL_GPIO_Init+0x2d8>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a57      	ldr	r2, [pc, #348]	@ (80023f4 <HAL_GPIO_Init+0x2d8>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b55      	ldr	r3, [pc, #340]	@ (80023f4 <HAL_GPIO_Init+0x2d8>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022a8:	4a53      	ldr	r2, [pc, #332]	@ (80023f8 <HAL_GPIO_Init+0x2dc>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022d2:	d019      	beq.n	8002308 <HAL_GPIO_Init+0x1ec>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a49      	ldr	r2, [pc, #292]	@ (80023fc <HAL_GPIO_Init+0x2e0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d013      	beq.n	8002304 <HAL_GPIO_Init+0x1e8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a48      	ldr	r2, [pc, #288]	@ (8002400 <HAL_GPIO_Init+0x2e4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00d      	beq.n	8002300 <HAL_GPIO_Init+0x1e4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a47      	ldr	r2, [pc, #284]	@ (8002404 <HAL_GPIO_Init+0x2e8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d007      	beq.n	80022fc <HAL_GPIO_Init+0x1e0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a46      	ldr	r2, [pc, #280]	@ (8002408 <HAL_GPIO_Init+0x2ec>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_GPIO_Init+0x1dc>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e008      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 80022f8:	2305      	movs	r3, #5
 80022fa:	e006      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 80022fc:	2303      	movs	r3, #3
 80022fe:	e004      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 8002300:	2302      	movs	r3, #2
 8002302:	e002      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 8002308:	2300      	movs	r3, #0
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	f002 0203 	and.w	r2, r2, #3
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	4093      	lsls	r3, r2
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800231a:	4937      	ldr	r1, [pc, #220]	@ (80023f8 <HAL_GPIO_Init+0x2dc>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002328:	4b38      	ldr	r3, [pc, #224]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800234c:	4a2f      	ldr	r2, [pc, #188]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002352:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002376:	4a25      	ldr	r2, [pc, #148]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237c:	4b23      	ldr	r3, [pc, #140]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023a0:	4a1a      	ldr	r2, [pc, #104]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023ca:	4a10      	ldr	r2, [pc, #64]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f aea3 	bne.w	800212c <HAL_GPIO_Init+0x10>
  }
}
 80023e6:	bf00      	nop
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	48000400 	.word	0x48000400
 8002400:	48000800 	.word	0x48000800
 8002404:	48000c00 	.word	0x48000c00
 8002408:	48001000 	.word	0x48001000
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800242c:	e002      	b.n	8002434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e08d      	b.n	800256e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fc5a 	bl	8000d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	@ 0x24
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002490:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	e006      	b.n	80024c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d108      	bne.n	80024e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	e007      	b.n	80024f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	d138      	bne.n	80025fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002596:	2302      	movs	r3, #2
 8002598:	e032      	b.n	8002600 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2224      	movs	r2, #36	@ 0x24
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	d139      	bne.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800262c:	2302      	movs	r3, #2
 800262e:	e033      	b.n	8002698 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800265e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f001 b823 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 817d 	beq.w	80029da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026e0:	4bbc      	ldr	r3, [pc, #752]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d00c      	beq.n	8002706 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026ec:	4bb9      	ldr	r3, [pc, #740]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d15c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x10e>
 80026f8:	4bb6      	ldr	r3, [pc, #728]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002704:	d155      	bne.n	80027b2 <HAL_RCC_OscConfig+0x10e>
 8002706:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800270a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800271a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x94>
 8002732:	4ba8      	ldr	r3, [pc, #672]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0xc0>
 8002738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800273c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800274c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002750:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002754:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002760:	4b9c      	ldr	r3, [pc, #624]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002768:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800276c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002770:	fa92 f2a2 	rbit	r2, r2
 8002774:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002778:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f002 021f 	and.w	r2, r2, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 811f 	beq.w	80029d8 <HAL_RCC_OscConfig+0x334>
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 8116 	bne.w	80029d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f000 bfaf 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12e>
 80027c4:	4b83      	ldr	r3, [pc, #524]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a82      	ldr	r2, [pc, #520]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	e036      	b.n	8002840 <HAL_RCC_OscConfig+0x19c>
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x158>
 80027e2:	4b7c      	ldr	r3, [pc, #496]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7b      	ldr	r2, [pc, #492]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b79      	ldr	r3, [pc, #484]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a78      	ldr	r2, [pc, #480]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80027f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e021      	b.n	8002840 <HAL_RCC_OscConfig+0x19c>
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x184>
 800280e:	4b71      	ldr	r3, [pc, #452]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a70      	ldr	r2, [pc, #448]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b6e      	ldr	r3, [pc, #440]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6d      	ldr	r2, [pc, #436]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x19c>
 8002828:	4b6a      	ldr	r3, [pc, #424]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a69      	ldr	r2, [pc, #420]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b67      	ldr	r3, [pc, #412]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a66      	ldr	r2, [pc, #408]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 800283a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002840:	4b64      	ldr	r3, [pc, #400]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	f023 020f 	bic.w	r2, r3, #15
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	495f      	ldr	r1, [pc, #380]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 8002856:	4313      	orrs	r3, r2
 8002858:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d059      	beq.n	800291e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe fd17 	bl	800129c <HAL_GetTick>
 800286e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e00a      	b.n	800288a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fd12 	bl	800129c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b64      	cmp	r3, #100	@ 0x64
 8002882:	d902      	bls.n	800288a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	f000 bf43 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
 800288a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800288e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800289e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x218>
 80028b6:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e015      	b.n	80028e8 <HAL_RCC_OscConfig+0x244>
 80028bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80028d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80028d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80028e4:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028ec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80028f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80028f4:	fa92 f2a2 	rbit	r2, r2
 80028f8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80028fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f042 0220 	orr.w	r2, r2, #32
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ab      	beq.n	8002874 <HAL_RCC_OscConfig+0x1d0>
 800291c:	e05d      	b.n	80029da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fcbd 	bl	800129c <HAL_GetTick>
 8002922:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fcb8 	bl	800129c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	@ 0x64
 8002936:	d902      	bls.n	800293e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	f000 bee9 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
 800293e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002942:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002952:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <HAL_RCC_OscConfig+0x2cc>
 800296a:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e015      	b.n	800299c <HAL_RCC_OscConfig+0x2f8>
 8002970:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002974:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002984:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002988:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800298c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002998:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029a0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80029a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80029a8:	fa92 f2a2 	rbit	r2, r2
 80029ac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80029b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f042 0220 	orr.w	r2, r2, #32
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	f002 021f 	and.w	r2, r2, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ab      	bne.n	8002928 <HAL_RCC_OscConfig+0x284>
 80029d0:	e003      	b.n	80029da <HAL_RCC_OscConfig+0x336>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 817d 	beq.w	8002cea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029f0:	4ba6      	ldr	r3, [pc, #664]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029fc:	4ba3      	ldr	r3, [pc, #652]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d172      	bne.n	8002aee <HAL_RCC_OscConfig+0x44a>
 8002a08:	4ba0      	ldr	r3, [pc, #640]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d16c      	bne.n	8002aee <HAL_RCC_OscConfig+0x44a>
 8002a14:	2302      	movs	r3, #2
 8002a16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002a26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d102      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3a0>
 8002a3e:	4b93      	ldr	r3, [pc, #588]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	e013      	b.n	8002a6c <HAL_RCC_OscConfig+0x3c8>
 8002a44:	2302      	movs	r3, #2
 8002a46:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002a56:	2302      	movs	r3, #2
 8002a58:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002a5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002a68:	4b88      	ldr	r3, [pc, #544]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002a72:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002a7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f042 0220 	orr.w	r2, r2, #32
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f002 021f 	and.w	r2, r2, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x410>
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f000 be2e 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	4b75      	ldr	r3, [pc, #468]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	21f8      	movs	r1, #248	@ 0xf8
 8002aca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ad2:	fa91 f1a1 	rbit	r1, r1
 8002ad6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002ada:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002ade:	fab1 f181 	clz	r1, r1
 8002ae2:	b2c9      	uxtb	r1, r1
 8002ae4:	408b      	lsls	r3, r1
 8002ae6:	4969      	ldr	r1, [pc, #420]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aec:	e0fd      	b.n	8002cea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8088 	beq.w	8002c10 <HAL_RCC_OscConfig+0x56c>
 8002b00:	2301      	movs	r3, #1
 8002b02:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002b12:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	461a      	mov	r2, r3
 8002b28:	2301      	movs	r3, #1
 8002b2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fbb6 	bl	800129c <HAL_GetTick>
 8002b30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe fbb1 	bl	800129c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d902      	bls.n	8002b4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	f000 bde2 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002b5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4d8>
 8002b76:	4b45      	ldr	r3, [pc, #276]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_OscConfig+0x500>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002b94:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002baa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002bae:	fa92 f2a2 	rbit	r2, r2
 8002bb2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002bb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0220 	orr.w	r2, r2, #32
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0af      	beq.n	8002b36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	21f8      	movs	r1, #248	@ 0xf8
 8002bec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002bf4:	fa91 f1a1 	rbit	r1, r1
 8002bf8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002bfc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002c00:	fab1 f181 	clz	r1, r1
 8002c04:	b2c9      	uxtb	r1, r1
 8002c06:	408b      	lsls	r3, r1
 8002c08:	4920      	ldr	r1, [pc, #128]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
 8002c0e:	e06c      	b.n	8002cea <HAL_RCC_OscConfig+0x646>
 8002c10:	2301      	movs	r3, #1
 8002c12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	461a      	mov	r2, r3
 8002c38:	2300      	movs	r3, #0
 8002c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fb2e 	bl	800129c <HAL_GetTick>
 8002c40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c46:	f7fe fb29 	bl	800129c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	f000 bd5a 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d104      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5ec>
 8002c86:	4b01      	ldr	r3, [pc, #4]	@ (8002c8c <HAL_RCC_OscConfig+0x5e8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	e015      	b.n	8002cb8 <HAL_RCC_OscConfig+0x614>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ca8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002cb4:	4bc8      	ldr	r3, [pc, #800]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002cbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002cc2:	fa92 f2a2 	rbit	r2, r2
 8002cc6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002cca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002cce:	fab2 f282 	clz	r2, r2
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f042 0220 	orr.w	r2, r2, #32
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f002 021f 	and.w	r2, r2, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1ad      	bne.n	8002c46 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8110 	beq.w	8002f20 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d079      	beq.n	8002e04 <HAL_RCC_OscConfig+0x760>
 8002d10:	2301      	movs	r3, #1
 8002d12:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4bab      	ldr	r3, [pc, #684]	@ (8002fdc <HAL_RCC_OscConfig+0x938>)
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	461a      	mov	r2, r3
 8002d36:	2301      	movs	r3, #1
 8002d38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe faaf 	bl	800129c <HAL_GetTick>
 8002d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe faaa 	bl	800129c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d902      	bls.n	8002d5a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f000 bcdb 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d74:	2202      	movs	r2, #2
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d98:	2202      	movs	r2, #2
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002db2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db4:	4b88      	ldr	r3, [pc, #544]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002db6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	6019      	str	r1, [r3, #0]
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f1a3 	rbit	r1, r3
 8002dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002dda:	6019      	str	r1, [r3, #0]
  return result;
 8002ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0a0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x6a0>
 8002e02:	e08d      	b.n	8002f20 <HAL_RCC_OscConfig+0x87c>
 8002e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e26:	601a      	str	r2, [r3, #0]
  return result;
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b68      	ldr	r3, [pc, #416]	@ (8002fdc <HAL_RCC_OscConfig+0x938>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	461a      	mov	r2, r3
 8002e42:	2300      	movs	r3, #0
 8002e44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fa29 	bl	800129c <HAL_GetTick>
 8002e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e50:	f7fe fa24 	bl	800129c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d902      	bls.n	8002e66 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	f000 bc55 	b.w	8003710 <HAL_RCC_OscConfig+0x106c>
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e6e:	2202      	movs	r2, #2
 8002e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fa93 f2a3 	rbit	r2, r3
 8002e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e92:	2202      	movs	r2, #2
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ecc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ed0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed2:	4b41      	ldr	r3, [pc, #260]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ede:	2102      	movs	r1, #2
 8002ee0:	6019      	str	r1, [r3, #0]
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f1a3 	rbit	r1, r3
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ef8:	6019      	str	r1, [r3, #0]
  return result;
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d197      	bne.n	8002e50 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 81a1 	beq.w	8003278 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3c:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d116      	bne.n	8002f76 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f52:	61d3      	str	r3, [r2, #28]
 8002f54:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f6e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <HAL_RCC_OscConfig+0x93c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <HAL_RCC_OscConfig+0x93c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <HAL_RCC_OscConfig+0x93c>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f985 	bl	800129c <HAL_GetTick>
 8002f92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	e009      	b.n	8002fac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fe f980 	bl	800129c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	@ 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e3b1      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_RCC_OscConfig+0x93c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x940>
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a02      	ldr	r2, [pc, #8]	@ (8002fd8 <HAL_RCC_OscConfig+0x934>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	e03c      	b.n	8003050 <HAL_RCC_OscConfig+0x9ac>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	10908120 	.word	0x10908120
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x96a>
 8002ff4:	4bc1      	ldr	r3, [pc, #772]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4ac0      	ldr	r2, [pc, #768]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6213      	str	r3, [r2, #32]
 8003000:	4bbe      	ldr	r3, [pc, #760]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4abd      	ldr	r2, [pc, #756]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003006:	f023 0304 	bic.w	r3, r3, #4
 800300a:	6213      	str	r3, [r2, #32]
 800300c:	e020      	b.n	8003050 <HAL_RCC_OscConfig+0x9ac>
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x994>
 800301e:	4bb7      	ldr	r3, [pc, #732]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4ab6      	ldr	r2, [pc, #728]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6213      	str	r3, [r2, #32]
 800302a:	4bb4      	ldr	r3, [pc, #720]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4ab3      	ldr	r2, [pc, #716]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x9ac>
 8003038:	4bb0      	ldr	r3, [pc, #704]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4aaf      	ldr	r2, [pc, #700]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	4bad      	ldr	r3, [pc, #692]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4aac      	ldr	r2, [pc, #688]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003054:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8081 	beq.w	8003164 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fe f91b 	bl	800129c <HAL_GetTick>
 8003066:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe f916 	bl	800129c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e345      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800308c:	2202      	movs	r2, #2
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030b0:	2202      	movs	r2, #2
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030ca:	601a      	str	r2, [r3, #0]
  return result;
 80030cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d102      	bne.n	80030f0 <HAL_RCC_OscConfig+0xa4c>
 80030ea:	4b84      	ldr	r3, [pc, #528]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	e013      	b.n	8003118 <HAL_RCC_OscConfig+0xa74>
 80030f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80030f8:	2202      	movs	r2, #2
 80030fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fa93 f2a3 	rbit	r2, r3
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	4b79      	ldr	r3, [pc, #484]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800311c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003120:	2102      	movs	r1, #2
 8003122:	6011      	str	r1, [r2, #0]
 8003124:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003128:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	fa92 f1a2 	rbit	r1, r2
 8003132:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003136:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800313a:	6011      	str	r1, [r2, #0]
  return result;
 800313c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003140:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	fab2 f282 	clz	r2, r2
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f002 021f 	and.w	r2, r2, #31
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f202 	lsl.w	r2, r1, r2
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d084      	beq.n	800306c <HAL_RCC_OscConfig+0x9c8>
 8003162:	e07f      	b.n	8003264 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fe f89a 	bl	800129c <HAL_GetTick>
 8003168:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00b      	b.n	8003186 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe f895 	bl	800129c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e2c4      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800318e:	2202      	movs	r2, #2
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003196:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031b2:	2202      	movs	r2, #2
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031cc:	601a      	str	r2, [r3, #0]
  return result;
 80031ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f043 0302 	orr.w	r3, r3, #2
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0xb4e>
 80031ec:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	e013      	b.n	800321a <HAL_RCC_OscConfig+0xb76>
 80031f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80031fa:	2202      	movs	r2, #2
 80031fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	4b39      	ldr	r3, [pc, #228]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800321e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003222:	2102      	movs	r1, #2
 8003224:	6011      	str	r1, [r2, #0]
 8003226:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	fa92 f1a2 	rbit	r1, r2
 8003234:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003238:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800323c:	6011      	str	r1, [r2, #0]
  return result;
 800323e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003242:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fab2 f282 	clz	r2, r2
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	f002 021f 	and.w	r2, r2, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f202 	lsl.w	r2, r1, r2
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d184      	bne.n	800316e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003264:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b23      	ldr	r3, [pc, #140]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8242 	beq.w	800370e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328a:	4b1c      	ldr	r3, [pc, #112]	@ (80032fc <HAL_RCC_OscConfig+0xc58>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b08      	cmp	r3, #8
 8003294:	f000 8213 	beq.w	80036be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	f040 8162 	bne.w	800356e <HAL_RCC_OscConfig+0xeca>
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	fa93 f2a3 	rbit	r2, r3
 80032c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032ce:	601a      	str	r2, [r3, #0]
  return result;
 80032d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fd ffd4 	bl	800129c <HAL_GetTick>
 80032f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f8:	e00c      	b.n	8003314 <HAL_RCC_OscConfig+0xc70>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd ffcc 	bl	800129c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e1fd      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800331c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003338:	601a      	str	r2, [r3, #0]
  return result;
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003342:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d102      	bne.n	800335e <HAL_RCC_OscConfig+0xcba>
 8003358:	4bb0      	ldr	r3, [pc, #704]	@ (800361c <HAL_RCC_OscConfig+0xf78>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	e027      	b.n	80033ae <HAL_RCC_OscConfig+0xd0a>
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003366:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003370:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003388:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800338c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003396:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	fa93 f2a3 	rbit	r2, r3
 80033a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	4b9c      	ldr	r3, [pc, #624]	@ (800361c <HAL_RCC_OscConfig+0xf78>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033ba:	6011      	str	r1, [r2, #0]
 80033bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033c0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	fa92 f1a2 	rbit	r1, r2
 80033ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033d2:	6011      	str	r1, [r2, #0]
  return result;
 80033d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0220 	orr.w	r2, r2, #32
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d182      	bne.n	8003300 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fa:	4b88      	ldr	r3, [pc, #544]	@ (800361c <HAL_RCC_OscConfig+0xf78>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	430b      	orrs	r3, r1
 800341c:	497f      	ldr	r1, [pc, #508]	@ (800361c <HAL_RCC_OscConfig+0xf78>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
 8003422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003426:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800342a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800342e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003434:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	fa93 f2a3 	rbit	r2, r3
 800343e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003442:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003446:	601a      	str	r2, [r3, #0]
  return result;
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003450:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800345c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	461a      	mov	r2, r3
 8003464:	2301      	movs	r3, #1
 8003466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fd ff18 	bl	800129c <HAL_GetTick>
 800346c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003470:	e009      	b.n	8003486 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003472:	f7fd ff13 	bl	800129c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e144      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
 8003486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800348e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003498:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034aa:	601a      	str	r2, [r3, #0]
  return result;
 80034ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe2c>
 80034ca:	4b54      	ldr	r3, [pc, #336]	@ (800361c <HAL_RCC_OscConfig+0xf78>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e027      	b.n	8003520 <HAL_RCC_OscConfig+0xe7c>
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fa93 f2a3 	rbit	r2, r3
 80034ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80034fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	4b3f      	ldr	r3, [pc, #252]	@ (800361c <HAL_RCC_OscConfig+0xf78>)
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003524:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003528:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800352c:	6011      	str	r1, [r2, #0]
 800352e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003532:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	fa92 f1a2 	rbit	r1, r2
 800353c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003540:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003544:	6011      	str	r1, [r2, #0]
  return result;
 8003546:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800354a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	fab2 f282 	clz	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f042 0220 	orr.w	r2, r2, #32
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f002 021f 	and.w	r2, r2, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d082      	beq.n	8003472 <HAL_RCC_OscConfig+0xdce>
 800356c:	e0cf      	b.n	800370e <HAL_RCC_OscConfig+0x106a>
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003576:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800357a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003598:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800359c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	461a      	mov	r2, r3
 80035b0:	2300      	movs	r3, #0
 80035b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fd fe72 	bl	800129c <HAL_GetTick>
 80035b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035bc:	e009      	b.n	80035d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035be:	f7fd fe6d 	bl	800129c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e09e      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fa93 f2a3 	rbit	r2, r3
 80035ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80035f6:	601a      	str	r2, [r3, #0]
  return result;
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003600:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d104      	bne.n	8003620 <HAL_RCC_OscConfig+0xf7c>
 8003616:	4b01      	ldr	r3, [pc, #4]	@ (800361c <HAL_RCC_OscConfig+0xf78>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	e029      	b.n	8003670 <HAL_RCC_OscConfig+0xfcc>
 800361c:	40021000 	.word	0x40021000
 8003620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003624:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800362c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fa93 f2a3 	rbit	r2, r3
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800364e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003666:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_OscConfig+0x1078>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003674:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003678:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003682:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fa92 f1a2 	rbit	r1, r2
 800368c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003690:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003694:	6011      	str	r1, [r2, #0]
  return result;
 8003696:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800369a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	f042 0220 	orr.w	r2, r2, #32
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f002 021f 	and.w	r2, r2, #31
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d180      	bne.n	80035be <HAL_RCC_OscConfig+0xf1a>
 80036bc:	e027      	b.n	800370e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e01e      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d2:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_RCC_OscConfig+0x1078>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036de:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10b      	bne.n	800370a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003706:	429a      	cmp	r2, r3
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b09e      	sub	sp, #120	@ 0x78
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e162      	b.n	80039fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b90      	ldr	r3, [pc, #576]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b8d      	ldr	r3, [pc, #564]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	498b      	ldr	r1, [pc, #556]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b89      	ldr	r3, [pc, #548]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e14a      	b.n	80039fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b82      	ldr	r3, [pc, #520]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	497f      	ldr	r1, [pc, #508]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80dc 	beq.w	800394c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d13c      	bne.n	8003816 <HAL_RCC_ClockConfig+0xf6>
 800379c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80037aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xa6>
 80037c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	e00f      	b.n	80037e6 <HAL_RCC_ClockConfig+0xc6>
 80037c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80037d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037e2:	4b67      	ldr	r3, [pc, #412]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037ee:	fa92 f2a2 	rbit	r2, r2
 80037f2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80037f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037f6:	fab2 f282 	clz	r2, r2
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f042 0220 	orr.w	r2, r2, #32
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	f002 021f 	and.w	r2, r2, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d17b      	bne.n	800390a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0f3      	b.n	80039fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d13c      	bne.n	8003898 <HAL_RCC_ClockConfig+0x178>
 800381e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003822:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800382c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d102      	bne.n	8003848 <HAL_RCC_ClockConfig+0x128>
 8003842:	4b4f      	ldr	r3, [pc, #316]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	e00f      	b.n	8003868 <HAL_RCC_ClockConfig+0x148>
 8003848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	647b      	str	r3, [r7, #68]	@ 0x44
 8003856:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800385a:	643b      	str	r3, [r7, #64]	@ 0x40
 800385c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003864:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800386c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800386e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003870:	fa92 f2a2 	rbit	r2, r2
 8003874:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f002 021f 	and.w	r2, r2, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d13a      	bne.n	800390a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b2      	b.n	80039fe <HAL_RCC_ClockConfig+0x2de>
 8003898:	2302      	movs	r3, #2
 800389a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x1a0>
 80038ba:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	e00d      	b.n	80038dc <HAL_RCC_ClockConfig+0x1bc>
 80038c0:	2302      	movs	r3, #2
 80038c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80038cc:	2302      	movs	r3, #2
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	4b29      	ldr	r3, [pc, #164]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	2202      	movs	r2, #2
 80038de:	61ba      	str	r2, [r7, #24]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	fa92 f2a2 	rbit	r2, r2
 80038e6:	617a      	str	r2, [r7, #20]
  return result;
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	fab2 f282 	clz	r2, r2
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	f042 0220 	orr.w	r2, r2, #32
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	f002 021f 	and.w	r2, r2, #31
 80038fa:	2101      	movs	r1, #1
 80038fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e079      	b.n	80039fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390a:	4b1d      	ldr	r3, [pc, #116]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f023 0203 	bic.w	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	491a      	ldr	r1, [pc, #104]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800391c:	f7fd fcbe 	bl	800129c <HAL_GetTick>
 8003920:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	e00a      	b.n	800393a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003924:	f7fd fcba 	bl	800129c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e061      	b.n	80039fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	4b11      	ldr	r3, [pc, #68]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 020c 	and.w	r2, r3, #12
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	429a      	cmp	r2, r3
 800394a:	d1eb      	bne.n	8003924 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d214      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 0207 	bic.w	r2, r3, #7
 8003962:	4906      	ldr	r1, [pc, #24]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b04      	ldr	r3, [pc, #16]	@ (800397c <HAL_RCC_ClockConfig+0x25c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e040      	b.n	80039fe <HAL_RCC_ClockConfig+0x2de>
 800397c:	40022000 	.word	0x40022000
 8003980:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b1d      	ldr	r3, [pc, #116]	@ (8003a08 <HAL_RCC_ClockConfig+0x2e8>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	491a      	ldr	r1, [pc, #104]	@ (8003a08 <HAL_RCC_ClockConfig+0x2e8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ae:	4b16      	ldr	r3, [pc, #88]	@ (8003a08 <HAL_RCC_ClockConfig+0x2e8>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4912      	ldr	r1, [pc, #72]	@ (8003a08 <HAL_RCC_ClockConfig+0x2e8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039c2:	f000 f829 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <HAL_RCC_ClockConfig+0x2e8>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d0:	22f0      	movs	r2, #240	@ 0xf0
 80039d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	fa92 f2a2 	rbit	r2, r2
 80039da:	60fa      	str	r2, [r7, #12]
  return result;
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	fab2 f282 	clz	r2, r2
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	40d3      	lsrs	r3, r2
 80039e6:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <HAL_RCC_ClockConfig+0x2ec>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	fa21 f303 	lsr.w	r3, r1, r3
 80039ee:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <HAL_RCC_ClockConfig+0x2f0>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <HAL_RCC_ClockConfig+0x2f4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fc0c 	bl	8001214 <HAL_InitTick>
  
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3778      	adds	r7, #120	@ 0x78
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	08006324 	.word	0x08006324
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a32:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x94>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x30>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x36>
 8003a46:	e026      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a4a:	613b      	str	r3, [r7, #16]
      break;
 8003a4c:	e026      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0c9b      	lsrs	r3, r3, #18
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	4a17      	ldr	r2, [pc, #92]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
 8003a5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x94>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	4a14      	ldr	r2, [pc, #80]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a74:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e004      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	613b      	str	r3, [r7, #16]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003a98:	613b      	str	r3, [r7, #16]
      break;
 8003a9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9c:	693b      	ldr	r3, [r7, #16]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	0800633c 	.word	0x0800633c
 8003ab8:	0800634c 	.word	0x0800634c
 8003abc:	003d0900 	.word	0x003d0900
 8003ac0:	007a1200 	.word	0x007a1200

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ae2:	f7ff ffef 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003af0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003af4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	fa92 f2a2 	rbit	r2, r2
 8003afc:	603a      	str	r2, [r7, #0]
  return result;
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	40d3      	lsrs	r3, r2
 8003b08:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	08006334 	.word	0x08006334

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b26:	f7ff ffcd 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003b34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003b38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	fa92 f2a2 	rbit	r2, r2
 8003b40:	603a      	str	r2, [r7, #0]
  return result;
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	40d3      	lsrs	r3, r2
 8003b4c:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08006334 	.word	0x08006334

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b092      	sub	sp, #72	@ 0x48
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80d4 	beq.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b88:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4a4a      	ldr	r2, [pc, #296]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	61d3      	str	r3, [r2, #28]
 8003ba0:	4b48      	ldr	r3, [pc, #288]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b45      	ldr	r3, [pc, #276]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a41      	ldr	r2, [pc, #260]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fd fb67 	bl	800129c <HAL_GetTick>
 8003bce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd fb63 	bl	800129c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b64      	cmp	r3, #100	@ 0x64
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e169      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf0:	4b34      	ldr	r3, [pc, #208]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8084 	beq.w	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d07c      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c62:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04b      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fb13 	bl	800129c <HAL_GetTick>
 8003c76:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fb0f 	bl	800129c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e113      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003c90:	2302      	movs	r3, #2
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cbe:	4b01      	ldr	r3, [pc, #4]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	e00d      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	10908100 	.word	0x10908100
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	4b78      	ldr	r3, [pc, #480]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	613a      	str	r2, [r7, #16]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	fa92 f2a2 	rbit	r2, r2
 8003cea:	60fa      	str	r2, [r7, #12]
  return result;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f002 021f 	and.w	r2, r2, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0b7      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	496a      	ldr	r1, [pc, #424]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b66      	ldr	r3, [pc, #408]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4a65      	ldr	r2, [pc, #404]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3c:	4b60      	ldr	r3, [pc, #384]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f023 0203 	bic.w	r2, r3, #3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	495d      	ldr	r1, [pc, #372]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d5a:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4956      	ldr	r1, [pc, #344]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d78:	4b51      	ldr	r3, [pc, #324]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	494e      	ldr	r1, [pc, #312]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d96:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	f023 0210 	bic.w	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4947      	ldr	r1, [pc, #284]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003db4:	4b42      	ldr	r3, [pc, #264]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	493f      	ldr	r1, [pc, #252]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	f023 0220 	bic.w	r2, r3, #32
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4938      	ldr	r1, [pc, #224]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df0:	4b33      	ldr	r3, [pc, #204]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4930      	ldr	r1, [pc, #192]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	4929      	ldr	r1, [pc, #164]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e2c:	4b24      	ldr	r3, [pc, #144]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	4921      	ldr	r1, [pc, #132]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	491a      	ldr	r1, [pc, #104]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e68:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	4912      	ldr	r1, [pc, #72]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e86:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	490b      	ldr	r1, [pc, #44]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	4903      	ldr	r1, [pc, #12]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3748      	adds	r7, #72	@ 0x48
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e09d      	b.n	8004012 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d108      	bne.n	8003ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee6:	d009      	beq.n	8003efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
 8003eee:	e005      	b.n	8003efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc ff46 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f3c:	d902      	bls.n	8003f44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e002      	b.n	8003f4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f52:	d007      	beq.n	8003f64 <HAL_SPI_Init+0xa0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	ea42 0103 	orr.w	r1, r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	f003 0204 	and.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fe0:	ea42 0103 	orr.w	r1, r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e049      	b.n	80040c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fc fef5 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f000 fda7 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e049      	b.n	800416e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f841 	bl	8004176 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f000 fd50 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <HAL_TIM_PWM_Start+0x24>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e03c      	b.n	800422a <HAL_TIM_PWM_Start+0x9e>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d109      	bne.n	80041ca <HAL_TIM_PWM_Start+0x3e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	e02f      	b.n	800422a <HAL_TIM_PWM_Start+0x9e>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d109      	bne.n	80041e4 <HAL_TIM_PWM_Start+0x58>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e022      	b.n	800422a <HAL_TIM_PWM_Start+0x9e>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d109      	bne.n	80041fe <HAL_TIM_PWM_Start+0x72>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	bf14      	ite	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	2300      	moveq	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e015      	b.n	800422a <HAL_TIM_PWM_Start+0x9e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b10      	cmp	r3, #16
 8004202:	d109      	bne.n	8004218 <HAL_TIM_PWM_Start+0x8c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e008      	b.n	800422a <HAL_TIM_PWM_Start+0x9e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e097      	b.n	8004362 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0xb6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004240:	e023      	b.n	800428a <HAL_TIM_PWM_Start+0xfe>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0xc6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004250:	e01b      	b.n	800428a <HAL_TIM_PWM_Start+0xfe>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start+0xd6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004260:	e013      	b.n	800428a <HAL_TIM_PWM_Start+0xfe>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b0c      	cmp	r3, #12
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start+0xe6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004270:	e00b      	b.n	800428a <HAL_TIM_PWM_Start+0xfe>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b10      	cmp	r3, #16
 8004276:	d104      	bne.n	8004282 <HAL_TIM_PWM_Start+0xf6>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004280:	e003      	b.n	800428a <HAL_TIM_PWM_Start+0xfe>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f001 f9b4 	bl	8005600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a33      	ldr	r2, [pc, #204]	@ (800436c <HAL_TIM_PWM_Start+0x1e0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <HAL_TIM_PWM_Start+0x13e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a32      	ldr	r2, [pc, #200]	@ (8004370 <HAL_TIM_PWM_Start+0x1e4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00e      	beq.n	80042ca <HAL_TIM_PWM_Start+0x13e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <HAL_TIM_PWM_Start+0x1e8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d009      	beq.n	80042ca <HAL_TIM_PWM_Start+0x13e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004378 <HAL_TIM_PWM_Start+0x1ec>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_TIM_PWM_Start+0x13e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2d      	ldr	r2, [pc, #180]	@ (800437c <HAL_TIM_PWM_Start+0x1f0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_TIM_PWM_Start+0x142>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_TIM_PWM_Start+0x144>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a20      	ldr	r2, [pc, #128]	@ (800436c <HAL_TIM_PWM_Start+0x1e0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d018      	beq.n	8004320 <HAL_TIM_PWM_Start+0x194>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f6:	d013      	beq.n	8004320 <HAL_TIM_PWM_Start+0x194>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a20      	ldr	r2, [pc, #128]	@ (8004380 <HAL_TIM_PWM_Start+0x1f4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_PWM_Start+0x194>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1f      	ldr	r2, [pc, #124]	@ (8004384 <HAL_TIM_PWM_Start+0x1f8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_PWM_Start+0x194>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <HAL_TIM_PWM_Start+0x1e4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_PWM_Start+0x194>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a16      	ldr	r2, [pc, #88]	@ (8004374 <HAL_TIM_PWM_Start+0x1e8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d115      	bne.n	800434c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <HAL_TIM_PWM_Start+0x1fc>)
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d015      	beq.n	800435e <HAL_TIM_PWM_Start+0x1d2>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004338:	d011      	beq.n	800435e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	e008      	b.n	800435e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e000      	b.n	8004360 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40013400 	.word	0x40013400
 8004374:	40014000 	.word	0x40014000
 8004378:	40014400 	.word	0x40014400
 800437c:	40014800 	.word	0x40014800
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	00010007 	.word	0x00010007

0800438c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e049      	b.n	8004432 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f841 	bl	800443a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 fbee 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f06f 0202 	mvn.w	r2, #2
 8004482:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fb68 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 800449e:	e005      	b.n	80044ac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fb5a 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fb6b 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01b      	beq.n	80044fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f06f 0204 	mvn.w	r2, #4
 80044ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fb42 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 80044ea:	e005      	b.n	80044f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb34 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fb45 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01b      	beq.n	800454a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0208 	mvn.w	r2, #8
 800451a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fb1c 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004536:	e005      	b.n	8004544 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fb0e 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fb1f 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0210 	mvn.w	r2, #16
 8004566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2208      	movs	r2, #8
 800456c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 faf6 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004582:	e005      	b.n	8004590 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fae8 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 faf9 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00c      	beq.n	80045ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0201 	mvn.w	r2, #1
 80045b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fac6 	bl	8004b46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00c      	beq.n	80045de <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f001 f9f3 	bl	80059c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 f9eb 	bl	80059d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00c      	beq.n	8004626 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800461e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fab8 	bl	8004b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0220 	mvn.w	r2, #32
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 f9b3 	bl	80059b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_TIM_IC_ConfigChannel+0x1e>
 800466c:	2302      	movs	r3, #2
 800466e:	e088      	b.n	8004782 <HAL_TIM_IC_ConfigChannel+0x130>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11b      	bne.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800468e:	f000 fdff 	bl	8005290 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 020c 	bic.w	r2, r2, #12
 80046a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6999      	ldr	r1, [r3, #24]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	619a      	str	r2, [r3, #24]
 80046b4:	e060      	b.n	8004778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d11c      	bne.n	80046f6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80046cc:	f000 fe77 	bl	80053be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80046de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6999      	ldr	r1, [r3, #24]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	619a      	str	r2, [r3, #24]
 80046f4:	e040      	b.n	8004778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800470c:	f000 fec4 	bl	8005498 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 020c 	bic.w	r2, r2, #12
 800471e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69d9      	ldr	r1, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	61da      	str	r2, [r3, #28]
 8004732:	e021      	b.n	8004778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d11c      	bne.n	8004774 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800474a:	f000 fee1 	bl	8005510 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800475c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69d9      	ldr	r1, [r3, #28]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	021a      	lsls	r2, r3, #8
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	61da      	str	r2, [r3, #28]
 8004772:	e001      	b.n	8004778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0ff      	b.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b14      	cmp	r3, #20
 80047b6:	f200 80f0 	bhi.w	800499a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	08004815 	.word	0x08004815
 80047c4:	0800499b 	.word	0x0800499b
 80047c8:	0800499b 	.word	0x0800499b
 80047cc:	0800499b 	.word	0x0800499b
 80047d0:	08004855 	.word	0x08004855
 80047d4:	0800499b 	.word	0x0800499b
 80047d8:	0800499b 	.word	0x0800499b
 80047dc:	0800499b 	.word	0x0800499b
 80047e0:	08004897 	.word	0x08004897
 80047e4:	0800499b 	.word	0x0800499b
 80047e8:	0800499b 	.word	0x0800499b
 80047ec:	0800499b 	.word	0x0800499b
 80047f0:	080048d7 	.word	0x080048d7
 80047f4:	0800499b 	.word	0x0800499b
 80047f8:	0800499b 	.word	0x0800499b
 80047fc:	0800499b 	.word	0x0800499b
 8004800:	08004919 	.word	0x08004919
 8004804:	0800499b 	.word	0x0800499b
 8004808:	0800499b 	.word	0x0800499b
 800480c:	0800499b 	.word	0x0800499b
 8004810:	08004959 	.word	0x08004959
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa62 	bl	8004ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	619a      	str	r2, [r3, #24]
      break;
 8004852:	e0a5      	b.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fad2 	bl	8004e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800486e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800487e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6999      	ldr	r1, [r3, #24]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	619a      	str	r2, [r3, #24]
      break;
 8004894:	e084      	b.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fb3b 	bl	8004f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0208 	orr.w	r2, r2, #8
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0204 	bic.w	r2, r2, #4
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	61da      	str	r2, [r3, #28]
      break;
 80048d4:	e064      	b.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fba3 	bl	8005028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	021a      	lsls	r2, r3, #8
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	61da      	str	r2, [r3, #28]
      break;
 8004916:	e043      	b.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fbec 	bl	80050fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0208 	orr.w	r2, r2, #8
 8004932:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0204 	bic.w	r2, r2, #4
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004956:	e023      	b.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fc30 	bl	80051c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004982:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	021a      	lsls	r2, r3, #8
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004998:	e002      	b.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
      break;
 800499e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop

080049b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_ConfigClockSource+0x1c>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0b6      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x18a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0c:	d03e      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0xd8>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a12:	f200 8087 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	f000 8086 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x176>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a22:	d87f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a24:	2b70      	cmp	r3, #112	@ 0x70
 8004a26:	d01a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xaa>
 8004a28:	2b70      	cmp	r3, #112	@ 0x70
 8004a2a:	d87b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a2c:	2b60      	cmp	r3, #96	@ 0x60
 8004a2e:	d050      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x11e>
 8004a30:	2b60      	cmp	r3, #96	@ 0x60
 8004a32:	d877      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a34:	2b50      	cmp	r3, #80	@ 0x50
 8004a36:	d03c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xfe>
 8004a38:	2b50      	cmp	r3, #80	@ 0x50
 8004a3a:	d873      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a3c:	2b40      	cmp	r3, #64	@ 0x40
 8004a3e:	d058      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x13e>
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d86f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a44:	2b30      	cmp	r3, #48	@ 0x30
 8004a46:	d064      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a48:	2b30      	cmp	r3, #48	@ 0x30
 8004a4a:	d86b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d060      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d867      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d05a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15e>
 8004a5c:	e062      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	f000 fda7 	bl	80055c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e04f      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	f000 fd90 	bl	80055c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aae:	609a      	str	r2, [r3, #8]
      break;
 8004ab0:	e03c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 fc4e 	bl	8005360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2150      	movs	r1, #80	@ 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fd5d 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e02c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 fcaa 	bl	8005438 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2160      	movs	r1, #96	@ 0x60
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fd4d 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004af0:	e01c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 fc2e 	bl	8005360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	@ 0x40
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fd3d 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004b10:	e00c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 fd34 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004b22:	e003      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a42      	ldr	r2, [pc, #264]	@ (8004cc8 <TIM_Base_SetConfig+0x11c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00f      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bca:	d00b      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3f      	ldr	r2, [pc, #252]	@ (8004ccc <TIM_Base_SetConfig+0x120>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3d      	ldr	r2, [pc, #244]	@ (8004cd4 <TIM_Base_SetConfig+0x128>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a33      	ldr	r2, [pc, #204]	@ (8004cc8 <TIM_Base_SetConfig+0x11c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01b      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c04:	d017      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a30      	ldr	r2, [pc, #192]	@ (8004ccc <TIM_Base_SetConfig+0x120>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00f      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd4 <TIM_Base_SetConfig+0x128>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd8 <TIM_Base_SetConfig+0x12c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2c      	ldr	r2, [pc, #176]	@ (8004cdc <TIM_Base_SetConfig+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce0 <TIM_Base_SetConfig+0x134>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d108      	bne.n	8004c48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	@ (8004cc8 <TIM_Base_SetConfig+0x11c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00f      	beq.n	8004c94 <TIM_Base_SetConfig+0xe8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <TIM_Base_SetConfig+0x128>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <TIM_Base_SetConfig+0xe8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a16      	ldr	r2, [pc, #88]	@ (8004cd8 <TIM_Base_SetConfig+0x12c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_Base_SetConfig+0xe8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a15      	ldr	r2, [pc, #84]	@ (8004cdc <TIM_Base_SetConfig+0x130>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_Base_SetConfig+0xe8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a14      	ldr	r2, [pc, #80]	@ (8004ce0 <TIM_Base_SetConfig+0x134>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d103      	bne.n	8004c9c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f023 0201 	bic.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <TIM_OC1_SetConfig+0x10c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00f      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a2b      	ldr	r2, [pc, #172]	@ (8004df4 <TIM_OC1_SetConfig+0x110>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004df8 <TIM_OC1_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a29      	ldr	r2, [pc, #164]	@ (8004dfc <TIM_OC1_SetConfig+0x118>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a28      	ldr	r2, [pc, #160]	@ (8004e00 <TIM_OC1_SetConfig+0x11c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10c      	bne.n	8004d7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0308 	bic.w	r3, r3, #8
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <TIM_OC1_SetConfig+0x10c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	@ (8004df4 <TIM_OC1_SetConfig+0x110>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <TIM_OC1_SetConfig+0x114>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <TIM_OC1_SetConfig+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <TIM_OC1_SetConfig+0x11c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d111      	bne.n	8004dca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40013400 	.word	0x40013400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800

08004e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f023 0210 	bic.w	r2, r3, #16
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a28      	ldr	r2, [pc, #160]	@ (8004f04 <TIM_OC2_SetConfig+0x100>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC2_SetConfig+0x6c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a27      	ldr	r2, [pc, #156]	@ (8004f08 <TIM_OC2_SetConfig+0x104>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10d      	bne.n	8004e8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f04 <TIM_OC2_SetConfig+0x100>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00f      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	@ (8004f08 <TIM_OC2_SetConfig+0x104>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <TIM_OC2_SetConfig+0x108>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f10 <TIM_OC2_SetConfig+0x10c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a19      	ldr	r2, [pc, #100]	@ (8004f14 <TIM_OC2_SetConfig+0x110>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d113      	bne.n	8004edc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ec2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40013400 	.word	0x40013400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a27      	ldr	r2, [pc, #156]	@ (8005014 <TIM_OC3_SetConfig+0xfc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_OC3_SetConfig+0x6a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a26      	ldr	r2, [pc, #152]	@ (8005018 <TIM_OC3_SetConfig+0x100>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10d      	bne.n	8004f9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f9c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <TIM_OC3_SetConfig+0xfc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <TIM_OC3_SetConfig+0x100>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800501c <TIM_OC3_SetConfig+0x104>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <TIM_OC3_SetConfig+0x108>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <TIM_OC3_SetConfig+0x10c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40013400 	.word	0x40013400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800

08005028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <TIM_OC4_SetConfig+0xc0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00f      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <TIM_OC4_SetConfig+0xc4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a16      	ldr	r2, [pc, #88]	@ (80050f0 <TIM_OC4_SetConfig+0xc8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a15      	ldr	r2, [pc, #84]	@ (80050f4 <TIM_OC4_SetConfig+0xcc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a14      	ldr	r2, [pc, #80]	@ (80050f8 <TIM_OC4_SetConfig+0xd0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d109      	bne.n	80050c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800512a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a17      	ldr	r2, [pc, #92]	@ (80051b0 <TIM_OC5_SetConfig+0xb4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <TIM_OC5_SetConfig+0xb8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <TIM_OC5_SetConfig+0xbc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <TIM_OC5_SetConfig+0xc0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <TIM_OC5_SetConfig+0xc4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d109      	bne.n	800518a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800520a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	051b      	lsls	r3, r3, #20
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a18      	ldr	r2, [pc, #96]	@ (800527c <TIM_OC6_SetConfig+0xb8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <TIM_OC6_SetConfig+0xbc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <TIM_OC6_SetConfig+0xc0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a15      	ldr	r2, [pc, #84]	@ (8005288 <TIM_OC6_SetConfig+0xc4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a14      	ldr	r2, [pc, #80]	@ (800528c <TIM_OC6_SetConfig+0xc8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d109      	bne.n	8005254 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f023 0201 	bic.w	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a24      	ldr	r2, [pc, #144]	@ (800534c <TIM_TI1_SetConfig+0xbc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c4:	d00f      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a21      	ldr	r2, [pc, #132]	@ (8005350 <TIM_TI1_SetConfig+0xc0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a20      	ldr	r2, [pc, #128]	@ (8005354 <TIM_TI1_SetConfig+0xc4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005358 <TIM_TI1_SetConfig+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <TIM_TI1_SetConfig+0xcc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <TIM_TI1_SetConfig+0x5a>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <TIM_TI1_SetConfig+0x5c>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e003      	b.n	800530a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	b2db      	uxtb	r3, r3
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 030a 	bic.w	r3, r3, #10
 8005324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f003 030a 	and.w	r3, r3, #10
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40013400 	.word	0x40013400
 800535c:	40014000 	.word	0x40014000

08005360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 030a 	bic.w	r3, r3, #10
 800539c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f023 0210 	bic.w	r2, r3, #16
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	b29b      	uxth	r3, r3
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005410:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 0210 	bic.w	r2, r3, #16
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	031b      	lsls	r3, r3, #12
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f023 0303 	bic.w	r3, r3, #3
 80054c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800553c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800554e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	031b      	lsls	r3, r3, #12
 8005554:	b29b      	uxth	r3, r3
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005562:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	031b      	lsls	r3, r3, #12
 8005568:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f043 0307 	orr.w	r3, r3, #7
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	021a      	lsls	r2, r3, #8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2201      	movs	r2, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1a      	ldr	r2, [r3, #32]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	43db      	mvns	r3, r3
 8005622:	401a      	ands	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1a      	ldr	r2, [r3, #32]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	fa01 f303 	lsl.w	r3, r1, r3
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <HAL_TIMEx_PWMN_Start+0x24>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e022      	b.n	80056b6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b04      	cmp	r3, #4
 8005674:	d109      	bne.n	800568a <HAL_TIMEx_PWMN_Start+0x3e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b01      	cmp	r3, #1
 8005680:	bf14      	ite	ne
 8005682:	2301      	movne	r3, #1
 8005684:	2300      	moveq	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	e015      	b.n	80056b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b08      	cmp	r3, #8
 800568e:	d109      	bne.n	80056a4 <HAL_TIMEx_PWMN_Start+0x58>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e008      	b.n	80056b6 <HAL_TIMEx_PWMN_Start+0x6a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e069      	b.n	8005792 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <HAL_TIMEx_PWMN_Start+0x82>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056cc:	e013      	b.n	80056f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d104      	bne.n	80056de <HAL_TIMEx_PWMN_Start+0x92>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056dc:	e00b      	b.n	80056f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d104      	bne.n	80056ee <HAL_TIMEx_PWMN_Start+0xa2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056ec:	e003      	b.n	80056f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2204      	movs	r2, #4
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f974 	bl	80059ec <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005712:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a20      	ldr	r2, [pc, #128]	@ (800579c <HAL_TIMEx_PWMN_Start+0x150>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d018      	beq.n	8005750 <HAL_TIMEx_PWMN_Start+0x104>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005726:	d013      	beq.n	8005750 <HAL_TIMEx_PWMN_Start+0x104>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1c      	ldr	r2, [pc, #112]	@ (80057a0 <HAL_TIMEx_PWMN_Start+0x154>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00e      	beq.n	8005750 <HAL_TIMEx_PWMN_Start+0x104>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1b      	ldr	r2, [pc, #108]	@ (80057a4 <HAL_TIMEx_PWMN_Start+0x158>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_TIMEx_PWMN_Start+0x104>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_TIMEx_PWMN_Start+0x104>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a18      	ldr	r2, [pc, #96]	@ (80057ac <HAL_TIMEx_PWMN_Start+0x160>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d115      	bne.n	800577c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	4b16      	ldr	r3, [pc, #88]	@ (80057b0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005758:	4013      	ands	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b06      	cmp	r3, #6
 8005760:	d015      	beq.n	800578e <HAL_TIMEx_PWMN_Start+0x142>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005768:	d011      	beq.n	800578e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	e008      	b.n	800578e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e000      	b.n	8005790 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40013400 	.word	0x40013400
 80057ac:	40014000 	.word	0x40014000
 80057b0:	00010007 	.word	0x00010007

080057b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e063      	b.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2b      	ldr	r2, [pc, #172]	@ (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2a      	ldr	r2, [pc, #168]	@ (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d108      	bne.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1b      	ldr	r2, [pc, #108]	@ (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583e:	d013      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a18      	ldr	r2, [pc, #96]	@ (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a17      	ldr	r2, [pc, #92]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a12      	ldr	r2, [pc, #72]	@ (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d10c      	bne.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800586e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4313      	orrs	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40014000 	.word	0x40014000

080058b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e065      	b.n	800599c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a16      	ldr	r2, [pc, #88]	@ (80059a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a14      	ldr	r2, [pc, #80]	@ (80059ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d115      	bne.n	800598a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	051b      	lsls	r3, r3, #20
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40013400 	.word	0x40013400

080059b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	2204      	movs	r2, #4
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1a      	ldr	r2, [r3, #32]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	401a      	ands	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e040      	b.n	8005aca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fb fb0b 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2224      	movs	r2, #36	@ 0x24
 8005a62:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f9fd 	bl	8005e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f826 	bl	8005ad4 <UART_SetConfig>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e01b      	b.n	8005aca <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ab0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa7c 	bl	8005fc0 <UART_CheckIdleState>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005b02:	f023 030c 	bic.w	r3, r3, #12
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4aa7      	ldr	r2, [pc, #668]	@ (8005dec <UART_SetConfig+0x318>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d120      	bne.n	8005b96 <UART_SetConfig+0xc2>
 8005b54:	4ba6      	ldr	r3, [pc, #664]	@ (8005df0 <UART_SetConfig+0x31c>)
 8005b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d817      	bhi.n	8005b90 <UART_SetConfig+0xbc>
 8005b60:	a201      	add	r2, pc, #4	@ (adr r2, 8005b68 <UART_SetConfig+0x94>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b85 	.word	0x08005b85
 8005b70:	08005b8b 	.word	0x08005b8b
 8005b74:	08005b7f 	.word	0x08005b7f
 8005b78:	2301      	movs	r3, #1
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e0b5      	b.n	8005cea <UART_SetConfig+0x216>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e0b2      	b.n	8005cea <UART_SetConfig+0x216>
 8005b84:	2304      	movs	r3, #4
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e0af      	b.n	8005cea <UART_SetConfig+0x216>
 8005b8a:	2308      	movs	r3, #8
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e0ac      	b.n	8005cea <UART_SetConfig+0x216>
 8005b90:	2310      	movs	r3, #16
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e0a9      	b.n	8005cea <UART_SetConfig+0x216>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a96      	ldr	r2, [pc, #600]	@ (8005df4 <UART_SetConfig+0x320>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d124      	bne.n	8005bea <UART_SetConfig+0x116>
 8005ba0:	4b93      	ldr	r3, [pc, #588]	@ (8005df0 <UART_SetConfig+0x31c>)
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bac:	d011      	beq.n	8005bd2 <UART_SetConfig+0xfe>
 8005bae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bb2:	d817      	bhi.n	8005be4 <UART_SetConfig+0x110>
 8005bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bb8:	d011      	beq.n	8005bde <UART_SetConfig+0x10a>
 8005bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bbe:	d811      	bhi.n	8005be4 <UART_SetConfig+0x110>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <UART_SetConfig+0xf8>
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc8:	d006      	beq.n	8005bd8 <UART_SetConfig+0x104>
 8005bca:	e00b      	b.n	8005be4 <UART_SetConfig+0x110>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e08b      	b.n	8005cea <UART_SetConfig+0x216>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e088      	b.n	8005cea <UART_SetConfig+0x216>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e085      	b.n	8005cea <UART_SetConfig+0x216>
 8005bde:	2308      	movs	r3, #8
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e082      	b.n	8005cea <UART_SetConfig+0x216>
 8005be4:	2310      	movs	r3, #16
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e07f      	b.n	8005cea <UART_SetConfig+0x216>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a82      	ldr	r2, [pc, #520]	@ (8005df8 <UART_SetConfig+0x324>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d124      	bne.n	8005c3e <UART_SetConfig+0x16a>
 8005bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8005df0 <UART_SetConfig+0x31c>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005bfc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c00:	d011      	beq.n	8005c26 <UART_SetConfig+0x152>
 8005c02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c06:	d817      	bhi.n	8005c38 <UART_SetConfig+0x164>
 8005c08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c0c:	d011      	beq.n	8005c32 <UART_SetConfig+0x15e>
 8005c0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c12:	d811      	bhi.n	8005c38 <UART_SetConfig+0x164>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <UART_SetConfig+0x14c>
 8005c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c1c:	d006      	beq.n	8005c2c <UART_SetConfig+0x158>
 8005c1e:	e00b      	b.n	8005c38 <UART_SetConfig+0x164>
 8005c20:	2300      	movs	r3, #0
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e061      	b.n	8005cea <UART_SetConfig+0x216>
 8005c26:	2302      	movs	r3, #2
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e05e      	b.n	8005cea <UART_SetConfig+0x216>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e05b      	b.n	8005cea <UART_SetConfig+0x216>
 8005c32:	2308      	movs	r3, #8
 8005c34:	77fb      	strb	r3, [r7, #31]
 8005c36:	e058      	b.n	8005cea <UART_SetConfig+0x216>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e055      	b.n	8005cea <UART_SetConfig+0x216>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a6e      	ldr	r2, [pc, #440]	@ (8005dfc <UART_SetConfig+0x328>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d124      	bne.n	8005c92 <UART_SetConfig+0x1be>
 8005c48:	4b69      	ldr	r3, [pc, #420]	@ (8005df0 <UART_SetConfig+0x31c>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005c50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c54:	d011      	beq.n	8005c7a <UART_SetConfig+0x1a6>
 8005c56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c5a:	d817      	bhi.n	8005c8c <UART_SetConfig+0x1b8>
 8005c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c60:	d011      	beq.n	8005c86 <UART_SetConfig+0x1b2>
 8005c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c66:	d811      	bhi.n	8005c8c <UART_SetConfig+0x1b8>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <UART_SetConfig+0x1a0>
 8005c6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c70:	d006      	beq.n	8005c80 <UART_SetConfig+0x1ac>
 8005c72:	e00b      	b.n	8005c8c <UART_SetConfig+0x1b8>
 8005c74:	2300      	movs	r3, #0
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e037      	b.n	8005cea <UART_SetConfig+0x216>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e034      	b.n	8005cea <UART_SetConfig+0x216>
 8005c80:	2304      	movs	r3, #4
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e031      	b.n	8005cea <UART_SetConfig+0x216>
 8005c86:	2308      	movs	r3, #8
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e02e      	b.n	8005cea <UART_SetConfig+0x216>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e02b      	b.n	8005cea <UART_SetConfig+0x216>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5a      	ldr	r2, [pc, #360]	@ (8005e00 <UART_SetConfig+0x32c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d124      	bne.n	8005ce6 <UART_SetConfig+0x212>
 8005c9c:	4b54      	ldr	r3, [pc, #336]	@ (8005df0 <UART_SetConfig+0x31c>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005ca4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ca8:	d011      	beq.n	8005cce <UART_SetConfig+0x1fa>
 8005caa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cae:	d817      	bhi.n	8005ce0 <UART_SetConfig+0x20c>
 8005cb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cb4:	d011      	beq.n	8005cda <UART_SetConfig+0x206>
 8005cb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cba:	d811      	bhi.n	8005ce0 <UART_SetConfig+0x20c>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <UART_SetConfig+0x1f4>
 8005cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cc4:	d006      	beq.n	8005cd4 <UART_SetConfig+0x200>
 8005cc6:	e00b      	b.n	8005ce0 <UART_SetConfig+0x20c>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	77fb      	strb	r3, [r7, #31]
 8005ccc:	e00d      	b.n	8005cea <UART_SetConfig+0x216>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	77fb      	strb	r3, [r7, #31]
 8005cd2:	e00a      	b.n	8005cea <UART_SetConfig+0x216>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e007      	b.n	8005cea <UART_SetConfig+0x216>
 8005cda:	2308      	movs	r3, #8
 8005cdc:	77fb      	strb	r3, [r7, #31]
 8005cde:	e004      	b.n	8005cea <UART_SetConfig+0x216>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e001      	b.n	8005cea <UART_SetConfig+0x216>
 8005ce6:	2310      	movs	r3, #16
 8005ce8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf2:	d15b      	bne.n	8005dac <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005cf4:	7ffb      	ldrb	r3, [r7, #31]
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d827      	bhi.n	8005d4a <UART_SetConfig+0x276>
 8005cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0x22c>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d25 	.word	0x08005d25
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d4b 	.word	0x08005d4b
 8005d10:	08005d3b 	.word	0x08005d3b
 8005d14:	08005d4b 	.word	0x08005d4b
 8005d18:	08005d4b 	.word	0x08005d4b
 8005d1c:	08005d4b 	.word	0x08005d4b
 8005d20:	08005d43 	.word	0x08005d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d24:	f7fd feda 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8005d28:	61b8      	str	r0, [r7, #24]
        break;
 8005d2a:	e013      	b.n	8005d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d2c:	f7fd fef8 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8005d30:	61b8      	str	r0, [r7, #24]
        break;
 8005d32:	e00f      	b.n	8005d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d34:	4b33      	ldr	r3, [pc, #204]	@ (8005e04 <UART_SetConfig+0x330>)
 8005d36:	61bb      	str	r3, [r7, #24]
        break;
 8005d38:	e00c      	b.n	8005d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3a:	f7fd fe6d 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8005d3e:	61b8      	str	r0, [r7, #24]
        break;
 8005d40:	e008      	b.n	8005d54 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d46:	61bb      	str	r3, [r7, #24]
        break;
 8005d48:	e004      	b.n	8005d54 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	77bb      	strb	r3, [r7, #30]
        break;
 8005d52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8082 	beq.w	8005e60 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	005a      	lsls	r2, r3, #1
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	441a      	add	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b0f      	cmp	r3, #15
 8005d76:	d916      	bls.n	8005da6 <UART_SetConfig+0x2d2>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d7e:	d212      	bcs.n	8005da6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f023 030f 	bic.w	r3, r3, #15
 8005d88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	89fb      	ldrh	r3, [r7, #14]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	89fa      	ldrh	r2, [r7, #14]
 8005da2:	60da      	str	r2, [r3, #12]
 8005da4:	e05c      	b.n	8005e60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	77bb      	strb	r3, [r7, #30]
 8005daa:	e059      	b.n	8005e60 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dac:	7ffb      	ldrb	r3, [r7, #31]
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d835      	bhi.n	8005e1e <UART_SetConfig+0x34a>
 8005db2:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <UART_SetConfig+0x2e4>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005e09 	.word	0x08005e09
 8005dc4:	08005e1f 	.word	0x08005e1f
 8005dc8:	08005e0f 	.word	0x08005e0f
 8005dcc:	08005e1f 	.word	0x08005e1f
 8005dd0:	08005e1f 	.word	0x08005e1f
 8005dd4:	08005e1f 	.word	0x08005e1f
 8005dd8:	08005e17 	.word	0x08005e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ddc:	f7fd fe7e 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8005de0:	61b8      	str	r0, [r7, #24]
        break;
 8005de2:	e021      	b.n	8005e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fd fe9c 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8005de8:	61b8      	str	r0, [r7, #24]
        break;
 8005dea:	e01d      	b.n	8005e28 <UART_SetConfig+0x354>
 8005dec:	40013800 	.word	0x40013800
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40004400 	.word	0x40004400
 8005df8:	40004800 	.word	0x40004800
 8005dfc:	40004c00 	.word	0x40004c00
 8005e00:	40005000 	.word	0x40005000
 8005e04:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e08:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <UART_SetConfig+0x3a4>)
 8005e0a:	61bb      	str	r3, [r7, #24]
        break;
 8005e0c:	e00c      	b.n	8005e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0e:	f7fd fe03 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8005e12:	61b8      	str	r0, [r7, #24]
        break;
 8005e14:	e008      	b.n	8005e28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e1a:	61bb      	str	r3, [r7, #24]
        break;
 8005e1c:	e004      	b.n	8005e28 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	77bb      	strb	r3, [r7, #30]
        break;
 8005e26:	bf00      	nop
    }

    if (pclk != 0U)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	085a      	lsrs	r2, r3, #1
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b0f      	cmp	r3, #15
 8005e46:	d909      	bls.n	8005e5c <UART_SetConfig+0x388>
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4e:	d205      	bcs.n	8005e5c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	e001      	b.n	8005e60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	007a1200 	.word	0x007a1200

08005e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01a      	beq.n	8005f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f7a:	d10a      	bne.n	8005f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	605a      	str	r2, [r3, #4]
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b098      	sub	sp, #96	@ 0x60
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd0:	f7fb f964 	bl	800129c <HAL_GetTick>
 8005fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d12e      	bne.n	8006042 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fec:	2200      	movs	r2, #0
 8005fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f88c 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d021      	beq.n	8006042 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006012:	653b      	str	r3, [r7, #80]	@ 0x50
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800601c:	647b      	str	r3, [r7, #68]	@ 0x44
 800601e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800602a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e062      	b.n	8006108 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b04      	cmp	r3, #4
 800604e:	d149      	bne.n	80060e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006058:	2200      	movs	r2, #0
 800605a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f856 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d03c      	beq.n	80060e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	623b      	str	r3, [r7, #32]
   return(result);
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800607e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006088:	633b      	str	r3, [r7, #48]	@ 0x30
 800608a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3308      	adds	r3, #8
 80060a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3308      	adds	r3, #8
 80060ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060bc:	61fa      	str	r2, [r7, #28]
 80060be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	69b9      	ldr	r1, [r7, #24]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	617b      	str	r3, [r7, #20]
   return(result);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e5      	bne.n	800609c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e011      	b.n	8006108 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3758      	adds	r7, #88	@ 0x58
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006120:	e04f      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d04b      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fb f8b7 	bl	800129c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <UART_WaitOnFlagUntilTimeout+0x30>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e04e      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d037      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d034      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d031      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b08      	cmp	r3, #8
 800616a:	d110      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2208      	movs	r2, #8
 8006172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f838 	bl	80061ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2208      	movs	r2, #8
 800617e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e029      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619c:	d111      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f81e 	bl	80061ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e00f      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d0a0      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b095      	sub	sp, #84	@ 0x54
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006210:	643b      	str	r3, [r7, #64]	@ 0x40
 8006212:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	61fb      	str	r3, [r7, #28]
   return(result);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800624a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e5      	bne.n	8006224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800625c:	2b01      	cmp	r3, #1
 800625e:	d118      	bne.n	8006292 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	60bb      	str	r3, [r7, #8]
   return(result);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	647b      	str	r3, [r7, #68]	@ 0x44
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	613b      	str	r3, [r7, #16]
   return(result);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e6      	bne.n	8006260 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062a6:	bf00      	nop
 80062a8:	3754      	adds	r7, #84	@ 0x54
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <memset>:
 80062b2:	4402      	add	r2, r0
 80062b4:	4603      	mov	r3, r0
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d100      	bne.n	80062bc <memset+0xa>
 80062ba:	4770      	bx	lr
 80062bc:	f803 1b01 	strb.w	r1, [r3], #1
 80062c0:	e7f9      	b.n	80062b6 <memset+0x4>
	...

080062c4 <__libc_init_array>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4d0d      	ldr	r5, [pc, #52]	@ (80062fc <__libc_init_array+0x38>)
 80062c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006300 <__libc_init_array+0x3c>)
 80062ca:	1b64      	subs	r4, r4, r5
 80062cc:	10a4      	asrs	r4, r4, #2
 80062ce:	2600      	movs	r6, #0
 80062d0:	42a6      	cmp	r6, r4
 80062d2:	d109      	bne.n	80062e8 <__libc_init_array+0x24>
 80062d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006304 <__libc_init_array+0x40>)
 80062d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006308 <__libc_init_array+0x44>)
 80062d8:	f000 f818 	bl	800630c <_init>
 80062dc:	1b64      	subs	r4, r4, r5
 80062de:	10a4      	asrs	r4, r4, #2
 80062e0:	2600      	movs	r6, #0
 80062e2:	42a6      	cmp	r6, r4
 80062e4:	d105      	bne.n	80062f2 <__libc_init_array+0x2e>
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ec:	4798      	blx	r3
 80062ee:	3601      	adds	r6, #1
 80062f0:	e7ee      	b.n	80062d0 <__libc_init_array+0xc>
 80062f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f6:	4798      	blx	r3
 80062f8:	3601      	adds	r6, #1
 80062fa:	e7f2      	b.n	80062e2 <__libc_init_array+0x1e>
 80062fc:	0800635c 	.word	0x0800635c
 8006300:	0800635c 	.word	0x0800635c
 8006304:	0800635c 	.word	0x0800635c
 8006308:	08006360 	.word	0x08006360

0800630c <_init>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	bf00      	nop
 8006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006312:	bc08      	pop	{r3}
 8006314:	469e      	mov	lr, r3
 8006316:	4770      	bx	lr

08006318 <_fini>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	bf00      	nop
 800631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631e:	bc08      	pop	{r3}
 8006320:	469e      	mov	lr, r3
 8006322:	4770      	bx	lr
