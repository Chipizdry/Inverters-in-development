
PWM_Driver_Flywheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008c4c  08008c4c  00009c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c84  08008c84  0000a014  2**0
                  CONTENTS
  4 .ARM          00000000  08008c84  08008c84  0000a014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c84  08008c84  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c88  08008c88  00009c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08008c8c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a014  2**0
                  CONTENTS
 10 .bss          0000053c  20000014  20000014  0000a014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  0000a014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000186c8  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d2  00000000  00000000  0002270c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  000257e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001055  00000000  00000000  00026c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020058  00000000  00000000  00027cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c8ed  00000000  00000000  00047d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3a4c  00000000  00000000  0006461a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128066  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057d4  00000000  00000000  001280ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0012d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c34 	.word	0x08008c34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08008c34 	.word	0x08008c34

080001c8 <Registers_handler>:

    // Включение прерывания IDLE
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}

void Registers_handler(uint8_t* rxFrame, uint16_t* data_reg, uint16_t* rcv_data_reg,uint16_t Size){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	807b      	strh	r3, [r7, #2]


	if(rxFrame[0] != SLAVE_ID){   for(uint16_t i=0; i<64;i++){rxFrame[i]=0;}
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	781a      	ldrb	r2, [r3, #0]
 80001da:	4b57      	ldr	r3, [pc, #348]	@ (8000338 <Registers_handler+0x170>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d026      	beq.n	8000230 <Registers_handler+0x68>
 80001e2:	2300      	movs	r3, #0
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	e007      	b.n	80001f8 <Registers_handler+0x30>
 80001e8:	8afb      	ldrh	r3, [r7, #22]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	4413      	add	r3, r2
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
 80001f2:	8afb      	ldrh	r3, [r7, #22]
 80001f4:	3301      	adds	r3, #1
 80001f6:	82fb      	strh	r3, [r7, #22]
 80001f8:	8afb      	ldrh	r3, [r7, #22]
 80001fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80001fc:	d9f4      	bls.n	80001e8 <Registers_handler+0x20>
	     RX_2;
 80001fe:	2200      	movs	r2, #0
 8000200:	2104      	movs	r1, #4
 8000202:	484e      	ldr	r0, [pc, #312]	@ (800033c <Registers_handler+0x174>)
 8000204:	f003 fbce 	bl	80039a4 <HAL_GPIO_WritePin>
	     LED_1_OFF;
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800020e:	484c      	ldr	r0, [pc, #304]	@ (8000340 <Registers_handler+0x178>)
 8000210:	f003 fbc8 	bl	80039a4 <HAL_GPIO_WritePin>
	     	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000214:	2240      	movs	r2, #64	@ 0x40
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	484a      	ldr	r0, [pc, #296]	@ (8000344 <Registers_handler+0x17c>)
 800021a:	f008 fc8a 	bl	8008b32 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800021e:	4b4a      	ldr	r3, [pc, #296]	@ (8000348 <Registers_handler+0x180>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b48      	ldr	r3, [pc, #288]	@ (8000348 <Registers_handler+0x180>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f022 0204 	bic.w	r2, r2, #4
 800022c:	601a      	str	r2, [r3, #0]
		return;}
 800022e:	e080      	b.n	8000332 <Registers_handler+0x16a>


	if (Size < 4) {
 8000230:	887b      	ldrh	r3, [r7, #2]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d805      	bhi.n	8000242 <Registers_handler+0x7a>
	        // Ошибка: неверный ID устройства или слишком короткий пакет
	        sendError(&huart1, 0x03, 0x02); // Код ошибки 0x02: ошибка длины пакета
 8000236:	2202      	movs	r2, #2
 8000238:	2103      	movs	r1, #3
 800023a:	4842      	ldr	r0, [pc, #264]	@ (8000344 <Registers_handler+0x17c>)
 800023c:	f001 f888 	bl	8001350 <sendError>

	        return;
 8000240:	e077      	b.n	8000332 <Registers_handler+0x16a>
	    }


	  // Расчет CRC для пакета (исключая последние 2 байта CRC)
	    uint16_t receivedCRC = (rxFrame[Size - 1]) | (rxFrame[Size - 2]<<8);
 8000242:	887b      	ldrh	r3, [r7, #2]
 8000244:	3b01      	subs	r3, #1
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b21a      	sxth	r2, r3
 800024e:	887b      	ldrh	r3, [r7, #2]
 8000250:	3b02      	subs	r3, #2
 8000252:	68f9      	ldr	r1, [r7, #12]
 8000254:	440b      	add	r3, r1
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	b21b      	sxth	r3, r3
 800025c:	4313      	orrs	r3, r2
 800025e:	b21b      	sxth	r3, r3
 8000260:	82bb      	strh	r3, [r7, #20]
	    uint16_t calculatedCRC = calcCRC16ModBus(rxFrame, Size - 2);
 8000262:	887b      	ldrh	r3, [r7, #2]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	3b02      	subs	r3, #2
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4619      	mov	r1, r3
 800026c:	68f8      	ldr	r0, [r7, #12]
 800026e:	f000 ffe7 	bl	8001240 <calcCRC16ModBus>
 8000272:	4603      	mov	r3, r0
 8000274:	827b      	strh	r3, [r7, #18]

	    // Проверка CRC
	    if (receivedCRC != calculatedCRC) {
 8000276:	8aba      	ldrh	r2, [r7, #20]
 8000278:	8a7b      	ldrh	r3, [r7, #18]
 800027a:	429a      	cmp	r2, r3
 800027c:	d005      	beq.n	800028a <Registers_handler+0xc2>
	        // Ошибка: неверный CRC
	        sendError(&huart1, 0x03, 0x03); // Код ошибки 0x03: нарушение данных
 800027e:	2203      	movs	r2, #3
 8000280:	2103      	movs	r1, #3
 8000282:	4830      	ldr	r0, [pc, #192]	@ (8000344 <Registers_handler+0x17c>)
 8000284:	f001 f864 	bl	8001350 <sendError>

	        return;
 8000288:	e053      	b.n	8000332 <Registers_handler+0x16a>
	    }


                       uint8_t opCode = rxFrame[1];
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	747b      	strb	r3, [r7, #17]

				  			  switch (opCode) {
 8000290:	7c7b      	ldrb	r3, [r7, #17]
 8000292:	3b01      	subs	r3, #1
 8000294:	2b0f      	cmp	r3, #15
 8000296:	d845      	bhi.n	8000324 <Registers_handler+0x15c>
 8000298:	a201      	add	r2, pc, #4	@ (adr r2, 80002a0 <Registers_handler+0xd8>)
 800029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029e:	bf00      	nop
 80002a0:	080002e1 	.word	0x080002e1
 80002a4:	080002ef 	.word	0x080002ef
 80002a8:	080002fd 	.word	0x080002fd
 80002ac:	08000307 	.word	0x08000307
 80002b0:	08000325 	.word	0x08000325
 80002b4:	08000311 	.word	0x08000311
 80002b8:	08000325 	.word	0x08000325
 80002bc:	08000325 	.word	0x08000325
 80002c0:	08000325 	.word	0x08000325
 80002c4:	08000325 	.word	0x08000325
 80002c8:	08000325 	.word	0x08000325
 80002cc:	08000325 	.word	0x08000325
 80002d0:	08000325 	.word	0x08000325
 80002d4:	08000325 	.word	0x08000325
 80002d8:	08000325 	.word	0x08000325
 80002dc:	0800031b 	.word	0x0800031b
				  			   case READ_COILs:
				  				 handleReadCoils (&huart1,coils);
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <Registers_handler+0x184>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4619      	mov	r1, r3
 80002e6:	4817      	ldr	r0, [pc, #92]	@ (8000344 <Registers_handler+0x17c>)
 80002e8:	f001 f950 	bl	800158c <handleReadCoils>
				  			   break;
 80002ec:	e021      	b.n	8000332 <Registers_handler+0x16a>

				  			   case   READ_DISC_INPUTs:
				  				 handleReadDiscreteInputs (&huart1, dicreteInputs);
 80002ee:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <Registers_handler+0x188>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4813      	ldr	r0, [pc, #76]	@ (8000344 <Registers_handler+0x17c>)
 80002f6:	f001 f9b1 	bl	800165c <handleReadDiscreteInputs>
							   break;
 80002fa:	e01a      	b.n	8000332 <Registers_handler+0x16a>

				  			   case  READ_HOLDING_REGs:

				  			 	handleReadHoldingRegs(&huart1,data_reg);
 80002fc:	68b9      	ldr	r1, [r7, #8]
 80002fe:	4811      	ldr	r0, [pc, #68]	@ (8000344 <Registers_handler+0x17c>)
 8000300:	f001 f856 	bl	80013b0 <handleReadHoldingRegs>
				  			   break;
 8000304:	e015      	b.n	8000332 <Registers_handler+0x16a>

				  			   case  READ_INPUT_REGs:
				  				handleReadInputRegs (&huart1,data_reg);
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	480e      	ldr	r0, [pc, #56]	@ (8000344 <Registers_handler+0x17c>)
 800030a:	f001 f8c7 	bl	800149c <handleReadInputRegs>

				  			   break;
 800030e:	e010      	b.n	8000332 <Registers_handler+0x16a>

				  			   case WRITE_SINGLE_REG:

				  			    handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <Registers_handler+0x17c>)
 8000314:	f001 fa0e 	bl	8001734 <handleWriteMulyipleHandlingRegister>

                               break;
 8000318:	e00b      	b.n	8000332 <Registers_handler+0x16a>

				  			   case WRITE_HOLDING_REGs:

                                 handleWriteMulyipleHandlingRegister(&huart1,rcv_data_reg);
 800031a:	6879      	ldr	r1, [r7, #4]
 800031c:	4809      	ldr	r0, [pc, #36]	@ (8000344 <Registers_handler+0x17c>)
 800031e:	f001 fa09 	bl	8001734 <handleWriteMulyipleHandlingRegister>

                               break;
 8000322:	e006      	b.n	8000332 <Registers_handler+0x16a>


				  			   default:


				  				 sendError(&huart1, opCode, 0x01); // Код ошибки 0x01: недопустимый код функции
 8000324:	7c7b      	ldrb	r3, [r7, #17]
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	4806      	ldr	r0, [pc, #24]	@ (8000344 <Registers_handler+0x17c>)
 800032c:	f001 f810 	bl	8001350 <sendError>
				  			   break;
 8000330:	bf00      	nop
				  			     }



                          }
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000000 	.word	0x20000000
 800033c:	48000c00 	.word	0x48000c00
 8000340:	48000400 	.word	0x48000400
 8000344:	2000043c 	.word	0x2000043c
 8000348:	200004c4 	.word	0x200004c4
 800034c:	200001b5 	.word	0x200001b5
 8000350:	200001b4 	.word	0x200001b4

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f001 fe5c 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f8ae 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 fd10 	bl	8000d84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000364:	f000 fce8 	bl	8000d38 <MX_DMA_Init>
  MX_TIM1_Init();
 8000368:	f000 f9fc 	bl	8000764 <MX_TIM1_Init>
  MX_TIM3_Init();
 800036c:	f000 fb66 	bl	8000a3c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000370:	f000 fbb2 	bl	8000ad8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000374:	f000 fabe 	bl	80008f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000378:	f000 fcae 	bl	8000cd8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800037c:	f000 f974 	bl	8000668 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000380:	f000 f902 	bl	8000588 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000384:	f000 f9b0 	bl	80006e8 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000388:	f000 fc54 	bl	8000c34 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
   LED_1_ON;
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000392:	483d      	ldr	r0, [pc, #244]	@ (8000488 <main+0x134>)
 8000394:	f003 fb06 	bl	80039a4 <HAL_GPIO_WritePin>
   RX_2;
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	483b      	ldr	r0, [pc, #236]	@ (800048c <main+0x138>)
 800039e:	f003 fb01 	bl	80039a4 <HAL_GPIO_WritePin>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
   HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
   */

   TIM1->ARR=2000;
 80003a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000490 <main+0x13c>)
 80003a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80003a8:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM8->ARR=2000;
 80003aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000494 <main+0x140>)
 80003ac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80003b0:	62da      	str	r2, [r3, #44]	@ 0x2c

   DRV_1_ON;
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003b8:	4837      	ldr	r0, [pc, #220]	@ (8000498 <main+0x144>)
 80003ba:	f003 faf3 	bl	80039a4 <HAL_GPIO_WritePin>
   DRV_2_ON;
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	4834      	ldr	r0, [pc, #208]	@ (8000498 <main+0x144>)
 80003c6:	f003 faed 	bl	80039a4 <HAL_GPIO_WritePin>
   DRV_3_ON;
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d0:	4831      	ldr	r0, [pc, #196]	@ (8000498 <main+0x144>)
 80003d2:	f003 fae7 	bl	80039a4 <HAL_GPIO_WritePin>
   DRV_4_ON;
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003dc:	482e      	ldr	r0, [pc, #184]	@ (8000498 <main+0x144>)
 80003de:	f003 fae1 	bl	80039a4 <HAL_GPIO_WritePin>
   HAL_TIM_Base_Start_IT(&htim2);
 80003e2:	482e      	ldr	r0, [pc, #184]	@ (800049c <main+0x148>)
 80003e4:	f005 f93a 	bl	800565c <HAL_TIM_Base_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80003e8:	2100      	movs	r1, #0
 80003ea:	482c      	ldr	r0, [pc, #176]	@ (800049c <main+0x148>)
 80003ec:	f005 fc28 	bl	8005c40 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80003f0:	2104      	movs	r1, #4
 80003f2:	482a      	ldr	r0, [pc, #168]	@ (800049c <main+0x148>)
 80003f4:	f005 fc24 	bl	8005c40 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80003f8:	2108      	movs	r1, #8
 80003fa:	4828      	ldr	r0, [pc, #160]	@ (800049c <main+0x148>)
 80003fc:	f005 fc20 	bl	8005c40 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000400:	210c      	movs	r1, #12
 8000402:	4826      	ldr	r0, [pc, #152]	@ (800049c <main+0x148>)
 8000404:	f005 fc1c 	bl	8005c40 <HAL_TIM_IC_Start_IT>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE);
 8000408:	2240      	movs	r2, #64	@ 0x40
 800040a:	4925      	ldr	r1, [pc, #148]	@ (80004a0 <main+0x14c>)
 800040c:	4825      	ldr	r0, [pc, #148]	@ (80004a4 <main+0x150>)
 800040e:	f008 fb90 	bl	8008b32 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000412:	4b25      	ldr	r3, [pc, #148]	@ (80004a8 <main+0x154>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b23      	ldr	r3, [pc, #140]	@ (80004a8 <main+0x154>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f022 0204 	bic.w	r2, r2, #4
 8000420:	601a      	str	r2, [r3, #0]
     HAL_TIM_Base_Start_IT(&htim15);
 8000422:	4822      	ldr	r0, [pc, #136]	@ (80004ac <main+0x158>)
 8000424:	f005 f91a 	bl	800565c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    TIM1->CCR1=rcv_data_reg[0];
 8000428:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <main+0x15c>)
 800042a:	881a      	ldrh	r2, [r3, #0]
 800042c:	4b18      	ldr	r3, [pc, #96]	@ (8000490 <main+0x13c>)
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
	  	TIM1->CCR2=rcv_data_reg[1];
 8000430:	4b1f      	ldr	r3, [pc, #124]	@ (80004b0 <main+0x15c>)
 8000432:	885a      	ldrh	r2, [r3, #2]
 8000434:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <main+0x13c>)
 8000436:	639a      	str	r2, [r3, #56]	@ 0x38
	  	TIM1->CCR3=rcv_data_reg[2];
 8000438:	4b1d      	ldr	r3, [pc, #116]	@ (80004b0 <main+0x15c>)
 800043a:	889a      	ldrh	r2, [r3, #4]
 800043c:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <main+0x13c>)
 800043e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	TIM8->CCR1=rcv_data_reg[3];
 8000440:	4b1b      	ldr	r3, [pc, #108]	@ (80004b0 <main+0x15c>)
 8000442:	88da      	ldrh	r2, [r3, #6]
 8000444:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <main+0x140>)
 8000446:	635a      	str	r2, [r3, #52]	@ 0x34
	  	TIM1->ARR= rcv_data_reg[4];
 8000448:	4b19      	ldr	r3, [pc, #100]	@ (80004b0 <main+0x15c>)
 800044a:	891a      	ldrh	r2, [r3, #8]
 800044c:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <main+0x13c>)
 800044e:	62da      	str	r2, [r3, #44]	@ 0x2c
	  	TIM8->ARR= rcv_data_reg[4];
 8000450:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <main+0x15c>)
 8000452:	891a      	ldrh	r2, [r3, #8]
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <main+0x140>)
 8000456:	62da      	str	r2, [r3, #44]	@ 0x2c
	    Check_USART1_Timeout();
 8000458:	f000 fe6a 	bl	8001130 <Check_USART1_Timeout>
	    data_reg[0]=calculateTimerFrequency(TIM1, timerClockFreq);
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <main+0x160>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4619      	mov	r1, r3
 8000462:	480b      	ldr	r0, [pc, #44]	@ (8000490 <main+0x13c>)
 8000464:	f000 fd4e 	bl	8000f04 <calculateTimerFrequency>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <main+0x164>)
 800046e:	801a      	strh	r2, [r3, #0]
	    data_reg[1]=calculateTimerFrequency(TIM8, timerClockFreq);
 8000470:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <main+0x160>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	4807      	ldr	r0, [pc, #28]	@ (8000494 <main+0x140>)
 8000478:	f000 fd44 	bl	8000f04 <calculateTimerFrequency>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <main+0x164>)
 8000482:	805a      	strh	r2, [r3, #2]
	    TIM1->CCR1=rcv_data_reg[0];
 8000484:	bf00      	nop
 8000486:	e7cf      	b.n	8000428 <main+0xd4>
 8000488:	48000400 	.word	0x48000400
 800048c:	48000c00 	.word	0x48000c00
 8000490:	40012c00 	.word	0x40012c00
 8000494:	40013400 	.word	0x40013400
 8000498:	48000800 	.word	0x48000800
 800049c:	2000030c 	.word	0x2000030c
 80004a0:	20000034 	.word	0x20000034
 80004a4:	2000043c 	.word	0x2000043c
 80004a8:	200004c4 	.word	0x200004c4
 80004ac:	200003f0 	.word	0x200003f0
 80004b0:	20000194 	.word	0x20000194
 80004b4:	20000004 	.word	0x20000004
 80004b8:	20000174 	.word	0x20000174

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b09e      	sub	sp, #120	@ 0x78
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004c6:	2228      	movs	r2, #40	@ 0x28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f008 fb85 	bl	8008bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	223c      	movs	r2, #60	@ 0x3c
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f008 fb77 	bl	8008bda <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004ec:	2303      	movs	r3, #3
 80004ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80004f6:	2301      	movs	r3, #1
 80004f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	2301      	movs	r3, #1
 80004fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	2310      	movs	r3, #16
 8000500:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800050a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800050c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000510:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fb8e 	bl	8003c38 <HAL_RCC_OscConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000522:	f000 fe87 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	230f      	movs	r3, #15
 8000528:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2302      	movs	r3, #2
 800052c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000536:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000540:	2102      	movs	r1, #2
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fbb6 	bl	8004cb4 <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800054e:	f000 fe71 	bl	8001234 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000552:	f243 03a1 	movw	r3, #12449	@ 0x30a1
 8000556:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800055c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000566:	2300      	movs	r3, #0
 8000568:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800056a:	2300      	movs	r3, #0
 800056c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	4618      	mov	r0, r3
 8000572:	f004 fdc1 	bl	80050f8 <HAL_RCCEx_PeriphCLKConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800057c:	f000 fe5a 	bl	8001234 <Error_Handler>
  }
}
 8000580:	bf00      	nop
 8000582:	3778      	adds	r7, #120	@ 0x78
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	@ 0x28
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005be:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d2:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005da:	2201      	movs	r2, #1
 80005dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_ADC1_Init+0xdc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_ADC1_Init+0xdc>)
 8000600:	2200      	movs	r2, #0
 8000602:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	4817      	ldr	r0, [pc, #92]	@ (8000664 <MX_ADC1_Init+0xdc>)
 8000606:	f001 fd8f 	bl	8002128 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000610:	f000 fe10 	bl	8001234 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4811      	ldr	r0, [pc, #68]	@ (8000664 <MX_ADC1_Init+0xdc>)
 8000620:	f002 fa4c 	bl	8002abc <HAL_ADCEx_MultiModeConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800062a:	f000 fe03 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800062e:	2301      	movs	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000632:	2301      	movs	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	@ (8000664 <MX_ADC1_Init+0xdc>)
 800064c:	f001 ff4c 	bl	80024e8 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000656:	f000 fded 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	@ 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200001b8 	.word	0x200001b8

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_I2C1_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <MX_I2C1_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_I2C1_Init+0x74>)
 8000674:	4a1b      	ldr	r2, [pc, #108]	@ (80006e4 <MX_I2C1_Init+0x7c>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_I2C1_Init+0x74>)
 8000680:	2201      	movs	r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a2:	480e      	ldr	r0, [pc, #56]	@ (80006dc <MX_I2C1_Init+0x74>)
 80006a4:	f003 f996 	bl	80039d4 <HAL_I2C_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ae:	f000 fdc1 	bl	8001234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <MX_I2C1_Init+0x74>)
 80006b6:	f003 fa28 	bl	8003b0a <HAL_I2CEx_ConfigAnalogFilter>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c0:	f000 fdb8 	bl	8001234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_I2C1_Init+0x74>)
 80006c8:	f003 fa6a 	bl	8003ba0 <HAL_I2CEx_ConfigDigitalFilter>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fdaf 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000208 	.word	0x20000208
 80006e0:	40005400 	.word	0x40005400
 80006e4:	00201d2b 	.word	0x00201d2b

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <MX_SPI1_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <MX_SPI1_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_SPI1_Init+0x74>)
 80006f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_SPI1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <MX_SPI1_Init+0x74>)
 8000702:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_SPI1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_SPI1_Init+0x74>)
 8000716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_SPI1_Init+0x74>)
 800071e:	2218      	movs	r2, #24
 8000720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_SPI1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_SPI1_Init+0x74>)
 8000736:	2207      	movs	r2, #7
 8000738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_SPI1_Init+0x74>)
 8000742:	2208      	movs	r2, #8
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_SPI1_Init+0x74>)
 8000748:	f004 fe86 	bl	8005458 <HAL_SPI_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 fd6f 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000025c 	.word	0x2000025c
 8000760:	40013000 	.word	0x40013000

08000764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09a      	sub	sp, #104	@ 0x68
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000784:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	222c      	movs	r2, #44	@ 0x2c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f008 fa1b 	bl	8008bda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b51      	ldr	r3, [pc, #324]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007a6:	4a52      	ldr	r2, [pc, #328]	@ (80008f0 <MX_TIM1_Init+0x18c>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007aa:	4b50      	ldr	r3, [pc, #320]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b4e      	ldr	r3, [pc, #312]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80007b6:	4b4d      	ldr	r3, [pc, #308]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007b8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b4b      	ldr	r3, [pc, #300]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b49      	ldr	r3, [pc, #292]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ca:	4b48      	ldr	r3, [pc, #288]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	4846      	ldr	r0, [pc, #280]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007d2:	f004 feec 	bl	80055ae <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007dc:	f000 fd2a 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007ea:	4619      	mov	r1, r3
 80007ec:	483f      	ldr	r0, [pc, #252]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007ee:	f005 fe1b 	bl	8006428 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007f8:	f000 fd1c 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fc:	483b      	ldr	r0, [pc, #236]	@ (80008ec <MX_TIM1_Init+0x188>)
 80007fe:	f004 ffc6 	bl	800578e <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000808:	f000 fd14 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000818:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800081c:	4619      	mov	r1, r3
 800081e:	4833      	ldr	r0, [pc, #204]	@ (80008ec <MX_TIM1_Init+0x188>)
 8000820:	f006 fd56 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800082a:	f000 fd03 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	@ 0x60
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000836:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800084c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4825      	ldr	r0, [pc, #148]	@ (80008ec <MX_TIM1_Init+0x188>)
 8000858:	f005 fcd2 	bl	8006200 <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000862:	f000 fce7 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000866:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800086a:	2204      	movs	r2, #4
 800086c:	4619      	mov	r1, r3
 800086e:	481f      	ldr	r0, [pc, #124]	@ (80008ec <MX_TIM1_Init+0x188>)
 8000870:	f005 fcc6 	bl	8006200 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 800087a:	f000 fcdb 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000882:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000886:	2208      	movs	r2, #8
 8000888:	4619      	mov	r1, r3
 800088a:	4818      	ldr	r0, [pc, #96]	@ (80008ec <MX_TIM1_Init+0x188>)
 800088c:	f005 fcb8 	bl	8006200 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000896:	f000 fccd 	bl	8001234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 80008a6:	2396      	movs	r3, #150	@ 0x96
 80008a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4807      	ldr	r0, [pc, #28]	@ (80008ec <MX_TIM1_Init+0x188>)
 80008d0:	f006 fd7e 	bl	80073d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80008da:	f000 fcab 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <MX_TIM1_Init+0x188>)
 80008e0:	f001 f9ae 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 80008e4:	bf00      	nop
 80008e6:	3768      	adds	r7, #104	@ 0x68
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200002c0 	.word	0x200002c0
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000920:	4b45      	ldr	r3, [pc, #276]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000928:	4b43      	ldr	r3, [pc, #268]	@ (8000a38 <MX_TIM2_Init+0x144>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b42      	ldr	r3, [pc, #264]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000934:	4b40      	ldr	r3, [pc, #256]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000936:	f04f 32ff 	mov.w	r2, #4294967295
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a38 <MX_TIM2_Init+0x144>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b3d      	ldr	r3, [pc, #244]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000948:	483b      	ldr	r0, [pc, #236]	@ (8000a38 <MX_TIM2_Init+0x144>)
 800094a:	f004 fe30 	bl	80055ae <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000954:	f000 fc6e 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	4619      	mov	r1, r3
 8000964:	4834      	ldr	r0, [pc, #208]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000966:	f005 fd5f 	bl	8006428 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000970:	f000 fc60 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000974:	4830      	ldr	r0, [pc, #192]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000976:	f005 f901 	bl	8005b7c <HAL_TIM_IC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000980:	f000 fc58 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000994:	f006 fc9c 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800099e:	f000 fc49 	bl	8001234 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009a2:	2302      	movs	r3, #2
 80009a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80009ae:	230f      	movs	r3, #15
 80009b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	481f      	ldr	r0, [pc, #124]	@ (8000a38 <MX_TIM2_Init+0x144>)
 80009ba:	f005 fb85 	bl	80060c8 <HAL_TIM_IC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80009c4:	f000 fc36 	bl	8001234 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2204      	movs	r2, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <MX_TIM2_Init+0x144>)
 80009dc:	f005 fb74 	bl	80060c8 <HAL_TIM_IC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80009e6:	f000 fc25 	bl	8001234 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009ea:	2302      	movs	r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80009f2:	230f      	movs	r3, #15
 80009f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2208      	movs	r2, #8
 80009fa:	4619      	mov	r1, r3
 80009fc:	480e      	ldr	r0, [pc, #56]	@ (8000a38 <MX_TIM2_Init+0x144>)
 80009fe:	f005 fb63 	bl	80060c8 <HAL_TIM_IC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000a08:	f000 fc14 	bl	8001234 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <MX_TIM2_Init+0x144>)
 8000a20:	f005 fb52 	bl	80060c8 <HAL_TIM_IC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x13a>
  {
    Error_Handler();
 8000a2a:	f000 fc03 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	@ 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000030c 	.word	0x2000030c

08000a3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <MX_TIM3_Init+0x98>)
 8000a5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a80:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a82:	f004 fd94 	bl	80055ae <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a8c:	f000 fbd2 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000a9e:	f005 fcc3 	bl	8006428 <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 fbc4 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_TIM3_Init+0x94>)
 8000aba:	f006 fc09 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ac4:	f000 fbb6 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000358 	.word	0x20000358
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09a      	sub	sp, #104	@ 0x68
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	222c      	movs	r2, #44	@ 0x2c
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f008 f861 	bl	8008bda <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b18:	4b44      	ldr	r3, [pc, #272]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b1a:	4a45      	ldr	r2, [pc, #276]	@ (8000c30 <MX_TIM8_Init+0x158>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b1e:	4b43      	ldr	r3, [pc, #268]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b41      	ldr	r3, [pc, #260]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 8000b2a:	4b40      	ldr	r3, [pc, #256]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b2c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b30:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b3e      	ldr	r3, [pc, #248]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b38:	4b3c      	ldr	r3, [pc, #240]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b44:	4839      	ldr	r0, [pc, #228]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b46:	f004 fd32 	bl	80055ae <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 fb70 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4832      	ldr	r0, [pc, #200]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b62:	f005 fc61 	bl	8006428 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000b6c:	f000 fb62 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b70:	482e      	ldr	r0, [pc, #184]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b72:	f004 fe0c 	bl	800578e <HAL_TIM_PWM_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000b7c:	f000 fb5a 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b90:	4619      	mov	r1, r3
 8000b92:	4826      	ldr	r0, [pc, #152]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000b94:	f006 fb9c 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000b9e:	f000 fb49 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba2:	2360      	movs	r3, #96	@ 0x60
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8000ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4818      	ldr	r0, [pc, #96]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000bca:	f005 fb19 	bl	8006200 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000bd4:	f000 fb2e 	bl	8001234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000c0e:	f006 fbdf 	bl	80073d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000c18:	f000 fb0c 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c1c:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <MX_TIM8_Init+0x154>)
 8000c1e:	f001 f80f 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 8000c22:	bf00      	nop
 8000c24:	3768      	adds	r7, #104	@ 0x68
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200003a4 	.word	0x200003a4
 8000c30:	40013400 	.word	0x40013400

08000c34 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c54:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd4 <MX_TIM15_Init+0xa0>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c6a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000c7e:	4814      	ldr	r0, [pc, #80]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c80:	f004 fc95 	bl	80055ae <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000c8a:	f000 fad3 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000c9c:	f005 fbc4 	bl	8006428 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000ca6:	f000 fac5 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <MX_TIM15_Init+0x9c>)
 8000cb8:	f006 fb0a 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000cc2:	f000 fab7 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200003f0 	.word	0x200003f0
 8000cd4:	40014000 	.word	0x40014000

08000cd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000cde:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <MX_USART1_UART_Init+0x5c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000ce4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_USART1_UART_Init+0x58>)
 8000d1c:	f006 fc19 	bl	8007552 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d26:	f000 fa85 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000043c 	.word	0x2000043c
 8000d34:	40013800 	.word	0x40013800

08000d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <MX_DMA_Init+0x48>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <MX_DMA_Init+0x48>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <MX_DMA_Init+0x48>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	200e      	movs	r0, #14
 8000d5c:	f002 f905 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d60:	200e      	movs	r0, #14
 8000d62:	f002 f91e 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f002 f8fd 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d70:	200f      	movs	r0, #15
 8000d72:	f002 f916 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b56      	ldr	r3, [pc, #344]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a55      	ldr	r2, [pc, #340]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000da0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b53      	ldr	r3, [pc, #332]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db2:	4b50      	ldr	r3, [pc, #320]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000db8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a49      	ldr	r2, [pc, #292]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b47      	ldr	r3, [pc, #284]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b44      	ldr	r3, [pc, #272]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a43      	ldr	r2, [pc, #268]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b41      	ldr	r3, [pc, #260]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000e00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef4 <MX_GPIO_Init+0x170>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000e12:	2200      	movs	r2, #0
 8000e14:	f64f 31a0 	movw	r1, #64416	@ 0xfba0
 8000e18:	4837      	ldr	r0, [pc, #220]	@ (8000ef8 <MX_GPIO_Init+0x174>)
 8000e1a:	f002 fdc3 	bl	80039a4 <HAL_GPIO_WritePin>
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2110      	movs	r1, #16
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e26:	f002 fdbd 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f647 0107 	movw	r1, #30727	@ 0x7807
 8000e30:	4832      	ldr	r0, [pc, #200]	@ (8000efc <MX_GPIO_Init+0x178>)
 8000e32:	f002 fdb7 	bl	80039a4 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECT_GPIO_Port, DIRECT_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4831      	ldr	r0, [pc, #196]	@ (8000f00 <MX_GPIO_Init+0x17c>)
 8000e3c:	f002 fdb2 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT_2_EN_Pin PORT_3_EN_Pin PORT_4_EN_Pin LED_7_Pin
                           DISP_DC_RS_Pin DISP_LED_Pin DISP_RST_Pin LED_5_Pin
                           PORT_1_EN_Pin */
  GPIO_InitStruct.Pin = PORT_2_EN_Pin|PORT_3_EN_Pin|PORT_4_EN_Pin|LED_7_Pin
 8000e40:	f64f 33a0 	movw	r3, #64416	@ 0xfba0
 8000e44:	617b      	str	r3, [r7, #20]
                          |DISP_DC_RS_Pin|DISP_LED_Pin|DISP_RST_Pin|LED_5_Pin
                          |PORT_1_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4827      	ldr	r0, [pc, #156]	@ (8000ef8 <MX_GPIO_Init+0x174>)
 8000e5a:	f002 fb4d 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_INT_Pin UI_INT_Pin */
  GPIO_InitStruct.Pin = DISP_INT_Pin|UI_INT_Pin;
 8000e5e:	2318      	movs	r3, #24
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4821      	ldr	r0, [pc, #132]	@ (8000ef8 <MX_GPIO_Init+0x174>)
 8000e74:	f002 fb40 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_6_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_6_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f002 fb31 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_A_Pin HAL_B_Pin HAL_C_Pin */
  GPIO_InitStruct.Pin = HAL_A_Pin|HAL_B_Pin|HAL_C_Pin;
 8000e96:	23e0      	movs	r3, #224	@ 0xe0
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eae:	f002 fb23 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin CS_3_Pin LED_1_Pin
                           LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|CS_3_Pin|LED_1_Pin
 8000eb2:	f647 0307 	movw	r3, #30727	@ 0x7807
 8000eb6:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	@ (8000efc <MX_GPIO_Init+0x178>)
 8000ecc:	f002 fb14 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_Pin */
  GPIO_InitStruct.Pin = DIRECT_Pin;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECT_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <MX_GPIO_Init+0x17c>)
 8000ee8:	f002 fb06 	bl	80034f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	@ 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	48000400 	.word	0x48000400
 8000f00:	48000c00 	.word	0x48000c00

08000f04 <calculateTimerFrequency>:

/* USER CODE BEGIN 4 */

// Функция расчёта частоты таймера
uint16_t calculateTimerFrequency(TIM_TypeDef *TIMx, uint32_t timerClockFreq) {
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    uint32_t arr = TIMx->ARR;  // Значение ARR
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f12:	60fb      	str	r3, [r7, #12]
    return timerClockFreq / (arr + 1);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	b29b      	uxth	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f3c:	d16b      	bne.n	8001016 <HAL_TIM_IC_CaptureCallback+0xea>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7f1b      	ldrb	r3, [r3, #28]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d119      	bne.n	8000f7a <HAL_TIM_IC_CaptureCallback+0x4e>
        {
            TIM2->CNT = 0;
 8000f46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
             LED_2_ON;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f54:	4832      	ldr	r0, [pc, #200]	@ (8001020 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f56:	f002 fd25 	bl	80039a4 <HAL_GPIO_WritePin>
           // period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
           // pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);


             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4831      	ldr	r0, [pc, #196]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f5e:	f006 f959 	bl	8007214 <HAL_TIMEx_PWMN_Stop>
             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000f62:	2104      	movs	r1, #4
 8000f64:	482f      	ldr	r0, [pc, #188]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f66:	f004 fd73 	bl	8005a50 <HAL_TIM_PWM_Stop>

             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	482d      	ldr	r0, [pc, #180]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f6e:	f006 f89d 	bl	80070ac <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f72:	2100      	movs	r1, #0
 8000f74:	482b      	ldr	r0, [pc, #172]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f76:	f004 fc6b 	bl	8005850 <HAL_TIM_PWM_Start>
        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7f1b      	ldrb	r3, [r3, #28]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d115      	bne.n	8000fae <HAL_TIM_IC_CaptureCallback+0x82>
        {
             LED_2_OFF;
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f88:	4825      	ldr	r0, [pc, #148]	@ (8001020 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f8a:	f002 fd0b 	bl	80039a4 <HAL_GPIO_WritePin>
             HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4824      	ldr	r0, [pc, #144]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f92:	f004 fd5d 	bl	8005a50 <HAL_TIM_PWM_Stop>
             HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000f96:	2104      	movs	r1, #4
 8000f98:	4822      	ldr	r0, [pc, #136]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f9a:	f006 f93b 	bl	8007214 <HAL_TIMEx_PWMN_Stop>

             HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4820      	ldr	r0, [pc, #128]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fa2:	f006 f883 	bl	80070ac <HAL_TIMEx_PWMN_Start>
             HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	481e      	ldr	r0, [pc, #120]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000faa:	f004 fc51 	bl	8005850 <HAL_TIM_PWM_Start>

        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7f1b      	ldrb	r3, [r3, #28]
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d115      	bne.n	8000fe2 <HAL_TIM_IC_CaptureCallback+0xb6>
        {
          LED_3_ON;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fbc:	4818      	ldr	r0, [pc, #96]	@ (8001020 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000fbe:	f002 fcf1 	bl	80039a4 <HAL_GPIO_WritePin>
          HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4818      	ldr	r0, [pc, #96]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000fc6:	f006 f925 	bl	8007214 <HAL_TIMEx_PWMN_Stop>
          HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000fca:	2108      	movs	r1, #8
 8000fcc:	4815      	ldr	r0, [pc, #84]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fce:	f004 fd3f 	bl	8005a50 <HAL_TIM_PWM_Stop>

          HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	4813      	ldr	r0, [pc, #76]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fd6:	f006 f869 	bl	80070ac <HAL_TIMEx_PWMN_Start>
          HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4812      	ldr	r0, [pc, #72]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000fde:	f004 fc37 	bl	8005850 <HAL_TIM_PWM_Start>



        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7f1b      	ldrb	r3, [r3, #28]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d115      	bne.n	8001016 <HAL_TIM_IC_CaptureCallback+0xea>
        {
           LED_3_OFF;
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff0:	480b      	ldr	r0, [pc, #44]	@ (8001020 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ff2:	f002 fcd7 	bl	80039a4 <HAL_GPIO_WritePin>
           HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	480a      	ldr	r0, [pc, #40]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000ffa:	f006 f90b 	bl	8007214 <HAL_TIMEx_PWMN_Stop>
           HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000ffe:	2100      	movs	r1, #0
 8001000:	4809      	ldr	r0, [pc, #36]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001002:	f004 fd25 	bl	8005a50 <HAL_TIM_PWM_Stop>

           HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001006:	2108      	movs	r1, #8
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800100a:	f004 fc21 	bl	8005850 <HAL_TIM_PWM_Start>
           HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800100e:	2100      	movs	r1, #0
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001012:	f006 f84b 	bl	80070ac <HAL_TIMEx_PWMN_Start>

        }
    }
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	48000400 	.word	0x48000400
 8001024:	200002c0 	.word	0x200002c0
 8001028:	200003a4 	.word	0x200003a4

0800102c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]


	    RX_2;
 8001034:	2200      	movs	r2, #0
 8001036:	2104      	movs	r1, #4
 8001038:	4814      	ldr	r0, [pc, #80]	@ (800108c <HAL_UART_TxCpltCallback+0x60>)
 800103a:	f002 fcb3 	bl	80039a4 <HAL_GPIO_WritePin>
	    lastActivityTime = HAL_GetTick();
 800103e:	f001 f843 	bl	80020c8 <HAL_GetTick>
 8001042:	4603      	mov	r3, r0
 8001044:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <HAL_UART_TxCpltCallback+0x64>)
 8001046:	6013      	str	r3, [r2, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame,RX_BUFFER_SIZE);
 8001048:	2240      	movs	r2, #64	@ 0x40
 800104a:	4912      	ldr	r1, [pc, #72]	@ (8001094 <HAL_UART_TxCpltCallback+0x68>)
 800104c:	4812      	ldr	r0, [pc, #72]	@ (8001098 <HAL_UART_TxCpltCallback+0x6c>)
 800104e:	f007 fd70 	bl	8008b32 <HAL_UARTEx_ReceiveToIdle_DMA>
	    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_UART_TxCpltCallback+0x6c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_UART_TxCpltCallback+0x6c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 0210 	orr.w	r2, r2, #16
 8001060:	601a      	str	r2, [r3, #0]
	    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_UART_TxCpltCallback+0x70>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_UART_TxCpltCallback+0x70>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0204 	bic.w	r2, r2, #4
 8001070:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start_IT(&htim15);
 8001072:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <HAL_UART_TxCpltCallback+0x74>)
 8001074:	f004 faf2 	bl	800565c <HAL_TIM_Base_Start_IT>
	    LED_1_OFF;
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <HAL_UART_TxCpltCallback+0x78>)
 8001080:	f002 fc90 	bl	80039a4 <HAL_GPIO_WritePin>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	48000c00 	.word	0x48000c00
 8001090:	20000030 	.word	0x20000030
 8001094:	20000034 	.word	0x20000034
 8001098:	2000043c 	.word	0x2000043c
 800109c:	200004c4 	.word	0x200004c4
 80010a0:	200003f0 	.word	0x200003f0
 80010a4:	48000400 	.word	0x48000400

080010a8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <HAL_UARTEx_RxEventCallback+0x64>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d121      	bne.n	8001102 <HAL_UARTEx_RxEventCallback+0x5a>
	{

        LED_1_ON;
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010c4:	4812      	ldr	r0, [pc, #72]	@ (8001110 <HAL_UARTEx_RxEventCallback+0x68>)
 80010c6:	f002 fc6d 	bl	80039a4 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim15);
 80010ca:	4812      	ldr	r0, [pc, #72]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x6c>)
 80010cc:	f004 fb30 	bl	8005730 <HAL_TIM_Base_Stop_IT>
		lastActivityTime = HAL_GetTick();
 80010d0:	f000 fffa 	bl	80020c8 <HAL_GetTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <HAL_UARTEx_RxEventCallback+0x70>)
 80010d8:	6013      	str	r3, [r2, #0]
	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <HAL_UARTEx_RxEventCallback+0x74>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <HAL_UARTEx_RxEventCallback+0x74>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0210 	bic.w	r2, r2, #16
 80010e8:	601a      	str	r2, [r3, #0]
	    HAL_DMA_Abort(&hdma_usart1_rx);
 80010ea:	480d      	ldr	r0, [pc, #52]	@ (8001120 <HAL_UARTEx_RxEventCallback+0x78>)
 80010ec:	f002 f86f 	bl	80031ce <HAL_DMA_Abort>
	    Registers_handler(rxFrame, data_reg, rcv_data_reg,Size);
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <HAL_UARTEx_RxEventCallback+0x7c>)
 80010f4:	490c      	ldr	r1, [pc, #48]	@ (8001128 <HAL_UARTEx_RxEventCallback+0x80>)
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <HAL_UARTEx_RxEventCallback+0x84>)
 80010f8:	f7ff f866 	bl	80001c8 <Registers_handler>
	    HAL_TIM_Base_Start_IT(&htim15);
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x6c>)
 80010fe:	f004 faad 	bl	800565c <HAL_TIM_Base_Start_IT>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40013800 	.word	0x40013800
 8001110:	48000400 	.word	0x48000400
 8001114:	200003f0 	.word	0x200003f0
 8001118:	20000030 	.word	0x20000030
 800111c:	2000043c 	.word	0x2000043c
 8001120:	200004c4 	.word	0x200004c4
 8001124:	20000194 	.word	0x20000194
 8001128:	20000174 	.word	0x20000174
 800112c:	20000034 	.word	0x20000034

08001130 <Check_USART1_Timeout>:

void Check_USART1_Timeout(void)
 {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
     if (HAL_GetTick() - lastActivityTime >= USART_TIMEOUT)
 8001134:	f000 ffc8 	bl	80020c8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <Check_USART1_Timeout+0x34>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001144:	d30c      	bcc.n	8001160 <Check_USART1_Timeout+0x30>
     {

         Reset_USART1();
 8001146:	f000 f813 	bl	8001170 <Reset_USART1>
         RX_2;
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <Check_USART1_Timeout+0x38>)
 8001150:	f002 fc28 	bl	80039a4 <HAL_GPIO_WritePin>
         LED_1_OFF;
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800115a:	4804      	ldr	r0, [pc, #16]	@ (800116c <Check_USART1_Timeout+0x3c>)
 800115c:	f002 fc22 	bl	80039a4 <HAL_GPIO_WritePin>
     }
 }
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000030 	.word	0x20000030
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48000400 	.word	0x48000400

08001170 <Reset_USART1>:



void Reset_USART1(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    // Включить индикатор (если требуется)
    LED_1_ON;
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800117a:	4827      	ldr	r0, [pc, #156]	@ (8001218 <Reset_USART1+0xa8>)
 800117c:	f002 fc12 	bl	80039a4 <HAL_GPIO_WritePin>

    // Остановить передачу и прием по DMA
    if (HAL_UART_DMAStop(&huart1) != HAL_OK) {
 8001180:	4826      	ldr	r0, [pc, #152]	@ (800121c <Reset_USART1+0xac>)
 8001182:	f006 faed 	bl	8007760 <HAL_UART_DMAStop>
        // Обработка ошибки
    }

    // Прерывание активных DMA транзакций
    if (hdma_usart1_rx.Instance != NULL) {
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <Reset_USART1+0xb0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <Reset_USART1+0x24>
        HAL_DMA_Abort(&hdma_usart1_rx);
 800118e:	4824      	ldr	r0, [pc, #144]	@ (8001220 <Reset_USART1+0xb0>)
 8001190:	f002 f81d 	bl	80031ce <HAL_DMA_Abort>
    }
    if (hdma_usart1_tx.Instance != NULL) {
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <Reset_USART1+0xb4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <Reset_USART1+0x32>
        HAL_DMA_Abort(&hdma_usart1_tx);
 800119c:	4821      	ldr	r0, [pc, #132]	@ (8001224 <Reset_USART1+0xb4>)
 800119e:	f002 f816 	bl	80031ce <HAL_DMA_Abort>
    }

    // Отключить все прерывания UART
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE | UART_IT_TC | UART_IT_RXNE);
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <Reset_USART1+0xac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <Reset_USART1+0xac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011b0:	601a      	str	r2, [r3, #0]

    // Сбросить флаги ошибок UART
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <Reset_USART1+0xac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2208      	movs	r2, #8
 80011b8:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <Reset_USART1+0xac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2202      	movs	r2, #2
 80011c0:	621a      	str	r2, [r3, #32]

    // Сбросить периферийный модуль USART1
    __HAL_RCC_USART1_FORCE_RESET();
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <Reset_USART1+0xb8>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <Reset_USART1+0xb8>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011cc:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1); // Задержка для завершения сброса
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 ff86 	bl	80020e0 <HAL_Delay>
    __HAL_RCC_USART1_RELEASE_RESET();
 80011d4:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <Reset_USART1+0xb8>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a13      	ldr	r2, [pc, #76]	@ (8001228 <Reset_USART1+0xb8>)
 80011da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011de:	60d3      	str	r3, [r2, #12]

    // Деинициализация UART
    if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 80011e0:	480e      	ldr	r0, [pc, #56]	@ (800121c <Reset_USART1+0xac>)
 80011e2:	f006 fa04 	bl	80075ee <HAL_UART_DeInit>
        // Обработка ошибки
    }

    // Повторная инициализация UART
    MX_USART1_UART_Init();
 80011e6:	f7ff fd77 	bl	8000cd8 <MX_USART1_UART_Init>

    // Повторная настройка DMA
    MX_DMA_Init();
 80011ea:	f7ff fda5 	bl	8000d38 <MX_DMA_Init>

    // Настройка UART для приема данных с использованием DMA
    if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxFrame, RX_BUFFER_SIZE) != HAL_OK) {
 80011ee:	2240      	movs	r2, #64	@ 0x40
 80011f0:	490e      	ldr	r1, [pc, #56]	@ (800122c <Reset_USART1+0xbc>)
 80011f2:	480a      	ldr	r0, [pc, #40]	@ (800121c <Reset_USART1+0xac>)
 80011f4:	f007 fc9d 	bl	8008b32 <HAL_UARTEx_ReceiveToIdle_DMA>
        // Обработка ошибки
    }
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <Reset_USART1+0xb0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <Reset_USART1+0xb0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0204 	bic.w	r2, r2, #4
 8001206:	601a      	str	r2, [r3, #0]

    // Сброс параметров и таймеров
    lastActivityTime = HAL_GetTick();
 8001208:	f000 ff5e 	bl	80020c8 <HAL_GetTick>
 800120c:	4603      	mov	r3, r0
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <Reset_USART1+0xc0>)
 8001210:	6013      	str	r3, [r2, #0]


}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	48000400 	.word	0x48000400
 800121c:	2000043c 	.word	0x2000043c
 8001220:	200004c4 	.word	0x200004c4
 8001224:	20000508 	.word	0x20000508
 8001228:	40021000 	.word	0x40021000
 800122c:	20000034 	.word	0x20000034
 8001230:	20000030 	.word	0x20000030

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <Error_Handler+0x8>

08001240 <calcCRC16ModBus>:

#include "modbusDevice.h"


// Compute the MODBUS RTU CRC
uint16_t calcCRC16ModBus(uint8_t *buffer, uint8_t u8length) {
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 800124c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001250:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	74fb      	strb	r3, [r7, #19]
 8001256:	e023      	b.n	80012a0 <calcCRC16ModBus+0x60>
		temp = temp ^ buffer[i];
 8001258:	7cfb      	ldrb	r3, [r7, #19]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	4053      	eors	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8001268:	2301      	movs	r3, #1
 800126a:	74bb      	strb	r3, [r7, #18]
 800126c:	e012      	b.n	8001294 <calcCRC16ModBus+0x54>
			flag = temp & 0x0001;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	617b      	str	r3, [r7, #20]
			if (flag)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <calcCRC16ModBus+0x4e>
				temp ^= 0xA001;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 800128e:	7cbb      	ldrb	r3, [r7, #18]
 8001290:	3301      	adds	r3, #1
 8001292:	74bb      	strb	r3, [r7, #18]
 8001294:	7cbb      	ldrb	r3, [r7, #18]
 8001296:	2b08      	cmp	r3, #8
 8001298:	d9e9      	bls.n	800126e <calcCRC16ModBus+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	3301      	adds	r3, #1
 800129e:	74fb      	strb	r3, [r7, #19]
 80012a0:	7cfa      	ldrb	r2, [r7, #19]
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3d7      	bcc.n	8001258 <calcCRC16ModBus+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	b29b      	uxth	r3, r3

}
 80012c2:	4618      	mov	r0, r3
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <sendModBusRequest>:
			rxDataCursor++;
		}
	}
}

modbusResult sendModBusRequest(UART_HandleTypeDef* huart, uint8_t* frame,uint8_t len) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	4613      	mov	r3, r2
 80012dc:	71fb      	strb	r3, [r7, #7]

    uint16_t crc = calcCRC16ModBus(frame, len);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4619      	mov	r1, r3
 80012e2:	68b8      	ldr	r0, [r7, #8]
 80012e4:	f7ff ffac 	bl	8001240 <calcCRC16ModBus>
 80012e8:	4603      	mov	r3, r0
 80012ea:	82fb      	strh	r3, [r7, #22]
    frame[len+1] = crc & 0xFF;       // CRC LOW
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	3301      	adds	r3, #1
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	4413      	add	r3, r2
 80012f4:	8afa      	ldrh	r2, [r7, #22]
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]
    frame[len] = (crc >> 8) & 0xFF;  // CRC HIGH
 80012fa:	8afb      	ldrh	r3, [r7, #22]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b299      	uxth	r1, r3
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	4413      	add	r3, r2
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]

    TX_2;
 800130a:	2201      	movs	r2, #1
 800130c:	2104      	movs	r1, #4
 800130e:	480e      	ldr	r0, [pc, #56]	@ (8001348 <sendModBusRequest+0x78>)
 8001310:	f002 fb48 	bl	80039a4 <HAL_GPIO_WritePin>
  //  HAL_UART_Transmit_DMA(huart,  frame, len+2);
  //  HAL_TIM_Base_Start_IT(&htim14);
    if (HAL_UART_Transmit_DMA(huart,  frame, len+2) != HAL_OK) {
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	b29b      	uxth	r3, r3
 8001318:	3302      	adds	r3, #2
 800131a:	b29b      	uxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f006 f9a1 	bl	8007668 <HAL_UART_Transmit_DMA>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <sendModBusRequest+0x6c>

    	LED_1_OFF;
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <sendModBusRequest+0x7c>)
 8001334:	f002 fb36 	bl	80039a4 <HAL_GPIO_WritePin>

	        Error_Handler();
 8001338:	f7ff ff7c 	bl	8001234 <Error_Handler>

	 else{
		// RX_2;

	  }
return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	48000c00 	.word	0x48000c00
 800134c:	48000400 	.word	0x48000400

08001350 <sendError>:

void sendError(UART_HandleTypeDef* huart, uint8_t opCode, uint8_t errorCode) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
 800135c:	4613      	mov	r3, r2
 800135e:	70bb      	strb	r3, [r7, #2]
    uint8_t errorFrame[5];

    errorFrame[0] = SLAVE_ID;       // ID устройства
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <sendError+0x5c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	723b      	strb	r3, [r7, #8]
    errorFrame[1] = opCode | 0x80;  // Установка старшего бита для обозначения ошибки
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800136c:	b2db      	uxtb	r3, r3
 800136e:	727b      	strb	r3, [r7, #9]
    errorFrame[2] = errorCode;      // Код ошибки
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	72bb      	strb	r3, [r7, #10]

    // Рассчитать CRC для сообщения об ошибке
    uint16_t crc = calcCRC16ModBus(errorFrame, 3);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2103      	movs	r1, #3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff60 	bl	8001240 <calcCRC16ModBus>
 8001380:	4603      	mov	r3, r0
 8001382:	81fb      	strh	r3, [r7, #14]
    errorFrame[3] = crc & 0xFF;     // Младший байт CRC
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	72fb      	strb	r3, [r7, #11]
    errorFrame[4] = (crc >> 8) & 0xFF; // Старший байт CRC
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	733b      	strb	r3, [r7, #12]

    // Отправка ответа

    sendModBusRequest(huart,errorFrame, sizeof(errorFrame));
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2205      	movs	r2, #5
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff97 	bl	80012d0 <sendModBusRequest>

}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <handleReadHoldingRegs>:
extern uint8_t rxFrame[255];
extern uint8_t txFrame[255];



modbusResult handleReadHoldingRegs(UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <handleReadHoldingRegs+0xe0>)
 80013bc:	789b      	ldrb	r3, [r3, #2]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <handleReadHoldingRegs+0xe0>)
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80013ce:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <handleReadHoldingRegs+0xe0>)
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <handleReadHoldingRegs+0xe0>)
 80013d8:	795b      	ldrb	r3, [r3, #5]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21b      	sxth	r3, r3
 80013e0:	817b      	strh	r3, [r7, #10]


	uint16_t endAddr = startingReg+numOfregs;
 80013e2:	8afa      	ldrh	r2, [r7, #22]
 80013e4:	897b      	ldrh	r3, [r7, #10]
 80013e6:	4413      	add	r3, r2
 80013e8:	813b      	strh	r3, [r7, #8]



	if((numOfregs<0)|(numOfregs >125)){
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	2b7d      	cmp	r3, #125	@ 0x7d
 80013ee:	d905      	bls.n	80013fc <handleReadHoldingRegs+0x4c>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80013f0:	2103      	movs	r1, #3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fa1e 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e045      	b.n	8001488 <handleReadHoldingRegs+0xd8>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80013fc:	893b      	ldrh	r3, [r7, #8]
 80013fe:	2b3c      	cmp	r3, #60	@ 0x3c
 8001400:	d905      	bls.n	800140e <handleReadHoldingRegs+0x5e>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 8001402:	2102      	movs	r1, #2
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fa15 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 800140a:	2300      	movs	r3, #0
 800140c:	e03c      	b.n	8001488 <handleReadHoldingRegs+0xd8>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <handleReadHoldingRegs+0xe4>)
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <handleReadHoldingRegs+0xe8>)
 8001414:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <handleReadHoldingRegs+0xe0>)
 8001418:	785a      	ldrb	r2, [r3, #1]
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <handleReadHoldingRegs+0xe8>)
 800141c:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <handleReadHoldingRegs+0xe8>)
 8001428:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 800142a:	2303      	movs	r3, #3
 800142c:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e01d      	b.n	8001470 <handleReadHoldingRegs+0xc0>
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001434:	8afb      	ldrh	r3, [r7, #22]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4413      	add	r3, r2
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b299      	uxth	r1, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	613a      	str	r2, [r7, #16]
 8001448:	b2c9      	uxtb	r1, r1
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <handleReadHoldingRegs+0xe8>)
 800144c:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(holdingRegisterValues[startingReg]) & 0xff;    // Lower  byte
 800144e:	8afb      	ldrh	r3, [r7, #22]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	4413      	add	r3, r2
 8001456:	8819      	ldrh	r1, [r3, #0]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	613a      	str	r2, [r7, #16]
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <handleReadHoldingRegs+0xe8>)
 8001462:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001464:	8afb      	ldrh	r3, [r7, #22]
 8001466:	3301      	adds	r3, #1
 8001468:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	897b      	ldrh	r3, [r7, #10]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbdd      	blt.n	8001434 <handleReadHoldingRegs+0x84>
	}



	sendModBusRequest(huart,txFrame,byteCursor);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4906      	ldr	r1, [pc, #24]	@ (8001498 <handleReadHoldingRegs+0xe8>)
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff25 	bl	80012d0 <sendModBusRequest>
	return 1;
 8001486:	2301      	movs	r3, #1

}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000034 	.word	0x20000034
 8001494:	20000000 	.word	0x20000000
 8001498:	20000074 	.word	0x20000074

0800149c <handleReadInputRegs>:


modbusResult handleReadInputRegs(UART_HandleTypeDef* huart,uint16_t* inputRegisterValues){
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]

	uint16_t startingReg = (rxFrame[2]<<8) | rxFrame[3];
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <handleReadInputRegs+0xe4>)
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <handleReadInputRegs+0xe4>)
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	82fb      	strh	r3, [r7, #22]
	uint16_t numOfregs = (rxFrame[4]<<8) | rxFrame[5];
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <handleReadInputRegs+0xe4>)
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <handleReadInputRegs+0xe4>)
 80014c4:	795b      	ldrb	r3, [r3, #5]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	817b      	strh	r3, [r7, #10]

	uint16_t endAddr = startingReg+numOfregs-1;
 80014ce:	8afa      	ldrh	r2, [r7, #22]
 80014d0:	897b      	ldrh	r3, [r7, #10]
 80014d2:	4413      	add	r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3b01      	subs	r3, #1
 80014d8:	813b      	strh	r3, [r7, #8]

	if((numOfregs<0)|(numOfregs >125)){
 80014da:	897b      	ldrh	r3, [r7, #10]
 80014dc:	2b7d      	cmp	r3, #125	@ 0x7d
 80014de:	d905      	bls.n	80014ec <handleReadInputRegs+0x50>
		sendModbusException(huart,ILLEGAL_DATA_VALUE);
 80014e0:	2103      	movs	r1, #3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f9a6 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e045      	b.n	8001578 <handleReadInputRegs+0xdc>
	}
	if(endAddr > NUM_OF_HOLDING_REGS){
 80014ec:	893b      	ldrh	r3, [r7, #8]
 80014ee:	2b3c      	cmp	r3, #60	@ 0x3c
 80014f0:	d905      	bls.n	80014fe <handleReadInputRegs+0x62>
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);
 80014f2:	2102      	movs	r1, #2
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f99d 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e03c      	b.n	8001578 <handleReadInputRegs+0xdc>
	}
	//  | SLAVE_ID | FUNC_CODE | BYTE_COUNT |    DATA     |    CRC    |
	//  |  1 byte  |   1 byte  |    1 byte  |   N*2 Bytes |   2 bytes |

	txFrame[0] = SLAVE_ID;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <handleReadInputRegs+0xe8>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <handleReadInputRegs+0xec>)
 8001504:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <handleReadInputRegs+0xe4>)
 8001508:	785a      	ldrb	r2, [r3, #1]
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <handleReadInputRegs+0xec>)
 800150c:	705a      	strb	r2, [r3, #1]
	txFrame[2] = numOfregs *2;
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <handleReadInputRegs+0xec>)
 8001518:	709a      	strb	r2, [r3, #2]

	int byteCursor=3;
 800151a:	2303      	movs	r3, #3
 800151c:	613b      	str	r3, [r7, #16]

	for(int i = 0; i<numOfregs;i++){
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e01d      	b.n	8001560 <handleReadInputRegs+0xc4>
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]>>8) & 0xff; // Higher byte
 8001524:	8afb      	ldrh	r3, [r7, #22]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4413      	add	r3, r2
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	b299      	uxth	r1, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	613a      	str	r2, [r7, #16]
 8001538:	b2c9      	uxtb	r1, r1
 800153a:	4a13      	ldr	r2, [pc, #76]	@ (8001588 <handleReadInputRegs+0xec>)
 800153c:	54d1      	strb	r1, [r2, r3]
		txFrame[byteCursor++] =(inputRegisterValues[startingReg]) & 0xff;    // Lower  byte
 800153e:	8afb      	ldrh	r3, [r7, #22]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	8819      	ldrh	r1, [r3, #0]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	613a      	str	r2, [r7, #16]
 800154e:	b2c9      	uxtb	r1, r1
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <handleReadInputRegs+0xec>)
 8001552:	54d1      	strb	r1, [r2, r3]
		startingReg++;
 8001554:	8afb      	ldrh	r3, [r7, #22]
 8001556:	3301      	adds	r3, #1
 8001558:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<numOfregs;i++){
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbdd      	blt.n	8001524 <handleReadInputRegs+0x88>
	}
	sendModBusRequest(huart,txFrame,byteCursor);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	4906      	ldr	r1, [pc, #24]	@ (8001588 <handleReadInputRegs+0xec>)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fead 	bl	80012d0 <sendModBusRequest>
	return 1;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000034 	.word	0x20000034
 8001584:	20000000 	.word	0x20000000
 8001588:	20000074 	.word	0x20000074

0800158c <handleReadCoils>:

modbusResult handleReadCoils (UART_HandleTypeDef* huart,uint8_t* coilValues){
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <handleReadCoils+0xc4>)
 8001598:	789b      	ldrb	r3, [r3, #2]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <handleReadCoils+0xc4>)
 80015a0:	78db      	ldrb	r3, [r3, #3]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	81fb      	strh	r3, [r7, #14]

	uint16_t numCoils = ((rxFrame[4]<<8)|rxFrame[5]);    // number to coils master has requested
 80015aa:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <handleReadCoils+0xc4>)
 80015ac:	791b      	ldrb	r3, [r3, #4]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <handleReadCoils+0xc4>)
 80015b4:	795b      	ldrb	r3, [r3, #5]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	81bb      	strh	r3, [r7, #12]
	if ((numCoils<1)||(numCoils>2000))  				 // maximum no. of coils as per the PDF
 80015be:	89bb      	ldrh	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <handleReadCoils+0x40>
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015ca:	d905      	bls.n	80015d8 <handleReadCoils+0x4c>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  // send an exception
 80015cc:	2103      	movs	r1, #3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f930 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e037      	b.n	8001648 <handleReadCoils+0xbc>
	}

	uint16_t endingAddr = startAddr+numCoils-1;  // Last coils address
 80015d8:	89fa      	ldrh	r2, [r7, #14]
 80015da:	89bb      	ldrh	r3, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80015e8:	d905      	bls.n	80015f6 <handleReadCoils+0x6a>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80015ea:	2102      	movs	r1, #2
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f921 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e028      	b.n	8001648 <handleReadCoils+0xbc>
	}
	memset (txFrame, '\0', 256);
 80015f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fa:	2100      	movs	r1, #0
 80015fc:	4815      	ldr	r0, [pc, #84]	@ (8001654 <handleReadCoils+0xc8>)
 80015fe:	f007 faec 	bl	8008bda <memset>

	txFrame[0] = SLAVE_ID;  							// Slave ID
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <handleReadCoils+0xcc>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <handleReadCoils+0xc8>)
 8001608:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// Function code
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <handleReadCoils+0xc4>)
 800160c:	785a      	ldrb	r2, [r3, #1]
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <handleReadCoils+0xc8>)
 8001610:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);	// Byte count
 8001612:	89bb      	ldrh	r3, [r7, #12]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	b29b      	uxth	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	89ba      	ldrh	r2, [r7, #12]
 800161c:	f002 0207 	and.w	r2, r2, #7
 8001620:	b292      	uxth	r2, r2
 8001622:	2a00      	cmp	r2, #0
 8001624:	bf14      	ite	ne
 8001626:	2201      	movne	r2, #1
 8001628:	2200      	moveq	r2, #0
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	4413      	add	r3, r2
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <handleReadCoils+0xc8>)
 8001632:	709a      	strb	r2, [r3, #2]

	//encodeCoils(coilValues,numCoils,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <handleReadCoils+0xc8>)
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	3303      	adds	r3, #3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4905      	ldr	r1, [pc, #20]	@ (8001654 <handleReadCoils+0xc8>)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fe45 	bl	80012d0 <sendModBusRequest>
	return 1;
 8001646:	2301      	movs	r3, #1

}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000034 	.word	0x20000034
 8001654:	20000074 	.word	0x20000074
 8001658:	20000000 	.word	0x20000000

0800165c <handleReadDiscreteInputs>:

modbusResult handleReadDiscreteInputs (UART_HandleTypeDef* huart,uint8_t* dicreteInputValues){
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]

	uint16_t startAddr = ((rxFrame[2]<<8)|rxFrame[3]);  // start Coil Address
 8001666:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <handleReadDiscreteInputs+0xcc>)
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <handleReadDiscreteInputs+0xcc>)
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	81fb      	strh	r3, [r7, #14]

	uint16_t numOfDiscInputs = ((rxFrame[4]<<8)|rxFrame[5]);   	// number to coils master has requested
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <handleReadDiscreteInputs+0xcc>)
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <handleReadDiscreteInputs+0xcc>)
 8001684:	795b      	ldrb	r3, [r3, #5]
 8001686:	b21b      	sxth	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b21b      	sxth	r3, r3
 800168c:	81bb      	strh	r3, [r7, #12]
	if ((numOfDiscInputs<1)||(numOfDiscInputs>2000))  			// maximum no. of coils as per the PDF
 800168e:	89bb      	ldrh	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <handleReadDiscreteInputs+0x40>
 8001694:	89bb      	ldrh	r3, [r7, #12]
 8001696:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800169a:	d905      	bls.n	80016a8 <handleReadDiscreteInputs+0x4c>
	{
		sendModbusException (huart,ILLEGAL_DATA_VALUE);  		// send an exception
 800169c:	2103      	movs	r1, #3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8c8 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e03a      	b.n	800171e <handleReadDiscreteInputs+0xc2>
	}

	uint16_t endingAddr = startAddr+numOfDiscInputs-1; 			 // Last coils address
 80016a8:	89fa      	ldrh	r2, [r7, #14]
 80016aa:	89bb      	ldrh	r3, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3b01      	subs	r3, #1
 80016b2:	817b      	strh	r3, [r7, #10]
	if (endingAddr>199)  										 // end coil can not be more than 199
 80016b4:	897b      	ldrh	r3, [r7, #10]
 80016b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80016b8:	d905      	bls.n	80016c6 <handleReadDiscreteInputs+0x6a>
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 80016ba:	2102      	movs	r1, #2
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f8b9 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e02b      	b.n	800171e <handleReadDiscreteInputs+0xc2>
	}
	memset (txFrame, '\0', 256);
 80016c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ca:	2100      	movs	r1, #0
 80016cc:	4817      	ldr	r0, [pc, #92]	@ (800172c <handleReadDiscreteInputs+0xd0>)
 80016ce:	f007 fa84 	bl	8008bda <memset>

	txFrame[0] = SLAVE_ID;  							// slave ID
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <handleReadDiscreteInputs+0xd4>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <handleReadDiscreteInputs+0xd0>)
 80016d8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];  							// function code
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <handleReadDiscreteInputs+0xcc>)
 80016dc:	785a      	ldrb	r2, [r3, #1]
 80016de:	4b13      	ldr	r3, [pc, #76]	@ (800172c <handleReadDiscreteInputs+0xd0>)
 80016e0:	705a      	strb	r2, [r3, #1]
	txFrame[2] = (numOfDiscInputs/8) + ((numOfDiscInputs%8)>0 ? 1:0);	// Byte count
 80016e2:	89bb      	ldrh	r3, [r7, #12]
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	89ba      	ldrh	r2, [r7, #12]
 80016ec:	f002 0207 	and.w	r2, r2, #7
 80016f0:	b292      	uxth	r2, r2
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2201      	movne	r2, #1
 80016f8:	2200      	moveq	r2, #0
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	4413      	add	r3, r2
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <handleReadDiscreteInputs+0xd0>)
 8001702:	709a      	strb	r2, [r3, #2]

     txFrame[3]=1;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <handleReadDiscreteInputs+0xd0>)
 8001706:	2201      	movs	r2, #1
 8001708:	70da      	strb	r2, [r3, #3]
//	decodeCoilsFromRXBuffer(dicreteInputValues,numOfDiscInputs,txFrame+3);
	//encodeCoils(dicreteInputValues,numOfDiscInputs,txFrame+3);
	sendModBusRequest(huart,txFrame, txFrame[2]+3);
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <handleReadDiscreteInputs+0xd0>)
 800170c:	789b      	ldrb	r3, [r3, #2]
 800170e:	3303      	adds	r3, #3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4905      	ldr	r1, [pc, #20]	@ (800172c <handleReadDiscreteInputs+0xd0>)
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fdda 	bl	80012d0 <sendModBusRequest>
	return 1;
 800171c:	2301      	movs	r3, #1

}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000034 	.word	0x20000034
 800172c:	20000074 	.word	0x20000074
 8001730:	20000000 	.word	0x20000000

08001734 <handleWriteMulyipleHandlingRegister>:
	sendModBusRequest(huart,txFrame, 6);
	return 1;

}

modbusResult handleWriteMulyipleHandlingRegister (UART_HandleTypeDef* huart,uint16_t* holdingRegisterValues){
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]

	uint16_t staringtAddr = ((rxFrame[2]<<8)| rxFrame[3]);
 800173e:	4b3a      	ldr	r3, [pc, #232]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 8001740:	789b      	ldrb	r3, [r3, #2]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 8001748:	78db      	ldrb	r3, [r3, #3]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((rxFrame[4]<<8) | rxFrame[5]);   // number to registers master has requested
 8001752:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 8001754:	791b      	ldrb	r3, [r3, #4]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	b21b      	sxth	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b21b      	sxth	r3, r3
 8001764:	817b      	strh	r3, [r7, #10]

	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per Modbus Specification
 8001766:	897b      	ldrh	r3, [r7, #10]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <handleWriteMulyipleHandlingRegister+0x3e>
 800176c:	897b      	ldrh	r3, [r7, #10]
 800176e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001770:	d905      	bls.n	800177e <handleWriteMulyipleHandlingRegister+0x4a>
	{
		sendModbusException(huart,ILLEGAL_DATA_VALUE);  // send an exception
 8001772:	2103      	movs	r1, #3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f85d 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 800177a:	2300      	movs	r3, #0
 800177c:	e04f      	b.n	800181e <handleWriteMulyipleHandlingRegister+0xea>
	}

	uint16_t endAddr = staringtAddr + numRegs - 1;  // end Register
 800177e:	8afa      	ldrh	r2, [r7, #22]
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	4413      	add	r3, r2
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	813b      	strh	r3, [r7, #8]
	if (endAddr> NUM_OF_HOLDING_REGS)  	// end Register can not be more than NUM_OF_HOLDING_REGS as
 800178a:	893b      	ldrh	r3, [r7, #8]
 800178c:	2b3c      	cmp	r3, #60	@ 0x3c
 800178e:	d905      	bls.n	800179c <handleWriteMulyipleHandlingRegister+0x68>
										// we only have record of NUM_OF_HOLDING_REGS Registers in total
	{
		sendModbusException(huart,ILLEGAL_DATA_ADDRESS);   // send an exception
 8001790:	2102      	movs	r1, #2
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f84e 	bl	8001834 <sendModbusException>
		return MODBUS_ERROR;
 8001798:	2300      	movs	r3, #0
 800179a:	e040      	b.n	800181e <handleWriteMulyipleHandlingRegister+0xea>
	}

	int indx = 7;  // we need to keep track of index in rxFrame
 800179c:	2307      	movs	r3, #7
 800179e:	613b      	str	r3, [r7, #16]

	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e019      	b.n	80017da <handleWriteMulyipleHandlingRegister+0xa6>

		holdingRegisterValues[staringtAddr++] = (rxFrame[indx++]<<8)|rxFrame[indx++];
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	613a      	str	r2, [r7, #16]
 80017ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	6139      	str	r1, [r7, #16]
 80017ba:	491b      	ldr	r1, [pc, #108]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 80017bc:	5ccb      	ldrb	r3, [r1, r3]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b219      	sxth	r1, r3
 80017c4:	8afb      	ldrh	r3, [r7, #22]
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	82fa      	strh	r2, [r7, #22]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	b28a      	uxth	r2, r1
 80017d2:	801a      	strh	r2, [r3, #0]
	for (int regCorsor=0; regCorsor<numRegs; regCorsor++){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbe1      	blt.n	80017a6 <handleWriteMulyipleHandlingRegister+0x72>

	}
	//   | SLAVE_ID | FUNCTION_CODE | Start Addr |  num of Regs |   CRC   |
	//   | 1 BYTE   |     1 BYTE    |  2 BYTE    |    2 BYTES   | 2 BYTES |

	txFrame[0] = SLAVE_ID;     // Slave ID
 80017e2:	4b12      	ldr	r3, [pc, #72]	@ (800182c <handleWriteMulyipleHandlingRegister+0xf8>)
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <handleWriteMulyipleHandlingRegister+0xfc>)
 80017e8:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1];   // Function code
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 80017ec:	785a      	ldrb	r2, [r3, #1]
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <handleWriteMulyipleHandlingRegister+0xfc>)
 80017f0:	705a      	strb	r2, [r3, #1]

	txFrame[2] = rxFrame[2];   // Start Addr HIGH Byte
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 80017f4:	789a      	ldrb	r2, [r3, #2]
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <handleWriteMulyipleHandlingRegister+0xfc>)
 80017f8:	709a      	strb	r2, [r3, #2]
	txFrame[3] = rxFrame[3];   // Start Addr LOW Byte
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 80017fc:	78da      	ldrb	r2, [r3, #3]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001800:	70da      	strb	r2, [r3, #3]

	txFrame[4] = rxFrame[4];   // Num of Regs HIGH Byte
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 8001804:	791a      	ldrb	r2, [r3, #4]
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001808:	711a      	strb	r2, [r3, #4]
	txFrame[5] = rxFrame[5];   // Num of Regs LOW Byte
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <handleWriteMulyipleHandlingRegister+0xf4>)
 800180c:	795a      	ldrb	r2, [r3, #5]
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001810:	715a      	strb	r2, [r3, #5]

	sendModBusRequest(huart,txFrame, 6);  // send data... CRC will be calculated in the function itself
 8001812:	2206      	movs	r2, #6
 8001814:	4906      	ldr	r1, [pc, #24]	@ (8001830 <handleWriteMulyipleHandlingRegister+0xfc>)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fd5a 	bl	80012d0 <sendModBusRequest>
	return 1;   // success
 800181c:	2301      	movs	r3, #1

}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000034 	.word	0x20000034
 800182c:	20000000 	.word	0x20000000
 8001830:	20000074 	.word	0x20000074

08001834 <sendModbusException>:

	sendModBusRequest(huart,txFrame, 6);
	return MODBUS_OK;
}

modbusResult sendModbusException(UART_HandleTypeDef* huart,modbusExceptionCode exceptionCode){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]

	// | SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	// | 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	txFrame[0] = rxFrame[0];       		// Slave ID
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <sendModbusException+0x3c>)
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <sendModbusException+0x40>)
 8001846:	701a      	strb	r2, [r3, #0]
	txFrame[1] = rxFrame[1] | 0x80;  	// Adding 1 to the MSB of the function code
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <sendModbusException+0x3c>)
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <sendModbusException+0x40>)
 8001854:	705a      	strb	r2, [r3, #1]
	txFrame[2] =  exceptionCode;   		// Load the Exception code
 8001856:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <sendModbusException+0x40>)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	7093      	strb	r3, [r2, #2]

	return 	sendModBusRequest(huart,txFrame, 3);  // send Data... CRC will be calculated in the function
 800185c:	2203      	movs	r2, #3
 800185e:	4905      	ldr	r1, [pc, #20]	@ (8001874 <sendModbusException+0x40>)
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fd35 	bl	80012d0 <sendModBusRequest>
 8001866:	4603      	mov	r3, r0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000034 	.word	0x20000034
 8001874:	20000074 	.word	0x20000074

08001878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_MspInit+0x44>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <HAL_MspInit+0x44>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_MspInit+0x44>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_MspInit+0x44>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <HAL_MspInit+0x44>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_MspInit+0x44>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	@ 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018e0:	d154      	bne.n	800198c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	6153      	str	r3, [r2, #20]
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4a25      	ldr	r2, [pc, #148]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 8001900:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001904:	6153      	str	r3, [r2, #20]
 8001906:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800191c:	6153      	str	r3, [r2, #20]
 800191e:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800192a:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	4a19      	ldr	r2, [pc, #100]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 8001930:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001934:	6153      	str	r3, [r2, #20]
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_ADC_MspInit+0xd4>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001942:	2307      	movs	r3, #7
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4810      	ldr	r0, [pc, #64]	@ (8001998 <HAL_ADC_MspInit+0xd8>)
 8001956:	f001 fdcf 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800195a:	230f      	movs	r3, #15
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001970:	f001 fdc2 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001974:	2310      	movs	r3, #16
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001978:	2303      	movs	r3, #3
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <HAL_ADC_MspInit+0xdc>)
 8001988:	f001 fdb6 	bl	80034f8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	@ 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	48000800 	.word	0x48000800
 800199c:	48001400 	.word	0x48001400

080019a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a17      	ldr	r2, [pc, #92]	@ (8001a1c <HAL_I2C_MspInit+0x7c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d128      	bne.n	8001a14 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <HAL_I2C_MspInit+0x80>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a16      	ldr	r2, [pc, #88]	@ (8001a20 <HAL_I2C_MspInit+0x80>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_I2C_MspInit+0x80>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e0:	2312      	movs	r3, #18
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ec:	2304      	movs	r3, #4
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <HAL_I2C_MspInit+0x84>)
 80019f8:	f001 fd7e 	bl	80034f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <HAL_I2C_MspInit+0x80>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	4a07      	ldr	r2, [pc, #28]	@ (8001a20 <HAL_I2C_MspInit+0x80>)
 8001a02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a06:	61d3      	str	r3, [r2, #28]
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_I2C_MspInit+0x80>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	@ 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40021000 	.word	0x40021000
 8001a24:	48000400 	.word	0x48000400

08001a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <HAL_SPI_MspInit+0x7c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d127      	bne.n	8001a9a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <HAL_SPI_MspInit+0x80>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <HAL_SPI_MspInit+0x80>)
 8001a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <HAL_SPI_MspInit+0x80>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <HAL_SPI_MspInit+0x80>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <HAL_SPI_MspInit+0x80>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6153      	str	r3, [r2, #20]
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_SPI_MspInit+0x80>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a7a:	2338      	movs	r3, #56	@ 0x38
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <HAL_SPI_MspInit+0x84>)
 8001a96:	f001 fd2f 	bl	80034f8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	@ 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013000 	.word	0x40013000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000400 	.word	0x48000400

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	@ 0x38
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a56      	ldr	r2, [pc, #344]	@ (8001c28 <HAL_TIM_Base_MspInit+0x178>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d114      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad2:	4b56      	ldr	r3, [pc, #344]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4a55      	ldr	r2, [pc, #340]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001ad8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001adc:	6193      	str	r3, [r2, #24]
 8001ade:	4b53      	ldr	r3, [pc, #332]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2018      	movs	r0, #24
 8001af0:	f001 fa3b 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001af4:	2018      	movs	r0, #24
 8001af6:	f001 fa54 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001afa:	e091      	b.n	8001c20 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b04:	d14f      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b06:	4b49      	ldr	r3, [pc, #292]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a48      	ldr	r2, [pc, #288]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	61d3      	str	r3, [r2, #28]
 8001b12:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a42      	ldr	r2, [pc, #264]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b40      	ldr	r3, [pc, #256]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	6153      	str	r3, [r2, #20]
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INT_2_TIM_Pin;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b60:	2301      	movs	r3, #1
 8001b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_2_TIM_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4831      	ldr	r0, [pc, #196]	@ (8001c30 <HAL_TIM_Base_MspInit+0x180>)
 8001b6c:	f001 fcc4 	bl	80034f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INT_1_TIM_Pin;
 8001b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b82:	2301      	movs	r3, #1
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(INT_1_TIM_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b90:	f001 fcb2 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	201c      	movs	r0, #28
 8001b9a:	f001 f9e6 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b9e:	201c      	movs	r0, #28
 8001ba0:	f001 f9ff 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 8001ba4:	e03c      	b.n	8001c20 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM3)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	@ (8001c34 <HAL_TIM_Base_MspInit+0x184>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d10c      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	61d3      	str	r3, [r2, #28]
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
}
 8001bc8:	e02a      	b.n	8001c20 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <HAL_TIM_Base_MspInit+0x188>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d10c      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001bda:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	e018      	b.n	8001c20 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM15)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <HAL_TIM_Base_MspInit+0x18c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d113      	bne.n	8001c20 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_TIM_Base_MspInit+0x17c>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2018      	movs	r0, #24
 8001c16:	f001 f9a8 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001c1a:	2018      	movs	r0, #24
 8001c1c:	f001 f9c1 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	3738      	adds	r7, #56	@ 0x38
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40012c00 	.word	0x40012c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	40000400 	.word	0x40000400
 8001c38:	40013400 	.word	0x40013400
 8001c3c:	40014000 	.word	0x40014000

08001c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a32      	ldr	r2, [pc, #200]	@ (8001d28 <HAL_TIM_MspPostInit+0xe8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d13b      	bne.n	8001cda <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a31      	ldr	r2, [pc, #196]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c84:	6153      	str	r3, [r2, #20]
 8001c86:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	4820      	ldr	r0, [pc, #128]	@ (8001d30 <HAL_TIM_MspPostInit+0xf0>)
 8001cb0:	f001 fc22 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cb4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001cb8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd4:	f001 fc10 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001cd8:	e021      	b.n	8001d1e <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM8)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a15      	ldr	r2, [pc, #84]	@ (8001d34 <HAL_TIM_MspPostInit+0xf4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d11c      	bne.n	8001d1e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001cea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cee:	6153      	str	r3, [r2, #20]
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_TIM_MspPostInit+0xec>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001cfc:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <HAL_TIM_MspPostInit+0xf8>)
 8001d1a:	f001 fbed 	bl	80034f8 <HAL_GPIO_Init>
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	@ 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	40013400 	.word	0x40013400
 8001d38:	48000800 	.word	0x48000800

08001d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a41      	ldr	r2, [pc, #260]	@ (8001e60 <HAL_UART_MspInit+0x124>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d17b      	bne.n	8001e56 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5e:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_UART_MspInit+0x128>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	4a40      	ldr	r2, [pc, #256]	@ (8001e64 <HAL_UART_MspInit+0x128>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d68:	6193      	str	r3, [r2, #24]
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <HAL_UART_MspInit+0x128>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b3b      	ldr	r3, [pc, #236]	@ (8001e64 <HAL_UART_MspInit+0x128>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e64 <HAL_UART_MspInit+0x128>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d80:	6153      	str	r3, [r2, #20]
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_UART_MspInit+0x128>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d8e:	23c0      	movs	r3, #192	@ 0xc0
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	482f      	ldr	r0, [pc, #188]	@ (8001e68 <HAL_UART_MspInit+0x12c>)
 8001daa:	f001 fba5 	bl	80034f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001dae:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001db0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e70 <HAL_UART_MspInit+0x134>)
 8001db2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dba:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc6:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dcc:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dde:	4823      	ldr	r0, [pc, #140]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001de0:	f001 f907 	bl	8002ff2 <HAL_DMA_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001dea:	f7ff fa23 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001df2:	675a      	str	r2, [r3, #116]	@ 0x74
 8001df4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e6c <HAL_UART_MspInit+0x130>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <HAL_UART_MspInit+0x13c>)
 8001dfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e02:	2210      	movs	r2, #16
 8001e04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e24:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e2a:	4812      	ldr	r0, [pc, #72]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e2c:	f001 f8e1 	bl	8002ff2 <HAL_DMA_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001e36:	f7ff f9fd 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e3e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e40:	4a0c      	ldr	r2, [pc, #48]	@ (8001e74 <HAL_UART_MspInit+0x138>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2025      	movs	r0, #37	@ 0x25
 8001e4c:	f001 f88d 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e50:	2025      	movs	r0, #37	@ 0x25
 8001e52:	f001 f8a6 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	@ 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48000400 	.word	0x48000400
 8001e6c:	200004c4 	.word	0x200004c4
 8001e70:	40020058 	.word	0x40020058
 8001e74:	20000508 	.word	0x20000508
 8001e78:	40020044 	.word	0x40020044

08001e7c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0e      	ldr	r2, [pc, #56]	@ (8001ec4 <HAL_UART_MspDeInit+0x48>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d116      	bne.n	8001ebc <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <HAL_UART_MspDeInit+0x4c>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <HAL_UART_MspDeInit+0x4c>)
 8001e94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e98:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001e9a:	21c0      	movs	r1, #192	@ 0xc0
 8001e9c:	480b      	ldr	r0, [pc, #44]	@ (8001ecc <HAL_UART_MspDeInit+0x50>)
 8001e9e:	f001 fca5 	bl	80037ec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 f8ea 	bl	8003080 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 f8e5 	bl	8003080 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001eb6:	2025      	movs	r0, #37	@ 0x25
 8001eb8:	f001 f881 	bl	8002fbe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000400 	.word	0x48000400

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f26:	f000 f8bb 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <DMA1_Channel4_IRQHandler+0x10>)
 8001f36:	f001 f9c6 	bl	80032c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000508 	.word	0x20000508

08001f44 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f48:	4802      	ldr	r0, [pc, #8]	@ (8001f54 <DMA1_Channel5_IRQHandler+0x10>)
 8001f4a:	f001 f9bc 	bl	80032c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200004c4 	.word	0x200004c4

08001f58 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f5c:	4803      	ldr	r0, [pc, #12]	@ (8001f6c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001f5e:	f003 ffb1 	bl	8005ec4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001f62:	4803      	ldr	r0, [pc, #12]	@ (8001f70 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001f64:	f003 ffae 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200002c0 	.word	0x200002c0
 8001f70:	200003f0 	.word	0x200003f0

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <TIM2_IRQHandler+0x10>)
 8001f7a:	f003 ffa3 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000030c 	.word	0x2000030c

08001f88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <USART1_IRQHandler+0x10>)
 8001f8e:	f005 fc79 	bl	8007884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000043c 	.word	0x2000043c

08001f9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <SystemInit+0x20>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <SystemInit+0x20>)
 8001fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc4:	f7ff ffea 	bl	8001f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8001fca:	490d      	ldr	r1, [pc, #52]	@ (8002000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <LoopForever+0xe>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800200c <LoopForever+0x16>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f006 fdfd 	bl	8008bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ff2:	f7fe f9af 	bl	8000354 <main>

08001ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ff6:	e7fe      	b.n	8001ff6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ff8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002004:	08008c8c 	.word	0x08008c8c
  ldr r2, =_sbss
 8002008:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800200c:	20000550 	.word	0x20000550

08002010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC1_2_IRQHandler>
	...

08002014 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_Init+0x28>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_Init+0x28>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 ff95 	bl	8002f54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fc22 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000

08002040 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 ffbb 	bl	8002fda <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 ff75 	bl	8002f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	@ (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000008 	.word	0x20000008
 8002098:	20000010 	.word	0x20000010
 800209c:	2000000c 	.word	0x2000000c

080020a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000010 	.word	0x20000010
 80020c4:	2000054c 	.word	0x2000054c

080020c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000054c 	.word	0x2000054c

080020e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000010 	.word	0x20000010

08002128 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b09a      	sub	sp, #104	@ 0x68
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e1c9      	b.n	80024dc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d176      	bne.n	8002248 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d152      	bne.n	8002208 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fb9f 	bl	80018c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d13b      	bne.n	8002208 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fd85 	bl	8002ca0 <ADC_Disable>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d12f      	bne.n	8002208 <HAL_ADC_Init+0xe0>
 80021a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d12b      	bne.n	8002208 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021b8:	f023 0302 	bic.w	r3, r3, #2
 80021bc:	f043 0202 	orr.w	r2, r3, #2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021d2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021e4:	4b86      	ldr	r3, [pc, #536]	@ (8002400 <HAL_ADC_Init+0x2d8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a86      	ldr	r2, [pc, #536]	@ (8002404 <HAL_ADC_Init+0x2dc>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9a      	lsrs	r2, r3, #18
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021fa:	e002      	b.n	8002202 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3b01      	subs	r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002224:	d110      	bne.n	8002248 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f023 0312 	bic.w	r3, r3, #18
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 8136 	bne.w	80024c2 <HAL_ADC_Init+0x39a>
 8002256:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 8131 	bne.w	80024c2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 8129 	bne.w	80024c2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002278:	f043 0202 	orr.w	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002288:	d004      	beq.n	8002294 <HAL_ADC_Init+0x16c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5e      	ldr	r2, [pc, #376]	@ (8002408 <HAL_ADC_Init+0x2e0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_ADC_Init+0x170>
 8002294:	4b5d      	ldr	r3, [pc, #372]	@ (800240c <HAL_ADC_Init+0x2e4>)
 8002296:	e000      	b.n	800229a <HAL_ADC_Init+0x172>
 8002298:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_ADC_Init+0x2e8>)
 800229a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a4:	d102      	bne.n	80022ac <HAL_ADC_Init+0x184>
 80022a6:	4b58      	ldr	r3, [pc, #352]	@ (8002408 <HAL_ADC_Init+0x2e0>)
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e01a      	b.n	80022e2 <HAL_ADC_Init+0x1ba>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a55      	ldr	r2, [pc, #340]	@ (8002408 <HAL_ADC_Init+0x2e0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d103      	bne.n	80022be <HAL_ADC_Init+0x196>
 80022b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e011      	b.n	80022e2 <HAL_ADC_Init+0x1ba>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a54      	ldr	r2, [pc, #336]	@ (8002414 <HAL_ADC_Init+0x2ec>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d102      	bne.n	80022ce <HAL_ADC_Init+0x1a6>
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_ADC_Init+0x2f0>)
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e009      	b.n	80022e2 <HAL_ADC_Init+0x1ba>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a51      	ldr	r2, [pc, #324]	@ (8002418 <HAL_ADC_Init+0x2f0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d102      	bne.n	80022de <HAL_ADC_Init+0x1b6>
 80022d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002414 <HAL_ADC_Init+0x2ec>)
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e001      	b.n	80022e2 <HAL_ADC_Init+0x1ba>
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_ADC_Init+0x1da>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_Init+0x1da>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_ADC_Init+0x1dc>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11c      	bne.n	8002342 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002308:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_ADC_Init+0x202>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_Init+0x202>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_ADC_Init+0x204>
 800232a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	431a      	orrs	r2, r3
 800233e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002340:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7e5b      	ldrb	r3, [r3, #25]
 8002346:	035b      	lsls	r3, r3, #13
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800234c:	2a01      	cmp	r2, #1
 800234e:	d002      	beq.n	8002356 <HAL_ADC_Init+0x22e>
 8002350:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002354:	e000      	b.n	8002358 <HAL_ADC_Init+0x230>
 8002356:	2200      	movs	r2, #0
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4313      	orrs	r3, r2
 8002366:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002368:	4313      	orrs	r3, r2
 800236a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d11b      	bne.n	80023ae <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7e5b      	ldrb	r3, [r3, #25]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	3b01      	subs	r3, #1
 8002384:	045a      	lsls	r2, r3, #17
 8002386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002388:	4313      	orrs	r3, r2
 800238a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002390:	e00d      	b.n	80023ae <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800239a:	f043 0220 	orr.w	r2, r3, #32
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d03a      	beq.n	800242c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <HAL_ADC_Init+0x2ec>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_ADC_Init+0x2a2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a14      	ldr	r2, [pc, #80]	@ (8002418 <HAL_ADC_Init+0x2f0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d128      	bne.n	800241c <HAL_ADC_Init+0x2f4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80023d2:	d012      	beq.n	80023fa <HAL_ADC_Init+0x2d2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023dc:	d00a      	beq.n	80023f4 <HAL_ADC_Init+0x2cc>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80023e6:	d002      	beq.n	80023ee <HAL_ADC_Init+0x2c6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	e018      	b.n	8002420 <HAL_ADC_Init+0x2f8>
 80023ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f2:	e015      	b.n	8002420 <HAL_ADC_Init+0x2f8>
 80023f4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80023f8:	e012      	b.n	8002420 <HAL_ADC_Init+0x2f8>
 80023fa:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80023fe:	e00f      	b.n	8002420 <HAL_ADC_Init+0x2f8>
 8002400:	20000008 	.word	0x20000008
 8002404:	431bde83 	.word	0x431bde83
 8002408:	50000100 	.word	0x50000100
 800240c:	50000300 	.word	0x50000300
 8002410:	50000700 	.word	0x50000700
 8002414:	50000400 	.word	0x50000400
 8002418:	50000500 	.word	0x50000500
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002424:	4313      	orrs	r3, r2
 8002426:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002428:	4313      	orrs	r3, r2
 800242a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d114      	bne.n	8002464 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002448:	f023 0302 	bic.w	r3, r3, #2
 800244c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7e1b      	ldrb	r3, [r3, #24]
 8002452:	039a      	lsls	r2, r3, #14
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4313      	orrs	r3, r2
 800245e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002460:	4313      	orrs	r3, r2
 8002462:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <HAL_ADC_Init+0x3bc>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002474:	430b      	orrs	r3, r1
 8002476:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10c      	bne.n	800249a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f023 010f 	bic.w	r1, r3, #15
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	1e5a      	subs	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
 8002498:	e007      	b.n	80024aa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 020f 	bic.w	r2, r2, #15
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	f023 0303 	bic.w	r3, r3, #3
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	@ 0x40
 80024c0:	e00a      	b.n	80024d8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f023 0312 	bic.w	r3, r3, #18
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3768      	adds	r7, #104	@ 0x68
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	fff0c007 	.word	0xfff0c007

080024e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b09b      	sub	sp, #108	@ 0x6c
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x22>
 8002506:	2302      	movs	r3, #2
 8002508:	e2c8      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x5b4>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 82ac 	bne.w	8002a7a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b04      	cmp	r3, #4
 8002528:	d81c      	bhi.n	8002564 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	461a      	mov	r2, r3
 800253e:	231f      	movs	r3, #31
 8002540:	4093      	lsls	r3, r2
 8002542:	43db      	mvns	r3, r3
 8002544:	4019      	ands	r1, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa00 f203 	lsl.w	r2, r0, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	631a      	str	r2, [r3, #48]	@ 0x30
 8002562:	e063      	b.n	800262c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b09      	cmp	r3, #9
 800256a:	d81e      	bhi.n	80025aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	3b1e      	subs	r3, #30
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	4019      	ands	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	3b1e      	subs	r3, #30
 800259c:	fa00 f203 	lsl.w	r2, r0, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80025a8:	e040      	b.n	800262c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b0e      	cmp	r3, #14
 80025b0:	d81e      	bhi.n	80025f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	3b3c      	subs	r3, #60	@ 0x3c
 80025c6:	221f      	movs	r2, #31
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4019      	ands	r1, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	3b3c      	subs	r3, #60	@ 0x3c
 80025e2:	fa00 f203 	lsl.w	r2, r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80025ee:	e01d      	b.n	800262c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	3b5a      	subs	r3, #90	@ 0x5a
 8002604:	221f      	movs	r2, #31
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	4019      	ands	r1, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	3b5a      	subs	r3, #90	@ 0x5a
 8002620:	fa00 f203 	lsl.w	r2, r0, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80e5 	bne.w	8002806 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b09      	cmp	r3, #9
 8002642:	d91c      	bls.n	800267e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6999      	ldr	r1, [r3, #24]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	3b1e      	subs	r3, #30
 8002656:	2207      	movs	r2, #7
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	4019      	ands	r1, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6898      	ldr	r0, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	3b1e      	subs	r3, #30
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	619a      	str	r2, [r3, #24]
 800267c:	e019      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6959      	ldr	r1, [r3, #20]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	2207      	movs	r2, #7
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	4019      	ands	r1, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6898      	ldr	r0, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	fa00 f203 	lsl.w	r2, r0, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d84f      	bhi.n	8002774 <HAL_ADC_ConfigChannel+0x28c>
 80026d4:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <HAL_ADC_ConfigChannel+0x1f4>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	0800270f 	.word	0x0800270f
 80026e4:	08002731 	.word	0x08002731
 80026e8:	08002753 	.word	0x08002753
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026f2:	4b99      	ldr	r3, [pc, #612]	@ (8002958 <HAL_ADC_ConfigChannel+0x470>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	0691      	lsls	r1, r2, #26
 80026fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026fe:	430a      	orrs	r2, r1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800270a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800270c:	e07b      	b.n	8002806 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002714:	4b90      	ldr	r3, [pc, #576]	@ (8002958 <HAL_ADC_ConfigChannel+0x470>)
 8002716:	4013      	ands	r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	0691      	lsls	r1, r2, #26
 800271e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002720:	430a      	orrs	r2, r1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800272c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800272e:	e06a      	b.n	8002806 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002736:	4b88      	ldr	r3, [pc, #544]	@ (8002958 <HAL_ADC_ConfigChannel+0x470>)
 8002738:	4013      	ands	r3, r2
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	0691      	lsls	r1, r2, #26
 8002740:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002742:	430a      	orrs	r2, r1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800274e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002750:	e059      	b.n	8002806 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002758:	4b7f      	ldr	r3, [pc, #508]	@ (8002958 <HAL_ADC_ConfigChannel+0x470>)
 800275a:	4013      	ands	r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	0691      	lsls	r1, r2, #26
 8002762:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002764:	430a      	orrs	r2, r1
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002770:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002772:	e048      	b.n	8002806 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	069b      	lsls	r3, r3, #26
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002796:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800279e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027ba:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027de:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002802:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002804:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x33e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x33e>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_ADC_ConfigChannel+0x340>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8131 	bne.w	8002a90 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d00f      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43da      	mvns	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	400a      	ands	r2, r1
 8002850:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002854:	e049      	b.n	80028ea <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b09      	cmp	r3, #9
 8002876:	d91c      	bls.n	80028b2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6999      	ldr	r1, [r3, #24]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	3b1b      	subs	r3, #27
 800288a:	2207      	movs	r2, #7
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	4019      	ands	r1, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6898      	ldr	r0, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	3b1b      	subs	r3, #27
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	619a      	str	r2, [r3, #24]
 80028b0:	e01b      	b.n	80028ea <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6959      	ldr	r1, [r3, #20]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	2207      	movs	r2, #7
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	4019      	ands	r1, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6898      	ldr	r0, [r3, #8]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	fa00 f203 	lsl.w	r2, r0, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f2:	d004      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x416>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a18      	ldr	r2, [pc, #96]	@ (800295c <HAL_ADC_ConfigChannel+0x474>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x41a>
 80028fe:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <HAL_ADC_ConfigChannel+0x478>)
 8002900:	e000      	b.n	8002904 <HAL_ADC_ConfigChannel+0x41c>
 8002902:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <HAL_ADC_ConfigChannel+0x47c>)
 8002904:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b10      	cmp	r3, #16
 800290c:	d105      	bne.n	800291a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800290e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800291e:	2b11      	cmp	r3, #17
 8002920:	d105      	bne.n	800292e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002932:	2b12      	cmp	r3, #18
 8002934:	f040 80ac 	bne.w	8002a90 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002938:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 80a5 	bne.w	8002a90 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800294e:	d10b      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x480>
 8002950:	4b02      	ldr	r3, [pc, #8]	@ (800295c <HAL_ADC_ConfigChannel+0x474>)
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e023      	b.n	800299e <HAL_ADC_ConfigChannel+0x4b6>
 8002956:	bf00      	nop
 8002958:	83fff000 	.word	0x83fff000
 800295c:	50000100 	.word	0x50000100
 8002960:	50000300 	.word	0x50000300
 8002964:	50000700 	.word	0x50000700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a4e      	ldr	r2, [pc, #312]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x5c0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d103      	bne.n	800297a <HAL_ADC_ConfigChannel+0x492>
 8002972:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e011      	b.n	800299e <HAL_ADC_ConfigChannel+0x4b6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a4b      	ldr	r2, [pc, #300]	@ (8002aac <HAL_ADC_ConfigChannel+0x5c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d102      	bne.n	800298a <HAL_ADC_ConfigChannel+0x4a2>
 8002984:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e009      	b.n	800299e <HAL_ADC_ConfigChannel+0x4b6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a48      	ldr	r2, [pc, #288]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d102      	bne.n	800299a <HAL_ADC_ConfigChannel+0x4b2>
 8002994:	4b45      	ldr	r3, [pc, #276]	@ (8002aac <HAL_ADC_ConfigChannel+0x5c4>)
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e001      	b.n	800299e <HAL_ADC_ConfigChannel+0x4b6>
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d108      	bne.n	80029be <HAL_ADC_ConfigChannel+0x4d6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x4d6>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x4d8>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d150      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d010      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x4fe>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x4fe>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x500>
 80029e6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d13c      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d11d      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x548>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029fc:	d118      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a08:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9a      	lsrs	r2, r3, #18
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a20:	e002      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f9      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a2e:	e02e      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b11      	cmp	r3, #17
 8002a36:	d10b      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x568>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a40:	d106      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a4c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a4e:	e01e      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b12      	cmp	r3, #18
 8002a56:	d11a      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a62:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a64:	e013      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a78:	e00a      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a8c:	e000      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a8e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	376c      	adds	r7, #108	@ 0x6c
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	50000400 	.word	0x50000400
 8002ab0:	50000500 	.word	0x50000500
 8002ab4:	20000008 	.word	0x20000008
 8002ab8:	431bde83 	.word	0x431bde83

08002abc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b099      	sub	sp, #100	@ 0x64
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ad4:	d102      	bne.n	8002adc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	e01a      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d103      	bne.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002ae6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	e011      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a67      	ldr	r2, [pc, #412]	@ (8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002af8:	4b66      	ldr	r3, [pc, #408]	@ (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	e009      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a64      	ldr	r2, [pc, #400]	@ (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b08:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	e001      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b0      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0a9      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 808d 	bne.w	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f040 8086 	bne.w	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b58:	d004      	beq.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b64:	4b4c      	ldr	r3, [pc, #304]	@ (8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002b66:	e000      	b.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b68:	4b4c      	ldr	r3, [pc, #304]	@ (8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d040      	beq.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b86:	035b      	lsls	r3, r3, #13
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d15c      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002bd2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d14b      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002be0:	f023 030f 	bic.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	6811      	ldr	r1, [r2, #0]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf4:	e03c      	b.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d123      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d107      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002c44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d112      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c52:	f023 030f 	bic.w	r3, r3, #15
 8002c56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c5a:	e009      	b.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002c6e:	e000      	b.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3764      	adds	r7, #100	@ 0x64
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	50000100 	.word	0x50000100
 8002c90:	50000400 	.word	0x50000400
 8002c94:	50000500 	.word	0x50000500
 8002c98:	50000300 	.word	0x50000300
 8002c9c:	50000700 	.word	0x50000700

08002ca0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d108      	bne.n	8002ccc <ADC_Disable+0x2c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <ADC_Disable+0x2c>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <ADC_Disable+0x2e>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d047      	beq.n	8002d62 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030d 	and.w	r3, r3, #13
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10f      	bne.n	8002d00 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0202 	orr.w	r2, r2, #2
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002cf8:	f7ff f9e6 	bl	80020c8 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cfe:	e029      	b.n	8002d54 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0210 	orr.w	r2, r3, #16
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e023      	b.n	8002d64 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d1c:	f7ff f9d4 	bl	80020c8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d914      	bls.n	8002d54 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10d      	bne.n	8002d54 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	f043 0210 	orr.w	r2, r3, #16
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d0dc      	beq.n	8002d1c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0b      	blt.n	8002dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4907      	ldr	r1, [pc, #28]	@ (8002e08 <__NVIC_EnableIRQ+0x38>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2001      	movs	r0, #1
 8002df2:	fa00 f202 	lsl.w	r2, r0, r2
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db12      	blt.n	8002e44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	490a      	ldr	r1, [pc, #40]	@ (8002e50 <__NVIC_DisableIRQ+0x44>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	3320      	adds	r3, #32
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e38:	f3bf 8f4f 	dsb	sy
}
 8002e3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e3e:	f3bf 8f6f 	isb	sy
}
 8002e42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	@ (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	@ (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f20:	d301      	bcc.n	8002f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00f      	b.n	8002f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f26:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <SysTick_Config+0x40>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2e:	210f      	movs	r1, #15
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f7ff ff8e 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <SysTick_Config+0x40>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <SysTick_Config+0x40>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	e000e010 	.word	0xe000e010

08002f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff05 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7c:	f7ff ff1a 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f7ff ff8e 	bl	8002ea8 <NVIC_EncodePriority>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff0d 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff1d 	bl	8002e0c <__NVIC_DisableIRQ>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ff94 	bl	8002f10 <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e037      	b.n	8003078 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800301e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800302c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa10 	bl	8003480 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e03a      	b.n	8003108 <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9dc 	bl	8003480 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_DMA_Start_IT+0x20>
 800312c:	2302      	movs	r3, #2
 800312e:	e04a      	b.n	80031c6 <HAL_DMA_Start_IT+0xb6>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800313e:	2b01      	cmp	r3, #1
 8003140:	d13a      	bne.n	80031b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f95c 	bl	8003424 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 020e 	orr.w	r2, r2, #14
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e00f      	b.n	80031a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 020a 	orr.w	r2, r2, #10
 8003194:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0204 	bic.w	r2, r2, #4
 80031a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e005      	b.n	80031c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
 80031c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e02e      	b.n	800323e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d008      	beq.n	80031fc <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2204      	movs	r2, #4
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e020      	b.n	800323e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 020e 	bic.w	r2, r2, #14
 800320a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f202 	lsl.w	r2, r1, r2
 800322a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800325c:	2b02      	cmp	r3, #2
 800325e:	d005      	beq.n	800326c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	e027      	b.n	80032bc <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 020e 	bic.w	r2, r2, #14
 800327a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
 800329a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
    }
  }
  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	2204      	movs	r2, #4
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d024      	beq.n	8003338 <HAL_DMA_IRQHandler+0x72>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01f      	beq.n	8003338 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0204 	bic.w	r2, r2, #4
 8003314:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331e:	2104      	movs	r1, #4
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d06a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003336:	e065      	b.n	8003404 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	2202      	movs	r2, #2
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02c      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xdc>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d027      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 020a 	bic.w	r2, r2, #10
 800336e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	2102      	movs	r1, #2
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d035      	beq.n	8003404 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033a0:	e030      	b.n	8003404 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	2208      	movs	r2, #8
 80033a8:	409a      	lsls	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d028      	beq.n	8003404 <HAL_DMA_IRQHandler+0x13e>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d023      	beq.n	8003404 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020e 	bic.w	r2, r2, #14
 80033ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    }
  }
}
 8003402:	e7ff      	b.n	8003404 <HAL_DMA_IRQHandler+0x13e>
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f202 	lsl.w	r2, r1, r2
 8003440:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d108      	bne.n	8003464 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003462:	e007      	b.n	8003474 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <DMA_CalcBaseAndBitshift+0x60>)
 8003490:	429a      	cmp	r2, r3
 8003492:	d80f      	bhi.n	80034b4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <DMA_CalcBaseAndBitshift+0x64>)
 800349c:	4413      	add	r3, r2
 800349e:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <DMA_CalcBaseAndBitshift+0x68>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	009a      	lsls	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0f      	ldr	r2, [pc, #60]	@ (80034ec <DMA_CalcBaseAndBitshift+0x6c>)
 80034b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80034b2:	e00e      	b.n	80034d2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <DMA_CalcBaseAndBitshift+0x70>)
 80034bc:	4413      	add	r3, r2
 80034be:	4a0a      	ldr	r2, [pc, #40]	@ (80034e8 <DMA_CalcBaseAndBitshift+0x68>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <DMA_CalcBaseAndBitshift+0x74>)
 80034d0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40020407 	.word	0x40020407
 80034e4:	bffdfff8 	.word	0xbffdfff8
 80034e8:	cccccccd 	.word	0xcccccccd
 80034ec:	40020000 	.word	0x40020000
 80034f0:	bffdfbf8 	.word	0xbffdfbf8
 80034f4:	40020400 	.word	0x40020400

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e154      	b.n	80037b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8146 	beq.w	80037ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_GPIO_Init+0x40>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d130      	bne.n	800359a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800356e:	2201      	movs	r2, #1
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0201 	and.w	r2, r3, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d017      	beq.n	80035d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d123      	bne.n	800362a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	6939      	ldr	r1, [r7, #16]
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80a0 	beq.w	80037ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <HAL_GPIO_Init+0x2d8>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	4a57      	ldr	r2, [pc, #348]	@ (80037d0 <HAL_GPIO_Init+0x2d8>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6193      	str	r3, [r2, #24]
 8003678:	4b55      	ldr	r3, [pc, #340]	@ (80037d0 <HAL_GPIO_Init+0x2d8>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003684:	4a53      	ldr	r2, [pc, #332]	@ (80037d4 <HAL_GPIO_Init+0x2dc>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036ae:	d019      	beq.n	80036e4 <HAL_GPIO_Init+0x1ec>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a49      	ldr	r2, [pc, #292]	@ (80037d8 <HAL_GPIO_Init+0x2e0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_GPIO_Init+0x1e8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a48      	ldr	r2, [pc, #288]	@ (80037dc <HAL_GPIO_Init+0x2e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00d      	beq.n	80036dc <HAL_GPIO_Init+0x1e4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a47      	ldr	r2, [pc, #284]	@ (80037e0 <HAL_GPIO_Init+0x2e8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_GPIO_Init+0x1e0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a46      	ldr	r2, [pc, #280]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_GPIO_Init+0x1dc>
 80036d0:	2304      	movs	r3, #4
 80036d2:	e008      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036d4:	2305      	movs	r3, #5
 80036d6:	e006      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036d8:	2303      	movs	r3, #3
 80036da:	e004      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036dc:	2302      	movs	r3, #2
 80036de:	e002      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036e4:	2300      	movs	r3, #0
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	f002 0203 	and.w	r2, r2, #3
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	4093      	lsls	r3, r2
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036f6:	4937      	ldr	r1, [pc, #220]	@ (80037d4 <HAL_GPIO_Init+0x2dc>)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003704:	4b38      	ldr	r3, [pc, #224]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003728:	4a2f      	ldr	r2, [pc, #188]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800372e:	4b2e      	ldr	r3, [pc, #184]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003752:	4a25      	ldr	r2, [pc, #148]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003758:	4b23      	ldr	r3, [pc, #140]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800377c:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003782:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037a6:	4a10      	ldr	r2, [pc, #64]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f aea3 	bne.w	8003508 <HAL_GPIO_Init+0x10>
  }
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010000 	.word	0x40010000
 80037d8:	48000400 	.word	0x48000400
 80037dc:	48000800 	.word	0x48000800
 80037e0:	48000c00 	.word	0x48000c00
 80037e4:	48001000 	.word	0x48001000
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80037fa:	e0b8      	b.n	800396e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80037fc:	2201      	movs	r2, #1
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80ab 	beq.w	8003968 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003812:	4a5e      	ldr	r2, [pc, #376]	@ (800398c <HAL_GPIO_DeInit+0x1a0>)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800383a:	d019      	beq.n	8003870 <HAL_GPIO_DeInit+0x84>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a54      	ldr	r2, [pc, #336]	@ (8003990 <HAL_GPIO_DeInit+0x1a4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_GPIO_DeInit+0x80>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a53      	ldr	r2, [pc, #332]	@ (8003994 <HAL_GPIO_DeInit+0x1a8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00d      	beq.n	8003868 <HAL_GPIO_DeInit+0x7c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_GPIO_DeInit+0x1ac>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <HAL_GPIO_DeInit+0x78>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a51      	ldr	r2, [pc, #324]	@ (800399c <HAL_GPIO_DeInit+0x1b0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <HAL_GPIO_DeInit+0x74>
 800385c:	2304      	movs	r3, #4
 800385e:	e008      	b.n	8003872 <HAL_GPIO_DeInit+0x86>
 8003860:	2305      	movs	r3, #5
 8003862:	e006      	b.n	8003872 <HAL_GPIO_DeInit+0x86>
 8003864:	2303      	movs	r3, #3
 8003866:	e004      	b.n	8003872 <HAL_GPIO_DeInit+0x86>
 8003868:	2302      	movs	r3, #2
 800386a:	e002      	b.n	8003872 <HAL_GPIO_DeInit+0x86>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_GPIO_DeInit+0x86>
 8003870:	2300      	movs	r3, #0
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	f002 0203 	and.w	r2, r2, #3
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	4093      	lsls	r3, r2
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	429a      	cmp	r2, r3
 8003880:	d132      	bne.n	80038e8 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003882:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	43db      	mvns	r3, r3
 800388a:	4945      	ldr	r1, [pc, #276]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 800388c:	4013      	ands	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003890:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	4941      	ldr	r1, [pc, #260]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 800389a:	4013      	ands	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800389e:	4b40      	ldr	r3, [pc, #256]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	493e      	ldr	r1, [pc, #248]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038ac:	4b3c      	ldr	r3, [pc, #240]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	493a      	ldr	r1, [pc, #232]	@ (80039a0 <HAL_GPIO_DeInit+0x1b4>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038ca:	4a30      	ldr	r2, [pc, #192]	@ (800398c <HAL_GPIO_DeInit+0x1a0>)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	3302      	adds	r3, #2
 80038d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43da      	mvns	r2, r3
 80038da:	482c      	ldr	r0, [pc, #176]	@ (800398c <HAL_GPIO_DeInit+0x1a0>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	400a      	ands	r2, r1
 80038e2:	3302      	adds	r3, #2
 80038e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	2103      	movs	r1, #3
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	401a      	ands	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	08da      	lsrs	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3208      	adds	r2, #8
 8003906:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	08d2      	lsrs	r2, r2, #3
 800391e:	4019      	ands	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3208      	adds	r2, #8
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2103      	movs	r1, #3
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	401a      	ands	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	2101      	movs	r1, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	401a      	ands	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2103      	movs	r1, #3
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3301      	adds	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f af40 	bne.w	80037fc <HAL_GPIO_DeInit+0x10>
  }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	48000400 	.word	0x48000400
 8003994:	48000800 	.word	0x48000800
 8003998:	48000c00 	.word	0x48000c00
 800399c:	48001000 	.word	0x48001000
 80039a0:	40010400 	.word	0x40010400

080039a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
 80039b0:	4613      	mov	r3, r2
 80039b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b4:	787b      	ldrb	r3, [r7, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e08d      	b.n	8003b02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd ffd0 	bl	80019a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	@ 0x24
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	e006      	b.n	8003a5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d108      	bne.n	8003a76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	e007      	b.n	8003a86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1a      	ldr	r2, [r3, #32]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d138      	bne.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e032      	b.n	8003b94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2224      	movs	r2, #36	@ 0x24
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d139      	bne.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e033      	b.n	8003c2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	@ 0x24
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bf2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f001 b823 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 817d 	beq.w	8003f6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c74:	4bbc      	ldr	r3, [pc, #752]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d00c      	beq.n	8003c9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c80:	4bb9      	ldr	r3, [pc, #740]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d15c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x10e>
 8003c8c:	4bb6      	ldr	r3, [pc, #728]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c98:	d155      	bne.n	8003d46 <HAL_RCC_OscConfig+0x10e>
 8003c9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c9e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_RCC_OscConfig+0x94>
 8003cc6:	4ba8      	ldr	r3, [pc, #672]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	e015      	b.n	8003cf8 <HAL_RCC_OscConfig+0xc0>
 8003ccc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cd0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ce4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003ce8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003cf4:	4b9c      	ldr	r3, [pc, #624]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cfc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003d00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003d04:	fa92 f2a2 	rbit	r2, r2
 8003d08:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003d0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003d10:	fab2 f282 	clz	r2, r2
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	f042 0220 	orr.w	r2, r2, #32
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	f002 021f 	and.w	r2, r2, #31
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f202 	lsl.w	r2, r1, r2
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 811f 	beq.w	8003f6c <HAL_RCC_OscConfig+0x334>
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 8116 	bne.w	8003f6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f000 bfaf 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x12e>
 8003d58:	4b83      	ldr	r3, [pc, #524]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a82      	ldr	r2, [pc, #520]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e036      	b.n	8003dd4 <HAL_RCC_OscConfig+0x19c>
 8003d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x158>
 8003d76:	4b7c      	ldr	r3, [pc, #496]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7b      	ldr	r2, [pc, #492]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b79      	ldr	r3, [pc, #484]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a78      	ldr	r2, [pc, #480]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003d88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e021      	b.n	8003dd4 <HAL_RCC_OscConfig+0x19c>
 8003d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x184>
 8003da2:	4b71      	ldr	r3, [pc, #452]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a70      	ldr	r2, [pc, #448]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b6e      	ldr	r3, [pc, #440]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6d      	ldr	r2, [pc, #436]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x19c>
 8003dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a69      	ldr	r2, [pc, #420]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b67      	ldr	r3, [pc, #412]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a66      	ldr	r2, [pc, #408]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dd4:	4b64      	ldr	r3, [pc, #400]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	f023 020f 	bic.w	r2, r3, #15
 8003ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	495f      	ldr	r1, [pc, #380]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d059      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7fe f963 	bl	80020c8 <HAL_GetTick>
 8003e02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fe f95e 	bl	80020c8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b64      	cmp	r3, #100	@ 0x64
 8003e16:	d902      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	f000 bf43 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
 8003e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e22:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003e32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <HAL_RCC_OscConfig+0x218>
 8003e4a:	4b47      	ldr	r3, [pc, #284]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	e015      	b.n	8003e7c <HAL_RCC_OscConfig+0x244>
 8003e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e54:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e5c:	fa93 f3a3 	rbit	r3, r3
 8003e60:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003e64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e68:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003e6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003e78:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e80:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003e84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003e88:	fa92 f2a2 	rbit	r2, r2
 8003e8c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003e90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003e94:	fab2 f282 	clz	r2, r2
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	f042 0220 	orr.w	r2, r2, #32
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	f002 021f 	and.w	r2, r2, #31
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ab      	beq.n	8003e08 <HAL_RCC_OscConfig+0x1d0>
 8003eb0:	e05d      	b.n	8003f6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe f909 	bl	80020c8 <HAL_GetTick>
 8003eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe f904 	bl	80020c8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	@ 0x64
 8003eca:	d902      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	f000 bee9 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
 8003ed2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ed6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003ee6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2cc>
 8003efe:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e015      	b.n	8003f30 <HAL_RCC_OscConfig+0x2f8>
 8003f04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f08:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f1c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f24:	fa93 f3a3 	rbit	r3, r3
 8003f28:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f68 <HAL_RCC_OscConfig+0x330>)
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f34:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003f38:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f3c:	fa92 f2a2 	rbit	r2, r2
 8003f40:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003f44:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f042 0220 	orr.w	r2, r2, #32
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f002 021f 	and.w	r2, r2, #31
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ab      	bne.n	8003ebc <HAL_RCC_OscConfig+0x284>
 8003f64:	e003      	b.n	8003f6e <HAL_RCC_OscConfig+0x336>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 817d 	beq.w	800427e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f84:	4ba6      	ldr	r3, [pc, #664]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f90:	4ba3      	ldr	r3, [pc, #652]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d172      	bne.n	8004082 <HAL_RCC_OscConfig+0x44a>
 8003f9c:	4ba0      	ldr	r3, [pc, #640]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d16c      	bne.n	8004082 <HAL_RCC_OscConfig+0x44a>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003fba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	fab3 f383 	clz	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d102      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3a0>
 8003fd2:	4b93      	ldr	r3, [pc, #588]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	e013      	b.n	8004000 <HAL_RCC_OscConfig+0x3c8>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003fea:	2302      	movs	r3, #2
 8003fec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ff0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003ffc:	4b88      	ldr	r3, [pc, #544]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	2202      	movs	r2, #2
 8004002:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004006:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800400a:	fa92 f2a2 	rbit	r2, r2
 800400e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004012:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004016:	fab2 f282 	clz	r2, r2
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	f042 0220 	orr.w	r2, r2, #32
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	f002 021f 	and.w	r2, r2, #31
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f202 	lsl.w	r2, r1, r2
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCC_OscConfig+0x410>
 8004032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d002      	beq.n	8004048 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f000 be2e 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b75      	ldr	r3, [pc, #468]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004054:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	21f8      	movs	r1, #248	@ 0xf8
 800405e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004066:	fa91 f1a1 	rbit	r1, r1
 800406a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800406e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004072:	fab1 f181 	clz	r1, r1
 8004076:	b2c9      	uxtb	r1, r1
 8004078:	408b      	lsls	r3, r1
 800407a:	4969      	ldr	r1, [pc, #420]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004080:	e0fd      	b.n	800427e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004086:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8088 	beq.w	80041a4 <HAL_RCC_OscConfig+0x56c>
 8004094:	2301      	movs	r3, #1
 8004096:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80040a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	461a      	mov	r2, r3
 80040bc:	2301      	movs	r3, #1
 80040be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe f802 	bl	80020c8 <HAL_GetTick>
 80040c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fd fffd 	bl	80020c8 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d902      	bls.n	80040e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	f000 bde2 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
 80040e0:	2302      	movs	r3, #2
 80040e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80040f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d102      	bne.n	8004110 <HAL_RCC_OscConfig+0x4d8>
 800410a:	4b45      	ldr	r3, [pc, #276]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	e013      	b.n	8004138 <HAL_RCC_OscConfig+0x500>
 8004110:	2302      	movs	r3, #2
 8004112:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004122:	2302      	movs	r3, #2
 8004124:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004128:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004134:	4b3a      	ldr	r3, [pc, #232]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	2202      	movs	r2, #2
 800413a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800413e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004142:	fa92 f2a2 	rbit	r2, r2
 8004146:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800414a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800414e:	fab2 f282 	clz	r2, r2
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	f042 0220 	orr.w	r2, r2, #32
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	f002 021f 	and.w	r2, r2, #31
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0af      	beq.n	80040ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	21f8      	movs	r1, #248	@ 0xf8
 8004180:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004188:	fa91 f1a1 	rbit	r1, r1
 800418c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004190:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004194:	fab1 f181 	clz	r1, r1
 8004198:	b2c9      	uxtb	r1, r1
 800419a:	408b      	lsls	r3, r1
 800419c:	4920      	ldr	r1, [pc, #128]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
 80041a2:	e06c      	b.n	800427e <HAL_RCC_OscConfig+0x646>
 80041a4:	2301      	movs	r3, #1
 80041a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80041b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fd ff7a 	bl	80020c8 <HAL_GetTick>
 80041d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7fd ff75 	bl	80020c8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d902      	bls.n	80041f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	f000 bd5a 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
 80041f0:	2302      	movs	r3, #2
 80041f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004202:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d104      	bne.n	8004224 <HAL_RCC_OscConfig+0x5ec>
 800421a:	4b01      	ldr	r3, [pc, #4]	@ (8004220 <HAL_RCC_OscConfig+0x5e8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	e015      	b.n	800424c <HAL_RCC_OscConfig+0x614>
 8004220:	40021000 	.word	0x40021000
 8004224:	2302      	movs	r3, #2
 8004226:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004236:	2302      	movs	r3, #2
 8004238:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800423c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004248:	4bc8      	ldr	r3, [pc, #800]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	2202      	movs	r2, #2
 800424e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004252:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004256:	fa92 f2a2 	rbit	r2, r2
 800425a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800425e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004262:	fab2 f282 	clz	r2, r2
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f042 0220 	orr.w	r2, r2, #32
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f002 021f 	and.w	r2, r2, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ad      	bne.n	80041da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8110 	beq.w	80044b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004298:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d079      	beq.n	8004398 <HAL_RCC_OscConfig+0x760>
 80042a4:	2301      	movs	r3, #1
 80042a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80042b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	4bab      	ldr	r3, [pc, #684]	@ (8004570 <HAL_RCC_OscConfig+0x938>)
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	461a      	mov	r2, r3
 80042ca:	2301      	movs	r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ce:	f7fd fefb 	bl	80020c8 <HAL_GetTick>
 80042d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fd fef6 	bl	80020c8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d902      	bls.n	80042ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	f000 bcdb 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
 80042ee:	2302      	movs	r3, #2
 80042f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004304:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004308:	2202      	movs	r2, #2
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004310:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f2a3 	rbit	r2, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800432c:	2202      	movs	r2, #2
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	fa93 f2a3 	rbit	r2, r3
 800433e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004342:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004346:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004348:	4b88      	ldr	r3, [pc, #544]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 800434a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800434c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004350:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004354:	2102      	movs	r1, #2
 8004356:	6019      	str	r1, [r3, #0]
 8004358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	fa93 f1a3 	rbit	r1, r3
 8004366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800436e:	6019      	str	r1, [r3, #0]
  return result;
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0a0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x6a0>
 8004396:	e08d      	b.n	80044b4 <HAL_RCC_OscConfig+0x87c>
 8004398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	fa93 f2a3 	rbit	r2, r3
 80043b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043ba:	601a      	str	r2, [r3, #0]
  return result;
 80043bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b68      	ldr	r3, [pc, #416]	@ (8004570 <HAL_RCC_OscConfig+0x938>)
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	461a      	mov	r2, r3
 80043d6:	2300      	movs	r3, #0
 80043d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fd fe75 	bl	80020c8 <HAL_GetTick>
 80043de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd fe70 	bl	80020c8 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d902      	bls.n	80043fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	f000 bc55 	b.w	8004ca4 <HAL_RCC_OscConfig+0x106c>
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004402:	2202      	movs	r2, #2
 8004404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	fa93 f2a3 	rbit	r2, r3
 8004414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004418:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004422:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004426:	2202      	movs	r2, #2
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	fa93 f2a3 	rbit	r2, r3
 8004438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004446:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800444a:	2202      	movs	r2, #2
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004452:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	fa93 f2a3 	rbit	r2, r3
 800445c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004460:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004464:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004466:	4b41      	ldr	r3, [pc, #260]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 8004468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800446a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004472:	2102      	movs	r1, #2
 8004474:	6019      	str	r1, [r3, #0]
 8004476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	fa93 f1a3 	rbit	r1, r3
 8004484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004488:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800448c:	6019      	str	r1, [r3, #0]
  return result;
 800448e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004492:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	fab3 f383 	clz	r3, r3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2101      	movs	r1, #1
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d197      	bne.n	80043e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 81a1 	beq.w	800480c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d0:	4b26      	ldr	r3, [pc, #152]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d116      	bne.n	800450a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b23      	ldr	r3, [pc, #140]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	4a22      	ldr	r2, [pc, #136]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	61d3      	str	r3, [r2, #28]
 80044e8:	4b20      	ldr	r3, [pc, #128]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80044f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004502:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <HAL_RCC_OscConfig+0x93c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11a      	bne.n	800454c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b17      	ldr	r3, [pc, #92]	@ (8004574 <HAL_RCC_OscConfig+0x93c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a16      	ldr	r2, [pc, #88]	@ (8004574 <HAL_RCC_OscConfig+0x93c>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fd fdd1 	bl	80020c8 <HAL_GetTick>
 8004526:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	e009      	b.n	8004540 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452c:	f7fd fdcc 	bl	80020c8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b64      	cmp	r3, #100	@ 0x64
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e3b1      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <HAL_RCC_OscConfig+0x93c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ef      	beq.n	800452c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004550:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10d      	bne.n	8004578 <HAL_RCC_OscConfig+0x940>
 800455c:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a02      	ldr	r2, [pc, #8]	@ (800456c <HAL_RCC_OscConfig+0x934>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	e03c      	b.n	80045e4 <HAL_RCC_OscConfig+0x9ac>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	10908120 	.word	0x10908120
 8004574:	40007000 	.word	0x40007000
 8004578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x96a>
 8004588:	4bc1      	ldr	r3, [pc, #772]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4ac0      	ldr	r2, [pc, #768]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	4bbe      	ldr	r3, [pc, #760]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4abd      	ldr	r2, [pc, #756]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	e020      	b.n	80045e4 <HAL_RCC_OscConfig+0x9ac>
 80045a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x994>
 80045b2:	4bb7      	ldr	r3, [pc, #732]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4ab6      	ldr	r2, [pc, #728]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	4bb4      	ldr	r3, [pc, #720]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4ab3      	ldr	r2, [pc, #716]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x9ac>
 80045cc:	4bb0      	ldr	r3, [pc, #704]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4aaf      	ldr	r2, [pc, #700]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6213      	str	r3, [r2, #32]
 80045d8:	4bad      	ldr	r3, [pc, #692]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4aac      	ldr	r2, [pc, #688]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8081 	beq.w	80046f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fd fd67 	bl	80020c8 <HAL_GetTick>
 80045fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fd fd62 	bl	80020c8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e345      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
 8004618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004620:	2202      	movs	r2, #2
 8004622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004628:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	fa93 f2a3 	rbit	r2, r3
 8004632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004636:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004640:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004644:	2202      	movs	r2, #2
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	fa93 f2a3 	rbit	r2, r3
 8004656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800465e:	601a      	str	r2, [r3, #0]
  return result;
 8004660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004664:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004668:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d102      	bne.n	8004684 <HAL_RCC_OscConfig+0xa4c>
 800467e:	4b84      	ldr	r3, [pc, #528]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	e013      	b.n	80046ac <HAL_RCC_OscConfig+0xa74>
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800468c:	2202      	movs	r2, #2
 800468e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004694:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	fa93 f2a3 	rbit	r2, r3
 800469e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	4b79      	ldr	r3, [pc, #484]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046b4:	2102      	movs	r1, #2
 80046b6:	6011      	str	r1, [r2, #0]
 80046b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	fa92 f1a2 	rbit	r1, r2
 80046c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046ce:	6011      	str	r1, [r2, #0]
  return result;
 80046d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	fab2 f282 	clz	r2, r2
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	f002 021f 	and.w	r2, r2, #31
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d084      	beq.n	8004600 <HAL_RCC_OscConfig+0x9c8>
 80046f6:	e07f      	b.n	80047f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f8:	f7fd fce6 	bl	80020c8 <HAL_GetTick>
 80046fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004700:	e00b      	b.n	800471a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fd fce1 	bl	80020c8 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e2c4      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
 800471a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004722:	2202      	movs	r2, #2
 8004724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	fa93 f2a3 	rbit	r2, r3
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004742:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004746:	2202      	movs	r2, #2
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	fa93 f2a3 	rbit	r2, r3
 8004758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004760:	601a      	str	r2, [r3, #0]
  return result;
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800476a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d102      	bne.n	8004786 <HAL_RCC_OscConfig+0xb4e>
 8004780:	4b43      	ldr	r3, [pc, #268]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	e013      	b.n	80047ae <HAL_RCC_OscConfig+0xb76>
 8004786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800478e:	2202      	movs	r2, #2
 8004790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004796:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa93 f2a3 	rbit	r2, r3
 80047a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047b2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047b6:	2102      	movs	r1, #2
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	fa92 f1a2 	rbit	r1, r2
 80047c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047d0:	6011      	str	r1, [r2, #0]
  return result;
 80047d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047d6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	fab2 f282 	clz	r2, r2
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f002 021f 	and.w	r2, r2, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d184      	bne.n	8004702 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d105      	bne.n	800480c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004800:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	4a22      	ldr	r2, [pc, #136]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 8004806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800480a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8242 	beq.w	8004ca2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800481e:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <HAL_RCC_OscConfig+0xc58>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b08      	cmp	r3, #8
 8004828:	f000 8213 	beq.w	8004c52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004830:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f040 8162 	bne.w	8004b02 <HAL_RCC_OscConfig+0xeca>
 800483e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004842:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004846:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800484a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004850:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	fa93 f2a3 	rbit	r2, r3
 800485a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004862:	601a      	str	r2, [r3, #0]
  return result;
 8004864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004868:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800486c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004878:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	461a      	mov	r2, r3
 8004880:	2300      	movs	r3, #0
 8004882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fd fc20 	bl	80020c8 <HAL_GetTick>
 8004888:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488c:	e00c      	b.n	80048a8 <HAL_RCC_OscConfig+0xc70>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fd fc18 	bl	80020c8 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1fd      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
 80048a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	fa93 f2a3 	rbit	r2, r3
 80048c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048cc:	601a      	str	r2, [r3, #0]
  return result;
 80048ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d8:	fab3 f383 	clz	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_OscConfig+0xcba>
 80048ec:	4bb0      	ldr	r3, [pc, #704]	@ (8004bb0 <HAL_RCC_OscConfig+0xf78>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	e027      	b.n	8004942 <HAL_RCC_OscConfig+0xd0a>
 80048f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80048fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004904:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	fa93 f2a3 	rbit	r2, r3
 800490e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004912:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004920:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	fa93 f2a3 	rbit	r2, r3
 8004934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004938:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb0 <HAL_RCC_OscConfig+0xf78>)
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004946:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800494a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800494e:	6011      	str	r1, [r2, #0]
 8004950:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004954:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	fa92 f1a2 	rbit	r1, r2
 800495e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004962:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004966:	6011      	str	r1, [r2, #0]
  return result;
 8004968:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800496c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	fab2 f282 	clz	r2, r2
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	f042 0220 	orr.w	r2, r2, #32
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	f002 021f 	and.w	r2, r2, #31
 8004982:	2101      	movs	r1, #1
 8004984:	fa01 f202 	lsl.w	r2, r1, r2
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d182      	bne.n	8004894 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800498e:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_OscConfig+0xf78>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80049a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	497f      	ldr	r1, [pc, #508]	@ (8004bb0 <HAL_RCC_OscConfig+0xf78>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049da:	601a      	str	r2, [r3, #0]
  return result;
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80049f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	461a      	mov	r2, r3
 80049f8:	2301      	movs	r3, #1
 80049fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fd fb64 	bl	80020c8 <HAL_GetTick>
 8004a00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a04:	e009      	b.n	8004a1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fd fb5f 	bl	80020c8 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e144      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
 8004a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a2c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fa93 f2a3 	rbit	r2, r3
 8004a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a3e:	601a      	str	r2, [r3, #0]
  return result;
 8004a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a44:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCC_OscConfig+0xe2c>
 8004a5e:	4b54      	ldr	r3, [pc, #336]	@ (8004bb0 <HAL_RCC_OscConfig+0xf78>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	e027      	b.n	8004ab4 <HAL_RCC_OscConfig+0xe7c>
 8004a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a68:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a76:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	fa93 f2a3 	rbit	r2, r3
 8004a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a8e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	fa93 f2a3 	rbit	r2, r3
 8004aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aaa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb0 <HAL_RCC_OscConfig+0xf78>)
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ab8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004abc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ac0:	6011      	str	r1, [r2, #0]
 8004ac2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	fa92 f1a2 	rbit	r1, r2
 8004ad0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ad4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ad8:	6011      	str	r1, [r2, #0]
  return result;
 8004ada:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ade:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	fab2 f282 	clz	r2, r2
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f042 0220 	orr.w	r2, r2, #32
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	f002 021f 	and.w	r2, r2, #31
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f202 	lsl.w	r2, r1, r2
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d082      	beq.n	8004a06 <HAL_RCC_OscConfig+0xdce>
 8004b00:	e0cf      	b.n	8004ca2 <HAL_RCC_OscConfig+0x106a>
 8004b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b06:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b14:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	fa93 f2a3 	rbit	r2, r3
 8004b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b22:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b26:	601a      	str	r2, [r3, #0]
  return result;
 8004b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd fabe 	bl	80020c8 <HAL_GetTick>
 8004b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b50:	e009      	b.n	8004b66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b52:	f7fd fab9 	bl	80020c8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e09e      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
 8004b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b78:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	fa93 f2a3 	rbit	r2, r3
 8004b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b86:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b8a:	601a      	str	r2, [r3, #0]
  return result;
 8004b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b90:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d104      	bne.n	8004bb4 <HAL_RCC_OscConfig+0xf7c>
 8004baa:	4b01      	ldr	r3, [pc, #4]	@ (8004bb0 <HAL_RCC_OscConfig+0xf78>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	e029      	b.n	8004c04 <HAL_RCC_OscConfig+0xfcc>
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bde:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004be2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	fa93 f2a3 	rbit	r2, r3
 8004bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bfa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb0 <HAL_RCC_OscConfig+0x1078>)
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c08:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c16:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	fa92 f1a2 	rbit	r1, r2
 8004c20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c24:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c28:	6011      	str	r1, [r2, #0]
  return result;
 8004c2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c2e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	fab2 f282 	clz	r2, r2
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	f042 0220 	orr.w	r2, r2, #32
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	f002 021f 	and.w	r2, r2, #31
 8004c44:	2101      	movs	r1, #1
 8004c46:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d180      	bne.n	8004b52 <HAL_RCC_OscConfig+0xf1a>
 8004c50:	e027      	b.n	8004ca2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e01e      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c66:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <HAL_RCC_OscConfig+0x1078>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c72:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10b      	bne.n	8004c9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b09e      	sub	sp, #120	@ 0x78
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e162      	b.n	8004f92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b90      	ldr	r3, [pc, #576]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d910      	bls.n	8004cfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cda:	4b8d      	ldr	r3, [pc, #564]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 0207 	bic.w	r2, r3, #7
 8004ce2:	498b      	ldr	r1, [pc, #556]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b89      	ldr	r3, [pc, #548]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e14a      	b.n	8004f92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b82      	ldr	r3, [pc, #520]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	497f      	ldr	r1, [pc, #508]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80dc 	beq.w	8004ee0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d13c      	bne.n	8004daa <HAL_RCC_ClockConfig+0xf6>
 8004d30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d40:	fab3 f383 	clz	r3, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d102      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xa6>
 8004d54:	4b6f      	ldr	r3, [pc, #444]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	e00f      	b.n	8004d7a <HAL_RCC_ClockConfig+0xc6>
 8004d5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d76:	4b67      	ldr	r3, [pc, #412]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d82:	fa92 f2a2 	rbit	r2, r2
 8004d86:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004d88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d8a:	fab2 f282 	clz	r2, r2
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	f042 0220 	orr.w	r2, r2, #32
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f002 021f 	and.w	r2, r2, #31
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d17b      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0f3      	b.n	8004f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d13c      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x178>
 8004db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc2:	fab3 f383 	clz	r3, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d102      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x128>
 8004dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	e00f      	b.n	8004dfc <HAL_RCC_ClockConfig+0x148>
 8004ddc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004de4:	fa93 f3a3 	rbit	r3, r3
 8004de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8004df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004df8:	4b46      	ldr	r3, [pc, #280]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e00:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e04:	fa92 f2a2 	rbit	r2, r2
 8004e08:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004e0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e0c:	fab2 f282 	clz	r2, r2
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	f042 0220 	orr.w	r2, r2, #32
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	f002 021f 	and.w	r2, r2, #31
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d13a      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0b2      	b.n	8004f92 <HAL_RCC_ClockConfig+0x2de>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x1a0>
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	e00d      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1bc>
 8004e54:	2302      	movs	r3, #2
 8004e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e60:	2302      	movs	r3, #2
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	fa93 f3a3 	rbit	r3, r3
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	4b29      	ldr	r3, [pc, #164]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	2202      	movs	r2, #2
 8004e72:	61ba      	str	r2, [r7, #24]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	fa92 f2a2 	rbit	r2, r2
 8004e7a:	617a      	str	r2, [r7, #20]
  return result;
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	fab2 f282 	clz	r2, r2
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	f042 0220 	orr.w	r2, r2, #32
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	f002 021f 	and.w	r2, r2, #31
 8004e8e:	2101      	movs	r1, #1
 8004e90:	fa01 f202 	lsl.w	r2, r1, r2
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e079      	b.n	8004f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	491a      	ldr	r1, [pc, #104]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb0:	f7fd f90a 	bl	80020c8 <HAL_GetTick>
 8004eb4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb8:	f7fd f906 	bl	80020c8 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e061      	b.n	8004f92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 020c 	and.w	r2, r3, #12
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d1eb      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d214      	bcs.n	8004f18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 0207 	bic.w	r2, r3, #7
 8004ef6:	4906      	ldr	r1, [pc, #24]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e040      	b.n	8004f92 <HAL_RCC_ClockConfig+0x2de>
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f24:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <HAL_RCC_ClockConfig+0x2e8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	491a      	ldr	r1, [pc, #104]	@ (8004f9c <HAL_RCC_ClockConfig+0x2e8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f42:	4b16      	ldr	r3, [pc, #88]	@ (8004f9c <HAL_RCC_ClockConfig+0x2e8>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4912      	ldr	r1, [pc, #72]	@ (8004f9c <HAL_RCC_ClockConfig+0x2e8>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f56:	f000 f829 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <HAL_RCC_ClockConfig+0x2e8>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f64:	22f0      	movs	r2, #240	@ 0xf0
 8004f66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	fa92 f2a2 	rbit	r2, r2
 8004f6e:	60fa      	str	r2, [r7, #12]
  return result;
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	fab2 f282 	clz	r2, r2
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	40d3      	lsrs	r3, r2
 8004f7a:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <HAL_RCC_ClockConfig+0x2ec>)
 8004f7c:	5cd3      	ldrb	r3, [r2, r3]
 8004f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f82:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <HAL_RCC_ClockConfig+0x2f0>)
 8004f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f86:	4b08      	ldr	r3, [pc, #32]	@ (8004fa8 <HAL_RCC_ClockConfig+0x2f4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd f858 	bl	8002040 <HAL_InitTick>
  
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3778      	adds	r7, #120	@ 0x78
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	08008c4c 	.word	0x08008c4c
 8004fa4:	20000008 	.word	0x20000008
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005040 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x30>
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x36>
 8004fda:	e026      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fdc:	4b19      	ldr	r3, [pc, #100]	@ (8005044 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fde:	613b      	str	r3, [r7, #16]
      break;
 8004fe0:	e026      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	0c9b      	lsrs	r3, r3, #18
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fec:	5cd3      	ldrb	r3, [r2, r3]
 8004fee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ff0:	4b13      	ldr	r3, [pc, #76]	@ (8005040 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005008:	4a0e      	ldr	r2, [pc, #56]	@ (8005044 <HAL_RCC_GetSysClockFreq+0x98>)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	e004      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a0c      	ldr	r2, [pc, #48]	@ (8005050 <HAL_RCC_GetSysClockFreq+0xa4>)
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	613b      	str	r3, [r7, #16]
      break;
 8005028:	e002      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800502a:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <HAL_RCC_GetSysClockFreq+0xa8>)
 800502c:	613b      	str	r3, [r7, #16]
      break;
 800502e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005030:	693b      	ldr	r3, [r7, #16]
}
 8005032:	4618      	mov	r0, r3
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	00f42400 	.word	0x00f42400
 8005048:	08008c64 	.word	0x08008c64
 800504c:	08008c74 	.word	0x08008c74
 8005050:	003d0900 	.word	0x003d0900
 8005054:	007a1200 	.word	0x007a1200

08005058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800505c:	4b03      	ldr	r3, [pc, #12]	@ (800506c <HAL_RCC_GetHCLKFreq+0x14>)
 800505e:	681b      	ldr	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000008 	.word	0x20000008

08005070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005076:	f7ff ffef 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 800507a:	4601      	mov	r1, r0
 800507c:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005084:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005088:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	fa92 f2a2 	rbit	r2, r2
 8005090:	603a      	str	r2, [r7, #0]
  return result;
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	fab2 f282 	clz	r2, r2
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	40d3      	lsrs	r3, r2
 800509c:	4a04      	ldr	r2, [pc, #16]	@ (80050b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800509e:	5cd3      	ldrb	r3, [r2, r3]
 80050a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	08008c5c 	.word	0x08008c5c

080050b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80050ba:	f7ff ffcd 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 80050be:	4601      	mov	r1, r0
 80050c0:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80050c8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80050cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	fa92 f2a2 	rbit	r2, r2
 80050d4:	603a      	str	r2, [r7, #0]
  return result;
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	fab2 f282 	clz	r2, r2
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	40d3      	lsrs	r3, r2
 80050e0:	4a04      	ldr	r2, [pc, #16]	@ (80050f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40021000 	.word	0x40021000
 80050f4:	08008c5c 	.word	0x08008c5c

080050f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b092      	sub	sp, #72	@ 0x48
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80d4 	beq.w	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800511c:	4b4e      	ldr	r3, [pc, #312]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10e      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005128:	4b4b      	ldr	r3, [pc, #300]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	4a4a      	ldr	r2, [pc, #296]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005132:	61d3      	str	r3, [r2, #28]
 8005134:	4b48      	ldr	r3, [pc, #288]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005146:	4b45      	ldr	r3, [pc, #276]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d118      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005152:	4b42      	ldr	r3, [pc, #264]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a41      	ldr	r2, [pc, #260]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800515e:	f7fc ffb3 	bl	80020c8 <HAL_GetTick>
 8005162:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005164:	e008      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005166:	f7fc ffaf 	bl	80020c8 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b64      	cmp	r3, #100	@ 0x64
 8005172:	d901      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e169      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005178:	4b38      	ldr	r3, [pc, #224]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005184:	4b34      	ldr	r3, [pc, #208]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800518e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8084 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d07c      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80051bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	4b26      	ldr	r3, [pc, #152]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	461a      	mov	r2, r3
 80051ce:	2301      	movs	r3, #1
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	fa93 f3a3 	rbit	r3, r3
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80051e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	461a      	mov	r2, r3
 80051f2:	2300      	movs	r3, #0
 80051f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051f6:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d04b      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005206:	f7fc ff5f 	bl	80020c8 <HAL_GetTick>
 800520a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fc ff5b 	bl	80020c8 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e113      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005224:	2302      	movs	r3, #2
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005230:	2302      	movs	r3, #2
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	61fb      	str	r3, [r7, #28]
  return result;
 800523c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f043 0302 	orr.w	r3, r3, #2
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d108      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005252:	4b01      	ldr	r3, [pc, #4]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	e00d      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
 8005260:	10908100 	.word	0x10908100
 8005264:	2302      	movs	r3, #2
 8005266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	4b78      	ldr	r3, [pc, #480]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	2202      	movs	r2, #2
 8005276:	613a      	str	r2, [r7, #16]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	fa92 f2a2 	rbit	r2, r2
 800527e:	60fa      	str	r2, [r7, #12]
  return result;
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	fab2 f282 	clz	r2, r2
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	f002 021f 	and.w	r2, r2, #31
 8005292:	2101      	movs	r1, #1
 8005294:	fa01 f202 	lsl.w	r2, r1, r2
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0b7      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800529e:	4b6d      	ldr	r3, [pc, #436]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	496a      	ldr	r1, [pc, #424]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d105      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b8:	4b66      	ldr	r3, [pc, #408]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	4a65      	ldr	r2, [pc, #404]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d0:	4b60      	ldr	r3, [pc, #384]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	f023 0203 	bic.w	r2, r3, #3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	495d      	ldr	r1, [pc, #372]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d008      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ee:	4b59      	ldr	r3, [pc, #356]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4956      	ldr	r1, [pc, #344]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800530c:	4b51      	ldr	r3, [pc, #324]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	494e      	ldr	r1, [pc, #312]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800531a:	4313      	orrs	r3, r2
 800531c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800532a:	4b4a      	ldr	r3, [pc, #296]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	f023 0210 	bic.w	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4947      	ldr	r1, [pc, #284]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005348:	4b42      	ldr	r3, [pc, #264]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	493f      	ldr	r1, [pc, #252]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005366:	4b3b      	ldr	r3, [pc, #236]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	f023 0220 	bic.w	r2, r3, #32
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4938      	ldr	r1, [pc, #224]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005384:	4b33      	ldr	r3, [pc, #204]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	4930      	ldr	r1, [pc, #192]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	4929      	ldr	r1, [pc, #164]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053c0:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	4921      	ldr	r1, [pc, #132]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053de:	4b1d      	ldr	r3, [pc, #116]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	491a      	ldr	r1, [pc, #104]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80053fc:	4b15      	ldr	r3, [pc, #84]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	4912      	ldr	r1, [pc, #72]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800540a:	4313      	orrs	r3, r2
 800540c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800541a:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	490b      	ldr	r1, [pc, #44]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005428:	4313      	orrs	r3, r2
 800542a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005438:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005444:	4903      	ldr	r1, [pc, #12]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3748      	adds	r7, #72	@ 0x48
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000

08005458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e09d      	b.n	80055a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	2b00      	cmp	r3, #0
 8005470:	d108      	bne.n	8005484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800547a:	d009      	beq.n	8005490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	61da      	str	r2, [r3, #28]
 8005482:	e005      	b.n	8005490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc fabc 	bl	8001a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054d0:	d902      	bls.n	80054d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e002      	b.n	80054de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80054e6:	d007      	beq.n	80054f8 <HAL_SPI_Init+0xa0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	ea42 0103 	orr.w	r1, r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	f003 0204 	and.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005574:	ea42 0103 	orr.w	r1, r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e049      	b.n	8005654 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d106      	bne.n	80055da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fc fa6b 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f001 f80d 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e04a      	b.n	800570a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a21      	ldr	r2, [pc, #132]	@ (8005718 <HAL_TIM_Base_Start_IT+0xbc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d018      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569e:	d013      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x6c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	@ (800571c <HAL_TIM_Base_Start_IT+0xc0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x6c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005720 <HAL_TIM_Base_Start_IT+0xc4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d009      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x6c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005724 <HAL_TIM_Base_Start_IT+0xc8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x6c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a19      	ldr	r2, [pc, #100]	@ (8005728 <HAL_TIM_Base_Start_IT+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d115      	bne.n	80056f4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	4b17      	ldr	r3, [pc, #92]	@ (800572c <HAL_TIM_Base_Start_IT+0xd0>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b06      	cmp	r3, #6
 80056d8:	d015      	beq.n	8005706 <HAL_TIM_Base_Start_IT+0xaa>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e0:	d011      	beq.n	8005706 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	e008      	b.n	8005706 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e000      	b.n	8005708 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40013400 	.word	0x40013400
 8005728:	40014000 	.word	0x40014000
 800572c:	00010007 	.word	0x00010007

08005730 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10f      	bne.n	8005778 <HAL_TIM_Base_Stop_IT+0x48>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d107      	bne.n	8005778 <HAL_TIM_Base_Stop_IT+0x48>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e049      	b.n	8005834 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f841 	bl	800583c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f000 ff1d 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x24>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e03c      	b.n	80058ee <HAL_TIM_PWM_Start+0x9e>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b04      	cmp	r3, #4
 8005878:	d109      	bne.n	800588e <HAL_TIM_PWM_Start+0x3e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	bf14      	ite	ne
 8005886:	2301      	movne	r3, #1
 8005888:	2300      	moveq	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	e02f      	b.n	80058ee <HAL_TIM_PWM_Start+0x9e>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d109      	bne.n	80058a8 <HAL_TIM_PWM_Start+0x58>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e022      	b.n	80058ee <HAL_TIM_PWM_Start+0x9e>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b0c      	cmp	r3, #12
 80058ac:	d109      	bne.n	80058c2 <HAL_TIM_PWM_Start+0x72>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	bf14      	ite	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	2300      	moveq	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	e015      	b.n	80058ee <HAL_TIM_PWM_Start+0x9e>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d109      	bne.n	80058dc <HAL_TIM_PWM_Start+0x8c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	bf14      	ite	ne
 80058d4:	2301      	movne	r3, #1
 80058d6:	2300      	moveq	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	e008      	b.n	80058ee <HAL_TIM_PWM_Start+0x9e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e097      	b.n	8005a26 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_TIM_PWM_Start+0xb6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005904:	e023      	b.n	800594e <HAL_TIM_PWM_Start+0xfe>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b04      	cmp	r3, #4
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start+0xc6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005914:	e01b      	b.n	800594e <HAL_TIM_PWM_Start+0xfe>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b08      	cmp	r3, #8
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0xd6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005924:	e013      	b.n	800594e <HAL_TIM_PWM_Start+0xfe>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xe6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005934:	e00b      	b.n	800594e <HAL_TIM_PWM_Start+0xfe>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b10      	cmp	r3, #16
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0xf6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005944:	e003      	b.n	800594e <HAL_TIM_PWM_Start+0xfe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f001 fb82 	bl	8007060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a33      	ldr	r2, [pc, #204]	@ (8005a30 <HAL_TIM_PWM_Start+0x1e0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_TIM_PWM_Start+0x13e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a32      	ldr	r2, [pc, #200]	@ (8005a34 <HAL_TIM_PWM_Start+0x1e4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_TIM_PWM_Start+0x13e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a30      	ldr	r2, [pc, #192]	@ (8005a38 <HAL_TIM_PWM_Start+0x1e8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_TIM_PWM_Start+0x13e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a3c <HAL_TIM_PWM_Start+0x1ec>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_TIM_PWM_Start+0x13e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a2d      	ldr	r2, [pc, #180]	@ (8005a40 <HAL_TIM_PWM_Start+0x1f0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <HAL_TIM_PWM_Start+0x142>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_TIM_PWM_Start+0x144>
 8005992:	2300      	movs	r3, #0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a20      	ldr	r2, [pc, #128]	@ (8005a30 <HAL_TIM_PWM_Start+0x1e0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <HAL_TIM_PWM_Start+0x194>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ba:	d013      	beq.n	80059e4 <HAL_TIM_PWM_Start+0x194>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a20      	ldr	r2, [pc, #128]	@ (8005a44 <HAL_TIM_PWM_Start+0x1f4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00e      	beq.n	80059e4 <HAL_TIM_PWM_Start+0x194>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005a48 <HAL_TIM_PWM_Start+0x1f8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_TIM_PWM_Start+0x194>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <HAL_TIM_PWM_Start+0x1e4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_TIM_PWM_Start+0x194>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <HAL_TIM_PWM_Start+0x1e8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d115      	bne.n	8005a10 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	4b18      	ldr	r3, [pc, #96]	@ (8005a4c <HAL_TIM_PWM_Start+0x1fc>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b06      	cmp	r3, #6
 80059f4:	d015      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x1d2>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059fc:	d011      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	e008      	b.n	8005a22 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e000      	b.n	8005a24 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40013400 	.word	0x40013400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	00010007 	.word	0x00010007

08005a50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fafc 	bl	8007060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b68 <HAL_TIM_PWM_Stop+0x118>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_TIM_PWM_Stop+0x4a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3d      	ldr	r2, [pc, #244]	@ (8005b6c <HAL_TIM_PWM_Stop+0x11c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00e      	beq.n	8005a9a <HAL_TIM_PWM_Stop+0x4a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a3b      	ldr	r2, [pc, #236]	@ (8005b70 <HAL_TIM_PWM_Stop+0x120>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_TIM_PWM_Stop+0x4a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8005b74 <HAL_TIM_PWM_Stop+0x124>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_TIM_PWM_Stop+0x4a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a38      	ldr	r2, [pc, #224]	@ (8005b78 <HAL_TIM_PWM_Stop+0x128>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_PWM_Stop+0x4e>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <HAL_TIM_PWM_Stop+0x50>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_TIM_PWM_Stop+0x84>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1a      	ldr	r2, [r3, #32]
 8005aba:	f240 4344 	movw	r3, #1092	@ 0x444
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <HAL_TIM_PWM_Stop+0x84>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10f      	bne.n	8005b04 <HAL_TIM_PWM_Stop+0xb4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	f240 4344 	movw	r3, #1092	@ 0x444
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <HAL_TIM_PWM_Stop+0xb4>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <HAL_TIM_PWM_Stop+0xc4>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b12:	e023      	b.n	8005b5c <HAL_TIM_PWM_Stop+0x10c>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d104      	bne.n	8005b24 <HAL_TIM_PWM_Stop+0xd4>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b22:	e01b      	b.n	8005b5c <HAL_TIM_PWM_Stop+0x10c>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d104      	bne.n	8005b34 <HAL_TIM_PWM_Stop+0xe4>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b32:	e013      	b.n	8005b5c <HAL_TIM_PWM_Stop+0x10c>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_PWM_Stop+0xf4>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b42:	e00b      	b.n	8005b5c <HAL_TIM_PWM_Stop+0x10c>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d104      	bne.n	8005b54 <HAL_TIM_PWM_Stop+0x104>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b52:	e003      	b.n	8005b5c <HAL_TIM_PWM_Stop+0x10c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e049      	b.n	8005c22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f841 	bl	8005c2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 fd26 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_IC_Start_IT+0x1e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	e023      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x66>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_IC_Start_IT+0x2e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	e01b      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x66>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_IC_Start_IT+0x3e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	e013      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x66>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_IC_Start_IT+0x4e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	e00b      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x66>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_IC_Start_IT+0x5e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	e003      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x66>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_TIM_IC_Start_IT+0x78>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e013      	b.n	8005ce0 <HAL_TIM_IC_Start_IT+0xa0>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d104      	bne.n	8005cc8 <HAL_TIM_IC_Start_IT+0x88>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	e00b      	b.n	8005ce0 <HAL_TIM_IC_Start_IT+0xa0>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d104      	bne.n	8005cd8 <HAL_TIM_IC_Start_IT+0x98>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e003      	b.n	8005ce0 <HAL_TIM_IC_Start_IT+0xa0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce2:	7bbb      	ldrb	r3, [r7, #14]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce8:	7b7b      	ldrb	r3, [r7, #13]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0d8      	b.n	8005ea4 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_IC_Start_IT+0xc2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d00:	e023      	b.n	8005d4a <HAL_TIM_IC_Start_IT+0x10a>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_IC_Start_IT+0xd2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d10:	e01b      	b.n	8005d4a <HAL_TIM_IC_Start_IT+0x10a>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_IC_Start_IT+0xe2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d20:	e013      	b.n	8005d4a <HAL_TIM_IC_Start_IT+0x10a>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_IC_Start_IT+0xf2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d30:	e00b      	b.n	8005d4a <HAL_TIM_IC_Start_IT+0x10a>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_IC_Start_IT+0x102>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d40:	e003      	b.n	8005d4a <HAL_TIM_IC_Start_IT+0x10a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_IC_Start_IT+0x11a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d58:	e013      	b.n	8005d82 <HAL_TIM_IC_Start_IT+0x142>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_IC_Start_IT+0x12a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d68:	e00b      	b.n	8005d82 <HAL_TIM_IC_Start_IT+0x142>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d104      	bne.n	8005d7a <HAL_TIM_IC_Start_IT+0x13a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d78:	e003      	b.n	8005d82 <HAL_TIM_IC_Start_IT+0x142>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d841      	bhi.n	8005e0c <HAL_TIM_IC_Start_IT+0x1cc>
 8005d88:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <HAL_TIM_IC_Start_IT+0x150>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005e0d 	.word	0x08005e0d
 8005d98:	08005e0d 	.word	0x08005e0d
 8005d9c:	08005e0d 	.word	0x08005e0d
 8005da0:	08005dd7 	.word	0x08005dd7
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005e0d 	.word	0x08005e0d
 8005dac:	08005e0d 	.word	0x08005e0d
 8005db0:	08005de9 	.word	0x08005de9
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005e0d 	.word	0x08005e0d
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005dfb 	.word	0x08005dfb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0202 	orr.w	r2, r2, #2
 8005dd2:	60da      	str	r2, [r3, #12]
      break;
 8005dd4:	e01d      	b.n	8005e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0204 	orr.w	r2, r2, #4
 8005de4:	60da      	str	r2, [r3, #12]
      break;
 8005de6:	e014      	b.n	8005e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0208 	orr.w	r2, r2, #8
 8005df6:	60da      	str	r2, [r3, #12]
      break;
 8005df8:	e00b      	b.n	8005e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0210 	orr.w	r2, r2, #16
 8005e08:	60da      	str	r2, [r3, #12]
      break;
 8005e0a:	e002      	b.n	8005e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e10:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d144      	bne.n	8005ea2 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 f91d 	bl	8007060 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a20      	ldr	r2, [pc, #128]	@ (8005eac <HAL_TIM_IC_Start_IT+0x26c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d018      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x222>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e38:	d013      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x222>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb0 <HAL_TIM_IC_Start_IT+0x270>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x222>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1a      	ldr	r2, [pc, #104]	@ (8005eb4 <HAL_TIM_IC_Start_IT+0x274>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x222>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a19      	ldr	r2, [pc, #100]	@ (8005eb8 <HAL_TIM_IC_Start_IT+0x278>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x222>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a17      	ldr	r2, [pc, #92]	@ (8005ebc <HAL_TIM_IC_Start_IT+0x27c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d115      	bne.n	8005e8e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	4b15      	ldr	r3, [pc, #84]	@ (8005ec0 <HAL_TIM_IC_Start_IT+0x280>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b06      	cmp	r3, #6
 8005e72:	d015      	beq.n	8005ea0 <HAL_TIM_IC_Start_IT+0x260>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7a:	d011      	beq.n	8005ea0 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8c:	e008      	b.n	8005ea0 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0201 	orr.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e000      	b.n	8005ea2 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40013400 	.word	0x40013400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	00010007 	.word	0x00010007

08005ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d020      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01b      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0202 	mvn.w	r2, #2
 8005ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fb f80c 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
 8005f14:	e005      	b.n	8005f22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fb59 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fb60 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d020      	beq.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01b      	beq.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0204 	mvn.w	r2, #4
 8005f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fa ffe6 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fb33 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fb3a 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d020      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0208 	mvn.w	r2, #8
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2204      	movs	r2, #4
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fa ffc0 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fb0d 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fb14 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d020      	beq.n	800600c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01b      	beq.n	800600c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0210 	mvn.w	r2, #16
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fa ff9a 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fae7 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 faee 	bl	80065e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0201 	mvn.w	r2, #1
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fac5 	bl	80065ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 fa46 	bl	80074e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 fa3e 	bl	80074f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 faad 	bl	80065f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00c      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0220 	mvn.w	r2, #32
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fa06 	bl	80074cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e088      	b.n	80061f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d11b      	bne.n	800612c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006104:	f000 fdf4 	bl	8006cf0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 020c 	bic.w	r2, r2, #12
 8006116:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	619a      	str	r2, [r3, #24]
 800612a:	e060      	b.n	80061ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b04      	cmp	r3, #4
 8006130:	d11c      	bne.n	800616c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006142:	f000 fe6c 	bl	8006e1e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006154:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6999      	ldr	r1, [r3, #24]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	021a      	lsls	r2, r3, #8
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	619a      	str	r2, [r3, #24]
 800616a:	e040      	b.n	80061ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b08      	cmp	r3, #8
 8006170:	d11b      	bne.n	80061aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006182:	f000 feb9 	bl	8006ef8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 020c 	bic.w	r2, r2, #12
 8006194:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69d9      	ldr	r1, [r3, #28]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	61da      	str	r2, [r3, #28]
 80061a8:	e021      	b.n	80061ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	d11c      	bne.n	80061ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80061c0:	f000 fed6 	bl	8006f70 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80061d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69d9      	ldr	r1, [r3, #28]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	61da      	str	r2, [r3, #28]
 80061e8:	e001      	b.n	80061ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800621a:	2302      	movs	r3, #2
 800621c:	e0ff      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b14      	cmp	r3, #20
 800622a:	f200 80f0 	bhi.w	800640e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800622e:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006289 	.word	0x08006289
 8006238:	0800640f 	.word	0x0800640f
 800623c:	0800640f 	.word	0x0800640f
 8006240:	0800640f 	.word	0x0800640f
 8006244:	080062c9 	.word	0x080062c9
 8006248:	0800640f 	.word	0x0800640f
 800624c:	0800640f 	.word	0x0800640f
 8006250:	0800640f 	.word	0x0800640f
 8006254:	0800630b 	.word	0x0800630b
 8006258:	0800640f 	.word	0x0800640f
 800625c:	0800640f 	.word	0x0800640f
 8006260:	0800640f 	.word	0x0800640f
 8006264:	0800634b 	.word	0x0800634b
 8006268:	0800640f 	.word	0x0800640f
 800626c:	0800640f 	.word	0x0800640f
 8006270:	0800640f 	.word	0x0800640f
 8006274:	0800638d 	.word	0x0800638d
 8006278:	0800640f 	.word	0x0800640f
 800627c:	0800640f 	.word	0x0800640f
 8006280:	0800640f 	.word	0x0800640f
 8006284:	080063cd 	.word	0x080063cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fa58 	bl	8006744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0208 	orr.w	r2, r2, #8
 80062a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6999      	ldr	r1, [r3, #24]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	619a      	str	r2, [r3, #24]
      break;
 80062c6:	e0a5      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fac8 	bl	8006864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6999      	ldr	r1, [r3, #24]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	619a      	str	r2, [r3, #24]
      break;
 8006308:	e084      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fb31 	bl	8006978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0208 	orr.w	r2, r2, #8
 8006324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0204 	bic.w	r2, r2, #4
 8006334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69d9      	ldr	r1, [r3, #28]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	61da      	str	r2, [r3, #28]
      break;
 8006348:	e064      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fb99 	bl	8006a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69d9      	ldr	r1, [r3, #28]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	021a      	lsls	r2, r3, #8
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	61da      	str	r2, [r3, #28]
      break;
 800638a:	e043      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fbe2 	bl	8006b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0208 	orr.w	r2, r2, #8
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0204 	bic.w	r2, r2, #4
 80063b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063ca:	e023      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fc26 	bl	8006c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800640c:	e002      	b.n	8006414 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
      break;
 8006412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop

08006428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_TIM_ConfigClockSource+0x1c>
 8006440:	2302      	movs	r3, #2
 8006442:	e0b6      	b.n	80065b2 <HAL_TIM_ConfigClockSource+0x18a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006462:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800646e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006480:	d03e      	beq.n	8006500 <HAL_TIM_ConfigClockSource+0xd8>
 8006482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006486:	f200 8087 	bhi.w	8006598 <HAL_TIM_ConfigClockSource+0x170>
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800648e:	f000 8086 	beq.w	800659e <HAL_TIM_ConfigClockSource+0x176>
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006496:	d87f      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 8006498:	2b70      	cmp	r3, #112	@ 0x70
 800649a:	d01a      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0xaa>
 800649c:	2b70      	cmp	r3, #112	@ 0x70
 800649e:	d87b      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064a0:	2b60      	cmp	r3, #96	@ 0x60
 80064a2:	d050      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x11e>
 80064a4:	2b60      	cmp	r3, #96	@ 0x60
 80064a6:	d877      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064a8:	2b50      	cmp	r3, #80	@ 0x50
 80064aa:	d03c      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0xfe>
 80064ac:	2b50      	cmp	r3, #80	@ 0x50
 80064ae:	d873      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064b0:	2b40      	cmp	r3, #64	@ 0x40
 80064b2:	d058      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x13e>
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	d86f      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064b8:	2b30      	cmp	r3, #48	@ 0x30
 80064ba:	d064      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064bc:	2b30      	cmp	r3, #48	@ 0x30
 80064be:	d86b      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d060      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d867      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d05c      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d05a      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x15e>
 80064d0:	e062      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064e2:	f000 fd9d 	bl	8007020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	609a      	str	r2, [r3, #8]
      break;
 80064fe:	e04f      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006510:	f000 fd86 	bl	8007020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006522:	609a      	str	r2, [r3, #8]
      break;
 8006524:	e03c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006532:	461a      	mov	r2, r3
 8006534:	f000 fc44 	bl	8006dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2150      	movs	r1, #80	@ 0x50
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fd53 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006544:	e02c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006552:	461a      	mov	r2, r3
 8006554:	f000 fca0 	bl	8006e98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2160      	movs	r1, #96	@ 0x60
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fd43 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006564:	e01c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006572:	461a      	mov	r2, r3
 8006574:	f000 fc24 	bl	8006dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2140      	movs	r1, #64	@ 0x40
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fd33 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006584:	e00c      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f000 fd2a 	bl	8006fea <TIM_ITRx_SetConfig>
      break;
 8006596:	e003      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e000      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800659e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a42      	ldr	r2, [pc, #264]	@ (8006728 <TIM_Base_SetConfig+0x11c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00f      	beq.n	8006644 <TIM_Base_SetConfig+0x38>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662a:	d00b      	beq.n	8006644 <TIM_Base_SetConfig+0x38>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a3f      	ldr	r2, [pc, #252]	@ (800672c <TIM_Base_SetConfig+0x120>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d007      	beq.n	8006644 <TIM_Base_SetConfig+0x38>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a3e      	ldr	r2, [pc, #248]	@ (8006730 <TIM_Base_SetConfig+0x124>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_Base_SetConfig+0x38>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a3d      	ldr	r2, [pc, #244]	@ (8006734 <TIM_Base_SetConfig+0x128>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d108      	bne.n	8006656 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a33      	ldr	r2, [pc, #204]	@ (8006728 <TIM_Base_SetConfig+0x11c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01b      	beq.n	8006696 <TIM_Base_SetConfig+0x8a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006664:	d017      	beq.n	8006696 <TIM_Base_SetConfig+0x8a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a30      	ldr	r2, [pc, #192]	@ (800672c <TIM_Base_SetConfig+0x120>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <TIM_Base_SetConfig+0x8a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2f      	ldr	r2, [pc, #188]	@ (8006730 <TIM_Base_SetConfig+0x124>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <TIM_Base_SetConfig+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2e      	ldr	r2, [pc, #184]	@ (8006734 <TIM_Base_SetConfig+0x128>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_Base_SetConfig+0x8a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a2d      	ldr	r2, [pc, #180]	@ (8006738 <TIM_Base_SetConfig+0x12c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_Base_SetConfig+0x8a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2c      	ldr	r2, [pc, #176]	@ (800673c <TIM_Base_SetConfig+0x130>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_Base_SetConfig+0x8a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a2b      	ldr	r2, [pc, #172]	@ (8006740 <TIM_Base_SetConfig+0x134>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d108      	bne.n	80066a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800669c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a16      	ldr	r2, [pc, #88]	@ (8006728 <TIM_Base_SetConfig+0x11c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00f      	beq.n	80066f4 <TIM_Base_SetConfig+0xe8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a17      	ldr	r2, [pc, #92]	@ (8006734 <TIM_Base_SetConfig+0x128>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00b      	beq.n	80066f4 <TIM_Base_SetConfig+0xe8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a16      	ldr	r2, [pc, #88]	@ (8006738 <TIM_Base_SetConfig+0x12c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_Base_SetConfig+0xe8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a15      	ldr	r2, [pc, #84]	@ (800673c <TIM_Base_SetConfig+0x130>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_Base_SetConfig+0xe8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a14      	ldr	r2, [pc, #80]	@ (8006740 <TIM_Base_SetConfig+0x134>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d103      	bne.n	80066fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b01      	cmp	r3, #1
 800670c:	d105      	bne.n	800671a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f023 0201 	bic.w	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	611a      	str	r2, [r3, #16]
  }
}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40012c00 	.word	0x40012c00
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800

08006744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f023 0201 	bic.w	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f023 0302 	bic.w	r3, r3, #2
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2c      	ldr	r2, [pc, #176]	@ (8006850 <TIM_OC1_SetConfig+0x10c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00f      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006854 <TIM_OC1_SetConfig+0x110>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00b      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006858 <TIM_OC1_SetConfig+0x114>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d007      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a29      	ldr	r2, [pc, #164]	@ (800685c <TIM_OC1_SetConfig+0x118>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a28      	ldr	r2, [pc, #160]	@ (8006860 <TIM_OC1_SetConfig+0x11c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d10c      	bne.n	80067de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0308 	bic.w	r3, r3, #8
 80067ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006850 <TIM_OC1_SetConfig+0x10c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00f      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006854 <TIM_OC1_SetConfig+0x110>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00b      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a19      	ldr	r2, [pc, #100]	@ (8006858 <TIM_OC1_SetConfig+0x114>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a18      	ldr	r2, [pc, #96]	@ (800685c <TIM_OC1_SetConfig+0x118>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a17      	ldr	r2, [pc, #92]	@ (8006860 <TIM_OC1_SetConfig+0x11c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40013400 	.word	0x40013400
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400
 8006860:	40014800 	.word	0x40014800

08006864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f023 0210 	bic.w	r2, r3, #16
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0320 	bic.w	r3, r3, #32
 80068b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a28      	ldr	r2, [pc, #160]	@ (8006964 <TIM_OC2_SetConfig+0x100>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC2_SetConfig+0x6c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a27      	ldr	r2, [pc, #156]	@ (8006968 <TIM_OC2_SetConfig+0x104>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10d      	bne.n	80068ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <TIM_OC2_SetConfig+0x100>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00f      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006968 <TIM_OC2_SetConfig+0x104>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1b      	ldr	r2, [pc, #108]	@ (800696c <TIM_OC2_SetConfig+0x108>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a1a      	ldr	r2, [pc, #104]	@ (8006970 <TIM_OC2_SetConfig+0x10c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a19      	ldr	r2, [pc, #100]	@ (8006974 <TIM_OC2_SetConfig+0x110>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d113      	bne.n	800693c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800691a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006922:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40013400 	.word	0x40013400
 800696c:	40014000 	.word	0x40014000
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800

08006978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0303 	bic.w	r3, r3, #3
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	021b      	lsls	r3, r3, #8
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a27      	ldr	r2, [pc, #156]	@ (8006a74 <TIM_OC3_SetConfig+0xfc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_OC3_SetConfig+0x6a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a26      	ldr	r2, [pc, #152]	@ (8006a78 <TIM_OC3_SetConfig+0x100>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d10d      	bne.n	80069fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1c      	ldr	r2, [pc, #112]	@ (8006a74 <TIM_OC3_SetConfig+0xfc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00f      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1b      	ldr	r2, [pc, #108]	@ (8006a78 <TIM_OC3_SetConfig+0x100>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a1a      	ldr	r2, [pc, #104]	@ (8006a7c <TIM_OC3_SetConfig+0x104>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a19      	ldr	r2, [pc, #100]	@ (8006a80 <TIM_OC3_SetConfig+0x108>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a18      	ldr	r2, [pc, #96]	@ (8006a84 <TIM_OC3_SetConfig+0x10c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d113      	bne.n	8006a4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800

08006a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a18      	ldr	r2, [pc, #96]	@ (8006b48 <TIM_OC4_SetConfig+0xc0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00f      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a17      	ldr	r2, [pc, #92]	@ (8006b4c <TIM_OC4_SetConfig+0xc4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a16      	ldr	r2, [pc, #88]	@ (8006b50 <TIM_OC4_SetConfig+0xc8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a15      	ldr	r2, [pc, #84]	@ (8006b54 <TIM_OC4_SetConfig+0xcc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a14      	ldr	r2, [pc, #80]	@ (8006b58 <TIM_OC4_SetConfig+0xd0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d109      	bne.n	8006b20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40014400 	.word	0x40014400
 8006b58:	40014800 	.word	0x40014800

08006b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a17      	ldr	r2, [pc, #92]	@ (8006c10 <TIM_OC5_SetConfig+0xb4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00f      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a16      	ldr	r2, [pc, #88]	@ (8006c14 <TIM_OC5_SetConfig+0xb8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a15      	ldr	r2, [pc, #84]	@ (8006c18 <TIM_OC5_SetConfig+0xbc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a14      	ldr	r2, [pc, #80]	@ (8006c1c <TIM_OC5_SetConfig+0xc0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a13      	ldr	r2, [pc, #76]	@ (8006c20 <TIM_OC5_SetConfig+0xc4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d109      	bne.n	8006bea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	621a      	str	r2, [r3, #32]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40013400 	.word	0x40013400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	051b      	lsls	r3, r3, #20
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <TIM_OC6_SetConfig+0xb8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00f      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a17      	ldr	r2, [pc, #92]	@ (8006ce0 <TIM_OC6_SetConfig+0xbc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00b      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ce4 <TIM_OC6_SetConfig+0xc0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d007      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a15      	ldr	r2, [pc, #84]	@ (8006ce8 <TIM_OC6_SetConfig+0xc4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a14      	ldr	r2, [pc, #80]	@ (8006cec <TIM_OC6_SetConfig+0xc8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	029b      	lsls	r3, r3, #10
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40012c00 	.word	0x40012c00
 8006ce0:	40013400 	.word	0x40013400
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800

08006cf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f023 0201 	bic.w	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a24      	ldr	r2, [pc, #144]	@ (8006dac <TIM_TI1_SetConfig+0xbc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <TIM_TI1_SetConfig+0x56>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d24:	d00f      	beq.n	8006d46 <TIM_TI1_SetConfig+0x56>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <TIM_TI1_SetConfig+0xc0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00b      	beq.n	8006d46 <TIM_TI1_SetConfig+0x56>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <TIM_TI1_SetConfig+0xc4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_TI1_SetConfig+0x56>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a1f      	ldr	r2, [pc, #124]	@ (8006db8 <TIM_TI1_SetConfig+0xc8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_TI1_SetConfig+0x56>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a1e      	ldr	r2, [pc, #120]	@ (8006dbc <TIM_TI1_SetConfig+0xcc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d101      	bne.n	8006d4a <TIM_TI1_SetConfig+0x5a>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <TIM_TI1_SetConfig+0x5c>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e003      	b.n	8006d6a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f043 0301 	orr.w	r3, r3, #1
 8006d68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f023 030a 	bic.w	r3, r3, #10
 8006d84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f003 030a 	and.w	r3, r3, #10
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40000400 	.word	0x40000400
 8006db4:	40000800 	.word	0x40000800
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40014000 	.word	0x40014000

08006dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0201 	bic.w	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 030a 	bic.w	r3, r3, #10
 8006dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	621a      	str	r2, [r3, #32]
}
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b087      	sub	sp, #28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
 8006e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f023 0210 	bic.w	r2, r3, #16
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	031b      	lsls	r3, r3, #12
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0210 	bic.w	r2, r3, #16
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	031b      	lsls	r3, r3, #12
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	621a      	str	r2, [r3, #32]
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006f48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	621a      	str	r2, [r3, #32]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	031b      	lsls	r3, r3, #12
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006fc2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	031b      	lsls	r3, r3, #12
 8006fc8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	f043 0307 	orr.w	r3, r3, #7
 800700c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	609a      	str	r2, [r3, #8]
}
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800703a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	021a      	lsls	r2, r3, #8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	431a      	orrs	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	609a      	str	r2, [r3, #8]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	2201      	movs	r2, #1
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1a      	ldr	r2, [r3, #32]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	43db      	mvns	r3, r3
 8007082:	401a      	ands	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1a      	ldr	r2, [r3, #32]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	fa01 f303 	lsl.w	r3, r1, r3
 8007098:	431a      	orrs	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <HAL_TIMEx_PWMN_Start+0x24>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	bf14      	ite	ne
 80070c8:	2301      	movne	r3, #1
 80070ca:	2300      	moveq	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	e022      	b.n	8007116 <HAL_TIMEx_PWMN_Start+0x6a>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d109      	bne.n	80070ea <HAL_TIMEx_PWMN_Start+0x3e>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b01      	cmp	r3, #1
 80070e0:	bf14      	ite	ne
 80070e2:	2301      	movne	r3, #1
 80070e4:	2300      	moveq	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	e015      	b.n	8007116 <HAL_TIMEx_PWMN_Start+0x6a>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d109      	bne.n	8007104 <HAL_TIMEx_PWMN_Start+0x58>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e008      	b.n	8007116 <HAL_TIMEx_PWMN_Start+0x6a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e069      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <HAL_TIMEx_PWMN_Start+0x82>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800712c:	e013      	b.n	8007156 <HAL_TIMEx_PWMN_Start+0xaa>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d104      	bne.n	800713e <HAL_TIMEx_PWMN_Start+0x92>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800713c:	e00b      	b.n	8007156 <HAL_TIMEx_PWMN_Start+0xaa>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d104      	bne.n	800714e <HAL_TIMEx_PWMN_Start+0xa2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800714c:	e003      	b.n	8007156 <HAL_TIMEx_PWMN_Start+0xaa>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2202      	movs	r2, #2
 8007152:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2204      	movs	r2, #4
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f000 f9d2 	bl	8007508 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007172:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a20      	ldr	r2, [pc, #128]	@ (80071fc <HAL_TIMEx_PWMN_Start+0x150>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d018      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x104>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007186:	d013      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x104>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1c      	ldr	r2, [pc, #112]	@ (8007200 <HAL_TIMEx_PWMN_Start+0x154>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00e      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x104>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1b      	ldr	r2, [pc, #108]	@ (8007204 <HAL_TIMEx_PWMN_Start+0x158>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d009      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x104>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a19      	ldr	r2, [pc, #100]	@ (8007208 <HAL_TIMEx_PWMN_Start+0x15c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x104>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a18      	ldr	r2, [pc, #96]	@ (800720c <HAL_TIMEx_PWMN_Start+0x160>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d115      	bne.n	80071dc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	4b16      	ldr	r3, [pc, #88]	@ (8007210 <HAL_TIMEx_PWMN_Start+0x164>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b06      	cmp	r3, #6
 80071c0:	d015      	beq.n	80071ee <HAL_TIMEx_PWMN_Start+0x142>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c8:	d011      	beq.n	80071ee <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0201 	orr.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071da:	e008      	b.n	80071ee <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e000      	b.n	80071f0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	40000400 	.word	0x40000400
 8007204:	40000800 	.word	0x40000800
 8007208:	40013400 	.word	0x40013400
 800720c:	40014000 	.word	0x40014000
 8007210:	00010007 	.word	0x00010007

08007214 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2200      	movs	r2, #0
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f96e 	bl	8007508 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007236:	4013      	ands	r3, r2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10f      	bne.n	800725c <HAL_TIMEx_PWMN_Stop+0x48>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	f240 4344 	movw	r3, #1092	@ 0x444
 8007246:	4013      	ands	r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <HAL_TIMEx_PWMN_Stop+0x48>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800725a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007266:	4013      	ands	r3, r2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10f      	bne.n	800728c <HAL_TIMEx_PWMN_Stop+0x78>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	f240 4344 	movw	r3, #1092	@ 0x444
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d107      	bne.n	800728c <HAL_TIMEx_PWMN_Stop+0x78>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0201 	bic.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <HAL_TIMEx_PWMN_Stop+0x88>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800729a:	e013      	b.n	80072c4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d104      	bne.n	80072ac <HAL_TIMEx_PWMN_Stop+0x98>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072aa:	e00b      	b.n	80072c4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d104      	bne.n	80072bc <HAL_TIMEx_PWMN_Stop+0xa8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072ba:	e003      	b.n	80072c4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e063      	b.n	80073b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2b      	ldr	r2, [pc, #172]	@ (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2a      	ldr	r2, [pc, #168]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007322:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007334:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1b      	ldr	r2, [pc, #108]	@ (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d018      	beq.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800735a:	d013      	beq.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a18      	ldr	r2, [pc, #96]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00e      	beq.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a17      	ldr	r2, [pc, #92]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d009      	beq.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a12      	ldr	r2, [pc, #72]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d004      	beq.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a13      	ldr	r2, [pc, #76]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d10c      	bne.n	800739e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800738a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	40013400 	.word	0x40013400
 80073c4:	40000400 	.word	0x40000400
 80073c8:	40000800 	.word	0x40000800
 80073cc:	40014000 	.word	0x40014000

080073d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e065      	b.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a16      	ldr	r2, [pc, #88]	@ (80074c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d004      	beq.n	800747a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a14      	ldr	r2, [pc, #80]	@ (80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d115      	bne.n	80074a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	051b      	lsls	r3, r3, #20
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40013400 	.word	0x40013400

080074cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	2204      	movs	r2, #4
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a1a      	ldr	r2, [r3, #32]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	43db      	mvns	r3, r3
 800752a:	401a      	ands	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a1a      	ldr	r2, [r3, #32]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	fa01 f303 	lsl.w	r3, r1, r3
 8007540:	431a      	orrs	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e040      	b.n	80075e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7fa fbe1 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2224      	movs	r2, #36	@ 0x24
 800757e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fe55 	bl	8008248 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fc7e 	bl	8007ea0 <UART_SetConfig>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e01b      	b.n	80075e6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fed4 	bl	800838c <UART_CheckIdleState>
 80075e4:	4603      	mov	r3, r0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e02f      	b.n	8007660 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2224      	movs	r2, #36	@ 0x24
 8007604:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fa fc24 	bl	8001e7c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	@ 0x28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800767a:	2b20      	cmp	r3, #32
 800767c:	d165      	bne.n	800774a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_UART_Transmit_DMA+0x22>
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e05e      	b.n	800774c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2221      	movs	r2, #33	@ 0x21
 80076b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d027      	beq.n	800770a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	4a25      	ldr	r2, [pc, #148]	@ (8007754 <HAL_UART_Transmit_DMA+0xec>)
 80076c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c6:	4a24      	ldr	r2, [pc, #144]	@ (8007758 <HAL_UART_Transmit_DMA+0xf0>)
 80076c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ce:	4a23      	ldr	r2, [pc, #140]	@ (800775c <HAL_UART_Transmit_DMA+0xf4>)
 80076d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d6:	2200      	movs	r2, #0
 80076d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e2:	4619      	mov	r1, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3328      	adds	r3, #40	@ 0x28
 80076ea:	461a      	mov	r2, r3
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	f7fb fd0f 	bl	8003110 <HAL_DMA_Start_IT>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2210      	movs	r2, #16
 80076fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e020      	b.n	800774c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2240      	movs	r2, #64	@ 0x40
 8007710:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	613b      	str	r3, [r7, #16]
   return(result);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007732:	623a      	str	r2, [r7, #32]
 8007734:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	69f9      	ldr	r1, [r7, #28]
 8007738:	6a3a      	ldr	r2, [r7, #32]
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3728      	adds	r7, #40	@ 0x28
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	0800880d 	.word	0x0800880d
 8007758:	080088a1 	.word	0x080088a1
 800775c:	08008a21 	.word	0x08008a21

08007760 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b090      	sub	sp, #64	@ 0x40
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007774:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007780:	2b80      	cmp	r3, #128	@ 0x80
 8007782:	d139      	bne.n	80077f8 <HAL_UART_DMAStop+0x98>
 8007784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007786:	2b21      	cmp	r3, #33	@ 0x21
 8007788:	d136      	bne.n	80077f8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	61fb      	str	r3, [r7, #28]
   return(result);
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e5      	bne.n	800778a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d015      	beq.n	80077f2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fb fcff 	bl	80031ce <HAL_DMA_Abort>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fb fe16 	bl	800340c <HAL_DMA_GetError>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d105      	bne.n	80077f2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2210      	movs	r2, #16
 80077ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e044      	b.n	800787c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 ff80 	bl	80086f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007802:	2b40      	cmp	r3, #64	@ 0x40
 8007804:	d139      	bne.n	800787a <HAL_UART_DMAStop+0x11a>
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	2b22      	cmp	r3, #34	@ 0x22
 800780a:	d136      	bne.n	800787a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	60bb      	str	r3, [r7, #8]
   return(result);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007822:	633b      	str	r3, [r7, #48]	@ 0x30
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800782c:	61ba      	str	r2, [r7, #24]
 800782e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	613b      	str	r3, [r7, #16]
   return(result);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007844:	2b00      	cmp	r3, #0
 8007846:	d015      	beq.n	8007874 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800784c:	4618      	mov	r0, r3
 800784e:	f7fb fcbe 	bl	80031ce <HAL_DMA_Abort>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00d      	beq.n	8007874 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785c:	4618      	mov	r0, r3
 800785e:	f7fb fdd5 	bl	800340c <HAL_DMA_GetError>
 8007862:	4603      	mov	r3, r0
 8007864:	2b20      	cmp	r3, #32
 8007866:	d105      	bne.n	8007874 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2210      	movs	r2, #16
 800786c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e003      	b.n	800787c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 ff65 	bl	8008744 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3740      	adds	r7, #64	@ 0x40
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b0ba      	sub	sp, #232	@ 0xe8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80078ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80078b2:	4013      	ands	r3, r2
 80078b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80078b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d115      	bne.n	80078ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00f      	beq.n	80078ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 82ab 	beq.w	8007e38 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
      }
      return;
 80078ea:	e2a5      	b.n	8007e38 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 8117 	beq.w	8007b24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80078f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007902:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007906:	4b85      	ldr	r3, [pc, #532]	@ (8007b1c <HAL_UART_IRQHandler+0x298>)
 8007908:	4013      	ands	r3, r2
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 810a 	beq.w	8007b24 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d011      	beq.n	8007940 <HAL_UART_IRQHandler+0xbc>
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00b      	beq.n	8007940 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2201      	movs	r2, #1
 800792e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007936:	f043 0201 	orr.w	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d011      	beq.n	8007970 <HAL_UART_IRQHandler+0xec>
 800794c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00b      	beq.n	8007970 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2202      	movs	r2, #2
 800795e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007966:	f043 0204 	orr.w	r2, r3, #4
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	d011      	beq.n	80079a0 <HAL_UART_IRQHandler+0x11c>
 800797c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2204      	movs	r2, #4
 800798e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007996:	f043 0202 	orr.w	r2, r3, #2
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d017      	beq.n	80079dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2208      	movs	r2, #8
 80079ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079d2:	f043 0208 	orr.w	r2, r3, #8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d012      	beq.n	8007a0e <HAL_UART_IRQHandler+0x18a>
 80079e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00c      	beq.n	8007a0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a04:	f043 0220 	orr.w	r2, r3, #32
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8211 	beq.w	8007e3c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00d      	beq.n	8007a42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d005      	beq.n	8007a66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d04f      	beq.n	8007b06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fe6c 	bl	8008744 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a76:	2b40      	cmp	r3, #64	@ 0x40
 8007a78:	d141      	bne.n	8007afe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1d9      	bne.n	8007a7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d013      	beq.n	8007af6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad2:	4a13      	ldr	r2, [pc, #76]	@ (8007b20 <HAL_UART_IRQHandler+0x29c>)
 8007ad4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fb fbb5 	bl	800324a <HAL_DMA_Abort_IT>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d017      	beq.n	8007b16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af4:	e00f      	b.n	8007b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9c8 	bl	8007e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afc:	e00b      	b.n	8007b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f9c4 	bl	8007e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	e007      	b.n	8007b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f9c0 	bl	8007e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007b14:	e192      	b.n	8007e3c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b16:	bf00      	nop
    return;
 8007b18:	e190      	b.n	8007e3c <HAL_UART_IRQHandler+0x5b8>
 8007b1a:	bf00      	nop
 8007b1c:	04000120 	.word	0x04000120
 8007b20:	08008a9f 	.word	0x08008a9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	f040 814b 	bne.w	8007dc4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 8144 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 813d 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5c:	2b40      	cmp	r3, #64	@ 0x40
 8007b5e:	f040 80b5 	bne.w	8007ccc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8164 	beq.w	8007e40 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b82:	429a      	cmp	r2, r3
 8007b84:	f080 815c 	bcs.w	8007e40 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	f000 8086 	beq.w	8007caa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bcc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1da      	bne.n	8007b9e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3308      	adds	r3, #8
 8007bee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e1      	bne.n	8007be8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e3      	bne.n	8007c24 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7a:	f023 0310 	bic.w	r3, r3, #16
 8007c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c8e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e4      	bne.n	8007c6a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fb fa92 	bl	80031ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7f9 f9ef 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cca:	e0b9      	b.n	8007e40 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 80ab 	beq.w	8007e44 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 80a6 	beq.w	8007e44 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e4      	bne.n	8007cf8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3308      	adds	r3, #8
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e3      	bne.n	8007d2e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d9c:	61fb      	str	r3, [r7, #28]
 8007d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	69b9      	ldr	r1, [r7, #24]
 8007da2:	69fa      	ldr	r2, [r7, #28]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	617b      	str	r3, [r7, #20]
   return(result);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e4      	bne.n	8007d7a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7f9 f973 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dc2:	e03f      	b.n	8007e44 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00e      	beq.n	8007dee <HAL_UART_IRQHandler+0x56a>
 8007dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fe99 	bl	8008b1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dec:	e02d      	b.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00e      	beq.n	8007e18 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01c      	beq.n	8007e48 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
    }
    return;
 8007e16:	e017      	b.n	8007e48 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d012      	beq.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
 8007e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00c      	beq.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fe4a 	bl	8008aca <UART_EndTransmit_IT>
    return;
 8007e36:	e008      	b.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e38:	bf00      	nop
 8007e3a:	e006      	b.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e3c:	bf00      	nop
 8007e3e:	e004      	b.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e40:	bf00      	nop
 8007e42:	e002      	b.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e44:	bf00      	nop
 8007e46:	e000      	b.n	8007e4a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e48:	bf00      	nop
  }

}
 8007e4a:	37e8      	adds	r7, #232	@ 0xe8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007ece:	f023 030c 	bic.w	r3, r3, #12
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	6979      	ldr	r1, [r7, #20]
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4aa7      	ldr	r2, [pc, #668]	@ (80081b8 <UART_SetConfig+0x318>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d120      	bne.n	8007f62 <UART_SetConfig+0xc2>
 8007f20:	4ba6      	ldr	r3, [pc, #664]	@ (80081bc <UART_SetConfig+0x31c>)
 8007f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d817      	bhi.n	8007f5c <UART_SetConfig+0xbc>
 8007f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <UART_SetConfig+0x94>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f51 	.word	0x08007f51
 8007f3c:	08007f57 	.word	0x08007f57
 8007f40:	08007f4b 	.word	0x08007f4b
 8007f44:	2301      	movs	r3, #1
 8007f46:	77fb      	strb	r3, [r7, #31]
 8007f48:	e0b5      	b.n	80080b6 <UART_SetConfig+0x216>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	77fb      	strb	r3, [r7, #31]
 8007f4e:	e0b2      	b.n	80080b6 <UART_SetConfig+0x216>
 8007f50:	2304      	movs	r3, #4
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e0af      	b.n	80080b6 <UART_SetConfig+0x216>
 8007f56:	2308      	movs	r3, #8
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e0ac      	b.n	80080b6 <UART_SetConfig+0x216>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e0a9      	b.n	80080b6 <UART_SetConfig+0x216>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a96      	ldr	r2, [pc, #600]	@ (80081c0 <UART_SetConfig+0x320>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d124      	bne.n	8007fb6 <UART_SetConfig+0x116>
 8007f6c:	4b93      	ldr	r3, [pc, #588]	@ (80081bc <UART_SetConfig+0x31c>)
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f78:	d011      	beq.n	8007f9e <UART_SetConfig+0xfe>
 8007f7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f7e:	d817      	bhi.n	8007fb0 <UART_SetConfig+0x110>
 8007f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f84:	d011      	beq.n	8007faa <UART_SetConfig+0x10a>
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f8a:	d811      	bhi.n	8007fb0 <UART_SetConfig+0x110>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <UART_SetConfig+0xf8>
 8007f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f94:	d006      	beq.n	8007fa4 <UART_SetConfig+0x104>
 8007f96:	e00b      	b.n	8007fb0 <UART_SetConfig+0x110>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e08b      	b.n	80080b6 <UART_SetConfig+0x216>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e088      	b.n	80080b6 <UART_SetConfig+0x216>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e085      	b.n	80080b6 <UART_SetConfig+0x216>
 8007faa:	2308      	movs	r3, #8
 8007fac:	77fb      	strb	r3, [r7, #31]
 8007fae:	e082      	b.n	80080b6 <UART_SetConfig+0x216>
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e07f      	b.n	80080b6 <UART_SetConfig+0x216>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a82      	ldr	r2, [pc, #520]	@ (80081c4 <UART_SetConfig+0x324>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d124      	bne.n	800800a <UART_SetConfig+0x16a>
 8007fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80081bc <UART_SetConfig+0x31c>)
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007fc8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007fcc:	d011      	beq.n	8007ff2 <UART_SetConfig+0x152>
 8007fce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007fd2:	d817      	bhi.n	8008004 <UART_SetConfig+0x164>
 8007fd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007fd8:	d011      	beq.n	8007ffe <UART_SetConfig+0x15e>
 8007fda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007fde:	d811      	bhi.n	8008004 <UART_SetConfig+0x164>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <UART_SetConfig+0x14c>
 8007fe4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fe8:	d006      	beq.n	8007ff8 <UART_SetConfig+0x158>
 8007fea:	e00b      	b.n	8008004 <UART_SetConfig+0x164>
 8007fec:	2300      	movs	r3, #0
 8007fee:	77fb      	strb	r3, [r7, #31]
 8007ff0:	e061      	b.n	80080b6 <UART_SetConfig+0x216>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	77fb      	strb	r3, [r7, #31]
 8007ff6:	e05e      	b.n	80080b6 <UART_SetConfig+0x216>
 8007ff8:	2304      	movs	r3, #4
 8007ffa:	77fb      	strb	r3, [r7, #31]
 8007ffc:	e05b      	b.n	80080b6 <UART_SetConfig+0x216>
 8007ffe:	2308      	movs	r3, #8
 8008000:	77fb      	strb	r3, [r7, #31]
 8008002:	e058      	b.n	80080b6 <UART_SetConfig+0x216>
 8008004:	2310      	movs	r3, #16
 8008006:	77fb      	strb	r3, [r7, #31]
 8008008:	e055      	b.n	80080b6 <UART_SetConfig+0x216>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a6e      	ldr	r2, [pc, #440]	@ (80081c8 <UART_SetConfig+0x328>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d124      	bne.n	800805e <UART_SetConfig+0x1be>
 8008014:	4b69      	ldr	r3, [pc, #420]	@ (80081bc <UART_SetConfig+0x31c>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800801c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008020:	d011      	beq.n	8008046 <UART_SetConfig+0x1a6>
 8008022:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008026:	d817      	bhi.n	8008058 <UART_SetConfig+0x1b8>
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800802c:	d011      	beq.n	8008052 <UART_SetConfig+0x1b2>
 800802e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008032:	d811      	bhi.n	8008058 <UART_SetConfig+0x1b8>
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <UART_SetConfig+0x1a0>
 8008038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800803c:	d006      	beq.n	800804c <UART_SetConfig+0x1ac>
 800803e:	e00b      	b.n	8008058 <UART_SetConfig+0x1b8>
 8008040:	2300      	movs	r3, #0
 8008042:	77fb      	strb	r3, [r7, #31]
 8008044:	e037      	b.n	80080b6 <UART_SetConfig+0x216>
 8008046:	2302      	movs	r3, #2
 8008048:	77fb      	strb	r3, [r7, #31]
 800804a:	e034      	b.n	80080b6 <UART_SetConfig+0x216>
 800804c:	2304      	movs	r3, #4
 800804e:	77fb      	strb	r3, [r7, #31]
 8008050:	e031      	b.n	80080b6 <UART_SetConfig+0x216>
 8008052:	2308      	movs	r3, #8
 8008054:	77fb      	strb	r3, [r7, #31]
 8008056:	e02e      	b.n	80080b6 <UART_SetConfig+0x216>
 8008058:	2310      	movs	r3, #16
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e02b      	b.n	80080b6 <UART_SetConfig+0x216>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a5a      	ldr	r2, [pc, #360]	@ (80081cc <UART_SetConfig+0x32c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d124      	bne.n	80080b2 <UART_SetConfig+0x212>
 8008068:	4b54      	ldr	r3, [pc, #336]	@ (80081bc <UART_SetConfig+0x31c>)
 800806a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008070:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008074:	d011      	beq.n	800809a <UART_SetConfig+0x1fa>
 8008076:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800807a:	d817      	bhi.n	80080ac <UART_SetConfig+0x20c>
 800807c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008080:	d011      	beq.n	80080a6 <UART_SetConfig+0x206>
 8008082:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008086:	d811      	bhi.n	80080ac <UART_SetConfig+0x20c>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <UART_SetConfig+0x1f4>
 800808c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008090:	d006      	beq.n	80080a0 <UART_SetConfig+0x200>
 8008092:	e00b      	b.n	80080ac <UART_SetConfig+0x20c>
 8008094:	2300      	movs	r3, #0
 8008096:	77fb      	strb	r3, [r7, #31]
 8008098:	e00d      	b.n	80080b6 <UART_SetConfig+0x216>
 800809a:	2302      	movs	r3, #2
 800809c:	77fb      	strb	r3, [r7, #31]
 800809e:	e00a      	b.n	80080b6 <UART_SetConfig+0x216>
 80080a0:	2304      	movs	r3, #4
 80080a2:	77fb      	strb	r3, [r7, #31]
 80080a4:	e007      	b.n	80080b6 <UART_SetConfig+0x216>
 80080a6:	2308      	movs	r3, #8
 80080a8:	77fb      	strb	r3, [r7, #31]
 80080aa:	e004      	b.n	80080b6 <UART_SetConfig+0x216>
 80080ac:	2310      	movs	r3, #16
 80080ae:	77fb      	strb	r3, [r7, #31]
 80080b0:	e001      	b.n	80080b6 <UART_SetConfig+0x216>
 80080b2:	2310      	movs	r3, #16
 80080b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080be:	d15b      	bne.n	8008178 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80080c0:	7ffb      	ldrb	r3, [r7, #31]
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d827      	bhi.n	8008116 <UART_SetConfig+0x276>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <UART_SetConfig+0x22c>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	08008101 	.word	0x08008101
 80080d8:	08008117 	.word	0x08008117
 80080dc:	08008107 	.word	0x08008107
 80080e0:	08008117 	.word	0x08008117
 80080e4:	08008117 	.word	0x08008117
 80080e8:	08008117 	.word	0x08008117
 80080ec:	0800810f 	.word	0x0800810f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080f0:	f7fc ffbe 	bl	8005070 <HAL_RCC_GetPCLK1Freq>
 80080f4:	61b8      	str	r0, [r7, #24]
        break;
 80080f6:	e013      	b.n	8008120 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080f8:	f7fc ffdc 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 80080fc:	61b8      	str	r0, [r7, #24]
        break;
 80080fe:	e00f      	b.n	8008120 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008100:	4b33      	ldr	r3, [pc, #204]	@ (80081d0 <UART_SetConfig+0x330>)
 8008102:	61bb      	str	r3, [r7, #24]
        break;
 8008104:	e00c      	b.n	8008120 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008106:	f7fc ff51 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 800810a:	61b8      	str	r0, [r7, #24]
        break;
 800810c:	e008      	b.n	8008120 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800810e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008112:	61bb      	str	r3, [r7, #24]
        break;
 8008114:	e004      	b.n	8008120 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	77bb      	strb	r3, [r7, #30]
        break;
 800811e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8082 	beq.w	800822c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	005a      	lsls	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	441a      	add	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	fbb2 f3f3 	udiv	r3, r2, r3
 800813c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b0f      	cmp	r3, #15
 8008142:	d916      	bls.n	8008172 <UART_SetConfig+0x2d2>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800814a:	d212      	bcs.n	8008172 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f023 030f 	bic.w	r3, r3, #15
 8008154:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	b29b      	uxth	r3, r3
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	b29a      	uxth	r2, r3
 8008162:	89fb      	ldrh	r3, [r7, #14]
 8008164:	4313      	orrs	r3, r2
 8008166:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	89fa      	ldrh	r2, [r7, #14]
 800816e:	60da      	str	r2, [r3, #12]
 8008170:	e05c      	b.n	800822c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	77bb      	strb	r3, [r7, #30]
 8008176:	e059      	b.n	800822c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008178:	7ffb      	ldrb	r3, [r7, #31]
 800817a:	2b08      	cmp	r3, #8
 800817c:	d835      	bhi.n	80081ea <UART_SetConfig+0x34a>
 800817e:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <UART_SetConfig+0x2e4>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081a9 	.word	0x080081a9
 8008188:	080081b1 	.word	0x080081b1
 800818c:	080081d5 	.word	0x080081d5
 8008190:	080081eb 	.word	0x080081eb
 8008194:	080081db 	.word	0x080081db
 8008198:	080081eb 	.word	0x080081eb
 800819c:	080081eb 	.word	0x080081eb
 80081a0:	080081eb 	.word	0x080081eb
 80081a4:	080081e3 	.word	0x080081e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a8:	f7fc ff62 	bl	8005070 <HAL_RCC_GetPCLK1Freq>
 80081ac:	61b8      	str	r0, [r7, #24]
        break;
 80081ae:	e021      	b.n	80081f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fc ff80 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 80081b4:	61b8      	str	r0, [r7, #24]
        break;
 80081b6:	e01d      	b.n	80081f4 <UART_SetConfig+0x354>
 80081b8:	40013800 	.word	0x40013800
 80081bc:	40021000 	.word	0x40021000
 80081c0:	40004400 	.word	0x40004400
 80081c4:	40004800 	.word	0x40004800
 80081c8:	40004c00 	.word	0x40004c00
 80081cc:	40005000 	.word	0x40005000
 80081d0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008244 <UART_SetConfig+0x3a4>)
 80081d6:	61bb      	str	r3, [r7, #24]
        break;
 80081d8:	e00c      	b.n	80081f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081da:	f7fc fee7 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 80081de:	61b8      	str	r0, [r7, #24]
        break;
 80081e0:	e008      	b.n	80081f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e6:	61bb      	str	r3, [r7, #24]
        break;
 80081e8:	e004      	b.n	80081f4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	77bb      	strb	r3, [r7, #30]
        break;
 80081f2:	bf00      	nop
    }

    if (pclk != 0U)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	085a      	lsrs	r2, r3, #1
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	441a      	add	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b0f      	cmp	r3, #15
 8008212:	d909      	bls.n	8008228 <UART_SetConfig+0x388>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800821a:	d205      	bcs.n	8008228 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	e001      	b.n	800822c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008238:	7fbb      	ldrb	r3, [r7, #30]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	007a1200 	.word	0x007a1200

08008248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01a      	beq.n	800835e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008346:	d10a      	bne.n	800835e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
  }
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b098      	sub	sp, #96	@ 0x60
 8008390:	af02      	add	r7, sp, #8
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800839c:	f7f9 fe94 	bl	80020c8 <HAL_GetTick>
 80083a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d12e      	bne.n	800840e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083b8:	2200      	movs	r2, #0
 80083ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f88c 	bl	80084dc <UART_WaitOnFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d021      	beq.n	800840e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083de:	653b      	str	r3, [r7, #80]	@ 0x50
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e6      	bne.n	80083ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2220      	movs	r2, #32
 8008400:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e062      	b.n	80084d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b04      	cmp	r3, #4
 800841a:	d149      	bne.n	80084b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800841c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008424:	2200      	movs	r2, #0
 8008426:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f856 	bl	80084dc <UART_WaitOnFlagUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d03c      	beq.n	80084b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	623b      	str	r3, [r7, #32]
   return(result);
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800844a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008454:	633b      	str	r3, [r7, #48]	@ 0x30
 8008456:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800845a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e6      	bne.n	8008436 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	60fb      	str	r3, [r7, #12]
   return(result);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008488:	61fa      	str	r2, [r7, #28]
 800848a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	69b9      	ldr	r1, [r7, #24]
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	617b      	str	r3, [r7, #20]
   return(result);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e5      	bne.n	8008468 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e011      	b.n	80084d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3758      	adds	r7, #88	@ 0x58
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ec:	e04f      	b.n	800858e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f4:	d04b      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f6:	f7f9 fde7 	bl	80020c8 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	429a      	cmp	r2, r3
 8008504:	d302      	bcc.n	800850c <UART_WaitOnFlagUntilTimeout+0x30>
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e04e      	b.n	80085ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d037      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0xb2>
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b80      	cmp	r3, #128	@ 0x80
 8008522:	d034      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b40      	cmp	r3, #64	@ 0x40
 8008528:	d031      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b08      	cmp	r3, #8
 8008536:	d110      	bne.n	800855a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2208      	movs	r2, #8
 800853e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f8ff 	bl	8008744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2208      	movs	r2, #8
 800854a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e029      	b.n	80085ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008568:	d111      	bne.n	800858e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f8e5 	bl	8008744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e00f      	b.n	80085ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69da      	ldr	r2, [r3, #28]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4013      	ands	r3, r2
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	429a      	cmp	r2, r3
 800859c:	bf0c      	ite	eq
 800859e:	2301      	moveq	r3, #1
 80085a0:	2300      	movne	r3, #0
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	461a      	mov	r2, r3
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d0a0      	beq.n	80084ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b096      	sub	sp, #88	@ 0x58
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	88fa      	ldrh	r2, [r7, #6]
 80085d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2222      	movs	r2, #34	@ 0x22
 80085e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d028      	beq.n	800863e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f0:	4a3e      	ldr	r2, [pc, #248]	@ (80086ec <UART_Start_Receive_DMA+0x134>)
 80085f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f8:	4a3d      	ldr	r2, [pc, #244]	@ (80086f0 <UART_Start_Receive_DMA+0x138>)
 80085fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008600:	4a3c      	ldr	r2, [pc, #240]	@ (80086f4 <UART_Start_Receive_DMA+0x13c>)
 8008602:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008608:	2200      	movs	r2, #0
 800860a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3324      	adds	r3, #36	@ 0x24
 8008616:	4619      	mov	r1, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861c:	461a      	mov	r2, r3
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	f7fa fd76 	bl	8003110 <HAL_DMA_Start_IT>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2210      	movs	r2, #16
 800862e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2220      	movs	r2, #32
 8008636:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e051      	b.n	80086e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d018      	beq.n	8008678 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800865a:	657b      	str	r3, [r7, #84]	@ 0x54
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008666:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800866a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e6      	bne.n	8008646 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008698:	637a      	str	r2, [r7, #52]	@ 0x34
 800869a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800869e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e5      	bne.n	8008678 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3308      	adds	r3, #8
 80086b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	613b      	str	r3, [r7, #16]
   return(result);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3308      	adds	r3, #8
 80086ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086cc:	623a      	str	r2, [r7, #32]
 80086ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	69f9      	ldr	r1, [r7, #28]
 80086d2:	6a3a      	ldr	r2, [r7, #32]
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e5      	bne.n	80086ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3758      	adds	r7, #88	@ 0x58
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	080088bd 	.word	0x080088bd
 80086f0:	080089e3 	.word	0x080089e3
 80086f4:	08008a21 	.word	0x08008a21

080086f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b089      	sub	sp, #36	@ 0x24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	60bb      	str	r3, [r7, #8]
   return(result);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	61bb      	str	r3, [r7, #24]
 8008720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6979      	ldr	r1, [r7, #20]
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	613b      	str	r3, [r7, #16]
   return(result);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e6      	bne.n	8008700 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008738:	bf00      	nop
 800873a:	3724      	adds	r7, #36	@ 0x24
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b095      	sub	sp, #84	@ 0x54
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800876a:	643b      	str	r3, [r7, #64]	@ 0x40
 800876c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008770:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e6      	bne.n	800874c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	61fb      	str	r3, [r7, #28]
   return(result);
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800879e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e5      	bne.n	800877e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d118      	bne.n	80087ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0310 	bic.w	r3, r3, #16
 80087ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	461a      	mov	r2, r3
 80087d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6979      	ldr	r1, [r7, #20]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	613b      	str	r3, [r7, #16]
   return(result);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e6      	bne.n	80087ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008800:	bf00      	nop
 8008802:	3754      	adds	r7, #84	@ 0x54
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b090      	sub	sp, #64	@ 0x40
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	2b20      	cmp	r3, #32
 8008820:	d037      	beq.n	8008892 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8008822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008824:	2200      	movs	r2, #0
 8008826:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800882a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	623b      	str	r3, [r7, #32]
   return(result);
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008840:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800884a:	633a      	str	r2, [r7, #48]	@ 0x30
 800884c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800885e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	60fb      	str	r3, [r7, #12]
   return(result);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008872:	637b      	str	r3, [r7, #52]	@ 0x34
 8008874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	69b9      	ldr	r1, [r7, #24]
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	617b      	str	r3, [r7, #20]
   return(result);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008890:	e002      	b.n	8008898 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8008892:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008894:	f7f8 fbca 	bl	800102c <HAL_UART_TxCpltCallback>
}
 8008898:	bf00      	nop
 800889a:	3740      	adds	r7, #64	@ 0x40
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f7ff face 	bl	8007e50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b4:	bf00      	nop
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b09c      	sub	sp, #112	@ 0x70
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d071      	beq.n	80089b6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80088d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e6      	bne.n	80088da <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	667b      	str	r3, [r7, #100]	@ 0x64
 8008924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800892c:	647a      	str	r2, [r7, #68]	@ 0x44
 800892e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800893a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e5      	bne.n	800890c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	623b      	str	r3, [r7, #32]
   return(result);
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008956:	663b      	str	r3, [r7, #96]	@ 0x60
 8008958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008960:	633a      	str	r2, [r7, #48]	@ 0x30
 8008962:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008976:	2220      	movs	r2, #32
 8008978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800897e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008980:	2b01      	cmp	r3, #1
 8008982:	d118      	bne.n	80089b6 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	60fb      	str	r3, [r7, #12]
   return(result);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 0310 	bic.w	r3, r3, #16
 8008998:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800899a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	69b9      	ldr	r1, [r7, #24]
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	617b      	str	r3, [r7, #20]
   return(result);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e6      	bne.n	8008984 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089b8:	2200      	movs	r2, #0
 80089ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d107      	bne.n	80089d4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089ca:	4619      	mov	r1, r3
 80089cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089ce:	f7f8 fb6b 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089d2:	e002      	b.n	80089da <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80089d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089d6:	f7ff fa45 	bl	8007e64 <HAL_UART_RxCpltCallback>
}
 80089da:	bf00      	nop
 80089dc:	3770      	adds	r7, #112	@ 0x70
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2201      	movs	r2, #1
 80089f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d109      	bne.n	8008a12 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	4619      	mov	r1, r3
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7f8 fb4c 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a10:	e002      	b.n	8008a18 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7ff fa30 	bl	8007e78 <HAL_UART_RxHalfCpltCallback>
}
 8008a18:	bf00      	nop
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a32:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a46:	2b80      	cmp	r3, #128	@ 0x80
 8008a48:	d109      	bne.n	8008a5e <UART_DMAError+0x3e>
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b21      	cmp	r3, #33	@ 0x21
 8008a4e:	d106      	bne.n	8008a5e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008a58:	6978      	ldr	r0, [r7, #20]
 8008a5a:	f7ff fe4d 	bl	80086f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b40      	cmp	r3, #64	@ 0x40
 8008a6a:	d109      	bne.n	8008a80 <UART_DMAError+0x60>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b22      	cmp	r3, #34	@ 0x22
 8008a70:	d106      	bne.n	8008a80 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008a7a:	6978      	ldr	r0, [r7, #20]
 8008a7c:	f7ff fe62 	bl	8008744 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a86:	f043 0210 	orr.w	r2, r3, #16
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a90:	6978      	ldr	r0, [r7, #20]
 8008a92:	f7ff f9fb 	bl	8007e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a96:	bf00      	nop
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7ff f9e5 	bl	8007e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b088      	sub	sp, #32
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	61bb      	str	r3, [r7, #24]
 8008af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6979      	ldr	r1, [r7, #20]
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	613b      	str	r3, [r7, #16]
   return(result);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e6      	bne.n	8008ad2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7f8 fa8b 	bl	800102c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b16:	bf00      	nop
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b08c      	sub	sp, #48	@ 0x30
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d142      	bne.n	8008bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e03b      	b.n	8008bd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008b66:	88fb      	ldrh	r3, [r7, #6]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff fd23 	bl	80085b8 <UART_Start_Receive_DMA>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d124      	bne.n	8008bca <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d11d      	bne.n	8008bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f043 0310 	orr.w	r3, r3, #16
 8008ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6a39      	ldr	r1, [r7, #32]
 8008bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008bc2:	e002      	b.n	8008bca <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008bce:	e000      	b.n	8008bd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008bd0:	2302      	movs	r3, #2
  }
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3730      	adds	r7, #48	@ 0x30
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <memset>:
 8008bda:	4402      	add	r2, r0
 8008bdc:	4603      	mov	r3, r0
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d100      	bne.n	8008be4 <memset+0xa>
 8008be2:	4770      	bx	lr
 8008be4:	f803 1b01 	strb.w	r1, [r3], #1
 8008be8:	e7f9      	b.n	8008bde <memset+0x4>
	...

08008bec <__libc_init_array>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4d0d      	ldr	r5, [pc, #52]	@ (8008c24 <__libc_init_array+0x38>)
 8008bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8008c28 <__libc_init_array+0x3c>)
 8008bf2:	1b64      	subs	r4, r4, r5
 8008bf4:	10a4      	asrs	r4, r4, #2
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	42a6      	cmp	r6, r4
 8008bfa:	d109      	bne.n	8008c10 <__libc_init_array+0x24>
 8008bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8008c2c <__libc_init_array+0x40>)
 8008bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8008c30 <__libc_init_array+0x44>)
 8008c00:	f000 f818 	bl	8008c34 <_init>
 8008c04:	1b64      	subs	r4, r4, r5
 8008c06:	10a4      	asrs	r4, r4, #2
 8008c08:	2600      	movs	r6, #0
 8008c0a:	42a6      	cmp	r6, r4
 8008c0c:	d105      	bne.n	8008c1a <__libc_init_array+0x2e>
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c14:	4798      	blx	r3
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7ee      	b.n	8008bf8 <__libc_init_array+0xc>
 8008c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1e:	4798      	blx	r3
 8008c20:	3601      	adds	r6, #1
 8008c22:	e7f2      	b.n	8008c0a <__libc_init_array+0x1e>
 8008c24:	08008c84 	.word	0x08008c84
 8008c28:	08008c84 	.word	0x08008c84
 8008c2c:	08008c84 	.word	0x08008c84
 8008c30:	08008c88 	.word	0x08008c88

08008c34 <_init>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	bf00      	nop
 8008c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3a:	bc08      	pop	{r3}
 8008c3c:	469e      	mov	lr, r3
 8008c3e:	4770      	bx	lr

08008c40 <_fini>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr
