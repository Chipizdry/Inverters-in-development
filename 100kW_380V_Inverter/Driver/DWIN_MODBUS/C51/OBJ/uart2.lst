C51 COMPILER V9.53.0.0   UART2                                                             12/26/2024 17:13:57 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART2
OBJECT MODULE PLACED IN ..\OBJ\uart2.obj
COMPILER INVOKED BY: C:\Program Files (x86)\KEIL\C51\BIN\C51.EXE ..\HANDWARE\UART2\uart2.c LARGE OMF2 OPTIMIZE(3,SIZE) B
                    -ROWSE INCDIR(..\USER;..\FUNC_HANDLER;..\GUI_APP;..\HANDWARE\UART2) DEBUG PRINT(..\OBJ\uart2.lst) TABS(2) OBJECT(..\OBJ\u
                    -art2.obj)

line level    source

   1          #include "uart2.h"
   2          
   3          
   4          
   5          volatile u8 modbus_addresses[5] = {1, 2, 3, 4, 5}; // –ê–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   6          volatile u16 start_reg = 0x0001;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
   7          volatile u16 num_reg = 4;                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
   8          volatile u8 current_dev = 0;                    // –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞
   9          
  10          xdata volatile  u16 current_device=0;          
  11          
  12          
  13          #if(UART2_INT_EN)
  14          xdata u16 uart2_rx_sta;//bit15Used to mark whether a complete data packet has been received, bit[14:0] is 
             -used to store the length of the current data packetxdata u8
  15          xdata u8  uart2_buf[UART2_PACKET_MAX_LEN+2];//Leave 2 blank characters
  16          xdata u8  uart2_step;
  17          xdata u8  rcv_complete=0;  // –ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
  18          idata u16 data_len=0;
  19          //Serial port 2 interrupt service routine
  20          
  21          void uart2_isr() interrupt 4 {
  22   1          u8 res;
  23   1      
  24   1          if (RI0) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  25   2              RI0 = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞
  26   2      
  27   2              res = SBUF0;  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
  28   2      
  29   2              // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–∞–Ω
             -–Ω—ã–µ
  30   2              if (uart2_rx_sta & UART2_PACKET_OK) {
  31   3                  return;
  32   3              }
  33   2      
  34   2              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
  35   2              if (uart2_rx_sta < UART2_PACKET_MAX_LEN) {
  36   3                  uart2_buf[uart2_rx_sta++] = res;
  37   3                
  38   3              } else {
  39   3                  uart2_rx_sta = 0;  // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  40   3                  return;
  41   3              }
  42   2      
  43   2              // –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
  44   2              if (uart2_step<data_len) {  
  45   3                  uart2_step++;
  46   3              } 
  47   2              
  48   2            if(uart2_step==data_len)  {  
  49   3                  uart2_rx_sta |= UART2_PACKET_OK;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞–∫–µ—Ç–∞
  50   3                rcv_complete=1;
  51   3                uart2_step =0;
C51 COMPILER V9.53.0.0   UART2                                                             12/26/2024 17:13:57 PAGE 2   

  52   3              }
  53   2          }
  54   1      }
  55          #endif
  56          
  57          
  58          //Serial port 2 initialization
  59          void uart2_init(u32 baud)
  60          {
  61   1        MUX_SEL |= 0x40;//Setting bit6 to 1 means to export the uart2 interface to P0.4 and P0.5
  62   1        P0MDOUT &= 0xCF;
  63   1        P0MDOUT |= 0x10;//Set the corresponding IO port output and input
  64   1        ADCON = 0x80;//Select SREL0H:L as baud rate generator
  65   1        SCON0 = 0x50;//Accept enable and mode settings
  66   1        PCON &= 0x7F;//SMOD=0
  67   1        //Baud rate setting, the formula is:
  68   1        //SMOD=0  SREL0H:L=1024-main frequency/(64*baud rate),SMOD=1   SREL0H:L=1024-main frequency/(32*baud rate)
  69   1        baud = 1024-(u16)(3225600.0f/baud);
  70   1        SREL0H = (baud>>8)&0xff;  
  71   1        SREL0L = baud&0xff;
  72   1        
  73   1        #if(UART2_INT_EN)
  74   1          ES0 = 1;//Interrupt enable
  75   1          EA = 1;
  76   1          //xdata variables must be initialized in functions
  77   1          uart2_rx_sta = 0;
  78   1          uart2_step = 0;
  79   1        #else
                  ES0 = 0;
                #endif
  82   1      
  83   1      }
  84          
  85          //Send a byte
  86          void u2_send_byte(u8 byte)
  87          {
  88   1        ES0 = 0;//Close the serial port 2 interrupt first
  89   1        SBUF0 = byte;
  90   1        while(!TI0);
  91   1        TI0 = 0;
  92   1        #if(UART2_INT_EN)
  93   1          ES0 = 1;//Re-open interrupt
  94   1        #endif
  95   1      }
  96          
  97          
  98          
  99          //Send data
 100          void u2_send_bytes(u8 *bytes,u16 len)
 101          {
 102   1        u16 i;
 103   1        
 104   1        ES0 = 0;//Close the serial port 2 interrupt first
 105   1        for(i=0;i<len;i++)
 106   1        {
 107   2          SBUF0 = bytes[i];
 108   2          while(!TI0);
 109   2          TI0 = 0;
 110   2        }
 111   1        #if(UART2_INT_EN)
 112   1          ES0 = 1;//Re-open interrupt
 113   1        #endif
C51 COMPILER V9.53.0.0   UART2                                                             12/26/2024 17:13:57 PAGE 3   

 114   1      }
 115          
 116          
 117          //Implement printf function with uart2 serial port
 118          char putchar(char c)
 119          {
 120   1        u2_send_byte(c);
 121   1        
 122   1        return c;
 123   1      }
 124          
 125          
 126          
 127          
 128          u16 calculate_crc(unsigned char *buffer, unsigned char length) {
 129   1          unsigned int temp, temp2, flag;
 130   1          unsigned int i;               // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `i`
 131   1          unsigned char j;              // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `j`
 132   1      
 133   1          temp = 0xFFFF;
 134   1      
 135   1          for (i = 0; i < length; i++) {
 136   2              temp = temp ^ buffer[i];
 137   2              for (j = 0; j < 8; j++) {
 138   3                  flag = temp & 0x0001;
 139   3                  temp >>= 1;
 140   3                  if (flag)
 141   3                      temp ^= 0xA001;
 142   3              }
 143   2          }
 144   1      
 145   1          // Reverse byte order.
 146   1          temp2 = temp >> 8;
 147   1          temp = (temp << 8) | temp2;
 148   1          temp &= 0xFFFF;
 149   1      
 150   1          return temp;
 151   1      }
 152          
 153          
 154          // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Modbus-–∑–∞–ø—Ä–æ—Å–∞
 155          void modbus_request(u8 dev_addr,u8 dev_comd, u16 start_reg, u16 num_reg) {
 156   1          u8 request[8];
 157   1          u16 crc;
 158   1      
 159   1          // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å Modbus
 160   1          request[0] = dev_addr;                      // –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 161   1          request[1] = dev_comd;               // –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ 
 162   1          request[2] = (start_reg >> 8) & 0xFF; // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 163   1          request[3] = start_reg & 0xFF;        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 164   1          request[4] = (num_reg >> 8) & 0xFF;  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–
             -≤
 165   1          request[5] = num_reg & 0xFF;         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–
             -≤
 166   1      
 167   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC
 168   1          crc = calculate_crc(request, 6);
 169   1          request[6] = crc & 0xFF;                   // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç CRC
 170   1          request[7] = (crc >> 8) & 0xFF;            // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç CRC
 171   1      
 172   1          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ UART
 173   1          u2_send_bytes(request, 8);
C51 COMPILER V9.53.0.0   UART2                                                             12/26/2024 17:13:57 PAGE 4   

 174   1      }
 175          
 176          
 177          u8 parseModbusPacket(u8 *buffer, u16 length, ModbusPacket *parsedPacket) {
 178   1          u16 receivedCRC;
 179   1          u16 calculatedCRC; 
 180   1          unsigned int m;  
 181   1          if (length < 4) {
 182   2              // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞: –∞–¥—Ä–µ—Å (1 –±–∞–π—Ç) + —Ñ—É–Ω–∫—Ü–∏—è (1 –±–
             -∞–π—Ç) + CRC (2 –±–∞–π—Ç–∞)
 183   2              return 99 ;
 184   2          }
 185   1      
 186   1          // –ò–∑–≤–ª–µ–∫–∞–µ–º CRC –∏–∑ –∫–æ–Ω—Ü–∞ –ø–∞–∫–µ—Ç–∞
 187   1          
 188   1          receivedCRC = buffer[length - 2] | (buffer[length - 1] << 8);
 189   1      
 190   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 191   1          calculatedCRC = calculate_crc(buffer, length - 2);
 192   1          if (receivedCRC != calculatedCRC) {
 193   2              return 98 ; // –û—à–∏–±–∫–∞ CRC
 194   2          }
 195   1      
 196   1          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞
 197   1          parsedPacket->rcv_address = buffer[0];
 198   1          parsedPacket->rcv_functionCode = buffer[1];
 199   1          parsedPacket->rcv_dataLength = length - 4; // –û–±—â–∞—è –¥–ª–∏–Ω–∞ –º–∏–Ω—É—Å –∞–¥—Ä–µ—Å, –∫–æ–¥ —Ñ—É
             -–Ω–∫—Ü–∏–∏ –∏ CRC
 200   1          for (m = 0; m < parsedPacket->rcv_dataLength; m++) {
 201   2              parsedPacket->rcv_data[m] = buffer[2 + m];
 202   2          }
 203   1           return 1;
 204   1         
 205   1      }
 206          
 207          
 208          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1138    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    118      57
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      2    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
