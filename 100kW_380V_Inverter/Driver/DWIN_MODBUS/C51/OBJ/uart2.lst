C51 COMPILER V9.53.0.0   UART2                                                             12/24/2024 11:05:19 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART2
OBJECT MODULE PLACED IN ..\OBJ\uart2.obj
COMPILER INVOKED BY: C:\Program Files (x86)\KEIL\C51\BIN\C51.EXE ..\HANDWARE\UART2\uart2.c LARGE OMF2 OPTIMIZE(3,SIZE) B
                    -ROWSE INCDIR(..\USER;..\FUNC_HANDLER;..\GUI_APP;..\HANDWARE\UART2) DEBUG PRINT(..\OBJ\uart2.lst) TABS(2) OBJECT(..\OBJ\u
                    -art2.obj)

line level    source

   1          #include "uart2.h"
   2          
   3          
   4          
   5          volatile u8 modbus_addresses[5] = {1, 2, 3, 4, 5}; // –ê–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   6          volatile u16 start_reg = 0x0001;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
   7          volatile u16 num_reg = 4;                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
   8          volatile u8 current_dev = 0;                    // –¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞
   9          
  10          xdata volatile  u16 current_device=0;          
  11          
  12          
  13          #if(UART2_INT_EN)
  14          xdata u16 uart2_rx_sta;//bit15Used to mark whether a complete data packet has been received, bit[14:0] is 
             -used to store the length of the current data packetxdata u8
  15          xdata u8  uart2_buf[UART2_PACKET_MAX_LEN+2];//Leave 2 blank characters
  16          xdata u8  uart2_step;
  17          xdata u8  rcv_complete=0;  // –ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
  18          idata u16 data_len=0;
  19          //Serial port 2 interrupt service routine
  20          
  21          void uart2_isr() interrupt 4 {
  22   1          u8 res;
  23   1      
  24   1          if (RI0) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  25   2              RI0 = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞
  26   2      
  27   2              res = SBUF0;  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
  28   2      
  29   2              // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–∞–Ω
             -–Ω—ã–µ
  30   2              if (uart2_rx_sta & UART2_PACKET_OK) {
  31   3                  return;
  32   3              }
  33   2      
  34   2              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
  35   2              if (uart2_rx_sta < UART2_PACKET_MAX_LEN) {
  36   3                  uart2_buf[uart2_rx_sta++] = res;
  37   3              } else {
  38   3                  uart2_rx_sta = 0;  // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  39   3                  return;
  40   3              }
  41   2      
  42   2              // –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
  43   2              if (uart2_step<data_len) {  // –ü–µ—Ä–≤—ã–π –±–∞–π—Ç ‚Äî –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  44   3                  uart2_step++;
  45   3              } 
  46   2              
  47   2            if(uart2_step==data_len)  {  // –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ (–Ω
             -–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω)
  48   3                  uart2_rx_sta |= UART2_PACKET_OK;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞–∫–µ—Ç–∞
  49   3                rcv_complete=1;
  50   3                uart2_step =0;
C51 COMPILER V9.53.0.0   UART2                                                             12/24/2024 11:05:19 PAGE 2   

  51   3              }
  52   2          }
  53   1      }
  54          #endif
  55          
  56          
  57          //Serial port 2 initialization
  58          void uart2_init(u32 baud)
  59          {
  60   1        MUX_SEL |= 0x40;//Setting bit6 to 1 means to export the uart2 interface to P0.4 and P0.5
  61   1        P0MDOUT &= 0xCF;
  62   1        P0MDOUT |= 0x10;//Set the corresponding IO port output and input
  63   1        ADCON = 0x80;//Select SREL0H:L as baud rate generator
  64   1        SCON0 = 0x50;//Accept enable and mode settings
  65   1        PCON &= 0x7F;//SMOD=0
  66   1        //Baud rate setting, the formula is:
  67   1        //SMOD=0  SREL0H:L=1024-main frequency/(64*baud rate),SMOD=1   SREL0H:L=1024-main frequency/(32*baud rate)
  68   1        baud = 1024-(u16)(3225600.0f/baud);
  69   1        SREL0H = (baud>>8)&0xff;  
  70   1        SREL0L = baud&0xff;
  71   1        
  72   1        #if(UART2_INT_EN)
  73   1          ES0 = 1;//Interrupt enable
  74   1          EA = 1;
  75   1          //xdata variables must be initialized in functions
  76   1          uart2_rx_sta = 0;
  77   1          uart2_step = 0;
  78   1        #else
                  ES0 = 0;
                #endif
  81   1      
  82   1      }
  83          
  84          //Send a byte
  85          void u2_send_byte(u8 byte)
  86          {
  87   1        ES0 = 0;//Close the serial port 2 interrupt first
  88   1        SBUF0 = byte;
  89   1        while(!TI0);
  90   1        TI0 = 0;
  91   1        #if(UART2_INT_EN)
  92   1          ES0 = 1;//Re-open interrupt
  93   1        #endif
  94   1      }
  95          
  96          
  97          
  98          //Send data
  99          void u2_send_bytes(u8 *bytes,u16 len)
 100          {
 101   1        u16 i;
 102   1        
 103   1        ES0 = 0;//Close the serial port 2 interrupt first
 104   1        for(i=0;i<len;i++)
 105   1        {
 106   2          SBUF0 = bytes[i];
 107   2          while(!TI0);
 108   2          TI0 = 0;
 109   2        }
 110   1        #if(UART2_INT_EN)
 111   1          ES0 = 1;//Re-open interrupt
 112   1        #endif
C51 COMPILER V9.53.0.0   UART2                                                             12/24/2024 11:05:19 PAGE 3   

 113   1      }
 114          
 115          
 116          //Implement printf function with uart2 serial port
 117          char putchar(char c)
 118          {
 119   1        u2_send_byte(c);
 120   1        
 121   1        return c;
 122   1      }
 123          
 124          
 125          
 126          
 127          u16 calculate_crc(unsigned char *buffer, unsigned char length) {
 128   1          unsigned int temp, temp2, flag;
 129   1          unsigned int i;               // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `i`
 130   1          unsigned char j;              // –í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `j`
 131   1      
 132   1          temp = 0xFFFF;
 133   1      
 134   1          for (i = 0; i < length; i++) {
 135   2              temp = temp ^ buffer[i];
 136   2              for (j = 0; j < 8; j++) {
 137   3                  flag = temp & 0x0001;
 138   3                  temp >>= 1;
 139   3                  if (flag)
 140   3                      temp ^= 0xA001;
 141   3              }
 142   2          }
 143   1      
 144   1          // Reverse byte order.
 145   1          temp2 = temp >> 8;
 146   1          temp = (temp << 8) | temp2;
 147   1          temp &= 0xFFFF;
 148   1      
 149   1          return temp;
 150   1      }
 151          
 152          
 153          // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Modbus-–∑–∞–ø—Ä–æ—Å–∞
 154          void modbus_request(u8 dev_addr,u8 dev_comd, u16 start_reg, u16 num_reg) {
 155   1          u8 request[8];
 156   1          u16 crc;
 157   1      
 158   1          // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å Modbus
 159   1          request[0] = dev_addr;                      // –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 160   1          request[1] = dev_comd;               // –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ 
 161   1          request[2] = (start_reg >> 8) & 0xFF; // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 162   1          request[3] = start_reg & 0xFF;        // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 163   1          request[4] = (num_reg >> 8) & 0xFF;  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–
             -≤
 164   1          request[5] = num_reg & 0xFF;         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–
             -≤
 165   1      
 166   1          // –í—ã—á–∏—Å–ª—è–µ–º CRC
 167   1          crc = calculate_crc(request, 6);
 168   1          request[6] = crc & 0xFF;                   // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç CRC
 169   1          request[7] = (crc >> 8) & 0xFF;            // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç CRC
 170   1      
 171   1          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ UART
 172   1          u2_send_bytes(request, 8);
C51 COMPILER V9.53.0.0   UART2                                                             12/24/2024 11:05:19 PAGE 4   

 173   1      }
 174          
 175          // –§—É–Ω–∫—Ü–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ 5 –∞–¥—Ä–µ—Å–æ–≤ Modbus
 176          
 177          void poll_modbus_devices() {
 178   1          u8 modbus_addresses[5] = {1, 2, 3, 4, 5}; // –ê–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 179   1          u8 dev_comd=3;
 180   1          u16 start_reg = 0x0001;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
 181   1          u16 num_reg = 4;                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
 182   1        unsigned int k; 
 183   1         
 184   1              for (k = 0; k < 5; k++) {
 185   2                  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
 186   2                  modbus_request(modbus_addresses[k],dev_comd, start_reg, num_reg);
 187   2      
 188   2                  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ
             -–∂–µ–Ω–∏—è
 189   2                  sys_delay_ms(900);
 190   2              }
 191   1      
 192   1              // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º –æ–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—
             -Å—Ç–≤
 193   1              sys_delay_ms(500);
 194   1          
 195   1      }
 196          
 197          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    948    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =    118      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      2    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
